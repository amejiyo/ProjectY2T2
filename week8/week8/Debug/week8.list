
week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007c1c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007db8  08007db8  00017db8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08007e18  08007e18  0002009c  2**0
                  CONTENTS
  4 .ARM          00000008  08007e18  08007e18  00017e18  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08007e20  08007e20  0002009c  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08007e20  08007e20  00017e20  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08007e24  08007e24  00017e24  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         0000009c  20000000  08007e28  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          0000026c  200000a0  08007ec4  000200a0  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000030c  08007ec4  0002030c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  0002009c  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000ef28  00000000  00000000  000200cc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001e8a  00000000  00000000  0002eff4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000ec8  00000000  00000000  00030e80  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000e18  00000000  00000000  00031d48  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  0001666d  00000000  00000000  00032b60  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000f0a1  00000000  00000000  000491cd  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008efd5  00000000  00000000  0005826e  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000e7243  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000043cc  00000000  00000000  000e7298  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a0 	.word	0x200000a0
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007d9c 	.word	0x08007d9c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000a4 	.word	0x200000a4
 80001d4:	08007d9c 	.word	0x08007d9c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f001 fd8a 	bl	8002b80 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f892 	bl	8001194 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 fa94 	bl	800159c <MX_GPIO_Init>
  MX_USART2_UART_Init();
 8001074:	f000 fa3e 	bl	80014f4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 8001078:	f000 f922 	bl	80012c0 <MX_TIM1_Init>
  MX_TIM2_Init();
 800107c:	f000 f978 	bl	8001370 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001080:	f000 f9c2 	bl	8001408 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001084:	f000 fa60 	bl	8001548 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 8001088:	f000 f8ec 	bl	8001264 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
	//start micros
	HAL_TIM_Base_Start_IT(&htim2);
 800108c:	4838      	ldr	r0, [pc, #224]	; (8001170 <main+0x10c>)
 800108e:	f004 fb56 	bl	800573e <HAL_TIM_Base_Start_IT>
	//Encoder start
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001092:	213c      	movs	r1, #60	; 0x3c
 8001094:	4837      	ldr	r0, [pc, #220]	; (8001174 <main+0x110>)
 8001096:	f004 fc6f 	bl	8005978 <HAL_TIM_Encoder_Start>
	//PWM start AIN1
	HAL_TIM_Base_Start(&htim3);
 800109a:	4837      	ldr	r0, [pc, #220]	; (8001178 <main+0x114>)
 800109c:	f004 fb2b 	bl	80056f6 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	4835      	ldr	r0, [pc, #212]	; (8001178 <main+0x114>)
 80010a4:	f004 fba4 	bl	80057f0 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 5000;
 80010a8:	4b33      	ldr	r3, [pc, #204]	; (8001178 <main+0x114>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
	I2C();
 80010b2:	f000 fb37 	bl	8001724 <I2C>
	while (1)
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */
		gotoSethome();
 80010b6:	f000 ff27 	bl	8001f08 <gotoSethome>
		if (micros() - Timestamp >= dt){
 80010ba:	f001 faf5 	bl	80026a8 <micros>
 80010be:	4b2f      	ldr	r3, [pc, #188]	; (800117c <main+0x118>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	1a84      	subs	r4, r0, r2
 80010c6:	eb61 0503 	sbc.w	r5, r1, r3
 80010ca:	4b2d      	ldr	r3, [pc, #180]	; (8001180 <main+0x11c>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	429d      	cmp	r5, r3
 80010d6:	bf08      	it	eq
 80010d8:	4294      	cmpeq	r4, r2
 80010da:	d3ec      	bcc.n	80010b6 <main+0x52>
			Timestamp = micros();
 80010dc:	f001 fae4 	bl	80026a8 <micros>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4925      	ldr	r1, [pc, #148]	; (800117c <main+0x118>)
 80010e6:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory(Timestamp);
 80010ea:	4b24      	ldr	r3, [pc, #144]	; (800117c <main+0x118>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f000 fb88 	bl	8001808 <trajectory>
			kalman();
 80010f8:	f000 ff1a 	bl	8001f30 <kalman>
			pidVelocity();
 80010fc:	f000 fe64 	bl	8001dc8 <pidVelocity>
			if(velocity < 0){
 8001100:	4b20      	ldr	r3, [pc, #128]	; (8001184 <main+0x120>)
 8001102:	edd3 7a00 	vldr	s15, [r3]
 8001106:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 800110a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800110e:	d50c      	bpl.n	800112a <main+0xc6>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8001110:	2201      	movs	r2, #1
 8001112:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001116:	481c      	ldr	r0, [pc, #112]	; (8001188 <main+0x124>)
 8001118:	f002 f89c 	bl	8003254 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 800111c:	2200      	movs	r2, #0
 800111e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001122:	4819      	ldr	r0, [pc, #100]	; (8001188 <main+0x124>)
 8001124:	f002 f896 	bl	8003254 <HAL_GPIO_WritePin>
 8001128:	e013      	b.n	8001152 <main+0xee>
			}
			else if (velocity > 0){
 800112a:	4b16      	ldr	r3, [pc, #88]	; (8001184 <main+0x120>)
 800112c:	edd3 7a00 	vldr	s15, [r3]
 8001130:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001134:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001138:	dd0b      	ble.n	8001152 <main+0xee>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800113a:	2201      	movs	r2, #1
 800113c:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001140:	4811      	ldr	r0, [pc, #68]	; (8001188 <main+0x124>)
 8001142:	f002 f887 	bl	8003254 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001146:	2200      	movs	r2, #0
 8001148:	f44f 7180 	mov.w	r1, #256	; 0x100
 800114c:	480e      	ldr	r0, [pc, #56]	; (8001188 <main+0x124>)
 800114e:	f002 f881 	bl	8003254 <HAL_GPIO_WritePin>
			}
			htim3.Instance->CCR1 = abs(PWMOut);
 8001152:	4b0e      	ldr	r3, [pc, #56]	; (800118c <main+0x128>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800115a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 800115e:	4b06      	ldr	r3, [pc, #24]	; (8001178 <main+0x114>)
 8001160:	681b      	ldr	r3, [r3, #0]
 8001162:	635a      	str	r2, [r3, #52]	; 0x34
			state[1] = state[0];
 8001164:	4b0a      	ldr	r3, [pc, #40]	; (8001190 <main+0x12c>)
 8001166:	781a      	ldrb	r2, [r3, #0]
 8001168:	4b09      	ldr	r3, [pc, #36]	; (8001190 <main+0x12c>)
 800116a:	705a      	strb	r2, [r3, #1]
		gotoSethome();
 800116c:	e7a3      	b.n	80010b6 <main+0x52>
 800116e:	bf00      	nop
 8001170:	20000288 	.word	0x20000288
 8001174:	20000208 	.word	0x20000208
 8001178:	200001c8 	.word	0x200001c8
 800117c:	20000100 	.word	0x20000100
 8001180:	20000008 	.word	0x20000008
 8001184:	200000d0 	.word	0x200000d0
 8001188:	40020400 	.word	0x40020400
 800118c:	20000000 	.word	0x20000000
 8001190:	200000f8 	.word	0x200000f8

08001194 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001194:	b580      	push	{r7, lr}
 8001196:	b094      	sub	sp, #80	; 0x50
 8001198:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800119a:	f107 0320 	add.w	r3, r7, #32
 800119e:	2230      	movs	r2, #48	; 0x30
 80011a0:	2100      	movs	r1, #0
 80011a2:	4618      	mov	r0, r3
 80011a4:	f005 fe3c 	bl	8006e20 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 80011a8:	f107 030c 	add.w	r3, r7, #12
 80011ac:	2200      	movs	r2, #0
 80011ae:	601a      	str	r2, [r3, #0]
 80011b0:	605a      	str	r2, [r3, #4]
 80011b2:	609a      	str	r2, [r3, #8]
 80011b4:	60da      	str	r2, [r3, #12]
 80011b6:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 80011b8:	2300      	movs	r3, #0
 80011ba:	60bb      	str	r3, [r7, #8]
 80011bc:	4b27      	ldr	r3, [pc, #156]	; (800125c <SystemClock_Config+0xc8>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	4a26      	ldr	r2, [pc, #152]	; (800125c <SystemClock_Config+0xc8>)
 80011c2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011c6:	6413      	str	r3, [r2, #64]	; 0x40
 80011c8:	4b24      	ldr	r3, [pc, #144]	; (800125c <SystemClock_Config+0xc8>)
 80011ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011cc:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011d0:	60bb      	str	r3, [r7, #8]
 80011d2:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011d4:	2300      	movs	r3, #0
 80011d6:	607b      	str	r3, [r7, #4]
 80011d8:	4b21      	ldr	r3, [pc, #132]	; (8001260 <SystemClock_Config+0xcc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	4a20      	ldr	r2, [pc, #128]	; (8001260 <SystemClock_Config+0xcc>)
 80011de:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011e2:	6013      	str	r3, [r2, #0]
 80011e4:	4b1e      	ldr	r3, [pc, #120]	; (8001260 <SystemClock_Config+0xcc>)
 80011e6:	681b      	ldr	r3, [r3, #0]
 80011e8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ec:	607b      	str	r3, [r7, #4]
 80011ee:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011f0:	2302      	movs	r3, #2
 80011f2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011f4:	2301      	movs	r3, #1
 80011f6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011f8:	2310      	movs	r3, #16
 80011fa:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011fc:	2302      	movs	r3, #2
 80011fe:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001200:	2300      	movs	r3, #0
 8001202:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 8001204:	2308      	movs	r3, #8
 8001206:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 8001208:	2364      	movs	r3, #100	; 0x64
 800120a:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800120c:	2302      	movs	r3, #2
 800120e:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 8001210:	2304      	movs	r3, #4
 8001212:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001214:	f107 0320 	add.w	r3, r7, #32
 8001218:	4618      	mov	r0, r3
 800121a:	f003 fdd5 	bl	8004dc8 <HAL_RCC_OscConfig>
 800121e:	4603      	mov	r3, r0
 8001220:	2b00      	cmp	r3, #0
 8001222:	d001      	beq.n	8001228 <SystemClock_Config+0x94>
  {
    Error_Handler();
 8001224:	f001 fa5a 	bl	80026dc <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001228:	230f      	movs	r3, #15
 800122a:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800122c:	2302      	movs	r3, #2
 800122e:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001230:	2300      	movs	r3, #0
 8001232:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001234:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001238:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800123a:	2300      	movs	r3, #0
 800123c:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800123e:	f107 030c 	add.w	r3, r7, #12
 8001242:	2103      	movs	r1, #3
 8001244:	4618      	mov	r0, r3
 8001246:	f004 f82f 	bl	80052a8 <HAL_RCC_ClockConfig>
 800124a:	4603      	mov	r3, r0
 800124c:	2b00      	cmp	r3, #0
 800124e:	d001      	beq.n	8001254 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001250:	f001 fa44 	bl	80026dc <Error_Handler>
  }
}
 8001254:	bf00      	nop
 8001256:	3750      	adds	r7, #80	; 0x50
 8001258:	46bd      	mov	sp, r7
 800125a:	bd80      	pop	{r7, pc}
 800125c:	40023800 	.word	0x40023800
 8001260:	40007000 	.word	0x40007000

08001264 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001264:	b580      	push	{r7, lr}
 8001266:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001268:	4b12      	ldr	r3, [pc, #72]	; (80012b4 <MX_I2C1_Init+0x50>)
 800126a:	4a13      	ldr	r2, [pc, #76]	; (80012b8 <MX_I2C1_Init+0x54>)
 800126c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800126e:	4b11      	ldr	r3, [pc, #68]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001270:	4a12      	ldr	r2, [pc, #72]	; (80012bc <MX_I2C1_Init+0x58>)
 8001272:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001274:	4b0f      	ldr	r3, [pc, #60]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800127a:	4b0e      	ldr	r3, [pc, #56]	; (80012b4 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001280:	4b0c      	ldr	r3, [pc, #48]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001282:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001286:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001288:	4b0a      	ldr	r3, [pc, #40]	; (80012b4 <MX_I2C1_Init+0x50>)
 800128a:	2200      	movs	r2, #0
 800128c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800128e:	4b09      	ldr	r3, [pc, #36]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001290:	2200      	movs	r2, #0
 8001292:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001294:	4b07      	ldr	r3, [pc, #28]	; (80012b4 <MX_I2C1_Init+0x50>)
 8001296:	2200      	movs	r2, #0
 8001298:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800129a:	4b06      	ldr	r3, [pc, #24]	; (80012b4 <MX_I2C1_Init+0x50>)
 800129c:	2200      	movs	r2, #0
 800129e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 80012a0:	4804      	ldr	r0, [pc, #16]	; (80012b4 <MX_I2C1_Init+0x50>)
 80012a2:	f002 f809 	bl	80032b8 <HAL_I2C_Init>
 80012a6:	4603      	mov	r3, r0
 80012a8:	2b00      	cmp	r3, #0
 80012aa:	d001      	beq.n	80012b0 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 80012ac:	f001 fa16 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 80012b0:	bf00      	nop
 80012b2:	bd80      	pop	{r7, pc}
 80012b4:	20000174 	.word	0x20000174
 80012b8:	40005400 	.word	0x40005400
 80012bc:	000186a0 	.word	0x000186a0

080012c0 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 80012c0:	b580      	push	{r7, lr}
 80012c2:	b08c      	sub	sp, #48	; 0x30
 80012c4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 80012c6:	f107 030c 	add.w	r3, r7, #12
 80012ca:	2224      	movs	r2, #36	; 0x24
 80012cc:	2100      	movs	r1, #0
 80012ce:	4618      	mov	r0, r3
 80012d0:	f005 fda6 	bl	8006e20 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012d4:	1d3b      	adds	r3, r7, #4
 80012d6:	2200      	movs	r2, #0
 80012d8:	601a      	str	r2, [r3, #0]
 80012da:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012dc:	4b22      	ldr	r3, [pc, #136]	; (8001368 <MX_TIM1_Init+0xa8>)
 80012de:	4a23      	ldr	r2, [pc, #140]	; (800136c <MX_TIM1_Init+0xac>)
 80012e0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012e2:	4b21      	ldr	r3, [pc, #132]	; (8001368 <MX_TIM1_Init+0xa8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012e8:	4b1f      	ldr	r3, [pc, #124]	; (8001368 <MX_TIM1_Init+0xa8>)
 80012ea:	2200      	movs	r2, #0
 80012ec:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 80012ee:	4b1e      	ldr	r3, [pc, #120]	; (8001368 <MX_TIM1_Init+0xa8>)
 80012f0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012f4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012f6:	4b1c      	ldr	r3, [pc, #112]	; (8001368 <MX_TIM1_Init+0xa8>)
 80012f8:	2200      	movs	r2, #0
 80012fa:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012fc:	4b1a      	ldr	r3, [pc, #104]	; (8001368 <MX_TIM1_Init+0xa8>)
 80012fe:	2200      	movs	r2, #0
 8001300:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001302:	4b19      	ldr	r3, [pc, #100]	; (8001368 <MX_TIM1_Init+0xa8>)
 8001304:	2200      	movs	r2, #0
 8001306:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001308:	2303      	movs	r3, #3
 800130a:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800130c:	2300      	movs	r3, #0
 800130e:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001310:	2301      	movs	r3, #1
 8001312:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001314:	2300      	movs	r3, #0
 8001316:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 8001318:	2303      	movs	r3, #3
 800131a:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800131c:	2300      	movs	r3, #0
 800131e:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001320:	2301      	movs	r3, #1
 8001322:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001324:	2300      	movs	r3, #0
 8001326:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8001328:	2305      	movs	r3, #5
 800132a:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800132c:	f107 030c 	add.w	r3, r7, #12
 8001330:	4619      	mov	r1, r3
 8001332:	480d      	ldr	r0, [pc, #52]	; (8001368 <MX_TIM1_Init+0xa8>)
 8001334:	f004 fa8e 	bl	8005854 <HAL_TIM_Encoder_Init>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 800133e:	f001 f9cd 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001342:	2300      	movs	r3, #0
 8001344:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001346:	2300      	movs	r3, #0
 8001348:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800134a:	1d3b      	adds	r3, r7, #4
 800134c:	4619      	mov	r1, r3
 800134e:	4806      	ldr	r0, [pc, #24]	; (8001368 <MX_TIM1_Init+0xa8>)
 8001350:	f005 f8d0 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 8001354:	4603      	mov	r3, r0
 8001356:	2b00      	cmp	r3, #0
 8001358:	d001      	beq.n	800135e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800135a:	f001 f9bf 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800135e:	bf00      	nop
 8001360:	3730      	adds	r7, #48	; 0x30
 8001362:	46bd      	mov	sp, r7
 8001364:	bd80      	pop	{r7, pc}
 8001366:	bf00      	nop
 8001368:	20000208 	.word	0x20000208
 800136c:	40010000 	.word	0x40010000

08001370 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001370:	b580      	push	{r7, lr}
 8001372:	b086      	sub	sp, #24
 8001374:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001376:	f107 0308 	add.w	r3, r7, #8
 800137a:	2200      	movs	r2, #0
 800137c:	601a      	str	r2, [r3, #0]
 800137e:	605a      	str	r2, [r3, #4]
 8001380:	609a      	str	r2, [r3, #8]
 8001382:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001384:	463b      	mov	r3, r7
 8001386:	2200      	movs	r2, #0
 8001388:	601a      	str	r2, [r3, #0]
 800138a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800138c:	4b1d      	ldr	r3, [pc, #116]	; (8001404 <MX_TIM2_Init+0x94>)
 800138e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001392:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001394:	4b1b      	ldr	r3, [pc, #108]	; (8001404 <MX_TIM2_Init+0x94>)
 8001396:	2263      	movs	r2, #99	; 0x63
 8001398:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800139a:	4b1a      	ldr	r3, [pc, #104]	; (8001404 <MX_TIM2_Init+0x94>)
 800139c:	2200      	movs	r2, #0
 800139e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 80013a0:	4b18      	ldr	r3, [pc, #96]	; (8001404 <MX_TIM2_Init+0x94>)
 80013a2:	f04f 32ff 	mov.w	r2, #4294967295
 80013a6:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013a8:	4b16      	ldr	r3, [pc, #88]	; (8001404 <MX_TIM2_Init+0x94>)
 80013aa:	2200      	movs	r2, #0
 80013ac:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013ae:	4b15      	ldr	r3, [pc, #84]	; (8001404 <MX_TIM2_Init+0x94>)
 80013b0:	2200      	movs	r2, #0
 80013b2:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 80013b4:	4813      	ldr	r0, [pc, #76]	; (8001404 <MX_TIM2_Init+0x94>)
 80013b6:	f004 f973 	bl	80056a0 <HAL_TIM_Base_Init>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 80013c0:	f001 f98c 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013c4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013c8:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ca:	f107 0308 	add.w	r3, r7, #8
 80013ce:	4619      	mov	r1, r3
 80013d0:	480c      	ldr	r0, [pc, #48]	; (8001404 <MX_TIM2_Init+0x94>)
 80013d2:	f004 fcd7 	bl	8005d84 <HAL_TIM_ConfigClockSource>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013dc:	f001 f97e 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013e0:	2300      	movs	r3, #0
 80013e2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013e4:	2300      	movs	r3, #0
 80013e6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013e8:	463b      	mov	r3, r7
 80013ea:	4619      	mov	r1, r3
 80013ec:	4805      	ldr	r0, [pc, #20]	; (8001404 <MX_TIM2_Init+0x94>)
 80013ee:	f005 f881 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 80013f2:	4603      	mov	r3, r0
 80013f4:	2b00      	cmp	r3, #0
 80013f6:	d001      	beq.n	80013fc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013f8:	f001 f970 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013fc:	bf00      	nop
 80013fe:	3718      	adds	r7, #24
 8001400:	46bd      	mov	sp, r7
 8001402:	bd80      	pop	{r7, pc}
 8001404:	20000288 	.word	0x20000288

08001408 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 8001408:	b580      	push	{r7, lr}
 800140a:	b08e      	sub	sp, #56	; 0x38
 800140c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800140e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001412:	2200      	movs	r2, #0
 8001414:	601a      	str	r2, [r3, #0]
 8001416:	605a      	str	r2, [r3, #4]
 8001418:	609a      	str	r2, [r3, #8]
 800141a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800141c:	f107 0320 	add.w	r3, r7, #32
 8001420:	2200      	movs	r2, #0
 8001422:	601a      	str	r2, [r3, #0]
 8001424:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 8001426:	1d3b      	adds	r3, r7, #4
 8001428:	2200      	movs	r2, #0
 800142a:	601a      	str	r2, [r3, #0]
 800142c:	605a      	str	r2, [r3, #4]
 800142e:	609a      	str	r2, [r3, #8]
 8001430:	60da      	str	r2, [r3, #12]
 8001432:	611a      	str	r2, [r3, #16]
 8001434:	615a      	str	r2, [r3, #20]
 8001436:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001438:	4b2c      	ldr	r3, [pc, #176]	; (80014ec <MX_TIM3_Init+0xe4>)
 800143a:	4a2d      	ldr	r2, [pc, #180]	; (80014f0 <MX_TIM3_Init+0xe8>)
 800143c:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 800143e:	4b2b      	ldr	r3, [pc, #172]	; (80014ec <MX_TIM3_Init+0xe4>)
 8001440:	2263      	movs	r2, #99	; 0x63
 8001442:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001444:	4b29      	ldr	r3, [pc, #164]	; (80014ec <MX_TIM3_Init+0xe4>)
 8001446:	2200      	movs	r2, #0
 8001448:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800144a:	4b28      	ldr	r3, [pc, #160]	; (80014ec <MX_TIM3_Init+0xe4>)
 800144c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001450:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001452:	4b26      	ldr	r3, [pc, #152]	; (80014ec <MX_TIM3_Init+0xe4>)
 8001454:	2200      	movs	r2, #0
 8001456:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001458:	4b24      	ldr	r3, [pc, #144]	; (80014ec <MX_TIM3_Init+0xe4>)
 800145a:	2200      	movs	r2, #0
 800145c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800145e:	4823      	ldr	r0, [pc, #140]	; (80014ec <MX_TIM3_Init+0xe4>)
 8001460:	f004 f91e 	bl	80056a0 <HAL_TIM_Base_Init>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800146a:	f001 f937 	bl	80026dc <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800146e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001472:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001474:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001478:	4619      	mov	r1, r3
 800147a:	481c      	ldr	r0, [pc, #112]	; (80014ec <MX_TIM3_Init+0xe4>)
 800147c:	f004 fc82 	bl	8005d84 <HAL_TIM_ConfigClockSource>
 8001480:	4603      	mov	r3, r0
 8001482:	2b00      	cmp	r3, #0
 8001484:	d001      	beq.n	800148a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001486:	f001 f929 	bl	80026dc <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800148a:	4818      	ldr	r0, [pc, #96]	; (80014ec <MX_TIM3_Init+0xe4>)
 800148c:	f004 f97b 	bl	8005786 <HAL_TIM_PWM_Init>
 8001490:	4603      	mov	r3, r0
 8001492:	2b00      	cmp	r3, #0
 8001494:	d001      	beq.n	800149a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001496:	f001 f921 	bl	80026dc <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800149a:	2300      	movs	r3, #0
 800149c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800149e:	2300      	movs	r3, #0
 80014a0:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 80014a2:	f107 0320 	add.w	r3, r7, #32
 80014a6:	4619      	mov	r1, r3
 80014a8:	4810      	ldr	r0, [pc, #64]	; (80014ec <MX_TIM3_Init+0xe4>)
 80014aa:	f005 f823 	bl	80064f4 <HAL_TIMEx_MasterConfigSynchronization>
 80014ae:	4603      	mov	r3, r0
 80014b0:	2b00      	cmp	r3, #0
 80014b2:	d001      	beq.n	80014b8 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 80014b4:	f001 f912 	bl	80026dc <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 80014b8:	2360      	movs	r3, #96	; 0x60
 80014ba:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 80014bc:	2300      	movs	r3, #0
 80014be:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014c0:	2300      	movs	r3, #0
 80014c2:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014c4:	2300      	movs	r3, #0
 80014c6:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014c8:	1d3b      	adds	r3, r7, #4
 80014ca:	2200      	movs	r2, #0
 80014cc:	4619      	mov	r1, r3
 80014ce:	4807      	ldr	r0, [pc, #28]	; (80014ec <MX_TIM3_Init+0xe4>)
 80014d0:	f004 fb92 	bl	8005bf8 <HAL_TIM_PWM_ConfigChannel>
 80014d4:	4603      	mov	r3, r0
 80014d6:	2b00      	cmp	r3, #0
 80014d8:	d001      	beq.n	80014de <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014da:	f001 f8ff 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014de:	4803      	ldr	r0, [pc, #12]	; (80014ec <MX_TIM3_Init+0xe4>)
 80014e0:	f001 fa06 	bl	80028f0 <HAL_TIM_MspPostInit>

}
 80014e4:	bf00      	nop
 80014e6:	3738      	adds	r7, #56	; 0x38
 80014e8:	46bd      	mov	sp, r7
 80014ea:	bd80      	pop	{r7, pc}
 80014ec:	200001c8 	.word	0x200001c8
 80014f0:	40000400 	.word	0x40000400

080014f4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014f4:	b580      	push	{r7, lr}
 80014f6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014f8:	4b11      	ldr	r3, [pc, #68]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 80014fa:	4a12      	ldr	r2, [pc, #72]	; (8001544 <MX_USART2_UART_Init+0x50>)
 80014fc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 115200;
 80014fe:	4b10      	ldr	r3, [pc, #64]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001500:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001504:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001506:	4b0e      	ldr	r3, [pc, #56]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001508:	2200      	movs	r2, #0
 800150a:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 800150c:	4b0c      	ldr	r3, [pc, #48]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800150e:	2200      	movs	r2, #0
 8001510:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_NONE;
 8001512:	4b0b      	ldr	r3, [pc, #44]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001514:	2200      	movs	r2, #0
 8001516:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 8001518:	4b09      	ldr	r3, [pc, #36]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800151a:	220c      	movs	r2, #12
 800151c:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800151e:	4b08      	ldr	r3, [pc, #32]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001524:	4b06      	ldr	r3, [pc, #24]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 800152a:	4805      	ldr	r0, [pc, #20]	; (8001540 <MX_USART2_UART_Init+0x4c>)
 800152c:	f005 f864 	bl	80065f8 <HAL_UART_Init>
 8001530:	4603      	mov	r3, r0
 8001532:	2b00      	cmp	r3, #0
 8001534:	d001      	beq.n	800153a <MX_USART2_UART_Init+0x46>
  {
    Error_Handler();
 8001536:	f001 f8d1 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 800153a:	bf00      	nop
 800153c:	bd80      	pop	{r7, pc}
 800153e:	bf00      	nop
 8001540:	200002c8 	.word	0x200002c8
 8001544:	40004400 	.word	0x40004400

08001548 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001548:	b580      	push	{r7, lr}
 800154a:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 800154c:	4b11      	ldr	r3, [pc, #68]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800154e:	4a12      	ldr	r2, [pc, #72]	; (8001598 <MX_USART6_UART_Init+0x50>)
 8001550:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001552:	4b10      	ldr	r3, [pc, #64]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001554:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001558:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800155a:	4b0e      	ldr	r3, [pc, #56]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001560:	4b0c      	ldr	r3, [pc, #48]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001566:	4b0b      	ldr	r3, [pc, #44]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001568:	2200      	movs	r2, #0
 800156a:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 800156c:	4b09      	ldr	r3, [pc, #36]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800156e:	220c      	movs	r2, #12
 8001570:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001572:	4b08      	ldr	r3, [pc, #32]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001574:	2200      	movs	r2, #0
 8001576:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001578:	4b06      	ldr	r3, [pc, #24]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 800157a:	2200      	movs	r2, #0
 800157c:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800157e:	4805      	ldr	r0, [pc, #20]	; (8001594 <MX_USART6_UART_Init+0x4c>)
 8001580:	f005 f83a 	bl	80065f8 <HAL_UART_Init>
 8001584:	4603      	mov	r3, r0
 8001586:	2b00      	cmp	r3, #0
 8001588:	d001      	beq.n	800158e <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800158a:	f001 f8a7 	bl	80026dc <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800158e:	bf00      	nop
 8001590:	bd80      	pop	{r7, pc}
 8001592:	bf00      	nop
 8001594:	20000248 	.word	0x20000248
 8001598:	40011400 	.word	0x40011400

0800159c <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 800159c:	b580      	push	{r7, lr}
 800159e:	b08a      	sub	sp, #40	; 0x28
 80015a0:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015a2:	f107 0314 	add.w	r3, r7, #20
 80015a6:	2200      	movs	r2, #0
 80015a8:	601a      	str	r2, [r3, #0]
 80015aa:	605a      	str	r2, [r3, #4]
 80015ac:	609a      	str	r2, [r3, #8]
 80015ae:	60da      	str	r2, [r3, #12]
 80015b0:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015b2:	2300      	movs	r3, #0
 80015b4:	613b      	str	r3, [r7, #16]
 80015b6:	4b41      	ldr	r3, [pc, #260]	; (80016bc <MX_GPIO_Init+0x120>)
 80015b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ba:	4a40      	ldr	r2, [pc, #256]	; (80016bc <MX_GPIO_Init+0x120>)
 80015bc:	f043 0304 	orr.w	r3, r3, #4
 80015c0:	6313      	str	r3, [r2, #48]	; 0x30
 80015c2:	4b3e      	ldr	r3, [pc, #248]	; (80016bc <MX_GPIO_Init+0x120>)
 80015c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015c6:	f003 0304 	and.w	r3, r3, #4
 80015ca:	613b      	str	r3, [r7, #16]
 80015cc:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015ce:	2300      	movs	r3, #0
 80015d0:	60fb      	str	r3, [r7, #12]
 80015d2:	4b3a      	ldr	r3, [pc, #232]	; (80016bc <MX_GPIO_Init+0x120>)
 80015d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015d6:	4a39      	ldr	r2, [pc, #228]	; (80016bc <MX_GPIO_Init+0x120>)
 80015d8:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015dc:	6313      	str	r3, [r2, #48]	; 0x30
 80015de:	4b37      	ldr	r3, [pc, #220]	; (80016bc <MX_GPIO_Init+0x120>)
 80015e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015e6:	60fb      	str	r3, [r7, #12]
 80015e8:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	60bb      	str	r3, [r7, #8]
 80015ee:	4b33      	ldr	r3, [pc, #204]	; (80016bc <MX_GPIO_Init+0x120>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a32      	ldr	r2, [pc, #200]	; (80016bc <MX_GPIO_Init+0x120>)
 80015f4:	f043 0301 	orr.w	r3, r3, #1
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b30      	ldr	r3, [pc, #192]	; (80016bc <MX_GPIO_Init+0x120>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0301 	and.w	r3, r3, #1
 8001602:	60bb      	str	r3, [r7, #8]
 8001604:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	607b      	str	r3, [r7, #4]
 800160a:	4b2c      	ldr	r3, [pc, #176]	; (80016bc <MX_GPIO_Init+0x120>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a2b      	ldr	r2, [pc, #172]	; (80016bc <MX_GPIO_Init+0x120>)
 8001610:	f043 0302 	orr.w	r3, r3, #2
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b29      	ldr	r3, [pc, #164]	; (80016bc <MX_GPIO_Init+0x120>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0302 	and.w	r3, r3, #2
 800161e:	607b      	str	r3, [r7, #4]
 8001620:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001622:	2200      	movs	r2, #0
 8001624:	2120      	movs	r1, #32
 8001626:	4826      	ldr	r0, [pc, #152]	; (80016c0 <MX_GPIO_Init+0x124>)
 8001628:	f001 fe14 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 800162c:	2200      	movs	r2, #0
 800162e:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001632:	4824      	ldr	r0, [pc, #144]	; (80016c4 <MX_GPIO_Init+0x128>)
 8001634:	f001 fe0e 	bl	8003254 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001638:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800163c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800163e:	4b22      	ldr	r3, [pc, #136]	; (80016c8 <MX_GPIO_Init+0x12c>)
 8001640:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001642:	2300      	movs	r3, #0
 8001644:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001646:	f107 0314 	add.w	r3, r7, #20
 800164a:	4619      	mov	r1, r3
 800164c:	481f      	ldr	r0, [pc, #124]	; (80016cc <MX_GPIO_Init+0x130>)
 800164e:	f001 fc7d 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001652:	2320      	movs	r3, #32
 8001654:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001656:	2301      	movs	r3, #1
 8001658:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800165a:	2300      	movs	r3, #0
 800165c:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800165e:	2300      	movs	r3, #0
 8001660:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001662:	f107 0314 	add.w	r3, r7, #20
 8001666:	4619      	mov	r1, r3
 8001668:	4815      	ldr	r0, [pc, #84]	; (80016c0 <MX_GPIO_Init+0x124>)
 800166a:	f001 fc6f 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800166e:	2380      	movs	r3, #128	; 0x80
 8001670:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001672:	4b17      	ldr	r3, [pc, #92]	; (80016d0 <MX_GPIO_Init+0x134>)
 8001674:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001676:	2300      	movs	r3, #0
 8001678:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800167a:	f107 0314 	add.w	r3, r7, #20
 800167e:	4619      	mov	r1, r3
 8001680:	480f      	ldr	r0, [pc, #60]	; (80016c0 <MX_GPIO_Init+0x124>)
 8001682:	f001 fc63 	bl	8002f4c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800168a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800168c:	2311      	movs	r3, #17
 800168e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001690:	2301      	movs	r3, #1
 8001692:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	4809      	ldr	r0, [pc, #36]	; (80016c4 <MX_GPIO_Init+0x128>)
 80016a0:	f001 fc54 	bl	8002f4c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016a4:	2200      	movs	r2, #0
 80016a6:	2100      	movs	r1, #0
 80016a8:	2017      	movs	r0, #23
 80016aa:	f001 fbda 	bl	8002e62 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016ae:	2017      	movs	r0, #23
 80016b0:	f001 fbf3 	bl	8002e9a <HAL_NVIC_EnableIRQ>

}
 80016b4:	bf00      	nop
 80016b6:	3728      	adds	r7, #40	; 0x28
 80016b8:	46bd      	mov	sp, r7
 80016ba:	bd80      	pop	{r7, pc}
 80016bc:	40023800 	.word	0x40023800
 80016c0:	40020000 	.word	0x40020000
 80016c4:	40020400 	.word	0x40020400
 80016c8:	10210000 	.word	0x10210000
 80016cc:	40020800 	.word	0x40020800
 80016d0:	10110000 	.word	0x10110000

080016d4 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80016d4:	b580      	push	{r7, lr}
 80016d6:	b082      	sub	sp, #8
 80016d8:	af00      	add	r7, sp, #0
 80016da:	4603      	mov	r3, r0
 80016dc:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){
 80016de:	88fb      	ldrh	r3, [r7, #6]
 80016e0:	2b80      	cmp	r3, #128	; 0x80
 80016e2:	d112      	bne.n	800170a <HAL_GPIO_EXTI_Callback+0x36>
		check ++;
 80016e4:	4b0b      	ldr	r3, [pc, #44]	; (8001714 <HAL_GPIO_EXTI_Callback+0x40>)
 80016e6:	781b      	ldrb	r3, [r3, #0]
 80016e8:	3301      	adds	r3, #1
 80016ea:	b2da      	uxtb	r2, r3
 80016ec:	4b09      	ldr	r3, [pc, #36]	; (8001714 <HAL_GPIO_EXTI_Callback+0x40>)
 80016ee:	701a      	strb	r2, [r3, #0]
		cP = 0;
 80016f0:	4b09      	ldr	r3, [pc, #36]	; (8001718 <HAL_GPIO_EXTI_Callback+0x44>)
 80016f2:	2200      	movs	r2, #0
 80016f4:	701a      	strb	r2, [r3, #0]
		velocity = 0;
 80016f6:	4b09      	ldr	r3, [pc, #36]	; (800171c <HAL_GPIO_EXTI_Callback+0x48>)
 80016f8:	f04f 0200 	mov.w	r2, #0
 80016fc:	601a      	str	r2, [r3, #0]
		SetHome = 0;
 80016fe:	4b08      	ldr	r3, [pc, #32]	; (8001720 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001700:	2200      	movs	r2, #0
 8001702:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001704:	2017      	movs	r0, #23
 8001706:	f001 fbd6 	bl	8002eb6 <HAL_NVIC_DisableIRQ>
	}
}
 800170a:	bf00      	nop
 800170c:	3708      	adds	r7, #8
 800170e:	46bd      	mov	sp, r7
 8001710:	bd80      	pop	{r7, pc}
 8001712:	bf00      	nop
 8001714:	200000e0 	.word	0x200000e0
 8001718:	200000c8 	.word	0x200000c8
 800171c:	200000d0 	.word	0x200000d0
 8001720:	200000e1 	.word	0x200000e1

08001724 <I2C>:

void I2C(){
 8001724:	b580      	push	{r7, lr}
 8001726:	b082      	sub	sp, #8
 8001728:	af00      	add	r7, sp, #0
	const uint8_t laserAddress = 0x23<<1;
 800172a:	2346      	movs	r3, #70	; 0x46
 800172c:	71fb      	strb	r3, [r7, #7]
	static uint8_t pdataStart[1] = {0x45};
	HAL_I2C_Master_Transmit_IT(&hi2c1, laserAddress, pdataStart, 1);
 800172e:	79fb      	ldrb	r3, [r7, #7]
 8001730:	b299      	uxth	r1, r3
 8001732:	2301      	movs	r3, #1
 8001734:	4a03      	ldr	r2, [pc, #12]	; (8001744 <I2C+0x20>)
 8001736:	4804      	ldr	r0, [pc, #16]	; (8001748 <I2C+0x24>)
 8001738:	f001 ff02 	bl	8003540 <HAL_I2C_Master_Transmit_IT>
}
 800173c:	bf00      	nop
 800173e:	3708      	adds	r7, #8
 8001740:	46bd      	mov	sp, r7
 8001742:	bd80      	pop	{r7, pc}
 8001744:	20000024 	.word	0x20000024
 8001748:	20000174 	.word	0x20000174

0800174c <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 800174c:	b5b0      	push	{r4, r5, r7, lr}
 800174e:	ed2d 8b02 	vpush	{d8}
 8001752:	b086      	sub	sp, #24
 8001754:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001756:	4b28      	ldr	r3, [pc, #160]	; (80017f8 <EncoderVelocity_Update+0xac>)
 8001758:	681b      	ldr	r3, [r3, #0]
 800175a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800175c:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800175e:	f000 ffa3 	bl	80026a8 <micros>
 8001762:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001766:	4b25      	ldr	r3, [pc, #148]	; (80017fc <EncoderVelocity_Update+0xb0>)
 8001768:	e9d3 2300 	ldrd	r2, r3, [r3]
 800176c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001770:	1a84      	subs	r4, r0, r2
 8001772:	eb61 0503 	sbc.w	r5, r1, r3
 8001776:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800177a:	4b21      	ldr	r3, [pc, #132]	; (8001800 <EncoderVelocity_Update+0xb4>)
 800177c:	681b      	ldr	r3, [r3, #0]
 800177e:	693a      	ldr	r2, [r7, #16]
 8001780:	1ad3      	subs	r3, r2, r3
 8001782:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001784:	697b      	ldr	r3, [r7, #20]
 8001786:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800178a:	db04      	blt.n	8001796 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 800178c:	697b      	ldr	r3, [r7, #20]
 800178e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 8001792:	617b      	str	r3, [r7, #20]
 8001794:	e007      	b.n	80017a6 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001796:	697b      	ldr	r3, [r7, #20]
 8001798:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 800179c:	dc03      	bgt.n	80017a6 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 800179e:	697b      	ldr	r3, [r7, #20]
 80017a0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80017a4:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80017a6:	4a16      	ldr	r2, [pc, #88]	; (8001800 <EncoderVelocity_Update+0xb4>)
 80017a8:	693b      	ldr	r3, [r7, #16]
 80017aa:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80017ac:	4913      	ldr	r1, [pc, #76]	; (80017fc <EncoderVelocity_Update+0xb0>)
 80017ae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80017b2:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000*60) / (float) (EncoderTimeDiff *2048*4);
 80017b6:	697b      	ldr	r3, [r7, #20]
 80017b8:	4a12      	ldr	r2, [pc, #72]	; (8001804 <EncoderVelocity_Update+0xb8>)
 80017ba:	fb02 f303 	mul.w	r3, r2, r3
 80017be:	ee07 3a90 	vmov	s15, r3
 80017c2:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80017c6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80017ca:	f04f 0200 	mov.w	r2, #0
 80017ce:	f04f 0300 	mov.w	r3, #0
 80017d2:	034b      	lsls	r3, r1, #13
 80017d4:	ea43 43d0 	orr.w	r3, r3, r0, lsr #19
 80017d8:	0342      	lsls	r2, r0, #13
 80017da:	4610      	mov	r0, r2
 80017dc:	4619      	mov	r1, r3
 80017de:	f7ff fa7f 	bl	8000ce0 <__aeabi_ul2f>
 80017e2:	ee07 0a10 	vmov	s14, r0
 80017e6:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 80017ea:	eeb0 0a67 	vmov.f32	s0, s15
 80017ee:	3718      	adds	r7, #24
 80017f0:	46bd      	mov	sp, r7
 80017f2:	ecbd 8b02 	vpop	{d8}
 80017f6:	bdb0      	pop	{r4, r5, r7, pc}
 80017f8:	20000208 	.word	0x20000208
 80017fc:	20000110 	.word	0x20000110
 8001800:	20000118 	.word	0x20000118
 8001804:	03938700 	.word	0x03938700

08001808 <trajectory>:

void trajectory(uint64_t Timestamp){
 8001808:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800180c:	b082      	sub	sp, #8
 800180e:	af00      	add	r7, sp, #0
 8001810:	e9c7 0100 	strd	r0, r1, [r7]
	static float a0 = 0;
	static float a1 = 0;
	static float a2 = 0;
	static float a3 = 0;
	static uint64_t setTime = 0;
	state[0] = start;
 8001814:	4b46      	ldr	r3, [pc, #280]	; (8001930 <trajectory+0x128>)
 8001816:	781b      	ldrb	r3, [r3, #0]
 8001818:	461a      	mov	r2, r3
 800181a:	4b46      	ldr	r3, [pc, #280]	; (8001934 <trajectory+0x12c>)
 800181c:	701a      	strb	r2, [r3, #0]
	rawPosition[0] = HTIM_ENCODER.Instance->CNT*90/2048;
 800181e:	4b46      	ldr	r3, [pc, #280]	; (8001938 <trajectory+0x130>)
 8001820:	681b      	ldr	r3, [r3, #0]
 8001822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001824:	225a      	movs	r2, #90	; 0x5a
 8001826:	fb02 f303 	mul.w	r3, r2, r3
 800182a:	0adb      	lsrs	r3, r3, #11
 800182c:	b29a      	uxth	r2, r3
 800182e:	4b43      	ldr	r3, [pc, #268]	; (800193c <trajectory+0x134>)
 8001830:	801a      	strh	r2, [r3, #0]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 87)){
 8001832:	4b42      	ldr	r3, [pc, #264]	; (800193c <trajectory+0x134>)
 8001834:	881b      	ldrh	r3, [r3, #0]
 8001836:	2b09      	cmp	r3, #9
 8001838:	d80a      	bhi.n	8001850 <trajectory+0x48>
 800183a:	4b40      	ldr	r3, [pc, #256]	; (800193c <trajectory+0x134>)
 800183c:	885b      	ldrh	r3, [r3, #2]
 800183e:	2b57      	cmp	r3, #87	; 0x57
 8001840:	d906      	bls.n	8001850 <trajectory+0x48>
		cP += 1;
 8001842:	4b3f      	ldr	r3, [pc, #252]	; (8001940 <trajectory+0x138>)
 8001844:	781b      	ldrb	r3, [r3, #0]
 8001846:	3301      	adds	r3, #1
 8001848:	b2da      	uxtb	r2, r3
 800184a:	4b3d      	ldr	r3, [pc, #244]	; (8001940 <trajectory+0x138>)
 800184c:	701a      	strb	r2, [r3, #0]
 800184e:	e00d      	b.n	800186c <trajectory+0x64>
	}
	else if ((rawPosition[0] >87 )&& (rawPosition[1] < 10)){
 8001850:	4b3a      	ldr	r3, [pc, #232]	; (800193c <trajectory+0x134>)
 8001852:	881b      	ldrh	r3, [r3, #0]
 8001854:	2b57      	cmp	r3, #87	; 0x57
 8001856:	d909      	bls.n	800186c <trajectory+0x64>
 8001858:	4b38      	ldr	r3, [pc, #224]	; (800193c <trajectory+0x134>)
 800185a:	885b      	ldrh	r3, [r3, #2]
 800185c:	2b09      	cmp	r3, #9
 800185e:	d805      	bhi.n	800186c <trajectory+0x64>
		cP -= 1;
 8001860:	4b37      	ldr	r3, [pc, #220]	; (8001940 <trajectory+0x138>)
 8001862:	781b      	ldrb	r3, [r3, #0]
 8001864:	3b01      	subs	r3, #1
 8001866:	b2da      	uxtb	r2, r3
 8001868:	4b35      	ldr	r3, [pc, #212]	; (8001940 <trajectory+0x138>)
 800186a:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 800186c:	4b34      	ldr	r3, [pc, #208]	; (8001940 <trajectory+0x138>)
 800186e:	781b      	ldrb	r3, [r3, #0]
 8001870:	2b03      	cmp	r3, #3
 8001872:	d902      	bls.n	800187a <trajectory+0x72>
		cP = 0;
 8001874:	4b32      	ldr	r3, [pc, #200]	; (8001940 <trajectory+0x138>)
 8001876:	2200      	movs	r2, #0
 8001878:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = rawPosition[0] + cP*90;
 800187a:	4b30      	ldr	r3, [pc, #192]	; (800193c <trajectory+0x134>)
 800187c:	881b      	ldrh	r3, [r3, #0]
 800187e:	461a      	mov	r2, r3
 8001880:	4b2f      	ldr	r3, [pc, #188]	; (8001940 <trajectory+0x138>)
 8001882:	781b      	ldrb	r3, [r3, #0]
 8001884:	4619      	mov	r1, r3
 8001886:	235a      	movs	r3, #90	; 0x5a
 8001888:	fb03 f301 	mul.w	r3, r3, r1
 800188c:	4413      	add	r3, r2
 800188e:	ee07 3a90 	vmov	s15, r3
 8001892:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001896:	4b2b      	ldr	r3, [pc, #172]	; (8001944 <trajectory+0x13c>)
 8001898:	edc3 7a00 	vstr	s15, [r3]
	if(abs(finalAngle-startAngle)<10){
 800189c:	4b2a      	ldr	r3, [pc, #168]	; (8001948 <trajectory+0x140>)
 800189e:	ed93 7a00 	vldr	s14, [r3]
 80018a2:	4b2a      	ldr	r3, [pc, #168]	; (800194c <trajectory+0x144>)
 80018a4:	edd3 7a00 	vldr	s15, [r3]
 80018a8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ac:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018b0:	ee17 3a90 	vmov	r3, s15
 80018b4:	f113 0f09 	cmn.w	r3, #9
 80018b8:	db15      	blt.n	80018e6 <trajectory+0xde>
 80018ba:	4b23      	ldr	r3, [pc, #140]	; (8001948 <trajectory+0x140>)
 80018bc:	ed93 7a00 	vldr	s14, [r3]
 80018c0:	4b22      	ldr	r3, [pc, #136]	; (800194c <trajectory+0x144>)
 80018c2:	edd3 7a00 	vldr	s15, [r3]
 80018c6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018ca:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ce:	ee17 3a90 	vmov	r3, s15
 80018d2:	2b09      	cmp	r3, #9
 80018d4:	dc07      	bgt.n	80018e6 <trajectory+0xde>
		vMax = 5;
 80018d6:	4b1e      	ldr	r3, [pc, #120]	; (8001950 <trajectory+0x148>)
 80018d8:	4a1e      	ldr	r2, [pc, #120]	; (8001954 <trajectory+0x14c>)
 80018da:	601a      	str	r2, [r3, #0]
		k = 1000;
 80018dc:	4b1e      	ldr	r3, [pc, #120]	; (8001958 <trajectory+0x150>)
 80018de:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 80018e2:	801a      	strh	r2, [r3, #0]
 80018e4:	e05a      	b.n	800199c <trajectory+0x194>
	}
	else if (abs(finalAngle-startAngle)<50){
 80018e6:	4b18      	ldr	r3, [pc, #96]	; (8001948 <trajectory+0x140>)
 80018e8:	ed93 7a00 	vldr	s14, [r3]
 80018ec:	4b17      	ldr	r3, [pc, #92]	; (800194c <trajectory+0x144>)
 80018ee:	edd3 7a00 	vldr	s15, [r3]
 80018f2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018f6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018fa:	ee17 3a90 	vmov	r3, s15
 80018fe:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001902:	db2b      	blt.n	800195c <trajectory+0x154>
 8001904:	4b10      	ldr	r3, [pc, #64]	; (8001948 <trajectory+0x140>)
 8001906:	ed93 7a00 	vldr	s14, [r3]
 800190a:	4b10      	ldr	r3, [pc, #64]	; (800194c <trajectory+0x144>)
 800190c:	edd3 7a00 	vldr	s15, [r3]
 8001910:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001914:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001918:	ee17 3a90 	vmov	r3, s15
 800191c:	2b31      	cmp	r3, #49	; 0x31
 800191e:	dc1d      	bgt.n	800195c <trajectory+0x154>
		vMax = 5;
 8001920:	4b0b      	ldr	r3, [pc, #44]	; (8001950 <trajectory+0x148>)
 8001922:	4a0c      	ldr	r2, [pc, #48]	; (8001954 <trajectory+0x14c>)
 8001924:	601a      	str	r2, [r3, #0]
		k = 2000;
 8001926:	4b0c      	ldr	r3, [pc, #48]	; (8001958 <trajectory+0x150>)
 8001928:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800192c:	801a      	strh	r2, [r3, #0]
 800192e:	e035      	b.n	800199c <trajectory+0x194>
 8001930:	200000fa 	.word	0x200000fa
 8001934:	200000f8 	.word	0x200000f8
 8001938:	20000208 	.word	0x20000208
 800193c:	200000f4 	.word	0x200000f4
 8001940:	200000c8 	.word	0x200000c8
 8001944:	200000f0 	.word	0x200000f0
 8001948:	20000004 	.word	0x20000004
 800194c:	200000e4 	.word	0x200000e4
 8001950:	2000000c 	.word	0x2000000c
 8001954:	40a00000 	.word	0x40a00000
 8001958:	2000001a 	.word	0x2000001a
	}
	else{
		vMax = 8;
 800195c:	4bd2      	ldr	r3, [pc, #840]	; (8001ca8 <trajectory+0x4a0>)
 800195e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001962:	601a      	str	r2, [r3, #0]
		k = 2000;
 8001964:	4bd1      	ldr	r3, [pc, #836]	; (8001cac <trajectory+0x4a4>)
 8001966:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800196a:	801a      	strh	r2, [r3, #0]
		if(abs(finalAngle-startAngle)>200){
 800196c:	4bd0      	ldr	r3, [pc, #832]	; (8001cb0 <trajectory+0x4a8>)
 800196e:	ed93 7a00 	vldr	s14, [r3]
 8001972:	4bd0      	ldr	r3, [pc, #832]	; (8001cb4 <trajectory+0x4ac>)
 8001974:	edd3 7a00 	vldr	s15, [r3]
 8001978:	ee77 7a67 	vsub.f32	s15, s14, s15
 800197c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001980:	ee17 3a90 	vmov	r3, s15
 8001984:	2b00      	cmp	r3, #0
 8001986:	bfb8      	it	lt
 8001988:	425b      	neglt	r3, r3
 800198a:	2bc8      	cmp	r3, #200	; 0xc8
 800198c:	dd06      	ble.n	800199c <trajectory+0x194>
			vMax = 10;
 800198e:	4bc6      	ldr	r3, [pc, #792]	; (8001ca8 <trajectory+0x4a0>)
 8001990:	4ac9      	ldr	r2, [pc, #804]	; (8001cb8 <trajectory+0x4b0>)
 8001992:	601a      	str	r2, [r3, #0]
			k = 5000;
 8001994:	4bc5      	ldr	r3, [pc, #788]	; (8001cac <trajectory+0x4a4>)
 8001996:	f241 3288 	movw	r2, #5000	; 0x1388
 800199a:	801a      	strh	r2, [r3, #0]
		}
	}
	if(state[0] == 1){
 800199c:	4bc7      	ldr	r3, [pc, #796]	; (8001cbc <trajectory+0x4b4>)
 800199e:	781b      	ldrb	r3, [r3, #0]
 80019a0:	2b01      	cmp	r3, #1
 80019a2:	f040 81f3 	bne.w	8001d8c <trajectory+0x584>
		if(state[0] != state[1]){
 80019a6:	4bc5      	ldr	r3, [pc, #788]	; (8001cbc <trajectory+0x4b4>)
 80019a8:	781a      	ldrb	r2, [r3, #0]
 80019aa:	4bc4      	ldr	r3, [pc, #784]	; (8001cbc <trajectory+0x4b4>)
 80019ac:	785b      	ldrb	r3, [r3, #1]
 80019ae:	429a      	cmp	r2, r3
 80019b0:	d008      	beq.n	80019c4 <trajectory+0x1bc>
			setTime = Timestamp;
 80019b2:	49c3      	ldr	r1, [pc, #780]	; (8001cc0 <trajectory+0x4b8>)
 80019b4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80019b8:	e9c1 2300 	strd	r2, r3, [r1]
			startAngle = currentPosition;
 80019bc:	4bc1      	ldr	r3, [pc, #772]	; (8001cc4 <trajectory+0x4bc>)
 80019be:	681b      	ldr	r3, [r3, #0]
 80019c0:	4abc      	ldr	r2, [pc, #752]	; (8001cb4 <trajectory+0x4ac>)
 80019c2:	6013      	str	r3, [r2, #0]
//			if(abs(finalAngle-startAngle) > 200 ){
//				storeAngle = 10;
//			}
		}
		tim = (float) (Timestamp-setTime)/1000000;
 80019c4:	4bbe      	ldr	r3, [pc, #760]	; (8001cc0 <trajectory+0x4b8>)
 80019c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80019ca:	e9d7 0100 	ldrd	r0, r1, [r7]
 80019ce:	1a84      	subs	r4, r0, r2
 80019d0:	eb61 0503 	sbc.w	r5, r1, r3
 80019d4:	4620      	mov	r0, r4
 80019d6:	4629      	mov	r1, r5
 80019d8:	f7ff f982 	bl	8000ce0 <__aeabi_ul2f>
 80019dc:	ee06 0a90 	vmov	s13, r0
 80019e0:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001cc8 <trajectory+0x4c0>
 80019e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80019e8:	4bb8      	ldr	r3, [pc, #736]	; (8001ccc <trajectory+0x4c4>)
 80019ea:	edc3 7a00 	vstr	s15, [r3]
		tF = (float) (250*abs(finalAngle-startAngle-storeAngle)/(355*vMax));
 80019ee:	4bb0      	ldr	r3, [pc, #704]	; (8001cb0 <trajectory+0x4a8>)
 80019f0:	ed93 7a00 	vldr	s14, [r3]
 80019f4:	4baf      	ldr	r3, [pc, #700]	; (8001cb4 <trajectory+0x4ac>)
 80019f6:	edd3 7a00 	vldr	s15, [r3]
 80019fa:	ee37 7a67 	vsub.f32	s14, s14, s15
 80019fe:	4bb4      	ldr	r3, [pc, #720]	; (8001cd0 <trajectory+0x4c8>)
 8001a00:	781b      	ldrb	r3, [r3, #0]
 8001a02:	ee07 3a90 	vmov	s15, r3
 8001a06:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a12:	ee17 3a90 	vmov	r3, s15
 8001a16:	2b00      	cmp	r3, #0
 8001a18:	bfb8      	it	lt
 8001a1a:	425b      	neglt	r3, r3
 8001a1c:	22fa      	movs	r2, #250	; 0xfa
 8001a1e:	fb02 f303 	mul.w	r3, r2, r3
 8001a22:	ee07 3a90 	vmov	s15, r3
 8001a26:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001a2a:	4b9f      	ldr	r3, [pc, #636]	; (8001ca8 <trajectory+0x4a0>)
 8001a2c:	edd3 7a00 	vldr	s15, [r3]
 8001a30:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001cd4 <trajectory+0x4cc>
 8001a34:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001a38:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001a3c:	4ba6      	ldr	r3, [pc, #664]	; (8001cd8 <trajectory+0x4d0>)
 8001a3e:	edc3 7a00 	vstr	s15, [r3]
		a0 = startAngle;
 8001a42:	4b9c      	ldr	r3, [pc, #624]	; (8001cb4 <trajectory+0x4ac>)
 8001a44:	681b      	ldr	r3, [r3, #0]
 8001a46:	4aa5      	ldr	r2, [pc, #660]	; (8001cdc <trajectory+0x4d4>)
 8001a48:	6013      	str	r3, [r2, #0]
		a1 = 0;
 8001a4a:	4ba5      	ldr	r3, [pc, #660]	; (8001ce0 <trajectory+0x4d8>)
 8001a4c:	f04f 0200 	mov.w	r2, #0
 8001a50:	601a      	str	r2, [r3, #0]
		a2 = (float) (3/pow(tF,2))*(finalAngle-startAngle);
 8001a52:	4ba1      	ldr	r3, [pc, #644]	; (8001cd8 <trajectory+0x4d0>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd22 	bl	80004a0 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8001c90 <trajectory+0x488>
 8001a64:	ec43 2b10 	vmov	d0, r2, r3
 8001a68:	f005 f9e2 	bl	8006e30 <pow>
 8001a6c:	ec53 2b10 	vmov	r2, r3, d0
 8001a70:	f04f 0000 	mov.w	r0, #0
 8001a74:	499b      	ldr	r1, [pc, #620]	; (8001ce4 <trajectory+0x4dc>)
 8001a76:	f7fe fe95 	bl	80007a4 <__aeabi_ddiv>
 8001a7a:	4602      	mov	r2, r0
 8001a7c:	460b      	mov	r3, r1
 8001a7e:	4610      	mov	r0, r2
 8001a80:	4619      	mov	r1, r3
 8001a82:	f7ff f815 	bl	8000ab0 <__aeabi_d2f>
 8001a86:	ee06 0a90 	vmov	s13, r0
 8001a8a:	4b89      	ldr	r3, [pc, #548]	; (8001cb0 <trajectory+0x4a8>)
 8001a8c:	ed93 7a00 	vldr	s14, [r3]
 8001a90:	4b88      	ldr	r3, [pc, #544]	; (8001cb4 <trajectory+0x4ac>)
 8001a92:	edd3 7a00 	vldr	s15, [r3]
 8001a96:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a9a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001a9e:	4b92      	ldr	r3, [pc, #584]	; (8001ce8 <trajectory+0x4e0>)
 8001aa0:	edc3 7a00 	vstr	s15, [r3]
		a3 = (float) -(2/pow(tF,3))*(finalAngle-startAngle);
 8001aa4:	4b8c      	ldr	r3, [pc, #560]	; (8001cd8 <trajectory+0x4d0>)
 8001aa6:	681b      	ldr	r3, [r3, #0]
 8001aa8:	4618      	mov	r0, r3
 8001aaa:	f7fe fcf9 	bl	80004a0 <__aeabi_f2d>
 8001aae:	4602      	mov	r2, r0
 8001ab0:	460b      	mov	r3, r1
 8001ab2:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001c98 <trajectory+0x490>
 8001ab6:	ec43 2b10 	vmov	d0, r2, r3
 8001aba:	f005 f9b9 	bl	8006e30 <pow>
 8001abe:	ec53 2b10 	vmov	r2, r3, d0
 8001ac2:	f04f 0000 	mov.w	r0, #0
 8001ac6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001aca:	f7fe fe6b 	bl	80007a4 <__aeabi_ddiv>
 8001ace:	4602      	mov	r2, r0
 8001ad0:	460b      	mov	r3, r1
 8001ad2:	4610      	mov	r0, r2
 8001ad4:	4619      	mov	r1, r3
 8001ad6:	f7fe ffeb 	bl	8000ab0 <__aeabi_d2f>
 8001ada:	4603      	mov	r3, r0
 8001adc:	ee07 3a90 	vmov	s15, r3
 8001ae0:	eeb1 7a67 	vneg.f32	s14, s15
 8001ae4:	4b72      	ldr	r3, [pc, #456]	; (8001cb0 <trajectory+0x4a8>)
 8001ae6:	edd3 6a00 	vldr	s13, [r3]
 8001aea:	4b72      	ldr	r3, [pc, #456]	; (8001cb4 <trajectory+0x4ac>)
 8001aec:	edd3 7a00 	vldr	s15, [r3]
 8001af0:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001af4:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001af8:	4b7c      	ldr	r3, [pc, #496]	; (8001cec <trajectory+0x4e4>)
 8001afa:	edc3 7a00 	vstr	s15, [r3]
		position = (float) a0+ (a1*tim) +(a2*pow(tim,2)) +(a3*pow(tim,3));
 8001afe:	4b78      	ldr	r3, [pc, #480]	; (8001ce0 <trajectory+0x4d8>)
 8001b00:	ed93 7a00 	vldr	s14, [r3]
 8001b04:	4b71      	ldr	r3, [pc, #452]	; (8001ccc <trajectory+0x4c4>)
 8001b06:	edd3 7a00 	vldr	s15, [r3]
 8001b0a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b0e:	4b73      	ldr	r3, [pc, #460]	; (8001cdc <trajectory+0x4d4>)
 8001b10:	edd3 7a00 	vldr	s15, [r3]
 8001b14:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b18:	ee17 0a90 	vmov	r0, s15
 8001b1c:	f7fe fcc0 	bl	80004a0 <__aeabi_f2d>
 8001b20:	4604      	mov	r4, r0
 8001b22:	460d      	mov	r5, r1
 8001b24:	4b70      	ldr	r3, [pc, #448]	; (8001ce8 <trajectory+0x4e0>)
 8001b26:	681b      	ldr	r3, [r3, #0]
 8001b28:	4618      	mov	r0, r3
 8001b2a:	f7fe fcb9 	bl	80004a0 <__aeabi_f2d>
 8001b2e:	4680      	mov	r8, r0
 8001b30:	4689      	mov	r9, r1
 8001b32:	4b66      	ldr	r3, [pc, #408]	; (8001ccc <trajectory+0x4c4>)
 8001b34:	681b      	ldr	r3, [r3, #0]
 8001b36:	4618      	mov	r0, r3
 8001b38:	f7fe fcb2 	bl	80004a0 <__aeabi_f2d>
 8001b3c:	4602      	mov	r2, r0
 8001b3e:	460b      	mov	r3, r1
 8001b40:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001c90 <trajectory+0x488>
 8001b44:	ec43 2b10 	vmov	d0, r2, r3
 8001b48:	f005 f972 	bl	8006e30 <pow>
 8001b4c:	ec53 2b10 	vmov	r2, r3, d0
 8001b50:	4640      	mov	r0, r8
 8001b52:	4649      	mov	r1, r9
 8001b54:	f7fe fcfc 	bl	8000550 <__aeabi_dmul>
 8001b58:	4602      	mov	r2, r0
 8001b5a:	460b      	mov	r3, r1
 8001b5c:	4620      	mov	r0, r4
 8001b5e:	4629      	mov	r1, r5
 8001b60:	f7fe fb40 	bl	80001e4 <__adddf3>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	4690      	mov	r8, r2
 8001b6a:	4699      	mov	r9, r3
 8001b6c:	4b5f      	ldr	r3, [pc, #380]	; (8001cec <trajectory+0x4e4>)
 8001b6e:	681b      	ldr	r3, [r3, #0]
 8001b70:	4618      	mov	r0, r3
 8001b72:	f7fe fc95 	bl	80004a0 <__aeabi_f2d>
 8001b76:	4604      	mov	r4, r0
 8001b78:	460d      	mov	r5, r1
 8001b7a:	4b54      	ldr	r3, [pc, #336]	; (8001ccc <trajectory+0x4c4>)
 8001b7c:	681b      	ldr	r3, [r3, #0]
 8001b7e:	4618      	mov	r0, r3
 8001b80:	f7fe fc8e 	bl	80004a0 <__aeabi_f2d>
 8001b84:	4602      	mov	r2, r0
 8001b86:	460b      	mov	r3, r1
 8001b88:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001c98 <trajectory+0x490>
 8001b8c:	ec43 2b10 	vmov	d0, r2, r3
 8001b90:	f005 f94e 	bl	8006e30 <pow>
 8001b94:	ec53 2b10 	vmov	r2, r3, d0
 8001b98:	4620      	mov	r0, r4
 8001b9a:	4629      	mov	r1, r5
 8001b9c:	f7fe fcd8 	bl	8000550 <__aeabi_dmul>
 8001ba0:	4602      	mov	r2, r0
 8001ba2:	460b      	mov	r3, r1
 8001ba4:	4640      	mov	r0, r8
 8001ba6:	4649      	mov	r1, r9
 8001ba8:	f7fe fb1c 	bl	80001e4 <__adddf3>
 8001bac:	4602      	mov	r2, r0
 8001bae:	460b      	mov	r3, r1
 8001bb0:	4610      	mov	r0, r2
 8001bb2:	4619      	mov	r1, r3
 8001bb4:	f7fe ff7c 	bl	8000ab0 <__aeabi_d2f>
 8001bb8:	4603      	mov	r3, r0
 8001bba:	4a4d      	ldr	r2, [pc, #308]	; (8001cf0 <trajectory+0x4e8>)
 8001bbc:	6013      	str	r3, [r2, #0]
		velocity = (float) (a1 +(2*a2*tim) +(3*a3*pow(tim,2)))/6;
 8001bbe:	4b4a      	ldr	r3, [pc, #296]	; (8001ce8 <trajectory+0x4e0>)
 8001bc0:	edd3 7a00 	vldr	s15, [r3]
 8001bc4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bc8:	4b40      	ldr	r3, [pc, #256]	; (8001ccc <trajectory+0x4c4>)
 8001bca:	edd3 7a00 	vldr	s15, [r3]
 8001bce:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001bd2:	4b43      	ldr	r3, [pc, #268]	; (8001ce0 <trajectory+0x4d8>)
 8001bd4:	edd3 7a00 	vldr	s15, [r3]
 8001bd8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bdc:	ee17 0a90 	vmov	r0, s15
 8001be0:	f7fe fc5e 	bl	80004a0 <__aeabi_f2d>
 8001be4:	4604      	mov	r4, r0
 8001be6:	460d      	mov	r5, r1
 8001be8:	4b40      	ldr	r3, [pc, #256]	; (8001cec <trajectory+0x4e4>)
 8001bea:	edd3 7a00 	vldr	s15, [r3]
 8001bee:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001bf2:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001bf6:	ee17 0a90 	vmov	r0, s15
 8001bfa:	f7fe fc51 	bl	80004a0 <__aeabi_f2d>
 8001bfe:	4680      	mov	r8, r0
 8001c00:	4689      	mov	r9, r1
 8001c02:	4b32      	ldr	r3, [pc, #200]	; (8001ccc <trajectory+0x4c4>)
 8001c04:	681b      	ldr	r3, [r3, #0]
 8001c06:	4618      	mov	r0, r3
 8001c08:	f7fe fc4a 	bl	80004a0 <__aeabi_f2d>
 8001c0c:	4602      	mov	r2, r0
 8001c0e:	460b      	mov	r3, r1
 8001c10:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001c90 <trajectory+0x488>
 8001c14:	ec43 2b10 	vmov	d0, r2, r3
 8001c18:	f005 f90a 	bl	8006e30 <pow>
 8001c1c:	ec53 2b10 	vmov	r2, r3, d0
 8001c20:	4640      	mov	r0, r8
 8001c22:	4649      	mov	r1, r9
 8001c24:	f7fe fc94 	bl	8000550 <__aeabi_dmul>
 8001c28:	4602      	mov	r2, r0
 8001c2a:	460b      	mov	r3, r1
 8001c2c:	4620      	mov	r0, r4
 8001c2e:	4629      	mov	r1, r5
 8001c30:	f7fe fad8 	bl	80001e4 <__adddf3>
 8001c34:	4602      	mov	r2, r0
 8001c36:	460b      	mov	r3, r1
 8001c38:	4610      	mov	r0, r2
 8001c3a:	4619      	mov	r1, r3
 8001c3c:	f7fe ff38 	bl	8000ab0 <__aeabi_d2f>
 8001c40:	ee06 0a90 	vmov	s13, r0
 8001c44:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001c48:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001c4c:	4b29      	ldr	r3, [pc, #164]	; (8001cf4 <trajectory+0x4ec>)
 8001c4e:	edc3 7a00 	vstr	s15, [r3]
		alpha = (float) ((2*a2) +(6*a3*tim))*2*3.14/360;
 8001c52:	4b25      	ldr	r3, [pc, #148]	; (8001ce8 <trajectory+0x4e0>)
 8001c54:	edd3 7a00 	vldr	s15, [r3]
 8001c58:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001c5c:	4b23      	ldr	r3, [pc, #140]	; (8001cec <trajectory+0x4e4>)
 8001c5e:	edd3 7a00 	vldr	s15, [r3]
 8001c62:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001c66:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001c6a:	4b18      	ldr	r3, [pc, #96]	; (8001ccc <trajectory+0x4c4>)
 8001c6c:	edd3 7a00 	vldr	s15, [r3]
 8001c70:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001c74:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c78:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001c7c:	ee17 0a90 	vmov	r0, s15
 8001c80:	f7fe fc0e 	bl	80004a0 <__aeabi_f2d>
 8001c84:	a306      	add	r3, pc, #24	; (adr r3, 8001ca0 <trajectory+0x498>)
 8001c86:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001c8a:	f7fe fc61 	bl	8000550 <__aeabi_dmul>
 8001c8e:	e033      	b.n	8001cf8 <trajectory+0x4f0>
 8001c90:	00000000 	.word	0x00000000
 8001c94:	40000000 	.word	0x40000000
 8001c98:	00000000 	.word	0x00000000
 8001c9c:	40080000 	.word	0x40080000
 8001ca0:	51eb851f 	.word	0x51eb851f
 8001ca4:	40091eb8 	.word	0x40091eb8
 8001ca8:	2000000c 	.word	0x2000000c
 8001cac:	2000001a 	.word	0x2000001a
 8001cb0:	20000004 	.word	0x20000004
 8001cb4:	200000e4 	.word	0x200000e4
 8001cb8:	41200000 	.word	0x41200000
 8001cbc:	200000f8 	.word	0x200000f8
 8001cc0:	20000120 	.word	0x20000120
 8001cc4:	200000f0 	.word	0x200000f0
 8001cc8:	49742400 	.word	0x49742400
 8001ccc:	200000dc 	.word	0x200000dc
 8001cd0:	200000ec 	.word	0x200000ec
 8001cd4:	43b18000 	.word	0x43b18000
 8001cd8:	20000108 	.word	0x20000108
 8001cdc:	20000128 	.word	0x20000128
 8001ce0:	2000012c 	.word	0x2000012c
 8001ce4:	40080000 	.word	0x40080000
 8001ce8:	20000130 	.word	0x20000130
 8001cec:	20000134 	.word	0x20000134
 8001cf0:	200000d4 	.word	0x200000d4
 8001cf4:	200000d0 	.word	0x200000d0
 8001cf8:	4602      	mov	r2, r0
 8001cfa:	460b      	mov	r3, r1
 8001cfc:	4610      	mov	r0, r2
 8001cfe:	4619      	mov	r1, r3
 8001d00:	f04f 0200 	mov.w	r2, #0
 8001d04:	4b26      	ldr	r3, [pc, #152]	; (8001da0 <trajectory+0x598>)
 8001d06:	f7fe fd4d 	bl	80007a4 <__aeabi_ddiv>
 8001d0a:	4602      	mov	r2, r0
 8001d0c:	460b      	mov	r3, r1
 8001d0e:	4610      	mov	r0, r2
 8001d10:	4619      	mov	r1, r3
 8001d12:	f7fe fecd 	bl	8000ab0 <__aeabi_d2f>
 8001d16:	4603      	mov	r3, r0
 8001d18:	4a22      	ldr	r2, [pc, #136]	; (8001da4 <trajectory+0x59c>)
 8001d1a:	6013      	str	r3, [r2, #0]
		if ((abs(currentPosition - finalAngle) < 2)||(tim >= tF)){
 8001d1c:	4b22      	ldr	r3, [pc, #136]	; (8001da8 <trajectory+0x5a0>)
 8001d1e:	ed93 7a00 	vldr	s14, [r3]
 8001d22:	4b22      	ldr	r3, [pc, #136]	; (8001dac <trajectory+0x5a4>)
 8001d24:	edd3 7a00 	vldr	s15, [r3]
 8001d28:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d2c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d30:	ee17 3a90 	vmov	r3, s15
 8001d34:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001d38:	db0d      	blt.n	8001d56 <trajectory+0x54e>
 8001d3a:	4b1b      	ldr	r3, [pc, #108]	; (8001da8 <trajectory+0x5a0>)
 8001d3c:	ed93 7a00 	vldr	s14, [r3]
 8001d40:	4b1a      	ldr	r3, [pc, #104]	; (8001dac <trajectory+0x5a4>)
 8001d42:	edd3 7a00 	vldr	s15, [r3]
 8001d46:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d4a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d4e:	ee17 3a90 	vmov	r3, s15
 8001d52:	2b01      	cmp	r3, #1
 8001d54:	dd0a      	ble.n	8001d6c <trajectory+0x564>
 8001d56:	4b16      	ldr	r3, [pc, #88]	; (8001db0 <trajectory+0x5a8>)
 8001d58:	ed93 7a00 	vldr	s14, [r3]
 8001d5c:	4b15      	ldr	r3, [pc, #84]	; (8001db4 <trajectory+0x5ac>)
 8001d5e:	edd3 7a00 	vldr	s15, [r3]
 8001d62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001d66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001d6a:	db0f      	blt.n	8001d8c <trajectory+0x584>
			start = 0;
 8001d6c:	4b12      	ldr	r3, [pc, #72]	; (8001db8 <trajectory+0x5b0>)
 8001d6e:	2200      	movs	r2, #0
 8001d70:	701a      	strb	r2, [r3, #0]
			velocity = 0;
 8001d72:	4b12      	ldr	r3, [pc, #72]	; (8001dbc <trajectory+0x5b4>)
 8001d74:	f04f 0200 	mov.w	r2, #0
 8001d78:	601a      	str	r2, [r3, #0]
			stopTime = Timestamp;
 8001d7a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d7e:	f7fe ffaf 	bl	8000ce0 <__aeabi_ul2f>
 8001d82:	4603      	mov	r3, r0
 8001d84:	4a0e      	ldr	r2, [pc, #56]	; (8001dc0 <trajectory+0x5b8>)
 8001d86:	6013      	str	r3, [r2, #0]
			I2C();
 8001d88:	f7ff fccc 	bl	8001724 <I2C>
		}
	}
	rawPosition[1] = rawPosition[0];
 8001d8c:	4b0d      	ldr	r3, [pc, #52]	; (8001dc4 <trajectory+0x5bc>)
 8001d8e:	881a      	ldrh	r2, [r3, #0]
 8001d90:	4b0c      	ldr	r3, [pc, #48]	; (8001dc4 <trajectory+0x5bc>)
 8001d92:	805a      	strh	r2, [r3, #2]
}
 8001d94:	bf00      	nop
 8001d96:	3708      	adds	r7, #8
 8001d98:	46bd      	mov	sp, r7
 8001d9a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d9e:	bf00      	nop
 8001da0:	40768000 	.word	0x40768000
 8001da4:	200000d8 	.word	0x200000d8
 8001da8:	200000f0 	.word	0x200000f0
 8001dac:	20000004 	.word	0x20000004
 8001db0:	200000dc 	.word	0x200000dc
 8001db4:	20000108 	.word	0x20000108
 8001db8:	200000fa 	.word	0x200000fa
 8001dbc:	200000d0 	.word	0x200000d0
 8001dc0:	200000e8 	.word	0x200000e8
 8001dc4:	200000f4 	.word	0x200000f4

08001dc8 <pidVelocity>:

void pidVelocity(){
 8001dc8:	b480      	push	{r7}
 8001dca:	af00      	add	r7, sp, #0
	static float error = 0;
	static float integral = 0;
	static float derivative = 0;
	error = abs(velocity) - abs(EncoderVel);
 8001dcc:	4b44      	ldr	r3, [pc, #272]	; (8001ee0 <pidVelocity+0x118>)
 8001dce:	edd3 7a00 	vldr	s15, [r3]
 8001dd2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dd6:	ee17 3a90 	vmov	r3, s15
 8001dda:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001dde:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001de2:	4b40      	ldr	r3, [pc, #256]	; (8001ee4 <pidVelocity+0x11c>)
 8001de4:	edd3 7a00 	vldr	s15, [r3]
 8001de8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001dec:	ee17 3a90 	vmov	r3, s15
 8001df0:	2b00      	cmp	r3, #0
 8001df2:	bfb8      	it	lt
 8001df4:	425b      	neglt	r3, r3
 8001df6:	1ad3      	subs	r3, r2, r3
 8001df8:	ee07 3a90 	vmov	s15, r3
 8001dfc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001e00:	4b39      	ldr	r3, [pc, #228]	; (8001ee8 <pidVelocity+0x120>)
 8001e02:	edc3 7a00 	vstr	s15, [r3]
	integral = integral+error;
 8001e06:	4b39      	ldr	r3, [pc, #228]	; (8001eec <pidVelocity+0x124>)
 8001e08:	ed93 7a00 	vldr	s14, [r3]
 8001e0c:	4b36      	ldr	r3, [pc, #216]	; (8001ee8 <pidVelocity+0x120>)
 8001e0e:	edd3 7a00 	vldr	s15, [r3]
 8001e12:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e16:	4b35      	ldr	r3, [pc, #212]	; (8001eec <pidVelocity+0x124>)
 8001e18:	edc3 7a00 	vstr	s15, [r3]
	PWMOut = k + Kp*error + Ki*integral +Kd*(error-derivative);
 8001e1c:	4b34      	ldr	r3, [pc, #208]	; (8001ef0 <pidVelocity+0x128>)
 8001e1e:	881b      	ldrh	r3, [r3, #0]
 8001e20:	ee07 3a90 	vmov	s15, r3
 8001e24:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001e28:	4b32      	ldr	r3, [pc, #200]	; (8001ef4 <pidVelocity+0x12c>)
 8001e2a:	881b      	ldrh	r3, [r3, #0]
 8001e2c:	ee07 3a90 	vmov	s15, r3
 8001e30:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e34:	4b2c      	ldr	r3, [pc, #176]	; (8001ee8 <pidVelocity+0x120>)
 8001e36:	edd3 7a00 	vldr	s15, [r3]
 8001e3a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e3e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e42:	4b2d      	ldr	r3, [pc, #180]	; (8001ef8 <pidVelocity+0x130>)
 8001e44:	edd3 6a00 	vldr	s13, [r3]
 8001e48:	4b28      	ldr	r3, [pc, #160]	; (8001eec <pidVelocity+0x124>)
 8001e4a:	edd3 7a00 	vldr	s15, [r3]
 8001e4e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e52:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001e56:	4b29      	ldr	r3, [pc, #164]	; (8001efc <pidVelocity+0x134>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001e62:	4b21      	ldr	r3, [pc, #132]	; (8001ee8 <pidVelocity+0x120>)
 8001e64:	ed93 6a00 	vldr	s12, [r3]
 8001e68:	4b25      	ldr	r3, [pc, #148]	; (8001f00 <pidVelocity+0x138>)
 8001e6a:	edd3 7a00 	vldr	s15, [r3]
 8001e6e:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001e72:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001e76:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001e7a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e7e:	ee17 2a90 	vmov	r2, s15
 8001e82:	4b20      	ldr	r3, [pc, #128]	; (8001f04 <pidVelocity+0x13c>)
 8001e84:	601a      	str	r2, [r3, #0]
	derivative = error;
 8001e86:	4b18      	ldr	r3, [pc, #96]	; (8001ee8 <pidVelocity+0x120>)
 8001e88:	681b      	ldr	r3, [r3, #0]
 8001e8a:	4a1d      	ldr	r2, [pc, #116]	; (8001f00 <pidVelocity+0x138>)
 8001e8c:	6013      	str	r3, [r2, #0]
	if (abs(PWMOut) > 10000){
 8001e8e:	4b1d      	ldr	r3, [pc, #116]	; (8001f04 <pidVelocity+0x13c>)
 8001e90:	681b      	ldr	r3, [r3, #0]
 8001e92:	2b00      	cmp	r3, #0
 8001e94:	bfb8      	it	lt
 8001e96:	425b      	neglt	r3, r3
 8001e98:	f242 7210 	movw	r2, #10000	; 0x2710
 8001e9c:	4293      	cmp	r3, r2
 8001e9e:	dd03      	ble.n	8001ea8 <pidVelocity+0xe0>
		PWMOut = 10000;
 8001ea0:	4b18      	ldr	r3, [pc, #96]	; (8001f04 <pidVelocity+0x13c>)
 8001ea2:	f242 7210 	movw	r2, #10000	; 0x2710
 8001ea6:	601a      	str	r2, [r3, #0]
	}

	if (velocity == 0){
 8001ea8:	4b0d      	ldr	r3, [pc, #52]	; (8001ee0 <pidVelocity+0x118>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001eb2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001eb6:	d10e      	bne.n	8001ed6 <pidVelocity+0x10e>
		PWMOut = 0;
 8001eb8:	4b12      	ldr	r3, [pc, #72]	; (8001f04 <pidVelocity+0x13c>)
 8001eba:	2200      	movs	r2, #0
 8001ebc:	601a      	str	r2, [r3, #0]
		error = 0;
 8001ebe:	4b0a      	ldr	r3, [pc, #40]	; (8001ee8 <pidVelocity+0x120>)
 8001ec0:	f04f 0200 	mov.w	r2, #0
 8001ec4:	601a      	str	r2, [r3, #0]
		integral = 0;
 8001ec6:	4b09      	ldr	r3, [pc, #36]	; (8001eec <pidVelocity+0x124>)
 8001ec8:	f04f 0200 	mov.w	r2, #0
 8001ecc:	601a      	str	r2, [r3, #0]
		derivative = 0;
 8001ece:	4b0c      	ldr	r3, [pc, #48]	; (8001f00 <pidVelocity+0x138>)
 8001ed0:	f04f 0200 	mov.w	r2, #0
 8001ed4:	601a      	str	r2, [r3, #0]
	}
}
 8001ed6:	bf00      	nop
 8001ed8:	46bd      	mov	sp, r7
 8001eda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001ede:	4770      	bx	lr
 8001ee0:	200000d0 	.word	0x200000d0
 8001ee4:	200000cc 	.word	0x200000cc
 8001ee8:	20000138 	.word	0x20000138
 8001eec:	2000013c 	.word	0x2000013c
 8001ef0:	2000001a 	.word	0x2000001a
 8001ef4:	20000010 	.word	0x20000010
 8001ef8:	20000014 	.word	0x20000014
 8001efc:	20000018 	.word	0x20000018
 8001f00:	20000140 	.word	0x20000140
 8001f04:	20000000 	.word	0x20000000

08001f08 <gotoSethome>:

void gotoSethome(){
 8001f08:	b580      	push	{r7, lr}
 8001f0a:	af00      	add	r7, sp, #0
	if (SetHome == 1){
 8001f0c:	4b05      	ldr	r3, [pc, #20]	; (8001f24 <gotoSethome+0x1c>)
 8001f0e:	781b      	ldrb	r3, [r3, #0]
 8001f10:	2b00      	cmp	r3, #0
 8001f12:	d005      	beq.n	8001f20 <gotoSethome+0x18>
		velocity = 3;
 8001f14:	4b04      	ldr	r3, [pc, #16]	; (8001f28 <gotoSethome+0x20>)
 8001f16:	4a05      	ldr	r2, [pc, #20]	; (8001f2c <gotoSethome+0x24>)
 8001f18:	601a      	str	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001f1a:	2017      	movs	r0, #23
 8001f1c:	f000 ffbd 	bl	8002e9a <HAL_NVIC_EnableIRQ>
	}
}
 8001f20:	bf00      	nop
 8001f22:	bd80      	pop	{r7, pc}
 8001f24:	200000e1 	.word	0x200000e1
 8001f28:	200000d0 	.word	0x200000d0
 8001f2c:	40400000 	.word	0x40400000

08001f30 <kalman>:
void kalman(){
 8001f30:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001f34:	af00      	add	r7, sp, #0
	static float P21predictPRE = 0;
	static float P22predictPRE = 0;
	static float errorVel = 0;
	static float delt = 0;

	delt = (float) dt/1000000;
 8001f36:	4bda      	ldr	r3, [pc, #872]	; (80022a0 <kalman+0x370>)
 8001f38:	881b      	ldrh	r3, [r3, #0]
 8001f3a:	ee07 3a90 	vmov	s15, r3
 8001f3e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001f42:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80022a4 <kalman+0x374>
 8001f46:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001f4a:	4bd7      	ldr	r3, [pc, #860]	; (80022a8 <kalman+0x378>)
 8001f4c:	edc3 7a00 	vstr	s15, [r3]
	omegaPredict =  (float) omegaPredictPre;
 8001f50:	4bd6      	ldr	r3, [pc, #856]	; (80022ac <kalman+0x37c>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4ad6      	ldr	r2, [pc, #856]	; (80022b0 <kalman+0x380>)
 8001f56:	6013      	str	r3, [r2, #0]
	errorVel = (float) EncoderVelocity_Update() - omegaPredict;
 8001f58:	f7ff fbf8 	bl	800174c <EncoderVelocity_Update>
 8001f5c:	eeb0 7a40 	vmov.f32	s14, s0
 8001f60:	4bd3      	ldr	r3, [pc, #844]	; (80022b0 <kalman+0x380>)
 8001f62:	edd3 7a00 	vldr	s15, [r3]
 8001f66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f6a:	4bd2      	ldr	r3, [pc, #840]	; (80022b4 <kalman+0x384>)
 8001f6c:	edc3 7a00 	vstr	s15, [r3]

	P11predict = (float) P11predictPRE+delt*P21predictPRE+(pow(Gl,2)*pow(delt,4))/4+(pow(delt,2)*(P12predictPRE+delt*P22predictPRE))/delt;
 8001f70:	4bcd      	ldr	r3, [pc, #820]	; (80022a8 <kalman+0x378>)
 8001f72:	ed93 7a00 	vldr	s14, [r3]
 8001f76:	4bd0      	ldr	r3, [pc, #832]	; (80022b8 <kalman+0x388>)
 8001f78:	edd3 7a00 	vldr	s15, [r3]
 8001f7c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f80:	4bce      	ldr	r3, [pc, #824]	; (80022bc <kalman+0x38c>)
 8001f82:	edd3 7a00 	vldr	s15, [r3]
 8001f86:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f8a:	ee17 0a90 	vmov	r0, s15
 8001f8e:	f7fe fa87 	bl	80004a0 <__aeabi_f2d>
 8001f92:	4604      	mov	r4, r0
 8001f94:	460d      	mov	r5, r1
 8001f96:	4bca      	ldr	r3, [pc, #808]	; (80022c0 <kalman+0x390>)
 8001f98:	681b      	ldr	r3, [r3, #0]
 8001f9a:	4618      	mov	r0, r3
 8001f9c:	f7fe fa80 	bl	80004a0 <__aeabi_f2d>
 8001fa0:	4602      	mov	r2, r0
 8001fa2:	460b      	mov	r3, r1
 8001fa4:	ed9f 1bba 	vldr	d1, [pc, #744]	; 8002290 <kalman+0x360>
 8001fa8:	ec43 2b10 	vmov	d0, r2, r3
 8001fac:	f004 ff40 	bl	8006e30 <pow>
 8001fb0:	ec59 8b10 	vmov	r8, r9, d0
 8001fb4:	4bbc      	ldr	r3, [pc, #752]	; (80022a8 <kalman+0x378>)
 8001fb6:	681b      	ldr	r3, [r3, #0]
 8001fb8:	4618      	mov	r0, r3
 8001fba:	f7fe fa71 	bl	80004a0 <__aeabi_f2d>
 8001fbe:	4602      	mov	r2, r0
 8001fc0:	460b      	mov	r3, r1
 8001fc2:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8002298 <kalman+0x368>
 8001fc6:	ec43 2b10 	vmov	d0, r2, r3
 8001fca:	f004 ff31 	bl	8006e30 <pow>
 8001fce:	ec53 2b10 	vmov	r2, r3, d0
 8001fd2:	4640      	mov	r0, r8
 8001fd4:	4649      	mov	r1, r9
 8001fd6:	f7fe fabb 	bl	8000550 <__aeabi_dmul>
 8001fda:	4602      	mov	r2, r0
 8001fdc:	460b      	mov	r3, r1
 8001fde:	4610      	mov	r0, r2
 8001fe0:	4619      	mov	r1, r3
 8001fe2:	f04f 0200 	mov.w	r2, #0
 8001fe6:	4bb7      	ldr	r3, [pc, #732]	; (80022c4 <kalman+0x394>)
 8001fe8:	f7fe fbdc 	bl	80007a4 <__aeabi_ddiv>
 8001fec:	4602      	mov	r2, r0
 8001fee:	460b      	mov	r3, r1
 8001ff0:	4620      	mov	r0, r4
 8001ff2:	4629      	mov	r1, r5
 8001ff4:	f7fe f8f6 	bl	80001e4 <__adddf3>
 8001ff8:	4602      	mov	r2, r0
 8001ffa:	460b      	mov	r3, r1
 8001ffc:	4614      	mov	r4, r2
 8001ffe:	461d      	mov	r5, r3
 8002000:	4ba9      	ldr	r3, [pc, #676]	; (80022a8 <kalman+0x378>)
 8002002:	681b      	ldr	r3, [r3, #0]
 8002004:	4618      	mov	r0, r3
 8002006:	f7fe fa4b 	bl	80004a0 <__aeabi_f2d>
 800200a:	4602      	mov	r2, r0
 800200c:	460b      	mov	r3, r1
 800200e:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 8002290 <kalman+0x360>
 8002012:	ec43 2b10 	vmov	d0, r2, r3
 8002016:	f004 ff0b 	bl	8006e30 <pow>
 800201a:	ec59 8b10 	vmov	r8, r9, d0
 800201e:	4ba2      	ldr	r3, [pc, #648]	; (80022a8 <kalman+0x378>)
 8002020:	ed93 7a00 	vldr	s14, [r3]
 8002024:	4ba8      	ldr	r3, [pc, #672]	; (80022c8 <kalman+0x398>)
 8002026:	edd3 7a00 	vldr	s15, [r3]
 800202a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800202e:	4ba7      	ldr	r3, [pc, #668]	; (80022cc <kalman+0x39c>)
 8002030:	edd3 7a00 	vldr	s15, [r3]
 8002034:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002038:	ee17 0a90 	vmov	r0, s15
 800203c:	f7fe fa30 	bl	80004a0 <__aeabi_f2d>
 8002040:	4602      	mov	r2, r0
 8002042:	460b      	mov	r3, r1
 8002044:	4640      	mov	r0, r8
 8002046:	4649      	mov	r1, r9
 8002048:	f7fe fa82 	bl	8000550 <__aeabi_dmul>
 800204c:	4602      	mov	r2, r0
 800204e:	460b      	mov	r3, r1
 8002050:	4690      	mov	r8, r2
 8002052:	4699      	mov	r9, r3
 8002054:	4b94      	ldr	r3, [pc, #592]	; (80022a8 <kalman+0x378>)
 8002056:	681b      	ldr	r3, [r3, #0]
 8002058:	4618      	mov	r0, r3
 800205a:	f7fe fa21 	bl	80004a0 <__aeabi_f2d>
 800205e:	4602      	mov	r2, r0
 8002060:	460b      	mov	r3, r1
 8002062:	4640      	mov	r0, r8
 8002064:	4649      	mov	r1, r9
 8002066:	f7fe fb9d 	bl	80007a4 <__aeabi_ddiv>
 800206a:	4602      	mov	r2, r0
 800206c:	460b      	mov	r3, r1
 800206e:	4620      	mov	r0, r4
 8002070:	4629      	mov	r1, r5
 8002072:	f7fe f8b7 	bl	80001e4 <__adddf3>
 8002076:	4602      	mov	r2, r0
 8002078:	460b      	mov	r3, r1
 800207a:	4610      	mov	r0, r2
 800207c:	4619      	mov	r1, r3
 800207e:	f7fe fd17 	bl	8000ab0 <__aeabi_d2f>
 8002082:	4603      	mov	r3, r0
 8002084:	4a92      	ldr	r2, [pc, #584]	; (80022d0 <kalman+0x3a0>)
 8002086:	6013      	str	r3, [r2, #0]
	P12predict = (float) P12predictPRE+delt*P22predictPRE+(pow(Gl,2)*delt*pow(delt,2))/2;
 8002088:	4b87      	ldr	r3, [pc, #540]	; (80022a8 <kalman+0x378>)
 800208a:	ed93 7a00 	vldr	s14, [r3]
 800208e:	4b8e      	ldr	r3, [pc, #568]	; (80022c8 <kalman+0x398>)
 8002090:	edd3 7a00 	vldr	s15, [r3]
 8002094:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002098:	4b8c      	ldr	r3, [pc, #560]	; (80022cc <kalman+0x39c>)
 800209a:	edd3 7a00 	vldr	s15, [r3]
 800209e:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020a2:	ee17 0a90 	vmov	r0, s15
 80020a6:	f7fe f9fb 	bl	80004a0 <__aeabi_f2d>
 80020aa:	4604      	mov	r4, r0
 80020ac:	460d      	mov	r5, r1
 80020ae:	4b84      	ldr	r3, [pc, #528]	; (80022c0 <kalman+0x390>)
 80020b0:	681b      	ldr	r3, [r3, #0]
 80020b2:	4618      	mov	r0, r3
 80020b4:	f7fe f9f4 	bl	80004a0 <__aeabi_f2d>
 80020b8:	4602      	mov	r2, r0
 80020ba:	460b      	mov	r3, r1
 80020bc:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002290 <kalman+0x360>
 80020c0:	ec43 2b10 	vmov	d0, r2, r3
 80020c4:	f004 feb4 	bl	8006e30 <pow>
 80020c8:	ec59 8b10 	vmov	r8, r9, d0
 80020cc:	4b76      	ldr	r3, [pc, #472]	; (80022a8 <kalman+0x378>)
 80020ce:	681b      	ldr	r3, [r3, #0]
 80020d0:	4618      	mov	r0, r3
 80020d2:	f7fe f9e5 	bl	80004a0 <__aeabi_f2d>
 80020d6:	4602      	mov	r2, r0
 80020d8:	460b      	mov	r3, r1
 80020da:	4640      	mov	r0, r8
 80020dc:	4649      	mov	r1, r9
 80020de:	f7fe fa37 	bl	8000550 <__aeabi_dmul>
 80020e2:	4602      	mov	r2, r0
 80020e4:	460b      	mov	r3, r1
 80020e6:	4690      	mov	r8, r2
 80020e8:	4699      	mov	r9, r3
 80020ea:	4b6f      	ldr	r3, [pc, #444]	; (80022a8 <kalman+0x378>)
 80020ec:	681b      	ldr	r3, [r3, #0]
 80020ee:	4618      	mov	r0, r3
 80020f0:	f7fe f9d6 	bl	80004a0 <__aeabi_f2d>
 80020f4:	4602      	mov	r2, r0
 80020f6:	460b      	mov	r3, r1
 80020f8:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002290 <kalman+0x360>
 80020fc:	ec43 2b10 	vmov	d0, r2, r3
 8002100:	f004 fe96 	bl	8006e30 <pow>
 8002104:	ec53 2b10 	vmov	r2, r3, d0
 8002108:	4640      	mov	r0, r8
 800210a:	4649      	mov	r1, r9
 800210c:	f7fe fa20 	bl	8000550 <__aeabi_dmul>
 8002110:	4602      	mov	r2, r0
 8002112:	460b      	mov	r3, r1
 8002114:	4610      	mov	r0, r2
 8002116:	4619      	mov	r1, r3
 8002118:	f04f 0200 	mov.w	r2, #0
 800211c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002120:	f7fe fb40 	bl	80007a4 <__aeabi_ddiv>
 8002124:	4602      	mov	r2, r0
 8002126:	460b      	mov	r3, r1
 8002128:	4620      	mov	r0, r4
 800212a:	4629      	mov	r1, r5
 800212c:	f7fe f85a 	bl	80001e4 <__adddf3>
 8002130:	4602      	mov	r2, r0
 8002132:	460b      	mov	r3, r1
 8002134:	4610      	mov	r0, r2
 8002136:	4619      	mov	r1, r3
 8002138:	f7fe fcba 	bl	8000ab0 <__aeabi_d2f>
 800213c:	4603      	mov	r3, r0
 800213e:	4a65      	ldr	r2, [pc, #404]	; (80022d4 <kalman+0x3a4>)
 8002140:	6013      	str	r3, [r2, #0]
	P21predict = (float) (2*delt*P21predictPRE+pow(Gl,2)*pow(delt,4)+2*P22predictPRE*pow(delt,2))/(2*delt);
 8002142:	4b59      	ldr	r3, [pc, #356]	; (80022a8 <kalman+0x378>)
 8002144:	edd3 7a00 	vldr	s15, [r3]
 8002148:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800214c:	4b5a      	ldr	r3, [pc, #360]	; (80022b8 <kalman+0x388>)
 800214e:	edd3 7a00 	vldr	s15, [r3]
 8002152:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002156:	ee17 0a90 	vmov	r0, s15
 800215a:	f7fe f9a1 	bl	80004a0 <__aeabi_f2d>
 800215e:	4604      	mov	r4, r0
 8002160:	460d      	mov	r5, r1
 8002162:	4b57      	ldr	r3, [pc, #348]	; (80022c0 <kalman+0x390>)
 8002164:	681b      	ldr	r3, [r3, #0]
 8002166:	4618      	mov	r0, r3
 8002168:	f7fe f99a 	bl	80004a0 <__aeabi_f2d>
 800216c:	4602      	mov	r2, r0
 800216e:	460b      	mov	r3, r1
 8002170:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8002290 <kalman+0x360>
 8002174:	ec43 2b10 	vmov	d0, r2, r3
 8002178:	f004 fe5a 	bl	8006e30 <pow>
 800217c:	ec59 8b10 	vmov	r8, r9, d0
 8002180:	4b49      	ldr	r3, [pc, #292]	; (80022a8 <kalman+0x378>)
 8002182:	681b      	ldr	r3, [r3, #0]
 8002184:	4618      	mov	r0, r3
 8002186:	f7fe f98b 	bl	80004a0 <__aeabi_f2d>
 800218a:	4602      	mov	r2, r0
 800218c:	460b      	mov	r3, r1
 800218e:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002298 <kalman+0x368>
 8002192:	ec43 2b10 	vmov	d0, r2, r3
 8002196:	f004 fe4b 	bl	8006e30 <pow>
 800219a:	ec53 2b10 	vmov	r2, r3, d0
 800219e:	4640      	mov	r0, r8
 80021a0:	4649      	mov	r1, r9
 80021a2:	f7fe f9d5 	bl	8000550 <__aeabi_dmul>
 80021a6:	4602      	mov	r2, r0
 80021a8:	460b      	mov	r3, r1
 80021aa:	4620      	mov	r0, r4
 80021ac:	4629      	mov	r1, r5
 80021ae:	f7fe f819 	bl	80001e4 <__adddf3>
 80021b2:	4602      	mov	r2, r0
 80021b4:	460b      	mov	r3, r1
 80021b6:	4690      	mov	r8, r2
 80021b8:	4699      	mov	r9, r3
 80021ba:	4b43      	ldr	r3, [pc, #268]	; (80022c8 <kalman+0x398>)
 80021bc:	edd3 7a00 	vldr	s15, [r3]
 80021c0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80021c4:	ee17 0a90 	vmov	r0, s15
 80021c8:	f7fe f96a 	bl	80004a0 <__aeabi_f2d>
 80021cc:	4604      	mov	r4, r0
 80021ce:	460d      	mov	r5, r1
 80021d0:	4b35      	ldr	r3, [pc, #212]	; (80022a8 <kalman+0x378>)
 80021d2:	681b      	ldr	r3, [r3, #0]
 80021d4:	4618      	mov	r0, r3
 80021d6:	f7fe f963 	bl	80004a0 <__aeabi_f2d>
 80021da:	4602      	mov	r2, r0
 80021dc:	460b      	mov	r3, r1
 80021de:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002290 <kalman+0x360>
 80021e2:	ec43 2b10 	vmov	d0, r2, r3
 80021e6:	f004 fe23 	bl	8006e30 <pow>
 80021ea:	ec53 2b10 	vmov	r2, r3, d0
 80021ee:	4620      	mov	r0, r4
 80021f0:	4629      	mov	r1, r5
 80021f2:	f7fe f9ad 	bl	8000550 <__aeabi_dmul>
 80021f6:	4602      	mov	r2, r0
 80021f8:	460b      	mov	r3, r1
 80021fa:	4640      	mov	r0, r8
 80021fc:	4649      	mov	r1, r9
 80021fe:	f7fd fff1 	bl	80001e4 <__adddf3>
 8002202:	4602      	mov	r2, r0
 8002204:	460b      	mov	r3, r1
 8002206:	4610      	mov	r0, r2
 8002208:	4619      	mov	r1, r3
 800220a:	f7fe fc51 	bl	8000ab0 <__aeabi_d2f>
 800220e:	ee06 0a90 	vmov	s13, r0
 8002212:	4b25      	ldr	r3, [pc, #148]	; (80022a8 <kalman+0x378>)
 8002214:	edd3 7a00 	vldr	s15, [r3]
 8002218:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800221c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002220:	4b2d      	ldr	r3, [pc, #180]	; (80022d8 <kalman+0x3a8>)
 8002222:	edc3 7a00 	vstr	s15, [r3]
	P22predict = (float) pow(Gl,2)*pow(delt,2) +P22predictPRE;
 8002226:	4b26      	ldr	r3, [pc, #152]	; (80022c0 <kalman+0x390>)
 8002228:	681b      	ldr	r3, [r3, #0]
 800222a:	4618      	mov	r0, r3
 800222c:	f7fe f938 	bl	80004a0 <__aeabi_f2d>
 8002230:	4602      	mov	r2, r0
 8002232:	460b      	mov	r3, r1
 8002234:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002290 <kalman+0x360>
 8002238:	ec43 2b10 	vmov	d0, r2, r3
 800223c:	f004 fdf8 	bl	8006e30 <pow>
 8002240:	ec53 2b10 	vmov	r2, r3, d0
 8002244:	4610      	mov	r0, r2
 8002246:	4619      	mov	r1, r3
 8002248:	f7fe fc32 	bl	8000ab0 <__aeabi_d2f>
 800224c:	4603      	mov	r3, r0
 800224e:	4618      	mov	r0, r3
 8002250:	f7fe f926 	bl	80004a0 <__aeabi_f2d>
 8002254:	4604      	mov	r4, r0
 8002256:	460d      	mov	r5, r1
 8002258:	4b13      	ldr	r3, [pc, #76]	; (80022a8 <kalman+0x378>)
 800225a:	681b      	ldr	r3, [r3, #0]
 800225c:	4618      	mov	r0, r3
 800225e:	f7fe f91f 	bl	80004a0 <__aeabi_f2d>
 8002262:	4602      	mov	r2, r0
 8002264:	460b      	mov	r3, r1
 8002266:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8002290 <kalman+0x360>
 800226a:	ec43 2b10 	vmov	d0, r2, r3
 800226e:	f004 fddf 	bl	8006e30 <pow>
 8002272:	ec53 2b10 	vmov	r2, r3, d0
 8002276:	4620      	mov	r0, r4
 8002278:	4629      	mov	r1, r5
 800227a:	f7fe f969 	bl	8000550 <__aeabi_dmul>
 800227e:	4602      	mov	r2, r0
 8002280:	460b      	mov	r3, r1
 8002282:	4614      	mov	r4, r2
 8002284:	461d      	mov	r5, r3
 8002286:	4b10      	ldr	r3, [pc, #64]	; (80022c8 <kalman+0x398>)
 8002288:	681b      	ldr	r3, [r3, #0]
 800228a:	4618      	mov	r0, r3
 800228c:	e026      	b.n	80022dc <kalman+0x3ac>
 800228e:	bf00      	nop
 8002290:	00000000 	.word	0x00000000
 8002294:	40000000 	.word	0x40000000
 8002298:	00000000 	.word	0x00000000
 800229c:	40100000 	.word	0x40100000
 80022a0:	20000008 	.word	0x20000008
 80022a4:	49742400 	.word	0x49742400
 80022a8:	20000144 	.word	0x20000144
 80022ac:	20000148 	.word	0x20000148
 80022b0:	2000014c 	.word	0x2000014c
 80022b4:	20000150 	.word	0x20000150
 80022b8:	20000154 	.word	0x20000154
 80022bc:	20000158 	.word	0x20000158
 80022c0:	20000020 	.word	0x20000020
 80022c4:	40100000 	.word	0x40100000
 80022c8:	2000015c 	.word	0x2000015c
 80022cc:	20000160 	.word	0x20000160
 80022d0:	20000164 	.word	0x20000164
 80022d4:	20000168 	.word	0x20000168
 80022d8:	2000016c 	.word	0x2000016c
 80022dc:	f7fe f8e0 	bl	80004a0 <__aeabi_f2d>
 80022e0:	4602      	mov	r2, r0
 80022e2:	460b      	mov	r3, r1
 80022e4:	4620      	mov	r0, r4
 80022e6:	4629      	mov	r1, r5
 80022e8:	f7fd ff7c 	bl	80001e4 <__adddf3>
 80022ec:	4602      	mov	r2, r0
 80022ee:	460b      	mov	r3, r1
 80022f0:	4610      	mov	r0, r2
 80022f2:	4619      	mov	r1, r3
 80022f4:	f7fe fbdc 	bl	8000ab0 <__aeabi_d2f>
 80022f8:	4603      	mov	r3, r0
 80022fa:	4ac9      	ldr	r2, [pc, #804]	; (8002620 <kalman+0x6f0>)
 80022fc:	6013      	str	r3, [r2, #0]

	EncoderVel = (float) omegaPredict + (P22predict*errorVel)/(pow(R,2)+P22predict);
 80022fe:	4bc9      	ldr	r3, [pc, #804]	; (8002624 <kalman+0x6f4>)
 8002300:	681b      	ldr	r3, [r3, #0]
 8002302:	4618      	mov	r0, r3
 8002304:	f7fe f8cc 	bl	80004a0 <__aeabi_f2d>
 8002308:	4604      	mov	r4, r0
 800230a:	460d      	mov	r5, r1
 800230c:	4bc4      	ldr	r3, [pc, #784]	; (8002620 <kalman+0x6f0>)
 800230e:	ed93 7a00 	vldr	s14, [r3]
 8002312:	4bc5      	ldr	r3, [pc, #788]	; (8002628 <kalman+0x6f8>)
 8002314:	edd3 7a00 	vldr	s15, [r3]
 8002318:	ee67 7a27 	vmul.f32	s15, s14, s15
 800231c:	ee17 0a90 	vmov	r0, s15
 8002320:	f7fe f8be 	bl	80004a0 <__aeabi_f2d>
 8002324:	4680      	mov	r8, r0
 8002326:	4689      	mov	r9, r1
 8002328:	4bc0      	ldr	r3, [pc, #768]	; (800262c <kalman+0x6fc>)
 800232a:	681b      	ldr	r3, [r3, #0]
 800232c:	4618      	mov	r0, r3
 800232e:	f7fe f8b7 	bl	80004a0 <__aeabi_f2d>
 8002332:	4602      	mov	r2, r0
 8002334:	460b      	mov	r3, r1
 8002336:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 8002618 <kalman+0x6e8>
 800233a:	ec43 2b10 	vmov	d0, r2, r3
 800233e:	f004 fd77 	bl	8006e30 <pow>
 8002342:	ec5b ab10 	vmov	sl, fp, d0
 8002346:	4bb6      	ldr	r3, [pc, #728]	; (8002620 <kalman+0x6f0>)
 8002348:	681b      	ldr	r3, [r3, #0]
 800234a:	4618      	mov	r0, r3
 800234c:	f7fe f8a8 	bl	80004a0 <__aeabi_f2d>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4650      	mov	r0, sl
 8002356:	4659      	mov	r1, fp
 8002358:	f7fd ff44 	bl	80001e4 <__adddf3>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4640      	mov	r0, r8
 8002362:	4649      	mov	r1, r9
 8002364:	f7fe fa1e 	bl	80007a4 <__aeabi_ddiv>
 8002368:	4602      	mov	r2, r0
 800236a:	460b      	mov	r3, r1
 800236c:	4620      	mov	r0, r4
 800236e:	4629      	mov	r1, r5
 8002370:	f7fd ff38 	bl	80001e4 <__adddf3>
 8002374:	4602      	mov	r2, r0
 8002376:	460b      	mov	r3, r1
 8002378:	4610      	mov	r0, r2
 800237a:	4619      	mov	r1, r3
 800237c:	f7fe fb98 	bl	8000ab0 <__aeabi_d2f>
 8002380:	4603      	mov	r3, r0
 8002382:	4aab      	ldr	r2, [pc, #684]	; (8002630 <kalman+0x700>)
 8002384:	6013      	str	r3, [r2, #0]
	P11predictPRE = (float) P11predict - (P12predict*P21predict)/(pow(R,2)+P22predict);
 8002386:	4bab      	ldr	r3, [pc, #684]	; (8002634 <kalman+0x704>)
 8002388:	681b      	ldr	r3, [r3, #0]
 800238a:	4618      	mov	r0, r3
 800238c:	f7fe f888 	bl	80004a0 <__aeabi_f2d>
 8002390:	4604      	mov	r4, r0
 8002392:	460d      	mov	r5, r1
 8002394:	4ba8      	ldr	r3, [pc, #672]	; (8002638 <kalman+0x708>)
 8002396:	ed93 7a00 	vldr	s14, [r3]
 800239a:	4ba8      	ldr	r3, [pc, #672]	; (800263c <kalman+0x70c>)
 800239c:	edd3 7a00 	vldr	s15, [r3]
 80023a0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80023a4:	ee17 0a90 	vmov	r0, s15
 80023a8:	f7fe f87a 	bl	80004a0 <__aeabi_f2d>
 80023ac:	4680      	mov	r8, r0
 80023ae:	4689      	mov	r9, r1
 80023b0:	4b9e      	ldr	r3, [pc, #632]	; (800262c <kalman+0x6fc>)
 80023b2:	681b      	ldr	r3, [r3, #0]
 80023b4:	4618      	mov	r0, r3
 80023b6:	f7fe f873 	bl	80004a0 <__aeabi_f2d>
 80023ba:	4602      	mov	r2, r0
 80023bc:	460b      	mov	r3, r1
 80023be:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8002618 <kalman+0x6e8>
 80023c2:	ec43 2b10 	vmov	d0, r2, r3
 80023c6:	f004 fd33 	bl	8006e30 <pow>
 80023ca:	ec5b ab10 	vmov	sl, fp, d0
 80023ce:	4b94      	ldr	r3, [pc, #592]	; (8002620 <kalman+0x6f0>)
 80023d0:	681b      	ldr	r3, [r3, #0]
 80023d2:	4618      	mov	r0, r3
 80023d4:	f7fe f864 	bl	80004a0 <__aeabi_f2d>
 80023d8:	4602      	mov	r2, r0
 80023da:	460b      	mov	r3, r1
 80023dc:	4650      	mov	r0, sl
 80023de:	4659      	mov	r1, fp
 80023e0:	f7fd ff00 	bl	80001e4 <__adddf3>
 80023e4:	4602      	mov	r2, r0
 80023e6:	460b      	mov	r3, r1
 80023e8:	4640      	mov	r0, r8
 80023ea:	4649      	mov	r1, r9
 80023ec:	f7fe f9da 	bl	80007a4 <__aeabi_ddiv>
 80023f0:	4602      	mov	r2, r0
 80023f2:	460b      	mov	r3, r1
 80023f4:	4620      	mov	r0, r4
 80023f6:	4629      	mov	r1, r5
 80023f8:	f7fd fef2 	bl	80001e0 <__aeabi_dsub>
 80023fc:	4602      	mov	r2, r0
 80023fe:	460b      	mov	r3, r1
 8002400:	4610      	mov	r0, r2
 8002402:	4619      	mov	r1, r3
 8002404:	f7fe fb54 	bl	8000ab0 <__aeabi_d2f>
 8002408:	4603      	mov	r3, r0
 800240a:	4a8d      	ldr	r2, [pc, #564]	; (8002640 <kalman+0x710>)
 800240c:	6013      	str	r3, [r2, #0]
	P12predictPRE = (float) P12predict - (P12predict*P22predict)/(pow(R,2)+P22predict);
 800240e:	4b8a      	ldr	r3, [pc, #552]	; (8002638 <kalman+0x708>)
 8002410:	681b      	ldr	r3, [r3, #0]
 8002412:	4618      	mov	r0, r3
 8002414:	f7fe f844 	bl	80004a0 <__aeabi_f2d>
 8002418:	4604      	mov	r4, r0
 800241a:	460d      	mov	r5, r1
 800241c:	4b86      	ldr	r3, [pc, #536]	; (8002638 <kalman+0x708>)
 800241e:	ed93 7a00 	vldr	s14, [r3]
 8002422:	4b7f      	ldr	r3, [pc, #508]	; (8002620 <kalman+0x6f0>)
 8002424:	edd3 7a00 	vldr	s15, [r3]
 8002428:	ee67 7a27 	vmul.f32	s15, s14, s15
 800242c:	ee17 0a90 	vmov	r0, s15
 8002430:	f7fe f836 	bl	80004a0 <__aeabi_f2d>
 8002434:	4680      	mov	r8, r0
 8002436:	4689      	mov	r9, r1
 8002438:	4b7c      	ldr	r3, [pc, #496]	; (800262c <kalman+0x6fc>)
 800243a:	681b      	ldr	r3, [r3, #0]
 800243c:	4618      	mov	r0, r3
 800243e:	f7fe f82f 	bl	80004a0 <__aeabi_f2d>
 8002442:	4602      	mov	r2, r0
 8002444:	460b      	mov	r3, r1
 8002446:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002618 <kalman+0x6e8>
 800244a:	ec43 2b10 	vmov	d0, r2, r3
 800244e:	f004 fcef 	bl	8006e30 <pow>
 8002452:	ec5b ab10 	vmov	sl, fp, d0
 8002456:	4b72      	ldr	r3, [pc, #456]	; (8002620 <kalman+0x6f0>)
 8002458:	681b      	ldr	r3, [r3, #0]
 800245a:	4618      	mov	r0, r3
 800245c:	f7fe f820 	bl	80004a0 <__aeabi_f2d>
 8002460:	4602      	mov	r2, r0
 8002462:	460b      	mov	r3, r1
 8002464:	4650      	mov	r0, sl
 8002466:	4659      	mov	r1, fp
 8002468:	f7fd febc 	bl	80001e4 <__adddf3>
 800246c:	4602      	mov	r2, r0
 800246e:	460b      	mov	r3, r1
 8002470:	4640      	mov	r0, r8
 8002472:	4649      	mov	r1, r9
 8002474:	f7fe f996 	bl	80007a4 <__aeabi_ddiv>
 8002478:	4602      	mov	r2, r0
 800247a:	460b      	mov	r3, r1
 800247c:	4620      	mov	r0, r4
 800247e:	4629      	mov	r1, r5
 8002480:	f7fd feae 	bl	80001e0 <__aeabi_dsub>
 8002484:	4602      	mov	r2, r0
 8002486:	460b      	mov	r3, r1
 8002488:	4610      	mov	r0, r2
 800248a:	4619      	mov	r1, r3
 800248c:	f7fe fb10 	bl	8000ab0 <__aeabi_d2f>
 8002490:	4603      	mov	r3, r0
 8002492:	4a6c      	ldr	r2, [pc, #432]	; (8002644 <kalman+0x714>)
 8002494:	6013      	str	r3, [r2, #0]
	P21predictPRE = (float) P21predict*(P22predict/(pow(R,2)+P22predict)-1);
 8002496:	4b69      	ldr	r3, [pc, #420]	; (800263c <kalman+0x70c>)
 8002498:	681b      	ldr	r3, [r3, #0]
 800249a:	4618      	mov	r0, r3
 800249c:	f7fe f800 	bl	80004a0 <__aeabi_f2d>
 80024a0:	4604      	mov	r4, r0
 80024a2:	460d      	mov	r5, r1
 80024a4:	4b5e      	ldr	r3, [pc, #376]	; (8002620 <kalman+0x6f0>)
 80024a6:	681b      	ldr	r3, [r3, #0]
 80024a8:	4618      	mov	r0, r3
 80024aa:	f7fd fff9 	bl	80004a0 <__aeabi_f2d>
 80024ae:	4680      	mov	r8, r0
 80024b0:	4689      	mov	r9, r1
 80024b2:	4b5e      	ldr	r3, [pc, #376]	; (800262c <kalman+0x6fc>)
 80024b4:	681b      	ldr	r3, [r3, #0]
 80024b6:	4618      	mov	r0, r3
 80024b8:	f7fd fff2 	bl	80004a0 <__aeabi_f2d>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002618 <kalman+0x6e8>
 80024c4:	ec43 2b10 	vmov	d0, r2, r3
 80024c8:	f004 fcb2 	bl	8006e30 <pow>
 80024cc:	ec5b ab10 	vmov	sl, fp, d0
 80024d0:	4b53      	ldr	r3, [pc, #332]	; (8002620 <kalman+0x6f0>)
 80024d2:	681b      	ldr	r3, [r3, #0]
 80024d4:	4618      	mov	r0, r3
 80024d6:	f7fd ffe3 	bl	80004a0 <__aeabi_f2d>
 80024da:	4602      	mov	r2, r0
 80024dc:	460b      	mov	r3, r1
 80024de:	4650      	mov	r0, sl
 80024e0:	4659      	mov	r1, fp
 80024e2:	f7fd fe7f 	bl	80001e4 <__adddf3>
 80024e6:	4602      	mov	r2, r0
 80024e8:	460b      	mov	r3, r1
 80024ea:	4640      	mov	r0, r8
 80024ec:	4649      	mov	r1, r9
 80024ee:	f7fe f959 	bl	80007a4 <__aeabi_ddiv>
 80024f2:	4602      	mov	r2, r0
 80024f4:	460b      	mov	r3, r1
 80024f6:	4610      	mov	r0, r2
 80024f8:	4619      	mov	r1, r3
 80024fa:	f04f 0200 	mov.w	r2, #0
 80024fe:	4b52      	ldr	r3, [pc, #328]	; (8002648 <kalman+0x718>)
 8002500:	f7fd fe6e 	bl	80001e0 <__aeabi_dsub>
 8002504:	4602      	mov	r2, r0
 8002506:	460b      	mov	r3, r1
 8002508:	4620      	mov	r0, r4
 800250a:	4629      	mov	r1, r5
 800250c:	f7fe f820 	bl	8000550 <__aeabi_dmul>
 8002510:	4602      	mov	r2, r0
 8002512:	460b      	mov	r3, r1
 8002514:	4610      	mov	r0, r2
 8002516:	4619      	mov	r1, r3
 8002518:	f7fe faca 	bl	8000ab0 <__aeabi_d2f>
 800251c:	4603      	mov	r3, r0
 800251e:	4a4b      	ldr	r2, [pc, #300]	; (800264c <kalman+0x71c>)
 8002520:	6013      	str	r3, [r2, #0]
	P22predictPRE = (float) P22predict*(P22predict/(pow(R,2)+P22predict)-1);
 8002522:	4b3f      	ldr	r3, [pc, #252]	; (8002620 <kalman+0x6f0>)
 8002524:	681b      	ldr	r3, [r3, #0]
 8002526:	4618      	mov	r0, r3
 8002528:	f7fd ffba 	bl	80004a0 <__aeabi_f2d>
 800252c:	4604      	mov	r4, r0
 800252e:	460d      	mov	r5, r1
 8002530:	4b3b      	ldr	r3, [pc, #236]	; (8002620 <kalman+0x6f0>)
 8002532:	681b      	ldr	r3, [r3, #0]
 8002534:	4618      	mov	r0, r3
 8002536:	f7fd ffb3 	bl	80004a0 <__aeabi_f2d>
 800253a:	4680      	mov	r8, r0
 800253c:	4689      	mov	r9, r1
 800253e:	4b3b      	ldr	r3, [pc, #236]	; (800262c <kalman+0x6fc>)
 8002540:	681b      	ldr	r3, [r3, #0]
 8002542:	4618      	mov	r0, r3
 8002544:	f7fd ffac 	bl	80004a0 <__aeabi_f2d>
 8002548:	4602      	mov	r2, r0
 800254a:	460b      	mov	r3, r1
 800254c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8002618 <kalman+0x6e8>
 8002550:	ec43 2b10 	vmov	d0, r2, r3
 8002554:	f004 fc6c 	bl	8006e30 <pow>
 8002558:	ec5b ab10 	vmov	sl, fp, d0
 800255c:	4b30      	ldr	r3, [pc, #192]	; (8002620 <kalman+0x6f0>)
 800255e:	681b      	ldr	r3, [r3, #0]
 8002560:	4618      	mov	r0, r3
 8002562:	f7fd ff9d 	bl	80004a0 <__aeabi_f2d>
 8002566:	4602      	mov	r2, r0
 8002568:	460b      	mov	r3, r1
 800256a:	4650      	mov	r0, sl
 800256c:	4659      	mov	r1, fp
 800256e:	f7fd fe39 	bl	80001e4 <__adddf3>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	4640      	mov	r0, r8
 8002578:	4649      	mov	r1, r9
 800257a:	f7fe f913 	bl	80007a4 <__aeabi_ddiv>
 800257e:	4602      	mov	r2, r0
 8002580:	460b      	mov	r3, r1
 8002582:	4610      	mov	r0, r2
 8002584:	4619      	mov	r1, r3
 8002586:	f04f 0200 	mov.w	r2, #0
 800258a:	4b2f      	ldr	r3, [pc, #188]	; (8002648 <kalman+0x718>)
 800258c:	f7fd fe28 	bl	80001e0 <__aeabi_dsub>
 8002590:	4602      	mov	r2, r0
 8002592:	460b      	mov	r3, r1
 8002594:	4620      	mov	r0, r4
 8002596:	4629      	mov	r1, r5
 8002598:	f7fd ffda 	bl	8000550 <__aeabi_dmul>
 800259c:	4602      	mov	r2, r0
 800259e:	460b      	mov	r3, r1
 80025a0:	4610      	mov	r0, r2
 80025a2:	4619      	mov	r1, r3
 80025a4:	f7fe fa84 	bl	8000ab0 <__aeabi_d2f>
 80025a8:	4603      	mov	r3, r0
 80025aa:	4a29      	ldr	r2, [pc, #164]	; (8002650 <kalman+0x720>)
 80025ac:	6013      	str	r3, [r2, #0]
	omegaPredictPre = EncoderVel;
 80025ae:	4b20      	ldr	r3, [pc, #128]	; (8002630 <kalman+0x700>)
 80025b0:	681b      	ldr	r3, [r3, #0]
 80025b2:	4a28      	ldr	r2, [pc, #160]	; (8002654 <kalman+0x724>)
 80025b4:	6013      	str	r3, [r2, #0]
	if (velocity == 0){
 80025b6:	4b28      	ldr	r3, [pc, #160]	; (8002658 <kalman+0x728>)
 80025b8:	edd3 7a00 	vldr	s15, [r3]
 80025bc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80025c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80025c4:	d14e      	bne.n	8002664 <kalman+0x734>
		P11predict = 0;
 80025c6:	4b1b      	ldr	r3, [pc, #108]	; (8002634 <kalman+0x704>)
 80025c8:	f04f 0200 	mov.w	r2, #0
 80025cc:	601a      	str	r2, [r3, #0]
		P12predict = 0;
 80025ce:	4b1a      	ldr	r3, [pc, #104]	; (8002638 <kalman+0x708>)
 80025d0:	f04f 0200 	mov.w	r2, #0
 80025d4:	601a      	str	r2, [r3, #0]
		P21predict = 0;
 80025d6:	4b19      	ldr	r3, [pc, #100]	; (800263c <kalman+0x70c>)
 80025d8:	f04f 0200 	mov.w	r2, #0
 80025dc:	601a      	str	r2, [r3, #0]
		P22predict = 0;
 80025de:	4b10      	ldr	r3, [pc, #64]	; (8002620 <kalman+0x6f0>)
 80025e0:	f04f 0200 	mov.w	r2, #0
 80025e4:	601a      	str	r2, [r3, #0]
		P11predictPRE = 0;
 80025e6:	4b16      	ldr	r3, [pc, #88]	; (8002640 <kalman+0x710>)
 80025e8:	f04f 0200 	mov.w	r2, #0
 80025ec:	601a      	str	r2, [r3, #0]
		P12predictPRE = 0;
 80025ee:	4b15      	ldr	r3, [pc, #84]	; (8002644 <kalman+0x714>)
 80025f0:	f04f 0200 	mov.w	r2, #0
 80025f4:	601a      	str	r2, [r3, #0]
		P21predictPRE = 0;
 80025f6:	4b15      	ldr	r3, [pc, #84]	; (800264c <kalman+0x71c>)
 80025f8:	f04f 0200 	mov.w	r2, #0
 80025fc:	601a      	str	r2, [r3, #0]
		P22predictPRE = 0;
 80025fe:	4b14      	ldr	r3, [pc, #80]	; (8002650 <kalman+0x720>)
 8002600:	f04f 0200 	mov.w	r2, #0
 8002604:	601a      	str	r2, [r3, #0]
		omegaPredict = 0;
 8002606:	4b07      	ldr	r3, [pc, #28]	; (8002624 <kalman+0x6f4>)
 8002608:	f04f 0200 	mov.w	r2, #0
 800260c:	601a      	str	r2, [r3, #0]
		omegaPredictPre = 0;
 800260e:	4b11      	ldr	r3, [pc, #68]	; (8002654 <kalman+0x724>)
 8002610:	f04f 0200 	mov.w	r2, #0
 8002614:	601a      	str	r2, [r3, #0]
 8002616:	e021      	b.n	800265c <kalman+0x72c>
 8002618:	00000000 	.word	0x00000000
 800261c:	40000000 	.word	0x40000000
 8002620:	20000170 	.word	0x20000170
 8002624:	2000014c 	.word	0x2000014c
 8002628:	20000150 	.word	0x20000150
 800262c:	2000001c 	.word	0x2000001c
 8002630:	200000cc 	.word	0x200000cc
 8002634:	20000164 	.word	0x20000164
 8002638:	20000168 	.word	0x20000168
 800263c:	2000016c 	.word	0x2000016c
 8002640:	20000158 	.word	0x20000158
 8002644:	20000160 	.word	0x20000160
 8002648:	3ff00000 	.word	0x3ff00000
 800264c:	20000154 	.word	0x20000154
 8002650:	2000015c 	.word	0x2000015c
 8002654:	20000148 	.word	0x20000148
 8002658:	200000d0 	.word	0x200000d0
		errorVel = 0;
 800265c:	4b03      	ldr	r3, [pc, #12]	; (800266c <kalman+0x73c>)
 800265e:	f04f 0200 	mov.w	r2, #0
 8002662:	601a      	str	r2, [r3, #0]
	}
}
 8002664:	bf00      	nop
 8002666:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800266a:	bf00      	nop
 800266c:	20000150 	.word	0x20000150

08002670 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002670:	b4b0      	push	{r4, r5, r7}
 8002672:	b083      	sub	sp, #12
 8002674:	af00      	add	r7, sp, #0
 8002676:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002678:	687b      	ldr	r3, [r7, #4]
 800267a:	4a09      	ldr	r2, [pc, #36]	; (80026a0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800267c:	4293      	cmp	r3, r2
 800267e:	d109      	bne.n	8002694 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8002680:	4b08      	ldr	r3, [pc, #32]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002682:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002686:	f112 34ff 	adds.w	r4, r2, #4294967295
 800268a:	f143 0500 	adc.w	r5, r3, #0
 800268e:	4b05      	ldr	r3, [pc, #20]	; (80026a4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002690:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8002694:	bf00      	nop
 8002696:	370c      	adds	r7, #12
 8002698:	46bd      	mov	sp, r7
 800269a:	bcb0      	pop	{r4, r5, r7}
 800269c:	4770      	bx	lr
 800269e:	bf00      	nop
 80026a0:	20000288 	.word	0x20000288
 80026a4:	200000c0 	.word	0x200000c0

080026a8 <micros>:
uint64_t micros()
{
 80026a8:	b4b0      	push	{r4, r5, r7}
 80026aa:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80026ac:	4b09      	ldr	r3, [pc, #36]	; (80026d4 <micros+0x2c>)
 80026ae:	681b      	ldr	r3, [r3, #0]
 80026b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80026b2:	4618      	mov	r0, r3
 80026b4:	f04f 0100 	mov.w	r1, #0
 80026b8:	4b07      	ldr	r3, [pc, #28]	; (80026d8 <micros+0x30>)
 80026ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80026be:	1884      	adds	r4, r0, r2
 80026c0:	eb41 0503 	adc.w	r5, r1, r3
 80026c4:	4622      	mov	r2, r4
 80026c6:	462b      	mov	r3, r5
}
 80026c8:	4610      	mov	r0, r2
 80026ca:	4619      	mov	r1, r3
 80026cc:	46bd      	mov	sp, r7
 80026ce:	bcb0      	pop	{r4, r5, r7}
 80026d0:	4770      	bx	lr
 80026d2:	bf00      	nop
 80026d4:	20000288 	.word	0x20000288
 80026d8:	200000c0 	.word	0x200000c0

080026dc <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 80026dc:	b480      	push	{r7}
 80026de:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80026e0:	b672      	cpsid	i
}
 80026e2:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80026e4:	e7fe      	b.n	80026e4 <Error_Handler+0x8>
	...

080026e8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b082      	sub	sp, #8
 80026ec:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80026ee:	2300      	movs	r3, #0
 80026f0:	607b      	str	r3, [r7, #4]
 80026f2:	4b10      	ldr	r3, [pc, #64]	; (8002734 <HAL_MspInit+0x4c>)
 80026f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80026f6:	4a0f      	ldr	r2, [pc, #60]	; (8002734 <HAL_MspInit+0x4c>)
 80026f8:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80026fc:	6453      	str	r3, [r2, #68]	; 0x44
 80026fe:	4b0d      	ldr	r3, [pc, #52]	; (8002734 <HAL_MspInit+0x4c>)
 8002700:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002702:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002706:	607b      	str	r3, [r7, #4]
 8002708:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800270a:	2300      	movs	r3, #0
 800270c:	603b      	str	r3, [r7, #0]
 800270e:	4b09      	ldr	r3, [pc, #36]	; (8002734 <HAL_MspInit+0x4c>)
 8002710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002712:	4a08      	ldr	r2, [pc, #32]	; (8002734 <HAL_MspInit+0x4c>)
 8002714:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002718:	6413      	str	r3, [r2, #64]	; 0x40
 800271a:	4b06      	ldr	r3, [pc, #24]	; (8002734 <HAL_MspInit+0x4c>)
 800271c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800271e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002722:	603b      	str	r3, [r7, #0]
 8002724:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002726:	2007      	movs	r0, #7
 8002728:	f000 fb90 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800272c:	bf00      	nop
 800272e:	3708      	adds	r7, #8
 8002730:	46bd      	mov	sp, r7
 8002732:	bd80      	pop	{r7, pc}
 8002734:	40023800 	.word	0x40023800

08002738 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002738:	b580      	push	{r7, lr}
 800273a:	b08a      	sub	sp, #40	; 0x28
 800273c:	af00      	add	r7, sp, #0
 800273e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002740:	f107 0314 	add.w	r3, r7, #20
 8002744:	2200      	movs	r2, #0
 8002746:	601a      	str	r2, [r3, #0]
 8002748:	605a      	str	r2, [r3, #4]
 800274a:	609a      	str	r2, [r3, #8]
 800274c:	60da      	str	r2, [r3, #12]
 800274e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002750:	687b      	ldr	r3, [r7, #4]
 8002752:	681b      	ldr	r3, [r3, #0]
 8002754:	4a1d      	ldr	r2, [pc, #116]	; (80027cc <HAL_I2C_MspInit+0x94>)
 8002756:	4293      	cmp	r3, r2
 8002758:	d133      	bne.n	80027c2 <HAL_I2C_MspInit+0x8a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800275a:	2300      	movs	r3, #0
 800275c:	613b      	str	r3, [r7, #16]
 800275e:	4b1c      	ldr	r3, [pc, #112]	; (80027d0 <HAL_I2C_MspInit+0x98>)
 8002760:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002762:	4a1b      	ldr	r2, [pc, #108]	; (80027d0 <HAL_I2C_MspInit+0x98>)
 8002764:	f043 0302 	orr.w	r3, r3, #2
 8002768:	6313      	str	r3, [r2, #48]	; 0x30
 800276a:	4b19      	ldr	r3, [pc, #100]	; (80027d0 <HAL_I2C_MspInit+0x98>)
 800276c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800276e:	f003 0302 	and.w	r3, r3, #2
 8002772:	613b      	str	r3, [r7, #16]
 8002774:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002776:	23c0      	movs	r3, #192	; 0xc0
 8002778:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800277a:	2312      	movs	r3, #18
 800277c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 800277e:	2301      	movs	r3, #1
 8002780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002782:	2303      	movs	r3, #3
 8002784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002786:	2304      	movs	r3, #4
 8002788:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800278a:	f107 0314 	add.w	r3, r7, #20
 800278e:	4619      	mov	r1, r3
 8002790:	4810      	ldr	r0, [pc, #64]	; (80027d4 <HAL_I2C_MspInit+0x9c>)
 8002792:	f000 fbdb 	bl	8002f4c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002796:	2300      	movs	r3, #0
 8002798:	60fb      	str	r3, [r7, #12]
 800279a:	4b0d      	ldr	r3, [pc, #52]	; (80027d0 <HAL_I2C_MspInit+0x98>)
 800279c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800279e:	4a0c      	ldr	r2, [pc, #48]	; (80027d0 <HAL_I2C_MspInit+0x98>)
 80027a0:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80027a4:	6413      	str	r3, [r2, #64]	; 0x40
 80027a6:	4b0a      	ldr	r3, [pc, #40]	; (80027d0 <HAL_I2C_MspInit+0x98>)
 80027a8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80027aa:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80027ae:	60fb      	str	r3, [r7, #12]
 80027b0:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80027b2:	2200      	movs	r2, #0
 80027b4:	2100      	movs	r1, #0
 80027b6:	201f      	movs	r0, #31
 80027b8:	f000 fb53 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80027bc:	201f      	movs	r0, #31
 80027be:	f000 fb6c 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80027c2:	bf00      	nop
 80027c4:	3728      	adds	r7, #40	; 0x28
 80027c6:	46bd      	mov	sp, r7
 80027c8:	bd80      	pop	{r7, pc}
 80027ca:	bf00      	nop
 80027cc:	40005400 	.word	0x40005400
 80027d0:	40023800 	.word	0x40023800
 80027d4:	40020400 	.word	0x40020400

080027d8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80027d8:	b580      	push	{r7, lr}
 80027da:	b08a      	sub	sp, #40	; 0x28
 80027dc:	af00      	add	r7, sp, #0
 80027de:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027e0:	f107 0314 	add.w	r3, r7, #20
 80027e4:	2200      	movs	r2, #0
 80027e6:	601a      	str	r2, [r3, #0]
 80027e8:	605a      	str	r2, [r3, #4]
 80027ea:	609a      	str	r2, [r3, #8]
 80027ec:	60da      	str	r2, [r3, #12]
 80027ee:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 80027f0:	687b      	ldr	r3, [r7, #4]
 80027f2:	681b      	ldr	r3, [r3, #0]
 80027f4:	4a19      	ldr	r2, [pc, #100]	; (800285c <HAL_TIM_Encoder_MspInit+0x84>)
 80027f6:	4293      	cmp	r3, r2
 80027f8:	d12c      	bne.n	8002854 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 80027fa:	2300      	movs	r3, #0
 80027fc:	613b      	str	r3, [r7, #16]
 80027fe:	4b18      	ldr	r3, [pc, #96]	; (8002860 <HAL_TIM_Encoder_MspInit+0x88>)
 8002800:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002802:	4a17      	ldr	r2, [pc, #92]	; (8002860 <HAL_TIM_Encoder_MspInit+0x88>)
 8002804:	f043 0301 	orr.w	r3, r3, #1
 8002808:	6453      	str	r3, [r2, #68]	; 0x44
 800280a:	4b15      	ldr	r3, [pc, #84]	; (8002860 <HAL_TIM_Encoder_MspInit+0x88>)
 800280c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800280e:	f003 0301 	and.w	r3, r3, #1
 8002812:	613b      	str	r3, [r7, #16]
 8002814:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002816:	2300      	movs	r3, #0
 8002818:	60fb      	str	r3, [r7, #12]
 800281a:	4b11      	ldr	r3, [pc, #68]	; (8002860 <HAL_TIM_Encoder_MspInit+0x88>)
 800281c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800281e:	4a10      	ldr	r2, [pc, #64]	; (8002860 <HAL_TIM_Encoder_MspInit+0x88>)
 8002820:	f043 0301 	orr.w	r3, r3, #1
 8002824:	6313      	str	r3, [r2, #48]	; 0x30
 8002826:	4b0e      	ldr	r3, [pc, #56]	; (8002860 <HAL_TIM_Encoder_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	f003 0301 	and.w	r3, r3, #1
 800282e:	60fb      	str	r3, [r7, #12]
 8002830:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002832:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002836:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002838:	2302      	movs	r3, #2
 800283a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800283c:	2300      	movs	r3, #0
 800283e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002840:	2300      	movs	r3, #0
 8002842:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002844:	2301      	movs	r3, #1
 8002846:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002848:	f107 0314 	add.w	r3, r7, #20
 800284c:	4619      	mov	r1, r3
 800284e:	4805      	ldr	r0, [pc, #20]	; (8002864 <HAL_TIM_Encoder_MspInit+0x8c>)
 8002850:	f000 fb7c 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002854:	bf00      	nop
 8002856:	3728      	adds	r7, #40	; 0x28
 8002858:	46bd      	mov	sp, r7
 800285a:	bd80      	pop	{r7, pc}
 800285c:	40010000 	.word	0x40010000
 8002860:	40023800 	.word	0x40023800
 8002864:	40020000 	.word	0x40020000

08002868 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002868:	b580      	push	{r7, lr}
 800286a:	b084      	sub	sp, #16
 800286c:	af00      	add	r7, sp, #0
 800286e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002870:	687b      	ldr	r3, [r7, #4]
 8002872:	681b      	ldr	r3, [r3, #0]
 8002874:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002878:	d116      	bne.n	80028a8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800287a:	2300      	movs	r3, #0
 800287c:	60fb      	str	r3, [r7, #12]
 800287e:	4b1a      	ldr	r3, [pc, #104]	; (80028e8 <HAL_TIM_Base_MspInit+0x80>)
 8002880:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002882:	4a19      	ldr	r2, [pc, #100]	; (80028e8 <HAL_TIM_Base_MspInit+0x80>)
 8002884:	f043 0301 	orr.w	r3, r3, #1
 8002888:	6413      	str	r3, [r2, #64]	; 0x40
 800288a:	4b17      	ldr	r3, [pc, #92]	; (80028e8 <HAL_TIM_Base_MspInit+0x80>)
 800288c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800288e:	f003 0301 	and.w	r3, r3, #1
 8002892:	60fb      	str	r3, [r7, #12]
 8002894:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002896:	2200      	movs	r2, #0
 8002898:	2100      	movs	r1, #0
 800289a:	201c      	movs	r0, #28
 800289c:	f000 fae1 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80028a0:	201c      	movs	r0, #28
 80028a2:	f000 fafa 	bl	8002e9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80028a6:	e01a      	b.n	80028de <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80028a8:	687b      	ldr	r3, [r7, #4]
 80028aa:	681b      	ldr	r3, [r3, #0]
 80028ac:	4a0f      	ldr	r2, [pc, #60]	; (80028ec <HAL_TIM_Base_MspInit+0x84>)
 80028ae:	4293      	cmp	r3, r2
 80028b0:	d115      	bne.n	80028de <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80028b2:	2300      	movs	r3, #0
 80028b4:	60bb      	str	r3, [r7, #8]
 80028b6:	4b0c      	ldr	r3, [pc, #48]	; (80028e8 <HAL_TIM_Base_MspInit+0x80>)
 80028b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028ba:	4a0b      	ldr	r2, [pc, #44]	; (80028e8 <HAL_TIM_Base_MspInit+0x80>)
 80028bc:	f043 0302 	orr.w	r3, r3, #2
 80028c0:	6413      	str	r3, [r2, #64]	; 0x40
 80028c2:	4b09      	ldr	r3, [pc, #36]	; (80028e8 <HAL_TIM_Base_MspInit+0x80>)
 80028c4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028c6:	f003 0302 	and.w	r3, r3, #2
 80028ca:	60bb      	str	r3, [r7, #8]
 80028cc:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80028ce:	2200      	movs	r2, #0
 80028d0:	2100      	movs	r1, #0
 80028d2:	201d      	movs	r0, #29
 80028d4:	f000 fac5 	bl	8002e62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80028d8:	201d      	movs	r0, #29
 80028da:	f000 fade 	bl	8002e9a <HAL_NVIC_EnableIRQ>
}
 80028de:	bf00      	nop
 80028e0:	3710      	adds	r7, #16
 80028e2:	46bd      	mov	sp, r7
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	40023800 	.word	0x40023800
 80028ec:	40000400 	.word	0x40000400

080028f0 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 80028f0:	b580      	push	{r7, lr}
 80028f2:	b088      	sub	sp, #32
 80028f4:	af00      	add	r7, sp, #0
 80028f6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028f8:	f107 030c 	add.w	r3, r7, #12
 80028fc:	2200      	movs	r2, #0
 80028fe:	601a      	str	r2, [r3, #0]
 8002900:	605a      	str	r2, [r3, #4]
 8002902:	609a      	str	r2, [r3, #8]
 8002904:	60da      	str	r2, [r3, #12]
 8002906:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002908:	687b      	ldr	r3, [r7, #4]
 800290a:	681b      	ldr	r3, [r3, #0]
 800290c:	4a12      	ldr	r2, [pc, #72]	; (8002958 <HAL_TIM_MspPostInit+0x68>)
 800290e:	4293      	cmp	r3, r2
 8002910:	d11d      	bne.n	800294e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002912:	2300      	movs	r3, #0
 8002914:	60bb      	str	r3, [r7, #8]
 8002916:	4b11      	ldr	r3, [pc, #68]	; (800295c <HAL_TIM_MspPostInit+0x6c>)
 8002918:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800291a:	4a10      	ldr	r2, [pc, #64]	; (800295c <HAL_TIM_MspPostInit+0x6c>)
 800291c:	f043 0301 	orr.w	r3, r3, #1
 8002920:	6313      	str	r3, [r2, #48]	; 0x30
 8002922:	4b0e      	ldr	r3, [pc, #56]	; (800295c <HAL_TIM_MspPostInit+0x6c>)
 8002924:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002926:	f003 0301 	and.w	r3, r3, #1
 800292a:	60bb      	str	r3, [r7, #8]
 800292c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800292e:	2340      	movs	r3, #64	; 0x40
 8002930:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002932:	2302      	movs	r3, #2
 8002934:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002936:	2300      	movs	r3, #0
 8002938:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800293a:	2300      	movs	r3, #0
 800293c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800293e:	2302      	movs	r3, #2
 8002940:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002942:	f107 030c 	add.w	r3, r7, #12
 8002946:	4619      	mov	r1, r3
 8002948:	4805      	ldr	r0, [pc, #20]	; (8002960 <HAL_TIM_MspPostInit+0x70>)
 800294a:	f000 faff 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800294e:	bf00      	nop
 8002950:	3720      	adds	r7, #32
 8002952:	46bd      	mov	sp, r7
 8002954:	bd80      	pop	{r7, pc}
 8002956:	bf00      	nop
 8002958:	40000400 	.word	0x40000400
 800295c:	40023800 	.word	0x40023800
 8002960:	40020000 	.word	0x40020000

08002964 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002964:	b580      	push	{r7, lr}
 8002966:	b08c      	sub	sp, #48	; 0x30
 8002968:	af00      	add	r7, sp, #0
 800296a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800296c:	f107 031c 	add.w	r3, r7, #28
 8002970:	2200      	movs	r2, #0
 8002972:	601a      	str	r2, [r3, #0]
 8002974:	605a      	str	r2, [r3, #4]
 8002976:	609a      	str	r2, [r3, #8]
 8002978:	60da      	str	r2, [r3, #12]
 800297a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800297c:	687b      	ldr	r3, [r7, #4]
 800297e:	681b      	ldr	r3, [r3, #0]
 8002980:	4a32      	ldr	r2, [pc, #200]	; (8002a4c <HAL_UART_MspInit+0xe8>)
 8002982:	4293      	cmp	r3, r2
 8002984:	d12c      	bne.n	80029e0 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002986:	2300      	movs	r3, #0
 8002988:	61bb      	str	r3, [r7, #24]
 800298a:	4b31      	ldr	r3, [pc, #196]	; (8002a50 <HAL_UART_MspInit+0xec>)
 800298c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800298e:	4a30      	ldr	r2, [pc, #192]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002990:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002994:	6413      	str	r3, [r2, #64]	; 0x40
 8002996:	4b2e      	ldr	r3, [pc, #184]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002998:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800299a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800299e:	61bb      	str	r3, [r7, #24]
 80029a0:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029a2:	2300      	movs	r3, #0
 80029a4:	617b      	str	r3, [r7, #20]
 80029a6:	4b2a      	ldr	r3, [pc, #168]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029aa:	4a29      	ldr	r2, [pc, #164]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029ac:	f043 0301 	orr.w	r3, r3, #1
 80029b0:	6313      	str	r3, [r2, #48]	; 0x30
 80029b2:	4b27      	ldr	r3, [pc, #156]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	f003 0301 	and.w	r3, r3, #1
 80029ba:	617b      	str	r3, [r7, #20]
 80029bc:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80029be:	230c      	movs	r3, #12
 80029c0:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029c2:	2302      	movs	r3, #2
 80029c4:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029c6:	2300      	movs	r3, #0
 80029c8:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80029ca:	2303      	movs	r3, #3
 80029cc:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80029ce:	2307      	movs	r3, #7
 80029d0:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029d2:	f107 031c 	add.w	r3, r7, #28
 80029d6:	4619      	mov	r1, r3
 80029d8:	481e      	ldr	r0, [pc, #120]	; (8002a54 <HAL_UART_MspInit+0xf0>)
 80029da:	f000 fab7 	bl	8002f4c <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80029de:	e030      	b.n	8002a42 <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 80029e0:	687b      	ldr	r3, [r7, #4]
 80029e2:	681b      	ldr	r3, [r3, #0]
 80029e4:	4a1c      	ldr	r2, [pc, #112]	; (8002a58 <HAL_UART_MspInit+0xf4>)
 80029e6:	4293      	cmp	r3, r2
 80029e8:	d12b      	bne.n	8002a42 <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 80029ea:	2300      	movs	r3, #0
 80029ec:	613b      	str	r3, [r7, #16]
 80029ee:	4b18      	ldr	r3, [pc, #96]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029f0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029f2:	4a17      	ldr	r2, [pc, #92]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029f4:	f043 0320 	orr.w	r3, r3, #32
 80029f8:	6453      	str	r3, [r2, #68]	; 0x44
 80029fa:	4b15      	ldr	r3, [pc, #84]	; (8002a50 <HAL_UART_MspInit+0xec>)
 80029fc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029fe:	f003 0320 	and.w	r3, r3, #32
 8002a02:	613b      	str	r3, [r7, #16]
 8002a04:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002a06:	2300      	movs	r3, #0
 8002a08:	60fb      	str	r3, [r7, #12]
 8002a0a:	4b11      	ldr	r3, [pc, #68]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a0c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a0e:	4a10      	ldr	r2, [pc, #64]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a10:	f043 0304 	orr.w	r3, r3, #4
 8002a14:	6313      	str	r3, [r2, #48]	; 0x30
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <HAL_UART_MspInit+0xec>)
 8002a18:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002a1a:	f003 0304 	and.w	r3, r3, #4
 8002a1e:	60fb      	str	r3, [r7, #12]
 8002a20:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002a22:	23c0      	movs	r3, #192	; 0xc0
 8002a24:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002a26:	2302      	movs	r3, #2
 8002a28:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002a2a:	2300      	movs	r3, #0
 8002a2c:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002a2e:	2303      	movs	r3, #3
 8002a30:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002a32:	2308      	movs	r3, #8
 8002a34:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002a36:	f107 031c 	add.w	r3, r7, #28
 8002a3a:	4619      	mov	r1, r3
 8002a3c:	4807      	ldr	r0, [pc, #28]	; (8002a5c <HAL_UART_MspInit+0xf8>)
 8002a3e:	f000 fa85 	bl	8002f4c <HAL_GPIO_Init>
}
 8002a42:	bf00      	nop
 8002a44:	3730      	adds	r7, #48	; 0x30
 8002a46:	46bd      	mov	sp, r7
 8002a48:	bd80      	pop	{r7, pc}
 8002a4a:	bf00      	nop
 8002a4c:	40004400 	.word	0x40004400
 8002a50:	40023800 	.word	0x40023800
 8002a54:	40020000 	.word	0x40020000
 8002a58:	40011400 	.word	0x40011400
 8002a5c:	40020800 	.word	0x40020800

08002a60 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002a60:	b480      	push	{r7}
 8002a62:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002a64:	e7fe      	b.n	8002a64 <NMI_Handler+0x4>

08002a66 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002a66:	b480      	push	{r7}
 8002a68:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002a6a:	e7fe      	b.n	8002a6a <HardFault_Handler+0x4>

08002a6c <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002a6c:	b480      	push	{r7}
 8002a6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002a70:	e7fe      	b.n	8002a70 <MemManage_Handler+0x4>

08002a72 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002a72:	b480      	push	{r7}
 8002a74:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002a76:	e7fe      	b.n	8002a76 <BusFault_Handler+0x4>

08002a78 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002a78:	b480      	push	{r7}
 8002a7a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002a7c:	e7fe      	b.n	8002a7c <UsageFault_Handler+0x4>

08002a7e <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002a7e:	b480      	push	{r7}
 8002a80:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002a82:	bf00      	nop
 8002a84:	46bd      	mov	sp, r7
 8002a86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a8a:	4770      	bx	lr

08002a8c <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002a8c:	b480      	push	{r7}
 8002a8e:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002a90:	bf00      	nop
 8002a92:	46bd      	mov	sp, r7
 8002a94:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a98:	4770      	bx	lr

08002a9a <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002a9a:	b480      	push	{r7}
 8002a9c:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002a9e:	bf00      	nop
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr

08002aa8 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002aa8:	b580      	push	{r7, lr}
 8002aaa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002aac:	f000 f8ba 	bl	8002c24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ab0:	bf00      	nop
 8002ab2:	bd80      	pop	{r7, pc}

08002ab4 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002ab4:	b580      	push	{r7, lr}
 8002ab6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002ab8:	2080      	movs	r0, #128	; 0x80
 8002aba:	f000 fbe5 	bl	8003288 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002abe:	bf00      	nop
 8002ac0:	bd80      	pop	{r7, pc}
	...

08002ac4 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002ac4:	b580      	push	{r7, lr}
 8002ac6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002ac8:	4802      	ldr	r0, [pc, #8]	; (8002ad4 <TIM2_IRQHandler+0x10>)
 8002aca:	f002 ff8d 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002ace:	bf00      	nop
 8002ad0:	bd80      	pop	{r7, pc}
 8002ad2:	bf00      	nop
 8002ad4:	20000288 	.word	0x20000288

08002ad8 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002ad8:	b580      	push	{r7, lr}
 8002ada:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002adc:	4802      	ldr	r0, [pc, #8]	; (8002ae8 <TIM3_IRQHandler+0x10>)
 8002ade:	f002 ff83 	bl	80059e8 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002ae2:	bf00      	nop
 8002ae4:	bd80      	pop	{r7, pc}
 8002ae6:	bf00      	nop
 8002ae8:	200001c8 	.word	0x200001c8

08002aec <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002aec:	b580      	push	{r7, lr}
 8002aee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002af0:	4802      	ldr	r0, [pc, #8]	; (8002afc <I2C1_EV_IRQHandler+0x10>)
 8002af2:	f000 fdcb 	bl	800368c <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002af6:	bf00      	nop
 8002af8:	bd80      	pop	{r7, pc}
 8002afa:	bf00      	nop
 8002afc:	20000174 	.word	0x20000174

08002b00 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002b00:	b480      	push	{r7}
 8002b02:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002b04:	4b08      	ldr	r3, [pc, #32]	; (8002b28 <SystemInit+0x28>)
 8002b06:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002b0a:	4a07      	ldr	r2, [pc, #28]	; (8002b28 <SystemInit+0x28>)
 8002b0c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002b10:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002b14:	4b04      	ldr	r3, [pc, #16]	; (8002b28 <SystemInit+0x28>)
 8002b16:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002b1a:	609a      	str	r2, [r3, #8]
#endif
}
 8002b1c:	bf00      	nop
 8002b1e:	46bd      	mov	sp, r7
 8002b20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b24:	4770      	bx	lr
 8002b26:	bf00      	nop
 8002b28:	e000ed00 	.word	0xe000ed00

08002b2c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b2c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002b64 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002b30:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002b32:	e003      	b.n	8002b3c <LoopCopyDataInit>

08002b34 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002b34:	4b0c      	ldr	r3, [pc, #48]	; (8002b68 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002b36:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002b38:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 8002b3a:	3104      	adds	r1, #4

08002b3c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 8002b3c:	480b      	ldr	r0, [pc, #44]	; (8002b6c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 8002b3e:	4b0c      	ldr	r3, [pc, #48]	; (8002b70 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002b40:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002b42:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002b44:	d3f6      	bcc.n	8002b34 <CopyDataInit>
  ldr  r2, =_sbss
 8002b46:	4a0b      	ldr	r2, [pc, #44]	; (8002b74 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002b48:	e002      	b.n	8002b50 <LoopFillZerobss>

08002b4a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 8002b4a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 8002b4c:	f842 3b04 	str.w	r3, [r2], #4

08002b50 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002b50:	4b09      	ldr	r3, [pc, #36]	; (8002b78 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002b52:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002b54:	d3f9      	bcc.n	8002b4a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002b56:	f7ff ffd3 	bl	8002b00 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002b5a:	f004 f93d 	bl	8006dd8 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002b5e:	f7fe fa81 	bl	8001064 <main>
  bx  lr    
 8002b62:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002b64:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002b68:	08007e28 	.word	0x08007e28
  ldr  r0, =_sdata
 8002b6c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002b70:	2000009c 	.word	0x2000009c
  ldr  r2, =_sbss
 8002b74:	200000a0 	.word	0x200000a0
  ldr  r3, = _ebss
 8002b78:	2000030c 	.word	0x2000030c

08002b7c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002b7c:	e7fe      	b.n	8002b7c <ADC_IRQHandler>
	...

08002b80 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002b80:	b580      	push	{r7, lr}
 8002b82:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002b84:	4b0e      	ldr	r3, [pc, #56]	; (8002bc0 <HAL_Init+0x40>)
 8002b86:	681b      	ldr	r3, [r3, #0]
 8002b88:	4a0d      	ldr	r2, [pc, #52]	; (8002bc0 <HAL_Init+0x40>)
 8002b8a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002b8e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002b90:	4b0b      	ldr	r3, [pc, #44]	; (8002bc0 <HAL_Init+0x40>)
 8002b92:	681b      	ldr	r3, [r3, #0]
 8002b94:	4a0a      	ldr	r2, [pc, #40]	; (8002bc0 <HAL_Init+0x40>)
 8002b96:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002b9a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002b9c:	4b08      	ldr	r3, [pc, #32]	; (8002bc0 <HAL_Init+0x40>)
 8002b9e:	681b      	ldr	r3, [r3, #0]
 8002ba0:	4a07      	ldr	r2, [pc, #28]	; (8002bc0 <HAL_Init+0x40>)
 8002ba2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002ba6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002ba8:	2003      	movs	r0, #3
 8002baa:	f000 f94f 	bl	8002e4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002bae:	2000      	movs	r0, #0
 8002bb0:	f000 f808 	bl	8002bc4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002bb4:	f7ff fd98 	bl	80026e8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002bb8:	2300      	movs	r3, #0
}
 8002bba:	4618      	mov	r0, r3
 8002bbc:	bd80      	pop	{r7, pc}
 8002bbe:	bf00      	nop
 8002bc0:	40023c00 	.word	0x40023c00

08002bc4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002bc4:	b580      	push	{r7, lr}
 8002bc6:	b082      	sub	sp, #8
 8002bc8:	af00      	add	r7, sp, #0
 8002bca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002bcc:	4b12      	ldr	r3, [pc, #72]	; (8002c18 <HAL_InitTick+0x54>)
 8002bce:	681a      	ldr	r2, [r3, #0]
 8002bd0:	4b12      	ldr	r3, [pc, #72]	; (8002c1c <HAL_InitTick+0x58>)
 8002bd2:	781b      	ldrb	r3, [r3, #0]
 8002bd4:	4619      	mov	r1, r3
 8002bd6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002bda:	fbb3 f3f1 	udiv	r3, r3, r1
 8002bde:	fbb2 f3f3 	udiv	r3, r2, r3
 8002be2:	4618      	mov	r0, r3
 8002be4:	f000 f975 	bl	8002ed2 <HAL_SYSTICK_Config>
 8002be8:	4603      	mov	r3, r0
 8002bea:	2b00      	cmp	r3, #0
 8002bec:	d001      	beq.n	8002bf2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002bee:	2301      	movs	r3, #1
 8002bf0:	e00e      	b.n	8002c10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002bf2:	687b      	ldr	r3, [r7, #4]
 8002bf4:	2b0f      	cmp	r3, #15
 8002bf6:	d80a      	bhi.n	8002c0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002bf8:	2200      	movs	r2, #0
 8002bfa:	6879      	ldr	r1, [r7, #4]
 8002bfc:	f04f 30ff 	mov.w	r0, #4294967295
 8002c00:	f000 f92f 	bl	8002e62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002c04:	4a06      	ldr	r2, [pc, #24]	; (8002c20 <HAL_InitTick+0x5c>)
 8002c06:	687b      	ldr	r3, [r7, #4]
 8002c08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002c0a:	2300      	movs	r3, #0
 8002c0c:	e000      	b.n	8002c10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002c0e:	2301      	movs	r3, #1
}
 8002c10:	4618      	mov	r0, r3
 8002c12:	3708      	adds	r7, #8
 8002c14:	46bd      	mov	sp, r7
 8002c16:	bd80      	pop	{r7, pc}
 8002c18:	20000028 	.word	0x20000028
 8002c1c:	20000030 	.word	0x20000030
 8002c20:	2000002c 	.word	0x2000002c

08002c24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002c28:	4b06      	ldr	r3, [pc, #24]	; (8002c44 <HAL_IncTick+0x20>)
 8002c2a:	781b      	ldrb	r3, [r3, #0]
 8002c2c:	461a      	mov	r2, r3
 8002c2e:	4b06      	ldr	r3, [pc, #24]	; (8002c48 <HAL_IncTick+0x24>)
 8002c30:	681b      	ldr	r3, [r3, #0]
 8002c32:	4413      	add	r3, r2
 8002c34:	4a04      	ldr	r2, [pc, #16]	; (8002c48 <HAL_IncTick+0x24>)
 8002c36:	6013      	str	r3, [r2, #0]
}
 8002c38:	bf00      	nop
 8002c3a:	46bd      	mov	sp, r7
 8002c3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c40:	4770      	bx	lr
 8002c42:	bf00      	nop
 8002c44:	20000030 	.word	0x20000030
 8002c48:	20000308 	.word	0x20000308

08002c4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002c4c:	b480      	push	{r7}
 8002c4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002c50:	4b03      	ldr	r3, [pc, #12]	; (8002c60 <HAL_GetTick+0x14>)
 8002c52:	681b      	ldr	r3, [r3, #0]
}
 8002c54:	4618      	mov	r0, r3
 8002c56:	46bd      	mov	sp, r7
 8002c58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c5c:	4770      	bx	lr
 8002c5e:	bf00      	nop
 8002c60:	20000308 	.word	0x20000308

08002c64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c64:	b480      	push	{r7}
 8002c66:	b085      	sub	sp, #20
 8002c68:	af00      	add	r7, sp, #0
 8002c6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002c6c:	687b      	ldr	r3, [r7, #4]
 8002c6e:	f003 0307 	and.w	r3, r3, #7
 8002c72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002c74:	4b0c      	ldr	r3, [pc, #48]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c76:	68db      	ldr	r3, [r3, #12]
 8002c78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002c7a:	68ba      	ldr	r2, [r7, #8]
 8002c7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002c80:	4013      	ands	r3, r2
 8002c82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002c84:	68fb      	ldr	r3, [r7, #12]
 8002c86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002c88:	68bb      	ldr	r3, [r7, #8]
 8002c8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002c8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002c90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002c94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002c96:	4a04      	ldr	r2, [pc, #16]	; (8002ca8 <__NVIC_SetPriorityGrouping+0x44>)
 8002c98:	68bb      	ldr	r3, [r7, #8]
 8002c9a:	60d3      	str	r3, [r2, #12]
}
 8002c9c:	bf00      	nop
 8002c9e:	3714      	adds	r7, #20
 8002ca0:	46bd      	mov	sp, r7
 8002ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ca6:	4770      	bx	lr
 8002ca8:	e000ed00 	.word	0xe000ed00

08002cac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002cb0:	4b04      	ldr	r3, [pc, #16]	; (8002cc4 <__NVIC_GetPriorityGrouping+0x18>)
 8002cb2:	68db      	ldr	r3, [r3, #12]
 8002cb4:	0a1b      	lsrs	r3, r3, #8
 8002cb6:	f003 0307 	and.w	r3, r3, #7
}
 8002cba:	4618      	mov	r0, r3
 8002cbc:	46bd      	mov	sp, r7
 8002cbe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc2:	4770      	bx	lr
 8002cc4:	e000ed00 	.word	0xe000ed00

08002cc8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002cc8:	b480      	push	{r7}
 8002cca:	b083      	sub	sp, #12
 8002ccc:	af00      	add	r7, sp, #0
 8002cce:	4603      	mov	r3, r0
 8002cd0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002cd2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cd6:	2b00      	cmp	r3, #0
 8002cd8:	db0b      	blt.n	8002cf2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002cda:	79fb      	ldrb	r3, [r7, #7]
 8002cdc:	f003 021f 	and.w	r2, r3, #31
 8002ce0:	4907      	ldr	r1, [pc, #28]	; (8002d00 <__NVIC_EnableIRQ+0x38>)
 8002ce2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ce6:	095b      	lsrs	r3, r3, #5
 8002ce8:	2001      	movs	r0, #1
 8002cea:	fa00 f202 	lsl.w	r2, r0, r2
 8002cee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002cf2:	bf00      	nop
 8002cf4:	370c      	adds	r7, #12
 8002cf6:	46bd      	mov	sp, r7
 8002cf8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cfc:	4770      	bx	lr
 8002cfe:	bf00      	nop
 8002d00:	e000e100 	.word	0xe000e100

08002d04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002d04:	b480      	push	{r7}
 8002d06:	b083      	sub	sp, #12
 8002d08:	af00      	add	r7, sp, #0
 8002d0a:	4603      	mov	r3, r0
 8002d0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d12:	2b00      	cmp	r3, #0
 8002d14:	db12      	blt.n	8002d3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002d16:	79fb      	ldrb	r3, [r7, #7]
 8002d18:	f003 021f 	and.w	r2, r3, #31
 8002d1c:	490a      	ldr	r1, [pc, #40]	; (8002d48 <__NVIC_DisableIRQ+0x44>)
 8002d1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d22:	095b      	lsrs	r3, r3, #5
 8002d24:	2001      	movs	r0, #1
 8002d26:	fa00 f202 	lsl.w	r2, r0, r2
 8002d2a:	3320      	adds	r3, #32
 8002d2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002d30:	f3bf 8f4f 	dsb	sy
}
 8002d34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002d36:	f3bf 8f6f 	isb	sy
}
 8002d3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002d3c:	bf00      	nop
 8002d3e:	370c      	adds	r7, #12
 8002d40:	46bd      	mov	sp, r7
 8002d42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d46:	4770      	bx	lr
 8002d48:	e000e100 	.word	0xe000e100

08002d4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002d4c:	b480      	push	{r7}
 8002d4e:	b083      	sub	sp, #12
 8002d50:	af00      	add	r7, sp, #0
 8002d52:	4603      	mov	r3, r0
 8002d54:	6039      	str	r1, [r7, #0]
 8002d56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002d58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d5c:	2b00      	cmp	r3, #0
 8002d5e:	db0a      	blt.n	8002d76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d60:	683b      	ldr	r3, [r7, #0]
 8002d62:	b2da      	uxtb	r2, r3
 8002d64:	490c      	ldr	r1, [pc, #48]	; (8002d98 <__NVIC_SetPriority+0x4c>)
 8002d66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002d6a:	0112      	lsls	r2, r2, #4
 8002d6c:	b2d2      	uxtb	r2, r2
 8002d6e:	440b      	add	r3, r1
 8002d70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002d74:	e00a      	b.n	8002d8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002d76:	683b      	ldr	r3, [r7, #0]
 8002d78:	b2da      	uxtb	r2, r3
 8002d7a:	4908      	ldr	r1, [pc, #32]	; (8002d9c <__NVIC_SetPriority+0x50>)
 8002d7c:	79fb      	ldrb	r3, [r7, #7]
 8002d7e:	f003 030f 	and.w	r3, r3, #15
 8002d82:	3b04      	subs	r3, #4
 8002d84:	0112      	lsls	r2, r2, #4
 8002d86:	b2d2      	uxtb	r2, r2
 8002d88:	440b      	add	r3, r1
 8002d8a:	761a      	strb	r2, [r3, #24]
}
 8002d8c:	bf00      	nop
 8002d8e:	370c      	adds	r7, #12
 8002d90:	46bd      	mov	sp, r7
 8002d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002d96:	4770      	bx	lr
 8002d98:	e000e100 	.word	0xe000e100
 8002d9c:	e000ed00 	.word	0xe000ed00

08002da0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002da0:	b480      	push	{r7}
 8002da2:	b089      	sub	sp, #36	; 0x24
 8002da4:	af00      	add	r7, sp, #0
 8002da6:	60f8      	str	r0, [r7, #12]
 8002da8:	60b9      	str	r1, [r7, #8]
 8002daa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002dac:	68fb      	ldr	r3, [r7, #12]
 8002dae:	f003 0307 	and.w	r3, r3, #7
 8002db2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002db4:	69fb      	ldr	r3, [r7, #28]
 8002db6:	f1c3 0307 	rsb	r3, r3, #7
 8002dba:	2b04      	cmp	r3, #4
 8002dbc:	bf28      	it	cs
 8002dbe:	2304      	movcs	r3, #4
 8002dc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002dc2:	69fb      	ldr	r3, [r7, #28]
 8002dc4:	3304      	adds	r3, #4
 8002dc6:	2b06      	cmp	r3, #6
 8002dc8:	d902      	bls.n	8002dd0 <NVIC_EncodePriority+0x30>
 8002dca:	69fb      	ldr	r3, [r7, #28]
 8002dcc:	3b03      	subs	r3, #3
 8002dce:	e000      	b.n	8002dd2 <NVIC_EncodePriority+0x32>
 8002dd0:	2300      	movs	r3, #0
 8002dd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002dd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002dd8:	69bb      	ldr	r3, [r7, #24]
 8002dda:	fa02 f303 	lsl.w	r3, r2, r3
 8002dde:	43da      	mvns	r2, r3
 8002de0:	68bb      	ldr	r3, [r7, #8]
 8002de2:	401a      	ands	r2, r3
 8002de4:	697b      	ldr	r3, [r7, #20]
 8002de6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002de8:	f04f 31ff 	mov.w	r1, #4294967295
 8002dec:	697b      	ldr	r3, [r7, #20]
 8002dee:	fa01 f303 	lsl.w	r3, r1, r3
 8002df2:	43d9      	mvns	r1, r3
 8002df4:	687b      	ldr	r3, [r7, #4]
 8002df6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002df8:	4313      	orrs	r3, r2
         );
}
 8002dfa:	4618      	mov	r0, r3
 8002dfc:	3724      	adds	r7, #36	; 0x24
 8002dfe:	46bd      	mov	sp, r7
 8002e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e04:	4770      	bx	lr
	...

08002e08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002e08:	b580      	push	{r7, lr}
 8002e0a:	b082      	sub	sp, #8
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	3b01      	subs	r3, #1
 8002e14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002e18:	d301      	bcc.n	8002e1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002e1a:	2301      	movs	r3, #1
 8002e1c:	e00f      	b.n	8002e3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002e1e:	4a0a      	ldr	r2, [pc, #40]	; (8002e48 <SysTick_Config+0x40>)
 8002e20:	687b      	ldr	r3, [r7, #4]
 8002e22:	3b01      	subs	r3, #1
 8002e24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002e26:	210f      	movs	r1, #15
 8002e28:	f04f 30ff 	mov.w	r0, #4294967295
 8002e2c:	f7ff ff8e 	bl	8002d4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002e30:	4b05      	ldr	r3, [pc, #20]	; (8002e48 <SysTick_Config+0x40>)
 8002e32:	2200      	movs	r2, #0
 8002e34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002e36:	4b04      	ldr	r3, [pc, #16]	; (8002e48 <SysTick_Config+0x40>)
 8002e38:	2207      	movs	r2, #7
 8002e3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002e3c:	2300      	movs	r3, #0
}
 8002e3e:	4618      	mov	r0, r3
 8002e40:	3708      	adds	r7, #8
 8002e42:	46bd      	mov	sp, r7
 8002e44:	bd80      	pop	{r7, pc}
 8002e46:	bf00      	nop
 8002e48:	e000e010 	.word	0xe000e010

08002e4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e4c:	b580      	push	{r7, lr}
 8002e4e:	b082      	sub	sp, #8
 8002e50:	af00      	add	r7, sp, #0
 8002e52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002e54:	6878      	ldr	r0, [r7, #4]
 8002e56:	f7ff ff05 	bl	8002c64 <__NVIC_SetPriorityGrouping>
}
 8002e5a:	bf00      	nop
 8002e5c:	3708      	adds	r7, #8
 8002e5e:	46bd      	mov	sp, r7
 8002e60:	bd80      	pop	{r7, pc}

08002e62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002e62:	b580      	push	{r7, lr}
 8002e64:	b086      	sub	sp, #24
 8002e66:	af00      	add	r7, sp, #0
 8002e68:	4603      	mov	r3, r0
 8002e6a:	60b9      	str	r1, [r7, #8]
 8002e6c:	607a      	str	r2, [r7, #4]
 8002e6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002e70:	2300      	movs	r3, #0
 8002e72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002e74:	f7ff ff1a 	bl	8002cac <__NVIC_GetPriorityGrouping>
 8002e78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002e7a:	687a      	ldr	r2, [r7, #4]
 8002e7c:	68b9      	ldr	r1, [r7, #8]
 8002e7e:	6978      	ldr	r0, [r7, #20]
 8002e80:	f7ff ff8e 	bl	8002da0 <NVIC_EncodePriority>
 8002e84:	4602      	mov	r2, r0
 8002e86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002e8a:	4611      	mov	r1, r2
 8002e8c:	4618      	mov	r0, r3
 8002e8e:	f7ff ff5d 	bl	8002d4c <__NVIC_SetPriority>
}
 8002e92:	bf00      	nop
 8002e94:	3718      	adds	r7, #24
 8002e96:	46bd      	mov	sp, r7
 8002e98:	bd80      	pop	{r7, pc}

08002e9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e9a:	b580      	push	{r7, lr}
 8002e9c:	b082      	sub	sp, #8
 8002e9e:	af00      	add	r7, sp, #0
 8002ea0:	4603      	mov	r3, r0
 8002ea2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ea4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ea8:	4618      	mov	r0, r3
 8002eaa:	f7ff ff0d 	bl	8002cc8 <__NVIC_EnableIRQ>
}
 8002eae:	bf00      	nop
 8002eb0:	3708      	adds	r7, #8
 8002eb2:	46bd      	mov	sp, r7
 8002eb4:	bd80      	pop	{r7, pc}

08002eb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002eb6:	b580      	push	{r7, lr}
 8002eb8:	b082      	sub	sp, #8
 8002eba:	af00      	add	r7, sp, #0
 8002ebc:	4603      	mov	r3, r0
 8002ebe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002ec0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec4:	4618      	mov	r0, r3
 8002ec6:	f7ff ff1d 	bl	8002d04 <__NVIC_DisableIRQ>
}
 8002eca:	bf00      	nop
 8002ecc:	3708      	adds	r7, #8
 8002ece:	46bd      	mov	sp, r7
 8002ed0:	bd80      	pop	{r7, pc}

08002ed2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002ed2:	b580      	push	{r7, lr}
 8002ed4:	b082      	sub	sp, #8
 8002ed6:	af00      	add	r7, sp, #0
 8002ed8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002eda:	6878      	ldr	r0, [r7, #4]
 8002edc:	f7ff ff94 	bl	8002e08 <SysTick_Config>
 8002ee0:	4603      	mov	r3, r0
}
 8002ee2:	4618      	mov	r0, r3
 8002ee4:	3708      	adds	r7, #8
 8002ee6:	46bd      	mov	sp, r7
 8002ee8:	bd80      	pop	{r7, pc}

08002eea <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8002eea:	b480      	push	{r7}
 8002eec:	b083      	sub	sp, #12
 8002eee:	af00      	add	r7, sp, #0
 8002ef0:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8002ef2:	687b      	ldr	r3, [r7, #4]
 8002ef4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002ef8:	b2db      	uxtb	r3, r3
 8002efa:	2b02      	cmp	r3, #2
 8002efc:	d004      	beq.n	8002f08 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8002efe:	687b      	ldr	r3, [r7, #4]
 8002f00:	2280      	movs	r2, #128	; 0x80
 8002f02:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8002f04:	2301      	movs	r3, #1
 8002f06:	e00c      	b.n	8002f22 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8002f08:	687b      	ldr	r3, [r7, #4]
 8002f0a:	2205      	movs	r2, #5
 8002f0c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8002f10:	687b      	ldr	r3, [r7, #4]
 8002f12:	681b      	ldr	r3, [r3, #0]
 8002f14:	681a      	ldr	r2, [r3, #0]
 8002f16:	687b      	ldr	r3, [r7, #4]
 8002f18:	681b      	ldr	r3, [r3, #0]
 8002f1a:	f022 0201 	bic.w	r2, r2, #1
 8002f1e:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8002f20:	2300      	movs	r3, #0
}
 8002f22:	4618      	mov	r0, r3
 8002f24:	370c      	adds	r7, #12
 8002f26:	46bd      	mov	sp, r7
 8002f28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f2c:	4770      	bx	lr

08002f2e <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8002f2e:	b480      	push	{r7}
 8002f30:	b083      	sub	sp, #12
 8002f32:	af00      	add	r7, sp, #0
 8002f34:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8002f36:	687b      	ldr	r3, [r7, #4]
 8002f38:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8002f3c:	b2db      	uxtb	r3, r3
}
 8002f3e:	4618      	mov	r0, r3
 8002f40:	370c      	adds	r7, #12
 8002f42:	46bd      	mov	sp, r7
 8002f44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f48:	4770      	bx	lr
	...

08002f4c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002f4c:	b480      	push	{r7}
 8002f4e:	b089      	sub	sp, #36	; 0x24
 8002f50:	af00      	add	r7, sp, #0
 8002f52:	6078      	str	r0, [r7, #4]
 8002f54:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002f56:	2300      	movs	r3, #0
 8002f58:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002f5a:	2300      	movs	r3, #0
 8002f5c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002f5e:	2300      	movs	r3, #0
 8002f60:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002f62:	2300      	movs	r3, #0
 8002f64:	61fb      	str	r3, [r7, #28]
 8002f66:	e159      	b.n	800321c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002f68:	2201      	movs	r2, #1
 8002f6a:	69fb      	ldr	r3, [r7, #28]
 8002f6c:	fa02 f303 	lsl.w	r3, r2, r3
 8002f70:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	681b      	ldr	r3, [r3, #0]
 8002f76:	697a      	ldr	r2, [r7, #20]
 8002f78:	4013      	ands	r3, r2
 8002f7a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002f7c:	693a      	ldr	r2, [r7, #16]
 8002f7e:	697b      	ldr	r3, [r7, #20]
 8002f80:	429a      	cmp	r2, r3
 8002f82:	f040 8148 	bne.w	8003216 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f86:	683b      	ldr	r3, [r7, #0]
 8002f88:	685b      	ldr	r3, [r3, #4]
 8002f8a:	2b01      	cmp	r3, #1
 8002f8c:	d00b      	beq.n	8002fa6 <HAL_GPIO_Init+0x5a>
 8002f8e:	683b      	ldr	r3, [r7, #0]
 8002f90:	685b      	ldr	r3, [r3, #4]
 8002f92:	2b02      	cmp	r3, #2
 8002f94:	d007      	beq.n	8002fa6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f96:	683b      	ldr	r3, [r7, #0]
 8002f98:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002f9a:	2b11      	cmp	r3, #17
 8002f9c:	d003      	beq.n	8002fa6 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002f9e:	683b      	ldr	r3, [r7, #0]
 8002fa0:	685b      	ldr	r3, [r3, #4]
 8002fa2:	2b12      	cmp	r3, #18
 8002fa4:	d130      	bne.n	8003008 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002fa6:	687b      	ldr	r3, [r7, #4]
 8002fa8:	689b      	ldr	r3, [r3, #8]
 8002faa:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002fac:	69fb      	ldr	r3, [r7, #28]
 8002fae:	005b      	lsls	r3, r3, #1
 8002fb0:	2203      	movs	r2, #3
 8002fb2:	fa02 f303 	lsl.w	r3, r2, r3
 8002fb6:	43db      	mvns	r3, r3
 8002fb8:	69ba      	ldr	r2, [r7, #24]
 8002fba:	4013      	ands	r3, r2
 8002fbc:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002fbe:	683b      	ldr	r3, [r7, #0]
 8002fc0:	68da      	ldr	r2, [r3, #12]
 8002fc2:	69fb      	ldr	r3, [r7, #28]
 8002fc4:	005b      	lsls	r3, r3, #1
 8002fc6:	fa02 f303 	lsl.w	r3, r2, r3
 8002fca:	69ba      	ldr	r2, [r7, #24]
 8002fcc:	4313      	orrs	r3, r2
 8002fce:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002fd0:	687b      	ldr	r3, [r7, #4]
 8002fd2:	69ba      	ldr	r2, [r7, #24]
 8002fd4:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002fd6:	687b      	ldr	r3, [r7, #4]
 8002fd8:	685b      	ldr	r3, [r3, #4]
 8002fda:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002fdc:	2201      	movs	r2, #1
 8002fde:	69fb      	ldr	r3, [r7, #28]
 8002fe0:	fa02 f303 	lsl.w	r3, r2, r3
 8002fe4:	43db      	mvns	r3, r3
 8002fe6:	69ba      	ldr	r2, [r7, #24]
 8002fe8:	4013      	ands	r3, r2
 8002fea:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002fec:	683b      	ldr	r3, [r7, #0]
 8002fee:	685b      	ldr	r3, [r3, #4]
 8002ff0:	091b      	lsrs	r3, r3, #4
 8002ff2:	f003 0201 	and.w	r2, r3, #1
 8002ff6:	69fb      	ldr	r3, [r7, #28]
 8002ff8:	fa02 f303 	lsl.w	r3, r2, r3
 8002ffc:	69ba      	ldr	r2, [r7, #24]
 8002ffe:	4313      	orrs	r3, r2
 8003000:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003002:	687b      	ldr	r3, [r7, #4]
 8003004:	69ba      	ldr	r2, [r7, #24]
 8003006:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8003008:	687b      	ldr	r3, [r7, #4]
 800300a:	68db      	ldr	r3, [r3, #12]
 800300c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800300e:	69fb      	ldr	r3, [r7, #28]
 8003010:	005b      	lsls	r3, r3, #1
 8003012:	2203      	movs	r2, #3
 8003014:	fa02 f303 	lsl.w	r3, r2, r3
 8003018:	43db      	mvns	r3, r3
 800301a:	69ba      	ldr	r2, [r7, #24]
 800301c:	4013      	ands	r3, r2
 800301e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003020:	683b      	ldr	r3, [r7, #0]
 8003022:	689a      	ldr	r2, [r3, #8]
 8003024:	69fb      	ldr	r3, [r7, #28]
 8003026:	005b      	lsls	r3, r3, #1
 8003028:	fa02 f303 	lsl.w	r3, r2, r3
 800302c:	69ba      	ldr	r2, [r7, #24]
 800302e:	4313      	orrs	r3, r2
 8003030:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8003032:	687b      	ldr	r3, [r7, #4]
 8003034:	69ba      	ldr	r2, [r7, #24]
 8003036:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8003038:	683b      	ldr	r3, [r7, #0]
 800303a:	685b      	ldr	r3, [r3, #4]
 800303c:	2b02      	cmp	r3, #2
 800303e:	d003      	beq.n	8003048 <HAL_GPIO_Init+0xfc>
 8003040:	683b      	ldr	r3, [r7, #0]
 8003042:	685b      	ldr	r3, [r3, #4]
 8003044:	2b12      	cmp	r3, #18
 8003046:	d123      	bne.n	8003090 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003048:	69fb      	ldr	r3, [r7, #28]
 800304a:	08da      	lsrs	r2, r3, #3
 800304c:	687b      	ldr	r3, [r7, #4]
 800304e:	3208      	adds	r2, #8
 8003050:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003054:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003056:	69fb      	ldr	r3, [r7, #28]
 8003058:	f003 0307 	and.w	r3, r3, #7
 800305c:	009b      	lsls	r3, r3, #2
 800305e:	220f      	movs	r2, #15
 8003060:	fa02 f303 	lsl.w	r3, r2, r3
 8003064:	43db      	mvns	r3, r3
 8003066:	69ba      	ldr	r2, [r7, #24]
 8003068:	4013      	ands	r3, r2
 800306a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800306c:	683b      	ldr	r3, [r7, #0]
 800306e:	691a      	ldr	r2, [r3, #16]
 8003070:	69fb      	ldr	r3, [r7, #28]
 8003072:	f003 0307 	and.w	r3, r3, #7
 8003076:	009b      	lsls	r3, r3, #2
 8003078:	fa02 f303 	lsl.w	r3, r2, r3
 800307c:	69ba      	ldr	r2, [r7, #24]
 800307e:	4313      	orrs	r3, r2
 8003080:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003082:	69fb      	ldr	r3, [r7, #28]
 8003084:	08da      	lsrs	r2, r3, #3
 8003086:	687b      	ldr	r3, [r7, #4]
 8003088:	3208      	adds	r2, #8
 800308a:	69b9      	ldr	r1, [r7, #24]
 800308c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003090:	687b      	ldr	r3, [r7, #4]
 8003092:	681b      	ldr	r3, [r3, #0]
 8003094:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003096:	69fb      	ldr	r3, [r7, #28]
 8003098:	005b      	lsls	r3, r3, #1
 800309a:	2203      	movs	r2, #3
 800309c:	fa02 f303 	lsl.w	r3, r2, r3
 80030a0:	43db      	mvns	r3, r3
 80030a2:	69ba      	ldr	r2, [r7, #24]
 80030a4:	4013      	ands	r3, r2
 80030a6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80030a8:	683b      	ldr	r3, [r7, #0]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	f003 0203 	and.w	r2, r3, #3
 80030b0:	69fb      	ldr	r3, [r7, #28]
 80030b2:	005b      	lsls	r3, r3, #1
 80030b4:	fa02 f303 	lsl.w	r3, r2, r3
 80030b8:	69ba      	ldr	r2, [r7, #24]
 80030ba:	4313      	orrs	r3, r2
 80030bc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80030be:	687b      	ldr	r3, [r7, #4]
 80030c0:	69ba      	ldr	r2, [r7, #24]
 80030c2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80030c4:	683b      	ldr	r3, [r7, #0]
 80030c6:	685b      	ldr	r3, [r3, #4]
 80030c8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80030cc:	2b00      	cmp	r3, #0
 80030ce:	f000 80a2 	beq.w	8003216 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80030d2:	2300      	movs	r3, #0
 80030d4:	60fb      	str	r3, [r7, #12]
 80030d6:	4b57      	ldr	r3, [pc, #348]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030d8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030da:	4a56      	ldr	r2, [pc, #344]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030dc:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80030e0:	6453      	str	r3, [r2, #68]	; 0x44
 80030e2:	4b54      	ldr	r3, [pc, #336]	; (8003234 <HAL_GPIO_Init+0x2e8>)
 80030e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80030e6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80030ea:	60fb      	str	r3, [r7, #12]
 80030ec:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80030ee:	4a52      	ldr	r2, [pc, #328]	; (8003238 <HAL_GPIO_Init+0x2ec>)
 80030f0:	69fb      	ldr	r3, [r7, #28]
 80030f2:	089b      	lsrs	r3, r3, #2
 80030f4:	3302      	adds	r3, #2
 80030f6:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80030fa:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80030fc:	69fb      	ldr	r3, [r7, #28]
 80030fe:	f003 0303 	and.w	r3, r3, #3
 8003102:	009b      	lsls	r3, r3, #2
 8003104:	220f      	movs	r2, #15
 8003106:	fa02 f303 	lsl.w	r3, r2, r3
 800310a:	43db      	mvns	r3, r3
 800310c:	69ba      	ldr	r2, [r7, #24]
 800310e:	4013      	ands	r3, r2
 8003110:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003112:	687b      	ldr	r3, [r7, #4]
 8003114:	4a49      	ldr	r2, [pc, #292]	; (800323c <HAL_GPIO_Init+0x2f0>)
 8003116:	4293      	cmp	r3, r2
 8003118:	d019      	beq.n	800314e <HAL_GPIO_Init+0x202>
 800311a:	687b      	ldr	r3, [r7, #4]
 800311c:	4a48      	ldr	r2, [pc, #288]	; (8003240 <HAL_GPIO_Init+0x2f4>)
 800311e:	4293      	cmp	r3, r2
 8003120:	d013      	beq.n	800314a <HAL_GPIO_Init+0x1fe>
 8003122:	687b      	ldr	r3, [r7, #4]
 8003124:	4a47      	ldr	r2, [pc, #284]	; (8003244 <HAL_GPIO_Init+0x2f8>)
 8003126:	4293      	cmp	r3, r2
 8003128:	d00d      	beq.n	8003146 <HAL_GPIO_Init+0x1fa>
 800312a:	687b      	ldr	r3, [r7, #4]
 800312c:	4a46      	ldr	r2, [pc, #280]	; (8003248 <HAL_GPIO_Init+0x2fc>)
 800312e:	4293      	cmp	r3, r2
 8003130:	d007      	beq.n	8003142 <HAL_GPIO_Init+0x1f6>
 8003132:	687b      	ldr	r3, [r7, #4]
 8003134:	4a45      	ldr	r2, [pc, #276]	; (800324c <HAL_GPIO_Init+0x300>)
 8003136:	4293      	cmp	r3, r2
 8003138:	d101      	bne.n	800313e <HAL_GPIO_Init+0x1f2>
 800313a:	2304      	movs	r3, #4
 800313c:	e008      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800313e:	2307      	movs	r3, #7
 8003140:	e006      	b.n	8003150 <HAL_GPIO_Init+0x204>
 8003142:	2303      	movs	r3, #3
 8003144:	e004      	b.n	8003150 <HAL_GPIO_Init+0x204>
 8003146:	2302      	movs	r3, #2
 8003148:	e002      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800314a:	2301      	movs	r3, #1
 800314c:	e000      	b.n	8003150 <HAL_GPIO_Init+0x204>
 800314e:	2300      	movs	r3, #0
 8003150:	69fa      	ldr	r2, [r7, #28]
 8003152:	f002 0203 	and.w	r2, r2, #3
 8003156:	0092      	lsls	r2, r2, #2
 8003158:	4093      	lsls	r3, r2
 800315a:	69ba      	ldr	r2, [r7, #24]
 800315c:	4313      	orrs	r3, r2
 800315e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003160:	4935      	ldr	r1, [pc, #212]	; (8003238 <HAL_GPIO_Init+0x2ec>)
 8003162:	69fb      	ldr	r3, [r7, #28]
 8003164:	089b      	lsrs	r3, r3, #2
 8003166:	3302      	adds	r3, #2
 8003168:	69ba      	ldr	r2, [r7, #24]
 800316a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800316e:	4b38      	ldr	r3, [pc, #224]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003170:	681b      	ldr	r3, [r3, #0]
 8003172:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003174:	693b      	ldr	r3, [r7, #16]
 8003176:	43db      	mvns	r3, r3
 8003178:	69ba      	ldr	r2, [r7, #24]
 800317a:	4013      	ands	r3, r2
 800317c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800317e:	683b      	ldr	r3, [r7, #0]
 8003180:	685b      	ldr	r3, [r3, #4]
 8003182:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003186:	2b00      	cmp	r3, #0
 8003188:	d003      	beq.n	8003192 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800318a:	69ba      	ldr	r2, [r7, #24]
 800318c:	693b      	ldr	r3, [r7, #16]
 800318e:	4313      	orrs	r3, r2
 8003190:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003192:	4a2f      	ldr	r2, [pc, #188]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003194:	69bb      	ldr	r3, [r7, #24]
 8003196:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003198:	4b2d      	ldr	r3, [pc, #180]	; (8003250 <HAL_GPIO_Init+0x304>)
 800319a:	685b      	ldr	r3, [r3, #4]
 800319c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800319e:	693b      	ldr	r3, [r7, #16]
 80031a0:	43db      	mvns	r3, r3
 80031a2:	69ba      	ldr	r2, [r7, #24]
 80031a4:	4013      	ands	r3, r2
 80031a6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80031a8:	683b      	ldr	r3, [r7, #0]
 80031aa:	685b      	ldr	r3, [r3, #4]
 80031ac:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80031b0:	2b00      	cmp	r3, #0
 80031b2:	d003      	beq.n	80031bc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80031b4:	69ba      	ldr	r2, [r7, #24]
 80031b6:	693b      	ldr	r3, [r7, #16]
 80031b8:	4313      	orrs	r3, r2
 80031ba:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80031bc:	4a24      	ldr	r2, [pc, #144]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031be:	69bb      	ldr	r3, [r7, #24]
 80031c0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80031c2:	4b23      	ldr	r3, [pc, #140]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031c4:	689b      	ldr	r3, [r3, #8]
 80031c6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031c8:	693b      	ldr	r3, [r7, #16]
 80031ca:	43db      	mvns	r3, r3
 80031cc:	69ba      	ldr	r2, [r7, #24]
 80031ce:	4013      	ands	r3, r2
 80031d0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80031d2:	683b      	ldr	r3, [r7, #0]
 80031d4:	685b      	ldr	r3, [r3, #4]
 80031d6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80031da:	2b00      	cmp	r3, #0
 80031dc:	d003      	beq.n	80031e6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80031de:	69ba      	ldr	r2, [r7, #24]
 80031e0:	693b      	ldr	r3, [r7, #16]
 80031e2:	4313      	orrs	r3, r2
 80031e4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80031e6:	4a1a      	ldr	r2, [pc, #104]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031e8:	69bb      	ldr	r3, [r7, #24]
 80031ea:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80031ec:	4b18      	ldr	r3, [pc, #96]	; (8003250 <HAL_GPIO_Init+0x304>)
 80031ee:	68db      	ldr	r3, [r3, #12]
 80031f0:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80031f2:	693b      	ldr	r3, [r7, #16]
 80031f4:	43db      	mvns	r3, r3
 80031f6:	69ba      	ldr	r2, [r7, #24]
 80031f8:	4013      	ands	r3, r2
 80031fa:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80031fc:	683b      	ldr	r3, [r7, #0]
 80031fe:	685b      	ldr	r3, [r3, #4]
 8003200:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003204:	2b00      	cmp	r3, #0
 8003206:	d003      	beq.n	8003210 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003208:	69ba      	ldr	r2, [r7, #24]
 800320a:	693b      	ldr	r3, [r7, #16]
 800320c:	4313      	orrs	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003210:	4a0f      	ldr	r2, [pc, #60]	; (8003250 <HAL_GPIO_Init+0x304>)
 8003212:	69bb      	ldr	r3, [r7, #24]
 8003214:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003216:	69fb      	ldr	r3, [r7, #28]
 8003218:	3301      	adds	r3, #1
 800321a:	61fb      	str	r3, [r7, #28]
 800321c:	69fb      	ldr	r3, [r7, #28]
 800321e:	2b0f      	cmp	r3, #15
 8003220:	f67f aea2 	bls.w	8002f68 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003224:	bf00      	nop
 8003226:	bf00      	nop
 8003228:	3724      	adds	r7, #36	; 0x24
 800322a:	46bd      	mov	sp, r7
 800322c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003230:	4770      	bx	lr
 8003232:	bf00      	nop
 8003234:	40023800 	.word	0x40023800
 8003238:	40013800 	.word	0x40013800
 800323c:	40020000 	.word	0x40020000
 8003240:	40020400 	.word	0x40020400
 8003244:	40020800 	.word	0x40020800
 8003248:	40020c00 	.word	0x40020c00
 800324c:	40021000 	.word	0x40021000
 8003250:	40013c00 	.word	0x40013c00

08003254 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003254:	b480      	push	{r7}
 8003256:	b083      	sub	sp, #12
 8003258:	af00      	add	r7, sp, #0
 800325a:	6078      	str	r0, [r7, #4]
 800325c:	460b      	mov	r3, r1
 800325e:	807b      	strh	r3, [r7, #2]
 8003260:	4613      	mov	r3, r2
 8003262:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003264:	787b      	ldrb	r3, [r7, #1]
 8003266:	2b00      	cmp	r3, #0
 8003268:	d003      	beq.n	8003272 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800326a:	887a      	ldrh	r2, [r7, #2]
 800326c:	687b      	ldr	r3, [r7, #4]
 800326e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003270:	e003      	b.n	800327a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003272:	887b      	ldrh	r3, [r7, #2]
 8003274:	041a      	lsls	r2, r3, #16
 8003276:	687b      	ldr	r3, [r7, #4]
 8003278:	619a      	str	r2, [r3, #24]
}
 800327a:	bf00      	nop
 800327c:	370c      	adds	r7, #12
 800327e:	46bd      	mov	sp, r7
 8003280:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003284:	4770      	bx	lr
	...

08003288 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003288:	b580      	push	{r7, lr}
 800328a:	b082      	sub	sp, #8
 800328c:	af00      	add	r7, sp, #0
 800328e:	4603      	mov	r3, r0
 8003290:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003292:	4b08      	ldr	r3, [pc, #32]	; (80032b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003294:	695a      	ldr	r2, [r3, #20]
 8003296:	88fb      	ldrh	r3, [r7, #6]
 8003298:	4013      	ands	r3, r2
 800329a:	2b00      	cmp	r3, #0
 800329c:	d006      	beq.n	80032ac <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800329e:	4a05      	ldr	r2, [pc, #20]	; (80032b4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80032a0:	88fb      	ldrh	r3, [r7, #6]
 80032a2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80032a4:	88fb      	ldrh	r3, [r7, #6]
 80032a6:	4618      	mov	r0, r3
 80032a8:	f7fe fa14 	bl	80016d4 <HAL_GPIO_EXTI_Callback>
  }
}
 80032ac:	bf00      	nop
 80032ae:	3708      	adds	r7, #8
 80032b0:	46bd      	mov	sp, r7
 80032b2:	bd80      	pop	{r7, pc}
 80032b4:	40013c00 	.word	0x40013c00

080032b8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80032b8:	b580      	push	{r7, lr}
 80032ba:	b084      	sub	sp, #16
 80032bc:	af00      	add	r7, sp, #0
 80032be:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80032c0:	687b      	ldr	r3, [r7, #4]
 80032c2:	2b00      	cmp	r3, #0
 80032c4:	d101      	bne.n	80032ca <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80032c6:	2301      	movs	r3, #1
 80032c8:	e12b      	b.n	8003522 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 80032ca:	687b      	ldr	r3, [r7, #4]
 80032cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80032d0:	b2db      	uxtb	r3, r3
 80032d2:	2b00      	cmp	r3, #0
 80032d4:	d106      	bne.n	80032e4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	2200      	movs	r2, #0
 80032da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 80032de:	6878      	ldr	r0, [r7, #4]
 80032e0:	f7ff fa2a 	bl	8002738 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 80032e4:	687b      	ldr	r3, [r7, #4]
 80032e6:	2224      	movs	r2, #36	; 0x24
 80032e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	681b      	ldr	r3, [r3, #0]
 80032f0:	681a      	ldr	r2, [r3, #0]
 80032f2:	687b      	ldr	r3, [r7, #4]
 80032f4:	681b      	ldr	r3, [r3, #0]
 80032f6:	f022 0201 	bic.w	r2, r2, #1
 80032fa:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80032fc:	687b      	ldr	r3, [r7, #4]
 80032fe:	681b      	ldr	r3, [r3, #0]
 8003300:	681a      	ldr	r2, [r3, #0]
 8003302:	687b      	ldr	r3, [r7, #4]
 8003304:	681b      	ldr	r3, [r3, #0]
 8003306:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 800330a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 800330c:	687b      	ldr	r3, [r7, #4]
 800330e:	681b      	ldr	r3, [r3, #0]
 8003310:	681a      	ldr	r2, [r3, #0]
 8003312:	687b      	ldr	r3, [r7, #4]
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 800331a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 800331c:	f002 f998 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8003320:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003322:	687b      	ldr	r3, [r7, #4]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	4a81      	ldr	r2, [pc, #516]	; (800352c <HAL_I2C_Init+0x274>)
 8003328:	4293      	cmp	r3, r2
 800332a:	d807      	bhi.n	800333c <HAL_I2C_Init+0x84>
 800332c:	68fb      	ldr	r3, [r7, #12]
 800332e:	4a80      	ldr	r2, [pc, #512]	; (8003530 <HAL_I2C_Init+0x278>)
 8003330:	4293      	cmp	r3, r2
 8003332:	bf94      	ite	ls
 8003334:	2301      	movls	r3, #1
 8003336:	2300      	movhi	r3, #0
 8003338:	b2db      	uxtb	r3, r3
 800333a:	e006      	b.n	800334a <HAL_I2C_Init+0x92>
 800333c:	68fb      	ldr	r3, [r7, #12]
 800333e:	4a7d      	ldr	r2, [pc, #500]	; (8003534 <HAL_I2C_Init+0x27c>)
 8003340:	4293      	cmp	r3, r2
 8003342:	bf94      	ite	ls
 8003344:	2301      	movls	r3, #1
 8003346:	2300      	movhi	r3, #0
 8003348:	b2db      	uxtb	r3, r3
 800334a:	2b00      	cmp	r3, #0
 800334c:	d001      	beq.n	8003352 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 800334e:	2301      	movs	r3, #1
 8003350:	e0e7      	b.n	8003522 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8003352:	68fb      	ldr	r3, [r7, #12]
 8003354:	4a78      	ldr	r2, [pc, #480]	; (8003538 <HAL_I2C_Init+0x280>)
 8003356:	fba2 2303 	umull	r2, r3, r2, r3
 800335a:	0c9b      	lsrs	r3, r3, #18
 800335c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 800335e:	687b      	ldr	r3, [r7, #4]
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	685b      	ldr	r3, [r3, #4]
 8003364:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003368:	687b      	ldr	r3, [r7, #4]
 800336a:	681b      	ldr	r3, [r3, #0]
 800336c:	68ba      	ldr	r2, [r7, #8]
 800336e:	430a      	orrs	r2, r1
 8003370:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003372:	687b      	ldr	r3, [r7, #4]
 8003374:	681b      	ldr	r3, [r3, #0]
 8003376:	6a1b      	ldr	r3, [r3, #32]
 8003378:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800337c:	687b      	ldr	r3, [r7, #4]
 800337e:	685b      	ldr	r3, [r3, #4]
 8003380:	4a6a      	ldr	r2, [pc, #424]	; (800352c <HAL_I2C_Init+0x274>)
 8003382:	4293      	cmp	r3, r2
 8003384:	d802      	bhi.n	800338c <HAL_I2C_Init+0xd4>
 8003386:	68bb      	ldr	r3, [r7, #8]
 8003388:	3301      	adds	r3, #1
 800338a:	e009      	b.n	80033a0 <HAL_I2C_Init+0xe8>
 800338c:	68bb      	ldr	r3, [r7, #8]
 800338e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003392:	fb02 f303 	mul.w	r3, r2, r3
 8003396:	4a69      	ldr	r2, [pc, #420]	; (800353c <HAL_I2C_Init+0x284>)
 8003398:	fba2 2303 	umull	r2, r3, r2, r3
 800339c:	099b      	lsrs	r3, r3, #6
 800339e:	3301      	adds	r3, #1
 80033a0:	687a      	ldr	r2, [r7, #4]
 80033a2:	6812      	ldr	r2, [r2, #0]
 80033a4:	430b      	orrs	r3, r1
 80033a6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80033a8:	687b      	ldr	r3, [r7, #4]
 80033aa:	681b      	ldr	r3, [r3, #0]
 80033ac:	69db      	ldr	r3, [r3, #28]
 80033ae:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80033b2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80033b6:	687b      	ldr	r3, [r7, #4]
 80033b8:	685b      	ldr	r3, [r3, #4]
 80033ba:	495c      	ldr	r1, [pc, #368]	; (800352c <HAL_I2C_Init+0x274>)
 80033bc:	428b      	cmp	r3, r1
 80033be:	d819      	bhi.n	80033f4 <HAL_I2C_Init+0x13c>
 80033c0:	68fb      	ldr	r3, [r7, #12]
 80033c2:	1e59      	subs	r1, r3, #1
 80033c4:	687b      	ldr	r3, [r7, #4]
 80033c6:	685b      	ldr	r3, [r3, #4]
 80033c8:	005b      	lsls	r3, r3, #1
 80033ca:	fbb1 f3f3 	udiv	r3, r1, r3
 80033ce:	1c59      	adds	r1, r3, #1
 80033d0:	f640 73fc 	movw	r3, #4092	; 0xffc
 80033d4:	400b      	ands	r3, r1
 80033d6:	2b00      	cmp	r3, #0
 80033d8:	d00a      	beq.n	80033f0 <HAL_I2C_Init+0x138>
 80033da:	68fb      	ldr	r3, [r7, #12]
 80033dc:	1e59      	subs	r1, r3, #1
 80033de:	687b      	ldr	r3, [r7, #4]
 80033e0:	685b      	ldr	r3, [r3, #4]
 80033e2:	005b      	lsls	r3, r3, #1
 80033e4:	fbb1 f3f3 	udiv	r3, r1, r3
 80033e8:	3301      	adds	r3, #1
 80033ea:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80033ee:	e051      	b.n	8003494 <HAL_I2C_Init+0x1dc>
 80033f0:	2304      	movs	r3, #4
 80033f2:	e04f      	b.n	8003494 <HAL_I2C_Init+0x1dc>
 80033f4:	687b      	ldr	r3, [r7, #4]
 80033f6:	689b      	ldr	r3, [r3, #8]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d111      	bne.n	8003420 <HAL_I2C_Init+0x168>
 80033fc:	68fb      	ldr	r3, [r7, #12]
 80033fe:	1e58      	subs	r0, r3, #1
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	6859      	ldr	r1, [r3, #4]
 8003404:	460b      	mov	r3, r1
 8003406:	005b      	lsls	r3, r3, #1
 8003408:	440b      	add	r3, r1
 800340a:	fbb0 f3f3 	udiv	r3, r0, r3
 800340e:	3301      	adds	r3, #1
 8003410:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003414:	2b00      	cmp	r3, #0
 8003416:	bf0c      	ite	eq
 8003418:	2301      	moveq	r3, #1
 800341a:	2300      	movne	r3, #0
 800341c:	b2db      	uxtb	r3, r3
 800341e:	e012      	b.n	8003446 <HAL_I2C_Init+0x18e>
 8003420:	68fb      	ldr	r3, [r7, #12]
 8003422:	1e58      	subs	r0, r3, #1
 8003424:	687b      	ldr	r3, [r7, #4]
 8003426:	6859      	ldr	r1, [r3, #4]
 8003428:	460b      	mov	r3, r1
 800342a:	009b      	lsls	r3, r3, #2
 800342c:	440b      	add	r3, r1
 800342e:	0099      	lsls	r1, r3, #2
 8003430:	440b      	add	r3, r1
 8003432:	fbb0 f3f3 	udiv	r3, r0, r3
 8003436:	3301      	adds	r3, #1
 8003438:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800343c:	2b00      	cmp	r3, #0
 800343e:	bf0c      	ite	eq
 8003440:	2301      	moveq	r3, #1
 8003442:	2300      	movne	r3, #0
 8003444:	b2db      	uxtb	r3, r3
 8003446:	2b00      	cmp	r3, #0
 8003448:	d001      	beq.n	800344e <HAL_I2C_Init+0x196>
 800344a:	2301      	movs	r3, #1
 800344c:	e022      	b.n	8003494 <HAL_I2C_Init+0x1dc>
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	689b      	ldr	r3, [r3, #8]
 8003452:	2b00      	cmp	r3, #0
 8003454:	d10e      	bne.n	8003474 <HAL_I2C_Init+0x1bc>
 8003456:	68fb      	ldr	r3, [r7, #12]
 8003458:	1e58      	subs	r0, r3, #1
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6859      	ldr	r1, [r3, #4]
 800345e:	460b      	mov	r3, r1
 8003460:	005b      	lsls	r3, r3, #1
 8003462:	440b      	add	r3, r1
 8003464:	fbb0 f3f3 	udiv	r3, r0, r3
 8003468:	3301      	adds	r3, #1
 800346a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 800346e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003472:	e00f      	b.n	8003494 <HAL_I2C_Init+0x1dc>
 8003474:	68fb      	ldr	r3, [r7, #12]
 8003476:	1e58      	subs	r0, r3, #1
 8003478:	687b      	ldr	r3, [r7, #4]
 800347a:	6859      	ldr	r1, [r3, #4]
 800347c:	460b      	mov	r3, r1
 800347e:	009b      	lsls	r3, r3, #2
 8003480:	440b      	add	r3, r1
 8003482:	0099      	lsls	r1, r3, #2
 8003484:	440b      	add	r3, r1
 8003486:	fbb0 f3f3 	udiv	r3, r0, r3
 800348a:	3301      	adds	r3, #1
 800348c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003490:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003494:	6879      	ldr	r1, [r7, #4]
 8003496:	6809      	ldr	r1, [r1, #0]
 8003498:	4313      	orrs	r3, r2
 800349a:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	681b      	ldr	r3, [r3, #0]
 80034a0:	681b      	ldr	r3, [r3, #0]
 80034a2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	69da      	ldr	r2, [r3, #28]
 80034aa:	687b      	ldr	r3, [r7, #4]
 80034ac:	6a1b      	ldr	r3, [r3, #32]
 80034ae:	431a      	orrs	r2, r3
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	430a      	orrs	r2, r1
 80034b6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 80034b8:	687b      	ldr	r3, [r7, #4]
 80034ba:	681b      	ldr	r3, [r3, #0]
 80034bc:	689b      	ldr	r3, [r3, #8]
 80034be:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 80034c2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 80034c6:	687a      	ldr	r2, [r7, #4]
 80034c8:	6911      	ldr	r1, [r2, #16]
 80034ca:	687a      	ldr	r2, [r7, #4]
 80034cc:	68d2      	ldr	r2, [r2, #12]
 80034ce:	4311      	orrs	r1, r2
 80034d0:	687a      	ldr	r2, [r7, #4]
 80034d2:	6812      	ldr	r2, [r2, #0]
 80034d4:	430b      	orrs	r3, r1
 80034d6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 80034d8:	687b      	ldr	r3, [r7, #4]
 80034da:	681b      	ldr	r3, [r3, #0]
 80034dc:	68db      	ldr	r3, [r3, #12]
 80034de:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 80034e2:	687b      	ldr	r3, [r7, #4]
 80034e4:	695a      	ldr	r2, [r3, #20]
 80034e6:	687b      	ldr	r3, [r7, #4]
 80034e8:	699b      	ldr	r3, [r3, #24]
 80034ea:	431a      	orrs	r2, r3
 80034ec:	687b      	ldr	r3, [r7, #4]
 80034ee:	681b      	ldr	r3, [r3, #0]
 80034f0:	430a      	orrs	r2, r1
 80034f2:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	681b      	ldr	r3, [r3, #0]
 80034f8:	681a      	ldr	r2, [r3, #0]
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	681b      	ldr	r3, [r3, #0]
 80034fe:	f042 0201 	orr.w	r2, r2, #1
 8003502:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8003504:	687b      	ldr	r3, [r7, #4]
 8003506:	2200      	movs	r2, #0
 8003508:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 800350a:	687b      	ldr	r3, [r7, #4]
 800350c:	2220      	movs	r2, #32
 800350e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8003512:	687b      	ldr	r3, [r7, #4]
 8003514:	2200      	movs	r2, #0
 8003516:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	2200      	movs	r2, #0
 800351c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3710      	adds	r7, #16
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	000186a0 	.word	0x000186a0
 8003530:	001e847f 	.word	0x001e847f
 8003534:	003d08ff 	.word	0x003d08ff
 8003538:	431bde83 	.word	0x431bde83
 800353c:	10624dd3 	.word	0x10624dd3

08003540 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8003540:	b480      	push	{r7}
 8003542:	b087      	sub	sp, #28
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	607a      	str	r2, [r7, #4]
 800354a:	461a      	mov	r2, r3
 800354c:	460b      	mov	r3, r1
 800354e:	817b      	strh	r3, [r7, #10]
 8003550:	4613      	mov	r3, r2
 8003552:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8003554:	2300      	movs	r3, #0
 8003556:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800355e:	b2db      	uxtb	r3, r3
 8003560:	2b20      	cmp	r3, #32
 8003562:	f040 8085 	bne.w	8003670 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8003566:	4b46      	ldr	r3, [pc, #280]	; (8003680 <HAL_I2C_Master_Transmit_IT+0x140>)
 8003568:	681b      	ldr	r3, [r3, #0]
 800356a:	08db      	lsrs	r3, r3, #3
 800356c:	4a45      	ldr	r2, [pc, #276]	; (8003684 <HAL_I2C_Master_Transmit_IT+0x144>)
 800356e:	fba2 2303 	umull	r2, r3, r2, r3
 8003572:	0a1a      	lsrs	r2, r3, #8
 8003574:	4613      	mov	r3, r2
 8003576:	009b      	lsls	r3, r3, #2
 8003578:	4413      	add	r3, r2
 800357a:	009a      	lsls	r2, r3, #2
 800357c:	4413      	add	r3, r2
 800357e:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8003580:	697b      	ldr	r3, [r7, #20]
 8003582:	3b01      	subs	r3, #1
 8003584:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8003586:	697b      	ldr	r3, [r7, #20]
 8003588:	2b00      	cmp	r3, #0
 800358a:	d116      	bne.n	80035ba <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 800358c:	68fb      	ldr	r3, [r7, #12]
 800358e:	2200      	movs	r2, #0
 8003590:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8003592:	68fb      	ldr	r3, [r7, #12]
 8003594:	2220      	movs	r2, #32
 8003596:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 800359a:	68fb      	ldr	r3, [r7, #12]
 800359c:	2200      	movs	r2, #0
 800359e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 80035a2:	68fb      	ldr	r3, [r7, #12]
 80035a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035a6:	f043 0220 	orr.w	r2, r3, #32
 80035aa:	68fb      	ldr	r3, [r7, #12]
 80035ac:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 80035ae:	68fb      	ldr	r3, [r7, #12]
 80035b0:	2200      	movs	r2, #0
 80035b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 80035b6:	2301      	movs	r3, #1
 80035b8:	e05b      	b.n	8003672 <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 80035ba:	68fb      	ldr	r3, [r7, #12]
 80035bc:	681b      	ldr	r3, [r3, #0]
 80035be:	699b      	ldr	r3, [r3, #24]
 80035c0:	f003 0302 	and.w	r3, r3, #2
 80035c4:	2b02      	cmp	r3, #2
 80035c6:	d0db      	beq.n	8003580 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80035ce:	2b01      	cmp	r3, #1
 80035d0:	d101      	bne.n	80035d6 <HAL_I2C_Master_Transmit_IT+0x96>
 80035d2:	2302      	movs	r3, #2
 80035d4:	e04d      	b.n	8003672 <HAL_I2C_Master_Transmit_IT+0x132>
 80035d6:	68fb      	ldr	r3, [r7, #12]
 80035d8:	2201      	movs	r2, #1
 80035da:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 80035de:	68fb      	ldr	r3, [r7, #12]
 80035e0:	681b      	ldr	r3, [r3, #0]
 80035e2:	681b      	ldr	r3, [r3, #0]
 80035e4:	f003 0301 	and.w	r3, r3, #1
 80035e8:	2b01      	cmp	r3, #1
 80035ea:	d007      	beq.n	80035fc <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80035ec:	68fb      	ldr	r3, [r7, #12]
 80035ee:	681b      	ldr	r3, [r3, #0]
 80035f0:	681a      	ldr	r2, [r3, #0]
 80035f2:	68fb      	ldr	r3, [r7, #12]
 80035f4:	681b      	ldr	r3, [r3, #0]
 80035f6:	f042 0201 	orr.w	r2, r2, #1
 80035fa:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80035fc:	68fb      	ldr	r3, [r7, #12]
 80035fe:	681b      	ldr	r3, [r3, #0]
 8003600:	681a      	ldr	r2, [r3, #0]
 8003602:	68fb      	ldr	r3, [r7, #12]
 8003604:	681b      	ldr	r3, [r3, #0]
 8003606:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800360a:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 800360c:	68fb      	ldr	r3, [r7, #12]
 800360e:	2221      	movs	r2, #33	; 0x21
 8003610:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8003614:	68fb      	ldr	r3, [r7, #12]
 8003616:	2210      	movs	r2, #16
 8003618:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 800361c:	68fb      	ldr	r3, [r7, #12]
 800361e:	2200      	movs	r2, #0
 8003620:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8003622:	68fb      	ldr	r3, [r7, #12]
 8003624:	687a      	ldr	r2, [r7, #4]
 8003626:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8003628:	68fb      	ldr	r3, [r7, #12]
 800362a:	893a      	ldrh	r2, [r7, #8]
 800362c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 800362e:	68fb      	ldr	r3, [r7, #12]
 8003630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003632:	b29a      	uxth	r2, r3
 8003634:	68fb      	ldr	r3, [r7, #12]
 8003636:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8003638:	68fb      	ldr	r3, [r7, #12]
 800363a:	4a13      	ldr	r2, [pc, #76]	; (8003688 <HAL_I2C_Master_Transmit_IT+0x148>)
 800363c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 800363e:	897a      	ldrh	r2, [r7, #10]
 8003640:	68fb      	ldr	r3, [r7, #12]
 8003642:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8003644:	68fb      	ldr	r3, [r7, #12]
 8003646:	681b      	ldr	r3, [r3, #0]
 8003648:	681a      	ldr	r2, [r3, #0]
 800364a:	68fb      	ldr	r3, [r7, #12]
 800364c:	681b      	ldr	r3, [r3, #0]
 800364e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003652:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8003654:	68fb      	ldr	r3, [r7, #12]
 8003656:	2200      	movs	r2, #0
 8003658:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800365c:	68fb      	ldr	r3, [r7, #12]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	685a      	ldr	r2, [r3, #4]
 8003662:	68fb      	ldr	r3, [r7, #12]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 800366a:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 800366c:	2300      	movs	r3, #0
 800366e:	e000      	b.n	8003672 <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8003670:	2302      	movs	r3, #2
  }
}
 8003672:	4618      	mov	r0, r3
 8003674:	371c      	adds	r7, #28
 8003676:	46bd      	mov	sp, r7
 8003678:	f85d 7b04 	ldr.w	r7, [sp], #4
 800367c:	4770      	bx	lr
 800367e:	bf00      	nop
 8003680:	20000028 	.word	0x20000028
 8003684:	14f8b589 	.word	0x14f8b589
 8003688:	ffff0000 	.word	0xffff0000

0800368c <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800368c:	b580      	push	{r7, lr}
 800368e:	b088      	sub	sp, #32
 8003690:	af00      	add	r7, sp, #0
 8003692:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8003694:	2300      	movs	r3, #0
 8003696:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	685b      	ldr	r3, [r3, #4]
 800369e:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036a0:	687b      	ldr	r3, [r7, #4]
 80036a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036a4:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036a6:	687b      	ldr	r3, [r7, #4]
 80036a8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80036ac:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80036b4:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80036b6:	7bfb      	ldrb	r3, [r7, #15]
 80036b8:	2b10      	cmp	r3, #16
 80036ba:	d003      	beq.n	80036c4 <HAL_I2C_EV_IRQHandler+0x38>
 80036bc:	7bfb      	ldrb	r3, [r7, #15]
 80036be:	2b40      	cmp	r3, #64	; 0x40
 80036c0:	f040 80bd 	bne.w	800383e <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80036c4:	687b      	ldr	r3, [r7, #4]
 80036c6:	681b      	ldr	r3, [r3, #0]
 80036c8:	699b      	ldr	r3, [r3, #24]
 80036ca:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80036cc:	687b      	ldr	r3, [r7, #4]
 80036ce:	681b      	ldr	r3, [r3, #0]
 80036d0:	695b      	ldr	r3, [r3, #20]
 80036d2:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 80036d4:	69fb      	ldr	r3, [r7, #28]
 80036d6:	f003 0301 	and.w	r3, r3, #1
 80036da:	2b00      	cmp	r3, #0
 80036dc:	d10d      	bne.n	80036fa <HAL_I2C_EV_IRQHandler+0x6e>
 80036de:	693b      	ldr	r3, [r7, #16]
 80036e0:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 80036e4:	d003      	beq.n	80036ee <HAL_I2C_EV_IRQHandler+0x62>
 80036e6:	693b      	ldr	r3, [r7, #16]
 80036e8:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80036ec:	d101      	bne.n	80036f2 <HAL_I2C_EV_IRQHandler+0x66>
 80036ee:	2301      	movs	r3, #1
 80036f0:	e000      	b.n	80036f4 <HAL_I2C_EV_IRQHandler+0x68>
 80036f2:	2300      	movs	r3, #0
 80036f4:	2b01      	cmp	r3, #1
 80036f6:	f000 812e 	beq.w	8003956 <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80036fa:	69fb      	ldr	r3, [r7, #28]
 80036fc:	f003 0301 	and.w	r3, r3, #1
 8003700:	2b00      	cmp	r3, #0
 8003702:	d00c      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x92>
 8003704:	697b      	ldr	r3, [r7, #20]
 8003706:	0a5b      	lsrs	r3, r3, #9
 8003708:	f003 0301 	and.w	r3, r3, #1
 800370c:	2b00      	cmp	r3, #0
 800370e:	d006      	beq.n	800371e <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003710:	6878      	ldr	r0, [r7, #4]
 8003712:	f001 fb3d 	bl	8004d90 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8003716:	6878      	ldr	r0, [r7, #4]
 8003718:	f000 fcbb 	bl	8004092 <I2C_Master_SB>
 800371c:	e08e      	b.n	800383c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800371e:	69fb      	ldr	r3, [r7, #28]
 8003720:	08db      	lsrs	r3, r3, #3
 8003722:	f003 0301 	and.w	r3, r3, #1
 8003726:	2b00      	cmp	r3, #0
 8003728:	d009      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0xb2>
 800372a:	697b      	ldr	r3, [r7, #20]
 800372c:	0a5b      	lsrs	r3, r3, #9
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d003      	beq.n	800373e <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8003736:	6878      	ldr	r0, [r7, #4]
 8003738:	f000 fd31 	bl	800419e <I2C_Master_ADD10>
 800373c:	e07e      	b.n	800383c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800373e:	69fb      	ldr	r3, [r7, #28]
 8003740:	085b      	lsrs	r3, r3, #1
 8003742:	f003 0301 	and.w	r3, r3, #1
 8003746:	2b00      	cmp	r3, #0
 8003748:	d009      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0xd2>
 800374a:	697b      	ldr	r3, [r7, #20]
 800374c:	0a5b      	lsrs	r3, r3, #9
 800374e:	f003 0301 	and.w	r3, r3, #1
 8003752:	2b00      	cmp	r3, #0
 8003754:	d003      	beq.n	800375e <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8003756:	6878      	ldr	r0, [r7, #4]
 8003758:	f000 fd4b 	bl	80041f2 <I2C_Master_ADDR>
 800375c:	e06e      	b.n	800383c <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 800375e:	69bb      	ldr	r3, [r7, #24]
 8003760:	089b      	lsrs	r3, r3, #2
 8003762:	f003 0301 	and.w	r3, r3, #1
 8003766:	2b00      	cmp	r3, #0
 8003768:	d037      	beq.n	80037da <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 800376a:	687b      	ldr	r3, [r7, #4]
 800376c:	681b      	ldr	r3, [r3, #0]
 800376e:	685b      	ldr	r3, [r3, #4]
 8003770:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8003774:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003778:	f000 80ef 	beq.w	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800377c:	69fb      	ldr	r3, [r7, #28]
 800377e:	09db      	lsrs	r3, r3, #7
 8003780:	f003 0301 	and.w	r3, r3, #1
 8003784:	2b00      	cmp	r3, #0
 8003786:	d00f      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003788:	697b      	ldr	r3, [r7, #20]
 800378a:	0a9b      	lsrs	r3, r3, #10
 800378c:	f003 0301 	and.w	r3, r3, #1
 8003790:	2b00      	cmp	r3, #0
 8003792:	d009      	beq.n	80037a8 <HAL_I2C_EV_IRQHandler+0x11c>
 8003794:	69fb      	ldr	r3, [r7, #28]
 8003796:	089b      	lsrs	r3, r3, #2
 8003798:	f003 0301 	and.w	r3, r3, #1
 800379c:	2b00      	cmp	r3, #0
 800379e:	d103      	bne.n	80037a8 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037a0:	6878      	ldr	r0, [r7, #4]
 80037a2:	f000 f948 	bl	8003a36 <I2C_MasterTransmit_TXE>
 80037a6:	e049      	b.n	800383c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037a8:	69fb      	ldr	r3, [r7, #28]
 80037aa:	089b      	lsrs	r3, r3, #2
 80037ac:	f003 0301 	and.w	r3, r3, #1
 80037b0:	2b00      	cmp	r3, #0
 80037b2:	f000 80d2 	beq.w	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
 80037b6:	697b      	ldr	r3, [r7, #20]
 80037b8:	0a5b      	lsrs	r3, r3, #9
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	f000 80cb 	beq.w	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 80037c4:	7bfb      	ldrb	r3, [r7, #15]
 80037c6:	2b10      	cmp	r3, #16
 80037c8:	d103      	bne.n	80037d2 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 80037ca:	6878      	ldr	r0, [r7, #4]
 80037cc:	f000 f9cf 	bl	8003b6e <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d0:	e0c3      	b.n	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 80037d2:	6878      	ldr	r0, [r7, #4]
 80037d4:	f000 fa33 	bl	8003c3e <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80037d8:	e0bf      	b.n	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037da:	687b      	ldr	r3, [r7, #4]
 80037dc:	681b      	ldr	r3, [r3, #0]
 80037de:	685b      	ldr	r3, [r3, #4]
 80037e0:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037e4:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037e8:	f000 80b7 	beq.w	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	099b      	lsrs	r3, r3, #6
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d00f      	beq.n	8003818 <HAL_I2C_EV_IRQHandler+0x18c>
 80037f8:	697b      	ldr	r3, [r7, #20]
 80037fa:	0a9b      	lsrs	r3, r3, #10
 80037fc:	f003 0301 	and.w	r3, r3, #1
 8003800:	2b00      	cmp	r3, #0
 8003802:	d009      	beq.n	8003818 <HAL_I2C_EV_IRQHandler+0x18c>
 8003804:	69fb      	ldr	r3, [r7, #28]
 8003806:	089b      	lsrs	r3, r3, #2
 8003808:	f003 0301 	and.w	r3, r3, #1
 800380c:	2b00      	cmp	r3, #0
 800380e:	d103      	bne.n	8003818 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003810:	6878      	ldr	r0, [r7, #4]
 8003812:	f000 faa3 	bl	8003d5c <I2C_MasterReceive_RXNE>
 8003816:	e011      	b.n	800383c <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003818:	69fb      	ldr	r3, [r7, #28]
 800381a:	089b      	lsrs	r3, r3, #2
 800381c:	f003 0301 	and.w	r3, r3, #1
 8003820:	2b00      	cmp	r3, #0
 8003822:	f000 809a 	beq.w	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
 8003826:	697b      	ldr	r3, [r7, #20]
 8003828:	0a5b      	lsrs	r3, r3, #9
 800382a:	f003 0301 	and.w	r3, r3, #1
 800382e:	2b00      	cmp	r3, #0
 8003830:	f000 8093 	beq.w	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8003834:	6878      	ldr	r0, [r7, #4]
 8003836:	f000 fb42 	bl	8003ebe <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800383a:	e08e      	b.n	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
 800383c:	e08d      	b.n	800395a <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800383e:	687b      	ldr	r3, [r7, #4]
 8003840:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003842:	2b00      	cmp	r3, #0
 8003844:	d004      	beq.n	8003850 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003846:	687b      	ldr	r3, [r7, #4]
 8003848:	681b      	ldr	r3, [r3, #0]
 800384a:	695b      	ldr	r3, [r3, #20]
 800384c:	61fb      	str	r3, [r7, #28]
 800384e:	e007      	b.n	8003860 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003850:	687b      	ldr	r3, [r7, #4]
 8003852:	681b      	ldr	r3, [r3, #0]
 8003854:	699b      	ldr	r3, [r3, #24]
 8003856:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003858:	687b      	ldr	r3, [r7, #4]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	695b      	ldr	r3, [r3, #20]
 800385e:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003860:	69fb      	ldr	r3, [r7, #28]
 8003862:	085b      	lsrs	r3, r3, #1
 8003864:	f003 0301 	and.w	r3, r3, #1
 8003868:	2b00      	cmp	r3, #0
 800386a:	d012      	beq.n	8003892 <HAL_I2C_EV_IRQHandler+0x206>
 800386c:	697b      	ldr	r3, [r7, #20]
 800386e:	0a5b      	lsrs	r3, r3, #9
 8003870:	f003 0301 	and.w	r3, r3, #1
 8003874:	2b00      	cmp	r3, #0
 8003876:	d00c      	beq.n	8003892 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800387c:	2b00      	cmp	r3, #0
 800387e:	d003      	beq.n	8003888 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8003880:	687b      	ldr	r3, [r7, #4]
 8003882:	681b      	ldr	r3, [r3, #0]
 8003884:	699b      	ldr	r3, [r3, #24]
 8003886:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8003888:	69b9      	ldr	r1, [r7, #24]
 800388a:	6878      	ldr	r0, [r7, #4]
 800388c:	f000 ff00 	bl	8004690 <I2C_Slave_ADDR>
 8003890:	e066      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003892:	69fb      	ldr	r3, [r7, #28]
 8003894:	091b      	lsrs	r3, r3, #4
 8003896:	f003 0301 	and.w	r3, r3, #1
 800389a:	2b00      	cmp	r3, #0
 800389c:	d009      	beq.n	80038b2 <HAL_I2C_EV_IRQHandler+0x226>
 800389e:	697b      	ldr	r3, [r7, #20]
 80038a0:	0a5b      	lsrs	r3, r3, #9
 80038a2:	f003 0301 	and.w	r3, r3, #1
 80038a6:	2b00      	cmp	r3, #0
 80038a8:	d003      	beq.n	80038b2 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 80038aa:	6878      	ldr	r0, [r7, #4]
 80038ac:	f000 ff34 	bl	8004718 <I2C_Slave_STOPF>
 80038b0:	e056      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80038b2:	7bbb      	ldrb	r3, [r7, #14]
 80038b4:	2b21      	cmp	r3, #33	; 0x21
 80038b6:	d002      	beq.n	80038be <HAL_I2C_EV_IRQHandler+0x232>
 80038b8:	7bbb      	ldrb	r3, [r7, #14]
 80038ba:	2b29      	cmp	r3, #41	; 0x29
 80038bc:	d125      	bne.n	800390a <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038be:	69fb      	ldr	r3, [r7, #28]
 80038c0:	09db      	lsrs	r3, r3, #7
 80038c2:	f003 0301 	and.w	r3, r3, #1
 80038c6:	2b00      	cmp	r3, #0
 80038c8:	d00f      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x25e>
 80038ca:	697b      	ldr	r3, [r7, #20]
 80038cc:	0a9b      	lsrs	r3, r3, #10
 80038ce:	f003 0301 	and.w	r3, r3, #1
 80038d2:	2b00      	cmp	r3, #0
 80038d4:	d009      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x25e>
 80038d6:	69fb      	ldr	r3, [r7, #28]
 80038d8:	089b      	lsrs	r3, r3, #2
 80038da:	f003 0301 	and.w	r3, r3, #1
 80038de:	2b00      	cmp	r3, #0
 80038e0:	d103      	bne.n	80038ea <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 fe16 	bl	8004514 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80038e8:	e039      	b.n	800395e <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	089b      	lsrs	r3, r3, #2
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d033      	beq.n	800395e <HAL_I2C_EV_IRQHandler+0x2d2>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	0a5b      	lsrs	r3, r3, #9
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d02d      	beq.n	800395e <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 fe43 	bl	800458e <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003908:	e029      	b.n	800395e <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800390a:	69fb      	ldr	r3, [r7, #28]
 800390c:	099b      	lsrs	r3, r3, #6
 800390e:	f003 0301 	and.w	r3, r3, #1
 8003912:	2b00      	cmp	r3, #0
 8003914:	d00f      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003916:	697b      	ldr	r3, [r7, #20]
 8003918:	0a9b      	lsrs	r3, r3, #10
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d009      	beq.n	8003936 <HAL_I2C_EV_IRQHandler+0x2aa>
 8003922:	69fb      	ldr	r3, [r7, #28]
 8003924:	089b      	lsrs	r3, r3, #2
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d103      	bne.n	8003936 <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 800392e:	6878      	ldr	r0, [r7, #4]
 8003930:	f000 fe4e 	bl	80045d0 <I2C_SlaveReceive_RXNE>
 8003934:	e014      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003936:	69fb      	ldr	r3, [r7, #28]
 8003938:	089b      	lsrs	r3, r3, #2
 800393a:	f003 0301 	and.w	r3, r3, #1
 800393e:	2b00      	cmp	r3, #0
 8003940:	d00e      	beq.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
 8003942:	697b      	ldr	r3, [r7, #20]
 8003944:	0a5b      	lsrs	r3, r3, #9
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d008      	beq.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 800394e:	6878      	ldr	r0, [r7, #4]
 8003950:	f000 fe7c 	bl	800464c <I2C_SlaveReceive_BTF>
 8003954:	e004      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 8003956:	bf00      	nop
 8003958:	e002      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800395a:	bf00      	nop
 800395c:	e000      	b.n	8003960 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800395e:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8003960:	3720      	adds	r7, #32
 8003962:	46bd      	mov	sp, r7
 8003964:	bd80      	pop	{r7, pc}

08003966 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003966:	b480      	push	{r7}
 8003968:	b083      	sub	sp, #12
 800396a:	af00      	add	r7, sp, #0
 800396c:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 800396e:	bf00      	nop
 8003970:	370c      	adds	r7, #12
 8003972:	46bd      	mov	sp, r7
 8003974:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003978:	4770      	bx	lr

0800397a <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800397a:	b480      	push	{r7}
 800397c:	b083      	sub	sp, #12
 800397e:	af00      	add	r7, sp, #0
 8003980:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003982:	bf00      	nop
 8003984:	370c      	adds	r7, #12
 8003986:	46bd      	mov	sp, r7
 8003988:	f85d 7b04 	ldr.w	r7, [sp], #4
 800398c:	4770      	bx	lr

0800398e <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800398e:	b480      	push	{r7}
 8003990:	b083      	sub	sp, #12
 8003992:	af00      	add	r7, sp, #0
 8003994:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003996:	bf00      	nop
 8003998:	370c      	adds	r7, #12
 800399a:	46bd      	mov	sp, r7
 800399c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039a0:	4770      	bx	lr

080039a2 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039a2:	b480      	push	{r7}
 80039a4:	b083      	sub	sp, #12
 80039a6:	af00      	add	r7, sp, #0
 80039a8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80039aa:	bf00      	nop
 80039ac:	370c      	adds	r7, #12
 80039ae:	46bd      	mov	sp, r7
 80039b0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039b4:	4770      	bx	lr

080039b6 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80039b6:	b480      	push	{r7}
 80039b8:	b083      	sub	sp, #12
 80039ba:	af00      	add	r7, sp, #0
 80039bc:	6078      	str	r0, [r7, #4]
 80039be:	460b      	mov	r3, r1
 80039c0:	70fb      	strb	r3, [r7, #3]
 80039c2:	4613      	mov	r3, r2
 80039c4:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80039c6:	bf00      	nop
 80039c8:	370c      	adds	r7, #12
 80039ca:	46bd      	mov	sp, r7
 80039cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039d0:	4770      	bx	lr

080039d2 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039d2:	b480      	push	{r7}
 80039d4:	b083      	sub	sp, #12
 80039d6:	af00      	add	r7, sp, #0
 80039d8:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80039da:	bf00      	nop
 80039dc:	370c      	adds	r7, #12
 80039de:	46bd      	mov	sp, r7
 80039e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039e4:	4770      	bx	lr

080039e6 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039e6:	b480      	push	{r7}
 80039e8:	b083      	sub	sp, #12
 80039ea:	af00      	add	r7, sp, #0
 80039ec:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80039ee:	bf00      	nop
 80039f0:	370c      	adds	r7, #12
 80039f2:	46bd      	mov	sp, r7
 80039f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039f8:	4770      	bx	lr

080039fa <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80039fa:	b480      	push	{r7}
 80039fc:	b083      	sub	sp, #12
 80039fe:	af00      	add	r7, sp, #0
 8003a00:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003a02:	bf00      	nop
 8003a04:	370c      	adds	r7, #12
 8003a06:	46bd      	mov	sp, r7
 8003a08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a0c:	4770      	bx	lr

08003a0e <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003a0e:	b480      	push	{r7}
 8003a10:	b083      	sub	sp, #12
 8003a12:	af00      	add	r7, sp, #0
 8003a14:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003a16:	bf00      	nop
 8003a18:	370c      	adds	r7, #12
 8003a1a:	46bd      	mov	sp, r7
 8003a1c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a20:	4770      	bx	lr

08003a22 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003a22:	b480      	push	{r7}
 8003a24:	b083      	sub	sp, #12
 8003a26:	af00      	add	r7, sp, #0
 8003a28:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003a2a:	bf00      	nop
 8003a2c:	370c      	adds	r7, #12
 8003a2e:	46bd      	mov	sp, r7
 8003a30:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a34:	4770      	bx	lr

08003a36 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003a36:	b580      	push	{r7, lr}
 8003a38:	b084      	sub	sp, #16
 8003a3a:	af00      	add	r7, sp, #0
 8003a3c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003a3e:	687b      	ldr	r3, [r7, #4]
 8003a40:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a44:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003a46:	687b      	ldr	r3, [r7, #4]
 8003a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003a4c:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003a52:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003a54:	687b      	ldr	r3, [r7, #4]
 8003a56:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003a58:	2b00      	cmp	r3, #0
 8003a5a:	d150      	bne.n	8003afe <I2C_MasterTransmit_TXE+0xc8>
 8003a5c:	7bfb      	ldrb	r3, [r7, #15]
 8003a5e:	2b21      	cmp	r3, #33	; 0x21
 8003a60:	d14d      	bne.n	8003afe <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003a62:	68bb      	ldr	r3, [r7, #8]
 8003a64:	2b08      	cmp	r3, #8
 8003a66:	d01d      	beq.n	8003aa4 <I2C_MasterTransmit_TXE+0x6e>
 8003a68:	68bb      	ldr	r3, [r7, #8]
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d01a      	beq.n	8003aa4 <I2C_MasterTransmit_TXE+0x6e>
 8003a6e:	68bb      	ldr	r3, [r7, #8]
 8003a70:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003a74:	d016      	beq.n	8003aa4 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003a76:	687b      	ldr	r3, [r7, #4]
 8003a78:	681b      	ldr	r3, [r3, #0]
 8003a7a:	685a      	ldr	r2, [r3, #4]
 8003a7c:	687b      	ldr	r3, [r7, #4]
 8003a7e:	681b      	ldr	r3, [r3, #0]
 8003a80:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003a84:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003a86:	687b      	ldr	r3, [r7, #4]
 8003a88:	2211      	movs	r2, #17
 8003a8a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003a8c:	687b      	ldr	r3, [r7, #4]
 8003a8e:	2200      	movs	r2, #0
 8003a90:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	2220      	movs	r2, #32
 8003a98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003a9c:	6878      	ldr	r0, [r7, #4]
 8003a9e:	f7ff ff62 	bl	8003966 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aa2:	e060      	b.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003aa4:	687b      	ldr	r3, [r7, #4]
 8003aa6:	681b      	ldr	r3, [r3, #0]
 8003aa8:	685a      	ldr	r2, [r3, #4]
 8003aaa:	687b      	ldr	r3, [r7, #4]
 8003aac:	681b      	ldr	r3, [r3, #0]
 8003aae:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ab2:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab4:	687b      	ldr	r3, [r7, #4]
 8003ab6:	681b      	ldr	r3, [r3, #0]
 8003ab8:	681a      	ldr	r2, [r3, #0]
 8003aba:	687b      	ldr	r3, [r7, #4]
 8003abc:	681b      	ldr	r3, [r3, #0]
 8003abe:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac2:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	2200      	movs	r2, #0
 8003ac8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	2220      	movs	r2, #32
 8003ace:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003ad2:	687b      	ldr	r3, [r7, #4]
 8003ad4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003ad8:	b2db      	uxtb	r3, r3
 8003ada:	2b40      	cmp	r3, #64	; 0x40
 8003adc:	d107      	bne.n	8003aee <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ade:	687b      	ldr	r3, [r7, #4]
 8003ae0:	2200      	movs	r2, #0
 8003ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003ae6:	6878      	ldr	r0, [r7, #4]
 8003ae8:	f7ff ff7d 	bl	80039e6 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003aec:	e03b      	b.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2200      	movs	r2, #0
 8003af2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003af6:	6878      	ldr	r0, [r7, #4]
 8003af8:	f7ff ff35 	bl	8003966 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003afc:	e033      	b.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003afe:	7bfb      	ldrb	r3, [r7, #15]
 8003b00:	2b21      	cmp	r3, #33	; 0x21
 8003b02:	d005      	beq.n	8003b10 <I2C_MasterTransmit_TXE+0xda>
 8003b04:	7bbb      	ldrb	r3, [r7, #14]
 8003b06:	2b40      	cmp	r3, #64	; 0x40
 8003b08:	d12d      	bne.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003b0a:	7bfb      	ldrb	r3, [r7, #15]
 8003b0c:	2b22      	cmp	r3, #34	; 0x22
 8003b0e:	d12a      	bne.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003b10:	687b      	ldr	r3, [r7, #4]
 8003b12:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b14:	b29b      	uxth	r3, r3
 8003b16:	2b00      	cmp	r3, #0
 8003b18:	d108      	bne.n	8003b2c <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	685a      	ldr	r2, [r3, #4]
 8003b20:	687b      	ldr	r3, [r7, #4]
 8003b22:	681b      	ldr	r3, [r3, #0]
 8003b24:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003b28:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003b2a:	e01c      	b.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003b2c:	687b      	ldr	r3, [r7, #4]
 8003b2e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003b32:	b2db      	uxtb	r3, r3
 8003b34:	2b40      	cmp	r3, #64	; 0x40
 8003b36:	d103      	bne.n	8003b40 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003b38:	6878      	ldr	r0, [r7, #4]
 8003b3a:	f000 f880 	bl	8003c3e <I2C_MemoryTransmit_TXE_BTF>
}
 8003b3e:	e012      	b.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b40:	687b      	ldr	r3, [r7, #4]
 8003b42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b44:	781a      	ldrb	r2, [r3, #0]
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003b4c:	687b      	ldr	r3, [r7, #4]
 8003b4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b50:	1c5a      	adds	r2, r3, #1
 8003b52:	687b      	ldr	r3, [r7, #4]
 8003b54:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b5a:	b29b      	uxth	r3, r3
 8003b5c:	3b01      	subs	r3, #1
 8003b5e:	b29a      	uxth	r2, r3
 8003b60:	687b      	ldr	r3, [r7, #4]
 8003b62:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003b64:	e7ff      	b.n	8003b66 <I2C_MasterTransmit_TXE+0x130>
 8003b66:	bf00      	nop
 8003b68:	3710      	adds	r7, #16
 8003b6a:	46bd      	mov	sp, r7
 8003b6c:	bd80      	pop	{r7, pc}

08003b6e <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003b6e:	b580      	push	{r7, lr}
 8003b70:	b084      	sub	sp, #16
 8003b72:	af00      	add	r7, sp, #0
 8003b74:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003b76:	687b      	ldr	r3, [r7, #4]
 8003b78:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b7a:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003b7c:	687b      	ldr	r3, [r7, #4]
 8003b7e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003b82:	b2db      	uxtb	r3, r3
 8003b84:	2b21      	cmp	r3, #33	; 0x21
 8003b86:	d156      	bne.n	8003c36 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003b88:	687b      	ldr	r3, [r7, #4]
 8003b8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003b8c:	b29b      	uxth	r3, r3
 8003b8e:	2b00      	cmp	r3, #0
 8003b90:	d012      	beq.n	8003bb8 <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003b96:	781a      	ldrb	r2, [r3, #0]
 8003b98:	687b      	ldr	r3, [r7, #4]
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003b9e:	687b      	ldr	r3, [r7, #4]
 8003ba0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ba2:	1c5a      	adds	r2, r3, #1
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003ba8:	687b      	ldr	r3, [r7, #4]
 8003baa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003bac:	b29b      	uxth	r3, r3
 8003bae:	3b01      	subs	r3, #1
 8003bb0:	b29a      	uxth	r2, r3
 8003bb2:	687b      	ldr	r3, [r7, #4]
 8003bb4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003bb6:	e03e      	b.n	8003c36 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003bb8:	68fb      	ldr	r3, [r7, #12]
 8003bba:	2b08      	cmp	r3, #8
 8003bbc:	d01d      	beq.n	8003bfa <I2C_MasterTransmit_BTF+0x8c>
 8003bbe:	68fb      	ldr	r3, [r7, #12]
 8003bc0:	2b20      	cmp	r3, #32
 8003bc2:	d01a      	beq.n	8003bfa <I2C_MasterTransmit_BTF+0x8c>
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003bca:	d016      	beq.n	8003bfa <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bcc:	687b      	ldr	r3, [r7, #4]
 8003bce:	681b      	ldr	r3, [r3, #0]
 8003bd0:	685a      	ldr	r2, [r3, #4]
 8003bd2:	687b      	ldr	r3, [r7, #4]
 8003bd4:	681b      	ldr	r3, [r3, #0]
 8003bd6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003bda:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003bdc:	687b      	ldr	r3, [r7, #4]
 8003bde:	2211      	movs	r2, #17
 8003be0:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003be2:	687b      	ldr	r3, [r7, #4]
 8003be4:	2200      	movs	r2, #0
 8003be6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003bea:	687b      	ldr	r3, [r7, #4]
 8003bec:	2220      	movs	r2, #32
 8003bee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003bf2:	6878      	ldr	r0, [r7, #4]
 8003bf4:	f7ff feb7 	bl	8003966 <HAL_I2C_MasterTxCpltCallback>
}
 8003bf8:	e01d      	b.n	8003c36 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	681b      	ldr	r3, [r3, #0]
 8003bfe:	685a      	ldr	r2, [r3, #4]
 8003c00:	687b      	ldr	r3, [r7, #4]
 8003c02:	681b      	ldr	r3, [r3, #0]
 8003c04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c08:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c0a:	687b      	ldr	r3, [r7, #4]
 8003c0c:	681b      	ldr	r3, [r3, #0]
 8003c0e:	681a      	ldr	r2, [r3, #0]
 8003c10:	687b      	ldr	r3, [r7, #4]
 8003c12:	681b      	ldr	r3, [r3, #0]
 8003c14:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c18:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003c1a:	687b      	ldr	r3, [r7, #4]
 8003c1c:	2200      	movs	r2, #0
 8003c1e:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	2220      	movs	r2, #32
 8003c24:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c28:	687b      	ldr	r3, [r7, #4]
 8003c2a:	2200      	movs	r2, #0
 8003c2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c30:	6878      	ldr	r0, [r7, #4]
 8003c32:	f7ff fe98 	bl	8003966 <HAL_I2C_MasterTxCpltCallback>
}
 8003c36:	bf00      	nop
 8003c38:	3710      	adds	r7, #16
 8003c3a:	46bd      	mov	sp, r7
 8003c3c:	bd80      	pop	{r7, pc}

08003c3e <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003c3e:	b580      	push	{r7, lr}
 8003c40:	b084      	sub	sp, #16
 8003c42:	af00      	add	r7, sp, #0
 8003c44:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003c46:	687b      	ldr	r3, [r7, #4]
 8003c48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003c4c:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c52:	2b00      	cmp	r3, #0
 8003c54:	d11d      	bne.n	8003c92 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003c5a:	2b01      	cmp	r3, #1
 8003c5c:	d10b      	bne.n	8003c76 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c62:	b2da      	uxtb	r2, r3
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c6e:	1c9a      	adds	r2, r3, #2
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003c74:	e06e      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003c76:	687b      	ldr	r3, [r7, #4]
 8003c78:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c7a:	b29b      	uxth	r3, r3
 8003c7c:	121b      	asrs	r3, r3, #8
 8003c7e:	b2da      	uxtb	r2, r3
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c8a:	1c5a      	adds	r2, r3, #1
 8003c8c:	687b      	ldr	r3, [r7, #4]
 8003c8e:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003c90:	e060      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003c92:	687b      	ldr	r3, [r7, #4]
 8003c94:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003c96:	2b01      	cmp	r3, #1
 8003c98:	d10b      	bne.n	8003cb2 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003c9a:	687b      	ldr	r3, [r7, #4]
 8003c9c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003c9e:	b2da      	uxtb	r2, r3
 8003ca0:	687b      	ldr	r3, [r7, #4]
 8003ca2:	681b      	ldr	r3, [r3, #0]
 8003ca4:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003caa:	1c5a      	adds	r2, r3, #1
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003cb0:	e050      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003cb6:	2b02      	cmp	r3, #2
 8003cb8:	d14c      	bne.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003cba:	7bfb      	ldrb	r3, [r7, #15]
 8003cbc:	2b22      	cmp	r3, #34	; 0x22
 8003cbe:	d108      	bne.n	8003cd2 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	681a      	ldr	r2, [r3, #0]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003cce:	601a      	str	r2, [r3, #0]
}
 8003cd0:	e040      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cd6:	b29b      	uxth	r3, r3
 8003cd8:	2b00      	cmp	r3, #0
 8003cda:	d015      	beq.n	8003d08 <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003cdc:	7bfb      	ldrb	r3, [r7, #15]
 8003cde:	2b21      	cmp	r3, #33	; 0x21
 8003ce0:	d112      	bne.n	8003d08 <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ce6:	781a      	ldrb	r2, [r3, #0]
 8003ce8:	687b      	ldr	r3, [r7, #4]
 8003cea:	681b      	ldr	r3, [r3, #0]
 8003cec:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf2:	1c5a      	adds	r2, r3, #1
 8003cf4:	687b      	ldr	r3, [r7, #4]
 8003cf6:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cfc:	b29b      	uxth	r3, r3
 8003cfe:	3b01      	subs	r3, #1
 8003d00:	b29a      	uxth	r2, r3
 8003d02:	687b      	ldr	r3, [r7, #4]
 8003d04:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d06:	e025      	b.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003d08:	687b      	ldr	r3, [r7, #4]
 8003d0a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d0c:	b29b      	uxth	r3, r3
 8003d0e:	2b00      	cmp	r3, #0
 8003d10:	d120      	bne.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003d12:	7bfb      	ldrb	r3, [r7, #15]
 8003d14:	2b21      	cmp	r3, #33	; 0x21
 8003d16:	d11d      	bne.n	8003d54 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d18:	687b      	ldr	r3, [r7, #4]
 8003d1a:	681b      	ldr	r3, [r3, #0]
 8003d1c:	685a      	ldr	r2, [r3, #4]
 8003d1e:	687b      	ldr	r3, [r7, #4]
 8003d20:	681b      	ldr	r3, [r3, #0]
 8003d22:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d26:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	681a      	ldr	r2, [r3, #0]
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	681b      	ldr	r3, [r3, #0]
 8003d32:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003d36:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	2200      	movs	r2, #0
 8003d3c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	2220      	movs	r2, #32
 8003d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d46:	687b      	ldr	r3, [r7, #4]
 8003d48:	2200      	movs	r2, #0
 8003d4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003d4e:	6878      	ldr	r0, [r7, #4]
 8003d50:	f7ff fe49 	bl	80039e6 <HAL_I2C_MemTxCpltCallback>
}
 8003d54:	bf00      	nop
 8003d56:	3710      	adds	r7, #16
 8003d58:	46bd      	mov	sp, r7
 8003d5a:	bd80      	pop	{r7, pc}

08003d5c <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003d5c:	b580      	push	{r7, lr}
 8003d5e:	b084      	sub	sp, #16
 8003d60:	af00      	add	r7, sp, #0
 8003d62:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003d64:	687b      	ldr	r3, [r7, #4]
 8003d66:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d6a:	b2db      	uxtb	r3, r3
 8003d6c:	2b22      	cmp	r3, #34	; 0x22
 8003d6e:	f040 80a2 	bne.w	8003eb6 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d76:	b29b      	uxth	r3, r3
 8003d78:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003d7a:	68fb      	ldr	r3, [r7, #12]
 8003d7c:	2b03      	cmp	r3, #3
 8003d7e:	d921      	bls.n	8003dc4 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	681b      	ldr	r3, [r3, #0]
 8003d84:	691a      	ldr	r2, [r3, #16]
 8003d86:	687b      	ldr	r3, [r7, #4]
 8003d88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d8a:	b2d2      	uxtb	r2, r2
 8003d8c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d8e:	687b      	ldr	r3, [r7, #4]
 8003d90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d92:	1c5a      	adds	r2, r3, #1
 8003d94:	687b      	ldr	r3, [r7, #4]
 8003d96:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d9c:	b29b      	uxth	r3, r3
 8003d9e:	3b01      	subs	r3, #1
 8003da0:	b29a      	uxth	r2, r3
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003daa:	b29b      	uxth	r3, r3
 8003dac:	2b03      	cmp	r3, #3
 8003dae:	f040 8082 	bne.w	8003eb6 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003db2:	687b      	ldr	r3, [r7, #4]
 8003db4:	681b      	ldr	r3, [r3, #0]
 8003db6:	685a      	ldr	r2, [r3, #4]
 8003db8:	687b      	ldr	r3, [r7, #4]
 8003dba:	681b      	ldr	r3, [r3, #0]
 8003dbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003dc0:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003dc2:	e078      	b.n	8003eb6 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003dc4:	687b      	ldr	r3, [r7, #4]
 8003dc6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003dc8:	2b02      	cmp	r3, #2
 8003dca:	d074      	beq.n	8003eb6 <I2C_MasterReceive_RXNE+0x15a>
 8003dcc:	68fb      	ldr	r3, [r7, #12]
 8003dce:	2b01      	cmp	r3, #1
 8003dd0:	d002      	beq.n	8003dd8 <I2C_MasterReceive_RXNE+0x7c>
 8003dd2:	68fb      	ldr	r3, [r7, #12]
 8003dd4:	2b00      	cmp	r3, #0
 8003dd6:	d16e      	bne.n	8003eb6 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003dd8:	6878      	ldr	r0, [r7, #4]
 8003dda:	f000 ffa7 	bl	8004d2c <I2C_WaitOnSTOPRequestThroughIT>
 8003dde:	4603      	mov	r3, r0
 8003de0:	2b00      	cmp	r3, #0
 8003de2:	d142      	bne.n	8003e6a <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	681b      	ldr	r3, [r3, #0]
 8003de8:	681a      	ldr	r2, [r3, #0]
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	681b      	ldr	r3, [r3, #0]
 8003dee:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003df2:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	681b      	ldr	r3, [r3, #0]
 8003df8:	685a      	ldr	r2, [r3, #4]
 8003dfa:	687b      	ldr	r3, [r7, #4]
 8003dfc:	681b      	ldr	r3, [r3, #0]
 8003dfe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e02:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	681b      	ldr	r3, [r3, #0]
 8003e08:	691a      	ldr	r2, [r3, #16]
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e0e:	b2d2      	uxtb	r2, r2
 8003e10:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e12:	687b      	ldr	r3, [r7, #4]
 8003e14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e16:	1c5a      	adds	r2, r3, #1
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	3b01      	subs	r3, #1
 8003e24:	b29a      	uxth	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003e2a:	687b      	ldr	r3, [r7, #4]
 8003e2c:	2220      	movs	r2, #32
 8003e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003e38:	b2db      	uxtb	r3, r3
 8003e3a:	2b40      	cmp	r3, #64	; 0x40
 8003e3c:	d10a      	bne.n	8003e54 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e3e:	687b      	ldr	r3, [r7, #4]
 8003e40:	2200      	movs	r2, #0
 8003e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	2200      	movs	r2, #0
 8003e4a:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003e4c:	6878      	ldr	r0, [r7, #4]
 8003e4e:	f7ff fdd4 	bl	80039fa <HAL_I2C_MemRxCpltCallback>
}
 8003e52:	e030      	b.n	8003eb6 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	2200      	movs	r2, #0
 8003e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8003e5c:	687b      	ldr	r3, [r7, #4]
 8003e5e:	2212      	movs	r2, #18
 8003e60:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8003e62:	6878      	ldr	r0, [r7, #4]
 8003e64:	f7ff fd89 	bl	800397a <HAL_I2C_MasterRxCpltCallback>
}
 8003e68:	e025      	b.n	8003eb6 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003e6a:	687b      	ldr	r3, [r7, #4]
 8003e6c:	681b      	ldr	r3, [r3, #0]
 8003e6e:	685a      	ldr	r2, [r3, #4]
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003e78:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	681b      	ldr	r3, [r3, #0]
 8003e7e:	691a      	ldr	r2, [r3, #16]
 8003e80:	687b      	ldr	r3, [r7, #4]
 8003e82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e84:	b2d2      	uxtb	r2, r2
 8003e86:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	1c5a      	adds	r2, r3, #1
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003e92:	687b      	ldr	r3, [r7, #4]
 8003e94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e96:	b29b      	uxth	r3, r3
 8003e98:	3b01      	subs	r3, #1
 8003e9a:	b29a      	uxth	r2, r3
 8003e9c:	687b      	ldr	r3, [r7, #4]
 8003e9e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003ea0:	687b      	ldr	r3, [r7, #4]
 8003ea2:	2220      	movs	r2, #32
 8003ea4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	2200      	movs	r2, #0
 8003eac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8003eb0:	6878      	ldr	r0, [r7, #4]
 8003eb2:	f7ff fdac 	bl	8003a0e <HAL_I2C_ErrorCallback>
}
 8003eb6:	bf00      	nop
 8003eb8:	3710      	adds	r7, #16
 8003eba:	46bd      	mov	sp, r7
 8003ebc:	bd80      	pop	{r7, pc}

08003ebe <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8003ebe:	b580      	push	{r7, lr}
 8003ec0:	b084      	sub	sp, #16
 8003ec2:	af00      	add	r7, sp, #0
 8003ec4:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003ec6:	687b      	ldr	r3, [r7, #4]
 8003ec8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003eca:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8003ecc:	687b      	ldr	r3, [r7, #4]
 8003ece:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ed0:	b29b      	uxth	r3, r3
 8003ed2:	2b04      	cmp	r3, #4
 8003ed4:	d11b      	bne.n	8003f0e <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003ed6:	687b      	ldr	r3, [r7, #4]
 8003ed8:	681b      	ldr	r3, [r3, #0]
 8003eda:	685a      	ldr	r2, [r3, #4]
 8003edc:	687b      	ldr	r3, [r7, #4]
 8003ede:	681b      	ldr	r3, [r3, #0]
 8003ee0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003ee4:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003ee6:	687b      	ldr	r3, [r7, #4]
 8003ee8:	681b      	ldr	r3, [r3, #0]
 8003eea:	691a      	ldr	r2, [r3, #16]
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef0:	b2d2      	uxtb	r2, r2
 8003ef2:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8003ef4:	687b      	ldr	r3, [r7, #4]
 8003ef6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ef8:	1c5a      	adds	r2, r3, #1
 8003efa:	687b      	ldr	r3, [r7, #4]
 8003efc:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8003efe:	687b      	ldr	r3, [r7, #4]
 8003f00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f02:	b29b      	uxth	r3, r3
 8003f04:	3b01      	subs	r3, #1
 8003f06:	b29a      	uxth	r2, r3
 8003f08:	687b      	ldr	r3, [r7, #4]
 8003f0a:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8003f0c:	e0bd      	b.n	800408a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8003f0e:	687b      	ldr	r3, [r7, #4]
 8003f10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f12:	b29b      	uxth	r3, r3
 8003f14:	2b03      	cmp	r3, #3
 8003f16:	d129      	bne.n	8003f6c <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	681b      	ldr	r3, [r3, #0]
 8003f1c:	685a      	ldr	r2, [r3, #4]
 8003f1e:	687b      	ldr	r3, [r7, #4]
 8003f20:	681b      	ldr	r3, [r3, #0]
 8003f22:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f26:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8003f28:	68fb      	ldr	r3, [r7, #12]
 8003f2a:	2b04      	cmp	r3, #4
 8003f2c:	d00a      	beq.n	8003f44 <I2C_MasterReceive_BTF+0x86>
 8003f2e:	68fb      	ldr	r3, [r7, #12]
 8003f30:	2b02      	cmp	r3, #2
 8003f32:	d007      	beq.n	8003f44 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	681a      	ldr	r2, [r3, #0]
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	681b      	ldr	r3, [r3, #0]
 8003f3e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f42:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f44:	687b      	ldr	r3, [r7, #4]
 8003f46:	681b      	ldr	r3, [r3, #0]
 8003f48:	691a      	ldr	r2, [r3, #16]
 8003f4a:	687b      	ldr	r3, [r7, #4]
 8003f4c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f4e:	b2d2      	uxtb	r2, r2
 8003f50:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003f52:	687b      	ldr	r3, [r7, #4]
 8003f54:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f56:	1c5a      	adds	r2, r3, #1
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003f5c:	687b      	ldr	r3, [r7, #4]
 8003f5e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f60:	b29b      	uxth	r3, r3
 8003f62:	3b01      	subs	r3, #1
 8003f64:	b29a      	uxth	r2, r3
 8003f66:	687b      	ldr	r3, [r7, #4]
 8003f68:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003f6a:	e08e      	b.n	800408a <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8003f6c:	687b      	ldr	r3, [r7, #4]
 8003f6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f70:	b29b      	uxth	r3, r3
 8003f72:	2b02      	cmp	r3, #2
 8003f74:	d176      	bne.n	8004064 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	2b01      	cmp	r3, #1
 8003f7a:	d002      	beq.n	8003f82 <I2C_MasterReceive_BTF+0xc4>
 8003f7c:	68fb      	ldr	r3, [r7, #12]
 8003f7e:	2b10      	cmp	r3, #16
 8003f80:	d108      	bne.n	8003f94 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	681a      	ldr	r2, [r3, #0]
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f90:	601a      	str	r2, [r3, #0]
 8003f92:	e019      	b.n	8003fc8 <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8003f94:	68fb      	ldr	r3, [r7, #12]
 8003f96:	2b04      	cmp	r3, #4
 8003f98:	d002      	beq.n	8003fa0 <I2C_MasterReceive_BTF+0xe2>
 8003f9a:	68fb      	ldr	r3, [r7, #12]
 8003f9c:	2b02      	cmp	r3, #2
 8003f9e:	d108      	bne.n	8003fb2 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	681a      	ldr	r2, [r3, #0]
 8003fa6:	687b      	ldr	r3, [r7, #4]
 8003fa8:	681b      	ldr	r3, [r3, #0]
 8003faa:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8003fae:	601a      	str	r2, [r3, #0]
 8003fb0:	e00a      	b.n	8003fc8 <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8003fb2:	68fb      	ldr	r3, [r7, #12]
 8003fb4:	2b10      	cmp	r3, #16
 8003fb6:	d007      	beq.n	8003fc8 <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	681a      	ldr	r2, [r3, #0]
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	681b      	ldr	r3, [r3, #0]
 8003fc2:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003fc6:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	691a      	ldr	r2, [r3, #16]
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fd2:	b2d2      	uxtb	r2, r2
 8003fd4:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003fd6:	687b      	ldr	r3, [r7, #4]
 8003fd8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fda:	1c5a      	adds	r2, r3, #1
 8003fdc:	687b      	ldr	r3, [r7, #4]
 8003fde:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fe4:	b29b      	uxth	r3, r3
 8003fe6:	3b01      	subs	r3, #1
 8003fe8:	b29a      	uxth	r2, r3
 8003fea:	687b      	ldr	r3, [r7, #4]
 8003fec:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003fee:	687b      	ldr	r3, [r7, #4]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	691a      	ldr	r2, [r3, #16]
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff8:	b2d2      	uxtb	r2, r2
 8003ffa:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8003ffc:	687b      	ldr	r3, [r7, #4]
 8003ffe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004000:	1c5a      	adds	r2, r3, #1
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800400a:	b29b      	uxth	r3, r3
 800400c:	3b01      	subs	r3, #1
 800400e:	b29a      	uxth	r2, r3
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004014:	687b      	ldr	r3, [r7, #4]
 8004016:	681b      	ldr	r3, [r3, #0]
 8004018:	685a      	ldr	r2, [r3, #4]
 800401a:	687b      	ldr	r3, [r7, #4]
 800401c:	681b      	ldr	r3, [r3, #0]
 800401e:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004022:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004024:	687b      	ldr	r3, [r7, #4]
 8004026:	2220      	movs	r2, #32
 8004028:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004032:	b2db      	uxtb	r3, r3
 8004034:	2b40      	cmp	r3, #64	; 0x40
 8004036:	d10a      	bne.n	800404e <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	2200      	movs	r2, #0
 800403c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2200      	movs	r2, #0
 8004044:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004046:	6878      	ldr	r0, [r7, #4]
 8004048:	f7ff fcd7 	bl	80039fa <HAL_I2C_MemRxCpltCallback>
}
 800404c:	e01d      	b.n	800408a <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004056:	687b      	ldr	r3, [r7, #4]
 8004058:	2212      	movs	r2, #18
 800405a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800405c:	6878      	ldr	r0, [r7, #4]
 800405e:	f7ff fc8c 	bl	800397a <HAL_I2C_MasterRxCpltCallback>
}
 8004062:	e012      	b.n	800408a <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	681b      	ldr	r3, [r3, #0]
 8004068:	691a      	ldr	r2, [r3, #16]
 800406a:	687b      	ldr	r3, [r7, #4]
 800406c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800406e:	b2d2      	uxtb	r2, r2
 8004070:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004076:	1c5a      	adds	r2, r3, #1
 8004078:	687b      	ldr	r3, [r7, #4]
 800407a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004080:	b29b      	uxth	r3, r3
 8004082:	3b01      	subs	r3, #1
 8004084:	b29a      	uxth	r2, r3
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800408a:	bf00      	nop
 800408c:	3710      	adds	r7, #16
 800408e:	46bd      	mov	sp, r7
 8004090:	bd80      	pop	{r7, pc}

08004092 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004092:	b480      	push	{r7}
 8004094:	b083      	sub	sp, #12
 8004096:	af00      	add	r7, sp, #0
 8004098:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80040a0:	b2db      	uxtb	r3, r3
 80040a2:	2b40      	cmp	r3, #64	; 0x40
 80040a4:	d117      	bne.n	80040d6 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80040a6:	687b      	ldr	r3, [r7, #4]
 80040a8:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80040aa:	2b00      	cmp	r3, #0
 80040ac:	d109      	bne.n	80040c2 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040b2:	b2db      	uxtb	r3, r3
 80040b4:	461a      	mov	r2, r3
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	681b      	ldr	r3, [r3, #0]
 80040ba:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040be:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80040c0:	e067      	b.n	8004192 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80040c2:	687b      	ldr	r3, [r7, #4]
 80040c4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040c6:	b2db      	uxtb	r3, r3
 80040c8:	f043 0301 	orr.w	r3, r3, #1
 80040cc:	b2da      	uxtb	r2, r3
 80040ce:	687b      	ldr	r3, [r7, #4]
 80040d0:	681b      	ldr	r3, [r3, #0]
 80040d2:	611a      	str	r2, [r3, #16]
}
 80040d4:	e05d      	b.n	8004192 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80040d6:	687b      	ldr	r3, [r7, #4]
 80040d8:	691b      	ldr	r3, [r3, #16]
 80040da:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80040de:	d133      	bne.n	8004148 <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80040e6:	b2db      	uxtb	r3, r3
 80040e8:	2b21      	cmp	r3, #33	; 0x21
 80040ea:	d109      	bne.n	8004100 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80040ec:	687b      	ldr	r3, [r7, #4]
 80040ee:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80040f0:	b2db      	uxtb	r3, r3
 80040f2:	461a      	mov	r2, r3
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	681b      	ldr	r3, [r3, #0]
 80040f8:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80040fc:	611a      	str	r2, [r3, #16]
 80040fe:	e008      	b.n	8004112 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004104:	b2db      	uxtb	r3, r3
 8004106:	f043 0301 	orr.w	r3, r3, #1
 800410a:	b2da      	uxtb	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	681b      	ldr	r3, [r3, #0]
 8004110:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004116:	2b00      	cmp	r3, #0
 8004118:	d004      	beq.n	8004124 <I2C_Master_SB+0x92>
 800411a:	687b      	ldr	r3, [r7, #4]
 800411c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800411e:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004120:	2b00      	cmp	r3, #0
 8004122:	d108      	bne.n	8004136 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004124:	687b      	ldr	r3, [r7, #4]
 8004126:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004128:	2b00      	cmp	r3, #0
 800412a:	d032      	beq.n	8004192 <I2C_Master_SB+0x100>
 800412c:	687b      	ldr	r3, [r7, #4]
 800412e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004130:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004132:	2b00      	cmp	r3, #0
 8004134:	d02d      	beq.n	8004192 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	681b      	ldr	r3, [r3, #0]
 800413a:	685a      	ldr	r2, [r3, #4]
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004144:	605a      	str	r2, [r3, #4]
}
 8004146:	e024      	b.n	8004192 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004148:	687b      	ldr	r3, [r7, #4]
 800414a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800414c:	2b00      	cmp	r3, #0
 800414e:	d10e      	bne.n	800416e <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004154:	b29b      	uxth	r3, r3
 8004156:	11db      	asrs	r3, r3, #7
 8004158:	b2db      	uxtb	r3, r3
 800415a:	f003 0306 	and.w	r3, r3, #6
 800415e:	b2db      	uxtb	r3, r3
 8004160:	f063 030f 	orn	r3, r3, #15
 8004164:	b2da      	uxtb	r2, r3
 8004166:	687b      	ldr	r3, [r7, #4]
 8004168:	681b      	ldr	r3, [r3, #0]
 800416a:	611a      	str	r2, [r3, #16]
}
 800416c:	e011      	b.n	8004192 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004172:	2b01      	cmp	r3, #1
 8004174:	d10d      	bne.n	8004192 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004176:	687b      	ldr	r3, [r7, #4]
 8004178:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800417a:	b29b      	uxth	r3, r3
 800417c:	11db      	asrs	r3, r3, #7
 800417e:	b2db      	uxtb	r3, r3
 8004180:	f003 0306 	and.w	r3, r3, #6
 8004184:	b2db      	uxtb	r3, r3
 8004186:	f063 030e 	orn	r3, r3, #14
 800418a:	b2da      	uxtb	r2, r3
 800418c:	687b      	ldr	r3, [r7, #4]
 800418e:	681b      	ldr	r3, [r3, #0]
 8004190:	611a      	str	r2, [r3, #16]
}
 8004192:	bf00      	nop
 8004194:	370c      	adds	r7, #12
 8004196:	46bd      	mov	sp, r7
 8004198:	f85d 7b04 	ldr.w	r7, [sp], #4
 800419c:	4770      	bx	lr

0800419e <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 800419e:	b480      	push	{r7}
 80041a0:	b083      	sub	sp, #12
 80041a2:	af00      	add	r7, sp, #0
 80041a4:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80041a6:	687b      	ldr	r3, [r7, #4]
 80041a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80041aa:	b2da      	uxtb	r2, r3
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	611a      	str	r2, [r3, #16]

  if ((hi2c->hdmatx != NULL) || (hi2c->hdmarx != NULL))
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d103      	bne.n	80041c2 <I2C_Master_ADD10+0x24>
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041be:	2b00      	cmp	r3, #0
 80041c0:	d011      	beq.n	80041e6 <I2C_Master_ADD10+0x48>
  {
    if ((hi2c->hdmatx->XferCpltCallback != NULL) || (hi2c->hdmarx->XferCpltCallback != NULL))
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80041c6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d104      	bne.n	80041d6 <I2C_Master_ADD10+0x38>
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80041d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80041d2:	2b00      	cmp	r3, #0
 80041d4:	d007      	beq.n	80041e6 <I2C_Master_ADD10+0x48>
    {
      /* Enable DMA Request */
      SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	685a      	ldr	r2, [r3, #4]
 80041dc:	687b      	ldr	r3, [r7, #4]
 80041de:	681b      	ldr	r3, [r3, #0]
 80041e0:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80041e4:	605a      	str	r2, [r3, #4]
    }
  }
}
 80041e6:	bf00      	nop
 80041e8:	370c      	adds	r7, #12
 80041ea:	46bd      	mov	sp, r7
 80041ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041f0:	4770      	bx	lr

080041f2 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 80041f2:	b480      	push	{r7}
 80041f4:	b091      	sub	sp, #68	; 0x44
 80041f6:	af00      	add	r7, sp, #0
 80041f8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80041fa:	687b      	ldr	r3, [r7, #4]
 80041fc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004200:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004208:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800420e:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b22      	cmp	r3, #34	; 0x22
 800421a:	f040 8169 	bne.w	80044f0 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004222:	2b00      	cmp	r3, #0
 8004224:	d10f      	bne.n	8004246 <I2C_Master_ADDR+0x54>
 8004226:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 800422a:	2b40      	cmp	r3, #64	; 0x40
 800422c:	d10b      	bne.n	8004246 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800422e:	2300      	movs	r3, #0
 8004230:	633b      	str	r3, [r7, #48]	; 0x30
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	695b      	ldr	r3, [r3, #20]
 8004238:	633b      	str	r3, [r7, #48]	; 0x30
 800423a:	687b      	ldr	r3, [r7, #4]
 800423c:	681b      	ldr	r3, [r3, #0]
 800423e:	699b      	ldr	r3, [r3, #24]
 8004240:	633b      	str	r3, [r7, #48]	; 0x30
 8004242:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8004244:	e160      	b.n	8004508 <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800424a:	2b00      	cmp	r3, #0
 800424c:	d11d      	bne.n	800428a <I2C_Master_ADDR+0x98>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	691b      	ldr	r3, [r3, #16]
 8004252:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8004256:	d118      	bne.n	800428a <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004258:	2300      	movs	r3, #0
 800425a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	695b      	ldr	r3, [r3, #20]
 8004262:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004264:	687b      	ldr	r3, [r7, #4]
 8004266:	681b      	ldr	r3, [r3, #0]
 8004268:	699b      	ldr	r3, [r3, #24]
 800426a:	62fb      	str	r3, [r7, #44]	; 0x2c
 800426c:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800427c:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004282:	1c5a      	adds	r2, r3, #1
 8004284:	687b      	ldr	r3, [r7, #4]
 8004286:	651a      	str	r2, [r3, #80]	; 0x50
 8004288:	e13e      	b.n	8004508 <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800428e:	b29b      	uxth	r3, r3
 8004290:	2b00      	cmp	r3, #0
 8004292:	d113      	bne.n	80042bc <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004294:	2300      	movs	r3, #0
 8004296:	62bb      	str	r3, [r7, #40]	; 0x28
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	695b      	ldr	r3, [r3, #20]
 800429e:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	681b      	ldr	r3, [r3, #0]
 80042a4:	699b      	ldr	r3, [r3, #24]
 80042a6:	62bb      	str	r3, [r7, #40]	; 0x28
 80042a8:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80042aa:	687b      	ldr	r3, [r7, #4]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	681a      	ldr	r2, [r3, #0]
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80042b8:	601a      	str	r2, [r3, #0]
 80042ba:	e115      	b.n	80044e8 <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042c0:	b29b      	uxth	r3, r3
 80042c2:	2b01      	cmp	r3, #1
 80042c4:	f040 808a 	bne.w	80043dc <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80042c8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80042ca:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80042ce:	d137      	bne.n	8004340 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	681b      	ldr	r3, [r3, #0]
 80042d4:	681a      	ldr	r2, [r3, #0]
 80042d6:	687b      	ldr	r3, [r7, #4]
 80042d8:	681b      	ldr	r3, [r3, #0]
 80042da:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042de:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80042e0:	687b      	ldr	r3, [r7, #4]
 80042e2:	681b      	ldr	r3, [r3, #0]
 80042e4:	685b      	ldr	r3, [r3, #4]
 80042e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80042ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80042ee:	d113      	bne.n	8004318 <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80042f0:	687b      	ldr	r3, [r7, #4]
 80042f2:	681b      	ldr	r3, [r3, #0]
 80042f4:	681a      	ldr	r2, [r3, #0]
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80042fe:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004300:	2300      	movs	r3, #0
 8004302:	627b      	str	r3, [r7, #36]	; 0x24
 8004304:	687b      	ldr	r3, [r7, #4]
 8004306:	681b      	ldr	r3, [r3, #0]
 8004308:	695b      	ldr	r3, [r3, #20]
 800430a:	627b      	str	r3, [r7, #36]	; 0x24
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	627b      	str	r3, [r7, #36]	; 0x24
 8004314:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004316:	e0e7      	b.n	80044e8 <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004318:	2300      	movs	r3, #0
 800431a:	623b      	str	r3, [r7, #32]
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	681b      	ldr	r3, [r3, #0]
 8004320:	695b      	ldr	r3, [r3, #20]
 8004322:	623b      	str	r3, [r7, #32]
 8004324:	687b      	ldr	r3, [r7, #4]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	699b      	ldr	r3, [r3, #24]
 800432a:	623b      	str	r3, [r7, #32]
 800432c:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800432e:	687b      	ldr	r3, [r7, #4]
 8004330:	681b      	ldr	r3, [r3, #0]
 8004332:	681a      	ldr	r2, [r3, #0]
 8004334:	687b      	ldr	r3, [r7, #4]
 8004336:	681b      	ldr	r3, [r3, #0]
 8004338:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800433c:	601a      	str	r2, [r3, #0]
 800433e:	e0d3      	b.n	80044e8 <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8004340:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004342:	2b08      	cmp	r3, #8
 8004344:	d02e      	beq.n	80043a4 <I2C_Master_ADDR+0x1b2>
 8004346:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004348:	2b20      	cmp	r3, #32
 800434a:	d02b      	beq.n	80043a4 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 800434c:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 800434e:	2b12      	cmp	r3, #18
 8004350:	d102      	bne.n	8004358 <I2C_Master_ADDR+0x166>
 8004352:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004354:	2b01      	cmp	r3, #1
 8004356:	d125      	bne.n	80043a4 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8004358:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800435a:	2b04      	cmp	r3, #4
 800435c:	d00e      	beq.n	800437c <I2C_Master_ADDR+0x18a>
 800435e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004360:	2b02      	cmp	r3, #2
 8004362:	d00b      	beq.n	800437c <I2C_Master_ADDR+0x18a>
 8004364:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004366:	2b10      	cmp	r3, #16
 8004368:	d008      	beq.n	800437c <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681a      	ldr	r2, [r3, #0]
 8004370:	687b      	ldr	r3, [r7, #4]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004378:	601a      	str	r2, [r3, #0]
 800437a:	e007      	b.n	800438c <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681a      	ldr	r2, [r3, #0]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800438a:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800438c:	2300      	movs	r3, #0
 800438e:	61fb      	str	r3, [r7, #28]
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	681b      	ldr	r3, [r3, #0]
 8004394:	695b      	ldr	r3, [r3, #20]
 8004396:	61fb      	str	r3, [r7, #28]
 8004398:	687b      	ldr	r3, [r7, #4]
 800439a:	681b      	ldr	r3, [r3, #0]
 800439c:	699b      	ldr	r3, [r3, #24]
 800439e:	61fb      	str	r3, [r7, #28]
 80043a0:	69fb      	ldr	r3, [r7, #28]
 80043a2:	e0a1      	b.n	80044e8 <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	681b      	ldr	r3, [r3, #0]
 80043a8:	681a      	ldr	r2, [r3, #0]
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	681b      	ldr	r3, [r3, #0]
 80043ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80043b2:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043b4:	2300      	movs	r3, #0
 80043b6:	61bb      	str	r3, [r7, #24]
 80043b8:	687b      	ldr	r3, [r7, #4]
 80043ba:	681b      	ldr	r3, [r3, #0]
 80043bc:	695b      	ldr	r3, [r3, #20]
 80043be:	61bb      	str	r3, [r7, #24]
 80043c0:	687b      	ldr	r3, [r7, #4]
 80043c2:	681b      	ldr	r3, [r3, #0]
 80043c4:	699b      	ldr	r3, [r3, #24]
 80043c6:	61bb      	str	r3, [r7, #24]
 80043c8:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	681b      	ldr	r3, [r3, #0]
 80043ce:	681a      	ldr	r2, [r3, #0]
 80043d0:	687b      	ldr	r3, [r7, #4]
 80043d2:	681b      	ldr	r3, [r3, #0]
 80043d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80043d8:	601a      	str	r2, [r3, #0]
 80043da:	e085      	b.n	80044e8 <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80043e0:	b29b      	uxth	r3, r3
 80043e2:	2b02      	cmp	r3, #2
 80043e4:	d14d      	bne.n	8004482 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80043e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043e8:	2b04      	cmp	r3, #4
 80043ea:	d016      	beq.n	800441a <I2C_Master_ADDR+0x228>
 80043ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043ee:	2b02      	cmp	r3, #2
 80043f0:	d013      	beq.n	800441a <I2C_Master_ADDR+0x228>
 80043f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80043f4:	2b10      	cmp	r3, #16
 80043f6:	d010      	beq.n	800441a <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	681b      	ldr	r3, [r3, #0]
 80043fc:	681a      	ldr	r2, [r3, #0]
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	681b      	ldr	r3, [r3, #0]
 8004402:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004406:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004408:	687b      	ldr	r3, [r7, #4]
 800440a:	681b      	ldr	r3, [r3, #0]
 800440c:	681a      	ldr	r2, [r3, #0]
 800440e:	687b      	ldr	r3, [r7, #4]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004416:	601a      	str	r2, [r3, #0]
 8004418:	e007      	b.n	800442a <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	681a      	ldr	r2, [r3, #0]
 8004420:	687b      	ldr	r3, [r7, #4]
 8004422:	681b      	ldr	r3, [r3, #0]
 8004424:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004428:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	681b      	ldr	r3, [r3, #0]
 800442e:	685b      	ldr	r3, [r3, #4]
 8004430:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004434:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004438:	d117      	bne.n	800446a <I2C_Master_ADDR+0x278>
 800443a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800443c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004440:	d00b      	beq.n	800445a <I2C_Master_ADDR+0x268>
 8004442:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004444:	2b01      	cmp	r3, #1
 8004446:	d008      	beq.n	800445a <I2C_Master_ADDR+0x268>
 8004448:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800444a:	2b08      	cmp	r3, #8
 800444c:	d005      	beq.n	800445a <I2C_Master_ADDR+0x268>
 800444e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004450:	2b10      	cmp	r3, #16
 8004452:	d002      	beq.n	800445a <I2C_Master_ADDR+0x268>
 8004454:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004456:	2b20      	cmp	r3, #32
 8004458:	d107      	bne.n	800446a <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 800445a:	687b      	ldr	r3, [r7, #4]
 800445c:	681b      	ldr	r3, [r3, #0]
 800445e:	685a      	ldr	r2, [r3, #4]
 8004460:	687b      	ldr	r3, [r7, #4]
 8004462:	681b      	ldr	r3, [r3, #0]
 8004464:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004468:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800446a:	2300      	movs	r3, #0
 800446c:	617b      	str	r3, [r7, #20]
 800446e:	687b      	ldr	r3, [r7, #4]
 8004470:	681b      	ldr	r3, [r3, #0]
 8004472:	695b      	ldr	r3, [r3, #20]
 8004474:	617b      	str	r3, [r7, #20]
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	699b      	ldr	r3, [r3, #24]
 800447c:	617b      	str	r3, [r7, #20]
 800447e:	697b      	ldr	r3, [r7, #20]
 8004480:	e032      	b.n	80044e8 <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004482:	687b      	ldr	r3, [r7, #4]
 8004484:	681b      	ldr	r3, [r3, #0]
 8004486:	681a      	ldr	r2, [r3, #0]
 8004488:	687b      	ldr	r3, [r7, #4]
 800448a:	681b      	ldr	r3, [r3, #0]
 800448c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004490:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a0:	d117      	bne.n	80044d2 <I2C_Master_ADDR+0x2e0>
 80044a2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044a4:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80044a8:	d00b      	beq.n	80044c2 <I2C_Master_ADDR+0x2d0>
 80044aa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ac:	2b01      	cmp	r3, #1
 80044ae:	d008      	beq.n	80044c2 <I2C_Master_ADDR+0x2d0>
 80044b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b2:	2b08      	cmp	r3, #8
 80044b4:	d005      	beq.n	80044c2 <I2C_Master_ADDR+0x2d0>
 80044b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044b8:	2b10      	cmp	r3, #16
 80044ba:	d002      	beq.n	80044c2 <I2C_Master_ADDR+0x2d0>
 80044bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044be:	2b20      	cmp	r3, #32
 80044c0:	d107      	bne.n	80044d2 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	685a      	ldr	r2, [r3, #4]
 80044c8:	687b      	ldr	r3, [r7, #4]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80044d0:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044d2:	2300      	movs	r3, #0
 80044d4:	613b      	str	r3, [r7, #16]
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	681b      	ldr	r3, [r3, #0]
 80044da:	695b      	ldr	r3, [r3, #20]
 80044dc:	613b      	str	r3, [r7, #16]
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	699b      	ldr	r3, [r3, #24]
 80044e4:	613b      	str	r3, [r7, #16]
 80044e6:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80044e8:	687b      	ldr	r3, [r7, #4]
 80044ea:	2200      	movs	r2, #0
 80044ec:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80044ee:	e00b      	b.n	8004508 <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044f0:	2300      	movs	r3, #0
 80044f2:	60fb      	str	r3, [r7, #12]
 80044f4:	687b      	ldr	r3, [r7, #4]
 80044f6:	681b      	ldr	r3, [r3, #0]
 80044f8:	695b      	ldr	r3, [r3, #20]
 80044fa:	60fb      	str	r3, [r7, #12]
 80044fc:	687b      	ldr	r3, [r7, #4]
 80044fe:	681b      	ldr	r3, [r3, #0]
 8004500:	699b      	ldr	r3, [r3, #24]
 8004502:	60fb      	str	r3, [r7, #12]
 8004504:	68fb      	ldr	r3, [r7, #12]
}
 8004506:	e7ff      	b.n	8004508 <I2C_Master_ADDR+0x316>
 8004508:	bf00      	nop
 800450a:	3744      	adds	r7, #68	; 0x44
 800450c:	46bd      	mov	sp, r7
 800450e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004512:	4770      	bx	lr

08004514 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8004514:	b580      	push	{r7, lr}
 8004516:	b084      	sub	sp, #16
 8004518:	af00      	add	r7, sp, #0
 800451a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800451c:	687b      	ldr	r3, [r7, #4]
 800451e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004522:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004528:	b29b      	uxth	r3, r3
 800452a:	2b00      	cmp	r3, #0
 800452c:	d02b      	beq.n	8004586 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 800452e:	687b      	ldr	r3, [r7, #4]
 8004530:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004532:	781a      	ldrb	r2, [r3, #0]
 8004534:	687b      	ldr	r3, [r7, #4]
 8004536:	681b      	ldr	r3, [r3, #0]
 8004538:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800453e:	1c5a      	adds	r2, r3, #1
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004544:	687b      	ldr	r3, [r7, #4]
 8004546:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004548:	b29b      	uxth	r3, r3
 800454a:	3b01      	subs	r3, #1
 800454c:	b29a      	uxth	r2, r3
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004552:	687b      	ldr	r3, [r7, #4]
 8004554:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004556:	b29b      	uxth	r3, r3
 8004558:	2b00      	cmp	r3, #0
 800455a:	d114      	bne.n	8004586 <I2C_SlaveTransmit_TXE+0x72>
 800455c:	7bfb      	ldrb	r3, [r7, #15]
 800455e:	2b29      	cmp	r3, #41	; 0x29
 8004560:	d111      	bne.n	8004586 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004562:	687b      	ldr	r3, [r7, #4]
 8004564:	681b      	ldr	r3, [r3, #0]
 8004566:	685a      	ldr	r2, [r3, #4]
 8004568:	687b      	ldr	r3, [r7, #4]
 800456a:	681b      	ldr	r3, [r3, #0]
 800456c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004570:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	2221      	movs	r2, #33	; 0x21
 8004576:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004578:	687b      	ldr	r3, [r7, #4]
 800457a:	2228      	movs	r2, #40	; 0x28
 800457c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004580:	6878      	ldr	r0, [r7, #4]
 8004582:	f7ff fa04 	bl	800398e <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004586:	bf00      	nop
 8004588:	3710      	adds	r7, #16
 800458a:	46bd      	mov	sp, r7
 800458c:	bd80      	pop	{r7, pc}

0800458e <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 800458e:	b480      	push	{r7}
 8004590:	b083      	sub	sp, #12
 8004592:	af00      	add	r7, sp, #0
 8004594:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004596:	687b      	ldr	r3, [r7, #4]
 8004598:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800459a:	b29b      	uxth	r3, r3
 800459c:	2b00      	cmp	r3, #0
 800459e:	d011      	beq.n	80045c4 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80045a0:	687b      	ldr	r3, [r7, #4]
 80045a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045a4:	781a      	ldrb	r2, [r3, #0]
 80045a6:	687b      	ldr	r3, [r7, #4]
 80045a8:	681b      	ldr	r3, [r3, #0]
 80045aa:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045ac:	687b      	ldr	r3, [r7, #4]
 80045ae:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045b0:	1c5a      	adds	r2, r3, #1
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80045b6:	687b      	ldr	r3, [r7, #4]
 80045b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045ba:	b29b      	uxth	r3, r3
 80045bc:	3b01      	subs	r3, #1
 80045be:	b29a      	uxth	r2, r3
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80045c4:	bf00      	nop
 80045c6:	370c      	adds	r7, #12
 80045c8:	46bd      	mov	sp, r7
 80045ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045ce:	4770      	bx	lr

080045d0 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80045d0:	b580      	push	{r7, lr}
 80045d2:	b084      	sub	sp, #16
 80045d4:	af00      	add	r7, sp, #0
 80045d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80045de:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80045e0:	687b      	ldr	r3, [r7, #4]
 80045e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80045e4:	b29b      	uxth	r3, r3
 80045e6:	2b00      	cmp	r3, #0
 80045e8:	d02c      	beq.n	8004644 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80045ea:	687b      	ldr	r3, [r7, #4]
 80045ec:	681b      	ldr	r3, [r3, #0]
 80045ee:	691a      	ldr	r2, [r3, #16]
 80045f0:	687b      	ldr	r3, [r7, #4]
 80045f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045f4:	b2d2      	uxtb	r2, r2
 80045f6:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80045f8:	687b      	ldr	r3, [r7, #4]
 80045fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80045fc:	1c5a      	adds	r2, r3, #1
 80045fe:	687b      	ldr	r3, [r7, #4]
 8004600:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004602:	687b      	ldr	r3, [r7, #4]
 8004604:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004606:	b29b      	uxth	r3, r3
 8004608:	3b01      	subs	r3, #1
 800460a:	b29a      	uxth	r2, r3
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004610:	687b      	ldr	r3, [r7, #4]
 8004612:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004614:	b29b      	uxth	r3, r3
 8004616:	2b00      	cmp	r3, #0
 8004618:	d114      	bne.n	8004644 <I2C_SlaveReceive_RXNE+0x74>
 800461a:	7bfb      	ldrb	r3, [r7, #15]
 800461c:	2b2a      	cmp	r3, #42	; 0x2a
 800461e:	d111      	bne.n	8004644 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004620:	687b      	ldr	r3, [r7, #4]
 8004622:	681b      	ldr	r3, [r3, #0]
 8004624:	685a      	ldr	r2, [r3, #4]
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800462e:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	2222      	movs	r2, #34	; 0x22
 8004634:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004636:	687b      	ldr	r3, [r7, #4]
 8004638:	2228      	movs	r2, #40	; 0x28
 800463a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800463e:	6878      	ldr	r0, [r7, #4]
 8004640:	f7ff f9af 	bl	80039a2 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8004644:	bf00      	nop
 8004646:	3710      	adds	r7, #16
 8004648:	46bd      	mov	sp, r7
 800464a:	bd80      	pop	{r7, pc}

0800464c <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 800464c:	b480      	push	{r7}
 800464e:	b083      	sub	sp, #12
 8004650:	af00      	add	r7, sp, #0
 8004652:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8004654:	687b      	ldr	r3, [r7, #4]
 8004656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004658:	b29b      	uxth	r3, r3
 800465a:	2b00      	cmp	r3, #0
 800465c:	d012      	beq.n	8004684 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800465e:	687b      	ldr	r3, [r7, #4]
 8004660:	681b      	ldr	r3, [r3, #0]
 8004662:	691a      	ldr	r2, [r3, #16]
 8004664:	687b      	ldr	r3, [r7, #4]
 8004666:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004668:	b2d2      	uxtb	r2, r2
 800466a:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800466c:	687b      	ldr	r3, [r7, #4]
 800466e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004670:	1c5a      	adds	r2, r3, #1
 8004672:	687b      	ldr	r3, [r7, #4]
 8004674:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800467a:	b29b      	uxth	r3, r3
 800467c:	3b01      	subs	r3, #1
 800467e:	b29a      	uxth	r2, r3
 8004680:	687b      	ldr	r3, [r7, #4]
 8004682:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8004684:	bf00      	nop
 8004686:	370c      	adds	r7, #12
 8004688:	46bd      	mov	sp, r7
 800468a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800468e:	4770      	bx	lr

08004690 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004690:	b580      	push	{r7, lr}
 8004692:	b084      	sub	sp, #16
 8004694:	af00      	add	r7, sp, #0
 8004696:	6078      	str	r0, [r7, #4]
 8004698:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 800469a:	2300      	movs	r3, #0
 800469c:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800469e:	687b      	ldr	r3, [r7, #4]
 80046a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046a4:	b2db      	uxtb	r3, r3
 80046a6:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80046aa:	2b28      	cmp	r3, #40	; 0x28
 80046ac:	d127      	bne.n	80046fe <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	681b      	ldr	r3, [r3, #0]
 80046b2:	685a      	ldr	r2, [r3, #4]
 80046b4:	687b      	ldr	r3, [r7, #4]
 80046b6:	681b      	ldr	r3, [r3, #0]
 80046b8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80046bc:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80046be:	683b      	ldr	r3, [r7, #0]
 80046c0:	089b      	lsrs	r3, r3, #2
 80046c2:	f003 0301 	and.w	r3, r3, #1
 80046c6:	2b00      	cmp	r3, #0
 80046c8:	d101      	bne.n	80046ce <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80046ca:	2301      	movs	r3, #1
 80046cc:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80046ce:	683b      	ldr	r3, [r7, #0]
 80046d0:	09db      	lsrs	r3, r3, #7
 80046d2:	f003 0301 	and.w	r3, r3, #1
 80046d6:	2b00      	cmp	r3, #0
 80046d8:	d103      	bne.n	80046e2 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	68db      	ldr	r3, [r3, #12]
 80046de:	81bb      	strh	r3, [r7, #12]
 80046e0:	e002      	b.n	80046e8 <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80046e2:	687b      	ldr	r3, [r7, #4]
 80046e4:	699b      	ldr	r3, [r3, #24]
 80046e6:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80046e8:	687b      	ldr	r3, [r7, #4]
 80046ea:	2200      	movs	r2, #0
 80046ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80046f0:	89ba      	ldrh	r2, [r7, #12]
 80046f2:	7bfb      	ldrb	r3, [r7, #15]
 80046f4:	4619      	mov	r1, r3
 80046f6:	6878      	ldr	r0, [r7, #4]
 80046f8:	f7ff f95d 	bl	80039b6 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80046fc:	e008      	b.n	8004710 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80046fe:	687b      	ldr	r3, [r7, #4]
 8004700:	681b      	ldr	r3, [r3, #0]
 8004702:	f06f 0202 	mvn.w	r2, #2
 8004706:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	2200      	movs	r2, #0
 800470c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8004710:	bf00      	nop
 8004712:	3710      	adds	r7, #16
 8004714:	46bd      	mov	sp, r7
 8004716:	bd80      	pop	{r7, pc}

08004718 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8004718:	b580      	push	{r7, lr}
 800471a:	b084      	sub	sp, #16
 800471c:	af00      	add	r7, sp, #0
 800471e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004726:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	681b      	ldr	r3, [r3, #0]
 800472c:	685a      	ldr	r2, [r3, #4]
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	681b      	ldr	r3, [r3, #0]
 8004732:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004736:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8004738:	2300      	movs	r3, #0
 800473a:	60bb      	str	r3, [r7, #8]
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	681b      	ldr	r3, [r3, #0]
 8004740:	695b      	ldr	r3, [r3, #20]
 8004742:	60bb      	str	r3, [r7, #8]
 8004744:	687b      	ldr	r3, [r7, #4]
 8004746:	681b      	ldr	r3, [r3, #0]
 8004748:	681a      	ldr	r2, [r3, #0]
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	681b      	ldr	r3, [r3, #0]
 800474e:	f042 0201 	orr.w	r2, r2, #1
 8004752:	601a      	str	r2, [r3, #0]
 8004754:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004756:	687b      	ldr	r3, [r7, #4]
 8004758:	681b      	ldr	r3, [r3, #0]
 800475a:	681a      	ldr	r2, [r3, #0]
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	681b      	ldr	r3, [r3, #0]
 8004760:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004764:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	681b      	ldr	r3, [r3, #0]
 800476a:	685b      	ldr	r3, [r3, #4]
 800476c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004770:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004774:	d172      	bne.n	800485c <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8004776:	7bfb      	ldrb	r3, [r7, #15]
 8004778:	2b22      	cmp	r3, #34	; 0x22
 800477a:	d002      	beq.n	8004782 <I2C_Slave_STOPF+0x6a>
 800477c:	7bfb      	ldrb	r3, [r7, #15]
 800477e:	2b2a      	cmp	r3, #42	; 0x2a
 8004780:	d135      	bne.n	80047ee <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8004782:	687b      	ldr	r3, [r7, #4]
 8004784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004786:	681b      	ldr	r3, [r3, #0]
 8004788:	685b      	ldr	r3, [r3, #4]
 800478a:	b29a      	uxth	r2, r3
 800478c:	687b      	ldr	r3, [r7, #4]
 800478e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004794:	b29b      	uxth	r3, r3
 8004796:	2b00      	cmp	r3, #0
 8004798:	d005      	beq.n	80047a6 <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800479a:	687b      	ldr	r3, [r7, #4]
 800479c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800479e:	f043 0204 	orr.w	r2, r3, #4
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80047a6:	687b      	ldr	r3, [r7, #4]
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	685a      	ldr	r2, [r3, #4]
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80047b4:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ba:	4618      	mov	r0, r3
 80047bc:	f7fe fbb7 	bl	8002f2e <HAL_DMA_GetState>
 80047c0:	4603      	mov	r3, r0
 80047c2:	2b01      	cmp	r3, #1
 80047c4:	d049      	beq.n	800485a <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047ca:	4a69      	ldr	r2, [pc, #420]	; (8004970 <I2C_Slave_STOPF+0x258>)
 80047cc:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047d2:	4618      	mov	r0, r3
 80047d4:	f7fe fb89 	bl	8002eea <HAL_DMA_Abort_IT>
 80047d8:	4603      	mov	r3, r0
 80047da:	2b00      	cmp	r3, #0
 80047dc:	d03d      	beq.n	800485a <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80047e2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80047e4:	687a      	ldr	r2, [r7, #4]
 80047e6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80047e8:	4610      	mov	r0, r2
 80047ea:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80047ec:	e035      	b.n	800485a <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80047ee:	687b      	ldr	r3, [r7, #4]
 80047f0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80047f2:	681b      	ldr	r3, [r3, #0]
 80047f4:	685b      	ldr	r3, [r3, #4]
 80047f6:	b29a      	uxth	r2, r3
 80047f8:	687b      	ldr	r3, [r7, #4]
 80047fa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80047fc:	687b      	ldr	r3, [r7, #4]
 80047fe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004800:	b29b      	uxth	r3, r3
 8004802:	2b00      	cmp	r3, #0
 8004804:	d005      	beq.n	8004812 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004806:	687b      	ldr	r3, [r7, #4]
 8004808:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800480a:	f043 0204 	orr.w	r2, r3, #4
 800480e:	687b      	ldr	r3, [r7, #4]
 8004810:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	681b      	ldr	r3, [r3, #0]
 8004816:	685a      	ldr	r2, [r3, #4]
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	681b      	ldr	r3, [r3, #0]
 800481c:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004820:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8004822:	687b      	ldr	r3, [r7, #4]
 8004824:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004826:	4618      	mov	r0, r3
 8004828:	f7fe fb81 	bl	8002f2e <HAL_DMA_GetState>
 800482c:	4603      	mov	r3, r0
 800482e:	2b01      	cmp	r3, #1
 8004830:	d014      	beq.n	800485c <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004832:	687b      	ldr	r3, [r7, #4]
 8004834:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004836:	4a4e      	ldr	r2, [pc, #312]	; (8004970 <I2C_Slave_STOPF+0x258>)
 8004838:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800483a:	687b      	ldr	r3, [r7, #4]
 800483c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800483e:	4618      	mov	r0, r3
 8004840:	f7fe fb53 	bl	8002eea <HAL_DMA_Abort_IT>
 8004844:	4603      	mov	r3, r0
 8004846:	2b00      	cmp	r3, #0
 8004848:	d008      	beq.n	800485c <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800484a:	687b      	ldr	r3, [r7, #4]
 800484c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800484e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004850:	687a      	ldr	r2, [r7, #4]
 8004852:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004854:	4610      	mov	r0, r2
 8004856:	4798      	blx	r3
 8004858:	e000      	b.n	800485c <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800485a:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004860:	b29b      	uxth	r3, r3
 8004862:	2b00      	cmp	r3, #0
 8004864:	d03e      	beq.n	80048e4 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	681b      	ldr	r3, [r3, #0]
 800486a:	695b      	ldr	r3, [r3, #20]
 800486c:	f003 0304 	and.w	r3, r3, #4
 8004870:	2b04      	cmp	r3, #4
 8004872:	d112      	bne.n	800489a <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004874:	687b      	ldr	r3, [r7, #4]
 8004876:	681b      	ldr	r3, [r3, #0]
 8004878:	691a      	ldr	r2, [r3, #16]
 800487a:	687b      	ldr	r3, [r7, #4]
 800487c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800487e:	b2d2      	uxtb	r2, r2
 8004880:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004886:	1c5a      	adds	r2, r3, #1
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004890:	b29b      	uxth	r3, r3
 8004892:	3b01      	subs	r3, #1
 8004894:	b29a      	uxth	r2, r3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	681b      	ldr	r3, [r3, #0]
 800489e:	695b      	ldr	r3, [r3, #20]
 80048a0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80048a4:	2b40      	cmp	r3, #64	; 0x40
 80048a6:	d112      	bne.n	80048ce <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80048a8:	687b      	ldr	r3, [r7, #4]
 80048aa:	681b      	ldr	r3, [r3, #0]
 80048ac:	691a      	ldr	r2, [r3, #16]
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048b2:	b2d2      	uxtb	r2, r2
 80048b4:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80048b6:	687b      	ldr	r3, [r7, #4]
 80048b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80048ba:	1c5a      	adds	r2, r3, #1
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048c4:	b29b      	uxth	r3, r3
 80048c6:	3b01      	subs	r3, #1
 80048c8:	b29a      	uxth	r2, r3
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80048d2:	b29b      	uxth	r3, r3
 80048d4:	2b00      	cmp	r3, #0
 80048d6:	d005      	beq.n	80048e4 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048dc:	f043 0204 	orr.w	r2, r3, #4
 80048e0:	687b      	ldr	r3, [r7, #4]
 80048e2:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80048e8:	2b00      	cmp	r3, #0
 80048ea:	d003      	beq.n	80048f4 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f000 f843 	bl	8004978 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80048f2:	e039      	b.n	8004968 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80048f4:	7bfb      	ldrb	r3, [r7, #15]
 80048f6:	2b2a      	cmp	r3, #42	; 0x2a
 80048f8:	d109      	bne.n	800490e <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80048fa:	687b      	ldr	r3, [r7, #4]
 80048fc:	2200      	movs	r2, #0
 80048fe:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004900:	687b      	ldr	r3, [r7, #4]
 8004902:	2228      	movs	r2, #40	; 0x28
 8004904:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004908:	6878      	ldr	r0, [r7, #4]
 800490a:	f7ff f84a 	bl	80039a2 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004914:	b2db      	uxtb	r3, r3
 8004916:	2b28      	cmp	r3, #40	; 0x28
 8004918:	d111      	bne.n	800493e <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800491a:	687b      	ldr	r3, [r7, #4]
 800491c:	4a15      	ldr	r2, [pc, #84]	; (8004974 <I2C_Slave_STOPF+0x25c>)
 800491e:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	2200      	movs	r2, #0
 8004924:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	2220      	movs	r2, #32
 800492a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800492e:	687b      	ldr	r3, [r7, #4]
 8004930:	2200      	movs	r2, #0
 8004932:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004936:	6878      	ldr	r0, [r7, #4]
 8004938:	f7ff f84b 	bl	80039d2 <HAL_I2C_ListenCpltCallback>
}
 800493c:	e014      	b.n	8004968 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 800493e:	687b      	ldr	r3, [r7, #4]
 8004940:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004942:	2b22      	cmp	r3, #34	; 0x22
 8004944:	d002      	beq.n	800494c <I2C_Slave_STOPF+0x234>
 8004946:	7bfb      	ldrb	r3, [r7, #15]
 8004948:	2b22      	cmp	r3, #34	; 0x22
 800494a:	d10d      	bne.n	8004968 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	2200      	movs	r2, #0
 8004950:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	2220      	movs	r2, #32
 8004956:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	2200      	movs	r2, #0
 800495e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004962:	6878      	ldr	r0, [r7, #4]
 8004964:	f7ff f81d 	bl	80039a2 <HAL_I2C_SlaveRxCpltCallback>
}
 8004968:	bf00      	nop
 800496a:	3710      	adds	r7, #16
 800496c:	46bd      	mov	sp, r7
 800496e:	bd80      	pop	{r7, pc}
 8004970:	08004bdd 	.word	0x08004bdd
 8004974:	ffff0000 	.word	0xffff0000

08004978 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004978:	b580      	push	{r7, lr}
 800497a:	b084      	sub	sp, #16
 800497c:	af00      	add	r7, sp, #0
 800497e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004980:	687b      	ldr	r3, [r7, #4]
 8004982:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004986:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004988:	687b      	ldr	r3, [r7, #4]
 800498a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800498e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004990:	7bbb      	ldrb	r3, [r7, #14]
 8004992:	2b10      	cmp	r3, #16
 8004994:	d002      	beq.n	800499c <I2C_ITError+0x24>
 8004996:	7bbb      	ldrb	r3, [r7, #14]
 8004998:	2b40      	cmp	r3, #64	; 0x40
 800499a:	d10a      	bne.n	80049b2 <I2C_ITError+0x3a>
 800499c:	7bfb      	ldrb	r3, [r7, #15]
 800499e:	2b22      	cmp	r3, #34	; 0x22
 80049a0:	d107      	bne.n	80049b2 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 80049a2:	687b      	ldr	r3, [r7, #4]
 80049a4:	681b      	ldr	r3, [r3, #0]
 80049a6:	681a      	ldr	r2, [r3, #0]
 80049a8:	687b      	ldr	r3, [r7, #4]
 80049aa:	681b      	ldr	r3, [r3, #0]
 80049ac:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049b0:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80049b2:	7bfb      	ldrb	r3, [r7, #15]
 80049b4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80049b8:	2b28      	cmp	r3, #40	; 0x28
 80049ba:	d107      	bne.n	80049cc <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80049bc:	687b      	ldr	r3, [r7, #4]
 80049be:	2200      	movs	r2, #0
 80049c0:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80049c2:	687b      	ldr	r3, [r7, #4]
 80049c4:	2228      	movs	r2, #40	; 0x28
 80049c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80049ca:	e015      	b.n	80049f8 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80049cc:	687b      	ldr	r3, [r7, #4]
 80049ce:	681b      	ldr	r3, [r3, #0]
 80049d0:	685b      	ldr	r3, [r3, #4]
 80049d2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80049d6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80049da:	d00a      	beq.n	80049f2 <I2C_ITError+0x7a>
 80049dc:	7bfb      	ldrb	r3, [r7, #15]
 80049de:	2b60      	cmp	r3, #96	; 0x60
 80049e0:	d007      	beq.n	80049f2 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2220      	movs	r2, #32
 80049e6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	2200      	movs	r2, #0
 80049ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	2200      	movs	r2, #0
 80049f6:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80049f8:	687b      	ldr	r3, [r7, #4]
 80049fa:	681b      	ldr	r3, [r3, #0]
 80049fc:	685b      	ldr	r3, [r3, #4]
 80049fe:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004a02:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004a06:	d162      	bne.n	8004ace <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004a08:	687b      	ldr	r3, [r7, #4]
 8004a0a:	681b      	ldr	r3, [r3, #0]
 8004a0c:	685a      	ldr	r2, [r3, #4]
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004a16:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004a18:	687b      	ldr	r3, [r7, #4]
 8004a1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a1c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004a20:	b2db      	uxtb	r3, r3
 8004a22:	2b01      	cmp	r3, #1
 8004a24:	d020      	beq.n	8004a68 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a2a:	4a6a      	ldr	r2, [pc, #424]	; (8004bd4 <I2C_ITError+0x25c>)
 8004a2c:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a32:	4618      	mov	r0, r3
 8004a34:	f7fe fa59 	bl	8002eea <HAL_DMA_Abort_IT>
 8004a38:	4603      	mov	r3, r0
 8004a3a:	2b00      	cmp	r3, #0
 8004a3c:	f000 8089 	beq.w	8004b52 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004a40:	687b      	ldr	r3, [r7, #4]
 8004a42:	681b      	ldr	r3, [r3, #0]
 8004a44:	681a      	ldr	r2, [r3, #0]
 8004a46:	687b      	ldr	r3, [r7, #4]
 8004a48:	681b      	ldr	r3, [r3, #0]
 8004a4a:	f022 0201 	bic.w	r2, r2, #1
 8004a4e:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	2220      	movs	r2, #32
 8004a54:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004a58:	687b      	ldr	r3, [r7, #4]
 8004a5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004a5c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a5e:	687a      	ldr	r2, [r7, #4]
 8004a60:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004a62:	4610      	mov	r0, r2
 8004a64:	4798      	blx	r3
 8004a66:	e074      	b.n	8004b52 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a6c:	4a59      	ldr	r2, [pc, #356]	; (8004bd4 <I2C_ITError+0x25c>)
 8004a6e:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004a74:	4618      	mov	r0, r3
 8004a76:	f7fe fa38 	bl	8002eea <HAL_DMA_Abort_IT>
 8004a7a:	4603      	mov	r3, r0
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d068      	beq.n	8004b52 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	681b      	ldr	r3, [r3, #0]
 8004a84:	695b      	ldr	r3, [r3, #20]
 8004a86:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a8a:	2b40      	cmp	r3, #64	; 0x40
 8004a8c:	d10b      	bne.n	8004aa6 <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a8e:	687b      	ldr	r3, [r7, #4]
 8004a90:	681b      	ldr	r3, [r3, #0]
 8004a92:	691a      	ldr	r2, [r3, #16]
 8004a94:	687b      	ldr	r3, [r7, #4]
 8004a96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a98:	b2d2      	uxtb	r2, r2
 8004a9a:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004a9c:	687b      	ldr	r3, [r7, #4]
 8004a9e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aa0:	1c5a      	adds	r2, r3, #1
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	681a      	ldr	r2, [r3, #0]
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	681b      	ldr	r3, [r3, #0]
 8004ab0:	f022 0201 	bic.w	r2, r2, #1
 8004ab4:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	2220      	movs	r2, #32
 8004aba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004abe:	687b      	ldr	r3, [r7, #4]
 8004ac0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ac2:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ac4:	687a      	ldr	r2, [r7, #4]
 8004ac6:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004ac8:	4610      	mov	r0, r2
 8004aca:	4798      	blx	r3
 8004acc:	e041      	b.n	8004b52 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ad4:	b2db      	uxtb	r3, r3
 8004ad6:	2b60      	cmp	r3, #96	; 0x60
 8004ad8:	d125      	bne.n	8004b26 <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	2220      	movs	r2, #32
 8004ade:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	2200      	movs	r2, #0
 8004ae6:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	695b      	ldr	r3, [r3, #20]
 8004aee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004af2:	2b40      	cmp	r3, #64	; 0x40
 8004af4:	d10b      	bne.n	8004b0e <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004af6:	687b      	ldr	r3, [r7, #4]
 8004af8:	681b      	ldr	r3, [r3, #0]
 8004afa:	691a      	ldr	r2, [r3, #16]
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b00:	b2d2      	uxtb	r2, r2
 8004b02:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b04:	687b      	ldr	r3, [r7, #4]
 8004b06:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b08:	1c5a      	adds	r2, r3, #1
 8004b0a:	687b      	ldr	r3, [r7, #4]
 8004b0c:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	681b      	ldr	r3, [r3, #0]
 8004b12:	681a      	ldr	r2, [r3, #0]
 8004b14:	687b      	ldr	r3, [r7, #4]
 8004b16:	681b      	ldr	r3, [r3, #0]
 8004b18:	f022 0201 	bic.w	r2, r2, #1
 8004b1c:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004b1e:	6878      	ldr	r0, [r7, #4]
 8004b20:	f7fe ff7f 	bl	8003a22 <HAL_I2C_AbortCpltCallback>
 8004b24:	e015      	b.n	8004b52 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004b26:	687b      	ldr	r3, [r7, #4]
 8004b28:	681b      	ldr	r3, [r3, #0]
 8004b2a:	695b      	ldr	r3, [r3, #20]
 8004b2c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004b30:	2b40      	cmp	r3, #64	; 0x40
 8004b32:	d10b      	bne.n	8004b4c <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	691a      	ldr	r2, [r3, #16]
 8004b3a:	687b      	ldr	r3, [r7, #4]
 8004b3c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b3e:	b2d2      	uxtb	r2, r2
 8004b40:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b46:	1c5a      	adds	r2, r3, #1
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004b4c:	6878      	ldr	r0, [r7, #4]
 8004b4e:	f7fe ff5e 	bl	8003a0e <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004b52:	687b      	ldr	r3, [r7, #4]
 8004b54:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b56:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b58:	68bb      	ldr	r3, [r7, #8]
 8004b5a:	f003 0301 	and.w	r3, r3, #1
 8004b5e:	2b00      	cmp	r3, #0
 8004b60:	d10e      	bne.n	8004b80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b62:	68bb      	ldr	r3, [r7, #8]
 8004b64:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004b68:	2b00      	cmp	r3, #0
 8004b6a:	d109      	bne.n	8004b80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b6c:	68bb      	ldr	r3, [r7, #8]
 8004b6e:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004b72:	2b00      	cmp	r3, #0
 8004b74:	d104      	bne.n	8004b80 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004b76:	68bb      	ldr	r3, [r7, #8]
 8004b78:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004b7c:	2b00      	cmp	r3, #0
 8004b7e:	d007      	beq.n	8004b90 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b80:	687b      	ldr	r3, [r7, #4]
 8004b82:	681b      	ldr	r3, [r3, #0]
 8004b84:	685a      	ldr	r2, [r3, #4]
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b8e:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004b90:	687b      	ldr	r3, [r7, #4]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004b98:	687b      	ldr	r3, [r7, #4]
 8004b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004b9c:	f003 0304 	and.w	r3, r3, #4
 8004ba0:	2b04      	cmp	r3, #4
 8004ba2:	d113      	bne.n	8004bcc <I2C_ITError+0x254>
 8004ba4:	7bfb      	ldrb	r3, [r7, #15]
 8004ba6:	2b28      	cmp	r3, #40	; 0x28
 8004ba8:	d110      	bne.n	8004bcc <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004baa:	687b      	ldr	r3, [r7, #4]
 8004bac:	4a0a      	ldr	r2, [pc, #40]	; (8004bd8 <I2C_ITError+0x260>)
 8004bae:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004bb6:	687b      	ldr	r3, [r7, #4]
 8004bb8:	2220      	movs	r2, #32
 8004bba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	2200      	movs	r2, #0
 8004bc2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004bc6:	6878      	ldr	r0, [r7, #4]
 8004bc8:	f7fe ff03 	bl	80039d2 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004bcc:	bf00      	nop
 8004bce:	3710      	adds	r7, #16
 8004bd0:	46bd      	mov	sp, r7
 8004bd2:	bd80      	pop	{r7, pc}
 8004bd4:	08004bdd 	.word	0x08004bdd
 8004bd8:	ffff0000 	.word	0xffff0000

08004bdc <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004bdc:	b580      	push	{r7, lr}
 8004bde:	b086      	sub	sp, #24
 8004be0:	af00      	add	r7, sp, #0
 8004be2:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004be4:	2300      	movs	r3, #0
 8004be6:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004be8:	687b      	ldr	r3, [r7, #4]
 8004bea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004bec:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004bee:	697b      	ldr	r3, [r7, #20]
 8004bf0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004bf4:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004bf6:	4b4b      	ldr	r3, [pc, #300]	; (8004d24 <I2C_DMAAbort+0x148>)
 8004bf8:	681b      	ldr	r3, [r3, #0]
 8004bfa:	08db      	lsrs	r3, r3, #3
 8004bfc:	4a4a      	ldr	r2, [pc, #296]	; (8004d28 <I2C_DMAAbort+0x14c>)
 8004bfe:	fba2 2303 	umull	r2, r3, r2, r3
 8004c02:	0a1a      	lsrs	r2, r3, #8
 8004c04:	4613      	mov	r3, r2
 8004c06:	009b      	lsls	r3, r3, #2
 8004c08:	4413      	add	r3, r2
 8004c0a:	00da      	lsls	r2, r3, #3
 8004c0c:	1ad3      	subs	r3, r2, r3
 8004c0e:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004c10:	68fb      	ldr	r3, [r7, #12]
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d106      	bne.n	8004c24 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004c16:	697b      	ldr	r3, [r7, #20]
 8004c18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004c1a:	f043 0220 	orr.w	r2, r3, #32
 8004c1e:	697b      	ldr	r3, [r7, #20]
 8004c20:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004c22:	e00a      	b.n	8004c3a <I2C_DMAAbort+0x5e>
    }
    count--;
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	3b01      	subs	r3, #1
 8004c28:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004c2a:	697b      	ldr	r3, [r7, #20]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681b      	ldr	r3, [r3, #0]
 8004c30:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004c34:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004c38:	d0ea      	beq.n	8004c10 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004c3a:	697b      	ldr	r3, [r7, #20]
 8004c3c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c3e:	2b00      	cmp	r3, #0
 8004c40:	d003      	beq.n	8004c4a <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004c42:	697b      	ldr	r3, [r7, #20]
 8004c44:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c46:	2200      	movs	r2, #0
 8004c48:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004c4a:	697b      	ldr	r3, [r7, #20]
 8004c4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c4e:	2b00      	cmp	r3, #0
 8004c50:	d003      	beq.n	8004c5a <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004c52:	697b      	ldr	r3, [r7, #20]
 8004c54:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c56:	2200      	movs	r2, #0
 8004c58:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004c5a:	697b      	ldr	r3, [r7, #20]
 8004c5c:	681b      	ldr	r3, [r3, #0]
 8004c5e:	681a      	ldr	r2, [r3, #0]
 8004c60:	697b      	ldr	r3, [r7, #20]
 8004c62:	681b      	ldr	r3, [r3, #0]
 8004c64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004c68:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004c6a:	697b      	ldr	r3, [r7, #20]
 8004c6c:	2200      	movs	r2, #0
 8004c6e:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004c70:	697b      	ldr	r3, [r7, #20]
 8004c72:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c74:	2b00      	cmp	r3, #0
 8004c76:	d003      	beq.n	8004c80 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004c78:	697b      	ldr	r3, [r7, #20]
 8004c7a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004c80:	697b      	ldr	r3, [r7, #20]
 8004c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c84:	2b00      	cmp	r3, #0
 8004c86:	d003      	beq.n	8004c90 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004c88:	697b      	ldr	r3, [r7, #20]
 8004c8a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004c8c:	2200      	movs	r2, #0
 8004c8e:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004c90:	697b      	ldr	r3, [r7, #20]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	681a      	ldr	r2, [r3, #0]
 8004c96:	697b      	ldr	r3, [r7, #20]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f022 0201 	bic.w	r2, r2, #1
 8004c9e:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004ca0:	697b      	ldr	r3, [r7, #20]
 8004ca2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ca6:	b2db      	uxtb	r3, r3
 8004ca8:	2b60      	cmp	r3, #96	; 0x60
 8004caa:	d10e      	bne.n	8004cca <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004cac:	697b      	ldr	r3, [r7, #20]
 8004cae:	2220      	movs	r2, #32
 8004cb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004cb4:	697b      	ldr	r3, [r7, #20]
 8004cb6:	2200      	movs	r2, #0
 8004cb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004cbc:	697b      	ldr	r3, [r7, #20]
 8004cbe:	2200      	movs	r2, #0
 8004cc0:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004cc2:	6978      	ldr	r0, [r7, #20]
 8004cc4:	f7fe fead 	bl	8003a22 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004cc8:	e027      	b.n	8004d1a <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004cca:	7cfb      	ldrb	r3, [r7, #19]
 8004ccc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004cd0:	2b28      	cmp	r3, #40	; 0x28
 8004cd2:	d117      	bne.n	8004d04 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004cd4:	697b      	ldr	r3, [r7, #20]
 8004cd6:	681b      	ldr	r3, [r3, #0]
 8004cd8:	681a      	ldr	r2, [r3, #0]
 8004cda:	697b      	ldr	r3, [r7, #20]
 8004cdc:	681b      	ldr	r3, [r3, #0]
 8004cde:	f042 0201 	orr.w	r2, r2, #1
 8004ce2:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ce4:	697b      	ldr	r3, [r7, #20]
 8004ce6:	681b      	ldr	r3, [r3, #0]
 8004ce8:	681a      	ldr	r2, [r3, #0]
 8004cea:	697b      	ldr	r3, [r7, #20]
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004cf2:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004cf4:	697b      	ldr	r3, [r7, #20]
 8004cf6:	2200      	movs	r2, #0
 8004cf8:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004cfa:	697b      	ldr	r3, [r7, #20]
 8004cfc:	2228      	movs	r2, #40	; 0x28
 8004cfe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004d02:	e007      	b.n	8004d14 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	2220      	movs	r2, #32
 8004d08:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d0c:	697b      	ldr	r3, [r7, #20]
 8004d0e:	2200      	movs	r2, #0
 8004d10:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004d14:	6978      	ldr	r0, [r7, #20]
 8004d16:	f7fe fe7a 	bl	8003a0e <HAL_I2C_ErrorCallback>
}
 8004d1a:	bf00      	nop
 8004d1c:	3718      	adds	r7, #24
 8004d1e:	46bd      	mov	sp, r7
 8004d20:	bd80      	pop	{r7, pc}
 8004d22:	bf00      	nop
 8004d24:	20000028 	.word	0x20000028
 8004d28:	14f8b589 	.word	0x14f8b589

08004d2c <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004d2c:	b480      	push	{r7}
 8004d2e:	b085      	sub	sp, #20
 8004d30:	af00      	add	r7, sp, #0
 8004d32:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004d34:	2300      	movs	r3, #0
 8004d36:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004d38:	4b13      	ldr	r3, [pc, #76]	; (8004d88 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004d3a:	681b      	ldr	r3, [r3, #0]
 8004d3c:	08db      	lsrs	r3, r3, #3
 8004d3e:	4a13      	ldr	r2, [pc, #76]	; (8004d8c <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004d40:	fba2 2303 	umull	r2, r3, r2, r3
 8004d44:	0a1a      	lsrs	r2, r3, #8
 8004d46:	4613      	mov	r3, r2
 8004d48:	009b      	lsls	r3, r3, #2
 8004d4a:	4413      	add	r3, r2
 8004d4c:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004d4e:	68fb      	ldr	r3, [r7, #12]
 8004d50:	3b01      	subs	r3, #1
 8004d52:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004d54:	68fb      	ldr	r3, [r7, #12]
 8004d56:	2b00      	cmp	r3, #0
 8004d58:	d107      	bne.n	8004d6a <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d5a:	687b      	ldr	r3, [r7, #4]
 8004d5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d5e:	f043 0220 	orr.w	r2, r3, #32
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004d66:	2301      	movs	r3, #1
 8004d68:	e008      	b.n	8004d7c <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	681b      	ldr	r3, [r3, #0]
 8004d6e:	681b      	ldr	r3, [r3, #0]
 8004d70:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004d74:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004d78:	d0e9      	beq.n	8004d4e <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8004d7a:	2300      	movs	r3, #0
}
 8004d7c:	4618      	mov	r0, r3
 8004d7e:	3714      	adds	r7, #20
 8004d80:	46bd      	mov	sp, r7
 8004d82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004d86:	4770      	bx	lr
 8004d88:	20000028 	.word	0x20000028
 8004d8c:	14f8b589 	.word	0x14f8b589

08004d90 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functionnal XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8004d90:	b480      	push	{r7}
 8004d92:	b083      	sub	sp, #12
 8004d94:	af00      	add	r7, sp, #0
 8004d96:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8004d98:	687b      	ldr	r3, [r7, #4]
 8004d9a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d9c:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004da0:	d103      	bne.n	8004daa <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8004da2:	687b      	ldr	r3, [r7, #4]
 8004da4:	2201      	movs	r2, #1
 8004da6:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8004da8:	e007      	b.n	8004dba <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004dae:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004db2:	d102      	bne.n	8004dba <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	2208      	movs	r2, #8
 8004db8:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8004dba:	bf00      	nop
 8004dbc:	370c      	adds	r7, #12
 8004dbe:	46bd      	mov	sp, r7
 8004dc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004dc4:	4770      	bx	lr
	...

08004dc8 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8004dc8:	b580      	push	{r7, lr}
 8004dca:	b086      	sub	sp, #24
 8004dcc:	af00      	add	r7, sp, #0
 8004dce:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	2b00      	cmp	r3, #0
 8004dd4:	d101      	bne.n	8004dda <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8004dd6:	2301      	movs	r3, #1
 8004dd8:	e25b      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	681b      	ldr	r3, [r3, #0]
 8004dde:	f003 0301 	and.w	r3, r3, #1
 8004de2:	2b00      	cmp	r3, #0
 8004de4:	d075      	beq.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004de6:	4ba3      	ldr	r3, [pc, #652]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004de8:	689b      	ldr	r3, [r3, #8]
 8004dea:	f003 030c 	and.w	r3, r3, #12
 8004dee:	2b04      	cmp	r3, #4
 8004df0:	d00c      	beq.n	8004e0c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004df2:	4ba0      	ldr	r3, [pc, #640]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004df4:	689b      	ldr	r3, [r3, #8]
 8004df6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8004dfa:	2b08      	cmp	r3, #8
 8004dfc:	d112      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8004dfe:	4b9d      	ldr	r3, [pc, #628]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e00:	685b      	ldr	r3, [r3, #4]
 8004e02:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004e06:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8004e0a:	d10b      	bne.n	8004e24 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004e0c:	4b99      	ldr	r3, [pc, #612]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e0e:	681b      	ldr	r3, [r3, #0]
 8004e10:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004e14:	2b00      	cmp	r3, #0
 8004e16:	d05b      	beq.n	8004ed0 <HAL_RCC_OscConfig+0x108>
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	685b      	ldr	r3, [r3, #4]
 8004e1c:	2b00      	cmp	r3, #0
 8004e1e:	d157      	bne.n	8004ed0 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8004e20:	2301      	movs	r3, #1
 8004e22:	e236      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8004e24:	687b      	ldr	r3, [r7, #4]
 8004e26:	685b      	ldr	r3, [r3, #4]
 8004e28:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8004e2c:	d106      	bne.n	8004e3c <HAL_RCC_OscConfig+0x74>
 8004e2e:	4b91      	ldr	r3, [pc, #580]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	4a90      	ldr	r2, [pc, #576]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e34:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e38:	6013      	str	r3, [r2, #0]
 8004e3a:	e01d      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e3c:	687b      	ldr	r3, [r7, #4]
 8004e3e:	685b      	ldr	r3, [r3, #4]
 8004e40:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8004e44:	d10c      	bne.n	8004e60 <HAL_RCC_OscConfig+0x98>
 8004e46:	4b8b      	ldr	r3, [pc, #556]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e48:	681b      	ldr	r3, [r3, #0]
 8004e4a:	4a8a      	ldr	r2, [pc, #552]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e4c:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8004e50:	6013      	str	r3, [r2, #0]
 8004e52:	4b88      	ldr	r3, [pc, #544]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e54:	681b      	ldr	r3, [r3, #0]
 8004e56:	4a87      	ldr	r2, [pc, #540]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e58:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8004e5c:	6013      	str	r3, [r2, #0]
 8004e5e:	e00b      	b.n	8004e78 <HAL_RCC_OscConfig+0xb0>
 8004e60:	4b84      	ldr	r3, [pc, #528]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	4a83      	ldr	r2, [pc, #524]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e66:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8004e6a:	6013      	str	r3, [r2, #0]
 8004e6c:	4b81      	ldr	r3, [pc, #516]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e6e:	681b      	ldr	r3, [r3, #0]
 8004e70:	4a80      	ldr	r2, [pc, #512]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e72:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8004e76:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	685b      	ldr	r3, [r3, #4]
 8004e7c:	2b00      	cmp	r3, #0
 8004e7e:	d013      	beq.n	8004ea8 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004e80:	f7fd fee4 	bl	8002c4c <HAL_GetTick>
 8004e84:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e86:	e008      	b.n	8004e9a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004e88:	f7fd fee0 	bl	8002c4c <HAL_GetTick>
 8004e8c:	4602      	mov	r2, r0
 8004e8e:	693b      	ldr	r3, [r7, #16]
 8004e90:	1ad3      	subs	r3, r2, r3
 8004e92:	2b64      	cmp	r3, #100	; 0x64
 8004e94:	d901      	bls.n	8004e9a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8004e96:	2303      	movs	r3, #3
 8004e98:	e1fb      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8004e9a:	4b76      	ldr	r3, [pc, #472]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004e9c:	681b      	ldr	r3, [r3, #0]
 8004e9e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004ea2:	2b00      	cmp	r3, #0
 8004ea4:	d0f0      	beq.n	8004e88 <HAL_RCC_OscConfig+0xc0>
 8004ea6:	e014      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8004ea8:	f7fd fed0 	bl	8002c4c <HAL_GetTick>
 8004eac:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004eae:	e008      	b.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8004eb0:	f7fd fecc 	bl	8002c4c <HAL_GetTick>
 8004eb4:	4602      	mov	r2, r0
 8004eb6:	693b      	ldr	r3, [r7, #16]
 8004eb8:	1ad3      	subs	r3, r2, r3
 8004eba:	2b64      	cmp	r3, #100	; 0x64
 8004ebc:	d901      	bls.n	8004ec2 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8004ebe:	2303      	movs	r3, #3
 8004ec0:	e1e7      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8004ec2:	4b6c      	ldr	r3, [pc, #432]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ec4:	681b      	ldr	r3, [r3, #0]
 8004ec6:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004eca:	2b00      	cmp	r3, #0
 8004ecc:	d1f0      	bne.n	8004eb0 <HAL_RCC_OscConfig+0xe8>
 8004ece:	e000      	b.n	8004ed2 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8004ed0:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8004ed2:	687b      	ldr	r3, [r7, #4]
 8004ed4:	681b      	ldr	r3, [r3, #0]
 8004ed6:	f003 0302 	and.w	r3, r3, #2
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d063      	beq.n	8004fa6 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ede:	4b65      	ldr	r3, [pc, #404]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ee0:	689b      	ldr	r3, [r3, #8]
 8004ee2:	f003 030c 	and.w	r3, r3, #12
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d00b      	beq.n	8004f02 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004eea:	4b62      	ldr	r3, [pc, #392]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004eec:	689b      	ldr	r3, [r3, #8]
 8004eee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8004ef2:	2b08      	cmp	r3, #8
 8004ef4:	d11c      	bne.n	8004f30 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8004ef6:	4b5f      	ldr	r3, [pc, #380]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004ef8:	685b      	ldr	r3, [r3, #4]
 8004efa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8004efe:	2b00      	cmp	r3, #0
 8004f00:	d116      	bne.n	8004f30 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f02:	4b5c      	ldr	r3, [pc, #368]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f04:	681b      	ldr	r3, [r3, #0]
 8004f06:	f003 0302 	and.w	r3, r3, #2
 8004f0a:	2b00      	cmp	r3, #0
 8004f0c:	d005      	beq.n	8004f1a <HAL_RCC_OscConfig+0x152>
 8004f0e:	687b      	ldr	r3, [r7, #4]
 8004f10:	68db      	ldr	r3, [r3, #12]
 8004f12:	2b01      	cmp	r3, #1
 8004f14:	d001      	beq.n	8004f1a <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8004f16:	2301      	movs	r3, #1
 8004f18:	e1bb      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f1a:	4b56      	ldr	r3, [pc, #344]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f1c:	681b      	ldr	r3, [r3, #0]
 8004f1e:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f22:	687b      	ldr	r3, [r7, #4]
 8004f24:	691b      	ldr	r3, [r3, #16]
 8004f26:	00db      	lsls	r3, r3, #3
 8004f28:	4952      	ldr	r1, [pc, #328]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f2a:	4313      	orrs	r3, r2
 8004f2c:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8004f2e:	e03a      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8004f30:	687b      	ldr	r3, [r7, #4]
 8004f32:	68db      	ldr	r3, [r3, #12]
 8004f34:	2b00      	cmp	r3, #0
 8004f36:	d020      	beq.n	8004f7a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8004f38:	4b4f      	ldr	r3, [pc, #316]	; (8005078 <HAL_RCC_OscConfig+0x2b0>)
 8004f3a:	2201      	movs	r2, #1
 8004f3c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f3e:	f7fd fe85 	bl	8002c4c <HAL_GetTick>
 8004f42:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f44:	e008      	b.n	8004f58 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f46:	f7fd fe81 	bl	8002c4c <HAL_GetTick>
 8004f4a:	4602      	mov	r2, r0
 8004f4c:	693b      	ldr	r3, [r7, #16]
 8004f4e:	1ad3      	subs	r3, r2, r3
 8004f50:	2b02      	cmp	r3, #2
 8004f52:	d901      	bls.n	8004f58 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8004f54:	2303      	movs	r3, #3
 8004f56:	e19c      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8004f58:	4b46      	ldr	r3, [pc, #280]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f5a:	681b      	ldr	r3, [r3, #0]
 8004f5c:	f003 0302 	and.w	r3, r3, #2
 8004f60:	2b00      	cmp	r3, #0
 8004f62:	d0f0      	beq.n	8004f46 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8004f64:	4b43      	ldr	r3, [pc, #268]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f66:	681b      	ldr	r3, [r3, #0]
 8004f68:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	691b      	ldr	r3, [r3, #16]
 8004f70:	00db      	lsls	r3, r3, #3
 8004f72:	4940      	ldr	r1, [pc, #256]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f74:	4313      	orrs	r3, r2
 8004f76:	600b      	str	r3, [r1, #0]
 8004f78:	e015      	b.n	8004fa6 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8004f7a:	4b3f      	ldr	r3, [pc, #252]	; (8005078 <HAL_RCC_OscConfig+0x2b0>)
 8004f7c:	2200      	movs	r2, #0
 8004f7e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8004f80:	f7fd fe64 	bl	8002c4c <HAL_GetTick>
 8004f84:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f86:	e008      	b.n	8004f9a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8004f88:	f7fd fe60 	bl	8002c4c <HAL_GetTick>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	693b      	ldr	r3, [r7, #16]
 8004f90:	1ad3      	subs	r3, r2, r3
 8004f92:	2b02      	cmp	r3, #2
 8004f94:	d901      	bls.n	8004f9a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8004f96:	2303      	movs	r3, #3
 8004f98:	e17b      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8004f9a:	4b36      	ldr	r3, [pc, #216]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004f9c:	681b      	ldr	r3, [r3, #0]
 8004f9e:	f003 0302 	and.w	r3, r3, #2
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d1f0      	bne.n	8004f88 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8004fa6:	687b      	ldr	r3, [r7, #4]
 8004fa8:	681b      	ldr	r3, [r3, #0]
 8004faa:	f003 0308 	and.w	r3, r3, #8
 8004fae:	2b00      	cmp	r3, #0
 8004fb0:	d030      	beq.n	8005014 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	695b      	ldr	r3, [r3, #20]
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d016      	beq.n	8004fe8 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8004fba:	4b30      	ldr	r3, [pc, #192]	; (800507c <HAL_RCC_OscConfig+0x2b4>)
 8004fbc:	2201      	movs	r2, #1
 8004fbe:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8004fc0:	f7fd fe44 	bl	8002c4c <HAL_GetTick>
 8004fc4:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fc6:	e008      	b.n	8004fda <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004fc8:	f7fd fe40 	bl	8002c4c <HAL_GetTick>
 8004fcc:	4602      	mov	r2, r0
 8004fce:	693b      	ldr	r3, [r7, #16]
 8004fd0:	1ad3      	subs	r3, r2, r3
 8004fd2:	2b02      	cmp	r3, #2
 8004fd4:	d901      	bls.n	8004fda <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8004fd6:	2303      	movs	r3, #3
 8004fd8:	e15b      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8004fda:	4b26      	ldr	r3, [pc, #152]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8004fdc:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8004fde:	f003 0302 	and.w	r3, r3, #2
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d0f0      	beq.n	8004fc8 <HAL_RCC_OscConfig+0x200>
 8004fe6:	e015      	b.n	8005014 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8004fe8:	4b24      	ldr	r3, [pc, #144]	; (800507c <HAL_RCC_OscConfig+0x2b4>)
 8004fea:	2200      	movs	r2, #0
 8004fec:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8004fee:	f7fd fe2d 	bl	8002c4c <HAL_GetTick>
 8004ff2:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8004ff4:	e008      	b.n	8005008 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8004ff6:	f7fd fe29 	bl	8002c4c <HAL_GetTick>
 8004ffa:	4602      	mov	r2, r0
 8004ffc:	693b      	ldr	r3, [r7, #16]
 8004ffe:	1ad3      	subs	r3, r2, r3
 8005000:	2b02      	cmp	r3, #2
 8005002:	d901      	bls.n	8005008 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005004:	2303      	movs	r3, #3
 8005006:	e144      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005008:	4b1a      	ldr	r3, [pc, #104]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 800500a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800500c:	f003 0302 	and.w	r3, r3, #2
 8005010:	2b00      	cmp	r3, #0
 8005012:	d1f0      	bne.n	8004ff6 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	f003 0304 	and.w	r3, r3, #4
 800501c:	2b00      	cmp	r3, #0
 800501e:	f000 80a0 	beq.w	8005162 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005022:	2300      	movs	r3, #0
 8005024:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005026:	4b13      	ldr	r3, [pc, #76]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005028:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800502a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800502e:	2b00      	cmp	r3, #0
 8005030:	d10f      	bne.n	8005052 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005032:	2300      	movs	r3, #0
 8005034:	60bb      	str	r3, [r7, #8]
 8005036:	4b0f      	ldr	r3, [pc, #60]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005038:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800503a:	4a0e      	ldr	r2, [pc, #56]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 800503c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005040:	6413      	str	r3, [r2, #64]	; 0x40
 8005042:	4b0c      	ldr	r3, [pc, #48]	; (8005074 <HAL_RCC_OscConfig+0x2ac>)
 8005044:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005046:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800504a:	60bb      	str	r3, [r7, #8]
 800504c:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 800504e:	2301      	movs	r3, #1
 8005050:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005052:	4b0b      	ldr	r3, [pc, #44]	; (8005080 <HAL_RCC_OscConfig+0x2b8>)
 8005054:	681b      	ldr	r3, [r3, #0]
 8005056:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800505a:	2b00      	cmp	r3, #0
 800505c:	d121      	bne.n	80050a2 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 800505e:	4b08      	ldr	r3, [pc, #32]	; (8005080 <HAL_RCC_OscConfig+0x2b8>)
 8005060:	681b      	ldr	r3, [r3, #0]
 8005062:	4a07      	ldr	r2, [pc, #28]	; (8005080 <HAL_RCC_OscConfig+0x2b8>)
 8005064:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005068:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800506a:	f7fd fdef 	bl	8002c4c <HAL_GetTick>
 800506e:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005070:	e011      	b.n	8005096 <HAL_RCC_OscConfig+0x2ce>
 8005072:	bf00      	nop
 8005074:	40023800 	.word	0x40023800
 8005078:	42470000 	.word	0x42470000
 800507c:	42470e80 	.word	0x42470e80
 8005080:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005084:	f7fd fde2 	bl	8002c4c <HAL_GetTick>
 8005088:	4602      	mov	r2, r0
 800508a:	693b      	ldr	r3, [r7, #16]
 800508c:	1ad3      	subs	r3, r2, r3
 800508e:	2b02      	cmp	r3, #2
 8005090:	d901      	bls.n	8005096 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005092:	2303      	movs	r3, #3
 8005094:	e0fd      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005096:	4b81      	ldr	r3, [pc, #516]	; (800529c <HAL_RCC_OscConfig+0x4d4>)
 8005098:	681b      	ldr	r3, [r3, #0]
 800509a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800509e:	2b00      	cmp	r3, #0
 80050a0:	d0f0      	beq.n	8005084 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	689b      	ldr	r3, [r3, #8]
 80050a6:	2b01      	cmp	r3, #1
 80050a8:	d106      	bne.n	80050b8 <HAL_RCC_OscConfig+0x2f0>
 80050aa:	4b7d      	ldr	r3, [pc, #500]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050ac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ae:	4a7c      	ldr	r2, [pc, #496]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050b0:	f043 0301 	orr.w	r3, r3, #1
 80050b4:	6713      	str	r3, [r2, #112]	; 0x70
 80050b6:	e01c      	b.n	80050f2 <HAL_RCC_OscConfig+0x32a>
 80050b8:	687b      	ldr	r3, [r7, #4]
 80050ba:	689b      	ldr	r3, [r3, #8]
 80050bc:	2b05      	cmp	r3, #5
 80050be:	d10c      	bne.n	80050da <HAL_RCC_OscConfig+0x312>
 80050c0:	4b77      	ldr	r3, [pc, #476]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050c4:	4a76      	ldr	r2, [pc, #472]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050c6:	f043 0304 	orr.w	r3, r3, #4
 80050ca:	6713      	str	r3, [r2, #112]	; 0x70
 80050cc:	4b74      	ldr	r3, [pc, #464]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050d0:	4a73      	ldr	r2, [pc, #460]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050d2:	f043 0301 	orr.w	r3, r3, #1
 80050d6:	6713      	str	r3, [r2, #112]	; 0x70
 80050d8:	e00b      	b.n	80050f2 <HAL_RCC_OscConfig+0x32a>
 80050da:	4b71      	ldr	r3, [pc, #452]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050de:	4a70      	ldr	r2, [pc, #448]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050e0:	f023 0301 	bic.w	r3, r3, #1
 80050e4:	6713      	str	r3, [r2, #112]	; 0x70
 80050e6:	4b6e      	ldr	r3, [pc, #440]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050e8:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80050ea:	4a6d      	ldr	r2, [pc, #436]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80050ec:	f023 0304 	bic.w	r3, r3, #4
 80050f0:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80050f2:	687b      	ldr	r3, [r7, #4]
 80050f4:	689b      	ldr	r3, [r3, #8]
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	d015      	beq.n	8005126 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80050fa:	f7fd fda7 	bl	8002c4c <HAL_GetTick>
 80050fe:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005100:	e00a      	b.n	8005118 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005102:	f7fd fda3 	bl	8002c4c <HAL_GetTick>
 8005106:	4602      	mov	r2, r0
 8005108:	693b      	ldr	r3, [r7, #16]
 800510a:	1ad3      	subs	r3, r2, r3
 800510c:	f241 3288 	movw	r2, #5000	; 0x1388
 8005110:	4293      	cmp	r3, r2
 8005112:	d901      	bls.n	8005118 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005114:	2303      	movs	r3, #3
 8005116:	e0bc      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005118:	4b61      	ldr	r3, [pc, #388]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 800511a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800511c:	f003 0302 	and.w	r3, r3, #2
 8005120:	2b00      	cmp	r3, #0
 8005122:	d0ee      	beq.n	8005102 <HAL_RCC_OscConfig+0x33a>
 8005124:	e014      	b.n	8005150 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005126:	f7fd fd91 	bl	8002c4c <HAL_GetTick>
 800512a:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800512c:	e00a      	b.n	8005144 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800512e:	f7fd fd8d 	bl	8002c4c <HAL_GetTick>
 8005132:	4602      	mov	r2, r0
 8005134:	693b      	ldr	r3, [r7, #16]
 8005136:	1ad3      	subs	r3, r2, r3
 8005138:	f241 3288 	movw	r2, #5000	; 0x1388
 800513c:	4293      	cmp	r3, r2
 800513e:	d901      	bls.n	8005144 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8005140:	2303      	movs	r3, #3
 8005142:	e0a6      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8005144:	4b56      	ldr	r3, [pc, #344]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005146:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005148:	f003 0302 	and.w	r3, r3, #2
 800514c:	2b00      	cmp	r3, #0
 800514e:	d1ee      	bne.n	800512e <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8005150:	7dfb      	ldrb	r3, [r7, #23]
 8005152:	2b01      	cmp	r3, #1
 8005154:	d105      	bne.n	8005162 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8005156:	4b52      	ldr	r3, [pc, #328]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005158:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800515a:	4a51      	ldr	r2, [pc, #324]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 800515c:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8005160:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8005162:	687b      	ldr	r3, [r7, #4]
 8005164:	699b      	ldr	r3, [r3, #24]
 8005166:	2b00      	cmp	r3, #0
 8005168:	f000 8092 	beq.w	8005290 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 800516c:	4b4c      	ldr	r3, [pc, #304]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 800516e:	689b      	ldr	r3, [r3, #8]
 8005170:	f003 030c 	and.w	r3, r3, #12
 8005174:	2b08      	cmp	r3, #8
 8005176:	d05c      	beq.n	8005232 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005178:	687b      	ldr	r3, [r7, #4]
 800517a:	699b      	ldr	r3, [r3, #24]
 800517c:	2b02      	cmp	r3, #2
 800517e:	d141      	bne.n	8005204 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005180:	4b48      	ldr	r3, [pc, #288]	; (80052a4 <HAL_RCC_OscConfig+0x4dc>)
 8005182:	2200      	movs	r2, #0
 8005184:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005186:	f7fd fd61 	bl	8002c4c <HAL_GetTick>
 800518a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800518c:	e008      	b.n	80051a0 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800518e:	f7fd fd5d 	bl	8002c4c <HAL_GetTick>
 8005192:	4602      	mov	r2, r0
 8005194:	693b      	ldr	r3, [r7, #16]
 8005196:	1ad3      	subs	r3, r2, r3
 8005198:	2b02      	cmp	r3, #2
 800519a:	d901      	bls.n	80051a0 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800519c:	2303      	movs	r3, #3
 800519e:	e078      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80051a0:	4b3f      	ldr	r3, [pc, #252]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80051a2:	681b      	ldr	r3, [r3, #0]
 80051a4:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051a8:	2b00      	cmp	r3, #0
 80051aa:	d1f0      	bne.n	800518e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 80051ac:	687b      	ldr	r3, [r7, #4]
 80051ae:	69da      	ldr	r2, [r3, #28]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	6a1b      	ldr	r3, [r3, #32]
 80051b4:	431a      	orrs	r2, r3
 80051b6:	687b      	ldr	r3, [r7, #4]
 80051b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80051ba:	019b      	lsls	r3, r3, #6
 80051bc:	431a      	orrs	r2, r3
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80051c2:	085b      	lsrs	r3, r3, #1
 80051c4:	3b01      	subs	r3, #1
 80051c6:	041b      	lsls	r3, r3, #16
 80051c8:	431a      	orrs	r2, r3
 80051ca:	687b      	ldr	r3, [r7, #4]
 80051cc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80051ce:	061b      	lsls	r3, r3, #24
 80051d0:	4933      	ldr	r1, [pc, #204]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80051d2:	4313      	orrs	r3, r2
 80051d4:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80051d6:	4b33      	ldr	r3, [pc, #204]	; (80052a4 <HAL_RCC_OscConfig+0x4dc>)
 80051d8:	2201      	movs	r2, #1
 80051da:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80051dc:	f7fd fd36 	bl	8002c4c <HAL_GetTick>
 80051e0:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051e2:	e008      	b.n	80051f6 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80051e4:	f7fd fd32 	bl	8002c4c <HAL_GetTick>
 80051e8:	4602      	mov	r2, r0
 80051ea:	693b      	ldr	r3, [r7, #16]
 80051ec:	1ad3      	subs	r3, r2, r3
 80051ee:	2b02      	cmp	r3, #2
 80051f0:	d901      	bls.n	80051f6 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80051f2:	2303      	movs	r3, #3
 80051f4:	e04d      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80051f6:	4b2a      	ldr	r3, [pc, #168]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 80051f8:	681b      	ldr	r3, [r3, #0]
 80051fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80051fe:	2b00      	cmp	r3, #0
 8005200:	d0f0      	beq.n	80051e4 <HAL_RCC_OscConfig+0x41c>
 8005202:	e045      	b.n	8005290 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005204:	4b27      	ldr	r3, [pc, #156]	; (80052a4 <HAL_RCC_OscConfig+0x4dc>)
 8005206:	2200      	movs	r2, #0
 8005208:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800520a:	f7fd fd1f 	bl	8002c4c <HAL_GetTick>
 800520e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005210:	e008      	b.n	8005224 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005212:	f7fd fd1b 	bl	8002c4c <HAL_GetTick>
 8005216:	4602      	mov	r2, r0
 8005218:	693b      	ldr	r3, [r7, #16]
 800521a:	1ad3      	subs	r3, r2, r3
 800521c:	2b02      	cmp	r3, #2
 800521e:	d901      	bls.n	8005224 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8005220:	2303      	movs	r3, #3
 8005222:	e036      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005224:	4b1e      	ldr	r3, [pc, #120]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005226:	681b      	ldr	r3, [r3, #0]
 8005228:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800522c:	2b00      	cmp	r3, #0
 800522e:	d1f0      	bne.n	8005212 <HAL_RCC_OscConfig+0x44a>
 8005230:	e02e      	b.n	8005290 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8005232:	687b      	ldr	r3, [r7, #4]
 8005234:	699b      	ldr	r3, [r3, #24]
 8005236:	2b01      	cmp	r3, #1
 8005238:	d101      	bne.n	800523e <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 800523a:	2301      	movs	r3, #1
 800523c:	e029      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 800523e:	4b18      	ldr	r3, [pc, #96]	; (80052a0 <HAL_RCC_OscConfig+0x4d8>)
 8005240:	685b      	ldr	r3, [r3, #4]
 8005242:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8005244:	68fb      	ldr	r3, [r7, #12]
 8005246:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	69db      	ldr	r3, [r3, #28]
 800524e:	429a      	cmp	r2, r3
 8005250:	d11c      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 8005252:	68fb      	ldr	r3, [r7, #12]
 8005254:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800525c:	429a      	cmp	r2, r3
 800525e:	d115      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 8005260:	68fa      	ldr	r2, [r7, #12]
 8005262:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8005266:	4013      	ands	r3, r2
 8005268:	687a      	ldr	r2, [r7, #4]
 800526a:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 800526c:	4293      	cmp	r3, r2
 800526e:	d10d      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005270:	68fb      	ldr	r3, [r7, #12]
 8005272:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005276:	687b      	ldr	r3, [r7, #4]
 8005278:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800527a:	429a      	cmp	r2, r3
 800527c:	d106      	bne.n	800528c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800527e:	68fb      	ldr	r3, [r7, #12]
 8005280:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8005284:	687b      	ldr	r3, [r7, #4]
 8005286:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8005288:	429a      	cmp	r2, r3
 800528a:	d001      	beq.n	8005290 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800528c:	2301      	movs	r3, #1
 800528e:	e000      	b.n	8005292 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8005290:	2300      	movs	r3, #0
}
 8005292:	4618      	mov	r0, r3
 8005294:	3718      	adds	r7, #24
 8005296:	46bd      	mov	sp, r7
 8005298:	bd80      	pop	{r7, pc}
 800529a:	bf00      	nop
 800529c:	40007000 	.word	0x40007000
 80052a0:	40023800 	.word	0x40023800
 80052a4:	42470060 	.word	0x42470060

080052a8 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80052a8:	b580      	push	{r7, lr}
 80052aa:	b084      	sub	sp, #16
 80052ac:	af00      	add	r7, sp, #0
 80052ae:	6078      	str	r0, [r7, #4]
 80052b0:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80052b2:	687b      	ldr	r3, [r7, #4]
 80052b4:	2b00      	cmp	r3, #0
 80052b6:	d101      	bne.n	80052bc <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80052b8:	2301      	movs	r3, #1
 80052ba:	e0cc      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80052bc:	4b68      	ldr	r3, [pc, #416]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f003 030f 	and.w	r3, r3, #15
 80052c4:	683a      	ldr	r2, [r7, #0]
 80052c6:	429a      	cmp	r2, r3
 80052c8:	d90c      	bls.n	80052e4 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80052ca:	4b65      	ldr	r3, [pc, #404]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80052cc:	683a      	ldr	r2, [r7, #0]
 80052ce:	b2d2      	uxtb	r2, r2
 80052d0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80052d2:	4b63      	ldr	r3, [pc, #396]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80052d4:	681b      	ldr	r3, [r3, #0]
 80052d6:	f003 030f 	and.w	r3, r3, #15
 80052da:	683a      	ldr	r2, [r7, #0]
 80052dc:	429a      	cmp	r2, r3
 80052de:	d001      	beq.n	80052e4 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80052e0:	2301      	movs	r3, #1
 80052e2:	e0b8      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	f003 0302 	and.w	r3, r3, #2
 80052ec:	2b00      	cmp	r3, #0
 80052ee:	d020      	beq.n	8005332 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	681b      	ldr	r3, [r3, #0]
 80052f4:	f003 0304 	and.w	r3, r3, #4
 80052f8:	2b00      	cmp	r3, #0
 80052fa:	d005      	beq.n	8005308 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80052fc:	4b59      	ldr	r3, [pc, #356]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 80052fe:	689b      	ldr	r3, [r3, #8]
 8005300:	4a58      	ldr	r2, [pc, #352]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005302:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8005306:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8005308:	687b      	ldr	r3, [r7, #4]
 800530a:	681b      	ldr	r3, [r3, #0]
 800530c:	f003 0308 	and.w	r3, r3, #8
 8005310:	2b00      	cmp	r3, #0
 8005312:	d005      	beq.n	8005320 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8005314:	4b53      	ldr	r3, [pc, #332]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005316:	689b      	ldr	r3, [r3, #8]
 8005318:	4a52      	ldr	r2, [pc, #328]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800531a:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 800531e:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8005320:	4b50      	ldr	r3, [pc, #320]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005322:	689b      	ldr	r3, [r3, #8]
 8005324:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	689b      	ldr	r3, [r3, #8]
 800532c:	494d      	ldr	r1, [pc, #308]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800532e:	4313      	orrs	r3, r2
 8005330:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d044      	beq.n	80053c8 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	685b      	ldr	r3, [r3, #4]
 8005342:	2b01      	cmp	r3, #1
 8005344:	d107      	bne.n	8005356 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005346:	4b47      	ldr	r3, [pc, #284]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005348:	681b      	ldr	r3, [r3, #0]
 800534a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800534e:	2b00      	cmp	r3, #0
 8005350:	d119      	bne.n	8005386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005352:	2301      	movs	r3, #1
 8005354:	e07f      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005356:	687b      	ldr	r3, [r7, #4]
 8005358:	685b      	ldr	r3, [r3, #4]
 800535a:	2b02      	cmp	r3, #2
 800535c:	d003      	beq.n	8005366 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8005362:	2b03      	cmp	r3, #3
 8005364:	d107      	bne.n	8005376 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8005366:	4b3f      	ldr	r3, [pc, #252]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005368:	681b      	ldr	r3, [r3, #0]
 800536a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800536e:	2b00      	cmp	r3, #0
 8005370:	d109      	bne.n	8005386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005372:	2301      	movs	r3, #1
 8005374:	e06f      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005376:	4b3b      	ldr	r3, [pc, #236]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005378:	681b      	ldr	r3, [r3, #0]
 800537a:	f003 0302 	and.w	r3, r3, #2
 800537e:	2b00      	cmp	r3, #0
 8005380:	d101      	bne.n	8005386 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8005382:	2301      	movs	r3, #1
 8005384:	e067      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8005386:	4b37      	ldr	r3, [pc, #220]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005388:	689b      	ldr	r3, [r3, #8]
 800538a:	f023 0203 	bic.w	r2, r3, #3
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	685b      	ldr	r3, [r3, #4]
 8005392:	4934      	ldr	r1, [pc, #208]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005394:	4313      	orrs	r3, r2
 8005396:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005398:	f7fd fc58 	bl	8002c4c <HAL_GetTick>
 800539c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800539e:	e00a      	b.n	80053b6 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 80053a0:	f7fd fc54 	bl	8002c4c <HAL_GetTick>
 80053a4:	4602      	mov	r2, r0
 80053a6:	68fb      	ldr	r3, [r7, #12]
 80053a8:	1ad3      	subs	r3, r2, r3
 80053aa:	f241 3288 	movw	r2, #5000	; 0x1388
 80053ae:	4293      	cmp	r3, r2
 80053b0:	d901      	bls.n	80053b6 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80053b2:	2303      	movs	r3, #3
 80053b4:	e04f      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80053b6:	4b2b      	ldr	r3, [pc, #172]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 80053b8:	689b      	ldr	r3, [r3, #8]
 80053ba:	f003 020c 	and.w	r2, r3, #12
 80053be:	687b      	ldr	r3, [r7, #4]
 80053c0:	685b      	ldr	r3, [r3, #4]
 80053c2:	009b      	lsls	r3, r3, #2
 80053c4:	429a      	cmp	r2, r3
 80053c6:	d1eb      	bne.n	80053a0 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80053c8:	4b25      	ldr	r3, [pc, #148]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80053ca:	681b      	ldr	r3, [r3, #0]
 80053cc:	f003 030f 	and.w	r3, r3, #15
 80053d0:	683a      	ldr	r2, [r7, #0]
 80053d2:	429a      	cmp	r2, r3
 80053d4:	d20c      	bcs.n	80053f0 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80053d6:	4b22      	ldr	r3, [pc, #136]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80053d8:	683a      	ldr	r2, [r7, #0]
 80053da:	b2d2      	uxtb	r2, r2
 80053dc:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80053de:	4b20      	ldr	r3, [pc, #128]	; (8005460 <HAL_RCC_ClockConfig+0x1b8>)
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	f003 030f 	and.w	r3, r3, #15
 80053e6:	683a      	ldr	r2, [r7, #0]
 80053e8:	429a      	cmp	r2, r3
 80053ea:	d001      	beq.n	80053f0 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80053ec:	2301      	movs	r3, #1
 80053ee:	e032      	b.n	8005456 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	f003 0304 	and.w	r3, r3, #4
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d008      	beq.n	800540e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80053fc:	4b19      	ldr	r3, [pc, #100]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 80053fe:	689b      	ldr	r3, [r3, #8]
 8005400:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	68db      	ldr	r3, [r3, #12]
 8005408:	4916      	ldr	r1, [pc, #88]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800540a:	4313      	orrs	r3, r2
 800540c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	681b      	ldr	r3, [r3, #0]
 8005412:	f003 0308 	and.w	r3, r3, #8
 8005416:	2b00      	cmp	r3, #0
 8005418:	d009      	beq.n	800542e <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 800541a:	4b12      	ldr	r3, [pc, #72]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800541c:	689b      	ldr	r3, [r3, #8]
 800541e:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	691b      	ldr	r3, [r3, #16]
 8005426:	00db      	lsls	r3, r3, #3
 8005428:	490e      	ldr	r1, [pc, #56]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 800542a:	4313      	orrs	r3, r2
 800542c:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 800542e:	f000 f821 	bl	8005474 <HAL_RCC_GetSysClockFreq>
 8005432:	4602      	mov	r2, r0
 8005434:	4b0b      	ldr	r3, [pc, #44]	; (8005464 <HAL_RCC_ClockConfig+0x1bc>)
 8005436:	689b      	ldr	r3, [r3, #8]
 8005438:	091b      	lsrs	r3, r3, #4
 800543a:	f003 030f 	and.w	r3, r3, #15
 800543e:	490a      	ldr	r1, [pc, #40]	; (8005468 <HAL_RCC_ClockConfig+0x1c0>)
 8005440:	5ccb      	ldrb	r3, [r1, r3]
 8005442:	fa22 f303 	lsr.w	r3, r2, r3
 8005446:	4a09      	ldr	r2, [pc, #36]	; (800546c <HAL_RCC_ClockConfig+0x1c4>)
 8005448:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 800544a:	4b09      	ldr	r3, [pc, #36]	; (8005470 <HAL_RCC_ClockConfig+0x1c8>)
 800544c:	681b      	ldr	r3, [r3, #0]
 800544e:	4618      	mov	r0, r3
 8005450:	f7fd fbb8 	bl	8002bc4 <HAL_InitTick>

  return HAL_OK;
 8005454:	2300      	movs	r3, #0
}
 8005456:	4618      	mov	r0, r3
 8005458:	3710      	adds	r7, #16
 800545a:	46bd      	mov	sp, r7
 800545c:	bd80      	pop	{r7, pc}
 800545e:	bf00      	nop
 8005460:	40023c00 	.word	0x40023c00
 8005464:	40023800 	.word	0x40023800
 8005468:	08007db8 	.word	0x08007db8
 800546c:	20000028 	.word	0x20000028
 8005470:	2000002c 	.word	0x2000002c

08005474 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8005474:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005478:	b084      	sub	sp, #16
 800547a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800547c:	2300      	movs	r3, #0
 800547e:	607b      	str	r3, [r7, #4]
 8005480:	2300      	movs	r3, #0
 8005482:	60fb      	str	r3, [r7, #12]
 8005484:	2300      	movs	r3, #0
 8005486:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005488:	2300      	movs	r3, #0
 800548a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800548c:	4b67      	ldr	r3, [pc, #412]	; (800562c <HAL_RCC_GetSysClockFreq+0x1b8>)
 800548e:	689b      	ldr	r3, [r3, #8]
 8005490:	f003 030c 	and.w	r3, r3, #12
 8005494:	2b08      	cmp	r3, #8
 8005496:	d00d      	beq.n	80054b4 <HAL_RCC_GetSysClockFreq+0x40>
 8005498:	2b08      	cmp	r3, #8
 800549a:	f200 80bd 	bhi.w	8005618 <HAL_RCC_GetSysClockFreq+0x1a4>
 800549e:	2b00      	cmp	r3, #0
 80054a0:	d002      	beq.n	80054a8 <HAL_RCC_GetSysClockFreq+0x34>
 80054a2:	2b04      	cmp	r3, #4
 80054a4:	d003      	beq.n	80054ae <HAL_RCC_GetSysClockFreq+0x3a>
 80054a6:	e0b7      	b.n	8005618 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80054a8:	4b61      	ldr	r3, [pc, #388]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80054aa:	60bb      	str	r3, [r7, #8]
       break;
 80054ac:	e0b7      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80054ae:	4b61      	ldr	r3, [pc, #388]	; (8005634 <HAL_RCC_GetSysClockFreq+0x1c0>)
 80054b0:	60bb      	str	r3, [r7, #8]
      break;
 80054b2:	e0b4      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80054b4:	4b5d      	ldr	r3, [pc, #372]	; (800562c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054b6:	685b      	ldr	r3, [r3, #4]
 80054b8:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80054bc:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80054be:	4b5b      	ldr	r3, [pc, #364]	; (800562c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054c0:	685b      	ldr	r3, [r3, #4]
 80054c2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80054c6:	2b00      	cmp	r3, #0
 80054c8:	d04d      	beq.n	8005566 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80054ca:	4b58      	ldr	r3, [pc, #352]	; (800562c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80054cc:	685b      	ldr	r3, [r3, #4]
 80054ce:	099b      	lsrs	r3, r3, #6
 80054d0:	461a      	mov	r2, r3
 80054d2:	f04f 0300 	mov.w	r3, #0
 80054d6:	f240 10ff 	movw	r0, #511	; 0x1ff
 80054da:	f04f 0100 	mov.w	r1, #0
 80054de:	ea02 0800 	and.w	r8, r2, r0
 80054e2:	ea03 0901 	and.w	r9, r3, r1
 80054e6:	4640      	mov	r0, r8
 80054e8:	4649      	mov	r1, r9
 80054ea:	f04f 0200 	mov.w	r2, #0
 80054ee:	f04f 0300 	mov.w	r3, #0
 80054f2:	014b      	lsls	r3, r1, #5
 80054f4:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80054f8:	0142      	lsls	r2, r0, #5
 80054fa:	4610      	mov	r0, r2
 80054fc:	4619      	mov	r1, r3
 80054fe:	ebb0 0008 	subs.w	r0, r0, r8
 8005502:	eb61 0109 	sbc.w	r1, r1, r9
 8005506:	f04f 0200 	mov.w	r2, #0
 800550a:	f04f 0300 	mov.w	r3, #0
 800550e:	018b      	lsls	r3, r1, #6
 8005510:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005514:	0182      	lsls	r2, r0, #6
 8005516:	1a12      	subs	r2, r2, r0
 8005518:	eb63 0301 	sbc.w	r3, r3, r1
 800551c:	f04f 0000 	mov.w	r0, #0
 8005520:	f04f 0100 	mov.w	r1, #0
 8005524:	00d9      	lsls	r1, r3, #3
 8005526:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800552a:	00d0      	lsls	r0, r2, #3
 800552c:	4602      	mov	r2, r0
 800552e:	460b      	mov	r3, r1
 8005530:	eb12 0208 	adds.w	r2, r2, r8
 8005534:	eb43 0309 	adc.w	r3, r3, r9
 8005538:	f04f 0000 	mov.w	r0, #0
 800553c:	f04f 0100 	mov.w	r1, #0
 8005540:	0259      	lsls	r1, r3, #9
 8005542:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8005546:	0250      	lsls	r0, r2, #9
 8005548:	4602      	mov	r2, r0
 800554a:	460b      	mov	r3, r1
 800554c:	4610      	mov	r0, r2
 800554e:	4619      	mov	r1, r3
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	461a      	mov	r2, r3
 8005554:	f04f 0300 	mov.w	r3, #0
 8005558:	f7fb fc08 	bl	8000d6c <__aeabi_uldivmod>
 800555c:	4602      	mov	r2, r0
 800555e:	460b      	mov	r3, r1
 8005560:	4613      	mov	r3, r2
 8005562:	60fb      	str	r3, [r7, #12]
 8005564:	e04a      	b.n	80055fc <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005566:	4b31      	ldr	r3, [pc, #196]	; (800562c <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005568:	685b      	ldr	r3, [r3, #4]
 800556a:	099b      	lsrs	r3, r3, #6
 800556c:	461a      	mov	r2, r3
 800556e:	f04f 0300 	mov.w	r3, #0
 8005572:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005576:	f04f 0100 	mov.w	r1, #0
 800557a:	ea02 0400 	and.w	r4, r2, r0
 800557e:	ea03 0501 	and.w	r5, r3, r1
 8005582:	4620      	mov	r0, r4
 8005584:	4629      	mov	r1, r5
 8005586:	f04f 0200 	mov.w	r2, #0
 800558a:	f04f 0300 	mov.w	r3, #0
 800558e:	014b      	lsls	r3, r1, #5
 8005590:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005594:	0142      	lsls	r2, r0, #5
 8005596:	4610      	mov	r0, r2
 8005598:	4619      	mov	r1, r3
 800559a:	1b00      	subs	r0, r0, r4
 800559c:	eb61 0105 	sbc.w	r1, r1, r5
 80055a0:	f04f 0200 	mov.w	r2, #0
 80055a4:	f04f 0300 	mov.w	r3, #0
 80055a8:	018b      	lsls	r3, r1, #6
 80055aa:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80055ae:	0182      	lsls	r2, r0, #6
 80055b0:	1a12      	subs	r2, r2, r0
 80055b2:	eb63 0301 	sbc.w	r3, r3, r1
 80055b6:	f04f 0000 	mov.w	r0, #0
 80055ba:	f04f 0100 	mov.w	r1, #0
 80055be:	00d9      	lsls	r1, r3, #3
 80055c0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80055c4:	00d0      	lsls	r0, r2, #3
 80055c6:	4602      	mov	r2, r0
 80055c8:	460b      	mov	r3, r1
 80055ca:	1912      	adds	r2, r2, r4
 80055cc:	eb45 0303 	adc.w	r3, r5, r3
 80055d0:	f04f 0000 	mov.w	r0, #0
 80055d4:	f04f 0100 	mov.w	r1, #0
 80055d8:	0299      	lsls	r1, r3, #10
 80055da:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80055de:	0290      	lsls	r0, r2, #10
 80055e0:	4602      	mov	r2, r0
 80055e2:	460b      	mov	r3, r1
 80055e4:	4610      	mov	r0, r2
 80055e6:	4619      	mov	r1, r3
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	461a      	mov	r2, r3
 80055ec:	f04f 0300 	mov.w	r3, #0
 80055f0:	f7fb fbbc 	bl	8000d6c <__aeabi_uldivmod>
 80055f4:	4602      	mov	r2, r0
 80055f6:	460b      	mov	r3, r1
 80055f8:	4613      	mov	r3, r2
 80055fa:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80055fc:	4b0b      	ldr	r3, [pc, #44]	; (800562c <HAL_RCC_GetSysClockFreq+0x1b8>)
 80055fe:	685b      	ldr	r3, [r3, #4]
 8005600:	0c1b      	lsrs	r3, r3, #16
 8005602:	f003 0303 	and.w	r3, r3, #3
 8005606:	3301      	adds	r3, #1
 8005608:	005b      	lsls	r3, r3, #1
 800560a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800560c:	68fa      	ldr	r2, [r7, #12]
 800560e:	683b      	ldr	r3, [r7, #0]
 8005610:	fbb2 f3f3 	udiv	r3, r2, r3
 8005614:	60bb      	str	r3, [r7, #8]
      break;
 8005616:	e002      	b.n	800561e <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8005618:	4b05      	ldr	r3, [pc, #20]	; (8005630 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800561a:	60bb      	str	r3, [r7, #8]
      break;
 800561c:	bf00      	nop
    }
  }
  return sysclockfreq;
 800561e:	68bb      	ldr	r3, [r7, #8]
}
 8005620:	4618      	mov	r0, r3
 8005622:	3710      	adds	r7, #16
 8005624:	46bd      	mov	sp, r7
 8005626:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 800562a:	bf00      	nop
 800562c:	40023800 	.word	0x40023800
 8005630:	00f42400 	.word	0x00f42400
 8005634:	007a1200 	.word	0x007a1200

08005638 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8005638:	b480      	push	{r7}
 800563a:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 800563c:	4b03      	ldr	r3, [pc, #12]	; (800564c <HAL_RCC_GetHCLKFreq+0x14>)
 800563e:	681b      	ldr	r3, [r3, #0]
}
 8005640:	4618      	mov	r0, r3
 8005642:	46bd      	mov	sp, r7
 8005644:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005648:	4770      	bx	lr
 800564a:	bf00      	nop
 800564c:	20000028 	.word	0x20000028

08005650 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8005650:	b580      	push	{r7, lr}
 8005652:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8005654:	f7ff fff0 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005658:	4602      	mov	r2, r0
 800565a:	4b05      	ldr	r3, [pc, #20]	; (8005670 <HAL_RCC_GetPCLK1Freq+0x20>)
 800565c:	689b      	ldr	r3, [r3, #8]
 800565e:	0a9b      	lsrs	r3, r3, #10
 8005660:	f003 0307 	and.w	r3, r3, #7
 8005664:	4903      	ldr	r1, [pc, #12]	; (8005674 <HAL_RCC_GetPCLK1Freq+0x24>)
 8005666:	5ccb      	ldrb	r3, [r1, r3]
 8005668:	fa22 f303 	lsr.w	r3, r2, r3
}
 800566c:	4618      	mov	r0, r3
 800566e:	bd80      	pop	{r7, pc}
 8005670:	40023800 	.word	0x40023800
 8005674:	08007dc8 	.word	0x08007dc8

08005678 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005678:	b580      	push	{r7, lr}
 800567a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800567c:	f7ff ffdc 	bl	8005638 <HAL_RCC_GetHCLKFreq>
 8005680:	4602      	mov	r2, r0
 8005682:	4b05      	ldr	r3, [pc, #20]	; (8005698 <HAL_RCC_GetPCLK2Freq+0x20>)
 8005684:	689b      	ldr	r3, [r3, #8]
 8005686:	0b5b      	lsrs	r3, r3, #13
 8005688:	f003 0307 	and.w	r3, r3, #7
 800568c:	4903      	ldr	r1, [pc, #12]	; (800569c <HAL_RCC_GetPCLK2Freq+0x24>)
 800568e:	5ccb      	ldrb	r3, [r1, r3]
 8005690:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005694:	4618      	mov	r0, r3
 8005696:	bd80      	pop	{r7, pc}
 8005698:	40023800 	.word	0x40023800
 800569c:	08007dc8 	.word	0x08007dc8

080056a0 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80056a0:	b580      	push	{r7, lr}
 80056a2:	b082      	sub	sp, #8
 80056a4:	af00      	add	r7, sp, #0
 80056a6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	2b00      	cmp	r3, #0
 80056ac:	d101      	bne.n	80056b2 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80056ae:	2301      	movs	r3, #1
 80056b0:	e01d      	b.n	80056ee <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80056b8:	b2db      	uxtb	r3, r3
 80056ba:	2b00      	cmp	r3, #0
 80056bc:	d106      	bne.n	80056cc <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	2200      	movs	r2, #0
 80056c2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80056c6:	6878      	ldr	r0, [r7, #4]
 80056c8:	f7fd f8ce 	bl	8002868 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	2202      	movs	r2, #2
 80056d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80056d4:	687b      	ldr	r3, [r7, #4]
 80056d6:	681a      	ldr	r2, [r3, #0]
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	3304      	adds	r3, #4
 80056dc:	4619      	mov	r1, r3
 80056de:	4610      	mov	r0, r2
 80056e0:	f000 fc3c 	bl	8005f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80056e4:	687b      	ldr	r3, [r7, #4]
 80056e6:	2201      	movs	r2, #1
 80056e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3708      	adds	r7, #8
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}

080056f6 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80056f6:	b480      	push	{r7}
 80056f8:	b085      	sub	sp, #20
 80056fa:	af00      	add	r7, sp, #0
 80056fc:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	2202      	movs	r2, #2
 8005702:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	681b      	ldr	r3, [r3, #0]
 800570a:	689b      	ldr	r3, [r3, #8]
 800570c:	f003 0307 	and.w	r3, r3, #7
 8005710:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005712:	68fb      	ldr	r3, [r7, #12]
 8005714:	2b06      	cmp	r3, #6
 8005716:	d007      	beq.n	8005728 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	681b      	ldr	r3, [r3, #0]
 800571c:	681a      	ldr	r2, [r3, #0]
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	681b      	ldr	r3, [r3, #0]
 8005722:	f042 0201 	orr.w	r2, r2, #1
 8005726:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2201      	movs	r2, #1
 800572c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 8005730:	2300      	movs	r3, #0
}
 8005732:	4618      	mov	r0, r3
 8005734:	3714      	adds	r7, #20
 8005736:	46bd      	mov	sp, r7
 8005738:	f85d 7b04 	ldr.w	r7, [sp], #4
 800573c:	4770      	bx	lr

0800573e <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 800573e:	b480      	push	{r7}
 8005740:	b085      	sub	sp, #20
 8005742:	af00      	add	r7, sp, #0
 8005744:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	68da      	ldr	r2, [r3, #12]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f042 0201 	orr.w	r2, r2, #1
 8005754:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	689b      	ldr	r3, [r3, #8]
 800575c:	f003 0307 	and.w	r3, r3, #7
 8005760:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005762:	68fb      	ldr	r3, [r7, #12]
 8005764:	2b06      	cmp	r3, #6
 8005766:	d007      	beq.n	8005778 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 8005768:	687b      	ldr	r3, [r7, #4]
 800576a:	681b      	ldr	r3, [r3, #0]
 800576c:	681a      	ldr	r2, [r3, #0]
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	681b      	ldr	r3, [r3, #0]
 8005772:	f042 0201 	orr.w	r2, r2, #1
 8005776:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005778:	2300      	movs	r3, #0
}
 800577a:	4618      	mov	r0, r3
 800577c:	3714      	adds	r7, #20
 800577e:	46bd      	mov	sp, r7
 8005780:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005784:	4770      	bx	lr

08005786 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005786:	b580      	push	{r7, lr}
 8005788:	b082      	sub	sp, #8
 800578a:	af00      	add	r7, sp, #0
 800578c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800578e:	687b      	ldr	r3, [r7, #4]
 8005790:	2b00      	cmp	r3, #0
 8005792:	d101      	bne.n	8005798 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005794:	2301      	movs	r3, #1
 8005796:	e01d      	b.n	80057d4 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005798:	687b      	ldr	r3, [r7, #4]
 800579a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800579e:	b2db      	uxtb	r3, r3
 80057a0:	2b00      	cmp	r3, #0
 80057a2:	d106      	bne.n	80057b2 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	2200      	movs	r2, #0
 80057a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80057ac:	6878      	ldr	r0, [r7, #4]
 80057ae:	f000 f815 	bl	80057dc <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	2202      	movs	r2, #2
 80057b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80057ba:	687b      	ldr	r3, [r7, #4]
 80057bc:	681a      	ldr	r2, [r3, #0]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	3304      	adds	r3, #4
 80057c2:	4619      	mov	r1, r3
 80057c4:	4610      	mov	r0, r2
 80057c6:	f000 fbc9 	bl	8005f5c <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	2201      	movs	r2, #1
 80057ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80057d2:	2300      	movs	r3, #0
}
 80057d4:	4618      	mov	r0, r3
 80057d6:	3708      	adds	r7, #8
 80057d8:	46bd      	mov	sp, r7
 80057da:	bd80      	pop	{r7, pc}

080057dc <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 80057dc:	b480      	push	{r7}
 80057de:	b083      	sub	sp, #12
 80057e0:	af00      	add	r7, sp, #0
 80057e2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 80057e4:	bf00      	nop
 80057e6:	370c      	adds	r7, #12
 80057e8:	46bd      	mov	sp, r7
 80057ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80057ee:	4770      	bx	lr

080057f0 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80057f0:	b580      	push	{r7, lr}
 80057f2:	b084      	sub	sp, #16
 80057f4:	af00      	add	r7, sp, #0
 80057f6:	6078      	str	r0, [r7, #4]
 80057f8:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	2201      	movs	r2, #1
 8005800:	6839      	ldr	r1, [r7, #0]
 8005802:	4618      	mov	r0, r3
 8005804:	f000 fe50 	bl	80064a8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	681b      	ldr	r3, [r3, #0]
 800580c:	4a10      	ldr	r2, [pc, #64]	; (8005850 <HAL_TIM_PWM_Start+0x60>)
 800580e:	4293      	cmp	r3, r2
 8005810:	d107      	bne.n	8005822 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005812:	687b      	ldr	r3, [r7, #4]
 8005814:	681b      	ldr	r3, [r3, #0]
 8005816:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005820:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	681b      	ldr	r3, [r3, #0]
 8005826:	689b      	ldr	r3, [r3, #8]
 8005828:	f003 0307 	and.w	r3, r3, #7
 800582c:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800582e:	68fb      	ldr	r3, [r7, #12]
 8005830:	2b06      	cmp	r3, #6
 8005832:	d007      	beq.n	8005844 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	681b      	ldr	r3, [r3, #0]
 8005838:	681a      	ldr	r2, [r3, #0]
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	681b      	ldr	r3, [r3, #0]
 800583e:	f042 0201 	orr.w	r2, r2, #1
 8005842:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005844:	2300      	movs	r3, #0
}
 8005846:	4618      	mov	r0, r3
 8005848:	3710      	adds	r7, #16
 800584a:	46bd      	mov	sp, r7
 800584c:	bd80      	pop	{r7, pc}
 800584e:	bf00      	nop
 8005850:	40010000 	.word	0x40010000

08005854 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005854:	b580      	push	{r7, lr}
 8005856:	b086      	sub	sp, #24
 8005858:	af00      	add	r7, sp, #0
 800585a:	6078      	str	r0, [r7, #4]
 800585c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 800585e:	687b      	ldr	r3, [r7, #4]
 8005860:	2b00      	cmp	r3, #0
 8005862:	d101      	bne.n	8005868 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005864:	2301      	movs	r3, #1
 8005866:	e083      	b.n	8005970 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586e:	b2db      	uxtb	r3, r3
 8005870:	2b00      	cmp	r3, #0
 8005872:	d106      	bne.n	8005882 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005874:	687b      	ldr	r3, [r7, #4]
 8005876:	2200      	movs	r2, #0
 8005878:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 800587c:	6878      	ldr	r0, [r7, #4]
 800587e:	f7fc ffab 	bl	80027d8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	2202      	movs	r2, #2
 8005886:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	689b      	ldr	r3, [r3, #8]
 8005890:	687a      	ldr	r2, [r7, #4]
 8005892:	6812      	ldr	r2, [r2, #0]
 8005894:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005898:	f023 0307 	bic.w	r3, r3, #7
 800589c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	681a      	ldr	r2, [r3, #0]
 80058a2:	687b      	ldr	r3, [r7, #4]
 80058a4:	3304      	adds	r3, #4
 80058a6:	4619      	mov	r1, r3
 80058a8:	4610      	mov	r0, r2
 80058aa:	f000 fb57 	bl	8005f5c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80058ae:	687b      	ldr	r3, [r7, #4]
 80058b0:	681b      	ldr	r3, [r3, #0]
 80058b2:	689b      	ldr	r3, [r3, #8]
 80058b4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	681b      	ldr	r3, [r3, #0]
 80058ba:	699b      	ldr	r3, [r3, #24]
 80058bc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	681b      	ldr	r3, [r3, #0]
 80058c2:	6a1b      	ldr	r3, [r3, #32]
 80058c4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 80058c6:	683b      	ldr	r3, [r7, #0]
 80058c8:	681b      	ldr	r3, [r3, #0]
 80058ca:	697a      	ldr	r2, [r7, #20]
 80058cc:	4313      	orrs	r3, r2
 80058ce:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 80058d0:	693b      	ldr	r3, [r7, #16]
 80058d2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80058d6:	f023 0303 	bic.w	r3, r3, #3
 80058da:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 80058dc:	683b      	ldr	r3, [r7, #0]
 80058de:	689a      	ldr	r2, [r3, #8]
 80058e0:	683b      	ldr	r3, [r7, #0]
 80058e2:	699b      	ldr	r3, [r3, #24]
 80058e4:	021b      	lsls	r3, r3, #8
 80058e6:	4313      	orrs	r3, r2
 80058e8:	693a      	ldr	r2, [r7, #16]
 80058ea:	4313      	orrs	r3, r2
 80058ec:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 80058ee:	693b      	ldr	r3, [r7, #16]
 80058f0:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 80058f4:	f023 030c 	bic.w	r3, r3, #12
 80058f8:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 80058fa:	693b      	ldr	r3, [r7, #16]
 80058fc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005900:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005904:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005906:	683b      	ldr	r3, [r7, #0]
 8005908:	68da      	ldr	r2, [r3, #12]
 800590a:	683b      	ldr	r3, [r7, #0]
 800590c:	69db      	ldr	r3, [r3, #28]
 800590e:	021b      	lsls	r3, r3, #8
 8005910:	4313      	orrs	r3, r2
 8005912:	693a      	ldr	r2, [r7, #16]
 8005914:	4313      	orrs	r3, r2
 8005916:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005918:	683b      	ldr	r3, [r7, #0]
 800591a:	691b      	ldr	r3, [r3, #16]
 800591c:	011a      	lsls	r2, r3, #4
 800591e:	683b      	ldr	r3, [r7, #0]
 8005920:	6a1b      	ldr	r3, [r3, #32]
 8005922:	031b      	lsls	r3, r3, #12
 8005924:	4313      	orrs	r3, r2
 8005926:	693a      	ldr	r2, [r7, #16]
 8005928:	4313      	orrs	r3, r2
 800592a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 800592c:	68fb      	ldr	r3, [r7, #12]
 800592e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005932:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005934:	68fb      	ldr	r3, [r7, #12]
 8005936:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 800593a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 800593c:	683b      	ldr	r3, [r7, #0]
 800593e:	685a      	ldr	r2, [r3, #4]
 8005940:	683b      	ldr	r3, [r7, #0]
 8005942:	695b      	ldr	r3, [r3, #20]
 8005944:	011b      	lsls	r3, r3, #4
 8005946:	4313      	orrs	r3, r2
 8005948:	68fa      	ldr	r2, [r7, #12]
 800594a:	4313      	orrs	r3, r2
 800594c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	697a      	ldr	r2, [r7, #20]
 8005954:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	681b      	ldr	r3, [r3, #0]
 800595a:	693a      	ldr	r2, [r7, #16]
 800595c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	681b      	ldr	r3, [r3, #0]
 8005962:	68fa      	ldr	r2, [r7, #12]
 8005964:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005966:	687b      	ldr	r3, [r7, #4]
 8005968:	2201      	movs	r2, #1
 800596a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800596e:	2300      	movs	r3, #0
}
 8005970:	4618      	mov	r0, r3
 8005972:	3718      	adds	r7, #24
 8005974:	46bd      	mov	sp, r7
 8005976:	bd80      	pop	{r7, pc}

08005978 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005978:	b580      	push	{r7, lr}
 800597a:	b082      	sub	sp, #8
 800597c:	af00      	add	r7, sp, #0
 800597e:	6078      	str	r0, [r7, #4]
 8005980:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8005982:	683b      	ldr	r3, [r7, #0]
 8005984:	2b00      	cmp	r3, #0
 8005986:	d003      	beq.n	8005990 <HAL_TIM_Encoder_Start+0x18>
 8005988:	683b      	ldr	r3, [r7, #0]
 800598a:	2b04      	cmp	r3, #4
 800598c:	d008      	beq.n	80059a0 <HAL_TIM_Encoder_Start+0x28>
 800598e:	e00f      	b.n	80059b0 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	681b      	ldr	r3, [r3, #0]
 8005994:	2201      	movs	r2, #1
 8005996:	2100      	movs	r1, #0
 8005998:	4618      	mov	r0, r3
 800599a:	f000 fd85 	bl	80064a8 <TIM_CCxChannelCmd>
      break;
 800599e:	e016      	b.n	80059ce <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059a0:	687b      	ldr	r3, [r7, #4]
 80059a2:	681b      	ldr	r3, [r3, #0]
 80059a4:	2201      	movs	r2, #1
 80059a6:	2104      	movs	r1, #4
 80059a8:	4618      	mov	r0, r3
 80059aa:	f000 fd7d 	bl	80064a8 <TIM_CCxChannelCmd>
      break;
 80059ae:	e00e      	b.n	80059ce <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	2201      	movs	r2, #1
 80059b6:	2100      	movs	r1, #0
 80059b8:	4618      	mov	r0, r3
 80059ba:	f000 fd75 	bl	80064a8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	2201      	movs	r2, #1
 80059c4:	2104      	movs	r1, #4
 80059c6:	4618      	mov	r0, r3
 80059c8:	f000 fd6e 	bl	80064a8 <TIM_CCxChannelCmd>
      break;
 80059cc:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f042 0201 	orr.w	r2, r2, #1
 80059dc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80059de:	2300      	movs	r3, #0
}
 80059e0:	4618      	mov	r0, r3
 80059e2:	3708      	adds	r7, #8
 80059e4:	46bd      	mov	sp, r7
 80059e6:	bd80      	pop	{r7, pc}

080059e8 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 80059e8:	b580      	push	{r7, lr}
 80059ea:	b082      	sub	sp, #8
 80059ec:	af00      	add	r7, sp, #0
 80059ee:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	681b      	ldr	r3, [r3, #0]
 80059f4:	691b      	ldr	r3, [r3, #16]
 80059f6:	f003 0302 	and.w	r3, r3, #2
 80059fa:	2b02      	cmp	r3, #2
 80059fc:	d122      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 80059fe:	687b      	ldr	r3, [r7, #4]
 8005a00:	681b      	ldr	r3, [r3, #0]
 8005a02:	68db      	ldr	r3, [r3, #12]
 8005a04:	f003 0302 	and.w	r3, r3, #2
 8005a08:	2b02      	cmp	r3, #2
 8005a0a:	d11b      	bne.n	8005a44 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	f06f 0202 	mvn.w	r2, #2
 8005a14:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	2201      	movs	r2, #1
 8005a1a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	699b      	ldr	r3, [r3, #24]
 8005a22:	f003 0303 	and.w	r3, r3, #3
 8005a26:	2b00      	cmp	r3, #0
 8005a28:	d003      	beq.n	8005a32 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8005a2a:	6878      	ldr	r0, [r7, #4]
 8005a2c:	f000 fa78 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005a30:	e005      	b.n	8005a3e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a32:	6878      	ldr	r0, [r7, #4]
 8005a34:	f000 fa6a 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a38:	6878      	ldr	r0, [r7, #4]
 8005a3a:	f000 fa7b 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a3e:	687b      	ldr	r3, [r7, #4]
 8005a40:	2200      	movs	r2, #0
 8005a42:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	691b      	ldr	r3, [r3, #16]
 8005a4a:	f003 0304 	and.w	r3, r3, #4
 8005a4e:	2b04      	cmp	r3, #4
 8005a50:	d122      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8005a52:	687b      	ldr	r3, [r7, #4]
 8005a54:	681b      	ldr	r3, [r3, #0]
 8005a56:	68db      	ldr	r3, [r3, #12]
 8005a58:	f003 0304 	and.w	r3, r3, #4
 8005a5c:	2b04      	cmp	r3, #4
 8005a5e:	d11b      	bne.n	8005a98 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	681b      	ldr	r3, [r3, #0]
 8005a64:	f06f 0204 	mvn.w	r2, #4
 8005a68:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8005a6a:	687b      	ldr	r3, [r7, #4]
 8005a6c:	2202      	movs	r2, #2
 8005a6e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8005a70:	687b      	ldr	r3, [r7, #4]
 8005a72:	681b      	ldr	r3, [r3, #0]
 8005a74:	699b      	ldr	r3, [r3, #24]
 8005a76:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005a7a:	2b00      	cmp	r3, #0
 8005a7c:	d003      	beq.n	8005a86 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005a7e:	6878      	ldr	r0, [r7, #4]
 8005a80:	f000 fa4e 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005a84:	e005      	b.n	8005a92 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005a86:	6878      	ldr	r0, [r7, #4]
 8005a88:	f000 fa40 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005a8c:	6878      	ldr	r0, [r7, #4]
 8005a8e:	f000 fa51 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	2200      	movs	r2, #0
 8005a96:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	681b      	ldr	r3, [r3, #0]
 8005a9c:	691b      	ldr	r3, [r3, #16]
 8005a9e:	f003 0308 	and.w	r3, r3, #8
 8005aa2:	2b08      	cmp	r3, #8
 8005aa4:	d122      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	681b      	ldr	r3, [r3, #0]
 8005aaa:	68db      	ldr	r3, [r3, #12]
 8005aac:	f003 0308 	and.w	r3, r3, #8
 8005ab0:	2b08      	cmp	r3, #8
 8005ab2:	d11b      	bne.n	8005aec <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8005ab4:	687b      	ldr	r3, [r7, #4]
 8005ab6:	681b      	ldr	r3, [r3, #0]
 8005ab8:	f06f 0208 	mvn.w	r2, #8
 8005abc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	2204      	movs	r2, #4
 8005ac2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	681b      	ldr	r3, [r3, #0]
 8005ac8:	69db      	ldr	r3, [r3, #28]
 8005aca:	f003 0303 	and.w	r3, r3, #3
 8005ace:	2b00      	cmp	r3, #0
 8005ad0:	d003      	beq.n	8005ada <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005ad2:	6878      	ldr	r0, [r7, #4]
 8005ad4:	f000 fa24 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005ad8:	e005      	b.n	8005ae6 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005ada:	6878      	ldr	r0, [r7, #4]
 8005adc:	f000 fa16 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005ae0:	6878      	ldr	r0, [r7, #4]
 8005ae2:	f000 fa27 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	2200      	movs	r2, #0
 8005aea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	681b      	ldr	r3, [r3, #0]
 8005af0:	691b      	ldr	r3, [r3, #16]
 8005af2:	f003 0310 	and.w	r3, r3, #16
 8005af6:	2b10      	cmp	r3, #16
 8005af8:	d122      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8005afa:	687b      	ldr	r3, [r7, #4]
 8005afc:	681b      	ldr	r3, [r3, #0]
 8005afe:	68db      	ldr	r3, [r3, #12]
 8005b00:	f003 0310 	and.w	r3, r3, #16
 8005b04:	2b10      	cmp	r3, #16
 8005b06:	d11b      	bne.n	8005b40 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f06f 0210 	mvn.w	r2, #16
 8005b10:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8005b12:	687b      	ldr	r3, [r7, #4]
 8005b14:	2208      	movs	r2, #8
 8005b16:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8005b18:	687b      	ldr	r3, [r7, #4]
 8005b1a:	681b      	ldr	r3, [r3, #0]
 8005b1c:	69db      	ldr	r3, [r3, #28]
 8005b1e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8005b22:	2b00      	cmp	r3, #0
 8005b24:	d003      	beq.n	8005b2e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8005b26:	6878      	ldr	r0, [r7, #4]
 8005b28:	f000 f9fa 	bl	8005f20 <HAL_TIM_IC_CaptureCallback>
 8005b2c:	e005      	b.n	8005b3a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8005b2e:	6878      	ldr	r0, [r7, #4]
 8005b30:	f000 f9ec 	bl	8005f0c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8005b34:	6878      	ldr	r0, [r7, #4]
 8005b36:	f000 f9fd 	bl	8005f34 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	2200      	movs	r2, #0
 8005b3e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	691b      	ldr	r3, [r3, #16]
 8005b46:	f003 0301 	and.w	r3, r3, #1
 8005b4a:	2b01      	cmp	r3, #1
 8005b4c:	d10e      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8005b4e:	687b      	ldr	r3, [r7, #4]
 8005b50:	681b      	ldr	r3, [r3, #0]
 8005b52:	68db      	ldr	r3, [r3, #12]
 8005b54:	f003 0301 	and.w	r3, r3, #1
 8005b58:	2b01      	cmp	r3, #1
 8005b5a:	d107      	bne.n	8005b6c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8005b5c:	687b      	ldr	r3, [r7, #4]
 8005b5e:	681b      	ldr	r3, [r3, #0]
 8005b60:	f06f 0201 	mvn.w	r2, #1
 8005b64:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8005b66:	6878      	ldr	r0, [r7, #4]
 8005b68:	f7fc fd82 	bl	8002670 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	681b      	ldr	r3, [r3, #0]
 8005b70:	691b      	ldr	r3, [r3, #16]
 8005b72:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b76:	2b80      	cmp	r3, #128	; 0x80
 8005b78:	d10e      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	68db      	ldr	r3, [r3, #12]
 8005b80:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8005b84:	2b80      	cmp	r3, #128	; 0x80
 8005b86:	d107      	bne.n	8005b98 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	681b      	ldr	r3, [r3, #0]
 8005b8c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8005b90:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8005b92:	6878      	ldr	r0, [r7, #4]
 8005b94:	f000 fd26 	bl	80065e4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8005b98:	687b      	ldr	r3, [r7, #4]
 8005b9a:	681b      	ldr	r3, [r3, #0]
 8005b9c:	691b      	ldr	r3, [r3, #16]
 8005b9e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005ba2:	2b40      	cmp	r3, #64	; 0x40
 8005ba4:	d10e      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8005ba6:	687b      	ldr	r3, [r7, #4]
 8005ba8:	681b      	ldr	r3, [r3, #0]
 8005baa:	68db      	ldr	r3, [r3, #12]
 8005bac:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005bb0:	2b40      	cmp	r3, #64	; 0x40
 8005bb2:	d107      	bne.n	8005bc4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	681b      	ldr	r3, [r3, #0]
 8005bb8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8005bbc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8005bbe:	6878      	ldr	r0, [r7, #4]
 8005bc0:	f000 f9c2 	bl	8005f48 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	681b      	ldr	r3, [r3, #0]
 8005bc8:	691b      	ldr	r3, [r3, #16]
 8005bca:	f003 0320 	and.w	r3, r3, #32
 8005bce:	2b20      	cmp	r3, #32
 8005bd0:	d10e      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	68db      	ldr	r3, [r3, #12]
 8005bd8:	f003 0320 	and.w	r3, r3, #32
 8005bdc:	2b20      	cmp	r3, #32
 8005bde:	d107      	bne.n	8005bf0 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8005be0:	687b      	ldr	r3, [r7, #4]
 8005be2:	681b      	ldr	r3, [r3, #0]
 8005be4:	f06f 0220 	mvn.w	r2, #32
 8005be8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8005bea:	6878      	ldr	r0, [r7, #4]
 8005bec:	f000 fcf0 	bl	80065d0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8005bf0:	bf00      	nop
 8005bf2:	3708      	adds	r7, #8
 8005bf4:	46bd      	mov	sp, r7
 8005bf6:	bd80      	pop	{r7, pc}

08005bf8 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8005bf8:	b580      	push	{r7, lr}
 8005bfa:	b084      	sub	sp, #16
 8005bfc:	af00      	add	r7, sp, #0
 8005bfe:	60f8      	str	r0, [r7, #12]
 8005c00:	60b9      	str	r1, [r7, #8]
 8005c02:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8005c04:	68fb      	ldr	r3, [r7, #12]
 8005c06:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005c0a:	2b01      	cmp	r3, #1
 8005c0c:	d101      	bne.n	8005c12 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8005c0e:	2302      	movs	r3, #2
 8005c10:	e0b4      	b.n	8005d7c <HAL_TIM_PWM_ConfigChannel+0x184>
 8005c12:	68fb      	ldr	r3, [r7, #12]
 8005c14:	2201      	movs	r2, #1
 8005c16:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005c1a:	68fb      	ldr	r3, [r7, #12]
 8005c1c:	2202      	movs	r2, #2
 8005c1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005c22:	687b      	ldr	r3, [r7, #4]
 8005c24:	2b0c      	cmp	r3, #12
 8005c26:	f200 809f 	bhi.w	8005d68 <HAL_TIM_PWM_ConfigChannel+0x170>
 8005c2a:	a201      	add	r2, pc, #4	; (adr r2, 8005c30 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8005c2c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8005c30:	08005c65 	.word	0x08005c65
 8005c34:	08005d69 	.word	0x08005d69
 8005c38:	08005d69 	.word	0x08005d69
 8005c3c:	08005d69 	.word	0x08005d69
 8005c40:	08005ca5 	.word	0x08005ca5
 8005c44:	08005d69 	.word	0x08005d69
 8005c48:	08005d69 	.word	0x08005d69
 8005c4c:	08005d69 	.word	0x08005d69
 8005c50:	08005ce7 	.word	0x08005ce7
 8005c54:	08005d69 	.word	0x08005d69
 8005c58:	08005d69 	.word	0x08005d69
 8005c5c:	08005d69 	.word	0x08005d69
 8005c60:	08005d27 	.word	0x08005d27
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8005c64:	68fb      	ldr	r3, [r7, #12]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	68b9      	ldr	r1, [r7, #8]
 8005c6a:	4618      	mov	r0, r3
 8005c6c:	f000 f9f6 	bl	800605c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8005c70:	68fb      	ldr	r3, [r7, #12]
 8005c72:	681b      	ldr	r3, [r3, #0]
 8005c74:	699a      	ldr	r2, [r3, #24]
 8005c76:	68fb      	ldr	r3, [r7, #12]
 8005c78:	681b      	ldr	r3, [r3, #0]
 8005c7a:	f042 0208 	orr.w	r2, r2, #8
 8005c7e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8005c80:	68fb      	ldr	r3, [r7, #12]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	699a      	ldr	r2, [r3, #24]
 8005c86:	68fb      	ldr	r3, [r7, #12]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	f022 0204 	bic.w	r2, r2, #4
 8005c8e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8005c90:	68fb      	ldr	r3, [r7, #12]
 8005c92:	681b      	ldr	r3, [r3, #0]
 8005c94:	6999      	ldr	r1, [r3, #24]
 8005c96:	68bb      	ldr	r3, [r7, #8]
 8005c98:	691a      	ldr	r2, [r3, #16]
 8005c9a:	68fb      	ldr	r3, [r7, #12]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	430a      	orrs	r2, r1
 8005ca0:	619a      	str	r2, [r3, #24]
      break;
 8005ca2:	e062      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8005ca4:	68fb      	ldr	r3, [r7, #12]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	68b9      	ldr	r1, [r7, #8]
 8005caa:	4618      	mov	r0, r3
 8005cac:	f000 fa3c 	bl	8006128 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8005cb0:	68fb      	ldr	r3, [r7, #12]
 8005cb2:	681b      	ldr	r3, [r3, #0]
 8005cb4:	699a      	ldr	r2, [r3, #24]
 8005cb6:	68fb      	ldr	r3, [r7, #12]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cbe:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8005cc0:	68fb      	ldr	r3, [r7, #12]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	699a      	ldr	r2, [r3, #24]
 8005cc6:	68fb      	ldr	r3, [r7, #12]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cce:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8005cd0:	68fb      	ldr	r3, [r7, #12]
 8005cd2:	681b      	ldr	r3, [r3, #0]
 8005cd4:	6999      	ldr	r1, [r3, #24]
 8005cd6:	68bb      	ldr	r3, [r7, #8]
 8005cd8:	691b      	ldr	r3, [r3, #16]
 8005cda:	021a      	lsls	r2, r3, #8
 8005cdc:	68fb      	ldr	r3, [r7, #12]
 8005cde:	681b      	ldr	r3, [r3, #0]
 8005ce0:	430a      	orrs	r2, r1
 8005ce2:	619a      	str	r2, [r3, #24]
      break;
 8005ce4:	e041      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8005ce6:	68fb      	ldr	r3, [r7, #12]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	68b9      	ldr	r1, [r7, #8]
 8005cec:	4618      	mov	r0, r3
 8005cee:	f000 fa87 	bl	8006200 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8005cf2:	68fb      	ldr	r3, [r7, #12]
 8005cf4:	681b      	ldr	r3, [r3, #0]
 8005cf6:	69da      	ldr	r2, [r3, #28]
 8005cf8:	68fb      	ldr	r3, [r7, #12]
 8005cfa:	681b      	ldr	r3, [r3, #0]
 8005cfc:	f042 0208 	orr.w	r2, r2, #8
 8005d00:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8005d02:	68fb      	ldr	r3, [r7, #12]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	69da      	ldr	r2, [r3, #28]
 8005d08:	68fb      	ldr	r3, [r7, #12]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	f022 0204 	bic.w	r2, r2, #4
 8005d10:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8005d12:	68fb      	ldr	r3, [r7, #12]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	69d9      	ldr	r1, [r3, #28]
 8005d18:	68bb      	ldr	r3, [r7, #8]
 8005d1a:	691a      	ldr	r2, [r3, #16]
 8005d1c:	68fb      	ldr	r3, [r7, #12]
 8005d1e:	681b      	ldr	r3, [r3, #0]
 8005d20:	430a      	orrs	r2, r1
 8005d22:	61da      	str	r2, [r3, #28]
      break;
 8005d24:	e021      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8005d26:	68fb      	ldr	r3, [r7, #12]
 8005d28:	681b      	ldr	r3, [r3, #0]
 8005d2a:	68b9      	ldr	r1, [r7, #8]
 8005d2c:	4618      	mov	r0, r3
 8005d2e:	f000 fad1 	bl	80062d4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8005d32:	68fb      	ldr	r3, [r7, #12]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	69da      	ldr	r2, [r3, #28]
 8005d38:	68fb      	ldr	r3, [r7, #12]
 8005d3a:	681b      	ldr	r3, [r3, #0]
 8005d3c:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005d40:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8005d42:	68fb      	ldr	r3, [r7, #12]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	69da      	ldr	r2, [r3, #28]
 8005d48:	68fb      	ldr	r3, [r7, #12]
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d50:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8005d52:	68fb      	ldr	r3, [r7, #12]
 8005d54:	681b      	ldr	r3, [r3, #0]
 8005d56:	69d9      	ldr	r1, [r3, #28]
 8005d58:	68bb      	ldr	r3, [r7, #8]
 8005d5a:	691b      	ldr	r3, [r3, #16]
 8005d5c:	021a      	lsls	r2, r3, #8
 8005d5e:	68fb      	ldr	r3, [r7, #12]
 8005d60:	681b      	ldr	r3, [r3, #0]
 8005d62:	430a      	orrs	r2, r1
 8005d64:	61da      	str	r2, [r3, #28]
      break;
 8005d66:	e000      	b.n	8005d6a <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8005d68:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8005d6a:	68fb      	ldr	r3, [r7, #12]
 8005d6c:	2201      	movs	r2, #1
 8005d6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005d72:	68fb      	ldr	r3, [r7, #12]
 8005d74:	2200      	movs	r2, #0
 8005d76:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005d7a:	2300      	movs	r3, #0
}
 8005d7c:	4618      	mov	r0, r3
 8005d7e:	3710      	adds	r7, #16
 8005d80:	46bd      	mov	sp, r7
 8005d82:	bd80      	pop	{r7, pc}

08005d84 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8005d84:	b580      	push	{r7, lr}
 8005d86:	b084      	sub	sp, #16
 8005d88:	af00      	add	r7, sp, #0
 8005d8a:	6078      	str	r0, [r7, #4]
 8005d8c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8005d8e:	687b      	ldr	r3, [r7, #4]
 8005d90:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8005d94:	2b01      	cmp	r3, #1
 8005d96:	d101      	bne.n	8005d9c <HAL_TIM_ConfigClockSource+0x18>
 8005d98:	2302      	movs	r3, #2
 8005d9a:	e0b3      	b.n	8005f04 <HAL_TIM_ConfigClockSource+0x180>
 8005d9c:	687b      	ldr	r3, [r7, #4]
 8005d9e:	2201      	movs	r2, #1
 8005da0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	2202      	movs	r2, #2
 8005da8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8005dac:	687b      	ldr	r3, [r7, #4]
 8005dae:	681b      	ldr	r3, [r3, #0]
 8005db0:	689b      	ldr	r3, [r3, #8]
 8005db2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8005db4:	68fb      	ldr	r3, [r7, #12]
 8005db6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8005dba:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8005dbc:	68fb      	ldr	r3, [r7, #12]
 8005dbe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8005dc2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	681b      	ldr	r3, [r3, #0]
 8005dc8:	68fa      	ldr	r2, [r7, #12]
 8005dca:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8005dcc:	683b      	ldr	r3, [r7, #0]
 8005dce:	681b      	ldr	r3, [r3, #0]
 8005dd0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dd4:	d03e      	beq.n	8005e54 <HAL_TIM_ConfigClockSource+0xd0>
 8005dd6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8005dda:	f200 8087 	bhi.w	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005dde:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005de2:	f000 8085 	beq.w	8005ef0 <HAL_TIM_ConfigClockSource+0x16c>
 8005de6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8005dea:	d87f      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005dec:	2b70      	cmp	r3, #112	; 0x70
 8005dee:	d01a      	beq.n	8005e26 <HAL_TIM_ConfigClockSource+0xa2>
 8005df0:	2b70      	cmp	r3, #112	; 0x70
 8005df2:	d87b      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005df4:	2b60      	cmp	r3, #96	; 0x60
 8005df6:	d050      	beq.n	8005e9a <HAL_TIM_ConfigClockSource+0x116>
 8005df8:	2b60      	cmp	r3, #96	; 0x60
 8005dfa:	d877      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005dfc:	2b50      	cmp	r3, #80	; 0x50
 8005dfe:	d03c      	beq.n	8005e7a <HAL_TIM_ConfigClockSource+0xf6>
 8005e00:	2b50      	cmp	r3, #80	; 0x50
 8005e02:	d873      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005e04:	2b40      	cmp	r3, #64	; 0x40
 8005e06:	d058      	beq.n	8005eba <HAL_TIM_ConfigClockSource+0x136>
 8005e08:	2b40      	cmp	r3, #64	; 0x40
 8005e0a:	d86f      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005e0c:	2b30      	cmp	r3, #48	; 0x30
 8005e0e:	d064      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x156>
 8005e10:	2b30      	cmp	r3, #48	; 0x30
 8005e12:	d86b      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005e14:	2b20      	cmp	r3, #32
 8005e16:	d060      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x156>
 8005e18:	2b20      	cmp	r3, #32
 8005e1a:	d867      	bhi.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d05c      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x156>
 8005e20:	2b10      	cmp	r3, #16
 8005e22:	d05a      	beq.n	8005eda <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 8005e24:	e062      	b.n	8005eec <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	6818      	ldr	r0, [r3, #0]
 8005e2a:	683b      	ldr	r3, [r7, #0]
 8005e2c:	6899      	ldr	r1, [r3, #8]
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	685a      	ldr	r2, [r3, #4]
 8005e32:	683b      	ldr	r3, [r7, #0]
 8005e34:	68db      	ldr	r3, [r3, #12]
 8005e36:	f000 fb17 	bl	8006468 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8005e3a:	687b      	ldr	r3, [r7, #4]
 8005e3c:	681b      	ldr	r3, [r3, #0]
 8005e3e:	689b      	ldr	r3, [r3, #8]
 8005e40:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8005e42:	68fb      	ldr	r3, [r7, #12]
 8005e44:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8005e48:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	68fa      	ldr	r2, [r7, #12]
 8005e50:	609a      	str	r2, [r3, #8]
      break;
 8005e52:	e04e      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	6818      	ldr	r0, [r3, #0]
 8005e58:	683b      	ldr	r3, [r7, #0]
 8005e5a:	6899      	ldr	r1, [r3, #8]
 8005e5c:	683b      	ldr	r3, [r7, #0]
 8005e5e:	685a      	ldr	r2, [r3, #4]
 8005e60:	683b      	ldr	r3, [r7, #0]
 8005e62:	68db      	ldr	r3, [r3, #12]
 8005e64:	f000 fb00 	bl	8006468 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8005e68:	687b      	ldr	r3, [r7, #4]
 8005e6a:	681b      	ldr	r3, [r3, #0]
 8005e6c:	689a      	ldr	r2, [r3, #8]
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8005e76:	609a      	str	r2, [r3, #8]
      break;
 8005e78:	e03b      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005e7a:	687b      	ldr	r3, [r7, #4]
 8005e7c:	6818      	ldr	r0, [r3, #0]
 8005e7e:	683b      	ldr	r3, [r7, #0]
 8005e80:	6859      	ldr	r1, [r3, #4]
 8005e82:	683b      	ldr	r3, [r7, #0]
 8005e84:	68db      	ldr	r3, [r3, #12]
 8005e86:	461a      	mov	r2, r3
 8005e88:	f000 fa74 	bl	8006374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	2150      	movs	r1, #80	; 0x50
 8005e92:	4618      	mov	r0, r3
 8005e94:	f000 facd 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005e98:	e02b      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	6818      	ldr	r0, [r3, #0]
 8005e9e:	683b      	ldr	r3, [r7, #0]
 8005ea0:	6859      	ldr	r1, [r3, #4]
 8005ea2:	683b      	ldr	r3, [r7, #0]
 8005ea4:	68db      	ldr	r3, [r3, #12]
 8005ea6:	461a      	mov	r2, r3
 8005ea8:	f000 fa93 	bl	80063d2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8005eac:	687b      	ldr	r3, [r7, #4]
 8005eae:	681b      	ldr	r3, [r3, #0]
 8005eb0:	2160      	movs	r1, #96	; 0x60
 8005eb2:	4618      	mov	r0, r3
 8005eb4:	f000 fabd 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005eb8:	e01b      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	6818      	ldr	r0, [r3, #0]
 8005ebe:	683b      	ldr	r3, [r7, #0]
 8005ec0:	6859      	ldr	r1, [r3, #4]
 8005ec2:	683b      	ldr	r3, [r7, #0]
 8005ec4:	68db      	ldr	r3, [r3, #12]
 8005ec6:	461a      	mov	r2, r3
 8005ec8:	f000 fa54 	bl	8006374 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	2140      	movs	r1, #64	; 0x40
 8005ed2:	4618      	mov	r0, r3
 8005ed4:	f000 faad 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005ed8:	e00b      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	681a      	ldr	r2, [r3, #0]
 8005ede:	683b      	ldr	r3, [r7, #0]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	4619      	mov	r1, r3
 8005ee4:	4610      	mov	r0, r2
 8005ee6:	f000 faa4 	bl	8006432 <TIM_ITRx_SetConfig>
      break;
 8005eea:	e002      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005eec:	bf00      	nop
 8005eee:	e000      	b.n	8005ef2 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8005ef0:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	2201      	movs	r2, #1
 8005ef6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8005f02:	2300      	movs	r3, #0
}
 8005f04:	4618      	mov	r0, r3
 8005f06:	3710      	adds	r7, #16
 8005f08:	46bd      	mov	sp, r7
 8005f0a:	bd80      	pop	{r7, pc}

08005f0c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8005f0c:	b480      	push	{r7}
 8005f0e:	b083      	sub	sp, #12
 8005f10:	af00      	add	r7, sp, #0
 8005f12:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8005f14:	bf00      	nop
 8005f16:	370c      	adds	r7, #12
 8005f18:	46bd      	mov	sp, r7
 8005f1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f1e:	4770      	bx	lr

08005f20 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8005f20:	b480      	push	{r7}
 8005f22:	b083      	sub	sp, #12
 8005f24:	af00      	add	r7, sp, #0
 8005f26:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8005f28:	bf00      	nop
 8005f2a:	370c      	adds	r7, #12
 8005f2c:	46bd      	mov	sp, r7
 8005f2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f32:	4770      	bx	lr

08005f34 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8005f34:	b480      	push	{r7}
 8005f36:	b083      	sub	sp, #12
 8005f38:	af00      	add	r7, sp, #0
 8005f3a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8005f3c:	bf00      	nop
 8005f3e:	370c      	adds	r7, #12
 8005f40:	46bd      	mov	sp, r7
 8005f42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f46:	4770      	bx	lr

08005f48 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8005f48:	b480      	push	{r7}
 8005f4a:	b083      	sub	sp, #12
 8005f4c:	af00      	add	r7, sp, #0
 8005f4e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8005f50:	bf00      	nop
 8005f52:	370c      	adds	r7, #12
 8005f54:	46bd      	mov	sp, r7
 8005f56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f5a:	4770      	bx	lr

08005f5c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8005f5c:	b480      	push	{r7}
 8005f5e:	b085      	sub	sp, #20
 8005f60:	af00      	add	r7, sp, #0
 8005f62:	6078      	str	r0, [r7, #4]
 8005f64:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8005f66:	687b      	ldr	r3, [r7, #4]
 8005f68:	681b      	ldr	r3, [r3, #0]
 8005f6a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8005f6c:	687b      	ldr	r3, [r7, #4]
 8005f6e:	4a34      	ldr	r2, [pc, #208]	; (8006040 <TIM_Base_SetConfig+0xe4>)
 8005f70:	4293      	cmp	r3, r2
 8005f72:	d00f      	beq.n	8005f94 <TIM_Base_SetConfig+0x38>
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005f7a:	d00b      	beq.n	8005f94 <TIM_Base_SetConfig+0x38>
 8005f7c:	687b      	ldr	r3, [r7, #4]
 8005f7e:	4a31      	ldr	r2, [pc, #196]	; (8006044 <TIM_Base_SetConfig+0xe8>)
 8005f80:	4293      	cmp	r3, r2
 8005f82:	d007      	beq.n	8005f94 <TIM_Base_SetConfig+0x38>
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	4a30      	ldr	r2, [pc, #192]	; (8006048 <TIM_Base_SetConfig+0xec>)
 8005f88:	4293      	cmp	r3, r2
 8005f8a:	d003      	beq.n	8005f94 <TIM_Base_SetConfig+0x38>
 8005f8c:	687b      	ldr	r3, [r7, #4]
 8005f8e:	4a2f      	ldr	r2, [pc, #188]	; (800604c <TIM_Base_SetConfig+0xf0>)
 8005f90:	4293      	cmp	r3, r2
 8005f92:	d108      	bne.n	8005fa6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8005f94:	68fb      	ldr	r3, [r7, #12]
 8005f96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8005f9a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8005f9c:	683b      	ldr	r3, [r7, #0]
 8005f9e:	685b      	ldr	r3, [r3, #4]
 8005fa0:	68fa      	ldr	r2, [r7, #12]
 8005fa2:	4313      	orrs	r3, r2
 8005fa4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8005fa6:	687b      	ldr	r3, [r7, #4]
 8005fa8:	4a25      	ldr	r2, [pc, #148]	; (8006040 <TIM_Base_SetConfig+0xe4>)
 8005faa:	4293      	cmp	r3, r2
 8005fac:	d01b      	beq.n	8005fe6 <TIM_Base_SetConfig+0x8a>
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005fb4:	d017      	beq.n	8005fe6 <TIM_Base_SetConfig+0x8a>
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	4a22      	ldr	r2, [pc, #136]	; (8006044 <TIM_Base_SetConfig+0xe8>)
 8005fba:	4293      	cmp	r3, r2
 8005fbc:	d013      	beq.n	8005fe6 <TIM_Base_SetConfig+0x8a>
 8005fbe:	687b      	ldr	r3, [r7, #4]
 8005fc0:	4a21      	ldr	r2, [pc, #132]	; (8006048 <TIM_Base_SetConfig+0xec>)
 8005fc2:	4293      	cmp	r3, r2
 8005fc4:	d00f      	beq.n	8005fe6 <TIM_Base_SetConfig+0x8a>
 8005fc6:	687b      	ldr	r3, [r7, #4]
 8005fc8:	4a20      	ldr	r2, [pc, #128]	; (800604c <TIM_Base_SetConfig+0xf0>)
 8005fca:	4293      	cmp	r3, r2
 8005fcc:	d00b      	beq.n	8005fe6 <TIM_Base_SetConfig+0x8a>
 8005fce:	687b      	ldr	r3, [r7, #4]
 8005fd0:	4a1f      	ldr	r2, [pc, #124]	; (8006050 <TIM_Base_SetConfig+0xf4>)
 8005fd2:	4293      	cmp	r3, r2
 8005fd4:	d007      	beq.n	8005fe6 <TIM_Base_SetConfig+0x8a>
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	4a1e      	ldr	r2, [pc, #120]	; (8006054 <TIM_Base_SetConfig+0xf8>)
 8005fda:	4293      	cmp	r3, r2
 8005fdc:	d003      	beq.n	8005fe6 <TIM_Base_SetConfig+0x8a>
 8005fde:	687b      	ldr	r3, [r7, #4]
 8005fe0:	4a1d      	ldr	r2, [pc, #116]	; (8006058 <TIM_Base_SetConfig+0xfc>)
 8005fe2:	4293      	cmp	r3, r2
 8005fe4:	d108      	bne.n	8005ff8 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8005fe6:	68fb      	ldr	r3, [r7, #12]
 8005fe8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005fec:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8005fee:	683b      	ldr	r3, [r7, #0]
 8005ff0:	68db      	ldr	r3, [r3, #12]
 8005ff2:	68fa      	ldr	r2, [r7, #12]
 8005ff4:	4313      	orrs	r3, r2
 8005ff6:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8005ff8:	68fb      	ldr	r3, [r7, #12]
 8005ffa:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8005ffe:	683b      	ldr	r3, [r7, #0]
 8006000:	695b      	ldr	r3, [r3, #20]
 8006002:	4313      	orrs	r3, r2
 8006004:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	68fa      	ldr	r2, [r7, #12]
 800600a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800600c:	683b      	ldr	r3, [r7, #0]
 800600e:	689a      	ldr	r2, [r3, #8]
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8006014:	683b      	ldr	r3, [r7, #0]
 8006016:	681a      	ldr	r2, [r3, #0]
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 800601c:	687b      	ldr	r3, [r7, #4]
 800601e:	4a08      	ldr	r2, [pc, #32]	; (8006040 <TIM_Base_SetConfig+0xe4>)
 8006020:	4293      	cmp	r3, r2
 8006022:	d103      	bne.n	800602c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8006024:	683b      	ldr	r3, [r7, #0]
 8006026:	691a      	ldr	r2, [r3, #16]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	2201      	movs	r2, #1
 8006030:	615a      	str	r2, [r3, #20]
}
 8006032:	bf00      	nop
 8006034:	3714      	adds	r7, #20
 8006036:	46bd      	mov	sp, r7
 8006038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800603c:	4770      	bx	lr
 800603e:	bf00      	nop
 8006040:	40010000 	.word	0x40010000
 8006044:	40000400 	.word	0x40000400
 8006048:	40000800 	.word	0x40000800
 800604c:	40000c00 	.word	0x40000c00
 8006050:	40014000 	.word	0x40014000
 8006054:	40014400 	.word	0x40014400
 8006058:	40014800 	.word	0x40014800

0800605c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800605c:	b480      	push	{r7}
 800605e:	b087      	sub	sp, #28
 8006060:	af00      	add	r7, sp, #0
 8006062:	6078      	str	r0, [r7, #4]
 8006064:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6a1b      	ldr	r3, [r3, #32]
 800606a:	f023 0201 	bic.w	r2, r3, #1
 800606e:	687b      	ldr	r3, [r7, #4]
 8006070:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006072:	687b      	ldr	r3, [r7, #4]
 8006074:	6a1b      	ldr	r3, [r3, #32]
 8006076:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006078:	687b      	ldr	r3, [r7, #4]
 800607a:	685b      	ldr	r3, [r3, #4]
 800607c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	699b      	ldr	r3, [r3, #24]
 8006082:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006084:	68fb      	ldr	r3, [r7, #12]
 8006086:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800608a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800608c:	68fb      	ldr	r3, [r7, #12]
 800608e:	f023 0303 	bic.w	r3, r3, #3
 8006092:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006094:	683b      	ldr	r3, [r7, #0]
 8006096:	681b      	ldr	r3, [r3, #0]
 8006098:	68fa      	ldr	r2, [r7, #12]
 800609a:	4313      	orrs	r3, r2
 800609c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800609e:	697b      	ldr	r3, [r7, #20]
 80060a0:	f023 0302 	bic.w	r3, r3, #2
 80060a4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80060a6:	683b      	ldr	r3, [r7, #0]
 80060a8:	689b      	ldr	r3, [r3, #8]
 80060aa:	697a      	ldr	r2, [r7, #20]
 80060ac:	4313      	orrs	r3, r2
 80060ae:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80060b0:	687b      	ldr	r3, [r7, #4]
 80060b2:	4a1c      	ldr	r2, [pc, #112]	; (8006124 <TIM_OC1_SetConfig+0xc8>)
 80060b4:	4293      	cmp	r3, r2
 80060b6:	d10c      	bne.n	80060d2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80060b8:	697b      	ldr	r3, [r7, #20]
 80060ba:	f023 0308 	bic.w	r3, r3, #8
 80060be:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80060c0:	683b      	ldr	r3, [r7, #0]
 80060c2:	68db      	ldr	r3, [r3, #12]
 80060c4:	697a      	ldr	r2, [r7, #20]
 80060c6:	4313      	orrs	r3, r2
 80060c8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80060ca:	697b      	ldr	r3, [r7, #20]
 80060cc:	f023 0304 	bic.w	r3, r3, #4
 80060d0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	4a13      	ldr	r2, [pc, #76]	; (8006124 <TIM_OC1_SetConfig+0xc8>)
 80060d6:	4293      	cmp	r3, r2
 80060d8:	d111      	bne.n	80060fe <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80060da:	693b      	ldr	r3, [r7, #16]
 80060dc:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80060e0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80060e2:	693b      	ldr	r3, [r7, #16]
 80060e4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80060e8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80060ea:	683b      	ldr	r3, [r7, #0]
 80060ec:	695b      	ldr	r3, [r3, #20]
 80060ee:	693a      	ldr	r2, [r7, #16]
 80060f0:	4313      	orrs	r3, r2
 80060f2:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80060f4:	683b      	ldr	r3, [r7, #0]
 80060f6:	699b      	ldr	r3, [r3, #24]
 80060f8:	693a      	ldr	r2, [r7, #16]
 80060fa:	4313      	orrs	r3, r2
 80060fc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	693a      	ldr	r2, [r7, #16]
 8006102:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8006104:	687b      	ldr	r3, [r7, #4]
 8006106:	68fa      	ldr	r2, [r7, #12]
 8006108:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800610a:	683b      	ldr	r3, [r7, #0]
 800610c:	685a      	ldr	r2, [r3, #4]
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006112:	687b      	ldr	r3, [r7, #4]
 8006114:	697a      	ldr	r2, [r7, #20]
 8006116:	621a      	str	r2, [r3, #32]
}
 8006118:	bf00      	nop
 800611a:	371c      	adds	r7, #28
 800611c:	46bd      	mov	sp, r7
 800611e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006122:	4770      	bx	lr
 8006124:	40010000 	.word	0x40010000

08006128 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006128:	b480      	push	{r7}
 800612a:	b087      	sub	sp, #28
 800612c:	af00      	add	r7, sp, #0
 800612e:	6078      	str	r0, [r7, #4]
 8006130:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	6a1b      	ldr	r3, [r3, #32]
 8006136:	f023 0210 	bic.w	r2, r3, #16
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800613e:	687b      	ldr	r3, [r7, #4]
 8006140:	6a1b      	ldr	r3, [r3, #32]
 8006142:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006144:	687b      	ldr	r3, [r7, #4]
 8006146:	685b      	ldr	r3, [r3, #4]
 8006148:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	699b      	ldr	r3, [r3, #24]
 800614e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006150:	68fb      	ldr	r3, [r7, #12]
 8006152:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006156:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8006158:	68fb      	ldr	r3, [r7, #12]
 800615a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800615e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006160:	683b      	ldr	r3, [r7, #0]
 8006162:	681b      	ldr	r3, [r3, #0]
 8006164:	021b      	lsls	r3, r3, #8
 8006166:	68fa      	ldr	r2, [r7, #12]
 8006168:	4313      	orrs	r3, r2
 800616a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 800616c:	697b      	ldr	r3, [r7, #20]
 800616e:	f023 0320 	bic.w	r3, r3, #32
 8006172:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006174:	683b      	ldr	r3, [r7, #0]
 8006176:	689b      	ldr	r3, [r3, #8]
 8006178:	011b      	lsls	r3, r3, #4
 800617a:	697a      	ldr	r2, [r7, #20]
 800617c:	4313      	orrs	r3, r2
 800617e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006180:	687b      	ldr	r3, [r7, #4]
 8006182:	4a1e      	ldr	r2, [pc, #120]	; (80061fc <TIM_OC2_SetConfig+0xd4>)
 8006184:	4293      	cmp	r3, r2
 8006186:	d10d      	bne.n	80061a4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8006188:	697b      	ldr	r3, [r7, #20]
 800618a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800618e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006190:	683b      	ldr	r3, [r7, #0]
 8006192:	68db      	ldr	r3, [r3, #12]
 8006194:	011b      	lsls	r3, r3, #4
 8006196:	697a      	ldr	r2, [r7, #20]
 8006198:	4313      	orrs	r3, r2
 800619a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800619c:	697b      	ldr	r3, [r7, #20]
 800619e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80061a2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	4a15      	ldr	r2, [pc, #84]	; (80061fc <TIM_OC2_SetConfig+0xd4>)
 80061a8:	4293      	cmp	r3, r2
 80061aa:	d113      	bne.n	80061d4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80061ac:	693b      	ldr	r3, [r7, #16]
 80061ae:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80061b2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80061b4:	693b      	ldr	r3, [r7, #16]
 80061b6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80061ba:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80061bc:	683b      	ldr	r3, [r7, #0]
 80061be:	695b      	ldr	r3, [r3, #20]
 80061c0:	009b      	lsls	r3, r3, #2
 80061c2:	693a      	ldr	r2, [r7, #16]
 80061c4:	4313      	orrs	r3, r2
 80061c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80061c8:	683b      	ldr	r3, [r7, #0]
 80061ca:	699b      	ldr	r3, [r3, #24]
 80061cc:	009b      	lsls	r3, r3, #2
 80061ce:	693a      	ldr	r2, [r7, #16]
 80061d0:	4313      	orrs	r3, r2
 80061d2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	693a      	ldr	r2, [r7, #16]
 80061d8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	68fa      	ldr	r2, [r7, #12]
 80061de:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80061e0:	683b      	ldr	r3, [r7, #0]
 80061e2:	685a      	ldr	r2, [r3, #4]
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	697a      	ldr	r2, [r7, #20]
 80061ec:	621a      	str	r2, [r3, #32]
}
 80061ee:	bf00      	nop
 80061f0:	371c      	adds	r7, #28
 80061f2:	46bd      	mov	sp, r7
 80061f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80061f8:	4770      	bx	lr
 80061fa:	bf00      	nop
 80061fc:	40010000 	.word	0x40010000

08006200 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006200:	b480      	push	{r7}
 8006202:	b087      	sub	sp, #28
 8006204:	af00      	add	r7, sp, #0
 8006206:	6078      	str	r0, [r7, #4]
 8006208:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	6a1b      	ldr	r3, [r3, #32]
 800620e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006216:	687b      	ldr	r3, [r7, #4]
 8006218:	6a1b      	ldr	r3, [r3, #32]
 800621a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	685b      	ldr	r3, [r3, #4]
 8006220:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	69db      	ldr	r3, [r3, #28]
 8006226:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8006228:	68fb      	ldr	r3, [r7, #12]
 800622a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800622e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006230:	68fb      	ldr	r3, [r7, #12]
 8006232:	f023 0303 	bic.w	r3, r3, #3
 8006236:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006238:	683b      	ldr	r3, [r7, #0]
 800623a:	681b      	ldr	r3, [r3, #0]
 800623c:	68fa      	ldr	r2, [r7, #12]
 800623e:	4313      	orrs	r3, r2
 8006240:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006242:	697b      	ldr	r3, [r7, #20]
 8006244:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8006248:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800624a:	683b      	ldr	r3, [r7, #0]
 800624c:	689b      	ldr	r3, [r3, #8]
 800624e:	021b      	lsls	r3, r3, #8
 8006250:	697a      	ldr	r2, [r7, #20]
 8006252:	4313      	orrs	r3, r2
 8006254:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	4a1d      	ldr	r2, [pc, #116]	; (80062d0 <TIM_OC3_SetConfig+0xd0>)
 800625a:	4293      	cmp	r3, r2
 800625c:	d10d      	bne.n	800627a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 800625e:	697b      	ldr	r3, [r7, #20]
 8006260:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006264:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8006266:	683b      	ldr	r3, [r7, #0]
 8006268:	68db      	ldr	r3, [r3, #12]
 800626a:	021b      	lsls	r3, r3, #8
 800626c:	697a      	ldr	r2, [r7, #20]
 800626e:	4313      	orrs	r3, r2
 8006270:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006272:	697b      	ldr	r3, [r7, #20]
 8006274:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006278:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800627a:	687b      	ldr	r3, [r7, #4]
 800627c:	4a14      	ldr	r2, [pc, #80]	; (80062d0 <TIM_OC3_SetConfig+0xd0>)
 800627e:	4293      	cmp	r3, r2
 8006280:	d113      	bne.n	80062aa <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006282:	693b      	ldr	r3, [r7, #16]
 8006284:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8006288:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800628a:	693b      	ldr	r3, [r7, #16]
 800628c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006290:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006292:	683b      	ldr	r3, [r7, #0]
 8006294:	695b      	ldr	r3, [r3, #20]
 8006296:	011b      	lsls	r3, r3, #4
 8006298:	693a      	ldr	r2, [r7, #16]
 800629a:	4313      	orrs	r3, r2
 800629c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800629e:	683b      	ldr	r3, [r7, #0]
 80062a0:	699b      	ldr	r3, [r3, #24]
 80062a2:	011b      	lsls	r3, r3, #4
 80062a4:	693a      	ldr	r2, [r7, #16]
 80062a6:	4313      	orrs	r3, r2
 80062a8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	693a      	ldr	r2, [r7, #16]
 80062ae:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	68fa      	ldr	r2, [r7, #12]
 80062b4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80062b6:	683b      	ldr	r3, [r7, #0]
 80062b8:	685a      	ldr	r2, [r3, #4]
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80062be:	687b      	ldr	r3, [r7, #4]
 80062c0:	697a      	ldr	r2, [r7, #20]
 80062c2:	621a      	str	r2, [r3, #32]
}
 80062c4:	bf00      	nop
 80062c6:	371c      	adds	r7, #28
 80062c8:	46bd      	mov	sp, r7
 80062ca:	f85d 7b04 	ldr.w	r7, [sp], #4
 80062ce:	4770      	bx	lr
 80062d0:	40010000 	.word	0x40010000

080062d4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80062d4:	b480      	push	{r7}
 80062d6:	b087      	sub	sp, #28
 80062d8:	af00      	add	r7, sp, #0
 80062da:	6078      	str	r0, [r7, #4]
 80062dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	6a1b      	ldr	r3, [r3, #32]
 80062e2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80062ea:	687b      	ldr	r3, [r7, #4]
 80062ec:	6a1b      	ldr	r3, [r3, #32]
 80062ee:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	685b      	ldr	r3, [r3, #4]
 80062f4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80062f6:	687b      	ldr	r3, [r7, #4]
 80062f8:	69db      	ldr	r3, [r3, #28]
 80062fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80062fc:	68fb      	ldr	r3, [r7, #12]
 80062fe:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8006302:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8006304:	68fb      	ldr	r3, [r7, #12]
 8006306:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800630a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800630c:	683b      	ldr	r3, [r7, #0]
 800630e:	681b      	ldr	r3, [r3, #0]
 8006310:	021b      	lsls	r3, r3, #8
 8006312:	68fa      	ldr	r2, [r7, #12]
 8006314:	4313      	orrs	r3, r2
 8006316:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8006318:	693b      	ldr	r3, [r7, #16]
 800631a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800631e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8006320:	683b      	ldr	r3, [r7, #0]
 8006322:	689b      	ldr	r3, [r3, #8]
 8006324:	031b      	lsls	r3, r3, #12
 8006326:	693a      	ldr	r2, [r7, #16]
 8006328:	4313      	orrs	r3, r2
 800632a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800632c:	687b      	ldr	r3, [r7, #4]
 800632e:	4a10      	ldr	r2, [pc, #64]	; (8006370 <TIM_OC4_SetConfig+0x9c>)
 8006330:	4293      	cmp	r3, r2
 8006332:	d109      	bne.n	8006348 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006334:	697b      	ldr	r3, [r7, #20]
 8006336:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800633a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800633c:	683b      	ldr	r3, [r7, #0]
 800633e:	695b      	ldr	r3, [r3, #20]
 8006340:	019b      	lsls	r3, r3, #6
 8006342:	697a      	ldr	r2, [r7, #20]
 8006344:	4313      	orrs	r3, r2
 8006346:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8006348:	687b      	ldr	r3, [r7, #4]
 800634a:	697a      	ldr	r2, [r7, #20]
 800634c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800634e:	687b      	ldr	r3, [r7, #4]
 8006350:	68fa      	ldr	r2, [r7, #12]
 8006352:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006354:	683b      	ldr	r3, [r7, #0]
 8006356:	685a      	ldr	r2, [r3, #4]
 8006358:	687b      	ldr	r3, [r7, #4]
 800635a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	693a      	ldr	r2, [r7, #16]
 8006360:	621a      	str	r2, [r3, #32]
}
 8006362:	bf00      	nop
 8006364:	371c      	adds	r7, #28
 8006366:	46bd      	mov	sp, r7
 8006368:	f85d 7b04 	ldr.w	r7, [sp], #4
 800636c:	4770      	bx	lr
 800636e:	bf00      	nop
 8006370:	40010000 	.word	0x40010000

08006374 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006374:	b480      	push	{r7}
 8006376:	b087      	sub	sp, #28
 8006378:	af00      	add	r7, sp, #0
 800637a:	60f8      	str	r0, [r7, #12]
 800637c:	60b9      	str	r1, [r7, #8]
 800637e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006380:	68fb      	ldr	r3, [r7, #12]
 8006382:	6a1b      	ldr	r3, [r3, #32]
 8006384:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8006386:	68fb      	ldr	r3, [r7, #12]
 8006388:	6a1b      	ldr	r3, [r3, #32]
 800638a:	f023 0201 	bic.w	r2, r3, #1
 800638e:	68fb      	ldr	r3, [r7, #12]
 8006390:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006392:	68fb      	ldr	r3, [r7, #12]
 8006394:	699b      	ldr	r3, [r3, #24]
 8006396:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8006398:	693b      	ldr	r3, [r7, #16]
 800639a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800639e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	011b      	lsls	r3, r3, #4
 80063a4:	693a      	ldr	r2, [r7, #16]
 80063a6:	4313      	orrs	r3, r2
 80063a8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80063aa:	697b      	ldr	r3, [r7, #20]
 80063ac:	f023 030a 	bic.w	r3, r3, #10
 80063b0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80063b2:	697a      	ldr	r2, [r7, #20]
 80063b4:	68bb      	ldr	r3, [r7, #8]
 80063b6:	4313      	orrs	r3, r2
 80063b8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80063ba:	68fb      	ldr	r3, [r7, #12]
 80063bc:	693a      	ldr	r2, [r7, #16]
 80063be:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80063c0:	68fb      	ldr	r3, [r7, #12]
 80063c2:	697a      	ldr	r2, [r7, #20]
 80063c4:	621a      	str	r2, [r3, #32]
}
 80063c6:	bf00      	nop
 80063c8:	371c      	adds	r7, #28
 80063ca:	46bd      	mov	sp, r7
 80063cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80063d0:	4770      	bx	lr

080063d2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80063d2:	b480      	push	{r7}
 80063d4:	b087      	sub	sp, #28
 80063d6:	af00      	add	r7, sp, #0
 80063d8:	60f8      	str	r0, [r7, #12]
 80063da:	60b9      	str	r1, [r7, #8]
 80063dc:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80063de:	68fb      	ldr	r3, [r7, #12]
 80063e0:	6a1b      	ldr	r3, [r3, #32]
 80063e2:	f023 0210 	bic.w	r2, r3, #16
 80063e6:	68fb      	ldr	r3, [r7, #12]
 80063e8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80063ea:	68fb      	ldr	r3, [r7, #12]
 80063ec:	699b      	ldr	r3, [r3, #24]
 80063ee:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80063f0:	68fb      	ldr	r3, [r7, #12]
 80063f2:	6a1b      	ldr	r3, [r3, #32]
 80063f4:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80063f6:	697b      	ldr	r3, [r7, #20]
 80063f8:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80063fc:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	031b      	lsls	r3, r3, #12
 8006402:	697a      	ldr	r2, [r7, #20]
 8006404:	4313      	orrs	r3, r2
 8006406:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8006408:	693b      	ldr	r3, [r7, #16]
 800640a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800640e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8006410:	68bb      	ldr	r3, [r7, #8]
 8006412:	011b      	lsls	r3, r3, #4
 8006414:	693a      	ldr	r2, [r7, #16]
 8006416:	4313      	orrs	r3, r2
 8006418:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800641a:	68fb      	ldr	r3, [r7, #12]
 800641c:	697a      	ldr	r2, [r7, #20]
 800641e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006420:	68fb      	ldr	r3, [r7, #12]
 8006422:	693a      	ldr	r2, [r7, #16]
 8006424:	621a      	str	r2, [r3, #32]
}
 8006426:	bf00      	nop
 8006428:	371c      	adds	r7, #28
 800642a:	46bd      	mov	sp, r7
 800642c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006430:	4770      	bx	lr

08006432 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006432:	b480      	push	{r7}
 8006434:	b085      	sub	sp, #20
 8006436:	af00      	add	r7, sp, #0
 8006438:	6078      	str	r0, [r7, #4]
 800643a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	689b      	ldr	r3, [r3, #8]
 8006440:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006442:	68fb      	ldr	r3, [r7, #12]
 8006444:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006448:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800644a:	683a      	ldr	r2, [r7, #0]
 800644c:	68fb      	ldr	r3, [r7, #12]
 800644e:	4313      	orrs	r3, r2
 8006450:	f043 0307 	orr.w	r3, r3, #7
 8006454:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006456:	687b      	ldr	r3, [r7, #4]
 8006458:	68fa      	ldr	r2, [r7, #12]
 800645a:	609a      	str	r2, [r3, #8]
}
 800645c:	bf00      	nop
 800645e:	3714      	adds	r7, #20
 8006460:	46bd      	mov	sp, r7
 8006462:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006466:	4770      	bx	lr

08006468 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006468:	b480      	push	{r7}
 800646a:	b087      	sub	sp, #28
 800646c:	af00      	add	r7, sp, #0
 800646e:	60f8      	str	r0, [r7, #12]
 8006470:	60b9      	str	r1, [r7, #8]
 8006472:	607a      	str	r2, [r7, #4]
 8006474:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006476:	68fb      	ldr	r3, [r7, #12]
 8006478:	689b      	ldr	r3, [r3, #8]
 800647a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800647c:	697b      	ldr	r3, [r7, #20]
 800647e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006482:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006484:	683b      	ldr	r3, [r7, #0]
 8006486:	021a      	lsls	r2, r3, #8
 8006488:	687b      	ldr	r3, [r7, #4]
 800648a:	431a      	orrs	r2, r3
 800648c:	68bb      	ldr	r3, [r7, #8]
 800648e:	4313      	orrs	r3, r2
 8006490:	697a      	ldr	r2, [r7, #20]
 8006492:	4313      	orrs	r3, r2
 8006494:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006496:	68fb      	ldr	r3, [r7, #12]
 8006498:	697a      	ldr	r2, [r7, #20]
 800649a:	609a      	str	r2, [r3, #8]
}
 800649c:	bf00      	nop
 800649e:	371c      	adds	r7, #28
 80064a0:	46bd      	mov	sp, r7
 80064a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064a6:	4770      	bx	lr

080064a8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80064a8:	b480      	push	{r7}
 80064aa:	b087      	sub	sp, #28
 80064ac:	af00      	add	r7, sp, #0
 80064ae:	60f8      	str	r0, [r7, #12]
 80064b0:	60b9      	str	r1, [r7, #8]
 80064b2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80064b4:	68bb      	ldr	r3, [r7, #8]
 80064b6:	f003 031f 	and.w	r3, r3, #31
 80064ba:	2201      	movs	r2, #1
 80064bc:	fa02 f303 	lsl.w	r3, r2, r3
 80064c0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80064c2:	68fb      	ldr	r3, [r7, #12]
 80064c4:	6a1a      	ldr	r2, [r3, #32]
 80064c6:	697b      	ldr	r3, [r7, #20]
 80064c8:	43db      	mvns	r3, r3
 80064ca:	401a      	ands	r2, r3
 80064cc:	68fb      	ldr	r3, [r7, #12]
 80064ce:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80064d0:	68fb      	ldr	r3, [r7, #12]
 80064d2:	6a1a      	ldr	r2, [r3, #32]
 80064d4:	68bb      	ldr	r3, [r7, #8]
 80064d6:	f003 031f 	and.w	r3, r3, #31
 80064da:	6879      	ldr	r1, [r7, #4]
 80064dc:	fa01 f303 	lsl.w	r3, r1, r3
 80064e0:	431a      	orrs	r2, r3
 80064e2:	68fb      	ldr	r3, [r7, #12]
 80064e4:	621a      	str	r2, [r3, #32]
}
 80064e6:	bf00      	nop
 80064e8:	371c      	adds	r7, #28
 80064ea:	46bd      	mov	sp, r7
 80064ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f0:	4770      	bx	lr
	...

080064f4 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b085      	sub	sp, #20
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
 80064fc:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006504:	2b01      	cmp	r3, #1
 8006506:	d101      	bne.n	800650c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006508:	2302      	movs	r3, #2
 800650a:	e050      	b.n	80065ae <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	2201      	movs	r2, #1
 8006510:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006514:	687b      	ldr	r3, [r7, #4]
 8006516:	2202      	movs	r2, #2
 8006518:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800651c:	687b      	ldr	r3, [r7, #4]
 800651e:	681b      	ldr	r3, [r3, #0]
 8006520:	685b      	ldr	r3, [r3, #4]
 8006522:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006524:	687b      	ldr	r3, [r7, #4]
 8006526:	681b      	ldr	r3, [r3, #0]
 8006528:	689b      	ldr	r3, [r3, #8]
 800652a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800652c:	68fb      	ldr	r3, [r7, #12]
 800652e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006532:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006534:	683b      	ldr	r3, [r7, #0]
 8006536:	681b      	ldr	r3, [r3, #0]
 8006538:	68fa      	ldr	r2, [r7, #12]
 800653a:	4313      	orrs	r3, r2
 800653c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	68fa      	ldr	r2, [r7, #12]
 8006544:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006546:	687b      	ldr	r3, [r7, #4]
 8006548:	681b      	ldr	r3, [r3, #0]
 800654a:	4a1c      	ldr	r2, [pc, #112]	; (80065bc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800654c:	4293      	cmp	r3, r2
 800654e:	d018      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	681b      	ldr	r3, [r3, #0]
 8006554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006558:	d013      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800655a:	687b      	ldr	r3, [r7, #4]
 800655c:	681b      	ldr	r3, [r3, #0]
 800655e:	4a18      	ldr	r2, [pc, #96]	; (80065c0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006560:	4293      	cmp	r3, r2
 8006562:	d00e      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006564:	687b      	ldr	r3, [r7, #4]
 8006566:	681b      	ldr	r3, [r3, #0]
 8006568:	4a16      	ldr	r2, [pc, #88]	; (80065c4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800656a:	4293      	cmp	r3, r2
 800656c:	d009      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	681b      	ldr	r3, [r3, #0]
 8006572:	4a15      	ldr	r2, [pc, #84]	; (80065c8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006574:	4293      	cmp	r3, r2
 8006576:	d004      	beq.n	8006582 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	4a13      	ldr	r2, [pc, #76]	; (80065cc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d10c      	bne.n	800659c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006582:	68bb      	ldr	r3, [r7, #8]
 8006584:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006588:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800658a:	683b      	ldr	r3, [r7, #0]
 800658c:	685b      	ldr	r3, [r3, #4]
 800658e:	68ba      	ldr	r2, [r7, #8]
 8006590:	4313      	orrs	r3, r2
 8006592:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	681b      	ldr	r3, [r3, #0]
 8006598:	68ba      	ldr	r2, [r7, #8]
 800659a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800659c:	687b      	ldr	r3, [r7, #4]
 800659e:	2201      	movs	r2, #1
 80065a0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	2200      	movs	r2, #0
 80065a8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80065ac:	2300      	movs	r3, #0
}
 80065ae:	4618      	mov	r0, r3
 80065b0:	3714      	adds	r7, #20
 80065b2:	46bd      	mov	sp, r7
 80065b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065b8:	4770      	bx	lr
 80065ba:	bf00      	nop
 80065bc:	40010000 	.word	0x40010000
 80065c0:	40000400 	.word	0x40000400
 80065c4:	40000800 	.word	0x40000800
 80065c8:	40000c00 	.word	0x40000c00
 80065cc:	40014000 	.word	0x40014000

080065d0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80065d0:	b480      	push	{r7}
 80065d2:	b083      	sub	sp, #12
 80065d4:	af00      	add	r7, sp, #0
 80065d6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80065d8:	bf00      	nop
 80065da:	370c      	adds	r7, #12
 80065dc:	46bd      	mov	sp, r7
 80065de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065e2:	4770      	bx	lr

080065e4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80065e4:	b480      	push	{r7}
 80065e6:	b083      	sub	sp, #12
 80065e8:	af00      	add	r7, sp, #0
 80065ea:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80065ec:	bf00      	nop
 80065ee:	370c      	adds	r7, #12
 80065f0:	46bd      	mov	sp, r7
 80065f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80065f6:	4770      	bx	lr

080065f8 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 80065f8:	b580      	push	{r7, lr}
 80065fa:	b082      	sub	sp, #8
 80065fc:	af00      	add	r7, sp, #0
 80065fe:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2b00      	cmp	r3, #0
 8006604:	d101      	bne.n	800660a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006606:	2301      	movs	r3, #1
 8006608:	e03f      	b.n	800668a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800660a:	687b      	ldr	r3, [r7, #4]
 800660c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 8006610:	b2db      	uxtb	r3, r3
 8006612:	2b00      	cmp	r3, #0
 8006614:	d106      	bne.n	8006624 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006616:	687b      	ldr	r3, [r7, #4]
 8006618:	2200      	movs	r2, #0
 800661a:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800661e:	6878      	ldr	r0, [r7, #4]
 8006620:	f7fc f9a0 	bl	8002964 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2224      	movs	r2, #36	; 0x24
 8006628:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	68da      	ldr	r2, [r3, #12]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	681b      	ldr	r3, [r3, #0]
 8006636:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800663a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800663c:	6878      	ldr	r0, [r7, #4]
 800663e:	f000 f829 	bl	8006694 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	681b      	ldr	r3, [r3, #0]
 8006646:	691a      	ldr	r2, [r3, #16]
 8006648:	687b      	ldr	r3, [r7, #4]
 800664a:	681b      	ldr	r3, [r3, #0]
 800664c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006650:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	681b      	ldr	r3, [r3, #0]
 8006656:	695a      	ldr	r2, [r3, #20]
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006660:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	68da      	ldr	r2, [r3, #12]
 8006668:	687b      	ldr	r3, [r7, #4]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006670:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006672:	687b      	ldr	r3, [r7, #4]
 8006674:	2200      	movs	r2, #0
 8006676:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	2220      	movs	r2, #32
 800667c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	2220      	movs	r2, #32
 8006684:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8006688:	2300      	movs	r3, #0
}
 800668a:	4618      	mov	r0, r3
 800668c:	3708      	adds	r7, #8
 800668e:	46bd      	mov	sp, r7
 8006690:	bd80      	pop	{r7, pc}
	...

08006694 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006694:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006698:	b0bd      	sub	sp, #244	; 0xf4
 800669a:	af00      	add	r7, sp, #0
 800669c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 80066a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066a4:	681b      	ldr	r3, [r3, #0]
 80066a6:	691b      	ldr	r3, [r3, #16]
 80066a8:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 80066ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b0:	68d9      	ldr	r1, [r3, #12]
 80066b2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066b6:	681a      	ldr	r2, [r3, #0]
 80066b8:	ea40 0301 	orr.w	r3, r0, r1
 80066bc:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 80066be:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c2:	689a      	ldr	r2, [r3, #8]
 80066c4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066c8:	691b      	ldr	r3, [r3, #16]
 80066ca:	431a      	orrs	r2, r3
 80066cc:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d0:	695b      	ldr	r3, [r3, #20]
 80066d2:	431a      	orrs	r2, r3
 80066d4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066d8:	69db      	ldr	r3, [r3, #28]
 80066da:	4313      	orrs	r3, r2
 80066dc:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 80066e0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066e4:	681b      	ldr	r3, [r3, #0]
 80066e6:	68db      	ldr	r3, [r3, #12]
 80066e8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 80066ec:	f021 010c 	bic.w	r1, r1, #12
 80066f0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80066f4:	681a      	ldr	r2, [r3, #0]
 80066f6:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 80066fa:	430b      	orrs	r3, r1
 80066fc:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 80066fe:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	695b      	ldr	r3, [r3, #20]
 8006706:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800670a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800670e:	6999      	ldr	r1, [r3, #24]
 8006710:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006714:	681a      	ldr	r2, [r3, #0]
 8006716:	ea40 0301 	orr.w	r3, r0, r1
 800671a:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 800671c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006720:	69db      	ldr	r3, [r3, #28]
 8006722:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006726:	f040 81a5 	bne.w	8006a74 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 800672a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800672e:	681a      	ldr	r2, [r3, #0]
 8006730:	4bcd      	ldr	r3, [pc, #820]	; (8006a68 <UART_SetConfig+0x3d4>)
 8006732:	429a      	cmp	r2, r3
 8006734:	d006      	beq.n	8006744 <UART_SetConfig+0xb0>
 8006736:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800673a:	681a      	ldr	r2, [r3, #0]
 800673c:	4bcb      	ldr	r3, [pc, #812]	; (8006a6c <UART_SetConfig+0x3d8>)
 800673e:	429a      	cmp	r2, r3
 8006740:	f040 80cb 	bne.w	80068da <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006744:	f7fe ff98 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 8006748:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 800674c:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006750:	461c      	mov	r4, r3
 8006752:	f04f 0500 	mov.w	r5, #0
 8006756:	4622      	mov	r2, r4
 8006758:	462b      	mov	r3, r5
 800675a:	1891      	adds	r1, r2, r2
 800675c:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 8006760:	415b      	adcs	r3, r3
 8006762:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 8006766:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 800676a:	1912      	adds	r2, r2, r4
 800676c:	eb45 0303 	adc.w	r3, r5, r3
 8006770:	f04f 0000 	mov.w	r0, #0
 8006774:	f04f 0100 	mov.w	r1, #0
 8006778:	00d9      	lsls	r1, r3, #3
 800677a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800677e:	00d0      	lsls	r0, r2, #3
 8006780:	4602      	mov	r2, r0
 8006782:	460b      	mov	r3, r1
 8006784:	1911      	adds	r1, r2, r4
 8006786:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 800678a:	416b      	adcs	r3, r5
 800678c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8006790:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006794:	685b      	ldr	r3, [r3, #4]
 8006796:	461a      	mov	r2, r3
 8006798:	f04f 0300 	mov.w	r3, #0
 800679c:	1891      	adds	r1, r2, r2
 800679e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 80067a2:	415b      	adcs	r3, r3
 80067a4:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 80067a8:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 80067ac:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 80067b0:	f7fa fadc 	bl	8000d6c <__aeabi_uldivmod>
 80067b4:	4602      	mov	r2, r0
 80067b6:	460b      	mov	r3, r1
 80067b8:	4bad      	ldr	r3, [pc, #692]	; (8006a70 <UART_SetConfig+0x3dc>)
 80067ba:	fba3 2302 	umull	r2, r3, r3, r2
 80067be:	095b      	lsrs	r3, r3, #5
 80067c0:	011e      	lsls	r6, r3, #4
 80067c2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80067c6:	461c      	mov	r4, r3
 80067c8:	f04f 0500 	mov.w	r5, #0
 80067cc:	4622      	mov	r2, r4
 80067ce:	462b      	mov	r3, r5
 80067d0:	1891      	adds	r1, r2, r2
 80067d2:	67b9      	str	r1, [r7, #120]	; 0x78
 80067d4:	415b      	adcs	r3, r3
 80067d6:	67fb      	str	r3, [r7, #124]	; 0x7c
 80067d8:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 80067dc:	1912      	adds	r2, r2, r4
 80067de:	eb45 0303 	adc.w	r3, r5, r3
 80067e2:	f04f 0000 	mov.w	r0, #0
 80067e6:	f04f 0100 	mov.w	r1, #0
 80067ea:	00d9      	lsls	r1, r3, #3
 80067ec:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80067f0:	00d0      	lsls	r0, r2, #3
 80067f2:	4602      	mov	r2, r0
 80067f4:	460b      	mov	r3, r1
 80067f6:	1911      	adds	r1, r2, r4
 80067f8:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 80067fc:	416b      	adcs	r3, r5
 80067fe:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8006802:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006806:	685b      	ldr	r3, [r3, #4]
 8006808:	461a      	mov	r2, r3
 800680a:	f04f 0300 	mov.w	r3, #0
 800680e:	1891      	adds	r1, r2, r2
 8006810:	6739      	str	r1, [r7, #112]	; 0x70
 8006812:	415b      	adcs	r3, r3
 8006814:	677b      	str	r3, [r7, #116]	; 0x74
 8006816:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 800681a:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 800681e:	f7fa faa5 	bl	8000d6c <__aeabi_uldivmod>
 8006822:	4602      	mov	r2, r0
 8006824:	460b      	mov	r3, r1
 8006826:	4b92      	ldr	r3, [pc, #584]	; (8006a70 <UART_SetConfig+0x3dc>)
 8006828:	fba3 1302 	umull	r1, r3, r3, r2
 800682c:	095b      	lsrs	r3, r3, #5
 800682e:	2164      	movs	r1, #100	; 0x64
 8006830:	fb01 f303 	mul.w	r3, r1, r3
 8006834:	1ad3      	subs	r3, r2, r3
 8006836:	00db      	lsls	r3, r3, #3
 8006838:	3332      	adds	r3, #50	; 0x32
 800683a:	4a8d      	ldr	r2, [pc, #564]	; (8006a70 <UART_SetConfig+0x3dc>)
 800683c:	fba2 2303 	umull	r2, r3, r2, r3
 8006840:	095b      	lsrs	r3, r3, #5
 8006842:	005b      	lsls	r3, r3, #1
 8006844:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006848:	441e      	add	r6, r3
 800684a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 800684e:	4618      	mov	r0, r3
 8006850:	f04f 0100 	mov.w	r1, #0
 8006854:	4602      	mov	r2, r0
 8006856:	460b      	mov	r3, r1
 8006858:	1894      	adds	r4, r2, r2
 800685a:	66bc      	str	r4, [r7, #104]	; 0x68
 800685c:	415b      	adcs	r3, r3
 800685e:	66fb      	str	r3, [r7, #108]	; 0x6c
 8006860:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8006864:	1812      	adds	r2, r2, r0
 8006866:	eb41 0303 	adc.w	r3, r1, r3
 800686a:	f04f 0400 	mov.w	r4, #0
 800686e:	f04f 0500 	mov.w	r5, #0
 8006872:	00dd      	lsls	r5, r3, #3
 8006874:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006878:	00d4      	lsls	r4, r2, #3
 800687a:	4622      	mov	r2, r4
 800687c:	462b      	mov	r3, r5
 800687e:	1814      	adds	r4, r2, r0
 8006880:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8006884:	414b      	adcs	r3, r1
 8006886:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 800688a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800688e:	685b      	ldr	r3, [r3, #4]
 8006890:	461a      	mov	r2, r3
 8006892:	f04f 0300 	mov.w	r3, #0
 8006896:	1891      	adds	r1, r2, r2
 8006898:	6639      	str	r1, [r7, #96]	; 0x60
 800689a:	415b      	adcs	r3, r3
 800689c:	667b      	str	r3, [r7, #100]	; 0x64
 800689e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 80068a2:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 80068a6:	f7fa fa61 	bl	8000d6c <__aeabi_uldivmod>
 80068aa:	4602      	mov	r2, r0
 80068ac:	460b      	mov	r3, r1
 80068ae:	4b70      	ldr	r3, [pc, #448]	; (8006a70 <UART_SetConfig+0x3dc>)
 80068b0:	fba3 1302 	umull	r1, r3, r3, r2
 80068b4:	095b      	lsrs	r3, r3, #5
 80068b6:	2164      	movs	r1, #100	; 0x64
 80068b8:	fb01 f303 	mul.w	r3, r1, r3
 80068bc:	1ad3      	subs	r3, r2, r3
 80068be:	00db      	lsls	r3, r3, #3
 80068c0:	3332      	adds	r3, #50	; 0x32
 80068c2:	4a6b      	ldr	r2, [pc, #428]	; (8006a70 <UART_SetConfig+0x3dc>)
 80068c4:	fba2 2303 	umull	r2, r3, r2, r3
 80068c8:	095b      	lsrs	r3, r3, #5
 80068ca:	f003 0207 	and.w	r2, r3, #7
 80068ce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80068d2:	681b      	ldr	r3, [r3, #0]
 80068d4:	4432      	add	r2, r6
 80068d6:	609a      	str	r2, [r3, #8]
 80068d8:	e26d      	b.n	8006db6 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 80068da:	f7fe feb9 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 80068de:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80068e2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80068e6:	461c      	mov	r4, r3
 80068e8:	f04f 0500 	mov.w	r5, #0
 80068ec:	4622      	mov	r2, r4
 80068ee:	462b      	mov	r3, r5
 80068f0:	1891      	adds	r1, r2, r2
 80068f2:	65b9      	str	r1, [r7, #88]	; 0x58
 80068f4:	415b      	adcs	r3, r3
 80068f6:	65fb      	str	r3, [r7, #92]	; 0x5c
 80068f8:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 80068fc:	1912      	adds	r2, r2, r4
 80068fe:	eb45 0303 	adc.w	r3, r5, r3
 8006902:	f04f 0000 	mov.w	r0, #0
 8006906:	f04f 0100 	mov.w	r1, #0
 800690a:	00d9      	lsls	r1, r3, #3
 800690c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006910:	00d0      	lsls	r0, r2, #3
 8006912:	4602      	mov	r2, r0
 8006914:	460b      	mov	r3, r1
 8006916:	1911      	adds	r1, r2, r4
 8006918:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 800691c:	416b      	adcs	r3, r5
 800691e:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8006922:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006926:	685b      	ldr	r3, [r3, #4]
 8006928:	461a      	mov	r2, r3
 800692a:	f04f 0300 	mov.w	r3, #0
 800692e:	1891      	adds	r1, r2, r2
 8006930:	6539      	str	r1, [r7, #80]	; 0x50
 8006932:	415b      	adcs	r3, r3
 8006934:	657b      	str	r3, [r7, #84]	; 0x54
 8006936:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 800693a:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 800693e:	f7fa fa15 	bl	8000d6c <__aeabi_uldivmod>
 8006942:	4602      	mov	r2, r0
 8006944:	460b      	mov	r3, r1
 8006946:	4b4a      	ldr	r3, [pc, #296]	; (8006a70 <UART_SetConfig+0x3dc>)
 8006948:	fba3 2302 	umull	r2, r3, r3, r2
 800694c:	095b      	lsrs	r3, r3, #5
 800694e:	011e      	lsls	r6, r3, #4
 8006950:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006954:	461c      	mov	r4, r3
 8006956:	f04f 0500 	mov.w	r5, #0
 800695a:	4622      	mov	r2, r4
 800695c:	462b      	mov	r3, r5
 800695e:	1891      	adds	r1, r2, r2
 8006960:	64b9      	str	r1, [r7, #72]	; 0x48
 8006962:	415b      	adcs	r3, r3
 8006964:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006966:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 800696a:	1912      	adds	r2, r2, r4
 800696c:	eb45 0303 	adc.w	r3, r5, r3
 8006970:	f04f 0000 	mov.w	r0, #0
 8006974:	f04f 0100 	mov.w	r1, #0
 8006978:	00d9      	lsls	r1, r3, #3
 800697a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800697e:	00d0      	lsls	r0, r2, #3
 8006980:	4602      	mov	r2, r0
 8006982:	460b      	mov	r3, r1
 8006984:	1911      	adds	r1, r2, r4
 8006986:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 800698a:	416b      	adcs	r3, r5
 800698c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8006990:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006994:	685b      	ldr	r3, [r3, #4]
 8006996:	461a      	mov	r2, r3
 8006998:	f04f 0300 	mov.w	r3, #0
 800699c:	1891      	adds	r1, r2, r2
 800699e:	6439      	str	r1, [r7, #64]	; 0x40
 80069a0:	415b      	adcs	r3, r3
 80069a2:	647b      	str	r3, [r7, #68]	; 0x44
 80069a4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80069a8:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 80069ac:	f7fa f9de 	bl	8000d6c <__aeabi_uldivmod>
 80069b0:	4602      	mov	r2, r0
 80069b2:	460b      	mov	r3, r1
 80069b4:	4b2e      	ldr	r3, [pc, #184]	; (8006a70 <UART_SetConfig+0x3dc>)
 80069b6:	fba3 1302 	umull	r1, r3, r3, r2
 80069ba:	095b      	lsrs	r3, r3, #5
 80069bc:	2164      	movs	r1, #100	; 0x64
 80069be:	fb01 f303 	mul.w	r3, r1, r3
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	00db      	lsls	r3, r3, #3
 80069c6:	3332      	adds	r3, #50	; 0x32
 80069c8:	4a29      	ldr	r2, [pc, #164]	; (8006a70 <UART_SetConfig+0x3dc>)
 80069ca:	fba2 2303 	umull	r2, r3, r2, r3
 80069ce:	095b      	lsrs	r3, r3, #5
 80069d0:	005b      	lsls	r3, r3, #1
 80069d2:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80069d6:	441e      	add	r6, r3
 80069d8:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80069dc:	4618      	mov	r0, r3
 80069de:	f04f 0100 	mov.w	r1, #0
 80069e2:	4602      	mov	r2, r0
 80069e4:	460b      	mov	r3, r1
 80069e6:	1894      	adds	r4, r2, r2
 80069e8:	63bc      	str	r4, [r7, #56]	; 0x38
 80069ea:	415b      	adcs	r3, r3
 80069ec:	63fb      	str	r3, [r7, #60]	; 0x3c
 80069ee:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 80069f2:	1812      	adds	r2, r2, r0
 80069f4:	eb41 0303 	adc.w	r3, r1, r3
 80069f8:	f04f 0400 	mov.w	r4, #0
 80069fc:	f04f 0500 	mov.w	r5, #0
 8006a00:	00dd      	lsls	r5, r3, #3
 8006a02:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006a06:	00d4      	lsls	r4, r2, #3
 8006a08:	4622      	mov	r2, r4
 8006a0a:	462b      	mov	r3, r5
 8006a0c:	1814      	adds	r4, r2, r0
 8006a0e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8006a12:	414b      	adcs	r3, r1
 8006a14:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8006a18:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a1c:	685b      	ldr	r3, [r3, #4]
 8006a1e:	461a      	mov	r2, r3
 8006a20:	f04f 0300 	mov.w	r3, #0
 8006a24:	1891      	adds	r1, r2, r2
 8006a26:	6339      	str	r1, [r7, #48]	; 0x30
 8006a28:	415b      	adcs	r3, r3
 8006a2a:	637b      	str	r3, [r7, #52]	; 0x34
 8006a2c:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006a30:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8006a34:	f7fa f99a 	bl	8000d6c <__aeabi_uldivmod>
 8006a38:	4602      	mov	r2, r0
 8006a3a:	460b      	mov	r3, r1
 8006a3c:	4b0c      	ldr	r3, [pc, #48]	; (8006a70 <UART_SetConfig+0x3dc>)
 8006a3e:	fba3 1302 	umull	r1, r3, r3, r2
 8006a42:	095b      	lsrs	r3, r3, #5
 8006a44:	2164      	movs	r1, #100	; 0x64
 8006a46:	fb01 f303 	mul.w	r3, r1, r3
 8006a4a:	1ad3      	subs	r3, r2, r3
 8006a4c:	00db      	lsls	r3, r3, #3
 8006a4e:	3332      	adds	r3, #50	; 0x32
 8006a50:	4a07      	ldr	r2, [pc, #28]	; (8006a70 <UART_SetConfig+0x3dc>)
 8006a52:	fba2 2303 	umull	r2, r3, r2, r3
 8006a56:	095b      	lsrs	r3, r3, #5
 8006a58:	f003 0207 	and.w	r2, r3, #7
 8006a5c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a60:	681b      	ldr	r3, [r3, #0]
 8006a62:	4432      	add	r2, r6
 8006a64:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8006a66:	e1a6      	b.n	8006db6 <UART_SetConfig+0x722>
 8006a68:	40011000 	.word	0x40011000
 8006a6c:	40011400 	.word	0x40011400
 8006a70:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006a74:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a78:	681a      	ldr	r2, [r3, #0]
 8006a7a:	4bd1      	ldr	r3, [pc, #836]	; (8006dc0 <UART_SetConfig+0x72c>)
 8006a7c:	429a      	cmp	r2, r3
 8006a7e:	d006      	beq.n	8006a8e <UART_SetConfig+0x3fa>
 8006a80:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006a84:	681a      	ldr	r2, [r3, #0]
 8006a86:	4bcf      	ldr	r3, [pc, #828]	; (8006dc4 <UART_SetConfig+0x730>)
 8006a88:	429a      	cmp	r2, r3
 8006a8a:	f040 80ca 	bne.w	8006c22 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8006a8e:	f7fe fdf3 	bl	8005678 <HAL_RCC_GetPCLK2Freq>
 8006a92:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006a96:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006a9a:	461c      	mov	r4, r3
 8006a9c:	f04f 0500 	mov.w	r5, #0
 8006aa0:	4622      	mov	r2, r4
 8006aa2:	462b      	mov	r3, r5
 8006aa4:	1891      	adds	r1, r2, r2
 8006aa6:	62b9      	str	r1, [r7, #40]	; 0x28
 8006aa8:	415b      	adcs	r3, r3
 8006aaa:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006aac:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006ab0:	1912      	adds	r2, r2, r4
 8006ab2:	eb45 0303 	adc.w	r3, r5, r3
 8006ab6:	f04f 0000 	mov.w	r0, #0
 8006aba:	f04f 0100 	mov.w	r1, #0
 8006abe:	00d9      	lsls	r1, r3, #3
 8006ac0:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ac4:	00d0      	lsls	r0, r2, #3
 8006ac6:	4602      	mov	r2, r0
 8006ac8:	460b      	mov	r3, r1
 8006aca:	eb12 0a04 	adds.w	sl, r2, r4
 8006ace:	eb43 0b05 	adc.w	fp, r3, r5
 8006ad2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006ad6:	685b      	ldr	r3, [r3, #4]
 8006ad8:	4618      	mov	r0, r3
 8006ada:	f04f 0100 	mov.w	r1, #0
 8006ade:	f04f 0200 	mov.w	r2, #0
 8006ae2:	f04f 0300 	mov.w	r3, #0
 8006ae6:	008b      	lsls	r3, r1, #2
 8006ae8:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006aec:	0082      	lsls	r2, r0, #2
 8006aee:	4650      	mov	r0, sl
 8006af0:	4659      	mov	r1, fp
 8006af2:	f7fa f93b 	bl	8000d6c <__aeabi_uldivmod>
 8006af6:	4602      	mov	r2, r0
 8006af8:	460b      	mov	r3, r1
 8006afa:	4bb3      	ldr	r3, [pc, #716]	; (8006dc8 <UART_SetConfig+0x734>)
 8006afc:	fba3 2302 	umull	r2, r3, r3, r2
 8006b00:	095b      	lsrs	r3, r3, #5
 8006b02:	011e      	lsls	r6, r3, #4
 8006b04:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b08:	4618      	mov	r0, r3
 8006b0a:	f04f 0100 	mov.w	r1, #0
 8006b0e:	4602      	mov	r2, r0
 8006b10:	460b      	mov	r3, r1
 8006b12:	1894      	adds	r4, r2, r2
 8006b14:	623c      	str	r4, [r7, #32]
 8006b16:	415b      	adcs	r3, r3
 8006b18:	627b      	str	r3, [r7, #36]	; 0x24
 8006b1a:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006b1e:	1812      	adds	r2, r2, r0
 8006b20:	eb41 0303 	adc.w	r3, r1, r3
 8006b24:	f04f 0400 	mov.w	r4, #0
 8006b28:	f04f 0500 	mov.w	r5, #0
 8006b2c:	00dd      	lsls	r5, r3, #3
 8006b2e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006b32:	00d4      	lsls	r4, r2, #3
 8006b34:	4622      	mov	r2, r4
 8006b36:	462b      	mov	r3, r5
 8006b38:	1814      	adds	r4, r2, r0
 8006b3a:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8006b3e:	414b      	adcs	r3, r1
 8006b40:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8006b44:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006b48:	685b      	ldr	r3, [r3, #4]
 8006b4a:	4618      	mov	r0, r3
 8006b4c:	f04f 0100 	mov.w	r1, #0
 8006b50:	f04f 0200 	mov.w	r2, #0
 8006b54:	f04f 0300 	mov.w	r3, #0
 8006b58:	008b      	lsls	r3, r1, #2
 8006b5a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006b5e:	0082      	lsls	r2, r0, #2
 8006b60:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8006b64:	f7fa f902 	bl	8000d6c <__aeabi_uldivmod>
 8006b68:	4602      	mov	r2, r0
 8006b6a:	460b      	mov	r3, r1
 8006b6c:	4b96      	ldr	r3, [pc, #600]	; (8006dc8 <UART_SetConfig+0x734>)
 8006b6e:	fba3 1302 	umull	r1, r3, r3, r2
 8006b72:	095b      	lsrs	r3, r3, #5
 8006b74:	2164      	movs	r1, #100	; 0x64
 8006b76:	fb01 f303 	mul.w	r3, r1, r3
 8006b7a:	1ad3      	subs	r3, r2, r3
 8006b7c:	011b      	lsls	r3, r3, #4
 8006b7e:	3332      	adds	r3, #50	; 0x32
 8006b80:	4a91      	ldr	r2, [pc, #580]	; (8006dc8 <UART_SetConfig+0x734>)
 8006b82:	fba2 2303 	umull	r2, r3, r2, r3
 8006b86:	095b      	lsrs	r3, r3, #5
 8006b88:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006b8c:	441e      	add	r6, r3
 8006b8e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006b92:	4618      	mov	r0, r3
 8006b94:	f04f 0100 	mov.w	r1, #0
 8006b98:	4602      	mov	r2, r0
 8006b9a:	460b      	mov	r3, r1
 8006b9c:	1894      	adds	r4, r2, r2
 8006b9e:	61bc      	str	r4, [r7, #24]
 8006ba0:	415b      	adcs	r3, r3
 8006ba2:	61fb      	str	r3, [r7, #28]
 8006ba4:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006ba8:	1812      	adds	r2, r2, r0
 8006baa:	eb41 0303 	adc.w	r3, r1, r3
 8006bae:	f04f 0400 	mov.w	r4, #0
 8006bb2:	f04f 0500 	mov.w	r5, #0
 8006bb6:	00dd      	lsls	r5, r3, #3
 8006bb8:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006bbc:	00d4      	lsls	r4, r2, #3
 8006bbe:	4622      	mov	r2, r4
 8006bc0:	462b      	mov	r3, r5
 8006bc2:	1814      	adds	r4, r2, r0
 8006bc4:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8006bc8:	414b      	adcs	r3, r1
 8006bca:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8006bce:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006bd2:	685b      	ldr	r3, [r3, #4]
 8006bd4:	4618      	mov	r0, r3
 8006bd6:	f04f 0100 	mov.w	r1, #0
 8006bda:	f04f 0200 	mov.w	r2, #0
 8006bde:	f04f 0300 	mov.w	r3, #0
 8006be2:	008b      	lsls	r3, r1, #2
 8006be4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006be8:	0082      	lsls	r2, r0, #2
 8006bea:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8006bee:	f7fa f8bd 	bl	8000d6c <__aeabi_uldivmod>
 8006bf2:	4602      	mov	r2, r0
 8006bf4:	460b      	mov	r3, r1
 8006bf6:	4b74      	ldr	r3, [pc, #464]	; (8006dc8 <UART_SetConfig+0x734>)
 8006bf8:	fba3 1302 	umull	r1, r3, r3, r2
 8006bfc:	095b      	lsrs	r3, r3, #5
 8006bfe:	2164      	movs	r1, #100	; 0x64
 8006c00:	fb01 f303 	mul.w	r3, r1, r3
 8006c04:	1ad3      	subs	r3, r2, r3
 8006c06:	011b      	lsls	r3, r3, #4
 8006c08:	3332      	adds	r3, #50	; 0x32
 8006c0a:	4a6f      	ldr	r2, [pc, #444]	; (8006dc8 <UART_SetConfig+0x734>)
 8006c0c:	fba2 2303 	umull	r2, r3, r2, r3
 8006c10:	095b      	lsrs	r3, r3, #5
 8006c12:	f003 020f 	and.w	r2, r3, #15
 8006c16:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	4432      	add	r2, r6
 8006c1e:	609a      	str	r2, [r3, #8]
 8006c20:	e0c9      	b.n	8006db6 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8006c22:	f7fe fd15 	bl	8005650 <HAL_RCC_GetPCLK1Freq>
 8006c26:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006c2a:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c2e:	461c      	mov	r4, r3
 8006c30:	f04f 0500 	mov.w	r5, #0
 8006c34:	4622      	mov	r2, r4
 8006c36:	462b      	mov	r3, r5
 8006c38:	1891      	adds	r1, r2, r2
 8006c3a:	6139      	str	r1, [r7, #16]
 8006c3c:	415b      	adcs	r3, r3
 8006c3e:	617b      	str	r3, [r7, #20]
 8006c40:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006c44:	1912      	adds	r2, r2, r4
 8006c46:	eb45 0303 	adc.w	r3, r5, r3
 8006c4a:	f04f 0000 	mov.w	r0, #0
 8006c4e:	f04f 0100 	mov.w	r1, #0
 8006c52:	00d9      	lsls	r1, r3, #3
 8006c54:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006c58:	00d0      	lsls	r0, r2, #3
 8006c5a:	4602      	mov	r2, r0
 8006c5c:	460b      	mov	r3, r1
 8006c5e:	eb12 0804 	adds.w	r8, r2, r4
 8006c62:	eb43 0905 	adc.w	r9, r3, r5
 8006c66:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006c6a:	685b      	ldr	r3, [r3, #4]
 8006c6c:	4618      	mov	r0, r3
 8006c6e:	f04f 0100 	mov.w	r1, #0
 8006c72:	f04f 0200 	mov.w	r2, #0
 8006c76:	f04f 0300 	mov.w	r3, #0
 8006c7a:	008b      	lsls	r3, r1, #2
 8006c7c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006c80:	0082      	lsls	r2, r0, #2
 8006c82:	4640      	mov	r0, r8
 8006c84:	4649      	mov	r1, r9
 8006c86:	f7fa f871 	bl	8000d6c <__aeabi_uldivmod>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	460b      	mov	r3, r1
 8006c8e:	4b4e      	ldr	r3, [pc, #312]	; (8006dc8 <UART_SetConfig+0x734>)
 8006c90:	fba3 2302 	umull	r2, r3, r3, r2
 8006c94:	095b      	lsrs	r3, r3, #5
 8006c96:	011e      	lsls	r6, r3, #4
 8006c98:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006c9c:	4618      	mov	r0, r3
 8006c9e:	f04f 0100 	mov.w	r1, #0
 8006ca2:	4602      	mov	r2, r0
 8006ca4:	460b      	mov	r3, r1
 8006ca6:	1894      	adds	r4, r2, r2
 8006ca8:	60bc      	str	r4, [r7, #8]
 8006caa:	415b      	adcs	r3, r3
 8006cac:	60fb      	str	r3, [r7, #12]
 8006cae:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006cb2:	1812      	adds	r2, r2, r0
 8006cb4:	eb41 0303 	adc.w	r3, r1, r3
 8006cb8:	f04f 0400 	mov.w	r4, #0
 8006cbc:	f04f 0500 	mov.w	r5, #0
 8006cc0:	00dd      	lsls	r5, r3, #3
 8006cc2:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006cc6:	00d4      	lsls	r4, r2, #3
 8006cc8:	4622      	mov	r2, r4
 8006cca:	462b      	mov	r3, r5
 8006ccc:	1814      	adds	r4, r2, r0
 8006cce:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8006cd2:	414b      	adcs	r3, r1
 8006cd4:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8006cd8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006cdc:	685b      	ldr	r3, [r3, #4]
 8006cde:	4618      	mov	r0, r3
 8006ce0:	f04f 0100 	mov.w	r1, #0
 8006ce4:	f04f 0200 	mov.w	r2, #0
 8006ce8:	f04f 0300 	mov.w	r3, #0
 8006cec:	008b      	lsls	r3, r1, #2
 8006cee:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006cf2:	0082      	lsls	r2, r0, #2
 8006cf4:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8006cf8:	f7fa f838 	bl	8000d6c <__aeabi_uldivmod>
 8006cfc:	4602      	mov	r2, r0
 8006cfe:	460b      	mov	r3, r1
 8006d00:	4b31      	ldr	r3, [pc, #196]	; (8006dc8 <UART_SetConfig+0x734>)
 8006d02:	fba3 1302 	umull	r1, r3, r3, r2
 8006d06:	095b      	lsrs	r3, r3, #5
 8006d08:	2164      	movs	r1, #100	; 0x64
 8006d0a:	fb01 f303 	mul.w	r3, r1, r3
 8006d0e:	1ad3      	subs	r3, r2, r3
 8006d10:	011b      	lsls	r3, r3, #4
 8006d12:	3332      	adds	r3, #50	; 0x32
 8006d14:	4a2c      	ldr	r2, [pc, #176]	; (8006dc8 <UART_SetConfig+0x734>)
 8006d16:	fba2 2303 	umull	r2, r3, r2, r3
 8006d1a:	095b      	lsrs	r3, r3, #5
 8006d1c:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006d20:	441e      	add	r6, r3
 8006d22:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8006d26:	4618      	mov	r0, r3
 8006d28:	f04f 0100 	mov.w	r1, #0
 8006d2c:	4602      	mov	r2, r0
 8006d2e:	460b      	mov	r3, r1
 8006d30:	1894      	adds	r4, r2, r2
 8006d32:	603c      	str	r4, [r7, #0]
 8006d34:	415b      	adcs	r3, r3
 8006d36:	607b      	str	r3, [r7, #4]
 8006d38:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006d3c:	1812      	adds	r2, r2, r0
 8006d3e:	eb41 0303 	adc.w	r3, r1, r3
 8006d42:	f04f 0400 	mov.w	r4, #0
 8006d46:	f04f 0500 	mov.w	r5, #0
 8006d4a:	00dd      	lsls	r5, r3, #3
 8006d4c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006d50:	00d4      	lsls	r4, r2, #3
 8006d52:	4622      	mov	r2, r4
 8006d54:	462b      	mov	r3, r5
 8006d56:	1814      	adds	r4, r2, r0
 8006d58:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8006d5c:	414b      	adcs	r3, r1
 8006d5e:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8006d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006d66:	685b      	ldr	r3, [r3, #4]
 8006d68:	4618      	mov	r0, r3
 8006d6a:	f04f 0100 	mov.w	r1, #0
 8006d6e:	f04f 0200 	mov.w	r2, #0
 8006d72:	f04f 0300 	mov.w	r3, #0
 8006d76:	008b      	lsls	r3, r1, #2
 8006d78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006d7c:	0082      	lsls	r2, r0, #2
 8006d7e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8006d82:	f7f9 fff3 	bl	8000d6c <__aeabi_uldivmod>
 8006d86:	4602      	mov	r2, r0
 8006d88:	460b      	mov	r3, r1
 8006d8a:	4b0f      	ldr	r3, [pc, #60]	; (8006dc8 <UART_SetConfig+0x734>)
 8006d8c:	fba3 1302 	umull	r1, r3, r3, r2
 8006d90:	095b      	lsrs	r3, r3, #5
 8006d92:	2164      	movs	r1, #100	; 0x64
 8006d94:	fb01 f303 	mul.w	r3, r1, r3
 8006d98:	1ad3      	subs	r3, r2, r3
 8006d9a:	011b      	lsls	r3, r3, #4
 8006d9c:	3332      	adds	r3, #50	; 0x32
 8006d9e:	4a0a      	ldr	r2, [pc, #40]	; (8006dc8 <UART_SetConfig+0x734>)
 8006da0:	fba2 2303 	umull	r2, r3, r2, r3
 8006da4:	095b      	lsrs	r3, r3, #5
 8006da6:	f003 020f 	and.w	r2, r3, #15
 8006daa:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8006dae:	681b      	ldr	r3, [r3, #0]
 8006db0:	4432      	add	r2, r6
 8006db2:	609a      	str	r2, [r3, #8]
}
 8006db4:	e7ff      	b.n	8006db6 <UART_SetConfig+0x722>
 8006db6:	bf00      	nop
 8006db8:	37f4      	adds	r7, #244	; 0xf4
 8006dba:	46bd      	mov	sp, r7
 8006dbc:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006dc0:	40011000 	.word	0x40011000
 8006dc4:	40011400 	.word	0x40011400
 8006dc8:	51eb851f 	.word	0x51eb851f

08006dcc <__errno>:
 8006dcc:	4b01      	ldr	r3, [pc, #4]	; (8006dd4 <__errno+0x8>)
 8006dce:	6818      	ldr	r0, [r3, #0]
 8006dd0:	4770      	bx	lr
 8006dd2:	bf00      	nop
 8006dd4:	20000034 	.word	0x20000034

08006dd8 <__libc_init_array>:
 8006dd8:	b570      	push	{r4, r5, r6, lr}
 8006dda:	4d0d      	ldr	r5, [pc, #52]	; (8006e10 <__libc_init_array+0x38>)
 8006ddc:	4c0d      	ldr	r4, [pc, #52]	; (8006e14 <__libc_init_array+0x3c>)
 8006dde:	1b64      	subs	r4, r4, r5
 8006de0:	10a4      	asrs	r4, r4, #2
 8006de2:	2600      	movs	r6, #0
 8006de4:	42a6      	cmp	r6, r4
 8006de6:	d109      	bne.n	8006dfc <__libc_init_array+0x24>
 8006de8:	4d0b      	ldr	r5, [pc, #44]	; (8006e18 <__libc_init_array+0x40>)
 8006dea:	4c0c      	ldr	r4, [pc, #48]	; (8006e1c <__libc_init_array+0x44>)
 8006dec:	f000 ffd6 	bl	8007d9c <_init>
 8006df0:	1b64      	subs	r4, r4, r5
 8006df2:	10a4      	asrs	r4, r4, #2
 8006df4:	2600      	movs	r6, #0
 8006df6:	42a6      	cmp	r6, r4
 8006df8:	d105      	bne.n	8006e06 <__libc_init_array+0x2e>
 8006dfa:	bd70      	pop	{r4, r5, r6, pc}
 8006dfc:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e00:	4798      	blx	r3
 8006e02:	3601      	adds	r6, #1
 8006e04:	e7ee      	b.n	8006de4 <__libc_init_array+0xc>
 8006e06:	f855 3b04 	ldr.w	r3, [r5], #4
 8006e0a:	4798      	blx	r3
 8006e0c:	3601      	adds	r6, #1
 8006e0e:	e7f2      	b.n	8006df6 <__libc_init_array+0x1e>
 8006e10:	08007e20 	.word	0x08007e20
 8006e14:	08007e20 	.word	0x08007e20
 8006e18:	08007e20 	.word	0x08007e20
 8006e1c:	08007e24 	.word	0x08007e24

08006e20 <memset>:
 8006e20:	4402      	add	r2, r0
 8006e22:	4603      	mov	r3, r0
 8006e24:	4293      	cmp	r3, r2
 8006e26:	d100      	bne.n	8006e2a <memset+0xa>
 8006e28:	4770      	bx	lr
 8006e2a:	f803 1b01 	strb.w	r1, [r3], #1
 8006e2e:	e7f9      	b.n	8006e24 <memset+0x4>

08006e30 <pow>:
 8006e30:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8006e34:	ec59 8b10 	vmov	r8, r9, d0
 8006e38:	ec57 6b11 	vmov	r6, r7, d1
 8006e3c:	f000 f8a8 	bl	8006f90 <__ieee754_pow>
 8006e40:	4b4e      	ldr	r3, [pc, #312]	; (8006f7c <pow+0x14c>)
 8006e42:	f993 3000 	ldrsb.w	r3, [r3]
 8006e46:	3301      	adds	r3, #1
 8006e48:	ec55 4b10 	vmov	r4, r5, d0
 8006e4c:	d015      	beq.n	8006e7a <pow+0x4a>
 8006e4e:	4632      	mov	r2, r6
 8006e50:	463b      	mov	r3, r7
 8006e52:	4630      	mov	r0, r6
 8006e54:	4639      	mov	r1, r7
 8006e56:	f7f9 fe15 	bl	8000a84 <__aeabi_dcmpun>
 8006e5a:	b970      	cbnz	r0, 8006e7a <pow+0x4a>
 8006e5c:	4642      	mov	r2, r8
 8006e5e:	464b      	mov	r3, r9
 8006e60:	4640      	mov	r0, r8
 8006e62:	4649      	mov	r1, r9
 8006e64:	f7f9 fe0e 	bl	8000a84 <__aeabi_dcmpun>
 8006e68:	2200      	movs	r2, #0
 8006e6a:	2300      	movs	r3, #0
 8006e6c:	b148      	cbz	r0, 8006e82 <pow+0x52>
 8006e6e:	4630      	mov	r0, r6
 8006e70:	4639      	mov	r1, r7
 8006e72:	f7f9 fdd5 	bl	8000a20 <__aeabi_dcmpeq>
 8006e76:	2800      	cmp	r0, #0
 8006e78:	d17d      	bne.n	8006f76 <pow+0x146>
 8006e7a:	ec45 4b10 	vmov	d0, r4, r5
 8006e7e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8006e82:	4640      	mov	r0, r8
 8006e84:	4649      	mov	r1, r9
 8006e86:	f7f9 fdcb 	bl	8000a20 <__aeabi_dcmpeq>
 8006e8a:	b1e0      	cbz	r0, 8006ec6 <pow+0x96>
 8006e8c:	2200      	movs	r2, #0
 8006e8e:	2300      	movs	r3, #0
 8006e90:	4630      	mov	r0, r6
 8006e92:	4639      	mov	r1, r7
 8006e94:	f7f9 fdc4 	bl	8000a20 <__aeabi_dcmpeq>
 8006e98:	2800      	cmp	r0, #0
 8006e9a:	d16c      	bne.n	8006f76 <pow+0x146>
 8006e9c:	ec47 6b10 	vmov	d0, r6, r7
 8006ea0:	f000 fe55 	bl	8007b4e <finite>
 8006ea4:	2800      	cmp	r0, #0
 8006ea6:	d0e8      	beq.n	8006e7a <pow+0x4a>
 8006ea8:	2200      	movs	r2, #0
 8006eaa:	2300      	movs	r3, #0
 8006eac:	4630      	mov	r0, r6
 8006eae:	4639      	mov	r1, r7
 8006eb0:	f7f9 fdc0 	bl	8000a34 <__aeabi_dcmplt>
 8006eb4:	2800      	cmp	r0, #0
 8006eb6:	d0e0      	beq.n	8006e7a <pow+0x4a>
 8006eb8:	f7ff ff88 	bl	8006dcc <__errno>
 8006ebc:	2321      	movs	r3, #33	; 0x21
 8006ebe:	6003      	str	r3, [r0, #0]
 8006ec0:	2400      	movs	r4, #0
 8006ec2:	4d2f      	ldr	r5, [pc, #188]	; (8006f80 <pow+0x150>)
 8006ec4:	e7d9      	b.n	8006e7a <pow+0x4a>
 8006ec6:	ec45 4b10 	vmov	d0, r4, r5
 8006eca:	f000 fe40 	bl	8007b4e <finite>
 8006ece:	bbb8      	cbnz	r0, 8006f40 <pow+0x110>
 8006ed0:	ec49 8b10 	vmov	d0, r8, r9
 8006ed4:	f000 fe3b 	bl	8007b4e <finite>
 8006ed8:	b390      	cbz	r0, 8006f40 <pow+0x110>
 8006eda:	ec47 6b10 	vmov	d0, r6, r7
 8006ede:	f000 fe36 	bl	8007b4e <finite>
 8006ee2:	b368      	cbz	r0, 8006f40 <pow+0x110>
 8006ee4:	4622      	mov	r2, r4
 8006ee6:	462b      	mov	r3, r5
 8006ee8:	4620      	mov	r0, r4
 8006eea:	4629      	mov	r1, r5
 8006eec:	f7f9 fdca 	bl	8000a84 <__aeabi_dcmpun>
 8006ef0:	b160      	cbz	r0, 8006f0c <pow+0xdc>
 8006ef2:	f7ff ff6b 	bl	8006dcc <__errno>
 8006ef6:	2321      	movs	r3, #33	; 0x21
 8006ef8:	6003      	str	r3, [r0, #0]
 8006efa:	2200      	movs	r2, #0
 8006efc:	2300      	movs	r3, #0
 8006efe:	4610      	mov	r0, r2
 8006f00:	4619      	mov	r1, r3
 8006f02:	f7f9 fc4f 	bl	80007a4 <__aeabi_ddiv>
 8006f06:	4604      	mov	r4, r0
 8006f08:	460d      	mov	r5, r1
 8006f0a:	e7b6      	b.n	8006e7a <pow+0x4a>
 8006f0c:	f7ff ff5e 	bl	8006dcc <__errno>
 8006f10:	2322      	movs	r3, #34	; 0x22
 8006f12:	6003      	str	r3, [r0, #0]
 8006f14:	2200      	movs	r2, #0
 8006f16:	2300      	movs	r3, #0
 8006f18:	4640      	mov	r0, r8
 8006f1a:	4649      	mov	r1, r9
 8006f1c:	f7f9 fd8a 	bl	8000a34 <__aeabi_dcmplt>
 8006f20:	2400      	movs	r4, #0
 8006f22:	b158      	cbz	r0, 8006f3c <pow+0x10c>
 8006f24:	ec47 6b10 	vmov	d0, r6, r7
 8006f28:	f000 fe26 	bl	8007b78 <rint>
 8006f2c:	4632      	mov	r2, r6
 8006f2e:	ec51 0b10 	vmov	r0, r1, d0
 8006f32:	463b      	mov	r3, r7
 8006f34:	f7f9 fd74 	bl	8000a20 <__aeabi_dcmpeq>
 8006f38:	2800      	cmp	r0, #0
 8006f3a:	d0c2      	beq.n	8006ec2 <pow+0x92>
 8006f3c:	4d11      	ldr	r5, [pc, #68]	; (8006f84 <pow+0x154>)
 8006f3e:	e79c      	b.n	8006e7a <pow+0x4a>
 8006f40:	2200      	movs	r2, #0
 8006f42:	2300      	movs	r3, #0
 8006f44:	4620      	mov	r0, r4
 8006f46:	4629      	mov	r1, r5
 8006f48:	f7f9 fd6a 	bl	8000a20 <__aeabi_dcmpeq>
 8006f4c:	2800      	cmp	r0, #0
 8006f4e:	d094      	beq.n	8006e7a <pow+0x4a>
 8006f50:	ec49 8b10 	vmov	d0, r8, r9
 8006f54:	f000 fdfb 	bl	8007b4e <finite>
 8006f58:	2800      	cmp	r0, #0
 8006f5a:	d08e      	beq.n	8006e7a <pow+0x4a>
 8006f5c:	ec47 6b10 	vmov	d0, r6, r7
 8006f60:	f000 fdf5 	bl	8007b4e <finite>
 8006f64:	2800      	cmp	r0, #0
 8006f66:	d088      	beq.n	8006e7a <pow+0x4a>
 8006f68:	f7ff ff30 	bl	8006dcc <__errno>
 8006f6c:	2322      	movs	r3, #34	; 0x22
 8006f6e:	6003      	str	r3, [r0, #0]
 8006f70:	2400      	movs	r4, #0
 8006f72:	2500      	movs	r5, #0
 8006f74:	e781      	b.n	8006e7a <pow+0x4a>
 8006f76:	4d04      	ldr	r5, [pc, #16]	; (8006f88 <pow+0x158>)
 8006f78:	2400      	movs	r4, #0
 8006f7a:	e77e      	b.n	8006e7a <pow+0x4a>
 8006f7c:	20000098 	.word	0x20000098
 8006f80:	fff00000 	.word	0xfff00000
 8006f84:	7ff00000 	.word	0x7ff00000
 8006f88:	3ff00000 	.word	0x3ff00000
 8006f8c:	00000000 	.word	0x00000000

08006f90 <__ieee754_pow>:
 8006f90:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006f94:	ed2d 8b06 	vpush	{d8-d10}
 8006f98:	b08d      	sub	sp, #52	; 0x34
 8006f9a:	ed8d 1b02 	vstr	d1, [sp, #8]
 8006f9e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8006fa2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8006fa6:	ea56 0100 	orrs.w	r1, r6, r0
 8006faa:	ec53 2b10 	vmov	r2, r3, d0
 8006fae:	f000 84d1 	beq.w	8007954 <__ieee754_pow+0x9c4>
 8006fb2:	497f      	ldr	r1, [pc, #508]	; (80071b0 <__ieee754_pow+0x220>)
 8006fb4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8006fb8:	428c      	cmp	r4, r1
 8006fba:	ee10 8a10 	vmov	r8, s0
 8006fbe:	4699      	mov	r9, r3
 8006fc0:	dc09      	bgt.n	8006fd6 <__ieee754_pow+0x46>
 8006fc2:	d103      	bne.n	8006fcc <__ieee754_pow+0x3c>
 8006fc4:	b97a      	cbnz	r2, 8006fe6 <__ieee754_pow+0x56>
 8006fc6:	42a6      	cmp	r6, r4
 8006fc8:	dd02      	ble.n	8006fd0 <__ieee754_pow+0x40>
 8006fca:	e00c      	b.n	8006fe6 <__ieee754_pow+0x56>
 8006fcc:	428e      	cmp	r6, r1
 8006fce:	dc02      	bgt.n	8006fd6 <__ieee754_pow+0x46>
 8006fd0:	428e      	cmp	r6, r1
 8006fd2:	d110      	bne.n	8006ff6 <__ieee754_pow+0x66>
 8006fd4:	b178      	cbz	r0, 8006ff6 <__ieee754_pow+0x66>
 8006fd6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8006fda:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8006fde:	ea54 0308 	orrs.w	r3, r4, r8
 8006fe2:	f000 84b7 	beq.w	8007954 <__ieee754_pow+0x9c4>
 8006fe6:	4873      	ldr	r0, [pc, #460]	; (80071b4 <__ieee754_pow+0x224>)
 8006fe8:	b00d      	add	sp, #52	; 0x34
 8006fea:	ecbd 8b06 	vpop	{d8-d10}
 8006fee:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006ff2:	f000 bdb9 	b.w	8007b68 <nan>
 8006ff6:	f1b9 0f00 	cmp.w	r9, #0
 8006ffa:	da36      	bge.n	800706a <__ieee754_pow+0xda>
 8006ffc:	496e      	ldr	r1, [pc, #440]	; (80071b8 <__ieee754_pow+0x228>)
 8006ffe:	428e      	cmp	r6, r1
 8007000:	dc51      	bgt.n	80070a6 <__ieee754_pow+0x116>
 8007002:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8007006:	428e      	cmp	r6, r1
 8007008:	f340 84af 	ble.w	800796a <__ieee754_pow+0x9da>
 800700c:	1531      	asrs	r1, r6, #20
 800700e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8007012:	2914      	cmp	r1, #20
 8007014:	dd0f      	ble.n	8007036 <__ieee754_pow+0xa6>
 8007016:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800701a:	fa20 fc01 	lsr.w	ip, r0, r1
 800701e:	fa0c f101 	lsl.w	r1, ip, r1
 8007022:	4281      	cmp	r1, r0
 8007024:	f040 84a1 	bne.w	800796a <__ieee754_pow+0x9da>
 8007028:	f00c 0c01 	and.w	ip, ip, #1
 800702c:	f1cc 0102 	rsb	r1, ip, #2
 8007030:	9100      	str	r1, [sp, #0]
 8007032:	b180      	cbz	r0, 8007056 <__ieee754_pow+0xc6>
 8007034:	e059      	b.n	80070ea <__ieee754_pow+0x15a>
 8007036:	2800      	cmp	r0, #0
 8007038:	d155      	bne.n	80070e6 <__ieee754_pow+0x156>
 800703a:	f1c1 0114 	rsb	r1, r1, #20
 800703e:	fa46 fc01 	asr.w	ip, r6, r1
 8007042:	fa0c f101 	lsl.w	r1, ip, r1
 8007046:	42b1      	cmp	r1, r6
 8007048:	f040 848c 	bne.w	8007964 <__ieee754_pow+0x9d4>
 800704c:	f00c 0c01 	and.w	ip, ip, #1
 8007050:	f1cc 0102 	rsb	r1, ip, #2
 8007054:	9100      	str	r1, [sp, #0]
 8007056:	4959      	ldr	r1, [pc, #356]	; (80071bc <__ieee754_pow+0x22c>)
 8007058:	428e      	cmp	r6, r1
 800705a:	d12d      	bne.n	80070b8 <__ieee754_pow+0x128>
 800705c:	2f00      	cmp	r7, #0
 800705e:	da79      	bge.n	8007154 <__ieee754_pow+0x1c4>
 8007060:	4956      	ldr	r1, [pc, #344]	; (80071bc <__ieee754_pow+0x22c>)
 8007062:	2000      	movs	r0, #0
 8007064:	f7f9 fb9e 	bl	80007a4 <__aeabi_ddiv>
 8007068:	e016      	b.n	8007098 <__ieee754_pow+0x108>
 800706a:	2100      	movs	r1, #0
 800706c:	9100      	str	r1, [sp, #0]
 800706e:	2800      	cmp	r0, #0
 8007070:	d13b      	bne.n	80070ea <__ieee754_pow+0x15a>
 8007072:	494f      	ldr	r1, [pc, #316]	; (80071b0 <__ieee754_pow+0x220>)
 8007074:	428e      	cmp	r6, r1
 8007076:	d1ee      	bne.n	8007056 <__ieee754_pow+0xc6>
 8007078:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800707c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8007080:	ea53 0308 	orrs.w	r3, r3, r8
 8007084:	f000 8466 	beq.w	8007954 <__ieee754_pow+0x9c4>
 8007088:	4b4d      	ldr	r3, [pc, #308]	; (80071c0 <__ieee754_pow+0x230>)
 800708a:	429c      	cmp	r4, r3
 800708c:	dd0d      	ble.n	80070aa <__ieee754_pow+0x11a>
 800708e:	2f00      	cmp	r7, #0
 8007090:	f280 8464 	bge.w	800795c <__ieee754_pow+0x9cc>
 8007094:	2000      	movs	r0, #0
 8007096:	2100      	movs	r1, #0
 8007098:	ec41 0b10 	vmov	d0, r0, r1
 800709c:	b00d      	add	sp, #52	; 0x34
 800709e:	ecbd 8b06 	vpop	{d8-d10}
 80070a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80070a6:	2102      	movs	r1, #2
 80070a8:	e7e0      	b.n	800706c <__ieee754_pow+0xdc>
 80070aa:	2f00      	cmp	r7, #0
 80070ac:	daf2      	bge.n	8007094 <__ieee754_pow+0x104>
 80070ae:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80070b2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80070b6:	e7ef      	b.n	8007098 <__ieee754_pow+0x108>
 80070b8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80070bc:	d104      	bne.n	80070c8 <__ieee754_pow+0x138>
 80070be:	4610      	mov	r0, r2
 80070c0:	4619      	mov	r1, r3
 80070c2:	f7f9 fa45 	bl	8000550 <__aeabi_dmul>
 80070c6:	e7e7      	b.n	8007098 <__ieee754_pow+0x108>
 80070c8:	493e      	ldr	r1, [pc, #248]	; (80071c4 <__ieee754_pow+0x234>)
 80070ca:	428f      	cmp	r7, r1
 80070cc:	d10d      	bne.n	80070ea <__ieee754_pow+0x15a>
 80070ce:	f1b9 0f00 	cmp.w	r9, #0
 80070d2:	db0a      	blt.n	80070ea <__ieee754_pow+0x15a>
 80070d4:	ec43 2b10 	vmov	d0, r2, r3
 80070d8:	b00d      	add	sp, #52	; 0x34
 80070da:	ecbd 8b06 	vpop	{d8-d10}
 80070de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80070e2:	f000 bc77 	b.w	80079d4 <__ieee754_sqrt>
 80070e6:	2100      	movs	r1, #0
 80070e8:	9100      	str	r1, [sp, #0]
 80070ea:	ec43 2b10 	vmov	d0, r2, r3
 80070ee:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80070f2:	f000 fd23 	bl	8007b3c <fabs>
 80070f6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80070fa:	ec51 0b10 	vmov	r0, r1, d0
 80070fe:	f1b8 0f00 	cmp.w	r8, #0
 8007102:	d12a      	bne.n	800715a <__ieee754_pow+0x1ca>
 8007104:	b12c      	cbz	r4, 8007112 <__ieee754_pow+0x182>
 8007106:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80071bc <__ieee754_pow+0x22c>
 800710a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800710e:	45e6      	cmp	lr, ip
 8007110:	d123      	bne.n	800715a <__ieee754_pow+0x1ca>
 8007112:	2f00      	cmp	r7, #0
 8007114:	da05      	bge.n	8007122 <__ieee754_pow+0x192>
 8007116:	4602      	mov	r2, r0
 8007118:	460b      	mov	r3, r1
 800711a:	2000      	movs	r0, #0
 800711c:	4927      	ldr	r1, [pc, #156]	; (80071bc <__ieee754_pow+0x22c>)
 800711e:	f7f9 fb41 	bl	80007a4 <__aeabi_ddiv>
 8007122:	f1b9 0f00 	cmp.w	r9, #0
 8007126:	dab7      	bge.n	8007098 <__ieee754_pow+0x108>
 8007128:	9b00      	ldr	r3, [sp, #0]
 800712a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800712e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007132:	4323      	orrs	r3, r4
 8007134:	d108      	bne.n	8007148 <__ieee754_pow+0x1b8>
 8007136:	4602      	mov	r2, r0
 8007138:	460b      	mov	r3, r1
 800713a:	4610      	mov	r0, r2
 800713c:	4619      	mov	r1, r3
 800713e:	f7f9 f84f 	bl	80001e0 <__aeabi_dsub>
 8007142:	4602      	mov	r2, r0
 8007144:	460b      	mov	r3, r1
 8007146:	e78d      	b.n	8007064 <__ieee754_pow+0xd4>
 8007148:	9b00      	ldr	r3, [sp, #0]
 800714a:	2b01      	cmp	r3, #1
 800714c:	d1a4      	bne.n	8007098 <__ieee754_pow+0x108>
 800714e:	4602      	mov	r2, r0
 8007150:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8007154:	4610      	mov	r0, r2
 8007156:	4619      	mov	r1, r3
 8007158:	e79e      	b.n	8007098 <__ieee754_pow+0x108>
 800715a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800715e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8007162:	950a      	str	r5, [sp, #40]	; 0x28
 8007164:	9d00      	ldr	r5, [sp, #0]
 8007166:	46ac      	mov	ip, r5
 8007168:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800716a:	ea5c 0505 	orrs.w	r5, ip, r5
 800716e:	d0e4      	beq.n	800713a <__ieee754_pow+0x1aa>
 8007170:	4b15      	ldr	r3, [pc, #84]	; (80071c8 <__ieee754_pow+0x238>)
 8007172:	429e      	cmp	r6, r3
 8007174:	f340 80fc 	ble.w	8007370 <__ieee754_pow+0x3e0>
 8007178:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800717c:	429e      	cmp	r6, r3
 800717e:	4b10      	ldr	r3, [pc, #64]	; (80071c0 <__ieee754_pow+0x230>)
 8007180:	dd07      	ble.n	8007192 <__ieee754_pow+0x202>
 8007182:	429c      	cmp	r4, r3
 8007184:	dc0a      	bgt.n	800719c <__ieee754_pow+0x20c>
 8007186:	2f00      	cmp	r7, #0
 8007188:	da84      	bge.n	8007094 <__ieee754_pow+0x104>
 800718a:	a307      	add	r3, pc, #28	; (adr r3, 80071a8 <__ieee754_pow+0x218>)
 800718c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007190:	e795      	b.n	80070be <__ieee754_pow+0x12e>
 8007192:	429c      	cmp	r4, r3
 8007194:	dbf7      	blt.n	8007186 <__ieee754_pow+0x1f6>
 8007196:	4b09      	ldr	r3, [pc, #36]	; (80071bc <__ieee754_pow+0x22c>)
 8007198:	429c      	cmp	r4, r3
 800719a:	dd17      	ble.n	80071cc <__ieee754_pow+0x23c>
 800719c:	2f00      	cmp	r7, #0
 800719e:	dcf4      	bgt.n	800718a <__ieee754_pow+0x1fa>
 80071a0:	e778      	b.n	8007094 <__ieee754_pow+0x104>
 80071a2:	bf00      	nop
 80071a4:	f3af 8000 	nop.w
 80071a8:	8800759c 	.word	0x8800759c
 80071ac:	7e37e43c 	.word	0x7e37e43c
 80071b0:	7ff00000 	.word	0x7ff00000
 80071b4:	08007dd0 	.word	0x08007dd0
 80071b8:	433fffff 	.word	0x433fffff
 80071bc:	3ff00000 	.word	0x3ff00000
 80071c0:	3fefffff 	.word	0x3fefffff
 80071c4:	3fe00000 	.word	0x3fe00000
 80071c8:	41e00000 	.word	0x41e00000
 80071cc:	4b64      	ldr	r3, [pc, #400]	; (8007360 <__ieee754_pow+0x3d0>)
 80071ce:	2200      	movs	r2, #0
 80071d0:	f7f9 f806 	bl	80001e0 <__aeabi_dsub>
 80071d4:	a356      	add	r3, pc, #344	; (adr r3, 8007330 <__ieee754_pow+0x3a0>)
 80071d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071da:	4604      	mov	r4, r0
 80071dc:	460d      	mov	r5, r1
 80071de:	f7f9 f9b7 	bl	8000550 <__aeabi_dmul>
 80071e2:	a355      	add	r3, pc, #340	; (adr r3, 8007338 <__ieee754_pow+0x3a8>)
 80071e4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80071e8:	4606      	mov	r6, r0
 80071ea:	460f      	mov	r7, r1
 80071ec:	4620      	mov	r0, r4
 80071ee:	4629      	mov	r1, r5
 80071f0:	f7f9 f9ae 	bl	8000550 <__aeabi_dmul>
 80071f4:	4b5b      	ldr	r3, [pc, #364]	; (8007364 <__ieee754_pow+0x3d4>)
 80071f6:	4682      	mov	sl, r0
 80071f8:	468b      	mov	fp, r1
 80071fa:	2200      	movs	r2, #0
 80071fc:	4620      	mov	r0, r4
 80071fe:	4629      	mov	r1, r5
 8007200:	f7f9 f9a6 	bl	8000550 <__aeabi_dmul>
 8007204:	4602      	mov	r2, r0
 8007206:	460b      	mov	r3, r1
 8007208:	a14d      	add	r1, pc, #308	; (adr r1, 8007340 <__ieee754_pow+0x3b0>)
 800720a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800720e:	f7f8 ffe7 	bl	80001e0 <__aeabi_dsub>
 8007212:	4622      	mov	r2, r4
 8007214:	462b      	mov	r3, r5
 8007216:	f7f9 f99b 	bl	8000550 <__aeabi_dmul>
 800721a:	4602      	mov	r2, r0
 800721c:	460b      	mov	r3, r1
 800721e:	2000      	movs	r0, #0
 8007220:	4951      	ldr	r1, [pc, #324]	; (8007368 <__ieee754_pow+0x3d8>)
 8007222:	f7f8 ffdd 	bl	80001e0 <__aeabi_dsub>
 8007226:	4622      	mov	r2, r4
 8007228:	4680      	mov	r8, r0
 800722a:	4689      	mov	r9, r1
 800722c:	462b      	mov	r3, r5
 800722e:	4620      	mov	r0, r4
 8007230:	4629      	mov	r1, r5
 8007232:	f7f9 f98d 	bl	8000550 <__aeabi_dmul>
 8007236:	4602      	mov	r2, r0
 8007238:	460b      	mov	r3, r1
 800723a:	4640      	mov	r0, r8
 800723c:	4649      	mov	r1, r9
 800723e:	f7f9 f987 	bl	8000550 <__aeabi_dmul>
 8007242:	a341      	add	r3, pc, #260	; (adr r3, 8007348 <__ieee754_pow+0x3b8>)
 8007244:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007248:	f7f9 f982 	bl	8000550 <__aeabi_dmul>
 800724c:	4602      	mov	r2, r0
 800724e:	460b      	mov	r3, r1
 8007250:	4650      	mov	r0, sl
 8007252:	4659      	mov	r1, fp
 8007254:	f7f8 ffc4 	bl	80001e0 <__aeabi_dsub>
 8007258:	4602      	mov	r2, r0
 800725a:	460b      	mov	r3, r1
 800725c:	4680      	mov	r8, r0
 800725e:	4689      	mov	r9, r1
 8007260:	4630      	mov	r0, r6
 8007262:	4639      	mov	r1, r7
 8007264:	f7f8 ffbe 	bl	80001e4 <__adddf3>
 8007268:	2400      	movs	r4, #0
 800726a:	4632      	mov	r2, r6
 800726c:	463b      	mov	r3, r7
 800726e:	4620      	mov	r0, r4
 8007270:	460d      	mov	r5, r1
 8007272:	f7f8 ffb5 	bl	80001e0 <__aeabi_dsub>
 8007276:	4602      	mov	r2, r0
 8007278:	460b      	mov	r3, r1
 800727a:	4640      	mov	r0, r8
 800727c:	4649      	mov	r1, r9
 800727e:	f7f8 ffaf 	bl	80001e0 <__aeabi_dsub>
 8007282:	9b00      	ldr	r3, [sp, #0]
 8007284:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8007286:	3b01      	subs	r3, #1
 8007288:	4313      	orrs	r3, r2
 800728a:	4682      	mov	sl, r0
 800728c:	468b      	mov	fp, r1
 800728e:	f040 81f1 	bne.w	8007674 <__ieee754_pow+0x6e4>
 8007292:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007350 <__ieee754_pow+0x3c0>
 8007296:	eeb0 8a47 	vmov.f32	s16, s14
 800729a:	eef0 8a67 	vmov.f32	s17, s15
 800729e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80072a2:	2600      	movs	r6, #0
 80072a4:	4632      	mov	r2, r6
 80072a6:	463b      	mov	r3, r7
 80072a8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80072ac:	f7f8 ff98 	bl	80001e0 <__aeabi_dsub>
 80072b0:	4622      	mov	r2, r4
 80072b2:	462b      	mov	r3, r5
 80072b4:	f7f9 f94c 	bl	8000550 <__aeabi_dmul>
 80072b8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80072bc:	4680      	mov	r8, r0
 80072be:	4689      	mov	r9, r1
 80072c0:	4650      	mov	r0, sl
 80072c2:	4659      	mov	r1, fp
 80072c4:	f7f9 f944 	bl	8000550 <__aeabi_dmul>
 80072c8:	4602      	mov	r2, r0
 80072ca:	460b      	mov	r3, r1
 80072cc:	4640      	mov	r0, r8
 80072ce:	4649      	mov	r1, r9
 80072d0:	f7f8 ff88 	bl	80001e4 <__adddf3>
 80072d4:	4632      	mov	r2, r6
 80072d6:	463b      	mov	r3, r7
 80072d8:	4680      	mov	r8, r0
 80072da:	4689      	mov	r9, r1
 80072dc:	4620      	mov	r0, r4
 80072de:	4629      	mov	r1, r5
 80072e0:	f7f9 f936 	bl	8000550 <__aeabi_dmul>
 80072e4:	460b      	mov	r3, r1
 80072e6:	4604      	mov	r4, r0
 80072e8:	460d      	mov	r5, r1
 80072ea:	4602      	mov	r2, r0
 80072ec:	4649      	mov	r1, r9
 80072ee:	4640      	mov	r0, r8
 80072f0:	f7f8 ff78 	bl	80001e4 <__adddf3>
 80072f4:	4b1d      	ldr	r3, [pc, #116]	; (800736c <__ieee754_pow+0x3dc>)
 80072f6:	4299      	cmp	r1, r3
 80072f8:	ec45 4b19 	vmov	d9, r4, r5
 80072fc:	4606      	mov	r6, r0
 80072fe:	460f      	mov	r7, r1
 8007300:	468b      	mov	fp, r1
 8007302:	f340 82fe 	ble.w	8007902 <__ieee754_pow+0x972>
 8007306:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800730a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800730e:	4303      	orrs	r3, r0
 8007310:	f000 81f0 	beq.w	80076f4 <__ieee754_pow+0x764>
 8007314:	a310      	add	r3, pc, #64	; (adr r3, 8007358 <__ieee754_pow+0x3c8>)
 8007316:	e9d3 2300 	ldrd	r2, r3, [r3]
 800731a:	ec51 0b18 	vmov	r0, r1, d8
 800731e:	f7f9 f917 	bl	8000550 <__aeabi_dmul>
 8007322:	a30d      	add	r3, pc, #52	; (adr r3, 8007358 <__ieee754_pow+0x3c8>)
 8007324:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007328:	e6cb      	b.n	80070c2 <__ieee754_pow+0x132>
 800732a:	bf00      	nop
 800732c:	f3af 8000 	nop.w
 8007330:	60000000 	.word	0x60000000
 8007334:	3ff71547 	.word	0x3ff71547
 8007338:	f85ddf44 	.word	0xf85ddf44
 800733c:	3e54ae0b 	.word	0x3e54ae0b
 8007340:	55555555 	.word	0x55555555
 8007344:	3fd55555 	.word	0x3fd55555
 8007348:	652b82fe 	.word	0x652b82fe
 800734c:	3ff71547 	.word	0x3ff71547
 8007350:	00000000 	.word	0x00000000
 8007354:	bff00000 	.word	0xbff00000
 8007358:	8800759c 	.word	0x8800759c
 800735c:	7e37e43c 	.word	0x7e37e43c
 8007360:	3ff00000 	.word	0x3ff00000
 8007364:	3fd00000 	.word	0x3fd00000
 8007368:	3fe00000 	.word	0x3fe00000
 800736c:	408fffff 	.word	0x408fffff
 8007370:	4bd7      	ldr	r3, [pc, #860]	; (80076d0 <__ieee754_pow+0x740>)
 8007372:	ea03 0309 	and.w	r3, r3, r9
 8007376:	2200      	movs	r2, #0
 8007378:	b92b      	cbnz	r3, 8007386 <__ieee754_pow+0x3f6>
 800737a:	4bd6      	ldr	r3, [pc, #856]	; (80076d4 <__ieee754_pow+0x744>)
 800737c:	f7f9 f8e8 	bl	8000550 <__aeabi_dmul>
 8007380:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8007384:	460c      	mov	r4, r1
 8007386:	1523      	asrs	r3, r4, #20
 8007388:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800738c:	4413      	add	r3, r2
 800738e:	9309      	str	r3, [sp, #36]	; 0x24
 8007390:	4bd1      	ldr	r3, [pc, #836]	; (80076d8 <__ieee754_pow+0x748>)
 8007392:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8007396:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800739a:	429c      	cmp	r4, r3
 800739c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80073a0:	dd08      	ble.n	80073b4 <__ieee754_pow+0x424>
 80073a2:	4bce      	ldr	r3, [pc, #824]	; (80076dc <__ieee754_pow+0x74c>)
 80073a4:	429c      	cmp	r4, r3
 80073a6:	f340 8163 	ble.w	8007670 <__ieee754_pow+0x6e0>
 80073aa:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80073ac:	3301      	adds	r3, #1
 80073ae:	9309      	str	r3, [sp, #36]	; 0x24
 80073b0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80073b4:	2400      	movs	r4, #0
 80073b6:	00e3      	lsls	r3, r4, #3
 80073b8:	930b      	str	r3, [sp, #44]	; 0x2c
 80073ba:	4bc9      	ldr	r3, [pc, #804]	; (80076e0 <__ieee754_pow+0x750>)
 80073bc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80073c0:	ed93 7b00 	vldr	d7, [r3]
 80073c4:	4629      	mov	r1, r5
 80073c6:	ec53 2b17 	vmov	r2, r3, d7
 80073ca:	eeb0 8a47 	vmov.f32	s16, s14
 80073ce:	eef0 8a67 	vmov.f32	s17, s15
 80073d2:	4682      	mov	sl, r0
 80073d4:	f7f8 ff04 	bl	80001e0 <__aeabi_dsub>
 80073d8:	4652      	mov	r2, sl
 80073da:	4606      	mov	r6, r0
 80073dc:	460f      	mov	r7, r1
 80073de:	462b      	mov	r3, r5
 80073e0:	ec51 0b18 	vmov	r0, r1, d8
 80073e4:	f7f8 fefe 	bl	80001e4 <__adddf3>
 80073e8:	4602      	mov	r2, r0
 80073ea:	460b      	mov	r3, r1
 80073ec:	2000      	movs	r0, #0
 80073ee:	49bd      	ldr	r1, [pc, #756]	; (80076e4 <__ieee754_pow+0x754>)
 80073f0:	f7f9 f9d8 	bl	80007a4 <__aeabi_ddiv>
 80073f4:	ec41 0b19 	vmov	d9, r0, r1
 80073f8:	4602      	mov	r2, r0
 80073fa:	460b      	mov	r3, r1
 80073fc:	4630      	mov	r0, r6
 80073fe:	4639      	mov	r1, r7
 8007400:	f7f9 f8a6 	bl	8000550 <__aeabi_dmul>
 8007404:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007408:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800740c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007410:	2300      	movs	r3, #0
 8007412:	9304      	str	r3, [sp, #16]
 8007414:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007418:	46ab      	mov	fp, r5
 800741a:	106d      	asrs	r5, r5, #1
 800741c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007420:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8007424:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007428:	2200      	movs	r2, #0
 800742a:	4640      	mov	r0, r8
 800742c:	4649      	mov	r1, r9
 800742e:	4614      	mov	r4, r2
 8007430:	461d      	mov	r5, r3
 8007432:	f7f9 f88d 	bl	8000550 <__aeabi_dmul>
 8007436:	4602      	mov	r2, r0
 8007438:	460b      	mov	r3, r1
 800743a:	4630      	mov	r0, r6
 800743c:	4639      	mov	r1, r7
 800743e:	f7f8 fecf 	bl	80001e0 <__aeabi_dsub>
 8007442:	ec53 2b18 	vmov	r2, r3, d8
 8007446:	4606      	mov	r6, r0
 8007448:	460f      	mov	r7, r1
 800744a:	4620      	mov	r0, r4
 800744c:	4629      	mov	r1, r5
 800744e:	f7f8 fec7 	bl	80001e0 <__aeabi_dsub>
 8007452:	4602      	mov	r2, r0
 8007454:	460b      	mov	r3, r1
 8007456:	4650      	mov	r0, sl
 8007458:	4659      	mov	r1, fp
 800745a:	f7f8 fec1 	bl	80001e0 <__aeabi_dsub>
 800745e:	4642      	mov	r2, r8
 8007460:	464b      	mov	r3, r9
 8007462:	f7f9 f875 	bl	8000550 <__aeabi_dmul>
 8007466:	4602      	mov	r2, r0
 8007468:	460b      	mov	r3, r1
 800746a:	4630      	mov	r0, r6
 800746c:	4639      	mov	r1, r7
 800746e:	f7f8 feb7 	bl	80001e0 <__aeabi_dsub>
 8007472:	ec53 2b19 	vmov	r2, r3, d9
 8007476:	f7f9 f86b 	bl	8000550 <__aeabi_dmul>
 800747a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800747e:	ec41 0b18 	vmov	d8, r0, r1
 8007482:	4610      	mov	r0, r2
 8007484:	4619      	mov	r1, r3
 8007486:	f7f9 f863 	bl	8000550 <__aeabi_dmul>
 800748a:	a37d      	add	r3, pc, #500	; (adr r3, 8007680 <__ieee754_pow+0x6f0>)
 800748c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007490:	4604      	mov	r4, r0
 8007492:	460d      	mov	r5, r1
 8007494:	f7f9 f85c 	bl	8000550 <__aeabi_dmul>
 8007498:	a37b      	add	r3, pc, #492	; (adr r3, 8007688 <__ieee754_pow+0x6f8>)
 800749a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800749e:	f7f8 fea1 	bl	80001e4 <__adddf3>
 80074a2:	4622      	mov	r2, r4
 80074a4:	462b      	mov	r3, r5
 80074a6:	f7f9 f853 	bl	8000550 <__aeabi_dmul>
 80074aa:	a379      	add	r3, pc, #484	; (adr r3, 8007690 <__ieee754_pow+0x700>)
 80074ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074b0:	f7f8 fe98 	bl	80001e4 <__adddf3>
 80074b4:	4622      	mov	r2, r4
 80074b6:	462b      	mov	r3, r5
 80074b8:	f7f9 f84a 	bl	8000550 <__aeabi_dmul>
 80074bc:	a376      	add	r3, pc, #472	; (adr r3, 8007698 <__ieee754_pow+0x708>)
 80074be:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074c2:	f7f8 fe8f 	bl	80001e4 <__adddf3>
 80074c6:	4622      	mov	r2, r4
 80074c8:	462b      	mov	r3, r5
 80074ca:	f7f9 f841 	bl	8000550 <__aeabi_dmul>
 80074ce:	a374      	add	r3, pc, #464	; (adr r3, 80076a0 <__ieee754_pow+0x710>)
 80074d0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074d4:	f7f8 fe86 	bl	80001e4 <__adddf3>
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	f7f9 f838 	bl	8000550 <__aeabi_dmul>
 80074e0:	a371      	add	r3, pc, #452	; (adr r3, 80076a8 <__ieee754_pow+0x718>)
 80074e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80074e6:	f7f8 fe7d 	bl	80001e4 <__adddf3>
 80074ea:	4622      	mov	r2, r4
 80074ec:	4606      	mov	r6, r0
 80074ee:	460f      	mov	r7, r1
 80074f0:	462b      	mov	r3, r5
 80074f2:	4620      	mov	r0, r4
 80074f4:	4629      	mov	r1, r5
 80074f6:	f7f9 f82b 	bl	8000550 <__aeabi_dmul>
 80074fa:	4602      	mov	r2, r0
 80074fc:	460b      	mov	r3, r1
 80074fe:	4630      	mov	r0, r6
 8007500:	4639      	mov	r1, r7
 8007502:	f7f9 f825 	bl	8000550 <__aeabi_dmul>
 8007506:	4642      	mov	r2, r8
 8007508:	4604      	mov	r4, r0
 800750a:	460d      	mov	r5, r1
 800750c:	464b      	mov	r3, r9
 800750e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8007512:	f7f8 fe67 	bl	80001e4 <__adddf3>
 8007516:	ec53 2b18 	vmov	r2, r3, d8
 800751a:	f7f9 f819 	bl	8000550 <__aeabi_dmul>
 800751e:	4622      	mov	r2, r4
 8007520:	462b      	mov	r3, r5
 8007522:	f7f8 fe5f 	bl	80001e4 <__adddf3>
 8007526:	4642      	mov	r2, r8
 8007528:	4682      	mov	sl, r0
 800752a:	468b      	mov	fp, r1
 800752c:	464b      	mov	r3, r9
 800752e:	4640      	mov	r0, r8
 8007530:	4649      	mov	r1, r9
 8007532:	f7f9 f80d 	bl	8000550 <__aeabi_dmul>
 8007536:	4b6c      	ldr	r3, [pc, #432]	; (80076e8 <__ieee754_pow+0x758>)
 8007538:	2200      	movs	r2, #0
 800753a:	4606      	mov	r6, r0
 800753c:	460f      	mov	r7, r1
 800753e:	f7f8 fe51 	bl	80001e4 <__adddf3>
 8007542:	4652      	mov	r2, sl
 8007544:	465b      	mov	r3, fp
 8007546:	f7f8 fe4d 	bl	80001e4 <__adddf3>
 800754a:	9c04      	ldr	r4, [sp, #16]
 800754c:	460d      	mov	r5, r1
 800754e:	4622      	mov	r2, r4
 8007550:	460b      	mov	r3, r1
 8007552:	4640      	mov	r0, r8
 8007554:	4649      	mov	r1, r9
 8007556:	f7f8 fffb 	bl	8000550 <__aeabi_dmul>
 800755a:	4b63      	ldr	r3, [pc, #396]	; (80076e8 <__ieee754_pow+0x758>)
 800755c:	4680      	mov	r8, r0
 800755e:	4689      	mov	r9, r1
 8007560:	2200      	movs	r2, #0
 8007562:	4620      	mov	r0, r4
 8007564:	4629      	mov	r1, r5
 8007566:	f7f8 fe3b 	bl	80001e0 <__aeabi_dsub>
 800756a:	4632      	mov	r2, r6
 800756c:	463b      	mov	r3, r7
 800756e:	f7f8 fe37 	bl	80001e0 <__aeabi_dsub>
 8007572:	4602      	mov	r2, r0
 8007574:	460b      	mov	r3, r1
 8007576:	4650      	mov	r0, sl
 8007578:	4659      	mov	r1, fp
 800757a:	f7f8 fe31 	bl	80001e0 <__aeabi_dsub>
 800757e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007582:	f7f8 ffe5 	bl	8000550 <__aeabi_dmul>
 8007586:	4622      	mov	r2, r4
 8007588:	4606      	mov	r6, r0
 800758a:	460f      	mov	r7, r1
 800758c:	462b      	mov	r3, r5
 800758e:	ec51 0b18 	vmov	r0, r1, d8
 8007592:	f7f8 ffdd 	bl	8000550 <__aeabi_dmul>
 8007596:	4602      	mov	r2, r0
 8007598:	460b      	mov	r3, r1
 800759a:	4630      	mov	r0, r6
 800759c:	4639      	mov	r1, r7
 800759e:	f7f8 fe21 	bl	80001e4 <__adddf3>
 80075a2:	4606      	mov	r6, r0
 80075a4:	460f      	mov	r7, r1
 80075a6:	4602      	mov	r2, r0
 80075a8:	460b      	mov	r3, r1
 80075aa:	4640      	mov	r0, r8
 80075ac:	4649      	mov	r1, r9
 80075ae:	f7f8 fe19 	bl	80001e4 <__adddf3>
 80075b2:	9c04      	ldr	r4, [sp, #16]
 80075b4:	a33e      	add	r3, pc, #248	; (adr r3, 80076b0 <__ieee754_pow+0x720>)
 80075b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ba:	4620      	mov	r0, r4
 80075bc:	460d      	mov	r5, r1
 80075be:	f7f8 ffc7 	bl	8000550 <__aeabi_dmul>
 80075c2:	4642      	mov	r2, r8
 80075c4:	ec41 0b18 	vmov	d8, r0, r1
 80075c8:	464b      	mov	r3, r9
 80075ca:	4620      	mov	r0, r4
 80075cc:	4629      	mov	r1, r5
 80075ce:	f7f8 fe07 	bl	80001e0 <__aeabi_dsub>
 80075d2:	4602      	mov	r2, r0
 80075d4:	460b      	mov	r3, r1
 80075d6:	4630      	mov	r0, r6
 80075d8:	4639      	mov	r1, r7
 80075da:	f7f8 fe01 	bl	80001e0 <__aeabi_dsub>
 80075de:	a336      	add	r3, pc, #216	; (adr r3, 80076b8 <__ieee754_pow+0x728>)
 80075e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075e4:	f7f8 ffb4 	bl	8000550 <__aeabi_dmul>
 80075e8:	a335      	add	r3, pc, #212	; (adr r3, 80076c0 <__ieee754_pow+0x730>)
 80075ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80075ee:	4606      	mov	r6, r0
 80075f0:	460f      	mov	r7, r1
 80075f2:	4620      	mov	r0, r4
 80075f4:	4629      	mov	r1, r5
 80075f6:	f7f8 ffab 	bl	8000550 <__aeabi_dmul>
 80075fa:	4602      	mov	r2, r0
 80075fc:	460b      	mov	r3, r1
 80075fe:	4630      	mov	r0, r6
 8007600:	4639      	mov	r1, r7
 8007602:	f7f8 fdef 	bl	80001e4 <__adddf3>
 8007606:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007608:	4b38      	ldr	r3, [pc, #224]	; (80076ec <__ieee754_pow+0x75c>)
 800760a:	4413      	add	r3, r2
 800760c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007610:	f7f8 fde8 	bl	80001e4 <__adddf3>
 8007614:	4682      	mov	sl, r0
 8007616:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007618:	468b      	mov	fp, r1
 800761a:	f7f8 ff2f 	bl	800047c <__aeabi_i2d>
 800761e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007620:	4b33      	ldr	r3, [pc, #204]	; (80076f0 <__ieee754_pow+0x760>)
 8007622:	4413      	add	r3, r2
 8007624:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007628:	4606      	mov	r6, r0
 800762a:	460f      	mov	r7, r1
 800762c:	4652      	mov	r2, sl
 800762e:	465b      	mov	r3, fp
 8007630:	ec51 0b18 	vmov	r0, r1, d8
 8007634:	f7f8 fdd6 	bl	80001e4 <__adddf3>
 8007638:	4642      	mov	r2, r8
 800763a:	464b      	mov	r3, r9
 800763c:	f7f8 fdd2 	bl	80001e4 <__adddf3>
 8007640:	4632      	mov	r2, r6
 8007642:	463b      	mov	r3, r7
 8007644:	f7f8 fdce 	bl	80001e4 <__adddf3>
 8007648:	9c04      	ldr	r4, [sp, #16]
 800764a:	4632      	mov	r2, r6
 800764c:	463b      	mov	r3, r7
 800764e:	4620      	mov	r0, r4
 8007650:	460d      	mov	r5, r1
 8007652:	f7f8 fdc5 	bl	80001e0 <__aeabi_dsub>
 8007656:	4642      	mov	r2, r8
 8007658:	464b      	mov	r3, r9
 800765a:	f7f8 fdc1 	bl	80001e0 <__aeabi_dsub>
 800765e:	ec53 2b18 	vmov	r2, r3, d8
 8007662:	f7f8 fdbd 	bl	80001e0 <__aeabi_dsub>
 8007666:	4602      	mov	r2, r0
 8007668:	460b      	mov	r3, r1
 800766a:	4650      	mov	r0, sl
 800766c:	4659      	mov	r1, fp
 800766e:	e606      	b.n	800727e <__ieee754_pow+0x2ee>
 8007670:	2401      	movs	r4, #1
 8007672:	e6a0      	b.n	80073b6 <__ieee754_pow+0x426>
 8007674:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80076c8 <__ieee754_pow+0x738>
 8007678:	e60d      	b.n	8007296 <__ieee754_pow+0x306>
 800767a:	bf00      	nop
 800767c:	f3af 8000 	nop.w
 8007680:	4a454eef 	.word	0x4a454eef
 8007684:	3fca7e28 	.word	0x3fca7e28
 8007688:	93c9db65 	.word	0x93c9db65
 800768c:	3fcd864a 	.word	0x3fcd864a
 8007690:	a91d4101 	.word	0xa91d4101
 8007694:	3fd17460 	.word	0x3fd17460
 8007698:	518f264d 	.word	0x518f264d
 800769c:	3fd55555 	.word	0x3fd55555
 80076a0:	db6fabff 	.word	0xdb6fabff
 80076a4:	3fdb6db6 	.word	0x3fdb6db6
 80076a8:	33333303 	.word	0x33333303
 80076ac:	3fe33333 	.word	0x3fe33333
 80076b0:	e0000000 	.word	0xe0000000
 80076b4:	3feec709 	.word	0x3feec709
 80076b8:	dc3a03fd 	.word	0xdc3a03fd
 80076bc:	3feec709 	.word	0x3feec709
 80076c0:	145b01f5 	.word	0x145b01f5
 80076c4:	be3e2fe0 	.word	0xbe3e2fe0
 80076c8:	00000000 	.word	0x00000000
 80076cc:	3ff00000 	.word	0x3ff00000
 80076d0:	7ff00000 	.word	0x7ff00000
 80076d4:	43400000 	.word	0x43400000
 80076d8:	0003988e 	.word	0x0003988e
 80076dc:	000bb679 	.word	0x000bb679
 80076e0:	08007dd8 	.word	0x08007dd8
 80076e4:	3ff00000 	.word	0x3ff00000
 80076e8:	40080000 	.word	0x40080000
 80076ec:	08007df8 	.word	0x08007df8
 80076f0:	08007de8 	.word	0x08007de8
 80076f4:	a3b5      	add	r3, pc, #724	; (adr r3, 80079cc <__ieee754_pow+0xa3c>)
 80076f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fa:	4640      	mov	r0, r8
 80076fc:	4649      	mov	r1, r9
 80076fe:	f7f8 fd71 	bl	80001e4 <__adddf3>
 8007702:	4622      	mov	r2, r4
 8007704:	ec41 0b1a 	vmov	d10, r0, r1
 8007708:	462b      	mov	r3, r5
 800770a:	4630      	mov	r0, r6
 800770c:	4639      	mov	r1, r7
 800770e:	f7f8 fd67 	bl	80001e0 <__aeabi_dsub>
 8007712:	4602      	mov	r2, r0
 8007714:	460b      	mov	r3, r1
 8007716:	ec51 0b1a 	vmov	r0, r1, d10
 800771a:	f7f9 f9a9 	bl	8000a70 <__aeabi_dcmpgt>
 800771e:	2800      	cmp	r0, #0
 8007720:	f47f adf8 	bne.w	8007314 <__ieee754_pow+0x384>
 8007724:	4aa4      	ldr	r2, [pc, #656]	; (80079b8 <__ieee754_pow+0xa28>)
 8007726:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 800772a:	4293      	cmp	r3, r2
 800772c:	f340 810b 	ble.w	8007946 <__ieee754_pow+0x9b6>
 8007730:	151b      	asrs	r3, r3, #20
 8007732:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8007736:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 800773a:	fa4a f303 	asr.w	r3, sl, r3
 800773e:	445b      	add	r3, fp
 8007740:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8007744:	4e9d      	ldr	r6, [pc, #628]	; (80079bc <__ieee754_pow+0xa2c>)
 8007746:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 800774a:	4116      	asrs	r6, r2
 800774c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007750:	2000      	movs	r0, #0
 8007752:	ea23 0106 	bic.w	r1, r3, r6
 8007756:	f1c2 0214 	rsb	r2, r2, #20
 800775a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 800775e:	fa4a fa02 	asr.w	sl, sl, r2
 8007762:	f1bb 0f00 	cmp.w	fp, #0
 8007766:	4602      	mov	r2, r0
 8007768:	460b      	mov	r3, r1
 800776a:	4620      	mov	r0, r4
 800776c:	4629      	mov	r1, r5
 800776e:	bfb8      	it	lt
 8007770:	f1ca 0a00 	rsblt	sl, sl, #0
 8007774:	f7f8 fd34 	bl	80001e0 <__aeabi_dsub>
 8007778:	ec41 0b19 	vmov	d9, r0, r1
 800777c:	4642      	mov	r2, r8
 800777e:	464b      	mov	r3, r9
 8007780:	ec51 0b19 	vmov	r0, r1, d9
 8007784:	f7f8 fd2e 	bl	80001e4 <__adddf3>
 8007788:	2400      	movs	r4, #0
 800778a:	a379      	add	r3, pc, #484	; (adr r3, 8007970 <__ieee754_pow+0x9e0>)
 800778c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007790:	4620      	mov	r0, r4
 8007792:	460d      	mov	r5, r1
 8007794:	f7f8 fedc 	bl	8000550 <__aeabi_dmul>
 8007798:	ec53 2b19 	vmov	r2, r3, d9
 800779c:	4606      	mov	r6, r0
 800779e:	460f      	mov	r7, r1
 80077a0:	4620      	mov	r0, r4
 80077a2:	4629      	mov	r1, r5
 80077a4:	f7f8 fd1c 	bl	80001e0 <__aeabi_dsub>
 80077a8:	4602      	mov	r2, r0
 80077aa:	460b      	mov	r3, r1
 80077ac:	4640      	mov	r0, r8
 80077ae:	4649      	mov	r1, r9
 80077b0:	f7f8 fd16 	bl	80001e0 <__aeabi_dsub>
 80077b4:	a370      	add	r3, pc, #448	; (adr r3, 8007978 <__ieee754_pow+0x9e8>)
 80077b6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077ba:	f7f8 fec9 	bl	8000550 <__aeabi_dmul>
 80077be:	a370      	add	r3, pc, #448	; (adr r3, 8007980 <__ieee754_pow+0x9f0>)
 80077c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077c4:	4680      	mov	r8, r0
 80077c6:	4689      	mov	r9, r1
 80077c8:	4620      	mov	r0, r4
 80077ca:	4629      	mov	r1, r5
 80077cc:	f7f8 fec0 	bl	8000550 <__aeabi_dmul>
 80077d0:	4602      	mov	r2, r0
 80077d2:	460b      	mov	r3, r1
 80077d4:	4640      	mov	r0, r8
 80077d6:	4649      	mov	r1, r9
 80077d8:	f7f8 fd04 	bl	80001e4 <__adddf3>
 80077dc:	4604      	mov	r4, r0
 80077de:	460d      	mov	r5, r1
 80077e0:	4602      	mov	r2, r0
 80077e2:	460b      	mov	r3, r1
 80077e4:	4630      	mov	r0, r6
 80077e6:	4639      	mov	r1, r7
 80077e8:	f7f8 fcfc 	bl	80001e4 <__adddf3>
 80077ec:	4632      	mov	r2, r6
 80077ee:	463b      	mov	r3, r7
 80077f0:	4680      	mov	r8, r0
 80077f2:	4689      	mov	r9, r1
 80077f4:	f7f8 fcf4 	bl	80001e0 <__aeabi_dsub>
 80077f8:	4602      	mov	r2, r0
 80077fa:	460b      	mov	r3, r1
 80077fc:	4620      	mov	r0, r4
 80077fe:	4629      	mov	r1, r5
 8007800:	f7f8 fcee 	bl	80001e0 <__aeabi_dsub>
 8007804:	4642      	mov	r2, r8
 8007806:	4606      	mov	r6, r0
 8007808:	460f      	mov	r7, r1
 800780a:	464b      	mov	r3, r9
 800780c:	4640      	mov	r0, r8
 800780e:	4649      	mov	r1, r9
 8007810:	f7f8 fe9e 	bl	8000550 <__aeabi_dmul>
 8007814:	a35c      	add	r3, pc, #368	; (adr r3, 8007988 <__ieee754_pow+0x9f8>)
 8007816:	e9d3 2300 	ldrd	r2, r3, [r3]
 800781a:	4604      	mov	r4, r0
 800781c:	460d      	mov	r5, r1
 800781e:	f7f8 fe97 	bl	8000550 <__aeabi_dmul>
 8007822:	a35b      	add	r3, pc, #364	; (adr r3, 8007990 <__ieee754_pow+0xa00>)
 8007824:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007828:	f7f8 fcda 	bl	80001e0 <__aeabi_dsub>
 800782c:	4622      	mov	r2, r4
 800782e:	462b      	mov	r3, r5
 8007830:	f7f8 fe8e 	bl	8000550 <__aeabi_dmul>
 8007834:	a358      	add	r3, pc, #352	; (adr r3, 8007998 <__ieee754_pow+0xa08>)
 8007836:	e9d3 2300 	ldrd	r2, r3, [r3]
 800783a:	f7f8 fcd3 	bl	80001e4 <__adddf3>
 800783e:	4622      	mov	r2, r4
 8007840:	462b      	mov	r3, r5
 8007842:	f7f8 fe85 	bl	8000550 <__aeabi_dmul>
 8007846:	a356      	add	r3, pc, #344	; (adr r3, 80079a0 <__ieee754_pow+0xa10>)
 8007848:	e9d3 2300 	ldrd	r2, r3, [r3]
 800784c:	f7f8 fcc8 	bl	80001e0 <__aeabi_dsub>
 8007850:	4622      	mov	r2, r4
 8007852:	462b      	mov	r3, r5
 8007854:	f7f8 fe7c 	bl	8000550 <__aeabi_dmul>
 8007858:	a353      	add	r3, pc, #332	; (adr r3, 80079a8 <__ieee754_pow+0xa18>)
 800785a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800785e:	f7f8 fcc1 	bl	80001e4 <__adddf3>
 8007862:	4622      	mov	r2, r4
 8007864:	462b      	mov	r3, r5
 8007866:	f7f8 fe73 	bl	8000550 <__aeabi_dmul>
 800786a:	4602      	mov	r2, r0
 800786c:	460b      	mov	r3, r1
 800786e:	4640      	mov	r0, r8
 8007870:	4649      	mov	r1, r9
 8007872:	f7f8 fcb5 	bl	80001e0 <__aeabi_dsub>
 8007876:	4604      	mov	r4, r0
 8007878:	460d      	mov	r5, r1
 800787a:	4602      	mov	r2, r0
 800787c:	460b      	mov	r3, r1
 800787e:	4640      	mov	r0, r8
 8007880:	4649      	mov	r1, r9
 8007882:	f7f8 fe65 	bl	8000550 <__aeabi_dmul>
 8007886:	2200      	movs	r2, #0
 8007888:	ec41 0b19 	vmov	d9, r0, r1
 800788c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007890:	4620      	mov	r0, r4
 8007892:	4629      	mov	r1, r5
 8007894:	f7f8 fca4 	bl	80001e0 <__aeabi_dsub>
 8007898:	4602      	mov	r2, r0
 800789a:	460b      	mov	r3, r1
 800789c:	ec51 0b19 	vmov	r0, r1, d9
 80078a0:	f7f8 ff80 	bl	80007a4 <__aeabi_ddiv>
 80078a4:	4632      	mov	r2, r6
 80078a6:	4604      	mov	r4, r0
 80078a8:	460d      	mov	r5, r1
 80078aa:	463b      	mov	r3, r7
 80078ac:	4640      	mov	r0, r8
 80078ae:	4649      	mov	r1, r9
 80078b0:	f7f8 fe4e 	bl	8000550 <__aeabi_dmul>
 80078b4:	4632      	mov	r2, r6
 80078b6:	463b      	mov	r3, r7
 80078b8:	f7f8 fc94 	bl	80001e4 <__adddf3>
 80078bc:	4602      	mov	r2, r0
 80078be:	460b      	mov	r3, r1
 80078c0:	4620      	mov	r0, r4
 80078c2:	4629      	mov	r1, r5
 80078c4:	f7f8 fc8c 	bl	80001e0 <__aeabi_dsub>
 80078c8:	4642      	mov	r2, r8
 80078ca:	464b      	mov	r3, r9
 80078cc:	f7f8 fc88 	bl	80001e0 <__aeabi_dsub>
 80078d0:	460b      	mov	r3, r1
 80078d2:	4602      	mov	r2, r0
 80078d4:	493a      	ldr	r1, [pc, #232]	; (80079c0 <__ieee754_pow+0xa30>)
 80078d6:	2000      	movs	r0, #0
 80078d8:	f7f8 fc82 	bl	80001e0 <__aeabi_dsub>
 80078dc:	e9cd 0100 	strd	r0, r1, [sp]
 80078e0:	9b01      	ldr	r3, [sp, #4]
 80078e2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80078e6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80078ea:	da2f      	bge.n	800794c <__ieee754_pow+0x9bc>
 80078ec:	4650      	mov	r0, sl
 80078ee:	ed9d 0b00 	vldr	d0, [sp]
 80078f2:	f000 f9cd 	bl	8007c90 <scalbn>
 80078f6:	ec51 0b10 	vmov	r0, r1, d0
 80078fa:	ec53 2b18 	vmov	r2, r3, d8
 80078fe:	f7ff bbe0 	b.w	80070c2 <__ieee754_pow+0x132>
 8007902:	4b30      	ldr	r3, [pc, #192]	; (80079c4 <__ieee754_pow+0xa34>)
 8007904:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007908:	429e      	cmp	r6, r3
 800790a:	f77f af0b 	ble.w	8007724 <__ieee754_pow+0x794>
 800790e:	4b2e      	ldr	r3, [pc, #184]	; (80079c8 <__ieee754_pow+0xa38>)
 8007910:	440b      	add	r3, r1
 8007912:	4303      	orrs	r3, r0
 8007914:	d00b      	beq.n	800792e <__ieee754_pow+0x99e>
 8007916:	a326      	add	r3, pc, #152	; (adr r3, 80079b0 <__ieee754_pow+0xa20>)
 8007918:	e9d3 2300 	ldrd	r2, r3, [r3]
 800791c:	ec51 0b18 	vmov	r0, r1, d8
 8007920:	f7f8 fe16 	bl	8000550 <__aeabi_dmul>
 8007924:	a322      	add	r3, pc, #136	; (adr r3, 80079b0 <__ieee754_pow+0xa20>)
 8007926:	e9d3 2300 	ldrd	r2, r3, [r3]
 800792a:	f7ff bbca 	b.w	80070c2 <__ieee754_pow+0x132>
 800792e:	4622      	mov	r2, r4
 8007930:	462b      	mov	r3, r5
 8007932:	f7f8 fc55 	bl	80001e0 <__aeabi_dsub>
 8007936:	4642      	mov	r2, r8
 8007938:	464b      	mov	r3, r9
 800793a:	f7f9 f88f 	bl	8000a5c <__aeabi_dcmpge>
 800793e:	2800      	cmp	r0, #0
 8007940:	f43f aef0 	beq.w	8007724 <__ieee754_pow+0x794>
 8007944:	e7e7      	b.n	8007916 <__ieee754_pow+0x986>
 8007946:	f04f 0a00 	mov.w	sl, #0
 800794a:	e717      	b.n	800777c <__ieee754_pow+0x7ec>
 800794c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007950:	4619      	mov	r1, r3
 8007952:	e7d2      	b.n	80078fa <__ieee754_pow+0x96a>
 8007954:	491a      	ldr	r1, [pc, #104]	; (80079c0 <__ieee754_pow+0xa30>)
 8007956:	2000      	movs	r0, #0
 8007958:	f7ff bb9e 	b.w	8007098 <__ieee754_pow+0x108>
 800795c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007960:	f7ff bb9a 	b.w	8007098 <__ieee754_pow+0x108>
 8007964:	9000      	str	r0, [sp, #0]
 8007966:	f7ff bb76 	b.w	8007056 <__ieee754_pow+0xc6>
 800796a:	2100      	movs	r1, #0
 800796c:	f7ff bb60 	b.w	8007030 <__ieee754_pow+0xa0>
 8007970:	00000000 	.word	0x00000000
 8007974:	3fe62e43 	.word	0x3fe62e43
 8007978:	fefa39ef 	.word	0xfefa39ef
 800797c:	3fe62e42 	.word	0x3fe62e42
 8007980:	0ca86c39 	.word	0x0ca86c39
 8007984:	be205c61 	.word	0xbe205c61
 8007988:	72bea4d0 	.word	0x72bea4d0
 800798c:	3e663769 	.word	0x3e663769
 8007990:	c5d26bf1 	.word	0xc5d26bf1
 8007994:	3ebbbd41 	.word	0x3ebbbd41
 8007998:	af25de2c 	.word	0xaf25de2c
 800799c:	3f11566a 	.word	0x3f11566a
 80079a0:	16bebd93 	.word	0x16bebd93
 80079a4:	3f66c16c 	.word	0x3f66c16c
 80079a8:	5555553e 	.word	0x5555553e
 80079ac:	3fc55555 	.word	0x3fc55555
 80079b0:	c2f8f359 	.word	0xc2f8f359
 80079b4:	01a56e1f 	.word	0x01a56e1f
 80079b8:	3fe00000 	.word	0x3fe00000
 80079bc:	000fffff 	.word	0x000fffff
 80079c0:	3ff00000 	.word	0x3ff00000
 80079c4:	4090cbff 	.word	0x4090cbff
 80079c8:	3f6f3400 	.word	0x3f6f3400
 80079cc:	652b82fe 	.word	0x652b82fe
 80079d0:	3c971547 	.word	0x3c971547

080079d4 <__ieee754_sqrt>:
 80079d4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80079d8:	ec55 4b10 	vmov	r4, r5, d0
 80079dc:	4e56      	ldr	r6, [pc, #344]	; (8007b38 <__ieee754_sqrt+0x164>)
 80079de:	43ae      	bics	r6, r5
 80079e0:	ee10 0a10 	vmov	r0, s0
 80079e4:	ee10 3a10 	vmov	r3, s0
 80079e8:	4629      	mov	r1, r5
 80079ea:	462a      	mov	r2, r5
 80079ec:	d110      	bne.n	8007a10 <__ieee754_sqrt+0x3c>
 80079ee:	ee10 2a10 	vmov	r2, s0
 80079f2:	462b      	mov	r3, r5
 80079f4:	f7f8 fdac 	bl	8000550 <__aeabi_dmul>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4620      	mov	r0, r4
 80079fe:	4629      	mov	r1, r5
 8007a00:	f7f8 fbf0 	bl	80001e4 <__adddf3>
 8007a04:	4604      	mov	r4, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	ec45 4b10 	vmov	d0, r4, r5
 8007a0c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007a10:	2d00      	cmp	r5, #0
 8007a12:	dc10      	bgt.n	8007a36 <__ieee754_sqrt+0x62>
 8007a14:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007a18:	4330      	orrs	r0, r6
 8007a1a:	d0f5      	beq.n	8007a08 <__ieee754_sqrt+0x34>
 8007a1c:	b15d      	cbz	r5, 8007a36 <__ieee754_sqrt+0x62>
 8007a1e:	ee10 2a10 	vmov	r2, s0
 8007a22:	462b      	mov	r3, r5
 8007a24:	ee10 0a10 	vmov	r0, s0
 8007a28:	f7f8 fbda 	bl	80001e0 <__aeabi_dsub>
 8007a2c:	4602      	mov	r2, r0
 8007a2e:	460b      	mov	r3, r1
 8007a30:	f7f8 feb8 	bl	80007a4 <__aeabi_ddiv>
 8007a34:	e7e6      	b.n	8007a04 <__ieee754_sqrt+0x30>
 8007a36:	1509      	asrs	r1, r1, #20
 8007a38:	d076      	beq.n	8007b28 <__ieee754_sqrt+0x154>
 8007a3a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007a3e:	07ce      	lsls	r6, r1, #31
 8007a40:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007a44:	bf5e      	ittt	pl
 8007a46:	0fda      	lsrpl	r2, r3, #31
 8007a48:	005b      	lslpl	r3, r3, #1
 8007a4a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007a4e:	0fda      	lsrs	r2, r3, #31
 8007a50:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007a54:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007a58:	2000      	movs	r0, #0
 8007a5a:	106d      	asrs	r5, r5, #1
 8007a5c:	005b      	lsls	r3, r3, #1
 8007a5e:	f04f 0e16 	mov.w	lr, #22
 8007a62:	4684      	mov	ip, r0
 8007a64:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007a68:	eb0c 0401 	add.w	r4, ip, r1
 8007a6c:	4294      	cmp	r4, r2
 8007a6e:	bfde      	ittt	le
 8007a70:	1b12      	suble	r2, r2, r4
 8007a72:	eb04 0c01 	addle.w	ip, r4, r1
 8007a76:	1840      	addle	r0, r0, r1
 8007a78:	0052      	lsls	r2, r2, #1
 8007a7a:	f1be 0e01 	subs.w	lr, lr, #1
 8007a7e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007a82:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007a86:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007a8a:	d1ed      	bne.n	8007a68 <__ieee754_sqrt+0x94>
 8007a8c:	4671      	mov	r1, lr
 8007a8e:	2720      	movs	r7, #32
 8007a90:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007a94:	4562      	cmp	r2, ip
 8007a96:	eb04 060e 	add.w	r6, r4, lr
 8007a9a:	dc02      	bgt.n	8007aa2 <__ieee754_sqrt+0xce>
 8007a9c:	d113      	bne.n	8007ac6 <__ieee754_sqrt+0xf2>
 8007a9e:	429e      	cmp	r6, r3
 8007aa0:	d811      	bhi.n	8007ac6 <__ieee754_sqrt+0xf2>
 8007aa2:	2e00      	cmp	r6, #0
 8007aa4:	eb06 0e04 	add.w	lr, r6, r4
 8007aa8:	da43      	bge.n	8007b32 <__ieee754_sqrt+0x15e>
 8007aaa:	f1be 0f00 	cmp.w	lr, #0
 8007aae:	db40      	blt.n	8007b32 <__ieee754_sqrt+0x15e>
 8007ab0:	f10c 0801 	add.w	r8, ip, #1
 8007ab4:	eba2 020c 	sub.w	r2, r2, ip
 8007ab8:	429e      	cmp	r6, r3
 8007aba:	bf88      	it	hi
 8007abc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8007ac0:	1b9b      	subs	r3, r3, r6
 8007ac2:	4421      	add	r1, r4
 8007ac4:	46c4      	mov	ip, r8
 8007ac6:	0052      	lsls	r2, r2, #1
 8007ac8:	3f01      	subs	r7, #1
 8007aca:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007ace:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007ad2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007ad6:	d1dd      	bne.n	8007a94 <__ieee754_sqrt+0xc0>
 8007ad8:	4313      	orrs	r3, r2
 8007ada:	d006      	beq.n	8007aea <__ieee754_sqrt+0x116>
 8007adc:	1c4c      	adds	r4, r1, #1
 8007ade:	bf13      	iteet	ne
 8007ae0:	3101      	addne	r1, #1
 8007ae2:	3001      	addeq	r0, #1
 8007ae4:	4639      	moveq	r1, r7
 8007ae6:	f021 0101 	bicne.w	r1, r1, #1
 8007aea:	1043      	asrs	r3, r0, #1
 8007aec:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007af0:	0849      	lsrs	r1, r1, #1
 8007af2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007af6:	07c2      	lsls	r2, r0, #31
 8007af8:	bf48      	it	mi
 8007afa:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007afe:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007b02:	460c      	mov	r4, r1
 8007b04:	463d      	mov	r5, r7
 8007b06:	e77f      	b.n	8007a08 <__ieee754_sqrt+0x34>
 8007b08:	0ada      	lsrs	r2, r3, #11
 8007b0a:	3815      	subs	r0, #21
 8007b0c:	055b      	lsls	r3, r3, #21
 8007b0e:	2a00      	cmp	r2, #0
 8007b10:	d0fa      	beq.n	8007b08 <__ieee754_sqrt+0x134>
 8007b12:	02d7      	lsls	r7, r2, #11
 8007b14:	d50a      	bpl.n	8007b2c <__ieee754_sqrt+0x158>
 8007b16:	f1c1 0420 	rsb	r4, r1, #32
 8007b1a:	fa23 f404 	lsr.w	r4, r3, r4
 8007b1e:	1e4d      	subs	r5, r1, #1
 8007b20:	408b      	lsls	r3, r1
 8007b22:	4322      	orrs	r2, r4
 8007b24:	1b41      	subs	r1, r0, r5
 8007b26:	e788      	b.n	8007a3a <__ieee754_sqrt+0x66>
 8007b28:	4608      	mov	r0, r1
 8007b2a:	e7f0      	b.n	8007b0e <__ieee754_sqrt+0x13a>
 8007b2c:	0052      	lsls	r2, r2, #1
 8007b2e:	3101      	adds	r1, #1
 8007b30:	e7ef      	b.n	8007b12 <__ieee754_sqrt+0x13e>
 8007b32:	46e0      	mov	r8, ip
 8007b34:	e7be      	b.n	8007ab4 <__ieee754_sqrt+0xe0>
 8007b36:	bf00      	nop
 8007b38:	7ff00000 	.word	0x7ff00000

08007b3c <fabs>:
 8007b3c:	ec51 0b10 	vmov	r0, r1, d0
 8007b40:	ee10 2a10 	vmov	r2, s0
 8007b44:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007b48:	ec43 2b10 	vmov	d0, r2, r3
 8007b4c:	4770      	bx	lr

08007b4e <finite>:
 8007b4e:	b082      	sub	sp, #8
 8007b50:	ed8d 0b00 	vstr	d0, [sp]
 8007b54:	9801      	ldr	r0, [sp, #4]
 8007b56:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007b5a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007b5e:	0fc0      	lsrs	r0, r0, #31
 8007b60:	b002      	add	sp, #8
 8007b62:	4770      	bx	lr
 8007b64:	0000      	movs	r0, r0
	...

08007b68 <nan>:
 8007b68:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007b70 <nan+0x8>
 8007b6c:	4770      	bx	lr
 8007b6e:	bf00      	nop
 8007b70:	00000000 	.word	0x00000000
 8007b74:	7ff80000 	.word	0x7ff80000

08007b78 <rint>:
 8007b78:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007b7a:	ec51 0b10 	vmov	r0, r1, d0
 8007b7e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007b82:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007b86:	2e13      	cmp	r6, #19
 8007b88:	ee10 4a10 	vmov	r4, s0
 8007b8c:	460b      	mov	r3, r1
 8007b8e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007b92:	dc58      	bgt.n	8007c46 <rint+0xce>
 8007b94:	2e00      	cmp	r6, #0
 8007b96:	da2b      	bge.n	8007bf0 <rint+0x78>
 8007b98:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007b9c:	4302      	orrs	r2, r0
 8007b9e:	d023      	beq.n	8007be8 <rint+0x70>
 8007ba0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007ba4:	4302      	orrs	r2, r0
 8007ba6:	4254      	negs	r4, r2
 8007ba8:	4314      	orrs	r4, r2
 8007baa:	0c4b      	lsrs	r3, r1, #17
 8007bac:	0b24      	lsrs	r4, r4, #12
 8007bae:	045b      	lsls	r3, r3, #17
 8007bb0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007bb4:	ea44 0103 	orr.w	r1, r4, r3
 8007bb8:	4b32      	ldr	r3, [pc, #200]	; (8007c84 <rint+0x10c>)
 8007bba:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007bbe:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007bc2:	4602      	mov	r2, r0
 8007bc4:	460b      	mov	r3, r1
 8007bc6:	4630      	mov	r0, r6
 8007bc8:	4639      	mov	r1, r7
 8007bca:	f7f8 fb0b 	bl	80001e4 <__adddf3>
 8007bce:	e9cd 0100 	strd	r0, r1, [sp]
 8007bd2:	463b      	mov	r3, r7
 8007bd4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007bd8:	4632      	mov	r2, r6
 8007bda:	f7f8 fb01 	bl	80001e0 <__aeabi_dsub>
 8007bde:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007be2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007be6:	4639      	mov	r1, r7
 8007be8:	ec41 0b10 	vmov	d0, r0, r1
 8007bec:	b003      	add	sp, #12
 8007bee:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007bf0:	4a25      	ldr	r2, [pc, #148]	; (8007c88 <rint+0x110>)
 8007bf2:	4132      	asrs	r2, r6
 8007bf4:	ea01 0702 	and.w	r7, r1, r2
 8007bf8:	4307      	orrs	r7, r0
 8007bfa:	d0f5      	beq.n	8007be8 <rint+0x70>
 8007bfc:	0851      	lsrs	r1, r2, #1
 8007bfe:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007c02:	4314      	orrs	r4, r2
 8007c04:	d00c      	beq.n	8007c20 <rint+0xa8>
 8007c06:	ea23 0201 	bic.w	r2, r3, r1
 8007c0a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007c0e:	2e13      	cmp	r6, #19
 8007c10:	fa43 f606 	asr.w	r6, r3, r6
 8007c14:	bf0c      	ite	eq
 8007c16:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007c1a:	2400      	movne	r4, #0
 8007c1c:	ea42 0306 	orr.w	r3, r2, r6
 8007c20:	4918      	ldr	r1, [pc, #96]	; (8007c84 <rint+0x10c>)
 8007c22:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007c26:	4622      	mov	r2, r4
 8007c28:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007c2c:	4620      	mov	r0, r4
 8007c2e:	4629      	mov	r1, r5
 8007c30:	f7f8 fad8 	bl	80001e4 <__adddf3>
 8007c34:	e9cd 0100 	strd	r0, r1, [sp]
 8007c38:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007c3c:	4622      	mov	r2, r4
 8007c3e:	462b      	mov	r3, r5
 8007c40:	f7f8 face 	bl	80001e0 <__aeabi_dsub>
 8007c44:	e7d0      	b.n	8007be8 <rint+0x70>
 8007c46:	2e33      	cmp	r6, #51	; 0x33
 8007c48:	dd07      	ble.n	8007c5a <rint+0xe2>
 8007c4a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007c4e:	d1cb      	bne.n	8007be8 <rint+0x70>
 8007c50:	ee10 2a10 	vmov	r2, s0
 8007c54:	f7f8 fac6 	bl	80001e4 <__adddf3>
 8007c58:	e7c6      	b.n	8007be8 <rint+0x70>
 8007c5a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007c5e:	f04f 36ff 	mov.w	r6, #4294967295
 8007c62:	40d6      	lsrs	r6, r2
 8007c64:	4230      	tst	r0, r6
 8007c66:	d0bf      	beq.n	8007be8 <rint+0x70>
 8007c68:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007c6c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007c70:	bf1f      	itttt	ne
 8007c72:	ea24 0101 	bicne.w	r1, r4, r1
 8007c76:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007c7a:	fa44 f202 	asrne.w	r2, r4, r2
 8007c7e:	ea41 0402 	orrne.w	r4, r1, r2
 8007c82:	e7cd      	b.n	8007c20 <rint+0xa8>
 8007c84:	08007e08 	.word	0x08007e08
 8007c88:	000fffff 	.word	0x000fffff
 8007c8c:	00000000 	.word	0x00000000

08007c90 <scalbn>:
 8007c90:	b570      	push	{r4, r5, r6, lr}
 8007c92:	ec55 4b10 	vmov	r4, r5, d0
 8007c96:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007c9a:	4606      	mov	r6, r0
 8007c9c:	462b      	mov	r3, r5
 8007c9e:	b99a      	cbnz	r2, 8007cc8 <scalbn+0x38>
 8007ca0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ca4:	4323      	orrs	r3, r4
 8007ca6:	d036      	beq.n	8007d16 <scalbn+0x86>
 8007ca8:	4b39      	ldr	r3, [pc, #228]	; (8007d90 <scalbn+0x100>)
 8007caa:	4629      	mov	r1, r5
 8007cac:	ee10 0a10 	vmov	r0, s0
 8007cb0:	2200      	movs	r2, #0
 8007cb2:	f7f8 fc4d 	bl	8000550 <__aeabi_dmul>
 8007cb6:	4b37      	ldr	r3, [pc, #220]	; (8007d94 <scalbn+0x104>)
 8007cb8:	429e      	cmp	r6, r3
 8007cba:	4604      	mov	r4, r0
 8007cbc:	460d      	mov	r5, r1
 8007cbe:	da10      	bge.n	8007ce2 <scalbn+0x52>
 8007cc0:	a32b      	add	r3, pc, #172	; (adr r3, 8007d70 <scalbn+0xe0>)
 8007cc2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007cc6:	e03a      	b.n	8007d3e <scalbn+0xae>
 8007cc8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ccc:	428a      	cmp	r2, r1
 8007cce:	d10c      	bne.n	8007cea <scalbn+0x5a>
 8007cd0:	ee10 2a10 	vmov	r2, s0
 8007cd4:	4620      	mov	r0, r4
 8007cd6:	4629      	mov	r1, r5
 8007cd8:	f7f8 fa84 	bl	80001e4 <__adddf3>
 8007cdc:	4604      	mov	r4, r0
 8007cde:	460d      	mov	r5, r1
 8007ce0:	e019      	b.n	8007d16 <scalbn+0x86>
 8007ce2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007ce6:	460b      	mov	r3, r1
 8007ce8:	3a36      	subs	r2, #54	; 0x36
 8007cea:	4432      	add	r2, r6
 8007cec:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007cf0:	428a      	cmp	r2, r1
 8007cf2:	dd08      	ble.n	8007d06 <scalbn+0x76>
 8007cf4:	2d00      	cmp	r5, #0
 8007cf6:	a120      	add	r1, pc, #128	; (adr r1, 8007d78 <scalbn+0xe8>)
 8007cf8:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007cfc:	da1c      	bge.n	8007d38 <scalbn+0xa8>
 8007cfe:	a120      	add	r1, pc, #128	; (adr r1, 8007d80 <scalbn+0xf0>)
 8007d00:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d04:	e018      	b.n	8007d38 <scalbn+0xa8>
 8007d06:	2a00      	cmp	r2, #0
 8007d08:	dd08      	ble.n	8007d1c <scalbn+0x8c>
 8007d0a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d0e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d12:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007d16:	ec45 4b10 	vmov	d0, r4, r5
 8007d1a:	bd70      	pop	{r4, r5, r6, pc}
 8007d1c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007d20:	da19      	bge.n	8007d56 <scalbn+0xc6>
 8007d22:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007d26:	429e      	cmp	r6, r3
 8007d28:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007d2c:	dd0a      	ble.n	8007d44 <scalbn+0xb4>
 8007d2e:	a112      	add	r1, pc, #72	; (adr r1, 8007d78 <scalbn+0xe8>)
 8007d30:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d34:	2b00      	cmp	r3, #0
 8007d36:	d1e2      	bne.n	8007cfe <scalbn+0x6e>
 8007d38:	a30f      	add	r3, pc, #60	; (adr r3, 8007d78 <scalbn+0xe8>)
 8007d3a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007d3e:	f7f8 fc07 	bl	8000550 <__aeabi_dmul>
 8007d42:	e7cb      	b.n	8007cdc <scalbn+0x4c>
 8007d44:	a10a      	add	r1, pc, #40	; (adr r1, 8007d70 <scalbn+0xe0>)
 8007d46:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d4a:	2b00      	cmp	r3, #0
 8007d4c:	d0b8      	beq.n	8007cc0 <scalbn+0x30>
 8007d4e:	a10e      	add	r1, pc, #56	; (adr r1, 8007d88 <scalbn+0xf8>)
 8007d50:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007d54:	e7b4      	b.n	8007cc0 <scalbn+0x30>
 8007d56:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007d5a:	3236      	adds	r2, #54	; 0x36
 8007d5c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007d60:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007d64:	4620      	mov	r0, r4
 8007d66:	4b0c      	ldr	r3, [pc, #48]	; (8007d98 <scalbn+0x108>)
 8007d68:	2200      	movs	r2, #0
 8007d6a:	e7e8      	b.n	8007d3e <scalbn+0xae>
 8007d6c:	f3af 8000 	nop.w
 8007d70:	c2f8f359 	.word	0xc2f8f359
 8007d74:	01a56e1f 	.word	0x01a56e1f
 8007d78:	8800759c 	.word	0x8800759c
 8007d7c:	7e37e43c 	.word	0x7e37e43c
 8007d80:	8800759c 	.word	0x8800759c
 8007d84:	fe37e43c 	.word	0xfe37e43c
 8007d88:	c2f8f359 	.word	0xc2f8f359
 8007d8c:	81a56e1f 	.word	0x81a56e1f
 8007d90:	43500000 	.word	0x43500000
 8007d94:	ffff3cb0 	.word	0xffff3cb0
 8007d98:	3c900000 	.word	0x3c900000

08007d9c <_init>:
 8007d9c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007d9e:	bf00      	nop
 8007da0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007da2:	bc08      	pop	{r3}
 8007da4:	469e      	mov	lr, r3
 8007da6:	4770      	bx	lr

08007da8 <_fini>:
 8007da8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007daa:	bf00      	nop
 8007dac:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007dae:	bc08      	pop	{r3}
 8007db0:	469e      	mov	lr, r3
 8007db2:	4770      	bx	lr


week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a244  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a3e0  0800a3e0  0001a3e0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a448  0800a448  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  0800a448  0800a448  0001a448  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a450  0800a450  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a450  0800a450  0001a450  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a454  0800a454  0001a454  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  0800a458  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000005d4  20000098  0800a4f0  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000066c  0800a4f0  0002066c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   000112a0  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c2  00000000  00000000  00031368  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00033430  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  00034408  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a0f  00000000  00000000  00035350  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000113f3  00000000  00000000  0004bd5f  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090901  00000000  00000000  0005d152  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eda53  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a44  00000000  00000000  000edaa8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a3c4 	.word	0x0800a3c4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	0800a3c4 	.word	0x0800a3c4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800106a:	f002 fde9 	bl	8003c40 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800106e:	f000 f883 	bl	8001178 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001072:	f000 faaf 	bl	80015d4 <MX_GPIO_Init>
	MX_DMA_Init();
 8001076:	f000 fa85 	bl	8001584 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800107a:	f000 fa2d 	bl	80014d8 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800107e:	f000 f911 	bl	80012a4 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001082:	f000 f967 	bl	8001354 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001086:	f000 f9b1 	bl	80013ec <MX_TIM3_Init>
	MX_USART6_UART_Init();
 800108a:	f000 fa51 	bl	8001530 <MX_USART6_UART_Init>
	MX_I2C1_Init();
 800108e:	f000 f8db 	bl	8001248 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <main+0xf0>)
 8001094:	4a30      	ldr	r2, [pc, #192]	; (8001158 <main+0xf4>)
 8001096:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <main+0xf0>)
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <main+0xf0>)
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80010a4:	482b      	ldr	r0, [pc, #172]	; (8001154 <main+0xf0>)
 80010a6:	f000 fb43 	bl	8001730 <UARTInit>
	UARTResetStart(&UART2);
 80010aa:	482a      	ldr	r0, [pc, #168]	; (8001154 <main+0xf0>)
 80010ac:	f000 fb68 	bl	8001780 <UARTResetStart>
	//start micros
	HAL_TIM_Base_Start_IT(&htim2);
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <main+0xf8>)
 80010b2:	f006 f923 	bl	80072fc <HAL_TIM_Base_Start_IT>
	//Encoder start
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010b6:	213c      	movs	r1, #60	; 0x3c
 80010b8:	4829      	ldr	r0, [pc, #164]	; (8001160 <main+0xfc>)
 80010ba:	f006 fb31 	bl	8007720 <HAL_TIM_Encoder_Start>
	//PWM start AIN1
	HAL_TIM_Base_Start(&htim3);
 80010be:	4829      	ldr	r0, [pc, #164]	; (8001164 <main+0x100>)
 80010c0:	f006 f8c2 	bl	8007248 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010c4:	2100      	movs	r1, #0
 80010c6:	4827      	ldr	r0, [pc, #156]	; (8001164 <main+0x100>)
 80010c8:	f006 f9d4 	bl	8007474 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 5000;
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <main+0x100>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
	I2Con();
 80010d6:	f001 f9c1 	bl	800245c <I2Con>
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */

		int16_t inputChar = UARTReadChar(&UART2);
 80010da:	481e      	ldr	r0, [pc, #120]	; (8001154 <main+0xf0>)
 80010dc:	f000 fb74 	bl	80017c8 <UARTReadChar>
 80010e0:	4603      	mov	r3, r0
 80010e2:	80fb      	strh	r3, [r7, #6]
		a = inputChar;
 80010e4:	4a20      	ldr	r2, [pc, #128]	; (8001168 <main+0x104>)
 80010e6:	88fb      	ldrh	r3, [r7, #6]
 80010e8:	8013      	strh	r3, [r2, #0]
		if (inputChar != -1)
 80010ea:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010ee:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010f2:	d006      	beq.n	8001102 <main+0x9e>
		{
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 80010f4:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010f8:	4b16      	ldr	r3, [pc, #88]	; (8001154 <main+0xf0>)
 80010fa:	2101      	movs	r1, #1
 80010fc:	481b      	ldr	r0, [pc, #108]	; (800116c <main+0x108>)
 80010fe:	f000 fc47 	bl	8001990 <DynamixelProtocal2>
		}
		findingPosition();
 8001102:	f001 f9bf 	bl	8002484 <findingPosition>
		gotoSethome();
 8001106:	f001 fe23 	bl	8002d50 <gotoSethome>
		if (micros() - Timestamp >= dt){
 800110a:	f002 fa55 	bl	80035b8 <micros>
 800110e:	4b18      	ldr	r3, [pc, #96]	; (8001170 <main+0x10c>)
 8001110:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001114:	1a84      	subs	r4, r0, r2
 8001116:	eb61 0503 	sbc.w	r5, r1, r3
 800111a:	4b16      	ldr	r3, [pc, #88]	; (8001174 <main+0x110>)
 800111c:	881b      	ldrh	r3, [r3, #0]
 800111e:	b29a      	uxth	r2, r3
 8001120:	f04f 0300 	mov.w	r3, #0
 8001124:	429d      	cmp	r5, r3
 8001126:	bf08      	it	eq
 8001128:	4294      	cmpeq	r4, r2
 800112a:	d30f      	bcc.n	800114c <main+0xe8>
			Timestamp = micros();
 800112c:	f002 fa44 	bl	80035b8 <micros>
 8001130:	4602      	mov	r2, r0
 8001132:	460b      	mov	r3, r1
 8001134:	490e      	ldr	r1, [pc, #56]	; (8001170 <main+0x10c>)
 8001136:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory(Timestamp);
 800113a:	4b0d      	ldr	r3, [pc, #52]	; (8001170 <main+0x10c>)
 800113c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001140:	4610      	mov	r0, r2
 8001142:	4619      	mov	r1, r3
 8001144:	f001 fa90 	bl	8002668 <trajectory>
			kalman();
 8001148:	f001 fe56 	bl	8002df8 <kalman>
		}
		UARTTxDumpBuffer(&UART2);
 800114c:	4801      	ldr	r0, [pc, #4]	; (8001154 <main+0xf0>)
 800114e:	f000 fb87 	bl	8001860 <UARTTxDumpBuffer>
	{
 8001152:	e7c2      	b.n	80010da <main+0x76>
 8001154:	200000b4 	.word	0x200000b4
 8001158:	20000614 	.word	0x20000614
 800115c:	200005cc 	.word	0x200005cc
 8001160:	20000540 	.word	0x20000540
 8001164:	20000498 	.word	0x20000498
 8001168:	20000322 	.word	0x20000322
 800116c:	200000cc 	.word	0x200000cc
 8001170:	20000358 	.word	0x20000358
 8001174:	20000006 	.word	0x20000006

08001178 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001178:	b580      	push	{r7, lr}
 800117a:	b094      	sub	sp, #80	; 0x50
 800117c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117e:	f107 0320 	add.w	r3, r7, #32
 8001182:	2230      	movs	r2, #48	; 0x30
 8001184:	2100      	movs	r1, #0
 8001186:	4618      	mov	r0, r3
 8001188:	f008 f8d6 	bl	8009338 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800118c:	f107 030c 	add.w	r3, r7, #12
 8001190:	2200      	movs	r2, #0
 8001192:	601a      	str	r2, [r3, #0]
 8001194:	605a      	str	r2, [r3, #4]
 8001196:	609a      	str	r2, [r3, #8]
 8001198:	60da      	str	r2, [r3, #12]
 800119a:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 800119c:	2300      	movs	r3, #0
 800119e:	60bb      	str	r3, [r7, #8]
 80011a0:	4b27      	ldr	r3, [pc, #156]	; (8001240 <SystemClock_Config+0xc8>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	4a26      	ldr	r2, [pc, #152]	; (8001240 <SystemClock_Config+0xc8>)
 80011a6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011aa:	6413      	str	r3, [r2, #64]	; 0x40
 80011ac:	4b24      	ldr	r3, [pc, #144]	; (8001240 <SystemClock_Config+0xc8>)
 80011ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b4:	60bb      	str	r3, [r7, #8]
 80011b6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b8:	2300      	movs	r3, #0
 80011ba:	607b      	str	r3, [r7, #4]
 80011bc:	4b21      	ldr	r3, [pc, #132]	; (8001244 <SystemClock_Config+0xcc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	4a20      	ldr	r2, [pc, #128]	; (8001244 <SystemClock_Config+0xcc>)
 80011c2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c6:	6013      	str	r3, [r2, #0]
 80011c8:	4b1e      	ldr	r3, [pc, #120]	; (8001244 <SystemClock_Config+0xcc>)
 80011ca:	681b      	ldr	r3, [r3, #0]
 80011cc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011d0:	607b      	str	r3, [r7, #4]
 80011d2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d4:	2302      	movs	r3, #2
 80011d6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d8:	2301      	movs	r3, #1
 80011da:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011dc:	2310      	movs	r3, #16
 80011de:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011e0:	2302      	movs	r3, #2
 80011e2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e4:	2300      	movs	r3, #0
 80011e6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011e8:	2308      	movs	r3, #8
 80011ea:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80011ec:	2364      	movs	r3, #100	; 0x64
 80011ee:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011f0:	2302      	movs	r3, #2
 80011f2:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f4:	2304      	movs	r3, #4
 80011f6:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f8:	f107 0320 	add.w	r3, r7, #32
 80011fc:	4618      	mov	r0, r3
 80011fe:	f005 fb5f 	bl	80068c0 <HAL_RCC_OscConfig>
 8001202:	4603      	mov	r3, r0
 8001204:	2b00      	cmp	r3, #0
 8001206:	d001      	beq.n	800120c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001208:	f002 f9f0 	bl	80035ec <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800120c:	230f      	movs	r3, #15
 800120e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001210:	2302      	movs	r3, #2
 8001212:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001214:	2300      	movs	r3, #0
 8001216:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001218:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800121c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121e:	2300      	movs	r3, #0
 8001220:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001222:	f107 030c 	add.w	r3, r7, #12
 8001226:	2103      	movs	r1, #3
 8001228:	4618      	mov	r0, r3
 800122a:	f005 fdc1 	bl	8006db0 <HAL_RCC_ClockConfig>
 800122e:	4603      	mov	r3, r0
 8001230:	2b00      	cmp	r3, #0
 8001232:	d001      	beq.n	8001238 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001234:	f002 f9da 	bl	80035ec <Error_Handler>
	}
}
 8001238:	bf00      	nop
 800123a:	3750      	adds	r7, #80	; 0x50
 800123c:	46bd      	mov	sp, r7
 800123e:	bd80      	pop	{r7, pc}
 8001240:	40023800 	.word	0x40023800
 8001244:	40007000 	.word	0x40007000

08001248 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001248:	b580      	push	{r7, lr}
 800124a:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 800124c:	4b12      	ldr	r3, [pc, #72]	; (8001298 <MX_I2C1_Init+0x50>)
 800124e:	4a13      	ldr	r2, [pc, #76]	; (800129c <MX_I2C1_Init+0x54>)
 8001250:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 8001252:	4b11      	ldr	r3, [pc, #68]	; (8001298 <MX_I2C1_Init+0x50>)
 8001254:	4a12      	ldr	r2, [pc, #72]	; (80012a0 <MX_I2C1_Init+0x58>)
 8001256:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001258:	4b0f      	ldr	r3, [pc, #60]	; (8001298 <MX_I2C1_Init+0x50>)
 800125a:	2200      	movs	r2, #0
 800125c:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800125e:	4b0e      	ldr	r3, [pc, #56]	; (8001298 <MX_I2C1_Init+0x50>)
 8001260:	2200      	movs	r2, #0
 8001262:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001264:	4b0c      	ldr	r3, [pc, #48]	; (8001298 <MX_I2C1_Init+0x50>)
 8001266:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800126a:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 800126c:	4b0a      	ldr	r3, [pc, #40]	; (8001298 <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 8001272:	4b09      	ldr	r3, [pc, #36]	; (8001298 <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001278:	4b07      	ldr	r3, [pc, #28]	; (8001298 <MX_I2C1_Init+0x50>)
 800127a:	2200      	movs	r2, #0
 800127c:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127e:	4b06      	ldr	r3, [pc, #24]	; (8001298 <MX_I2C1_Init+0x50>)
 8001280:	2200      	movs	r2, #0
 8001282:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001284:	4804      	ldr	r0, [pc, #16]	; (8001298 <MX_I2C1_Init+0x50>)
 8001286:	f003 fc7b 	bl	8004b80 <HAL_I2C_Init>
 800128a:	4603      	mov	r3, r0
 800128c:	2b00      	cmp	r3, #0
 800128e:	d001      	beq.n	8001294 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 8001290:	f002 f9ac 	bl	80035ec <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001294:	bf00      	nop
 8001296:	bd80      	pop	{r7, pc}
 8001298:	20000444 	.word	0x20000444
 800129c:	40005400 	.word	0x40005400
 80012a0:	000186a0 	.word	0x000186a0

080012a4 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012a4:	b580      	push	{r7, lr}
 80012a6:	b08c      	sub	sp, #48	; 0x30
 80012a8:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80012aa:	f107 030c 	add.w	r3, r7, #12
 80012ae:	2224      	movs	r2, #36	; 0x24
 80012b0:	2100      	movs	r1, #0
 80012b2:	4618      	mov	r0, r3
 80012b4:	f008 f840 	bl	8009338 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b8:	1d3b      	adds	r3, r7, #4
 80012ba:	2200      	movs	r2, #0
 80012bc:	601a      	str	r2, [r3, #0]
 80012be:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012c0:	4b22      	ldr	r3, [pc, #136]	; (800134c <MX_TIM1_Init+0xa8>)
 80012c2:	4a23      	ldr	r2, [pc, #140]	; (8001350 <MX_TIM1_Init+0xac>)
 80012c4:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80012c6:	4b21      	ldr	r3, [pc, #132]	; (800134c <MX_TIM1_Init+0xa8>)
 80012c8:	2200      	movs	r2, #0
 80012ca:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012cc:	4b1f      	ldr	r3, [pc, #124]	; (800134c <MX_TIM1_Init+0xa8>)
 80012ce:	2200      	movs	r2, #0
 80012d0:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2047;
 80012d2:	4b1e      	ldr	r3, [pc, #120]	; (800134c <MX_TIM1_Init+0xa8>)
 80012d4:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012d8:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012da:	4b1c      	ldr	r3, [pc, #112]	; (800134c <MX_TIM1_Init+0xa8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80012e0:	4b1a      	ldr	r3, [pc, #104]	; (800134c <MX_TIM1_Init+0xa8>)
 80012e2:	2200      	movs	r2, #0
 80012e4:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e6:	4b19      	ldr	r3, [pc, #100]	; (800134c <MX_TIM1_Init+0xa8>)
 80012e8:	2200      	movs	r2, #0
 80012ea:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012ec:	2303      	movs	r3, #3
 80012ee:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012f0:	2300      	movs	r3, #0
 80012f2:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f4:	2301      	movs	r3, #1
 80012f6:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f8:	2300      	movs	r3, #0
 80012fa:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 3;
 80012fc:	2303      	movs	r3, #3
 80012fe:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 8001300:	2300      	movs	r3, #0
 8001302:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001304:	2301      	movs	r3, #1
 8001306:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001308:	2300      	movs	r3, #0
 800130a:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 5;
 800130c:	2305      	movs	r3, #5
 800130e:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001310:	f107 030c 	add.w	r3, r7, #12
 8001314:	4619      	mov	r1, r3
 8001316:	480d      	ldr	r0, [pc, #52]	; (800134c <MX_TIM1_Init+0xa8>)
 8001318:	f006 f95c 	bl	80075d4 <HAL_TIM_Encoder_Init>
 800131c:	4603      	mov	r3, r0
 800131e:	2b00      	cmp	r3, #0
 8001320:	d001      	beq.n	8001326 <MX_TIM1_Init+0x82>
	{
		Error_Handler();
 8001322:	f002 f963 	bl	80035ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001326:	2300      	movs	r3, #0
 8001328:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800132a:	2300      	movs	r3, #0
 800132c:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132e:	1d3b      	adds	r3, r7, #4
 8001330:	4619      	mov	r1, r3
 8001332:	4806      	ldr	r0, [pc, #24]	; (800134c <MX_TIM1_Init+0xa8>)
 8001334:	f007 f800 	bl	8008338 <HAL_TIMEx_MasterConfigSynchronization>
 8001338:	4603      	mov	r3, r0
 800133a:	2b00      	cmp	r3, #0
 800133c:	d001      	beq.n	8001342 <MX_TIM1_Init+0x9e>
	{
		Error_Handler();
 800133e:	f002 f955 	bl	80035ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 8001342:	bf00      	nop
 8001344:	3730      	adds	r7, #48	; 0x30
 8001346:	46bd      	mov	sp, r7
 8001348:	bd80      	pop	{r7, pc}
 800134a:	bf00      	nop
 800134c:	20000540 	.word	0x20000540
 8001350:	40010000 	.word	0x40010000

08001354 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001354:	b580      	push	{r7, lr}
 8001356:	b086      	sub	sp, #24
 8001358:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800135a:	f107 0308 	add.w	r3, r7, #8
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]
 8001364:	609a      	str	r2, [r3, #8]
 8001366:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001368:	463b      	mov	r3, r7
 800136a:	2200      	movs	r2, #0
 800136c:	601a      	str	r2, [r3, #0]
 800136e:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001370:	4b1d      	ldr	r3, [pc, #116]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001372:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001376:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8001378:	4b1b      	ldr	r3, [pc, #108]	; (80013e8 <MX_TIM2_Init+0x94>)
 800137a:	2263      	movs	r2, #99	; 0x63
 800137c:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137e:	4b1a      	ldr	r3, [pc, #104]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001380:	2200      	movs	r2, #0
 8001382:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001384:	4b18      	ldr	r3, [pc, #96]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001386:	f04f 32ff 	mov.w	r2, #4294967295
 800138a:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800138c:	4b16      	ldr	r3, [pc, #88]	; (80013e8 <MX_TIM2_Init+0x94>)
 800138e:	2200      	movs	r2, #0
 8001390:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001392:	4b15      	ldr	r3, [pc, #84]	; (80013e8 <MX_TIM2_Init+0x94>)
 8001394:	2200      	movs	r2, #0
 8001396:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001398:	4813      	ldr	r0, [pc, #76]	; (80013e8 <MX_TIM2_Init+0x94>)
 800139a:	f005 ff05 	bl	80071a8 <HAL_TIM_Base_Init>
 800139e:	4603      	mov	r3, r0
 80013a0:	2b00      	cmp	r3, #0
 80013a2:	d001      	beq.n	80013a8 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80013a4:	f002 f922 	bl	80035ec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a8:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013ac:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013ae:	f107 0308 	add.w	r3, r7, #8
 80013b2:	4619      	mov	r1, r3
 80013b4:	480c      	ldr	r0, [pc, #48]	; (80013e8 <MX_TIM2_Init+0x94>)
 80013b6:	f006 fc07 	bl	8007bc8 <HAL_TIM_ConfigClockSource>
 80013ba:	4603      	mov	r3, r0
 80013bc:	2b00      	cmp	r3, #0
 80013be:	d001      	beq.n	80013c4 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80013c0:	f002 f914 	bl	80035ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c4:	2300      	movs	r3, #0
 80013c6:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c8:	2300      	movs	r3, #0
 80013ca:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013cc:	463b      	mov	r3, r7
 80013ce:	4619      	mov	r1, r3
 80013d0:	4805      	ldr	r0, [pc, #20]	; (80013e8 <MX_TIM2_Init+0x94>)
 80013d2:	f006 ffb1 	bl	8008338 <HAL_TIMEx_MasterConfigSynchronization>
 80013d6:	4603      	mov	r3, r0
 80013d8:	2b00      	cmp	r3, #0
 80013da:	d001      	beq.n	80013e0 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80013dc:	f002 f906 	bl	80035ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80013e0:	bf00      	nop
 80013e2:	3718      	adds	r7, #24
 80013e4:	46bd      	mov	sp, r7
 80013e6:	bd80      	pop	{r7, pc}
 80013e8:	200005cc 	.word	0x200005cc

080013ec <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80013ec:	b580      	push	{r7, lr}
 80013ee:	b08e      	sub	sp, #56	; 0x38
 80013f0:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013f2:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f6:	2200      	movs	r2, #0
 80013f8:	601a      	str	r2, [r3, #0]
 80013fa:	605a      	str	r2, [r3, #4]
 80013fc:	609a      	str	r2, [r3, #8]
 80013fe:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001400:	f107 0320 	add.w	r3, r7, #32
 8001404:	2200      	movs	r2, #0
 8001406:	601a      	str	r2, [r3, #0]
 8001408:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 800140a:	1d3b      	adds	r3, r7, #4
 800140c:	2200      	movs	r2, #0
 800140e:	601a      	str	r2, [r3, #0]
 8001410:	605a      	str	r2, [r3, #4]
 8001412:	609a      	str	r2, [r3, #8]
 8001414:	60da      	str	r2, [r3, #12]
 8001416:	611a      	str	r2, [r3, #16]
 8001418:	615a      	str	r2, [r3, #20]
 800141a:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 800141c:	4b2c      	ldr	r3, [pc, #176]	; (80014d0 <MX_TIM3_Init+0xe4>)
 800141e:	4a2d      	ldr	r2, [pc, #180]	; (80014d4 <MX_TIM3_Init+0xe8>)
 8001420:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 8001422:	4b2b      	ldr	r3, [pc, #172]	; (80014d0 <MX_TIM3_Init+0xe4>)
 8001424:	2263      	movs	r2, #99	; 0x63
 8001426:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001428:	4b29      	ldr	r3, [pc, #164]	; (80014d0 <MX_TIM3_Init+0xe4>)
 800142a:	2200      	movs	r2, #0
 800142c:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000;
 800142e:	4b28      	ldr	r3, [pc, #160]	; (80014d0 <MX_TIM3_Init+0xe4>)
 8001430:	f242 7210 	movw	r2, #10000	; 0x2710
 8001434:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001436:	4b26      	ldr	r3, [pc, #152]	; (80014d0 <MX_TIM3_Init+0xe4>)
 8001438:	2200      	movs	r2, #0
 800143a:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800143c:	4b24      	ldr	r3, [pc, #144]	; (80014d0 <MX_TIM3_Init+0xe4>)
 800143e:	2200      	movs	r2, #0
 8001440:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001442:	4823      	ldr	r0, [pc, #140]	; (80014d0 <MX_TIM3_Init+0xe4>)
 8001444:	f005 feb0 	bl	80071a8 <HAL_TIM_Base_Init>
 8001448:	4603      	mov	r3, r0
 800144a:	2b00      	cmp	r3, #0
 800144c:	d001      	beq.n	8001452 <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 800144e:	f002 f8cd 	bl	80035ec <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001452:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001456:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001458:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800145c:	4619      	mov	r1, r3
 800145e:	481c      	ldr	r0, [pc, #112]	; (80014d0 <MX_TIM3_Init+0xe4>)
 8001460:	f006 fbb2 	bl	8007bc8 <HAL_TIM_ConfigClockSource>
 8001464:	4603      	mov	r3, r0
 8001466:	2b00      	cmp	r3, #0
 8001468:	d001      	beq.n	800146e <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 800146a:	f002 f8bf 	bl	80035ec <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800146e:	4818      	ldr	r0, [pc, #96]	; (80014d0 <MX_TIM3_Init+0xe4>)
 8001470:	f005 ffa6 	bl	80073c0 <HAL_TIM_PWM_Init>
 8001474:	4603      	mov	r3, r0
 8001476:	2b00      	cmp	r3, #0
 8001478:	d001      	beq.n	800147e <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 800147a:	f002 f8b7 	bl	80035ec <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147e:	2300      	movs	r3, #0
 8001480:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001482:	2300      	movs	r3, #0
 8001484:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001486:	f107 0320 	add.w	r3, r7, #32
 800148a:	4619      	mov	r1, r3
 800148c:	4810      	ldr	r0, [pc, #64]	; (80014d0 <MX_TIM3_Init+0xe4>)
 800148e:	f006 ff53 	bl	8008338 <HAL_TIMEx_MasterConfigSynchronization>
 8001492:	4603      	mov	r3, r0
 8001494:	2b00      	cmp	r3, #0
 8001496:	d001      	beq.n	800149c <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 8001498:	f002 f8a8 	bl	80035ec <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 800149c:	2360      	movs	r3, #96	; 0x60
 800149e:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a4:	2300      	movs	r3, #0
 80014a6:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a8:	2300      	movs	r3, #0
 80014aa:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014ac:	1d3b      	adds	r3, r7, #4
 80014ae:	2200      	movs	r2, #0
 80014b0:	4619      	mov	r1, r3
 80014b2:	4807      	ldr	r0, [pc, #28]	; (80014d0 <MX_TIM3_Init+0xe4>)
 80014b4:	f006 faca 	bl	8007a4c <HAL_TIM_PWM_ConfigChannel>
 80014b8:	4603      	mov	r3, r0
 80014ba:	2b00      	cmp	r3, #0
 80014bc:	d001      	beq.n	80014c2 <MX_TIM3_Init+0xd6>
	{
		Error_Handler();
 80014be:	f002 f895 	bl	80035ec <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80014c2:	4803      	ldr	r0, [pc, #12]	; (80014d0 <MX_TIM3_Init+0xe4>)
 80014c4:	f002 f9a4 	bl	8003810 <HAL_TIM_MspPostInit>

}
 80014c8:	bf00      	nop
 80014ca:	3738      	adds	r7, #56	; 0x38
 80014cc:	46bd      	mov	sp, r7
 80014ce:	bd80      	pop	{r7, pc}
 80014d0:	20000498 	.word	0x20000498
 80014d4:	40000400 	.word	0x40000400

080014d8 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014d8:	b580      	push	{r7, lr}
 80014da:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014dc:	4b12      	ldr	r3, [pc, #72]	; (8001528 <MX_USART2_UART_Init+0x50>)
 80014de:	4a13      	ldr	r2, [pc, #76]	; (800152c <MX_USART2_UART_Init+0x54>)
 80014e0:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 512000;
 80014e2:	4b11      	ldr	r3, [pc, #68]	; (8001528 <MX_USART2_UART_Init+0x50>)
 80014e4:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80014e8:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80014ea:	4b0f      	ldr	r3, [pc, #60]	; (8001528 <MX_USART2_UART_Init+0x50>)
 80014ec:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014f0:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014f2:	4b0d      	ldr	r3, [pc, #52]	; (8001528 <MX_USART2_UART_Init+0x50>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80014f8:	4b0b      	ldr	r3, [pc, #44]	; (8001528 <MX_USART2_UART_Init+0x50>)
 80014fa:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fe:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001500:	4b09      	ldr	r3, [pc, #36]	; (8001528 <MX_USART2_UART_Init+0x50>)
 8001502:	220c      	movs	r2, #12
 8001504:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001506:	4b08      	ldr	r3, [pc, #32]	; (8001528 <MX_USART2_UART_Init+0x50>)
 8001508:	2200      	movs	r2, #0
 800150a:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 800150c:	4b06      	ldr	r3, [pc, #24]	; (8001528 <MX_USART2_UART_Init+0x50>)
 800150e:	2200      	movs	r2, #0
 8001510:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 8001512:	4805      	ldr	r0, [pc, #20]	; (8001528 <MX_USART2_UART_Init+0x50>)
 8001514:	f006 ff92 	bl	800843c <HAL_UART_Init>
 8001518:	4603      	mov	r3, r0
 800151a:	2b00      	cmp	r3, #0
 800151c:	d001      	beq.n	8001522 <MX_USART2_UART_Init+0x4a>
	{
		Error_Handler();
 800151e:	f002 f865 	bl	80035ec <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 8001522:	bf00      	nop
 8001524:	bd80      	pop	{r7, pc}
 8001526:	bf00      	nop
 8001528:	20000614 	.word	0x20000614
 800152c:	40004400 	.word	0x40004400

08001530 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 8001530:	b580      	push	{r7, lr}
 8001532:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001534:	4b11      	ldr	r3, [pc, #68]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001536:	4a12      	ldr	r2, [pc, #72]	; (8001580 <MX_USART6_UART_Init+0x50>)
 8001538:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 800153a:	4b10      	ldr	r3, [pc, #64]	; (800157c <MX_USART6_UART_Init+0x4c>)
 800153c:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001540:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001542:	4b0e      	ldr	r3, [pc, #56]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001548:	4b0c      	ldr	r3, [pc, #48]	; (800157c <MX_USART6_UART_Init+0x4c>)
 800154a:	2200      	movs	r2, #0
 800154c:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800154e:	4b0b      	ldr	r3, [pc, #44]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001554:	4b09      	ldr	r3, [pc, #36]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001556:	220c      	movs	r2, #12
 8001558:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800155a:	4b08      	ldr	r3, [pc, #32]	; (800157c <MX_USART6_UART_Init+0x4c>)
 800155c:	2200      	movs	r2, #0
 800155e:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001560:	4b06      	ldr	r3, [pc, #24]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001562:	2200      	movs	r2, #0
 8001564:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001566:	4805      	ldr	r0, [pc, #20]	; (800157c <MX_USART6_UART_Init+0x4c>)
 8001568:	f006 ff68 	bl	800843c <HAL_UART_Init>
 800156c:	4603      	mov	r3, r0
 800156e:	2b00      	cmp	r3, #0
 8001570:	d001      	beq.n	8001576 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 8001572:	f002 f83b 	bl	80035ec <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001576:	bf00      	nop
 8001578:	bd80      	pop	{r7, pc}
 800157a:	bf00      	nop
 800157c:	20000588 	.word	0x20000588
 8001580:	40011400 	.word	0x40011400

08001584 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001584:	b580      	push	{r7, lr}
 8001586:	b082      	sub	sp, #8
 8001588:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 800158a:	2300      	movs	r3, #0
 800158c:	607b      	str	r3, [r7, #4]
 800158e:	4b10      	ldr	r3, [pc, #64]	; (80015d0 <MX_DMA_Init+0x4c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	4a0f      	ldr	r2, [pc, #60]	; (80015d0 <MX_DMA_Init+0x4c>)
 8001594:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001598:	6313      	str	r3, [r2, #48]	; 0x30
 800159a:	4b0d      	ldr	r3, [pc, #52]	; (80015d0 <MX_DMA_Init+0x4c>)
 800159c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159e:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80015a2:	607b      	str	r3, [r7, #4]
 80015a4:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015a6:	2200      	movs	r2, #0
 80015a8:	2100      	movs	r1, #0
 80015aa:	2010      	movs	r0, #16
 80015ac:	f002 fcdd 	bl	8003f6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015b0:	2010      	movs	r0, #16
 80015b2:	f002 fcf6 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015b6:	2200      	movs	r2, #0
 80015b8:	2100      	movs	r1, #0
 80015ba:	2011      	movs	r0, #17
 80015bc:	f002 fcd5 	bl	8003f6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015c0:	2011      	movs	r0, #17
 80015c2:	f002 fcee 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

}
 80015c6:	bf00      	nop
 80015c8:	3708      	adds	r7, #8
 80015ca:	46bd      	mov	sp, r7
 80015cc:	bd80      	pop	{r7, pc}
 80015ce:	bf00      	nop
 80015d0:	40023800 	.word	0x40023800

080015d4 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015d4:	b580      	push	{r7, lr}
 80015d6:	b08a      	sub	sp, #40	; 0x28
 80015d8:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015da:	f107 0314 	add.w	r3, r7, #20
 80015de:	2200      	movs	r2, #0
 80015e0:	601a      	str	r2, [r3, #0]
 80015e2:	605a      	str	r2, [r3, #4]
 80015e4:	609a      	str	r2, [r3, #8]
 80015e6:	60da      	str	r2, [r3, #12]
 80015e8:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015ea:	2300      	movs	r3, #0
 80015ec:	613b      	str	r3, [r7, #16]
 80015ee:	4b4a      	ldr	r3, [pc, #296]	; (8001718 <MX_GPIO_Init+0x144>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	4a49      	ldr	r2, [pc, #292]	; (8001718 <MX_GPIO_Init+0x144>)
 80015f4:	f043 0304 	orr.w	r3, r3, #4
 80015f8:	6313      	str	r3, [r2, #48]	; 0x30
 80015fa:	4b47      	ldr	r3, [pc, #284]	; (8001718 <MX_GPIO_Init+0x144>)
 80015fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fe:	f003 0304 	and.w	r3, r3, #4
 8001602:	613b      	str	r3, [r7, #16]
 8001604:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001606:	2300      	movs	r3, #0
 8001608:	60fb      	str	r3, [r7, #12]
 800160a:	4b43      	ldr	r3, [pc, #268]	; (8001718 <MX_GPIO_Init+0x144>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	4a42      	ldr	r2, [pc, #264]	; (8001718 <MX_GPIO_Init+0x144>)
 8001610:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001614:	6313      	str	r3, [r2, #48]	; 0x30
 8001616:	4b40      	ldr	r3, [pc, #256]	; (8001718 <MX_GPIO_Init+0x144>)
 8001618:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161a:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161e:	60fb      	str	r3, [r7, #12]
 8001620:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 8001622:	2300      	movs	r3, #0
 8001624:	60bb      	str	r3, [r7, #8]
 8001626:	4b3c      	ldr	r3, [pc, #240]	; (8001718 <MX_GPIO_Init+0x144>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	4a3b      	ldr	r2, [pc, #236]	; (8001718 <MX_GPIO_Init+0x144>)
 800162c:	f043 0301 	orr.w	r3, r3, #1
 8001630:	6313      	str	r3, [r2, #48]	; 0x30
 8001632:	4b39      	ldr	r3, [pc, #228]	; (8001718 <MX_GPIO_Init+0x144>)
 8001634:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001636:	f003 0301 	and.w	r3, r3, #1
 800163a:	60bb      	str	r3, [r7, #8]
 800163c:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800163e:	2300      	movs	r3, #0
 8001640:	607b      	str	r3, [r7, #4]
 8001642:	4b35      	ldr	r3, [pc, #212]	; (8001718 <MX_GPIO_Init+0x144>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	4a34      	ldr	r2, [pc, #208]	; (8001718 <MX_GPIO_Init+0x144>)
 8001648:	f043 0302 	orr.w	r3, r3, #2
 800164c:	6313      	str	r3, [r2, #48]	; 0x30
 800164e:	4b32      	ldr	r3, [pc, #200]	; (8001718 <MX_GPIO_Init+0x144>)
 8001650:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001652:	f003 0302 	and.w	r3, r3, #2
 8001656:	607b      	str	r3, [r7, #4]
 8001658:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800165a:	2200      	movs	r2, #0
 800165c:	2120      	movs	r1, #32
 800165e:	482f      	ldr	r0, [pc, #188]	; (800171c <MX_GPIO_Init+0x148>)
 8001660:	f003 fa5c 	bl	8004b1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001664:	2200      	movs	r2, #0
 8001666:	2130      	movs	r1, #48	; 0x30
 8001668:	482d      	ldr	r0, [pc, #180]	; (8001720 <MX_GPIO_Init+0x14c>)
 800166a:	f003 fa57 	bl	8004b1c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800166e:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001672:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001674:	4b2b      	ldr	r3, [pc, #172]	; (8001724 <MX_GPIO_Init+0x150>)
 8001676:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001678:	2300      	movs	r3, #0
 800167a:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800167c:	f107 0314 	add.w	r3, r7, #20
 8001680:	4619      	mov	r1, r3
 8001682:	4829      	ldr	r0, [pc, #164]	; (8001728 <MX_GPIO_Init+0x154>)
 8001684:	f003 f8c6 	bl	8004814 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001688:	2320      	movs	r3, #32
 800168a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800168c:	2301      	movs	r3, #1
 800168e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001690:	2300      	movs	r3, #0
 8001692:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001694:	2300      	movs	r3, #0
 8001696:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001698:	f107 0314 	add.w	r3, r7, #20
 800169c:	4619      	mov	r1, r3
 800169e:	481f      	ldr	r0, [pc, #124]	; (800171c <MX_GPIO_Init+0x148>)
 80016a0:	f003 f8b8 	bl	8004814 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a4:	2380      	movs	r3, #128	; 0x80
 80016a6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a8:	4b20      	ldr	r3, [pc, #128]	; (800172c <MX_GPIO_Init+0x158>)
 80016aa:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016ac:	2300      	movs	r3, #0
 80016ae:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016b0:	f107 0314 	add.w	r3, r7, #20
 80016b4:	4619      	mov	r1, r3
 80016b6:	4819      	ldr	r0, [pc, #100]	; (800171c <MX_GPIO_Init+0x148>)
 80016b8:	f003 f8ac 	bl	8004814 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016bc:	2308      	movs	r3, #8
 80016be:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016c0:	4b1a      	ldr	r3, [pc, #104]	; (800172c <MX_GPIO_Init+0x158>)
 80016c2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c4:	2301      	movs	r3, #1
 80016c6:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c8:	f107 0314 	add.w	r3, r7, #20
 80016cc:	4619      	mov	r1, r3
 80016ce:	4814      	ldr	r0, [pc, #80]	; (8001720 <MX_GPIO_Init+0x14c>)
 80016d0:	f003 f8a0 	bl	8004814 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d4:	2330      	movs	r3, #48	; 0x30
 80016d6:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016d8:	2311      	movs	r3, #17
 80016da:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016dc:	2301      	movs	r3, #1
 80016de:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016e0:	2300      	movs	r3, #0
 80016e2:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e4:	f107 0314 	add.w	r3, r7, #20
 80016e8:	4619      	mov	r1, r3
 80016ea:	480d      	ldr	r0, [pc, #52]	; (8001720 <MX_GPIO_Init+0x14c>)
 80016ec:	f003 f892 	bl	8004814 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016f0:	2200      	movs	r2, #0
 80016f2:	2100      	movs	r1, #0
 80016f4:	2009      	movs	r0, #9
 80016f6:	f002 fc38 	bl	8003f6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016fa:	2009      	movs	r0, #9
 80016fc:	f002 fc51 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001700:	2200      	movs	r2, #0
 8001702:	2100      	movs	r1, #0
 8001704:	2017      	movs	r0, #23
 8001706:	f002 fc30 	bl	8003f6a <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800170a:	2017      	movs	r0, #23
 800170c:	f002 fc49 	bl	8003fa2 <HAL_NVIC_EnableIRQ>

}
 8001710:	bf00      	nop
 8001712:	3728      	adds	r7, #40	; 0x28
 8001714:	46bd      	mov	sp, r7
 8001716:	bd80      	pop	{r7, pc}
 8001718:	40023800 	.word	0x40023800
 800171c:	40020000 	.word	0x40020000
 8001720:	40020400 	.word	0x40020400
 8001724:	10210000 	.word	0x10210000
 8001728:	40020800 	.word	0x40020800
 800172c:	10110000 	.word	0x10110000

08001730 <UARTInit>:
/* USER CODE BEGIN 4 */
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void UARTInit(UARTStucrture *uart)
{
 8001730:	b580      	push	{r7, lr}
 8001732:	b082      	sub	sp, #8
 8001734:	af00      	add	r7, sp, #0
 8001736:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001738:	4b10      	ldr	r3, [pc, #64]	; (800177c <UARTInit+0x4c>)
 800173a:	88db      	ldrh	r3, [r3, #6]
 800173c:	4619      	mov	r1, r3
 800173e:	2001      	movs	r0, #1
 8001740:	f007 fdba 	bl	80092b8 <calloc>
 8001744:	4603      	mov	r3, r0
 8001746:	461a      	mov	r2, r3
 8001748:	687b      	ldr	r3, [r7, #4]
 800174a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 800174c:	4b0b      	ldr	r3, [pc, #44]	; (800177c <UARTInit+0x4c>)
 800174e:	889b      	ldrh	r3, [r3, #4]
 8001750:	4619      	mov	r1, r3
 8001752:	2001      	movs	r0, #1
 8001754:	f007 fdb0 	bl	80092b8 <calloc>
 8001758:	4603      	mov	r3, r0
 800175a:	461a      	mov	r2, r3
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	2200      	movs	r2, #0
 8001764:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001766:	687b      	ldr	r3, [r7, #4]
 8001768:	2200      	movs	r2, #0
 800176a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800176c:	687b      	ldr	r3, [r7, #4]
 800176e:	2200      	movs	r2, #0
 8001770:	81da      	strh	r2, [r3, #14]

}
 8001772:	bf00      	nop
 8001774:	3708      	adds	r7, #8
 8001776:	46bd      	mov	sp, r7
 8001778:	bd80      	pop	{r7, pc}
 800177a:	bf00      	nop
 800177c:	200000b4 	.word	0x200000b4

08001780 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001780:	b580      	push	{r7, lr}
 8001782:	b082      	sub	sp, #8
 8001784:	af00      	add	r7, sp, #0
 8001786:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6818      	ldr	r0, [r3, #0]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	6919      	ldr	r1, [r3, #16]
 8001790:	687b      	ldr	r3, [r7, #4]
 8001792:	88db      	ldrh	r3, [r3, #6]
 8001794:	461a      	mov	r2, r3
 8001796:	f006 ff0b 	bl	80085b0 <HAL_UART_Receive_DMA>
}
 800179a:	bf00      	nop
 800179c:	3708      	adds	r7, #8
 800179e:	46bd      	mov	sp, r7
 80017a0:	bd80      	pop	{r7, pc}

080017a2 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 80017a2:	b480      	push	{r7}
 80017a4:	b083      	sub	sp, #12
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80017aa:	687b      	ldr	r3, [r7, #4]
 80017ac:	88db      	ldrh	r3, [r3, #6]
 80017ae:	461a      	mov	r2, r3
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b6:	681b      	ldr	r3, [r3, #0]
 80017b8:	685b      	ldr	r3, [r3, #4]
 80017ba:	1ad3      	subs	r3, r2, r3
}
 80017bc:	4618      	mov	r0, r3
 80017be:	370c      	adds	r7, #12
 80017c0:	46bd      	mov	sp, r7
 80017c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c6:	4770      	bx	lr

080017c8 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 80017c8:	b590      	push	{r4, r7, lr}
 80017ca:	b085      	sub	sp, #20
 80017cc:	af00      	add	r7, sp, #0
 80017ce:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80017d0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d4:	81fb      	strh	r3, [r7, #14]
	static uint8_t order = 0;
	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80017d6:	687b      	ldr	r3, [r7, #4]
 80017d8:	8a9b      	ldrh	r3, [r3, #20]
 80017da:	461c      	mov	r4, r3
 80017dc:	6878      	ldr	r0, [r7, #4]
 80017de:	f7ff ffe0 	bl	80017a2 <UARTGetRxHead>
 80017e2:	4603      	mov	r3, r0
 80017e4:	429c      	cmp	r4, r3
 80017e6:	d02e      	beq.n	8001846 <UARTReadChar+0x7e>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80017e8:	687b      	ldr	r3, [r7, #4]
 80017ea:	691b      	ldr	r3, [r3, #16]
 80017ec:	687a      	ldr	r2, [r7, #4]
 80017ee:	8a92      	ldrh	r2, [r2, #20]
 80017f0:	4413      	add	r3, r2
 80017f2:	781b      	ldrb	r3, [r3, #0]
 80017f4:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80017f6:	687b      	ldr	r3, [r7, #4]
 80017f8:	8a9b      	ldrh	r3, [r3, #20]
 80017fa:	3301      	adds	r3, #1
 80017fc:	687a      	ldr	r2, [r7, #4]
 80017fe:	88d2      	ldrh	r2, [r2, #6]
 8001800:	fb93 f1f2 	sdiv	r1, r3, r2
 8001804:	fb02 f201 	mul.w	r2, r2, r1
 8001808:	1a9b      	subs	r3, r3, r2
 800180a:	b29a      	uxth	r2, r3
 800180c:	687b      	ldr	r3, [r7, #4]
 800180e:	829a      	strh	r2, [r3, #20]
		store[order] = Result;
 8001810:	4b10      	ldr	r3, [pc, #64]	; (8001854 <UARTReadChar+0x8c>)
 8001812:	781b      	ldrb	r3, [r3, #0]
 8001814:	461a      	mov	r2, r3
 8001816:	89f9      	ldrh	r1, [r7, #14]
 8001818:	4b0f      	ldr	r3, [pc, #60]	; (8001858 <UARTReadChar+0x90>)
 800181a:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		order += 1;
 800181e:	4b0d      	ldr	r3, [pc, #52]	; (8001854 <UARTReadChar+0x8c>)
 8001820:	781b      	ldrb	r3, [r3, #0]
 8001822:	3301      	adds	r3, #1
 8001824:	b2da      	uxtb	r2, r3
 8001826:	4b0b      	ldr	r3, [pc, #44]	; (8001854 <UARTReadChar+0x8c>)
 8001828:	701a      	strb	r2, [r3, #0]
		order %= 20;
 800182a:	4b0a      	ldr	r3, [pc, #40]	; (8001854 <UARTReadChar+0x8c>)
 800182c:	781a      	ldrb	r2, [r3, #0]
 800182e:	4b0b      	ldr	r3, [pc, #44]	; (800185c <UARTReadChar+0x94>)
 8001830:	fba3 1302 	umull	r1, r3, r3, r2
 8001834:	0919      	lsrs	r1, r3, #4
 8001836:	460b      	mov	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	440b      	add	r3, r1
 800183c:	009b      	lsls	r3, r3, #2
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	b2da      	uxtb	r2, r3
 8001842:	4b04      	ldr	r3, [pc, #16]	; (8001854 <UARTReadChar+0x8c>)
 8001844:	701a      	strb	r2, [r3, #0]

	}
	return Result;
 8001846:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 800184a:	4618      	mov	r0, r3
 800184c:	3714      	adds	r7, #20
 800184e:	46bd      	mov	sp, r7
 8001850:	bd90      	pop	{r4, r7, pc}
 8001852:	bf00      	nop
 8001854:	20000368 	.word	0x20000368
 8001858:	200002ec 	.word	0x200002ec
 800185c:	cccccccd 	.word	0xcccccccd

08001860 <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8001860:	b580      	push	{r7, lr}
 8001862:	b084      	sub	sp, #16
 8001864:	af00      	add	r7, sp, #0
 8001866:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001868:	687b      	ldr	r3, [r7, #4]
 800186a:	681b      	ldr	r3, [r3, #0]
 800186c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001870:	b2db      	uxtb	r3, r3
 8001872:	2b20      	cmp	r3, #32
 8001874:	d13d      	bne.n	80018f2 <UARTTxDumpBuffer+0x92>
 8001876:	4b21      	ldr	r3, [pc, #132]	; (80018fc <UARTTxDumpBuffer+0x9c>)
 8001878:	781b      	ldrb	r3, [r3, #0]
 800187a:	2b00      	cmp	r3, #0
 800187c:	d139      	bne.n	80018f2 <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800187e:	4b1f      	ldr	r3, [pc, #124]	; (80018fc <UARTTxDumpBuffer+0x9c>)
 8001880:	2201      	movs	r2, #1
 8001882:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	89da      	ldrh	r2, [r3, #14]
 8001888:	687b      	ldr	r3, [r7, #4]
 800188a:	899b      	ldrh	r3, [r3, #12]
 800188c:	429a      	cmp	r2, r3
 800188e:	d02d      	beq.n	80018ec <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	89da      	ldrh	r2, [r3, #14]
 8001894:	687b      	ldr	r3, [r7, #4]
 8001896:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001898:	429a      	cmp	r2, r3
 800189a:	d906      	bls.n	80018aa <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	89da      	ldrh	r2, [r3, #14]
 80018a0:	687b      	ldr	r3, [r7, #4]
 80018a2:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80018a4:	1ad3      	subs	r3, r2, r3
 80018a6:	b29b      	uxth	r3, r3
 80018a8:	e005      	b.n	80018b6 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	889a      	ldrh	r2, [r3, #4]
 80018ae:	687b      	ldr	r3, [r7, #4]
 80018b0:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80018b2:	1ad3      	subs	r3, r2, r3
 80018b4:	b29b      	uxth	r3, r3
 80018b6:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	6818      	ldr	r0, [r3, #0]
 80018bc:	687b      	ldr	r3, [r7, #4]
 80018be:	689b      	ldr	r3, [r3, #8]
 80018c0:	687a      	ldr	r2, [r7, #4]
 80018c2:	8992      	ldrh	r2, [r2, #12]
 80018c4:	4413      	add	r3, r2
 80018c6:	89fa      	ldrh	r2, [r7, #14]
 80018c8:	4619      	mov	r1, r3
 80018ca:	f006 fe05 	bl	80084d8 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80018ce:	687b      	ldr	r3, [r7, #4]
 80018d0:	899b      	ldrh	r3, [r3, #12]
 80018d2:	461a      	mov	r2, r3
 80018d4:	89fb      	ldrh	r3, [r7, #14]
 80018d6:	4413      	add	r3, r2
 80018d8:	687a      	ldr	r2, [r7, #4]
 80018da:	8892      	ldrh	r2, [r2, #4]
 80018dc:	fb93 f1f2 	sdiv	r1, r3, r2
 80018e0:	fb02 f201 	mul.w	r2, r2, r1
 80018e4:	1a9b      	subs	r3, r3, r2
 80018e6:	b29a      	uxth	r2, r3
 80018e8:	687b      	ldr	r3, [r7, #4]
 80018ea:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80018ec:	4b03      	ldr	r3, [pc, #12]	; (80018fc <UARTTxDumpBuffer+0x9c>)
 80018ee:	2200      	movs	r2, #0
 80018f0:	701a      	strb	r2, [r3, #0]
	}
}
 80018f2:	bf00      	nop
 80018f4:	3710      	adds	r7, #16
 80018f6:	46bd      	mov	sp, r7
 80018f8:	bd80      	pop	{r7, pc}
 80018fa:	bf00      	nop
 80018fc:	20000369 	.word	0x20000369

08001900 <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 8001900:	b580      	push	{r7, lr}
 8001902:	b086      	sub	sp, #24
 8001904:	af00      	add	r7, sp, #0
 8001906:	60f8      	str	r0, [r7, #12]
 8001908:	60b9      	str	r1, [r7, #8]
 800190a:	4613      	mov	r3, r2
 800190c:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800190e:	68fb      	ldr	r3, [r7, #12]
 8001910:	889b      	ldrh	r3, [r3, #4]
 8001912:	88fa      	ldrh	r2, [r7, #6]
 8001914:	4293      	cmp	r3, r2
 8001916:	bf28      	it	cs
 8001918:	4613      	movcs	r3, r2
 800191a:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800191c:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800191e:	68fb      	ldr	r3, [r7, #12]
 8001920:	889b      	ldrh	r3, [r3, #4]
 8001922:	4619      	mov	r1, r3
 8001924:	68fb      	ldr	r3, [r7, #12]
 8001926:	89db      	ldrh	r3, [r3, #14]
 8001928:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 800192a:	4293      	cmp	r3, r2
 800192c:	bfa8      	it	ge
 800192e:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 8001930:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 8001932:	68fb      	ldr	r3, [r7, #12]
 8001934:	689b      	ldr	r3, [r3, #8]
 8001936:	68fa      	ldr	r2, [r7, #12]
 8001938:	89d2      	ldrh	r2, [r2, #14]
 800193a:	4413      	add	r3, r2
 800193c:	8aba      	ldrh	r2, [r7, #20]
 800193e:	68b9      	ldr	r1, [r7, #8]
 8001940:	4618      	mov	r0, r3
 8001942:	f007 fceb 	bl	800931c <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8001946:	68fb      	ldr	r3, [r7, #12]
 8001948:	89db      	ldrh	r3, [r3, #14]
 800194a:	461a      	mov	r2, r3
 800194c:	8afb      	ldrh	r3, [r7, #22]
 800194e:	4413      	add	r3, r2
 8001950:	68fa      	ldr	r2, [r7, #12]
 8001952:	8892      	ldrh	r2, [r2, #4]
 8001954:	fb93 f1f2 	sdiv	r1, r3, r2
 8001958:	fb02 f201 	mul.w	r2, r2, r1
 800195c:	1a9b      	subs	r3, r3, r2
 800195e:	b29a      	uxth	r2, r3
 8001960:	68fb      	ldr	r3, [r7, #12]
 8001962:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8001964:	8afa      	ldrh	r2, [r7, #22]
 8001966:	8abb      	ldrh	r3, [r7, #20]
 8001968:	429a      	cmp	r2, r3
 800196a:	d00a      	beq.n	8001982 <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800196c:	68fb      	ldr	r3, [r7, #12]
 800196e:	6898      	ldr	r0, [r3, #8]
 8001970:	8abb      	ldrh	r3, [r7, #20]
 8001972:	68ba      	ldr	r2, [r7, #8]
 8001974:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8001976:	8afa      	ldrh	r2, [r7, #22]
 8001978:	8abb      	ldrh	r3, [r7, #20]
 800197a:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 800197c:	461a      	mov	r2, r3
 800197e:	f007 fccd 	bl	800931c <memcpy>
	}
	UARTTxDumpBuffer(uart);
 8001982:	68f8      	ldr	r0, [r7, #12]
 8001984:	f7ff ff6c 	bl	8001860 <UARTTxDumpBuffer>

}
 8001988:	bf00      	nop
 800198a:	3718      	adds	r7, #24
 800198c:	46bd      	mov	sp, r7
 800198e:	bd80      	pop	{r7, pc}

08001990 <DynamixelProtocal2>:

void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 8001990:	b580      	push	{r7, lr}
 8001992:	b09e      	sub	sp, #120	; 0x78
 8001994:	af00      	add	r7, sp, #0
 8001996:	60f8      	str	r0, [r7, #12]
 8001998:	607b      	str	r3, [r7, #4]
 800199a:	460b      	mov	r3, r1
 800199c:	72fb      	strb	r3, [r7, #11]
 800199e:	4613      	mov	r3, r2
 80019a0:	813b      	strh	r3, [r7, #8]
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;


	//Pj. Var.
	A = dataIn ;
 80019a2:	893a      	ldrh	r2, [r7, #8]
 80019a4:	4baf      	ldr	r3, [pc, #700]	; (8001c64 <DynamixelProtocal2+0x2d4>)
 80019a6:	801a      	strh	r2, [r3, #0]


	//	Pj.State Machine
	if(dataIn == 999)
 80019a8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 80019ac:	f240 32e7 	movw	r2, #999	; 0x3e7
 80019b0:	4293      	cmp	r3, r2
 80019b2:	d10f      	bne.n	80019d4 <DynamixelProtocal2+0x44>
	{
		B = 25;
 80019b4:	4bac      	ldr	r3, [pc, #688]	; (8001c68 <DynamixelProtocal2+0x2d8>)
 80019b6:	2219      	movs	r2, #25
 80019b8:	801a      	strh	r2, [r3, #0]
		uint8_t temp[] = {0x46,0x6E};
 80019ba:	f646 6346 	movw	r3, #28230	; 0x6e46
 80019be:	f8a7 3074 	strh.w	r3, [r7, #116]	; 0x74
		UARTTxWrite(uart, temp,2);
 80019c2:	f107 0374 	add.w	r3, r7, #116	; 0x74
 80019c6:	2202      	movs	r2, #2
 80019c8:	4619      	mov	r1, r3
 80019ca:	6878      	ldr	r0, [r7, #4]
 80019cc:	f7ff ff98 	bl	8001900 <UARTTxWrite>
			State = S_idle;
			break;
		}

	}
}
 80019d0:	f000 bd25 	b.w	800241e <DynamixelProtocal2+0xa8e>
		switch (State)
 80019d4:	4ba5      	ldr	r3, [pc, #660]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 80019d6:	781b      	ldrb	r3, [r3, #0]
 80019d8:	2b27      	cmp	r3, #39	; 0x27
 80019da:	f200 8520 	bhi.w	800241e <DynamixelProtocal2+0xa8e>
 80019de:	a201      	add	r2, pc, #4	; (adr r2, 80019e4 <DynamixelProtocal2+0x54>)
 80019e0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019e4:	08001aa7 	.word	0x08001aa7
 80019e8:	0800241f 	.word	0x0800241f
 80019ec:	0800241f 	.word	0x0800241f
 80019f0:	0800241f 	.word	0x0800241f
 80019f4:	0800241f 	.word	0x0800241f
 80019f8:	0800241f 	.word	0x0800241f
 80019fc:	0800241f 	.word	0x0800241f
 8001a00:	0800241f 	.word	0x0800241f
 8001a04:	0800241f 	.word	0x0800241f
 8001a08:	0800241f 	.word	0x0800241f
 8001a0c:	0800241f 	.word	0x0800241f
 8001a10:	0800241f 	.word	0x0800241f
 8001a14:	0800241f 	.word	0x0800241f
 8001a18:	0800241f 	.word	0x0800241f
 8001a1c:	0800241f 	.word	0x0800241f
 8001a20:	0800241f 	.word	0x0800241f
 8001a24:	0800241f 	.word	0x0800241f
 8001a28:	08001bd3 	.word	0x08001bd3
 8001a2c:	08001bf7 	.word	0x08001bf7
 8001a30:	0800241f 	.word	0x0800241f
 8001a34:	0800241f 	.word	0x0800241f
 8001a38:	08001c31 	.word	0x08001c31
 8001a3c:	08001c8d 	.word	0x08001c8d
 8001a40:	08001ccd 	.word	0x08001ccd
 8001a44:	0800241f 	.word	0x0800241f
 8001a48:	08001d8d 	.word	0x08001d8d
 8001a4c:	08002009 	.word	0x08002009
 8001a50:	08001df5 	.word	0x08001df5
 8001a54:	08002247 	.word	0x08002247
 8001a58:	0800241f 	.word	0x0800241f
 8001a5c:	08002183 	.word	0x08002183
 8001a60:	0800239b 	.word	0x0800239b
 8001a64:	08001a85 	.word	0x08001a85
 8001a68:	08001a93 	.word	0x08001a93
 8001a6c:	0800241f 	.word	0x0800241f
 8001a70:	0800241f 	.word	0x0800241f
 8001a74:	08001d85 	.word	0x08001d85
 8001a78:	08001d1f 	.word	0x08001d1f
 8001a7c:	08001d41 	.word	0x08001d41
 8001a80:	08001d63 	.word	0x08001d63
			if ((dataIn &0xFF) == 0x58)
 8001a84:	893b      	ldrh	r3, [r7, #8]
 8001a86:	b2db      	uxtb	r3, r3
 8001a88:	2b58      	cmp	r3, #88	; 0x58
 8001a8a:	d102      	bne.n	8001a92 <DynamixelProtocal2+0x102>
				State = CheckACK2 ;
 8001a8c:	4b77      	ldr	r3, [pc, #476]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001a8e:	2221      	movs	r2, #33	; 0x21
 8001a90:	701a      	strb	r2, [r3, #0]
			if ((dataIn &0xFF) == 0x75)
 8001a92:	893b      	ldrh	r3, [r7, #8]
 8001a94:	b2db      	uxtb	r3, r3
 8001a96:	2b75      	cmp	r3, #117	; 0x75
 8001a98:	d102      	bne.n	8001aa0 <DynamixelProtocal2+0x110>
				ACK = 0;
 8001a9a:	4b75      	ldr	r3, [pc, #468]	; (8001c70 <DynamixelProtocal2+0x2e0>)
 8001a9c:	2200      	movs	r2, #0
 8001a9e:	801a      	strh	r2, [r3, #0]
			State = S_idle ;
 8001aa0:	4b72      	ldr	r3, [pc, #456]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001aa2:	2200      	movs	r2, #0
 8001aa4:	701a      	strb	r2, [r3, #0]
			if (ACK == 1)
 8001aa6:	4b72      	ldr	r3, [pc, #456]	; (8001c70 <DynamixelProtocal2+0x2e0>)
 8001aa8:	881b      	ldrh	r3, [r3, #0]
 8001aaa:	2b01      	cmp	r3, #1
 8001aac:	d104      	bne.n	8001ab8 <DynamixelProtocal2+0x128>
				State = CheckACK1;
 8001aae:	4b6f      	ldr	r3, [pc, #444]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001ab0:	2220      	movs	r2, #32
 8001ab2:	701a      	strb	r2, [r3, #0]
			break;
 8001ab4:	f000 bcb3 	b.w	800241e <DynamixelProtocal2+0xa8e>
				if (((dataIn >> 4) & 0xff) == 0x09)
 8001ab8:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001abc:	111b      	asrs	r3, r3, #4
 8001abe:	b21b      	sxth	r3, r3
 8001ac0:	b29b      	uxth	r3, r3
 8001ac2:	b2db      	uxtb	r3, r3
 8001ac4:	2b09      	cmp	r3, #9
 8001ac6:	d17d      	bne.n	8001bc4 <DynamixelProtocal2+0x234>
					START = dataIn;
 8001ac8:	893a      	ldrh	r2, [r7, #8]
 8001aca:	4b6a      	ldr	r3, [pc, #424]	; (8001c74 <DynamixelProtocal2+0x2e4>)
 8001acc:	801a      	strh	r2, [r3, #0]
					if ((dataIn &0x0F) == 0x02 || (dataIn &0x0F) == 0x03 || (dataIn &0x0F) >= 0x08) //case 2,3,8-14 Frame#1
 8001ace:	893b      	ldrh	r3, [r7, #8]
 8001ad0:	f003 030f 	and.w	r3, r3, #15
 8001ad4:	2b02      	cmp	r3, #2
 8001ad6:	d009      	beq.n	8001aec <DynamixelProtocal2+0x15c>
 8001ad8:	893b      	ldrh	r3, [r7, #8]
 8001ada:	f003 030f 	and.w	r3, r3, #15
 8001ade:	2b03      	cmp	r3, #3
 8001ae0:	d004      	beq.n	8001aec <DynamixelProtocal2+0x15c>
 8001ae2:	893b      	ldrh	r3, [r7, #8]
 8001ae4:	f003 0308 	and.w	r3, r3, #8
 8001ae8:	2b00      	cmp	r3, #0
 8001aea:	d022      	beq.n	8001b32 <DynamixelProtocal2+0x1a2>
						if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001aec:	893b      	ldrh	r3, [r7, #8]
 8001aee:	f003 030f 	and.w	r3, r3, #15
 8001af2:	2b09      	cmp	r3, #9
 8001af4:	d009      	beq.n	8001b0a <DynamixelProtocal2+0x17a>
 8001af6:	893b      	ldrh	r3, [r7, #8]
 8001af8:	f003 030f 	and.w	r3, r3, #15
 8001afc:	2b0a      	cmp	r3, #10
 8001afe:	d004      	beq.n	8001b0a <DynamixelProtocal2+0x17a>
 8001b00:	893b      	ldrh	r3, [r7, #8]
 8001b02:	f003 030f 	and.w	r3, r3, #15
 8001b06:	2b0b      	cmp	r3, #11
 8001b08:	d109      	bne.n	8001b1e <DynamixelProtocal2+0x18e>
							MODE = dataIn &0x0F ;
 8001b0a:	893b      	ldrh	r3, [r7, #8]
 8001b0c:	f003 030f 	and.w	r3, r3, #15
 8001b10:	b29a      	uxth	r2, r3
 8001b12:	4b59      	ldr	r3, [pc, #356]	; (8001c78 <DynamixelProtocal2+0x2e8>)
 8001b14:	801a      	strh	r2, [r3, #0]
							State = S_Checksum1_2;
 8001b16:	4b55      	ldr	r3, [pc, #340]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001b18:	221b      	movs	r2, #27
 8001b1a:	701a      	strb	r2, [r3, #0]
						if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001b1c:	e057      	b.n	8001bce <DynamixelProtocal2+0x23e>
							MODE = dataIn &0x0F ;
 8001b1e:	893b      	ldrh	r3, [r7, #8]
 8001b20:	f003 030f 	and.w	r3, r3, #15
 8001b24:	b29a      	uxth	r2, r3
 8001b26:	4b54      	ldr	r3, [pc, #336]	; (8001c78 <DynamixelProtocal2+0x2e8>)
 8001b28:	801a      	strh	r2, [r3, #0]
							State = S_Checksum1;
 8001b2a:	4b50      	ldr	r3, [pc, #320]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001b2c:	221a      	movs	r2, #26
 8001b2e:	701a      	strb	r2, [r3, #0]
						if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001b30:	e04d      	b.n	8001bce <DynamixelProtocal2+0x23e>
					else if ((dataIn &0x0F) == 0x01 || ((dataIn &0x0F) == 0x06)) //case 1,6 Frame#2
 8001b32:	893b      	ldrh	r3, [r7, #8]
 8001b34:	f003 030f 	and.w	r3, r3, #15
 8001b38:	2b01      	cmp	r3, #1
 8001b3a:	d004      	beq.n	8001b46 <DynamixelProtocal2+0x1b6>
 8001b3c:	893b      	ldrh	r3, [r7, #8]
 8001b3e:	f003 030f 	and.w	r3, r3, #15
 8001b42:	2b06      	cmp	r3, #6
 8001b44:	d109      	bne.n	8001b5a <DynamixelProtocal2+0x1ca>
						MODE = dataIn &0x0F ;
 8001b46:	893b      	ldrh	r3, [r7, #8]
 8001b48:	f003 030f 	and.w	r3, r3, #15
 8001b4c:	b29a      	uxth	r2, r3
 8001b4e:	4b4a      	ldr	r3, [pc, #296]	; (8001c78 <DynamixelProtocal2+0x2e8>)
 8001b50:	801a      	strh	r2, [r3, #0]
						State = S_Frame2_DataFrame_1;
 8001b52:	4b46      	ldr	r3, [pc, #280]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001b54:	2211      	movs	r2, #17
 8001b56:	701a      	strb	r2, [r3, #0]
 8001b58:	e039      	b.n	8001bce <DynamixelProtocal2+0x23e>
					else if ((dataIn &0x0F) == 0x04) //case 4 Frame#2
 8001b5a:	893b      	ldrh	r3, [r7, #8]
 8001b5c:	f003 030f 	and.w	r3, r3, #15
 8001b60:	2b04      	cmp	r3, #4
 8001b62:	d10a      	bne.n	8001b7a <DynamixelProtocal2+0x1ea>
						MODE = dataIn &0x0F ;
 8001b64:	893b      	ldrh	r3, [r7, #8]
 8001b66:	f003 030f 	and.w	r3, r3, #15
 8001b6a:	b29a      	uxth	r2, r3
 8001b6c:	4b42      	ldr	r3, [pc, #264]	; (8001c78 <DynamixelProtocal2+0x2e8>)
 8001b6e:	801a      	strh	r2, [r3, #0]
						State = S_Frame2_DataFrame_1;
 8001b70:	4b3e      	ldr	r3, [pc, #248]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001b72:	2211      	movs	r2, #17
 8001b74:	701a      	strb	r2, [r3, #0]
			break;
 8001b76:	f000 bc52 	b.w	800241e <DynamixelProtocal2+0xa8e>
					else if ((dataIn &0x0F) == 0x05) //case 5 Frame#2
 8001b7a:	893b      	ldrh	r3, [r7, #8]
 8001b7c:	f003 030f 	and.w	r3, r3, #15
 8001b80:	2b05      	cmp	r3, #5
 8001b82:	d10a      	bne.n	8001b9a <DynamixelProtocal2+0x20a>
						MODE = dataIn &0x0F ;
 8001b84:	893b      	ldrh	r3, [r7, #8]
 8001b86:	f003 030f 	and.w	r3, r3, #15
 8001b8a:	b29a      	uxth	r2, r3
 8001b8c:	4b3a      	ldr	r3, [pc, #232]	; (8001c78 <DynamixelProtocal2+0x2e8>)
 8001b8e:	801a      	strh	r2, [r3, #0]
						State = S_Frame2_DataFrame_Mode5_1;
 8001b90:	4b36      	ldr	r3, [pc, #216]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001b92:	2215      	movs	r2, #21
 8001b94:	701a      	strb	r2, [r3, #0]
			break;
 8001b96:	f000 bc42 	b.w	800241e <DynamixelProtocal2+0xa8e>
					else if ((dataIn &0x0F) == 0x07) //case 7 Frame#3
 8001b9a:	893b      	ldrh	r3, [r7, #8]
 8001b9c:	f003 030f 	and.w	r3, r3, #15
 8001ba0:	2b07      	cmp	r3, #7
 8001ba2:	d10a      	bne.n	8001bba <DynamixelProtocal2+0x22a>
						MODE = dataIn &0x0F ;
 8001ba4:	893b      	ldrh	r3, [r7, #8]
 8001ba6:	f003 030f 	and.w	r3, r3, #15
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b32      	ldr	r3, [pc, #200]	; (8001c78 <DynamixelProtocal2+0x2e8>)
 8001bae:	801a      	strh	r2, [r3, #0]
						State = S_Frame3_Station;
 8001bb0:	4b2e      	ldr	r3, [pc, #184]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001bb2:	2217      	movs	r2, #23
 8001bb4:	701a      	strb	r2, [r3, #0]
			break;
 8001bb6:	f000 bc32 	b.w	800241e <DynamixelProtocal2+0xa8e>
						State = S_idle ;
 8001bba:	4b2c      	ldr	r3, [pc, #176]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001bbc:	2200      	movs	r2, #0
 8001bbe:	701a      	strb	r2, [r3, #0]
			break;
 8001bc0:	f000 bc2d 	b.w	800241e <DynamixelProtocal2+0xa8e>
					State = S_idle ;
 8001bc4:	4b29      	ldr	r3, [pc, #164]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001bc6:	2200      	movs	r2, #0
 8001bc8:	701a      	strb	r2, [r3, #0]
			break;
 8001bca:	f000 bc28 	b.w	800241e <DynamixelProtocal2+0xa8e>
 8001bce:	f000 bc26 	b.w	800241e <DynamixelProtocal2+0xa8e>
			DATAFRAME[CollectedData] = dataIn &0xff;
 8001bd2:	4b2a      	ldr	r3, [pc, #168]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001bd4:	881b      	ldrh	r3, [r3, #0]
 8001bd6:	461a      	mov	r2, r3
 8001bd8:	893b      	ldrh	r3, [r7, #8]
 8001bda:	b2d9      	uxtb	r1, r3
 8001bdc:	4b28      	ldr	r3, [pc, #160]	; (8001c80 <DynamixelProtocal2+0x2f0>)
 8001bde:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8001be0:	4b26      	ldr	r3, [pc, #152]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001be2:	881b      	ldrh	r3, [r3, #0]
 8001be4:	3301      	adds	r3, #1
 8001be6:	b29a      	uxth	r2, r3
 8001be8:	4b24      	ldr	r3, [pc, #144]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001bea:	801a      	strh	r2, [r3, #0]
			State = S_Frame2_DataFrame_2;
 8001bec:	4b1f      	ldr	r3, [pc, #124]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001bee:	2212      	movs	r2, #18
 8001bf0:	701a      	strb	r2, [r3, #0]
			break;
 8001bf2:	f000 bc14 	b.w	800241e <DynamixelProtocal2+0xa8e>
			DATAFRAME[CollectedData] = dataIn &0xff;
 8001bf6:	4b21      	ldr	r3, [pc, #132]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001bf8:	881b      	ldrh	r3, [r3, #0]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	893b      	ldrh	r3, [r7, #8]
 8001bfe:	b2d9      	uxtb	r1, r3
 8001c00:	4b1f      	ldr	r3, [pc, #124]	; (8001c80 <DynamixelProtocal2+0x2f0>)
 8001c02:	5499      	strb	r1, [r3, r2]
			vMax = DATAFRAME[CollectedData];
 8001c04:	4b1d      	ldr	r3, [pc, #116]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001c06:	881b      	ldrh	r3, [r3, #0]
 8001c08:	461a      	mov	r2, r3
 8001c0a:	4b1d      	ldr	r3, [pc, #116]	; (8001c80 <DynamixelProtocal2+0x2f0>)
 8001c0c:	5c9b      	ldrb	r3, [r3, r2]
 8001c0e:	ee07 3a90 	vmov	s15, r3
 8001c12:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8001c16:	4b1b      	ldr	r3, [pc, #108]	; (8001c84 <DynamixelProtocal2+0x2f4>)
 8001c18:	edc3 7a00 	vstr	s15, [r3]
			CollectedData++;
 8001c1c:	4b17      	ldr	r3, [pc, #92]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001c1e:	881b      	ldrh	r3, [r3, #0]
 8001c20:	3301      	adds	r3, #1
 8001c22:	b29a      	uxth	r2, r3
 8001c24:	4b15      	ldr	r3, [pc, #84]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001c26:	801a      	strh	r2, [r3, #0]
			State = S_Checksum2 ;
 8001c28:	4b10      	ldr	r3, [pc, #64]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001c2a:	221c      	movs	r2, #28
 8001c2c:	701a      	strb	r2, [r3, #0]
			break;
 8001c2e:	e3f6      	b.n	800241e <DynamixelProtocal2+0xa8e>
			DATAFRAME[CollectedData] = dataIn &0xff;
 8001c30:	4b12      	ldr	r3, [pc, #72]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	461a      	mov	r2, r3
 8001c36:	893b      	ldrh	r3, [r7, #8]
 8001c38:	b2d9      	uxtb	r1, r3
 8001c3a:	4b11      	ldr	r3, [pc, #68]	; (8001c80 <DynamixelProtocal2+0x2f0>)
 8001c3c:	5499      	strb	r1, [r3, r2]
			finalAngle = DATAFRAME[CollectedData];
 8001c3e:	4b0f      	ldr	r3, [pc, #60]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	461a      	mov	r2, r3
 8001c44:	4b0e      	ldr	r3, [pc, #56]	; (8001c80 <DynamixelProtocal2+0x2f0>)
 8001c46:	5c9b      	ldrb	r3, [r3, r2]
 8001c48:	b29a      	uxth	r2, r3
 8001c4a:	4b0f      	ldr	r3, [pc, #60]	; (8001c88 <DynamixelProtocal2+0x2f8>)
 8001c4c:	801a      	strh	r2, [r3, #0]
			CollectedData++;
 8001c4e:	4b0b      	ldr	r3, [pc, #44]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001c50:	881b      	ldrh	r3, [r3, #0]
 8001c52:	3301      	adds	r3, #1
 8001c54:	b29a      	uxth	r2, r3
 8001c56:	4b09      	ldr	r3, [pc, #36]	; (8001c7c <DynamixelProtocal2+0x2ec>)
 8001c58:	801a      	strh	r2, [r3, #0]
			State = S_Frame2_DataFrame_Mode5_2;
 8001c5a:	4b04      	ldr	r3, [pc, #16]	; (8001c6c <DynamixelProtocal2+0x2dc>)
 8001c5c:	2216      	movs	r2, #22
 8001c5e:	701a      	strb	r2, [r3, #0]
			break;
 8001c60:	e3dd      	b.n	800241e <DynamixelProtocal2+0xa8e>
 8001c62:	bf00      	nop
 8001c64:	200002e0 	.word	0x200002e0
 8001c68:	200002e2 	.word	0x200002e2
 8001c6c:	20000314 	.word	0x20000314
 8001c70:	200002de 	.word	0x200002de
 8001c74:	200001d0 	.word	0x200001d0
 8001c78:	200001d2 	.word	0x200001d2
 8001c7c:	2000036a 	.word	0x2000036a
 8001c80:	200001d4 	.word	0x200001d4
 8001c84:	20000008 	.word	0x20000008
 8001c88:	20000004 	.word	0x20000004
			DATAFRAME[CollectedData] = dataIn &0xff;
 8001c8c:	4b87      	ldr	r3, [pc, #540]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001c8e:	881b      	ldrh	r3, [r3, #0]
 8001c90:	461a      	mov	r2, r3
 8001c92:	893b      	ldrh	r3, [r7, #8]
 8001c94:	b2d9      	uxtb	r1, r3
 8001c96:	4b86      	ldr	r3, [pc, #536]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001c98:	5499      	strb	r1, [r3, r2]
			finalAngle = (finalAngle << 8) | DATAFRAME[CollectedData];
 8001c9a:	4b86      	ldr	r3, [pc, #536]	; (8001eb4 <DynamixelProtocal2+0x524>)
 8001c9c:	881b      	ldrh	r3, [r3, #0]
 8001c9e:	021b      	lsls	r3, r3, #8
 8001ca0:	b21a      	sxth	r2, r3
 8001ca2:	4b82      	ldr	r3, [pc, #520]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001ca4:	881b      	ldrh	r3, [r3, #0]
 8001ca6:	4619      	mov	r1, r3
 8001ca8:	4b81      	ldr	r3, [pc, #516]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001caa:	5c5b      	ldrb	r3, [r3, r1]
 8001cac:	b21b      	sxth	r3, r3
 8001cae:	4313      	orrs	r3, r2
 8001cb0:	b21b      	sxth	r3, r3
 8001cb2:	b29a      	uxth	r2, r3
 8001cb4:	4b7f      	ldr	r3, [pc, #508]	; (8001eb4 <DynamixelProtocal2+0x524>)
 8001cb6:	801a      	strh	r2, [r3, #0]
			CollectedData++;
 8001cb8:	4b7c      	ldr	r3, [pc, #496]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b7a      	ldr	r3, [pc, #488]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001cc2:	801a      	strh	r2, [r3, #0]
			State = S_Checksum2_5 ;
 8001cc4:	4b7c      	ldr	r3, [pc, #496]	; (8001eb8 <DynamixelProtocal2+0x528>)
 8001cc6:	221e      	movs	r2, #30
 8001cc8:	701a      	strb	r2, [r3, #0]
			break;
 8001cca:	e3a8      	b.n	800241e <DynamixelProtocal2+0xa8e>
			STATION = dataIn &0xff;
 8001ccc:	893b      	ldrh	r3, [r7, #8]
 8001cce:	b2da      	uxtb	r2, r3
 8001cd0:	4b7a      	ldr	r3, [pc, #488]	; (8001ebc <DynamixelProtocal2+0x52c>)
 8001cd2:	701a      	strb	r2, [r3, #0]
			C_Station = STATION;
 8001cd4:	4b79      	ldr	r3, [pc, #484]	; (8001ebc <DynamixelProtocal2+0x52c>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b79      	ldr	r3, [pc, #484]	; (8001ec0 <DynamixelProtocal2+0x530>)
 8001cdc:	801a      	strh	r2, [r3, #0]
			DATA = (STATION) &0xff;
 8001cde:	4b77      	ldr	r3, [pc, #476]	; (8001ebc <DynamixelProtocal2+0x52c>)
 8001ce0:	781b      	ldrb	r3, [r3, #0]
 8001ce2:	b29a      	uxth	r2, r3
 8001ce4:	4b77      	ldr	r3, [pc, #476]	; (8001ec4 <DynamixelProtocal2+0x534>)
 8001ce6:	801a      	strh	r2, [r3, #0]
			if(DATA % 2 == 0) 				//EVEN
 8001ce8:	4b76      	ldr	r3, [pc, #472]	; (8001ec4 <DynamixelProtocal2+0x534>)
 8001cea:	881b      	ldrh	r3, [r3, #0]
 8001cec:	f003 0301 	and.w	r3, r3, #1
 8001cf0:	b29b      	uxth	r3, r3
 8001cf2:	2b00      	cmp	r3, #0
 8001cf4:	d106      	bne.n	8001d04 <DynamixelProtocal2+0x374>
				DATA_Byte = (DATA/2);
 8001cf6:	4b73      	ldr	r3, [pc, #460]	; (8001ec4 <DynamixelProtocal2+0x534>)
 8001cf8:	881b      	ldrh	r3, [r3, #0]
 8001cfa:	085b      	lsrs	r3, r3, #1
 8001cfc:	b29a      	uxth	r2, r3
 8001cfe:	4b72      	ldr	r3, [pc, #456]	; (8001ec8 <DynamixelProtocal2+0x538>)
 8001d00:	801a      	strh	r2, [r3, #0]
 8001d02:	e008      	b.n	8001d16 <DynamixelProtocal2+0x386>
				DATA_Byte = (DATA+1)/2;
 8001d04:	4b6f      	ldr	r3, [pc, #444]	; (8001ec4 <DynamixelProtocal2+0x534>)
 8001d06:	881b      	ldrh	r3, [r3, #0]
 8001d08:	3301      	adds	r3, #1
 8001d0a:	0fda      	lsrs	r2, r3, #31
 8001d0c:	4413      	add	r3, r2
 8001d0e:	105b      	asrs	r3, r3, #1
 8001d10:	b29a      	uxth	r2, r3
 8001d12:	4b6d      	ldr	r3, [pc, #436]	; (8001ec8 <DynamixelProtocal2+0x538>)
 8001d14:	801a      	strh	r2, [r3, #0]
			State = S_Frame3_DataFrame_2;
 8001d16:	4b68      	ldr	r3, [pc, #416]	; (8001eb8 <DynamixelProtocal2+0x528>)
 8001d18:	2219      	movs	r2, #25
 8001d1a:	701a      	strb	r2, [r3, #0]
			break;
 8001d1c:	e37f      	b.n	800241e <DynamixelProtocal2+0xa8e>
			DATAFRAME[CollectedData] = dataIn &0xff;
 8001d1e:	4b63      	ldr	r3, [pc, #396]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d20:	881b      	ldrh	r3, [r3, #0]
 8001d22:	461a      	mov	r2, r3
 8001d24:	893b      	ldrh	r3, [r7, #8]
 8001d26:	b2d9      	uxtb	r1, r3
 8001d28:	4b61      	ldr	r3, [pc, #388]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001d2a:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8001d2c:	4b5f      	ldr	r3, [pc, #380]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d2e:	881b      	ldrh	r3, [r3, #0]
 8001d30:	3301      	adds	r3, #1
 8001d32:	b29a      	uxth	r2, r3
 8001d34:	4b5d      	ldr	r3, [pc, #372]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d36:	801a      	strh	r2, [r3, #0]
			State = S600;
 8001d38:	4b5f      	ldr	r3, [pc, #380]	; (8001eb8 <DynamixelProtocal2+0x528>)
 8001d3a:	2226      	movs	r2, #38	; 0x26
 8001d3c:	701a      	strb	r2, [r3, #0]
			break;
 8001d3e:	e36e      	b.n	800241e <DynamixelProtocal2+0xa8e>
			DATAFRAME[CollectedData] = dataIn &0xff;
 8001d40:	4b5a      	ldr	r3, [pc, #360]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d42:	881b      	ldrh	r3, [r3, #0]
 8001d44:	461a      	mov	r2, r3
 8001d46:	893b      	ldrh	r3, [r7, #8]
 8001d48:	b2d9      	uxtb	r1, r3
 8001d4a:	4b59      	ldr	r3, [pc, #356]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001d4c:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8001d4e:	4b57      	ldr	r3, [pc, #348]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d50:	881b      	ldrh	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b29a      	uxth	r2, r3
 8001d56:	4b55      	ldr	r3, [pc, #340]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d58:	801a      	strh	r2, [r3, #0]
			State = S700;
 8001d5a:	4b57      	ldr	r3, [pc, #348]	; (8001eb8 <DynamixelProtocal2+0x528>)
 8001d5c:	2227      	movs	r2, #39	; 0x27
 8001d5e:	701a      	strb	r2, [r3, #0]
			break;
 8001d60:	e35d      	b.n	800241e <DynamixelProtocal2+0xa8e>
			DATAFRAME[CollectedData] = dataIn &0xff;
 8001d62:	4b52      	ldr	r3, [pc, #328]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d64:	881b      	ldrh	r3, [r3, #0]
 8001d66:	461a      	mov	r2, r3
 8001d68:	893b      	ldrh	r3, [r7, #8]
 8001d6a:	b2d9      	uxtb	r1, r3
 8001d6c:	4b50      	ldr	r3, [pc, #320]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001d6e:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8001d70:	4b4e      	ldr	r3, [pc, #312]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d72:	881b      	ldrh	r3, [r3, #0]
 8001d74:	3301      	adds	r3, #1
 8001d76:	b29a      	uxth	r2, r3
 8001d78:	4b4c      	ldr	r3, [pc, #304]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001d7a:	801a      	strh	r2, [r3, #0]
			State = S_Checksum3;
 8001d7c:	4b4e      	ldr	r3, [pc, #312]	; (8001eb8 <DynamixelProtocal2+0x528>)
 8001d7e:	221f      	movs	r2, #31
 8001d80:	701a      	strb	r2, [r3, #0]
			break;
 8001d82:	e34c      	b.n	800241e <DynamixelProtocal2+0xa8e>
			State = S_Checksum3;
 8001d84:	4b4c      	ldr	r3, [pc, #304]	; (8001eb8 <DynamixelProtocal2+0x528>)
 8001d86:	221f      	movs	r2, #31
 8001d88:	701a      	strb	r2, [r3, #0]
			break;
 8001d8a:	e348      	b.n	800241e <DynamixelProtocal2+0xa8e>
			if (x < DATA_Byte)
 8001d8c:	4b4f      	ldr	r3, [pc, #316]	; (8001ecc <DynamixelProtocal2+0x53c>)
 8001d8e:	781b      	ldrb	r3, [r3, #0]
 8001d90:	b29a      	uxth	r2, r3
 8001d92:	4b4d      	ldr	r3, [pc, #308]	; (8001ec8 <DynamixelProtocal2+0x538>)
 8001d94:	881b      	ldrh	r3, [r3, #0]
 8001d96:	429a      	cmp	r2, r3
 8001d98:	d222      	bcs.n	8001de0 <DynamixelProtocal2+0x450>
				x++;
 8001d9a:	4b4c      	ldr	r3, [pc, #304]	; (8001ecc <DynamixelProtocal2+0x53c>)
 8001d9c:	781b      	ldrb	r3, [r3, #0]
 8001d9e:	3301      	adds	r3, #1
 8001da0:	b2da      	uxtb	r2, r3
 8001da2:	4b4a      	ldr	r3, [pc, #296]	; (8001ecc <DynamixelProtocal2+0x53c>)
 8001da4:	701a      	strb	r2, [r3, #0]
				S = dataIn &0xff;
 8001da6:	893b      	ldrh	r3, [r7, #8]
 8001da8:	b2db      	uxtb	r3, r3
 8001daa:	b29a      	uxth	r2, r3
 8001dac:	4b48      	ldr	r3, [pc, #288]	; (8001ed0 <DynamixelProtocal2+0x540>)
 8001dae:	801a      	strh	r2, [r3, #0]
				DATA_N_SUM += S;
 8001db0:	4b47      	ldr	r3, [pc, #284]	; (8001ed0 <DynamixelProtocal2+0x540>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b47      	ldr	r3, [pc, #284]	; (8001ed4 <DynamixelProtocal2+0x544>)
 8001db8:	781b      	ldrb	r3, [r3, #0]
 8001dba:	4413      	add	r3, r2
 8001dbc:	b2da      	uxtb	r2, r3
 8001dbe:	4b45      	ldr	r3, [pc, #276]	; (8001ed4 <DynamixelProtocal2+0x544>)
 8001dc0:	701a      	strb	r2, [r3, #0]
				DATAFRAME[CollectedData] = S;
 8001dc2:	4b43      	ldr	r3, [pc, #268]	; (8001ed0 <DynamixelProtocal2+0x540>)
 8001dc4:	8819      	ldrh	r1, [r3, #0]
 8001dc6:	4b39      	ldr	r3, [pc, #228]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001dc8:	881b      	ldrh	r3, [r3, #0]
 8001dca:	461a      	mov	r2, r3
 8001dcc:	b2c9      	uxtb	r1, r1
 8001dce:	4b38      	ldr	r3, [pc, #224]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001dd0:	5499      	strb	r1, [r3, r2]
				CollectedData++;
 8001dd2:	4b36      	ldr	r3, [pc, #216]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	3301      	adds	r3, #1
 8001dd8:	b29a      	uxth	r2, r3
 8001dda:	4b34      	ldr	r3, [pc, #208]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001ddc:	801a      	strh	r2, [r3, #0]
 8001dde:	e005      	b.n	8001dec <DynamixelProtocal2+0x45c>
				B+=1;
 8001de0:	4b3d      	ldr	r3, [pc, #244]	; (8001ed8 <DynamixelProtocal2+0x548>)
 8001de2:	881b      	ldrh	r3, [r3, #0]
 8001de4:	3301      	adds	r3, #1
 8001de6:	b29a      	uxth	r2, r3
 8001de8:	4b3b      	ldr	r3, [pc, #236]	; (8001ed8 <DynamixelProtocal2+0x548>)
 8001dea:	801a      	strh	r2, [r3, #0]
			State = S_Checksum3;
 8001dec:	4b32      	ldr	r3, [pc, #200]	; (8001eb8 <DynamixelProtocal2+0x528>)
 8001dee:	221f      	movs	r2, #31
 8001df0:	701a      	strb	r2, [r3, #0]
			break;
 8001df2:	e314      	b.n	800241e <DynamixelProtocal2+0xa8e>
			CHECKSUM = dataIn & 0xff ;
 8001df4:	893b      	ldrh	r3, [r7, #8]
 8001df6:	b2da      	uxtb	r2, r3
 8001df8:	4b38      	ldr	r3, [pc, #224]	; (8001edc <DynamixelProtocal2+0x54c>)
 8001dfa:	701a      	strb	r2, [r3, #0]
			CHECK_SUM1 = ~((0x9 << 4) | MODE );
 8001dfc:	4b38      	ldr	r3, [pc, #224]	; (8001ee0 <DynamixelProtocal2+0x550>)
 8001dfe:	881b      	ldrh	r3, [r3, #0]
 8001e00:	b2db      	uxtb	r3, r3
 8001e02:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001e06:	b2db      	uxtb	r3, r3
 8001e08:	43db      	mvns	r3, r3
 8001e0a:	b2da      	uxtb	r2, r3
 8001e0c:	4b35      	ldr	r3, [pc, #212]	; (8001ee4 <DynamixelProtocal2+0x554>)
 8001e0e:	701a      	strb	r2, [r3, #0]
			if (CHECK_SUM1 == CHECKSUM)
 8001e10:	4b34      	ldr	r3, [pc, #208]	; (8001ee4 <DynamixelProtocal2+0x554>)
 8001e12:	781a      	ldrb	r2, [r3, #0]
 8001e14:	4b31      	ldr	r3, [pc, #196]	; (8001edc <DynamixelProtocal2+0x54c>)
 8001e16:	781b      	ldrb	r3, [r3, #0]
 8001e18:	429a      	cmp	r2, r3
 8001e1a:	f040 80db 	bne.w	8001fd4 <DynamixelProtocal2+0x644>
				switch (MODE)
 8001e1e:	4b30      	ldr	r3, [pc, #192]	; (8001ee0 <DynamixelProtocal2+0x550>)
 8001e20:	881b      	ldrh	r3, [r3, #0]
 8001e22:	2b0b      	cmp	r3, #11
 8001e24:	f000 809c 	beq.w	8001f60 <DynamixelProtocal2+0x5d0>
 8001e28:	2b0b      	cmp	r3, #11
 8001e2a:	f300 80e6 	bgt.w	8001ffa <DynamixelProtocal2+0x66a>
 8001e2e:	2b09      	cmp	r3, #9
 8001e30:	d002      	beq.n	8001e38 <DynamixelProtocal2+0x4a8>
 8001e32:	2b0a      	cmp	r3, #10
 8001e34:	d05a      	beq.n	8001eec <DynamixelProtocal2+0x55c>
 8001e36:	e0e0      	b.n	8001ffa <DynamixelProtocal2+0x66a>
					uint8_t temp[] = {0x58,0x75};
 8001e38:	f247 5358 	movw	r3, #30040	; 0x7558
 8001e3c:	f8a7 3070 	strh.w	r3, [r7, #112]	; 0x70
					UARTTxWrite(uart, temp, 2);
 8001e40:	f107 0370 	add.w	r3, r7, #112	; 0x70
 8001e44:	2202      	movs	r2, #2
 8001e46:	4619      	mov	r1, r3
 8001e48:	6878      	ldr	r0, [r7, #4]
 8001e4a:	f7ff fd59 	bl	8001900 <UARTTxWrite>
					CHECK_SEND = ~ (0x99 + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001e4e:	4b17      	ldr	r3, [pc, #92]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001e50:	881b      	ldrh	r3, [r3, #0]
 8001e52:	3b02      	subs	r3, #2
 8001e54:	4a16      	ldr	r2, [pc, #88]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001e56:	5cd2      	ldrb	r2, [r2, r3]
 8001e58:	4b14      	ldr	r3, [pc, #80]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001e5a:	881b      	ldrh	r3, [r3, #0]
 8001e5c:	3b01      	subs	r3, #1
 8001e5e:	4914      	ldr	r1, [pc, #80]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001e60:	5ccb      	ldrb	r3, [r1, r3]
 8001e62:	4413      	add	r3, r2
 8001e64:	b2db      	uxtb	r3, r3
 8001e66:	3b67      	subs	r3, #103	; 0x67
 8001e68:	b2db      	uxtb	r3, r3
 8001e6a:	43db      	mvns	r3, r3
 8001e6c:	b2da      	uxtb	r2, r3
 8001e6e:	4b1e      	ldr	r3, [pc, #120]	; (8001ee8 <DynamixelProtocal2+0x558>)
 8001e70:	701a      	strb	r2, [r3, #0]
					uint8_t FRAME2[] = {0x99,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001e72:	2399      	movs	r3, #153	; 0x99
 8001e74:	f887 306c 	strb.w	r3, [r7, #108]	; 0x6c
 8001e78:	4b0c      	ldr	r3, [pc, #48]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001e7a:	881b      	ldrh	r3, [r3, #0]
 8001e7c:	3b02      	subs	r3, #2
 8001e7e:	4a0c      	ldr	r2, [pc, #48]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001e80:	5cd3      	ldrb	r3, [r2, r3]
 8001e82:	f887 306d 	strb.w	r3, [r7, #109]	; 0x6d
 8001e86:	4b09      	ldr	r3, [pc, #36]	; (8001eac <DynamixelProtocal2+0x51c>)
 8001e88:	881b      	ldrh	r3, [r3, #0]
 8001e8a:	3b01      	subs	r3, #1
 8001e8c:	4a08      	ldr	r2, [pc, #32]	; (8001eb0 <DynamixelProtocal2+0x520>)
 8001e8e:	5cd3      	ldrb	r3, [r2, r3]
 8001e90:	f887 306e 	strb.w	r3, [r7, #110]	; 0x6e
 8001e94:	4b14      	ldr	r3, [pc, #80]	; (8001ee8 <DynamixelProtocal2+0x558>)
 8001e96:	781b      	ldrb	r3, [r3, #0]
 8001e98:	f887 306f 	strb.w	r3, [r7, #111]	; 0x6f
					UARTTxWrite(uart, FRAME2, 4);
 8001e9c:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001ea0:	2204      	movs	r2, #4
 8001ea2:	4619      	mov	r1, r3
 8001ea4:	6878      	ldr	r0, [r7, #4]
 8001ea6:	f7ff fd2b 	bl	8001900 <UARTTxWrite>
					break;
 8001eaa:	e0a6      	b.n	8001ffa <DynamixelProtocal2+0x66a>
 8001eac:	2000036a 	.word	0x2000036a
 8001eb0:	200001d4 	.word	0x200001d4
 8001eb4:	20000004 	.word	0x20000004
 8001eb8:	20000314 	.word	0x20000314
 8001ebc:	200002d8 	.word	0x200002d8
 8001ec0:	200002e4 	.word	0x200002e4
 8001ec4:	200002d4 	.word	0x200002d4
 8001ec8:	200002d6 	.word	0x200002d6
 8001ecc:	200002dc 	.word	0x200002dc
 8001ed0:	200002da 	.word	0x200002da
 8001ed4:	200002d9 	.word	0x200002d9
 8001ed8:	200002e2 	.word	0x200002e2
 8001edc:	200001cb 	.word	0x200001cb
 8001ee0:	200001d2 	.word	0x200001d2
 8001ee4:	200001cc 	.word	0x200001cc
 8001ee8:	200001cf 	.word	0x200001cf
					uint8_t temp[] = {0x58,0x75};
 8001eec:	f247 5358 	movw	r3, #30040	; 0x7558
 8001ef0:	f8a7 3068 	strh.w	r3, [r7, #104]	; 0x68
					UARTTxWrite(uart, temp, 2);
 8001ef4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001ef8:	2202      	movs	r2, #2
 8001efa:	4619      	mov	r1, r3
 8001efc:	6878      	ldr	r0, [r7, #4]
 8001efe:	f7ff fcff 	bl	8001900 <UARTTxWrite>
					CHECK_SEND = ~(0x9A + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001f02:	4bb4      	ldr	r3, [pc, #720]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001f04:	881b      	ldrh	r3, [r3, #0]
 8001f06:	3b02      	subs	r3, #2
 8001f08:	4ab3      	ldr	r2, [pc, #716]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001f0a:	5cd2      	ldrb	r2, [r2, r3]
 8001f0c:	4bb1      	ldr	r3, [pc, #708]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001f0e:	881b      	ldrh	r3, [r3, #0]
 8001f10:	3b01      	subs	r3, #1
 8001f12:	49b1      	ldr	r1, [pc, #708]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001f14:	5ccb      	ldrb	r3, [r1, r3]
 8001f16:	4413      	add	r3, r2
 8001f18:	b2db      	uxtb	r3, r3
 8001f1a:	3b66      	subs	r3, #102	; 0x66
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	43db      	mvns	r3, r3
 8001f20:	b2da      	uxtb	r2, r3
 8001f22:	4bae      	ldr	r3, [pc, #696]	; (80021dc <DynamixelProtocal2+0x84c>)
 8001f24:	701a      	strb	r2, [r3, #0]
					uint8_t FRAME2[] = {0x9A,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001f26:	239a      	movs	r3, #154	; 0x9a
 8001f28:	f887 3064 	strb.w	r3, [r7, #100]	; 0x64
 8001f2c:	4ba9      	ldr	r3, [pc, #676]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001f2e:	881b      	ldrh	r3, [r3, #0]
 8001f30:	3b02      	subs	r3, #2
 8001f32:	4aa9      	ldr	r2, [pc, #676]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001f34:	5cd3      	ldrb	r3, [r2, r3]
 8001f36:	f887 3065 	strb.w	r3, [r7, #101]	; 0x65
 8001f3a:	4ba6      	ldr	r3, [pc, #664]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001f3c:	881b      	ldrh	r3, [r3, #0]
 8001f3e:	3b01      	subs	r3, #1
 8001f40:	4aa5      	ldr	r2, [pc, #660]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001f42:	5cd3      	ldrb	r3, [r2, r3]
 8001f44:	f887 3066 	strb.w	r3, [r7, #102]	; 0x66
 8001f48:	4ba4      	ldr	r3, [pc, #656]	; (80021dc <DynamixelProtocal2+0x84c>)
 8001f4a:	781b      	ldrb	r3, [r3, #0]
 8001f4c:	f887 3067 	strb.w	r3, [r7, #103]	; 0x67
					UARTTxWrite(uart, FRAME2, 4);
 8001f50:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001f54:	2204      	movs	r2, #4
 8001f56:	4619      	mov	r1, r3
 8001f58:	6878      	ldr	r0, [r7, #4]
 8001f5a:	f7ff fcd1 	bl	8001900 <UARTTxWrite>
					break;
 8001f5e:	e04c      	b.n	8001ffa <DynamixelProtocal2+0x66a>
					uint8_t temp[] = {0x58,0x75};
 8001f60:	f247 5358 	movw	r3, #30040	; 0x7558
 8001f64:	f8a7 3060 	strh.w	r3, [r7, #96]	; 0x60
					UARTTxWrite(uart, temp, 2);
 8001f68:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001f6c:	2202      	movs	r2, #2
 8001f6e:	4619      	mov	r1, r3
 8001f70:	6878      	ldr	r0, [r7, #4]
 8001f72:	f7ff fcc5 	bl	8001900 <UARTTxWrite>
					CHECK_SEND = ~(0x9B + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001f76:	4b97      	ldr	r3, [pc, #604]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	3b02      	subs	r3, #2
 8001f7c:	4a96      	ldr	r2, [pc, #600]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001f7e:	5cd2      	ldrb	r2, [r2, r3]
 8001f80:	4b94      	ldr	r3, [pc, #592]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001f82:	881b      	ldrh	r3, [r3, #0]
 8001f84:	3b01      	subs	r3, #1
 8001f86:	4994      	ldr	r1, [pc, #592]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001f88:	5ccb      	ldrb	r3, [r1, r3]
 8001f8a:	4413      	add	r3, r2
 8001f8c:	b2db      	uxtb	r3, r3
 8001f8e:	3b65      	subs	r3, #101	; 0x65
 8001f90:	b2db      	uxtb	r3, r3
 8001f92:	43db      	mvns	r3, r3
 8001f94:	b2da      	uxtb	r2, r3
 8001f96:	4b91      	ldr	r3, [pc, #580]	; (80021dc <DynamixelProtocal2+0x84c>)
 8001f98:	701a      	strb	r2, [r3, #0]
					uint8_t FRAME2[] = {0x9B,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001f9a:	239b      	movs	r3, #155	; 0x9b
 8001f9c:	f887 305c 	strb.w	r3, [r7, #92]	; 0x5c
 8001fa0:	4b8c      	ldr	r3, [pc, #560]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001fa2:	881b      	ldrh	r3, [r3, #0]
 8001fa4:	3b02      	subs	r3, #2
 8001fa6:	4a8c      	ldr	r2, [pc, #560]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001fa8:	5cd3      	ldrb	r3, [r2, r3]
 8001faa:	f887 305d 	strb.w	r3, [r7, #93]	; 0x5d
 8001fae:	4b89      	ldr	r3, [pc, #548]	; (80021d4 <DynamixelProtocal2+0x844>)
 8001fb0:	881b      	ldrh	r3, [r3, #0]
 8001fb2:	3b01      	subs	r3, #1
 8001fb4:	4a88      	ldr	r2, [pc, #544]	; (80021d8 <DynamixelProtocal2+0x848>)
 8001fb6:	5cd3      	ldrb	r3, [r2, r3]
 8001fb8:	f887 305e 	strb.w	r3, [r7, #94]	; 0x5e
 8001fbc:	4b87      	ldr	r3, [pc, #540]	; (80021dc <DynamixelProtocal2+0x84c>)
 8001fbe:	781b      	ldrb	r3, [r3, #0]
 8001fc0:	f887 305f 	strb.w	r3, [r7, #95]	; 0x5f
					UARTTxWrite(uart, FRAME2, 4);
 8001fc4:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001fc8:	2204      	movs	r2, #4
 8001fca:	4619      	mov	r1, r3
 8001fcc:	6878      	ldr	r0, [r7, #4]
 8001fce:	f7ff fc97 	bl	8001900 <UARTTxWrite>
					break;
 8001fd2:	e012      	b.n	8001ffa <DynamixelProtocal2+0x66a>
				uint8_t temp[] = {START,0x75,CHECKSUM};
 8001fd4:	4b82      	ldr	r3, [pc, #520]	; (80021e0 <DynamixelProtocal2+0x850>)
 8001fd6:	881b      	ldrh	r3, [r3, #0]
 8001fd8:	b2db      	uxtb	r3, r3
 8001fda:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001fde:	2375      	movs	r3, #117	; 0x75
 8001fe0:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001fe4:	4b7f      	ldr	r3, [pc, #508]	; (80021e4 <DynamixelProtocal2+0x854>)
 8001fe6:	781b      	ldrb	r3, [r3, #0]
 8001fe8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
				UARTTxWrite(uart, temp, 3);
 8001fec:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ff0:	2203      	movs	r2, #3
 8001ff2:	4619      	mov	r1, r3
 8001ff4:	6878      	ldr	r0, [r7, #4]
 8001ff6:	f7ff fc83 	bl	8001900 <UARTTxWrite>
			ACK = 1;
 8001ffa:	4b7b      	ldr	r3, [pc, #492]	; (80021e8 <DynamixelProtocal2+0x858>)
 8001ffc:	2201      	movs	r2, #1
 8001ffe:	801a      	strh	r2, [r3, #0]
			State = S_idle ;
 8002000:	4b7a      	ldr	r3, [pc, #488]	; (80021ec <DynamixelProtocal2+0x85c>)
 8002002:	2200      	movs	r2, #0
 8002004:	701a      	strb	r2, [r3, #0]
			break;
 8002006:	e20a      	b.n	800241e <DynamixelProtocal2+0xa8e>
			CHECKSUM = dataIn & 0xff ;
 8002008:	893b      	ldrh	r3, [r7, #8]
 800200a:	b2da      	uxtb	r2, r3
 800200c:	4b75      	ldr	r3, [pc, #468]	; (80021e4 <DynamixelProtocal2+0x854>)
 800200e:	701a      	strb	r2, [r3, #0]
			CHECK_SUM1 = ~((0x9 << 4) | MODE );
 8002010:	4b77      	ldr	r3, [pc, #476]	; (80021f0 <DynamixelProtocal2+0x860>)
 8002012:	881b      	ldrh	r3, [r3, #0]
 8002014:	b2db      	uxtb	r3, r3
 8002016:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800201a:	b2db      	uxtb	r3, r3
 800201c:	43db      	mvns	r3, r3
 800201e:	b2da      	uxtb	r2, r3
 8002020:	4b74      	ldr	r3, [pc, #464]	; (80021f4 <DynamixelProtocal2+0x864>)
 8002022:	701a      	strb	r2, [r3, #0]
			if (CHECK_SUM1 == CHECKSUM)
 8002024:	4b73      	ldr	r3, [pc, #460]	; (80021f4 <DynamixelProtocal2+0x864>)
 8002026:	781a      	ldrb	r2, [r3, #0]
 8002028:	4b6e      	ldr	r3, [pc, #440]	; (80021e4 <DynamixelProtocal2+0x854>)
 800202a:	781b      	ldrb	r3, [r3, #0]
 800202c:	429a      	cmp	r2, r3
 800202e:	f040 8090 	bne.w	8002152 <DynamixelProtocal2+0x7c2>
				switch (MODE)
 8002032:	4b6f      	ldr	r3, [pc, #444]	; (80021f0 <DynamixelProtocal2+0x860>)
 8002034:	881b      	ldrh	r3, [r3, #0]
 8002036:	3b02      	subs	r3, #2
 8002038:	2b0c      	cmp	r3, #12
 800203a:	f200 81ef 	bhi.w	800241c <DynamixelProtocal2+0xa8c>
 800203e:	a201      	add	r2, pc, #4	; (adr r2, 8002044 <DynamixelProtocal2+0x6b4>)
 8002040:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002044:	08002079 	.word	0x08002079
 8002048:	0800209d 	.word	0x0800209d
 800204c:	0800241d 	.word	0x0800241d
 8002050:	0800241d 	.word	0x0800241d
 8002054:	0800241d 	.word	0x0800241d
 8002058:	0800241d 	.word	0x0800241d
 800205c:	080020c1 	.word	0x080020c1
 8002060:	0800241d 	.word	0x0800241d
 8002064:	0800241d 	.word	0x0800241d
 8002068:	0800241d 	.word	0x0800241d
 800206c:	080020ed 	.word	0x080020ed
 8002070:	08002111 	.word	0x08002111
 8002074:	08002135 	.word	0x08002135
					uint8_t temp[] = {0x58,0x75};
 8002078:	f247 5358 	movw	r3, #30040	; 0x7558
 800207c:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
					UARTTxWrite(uart, temp, 2);
 8002080:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8002084:	2202      	movs	r2, #2
 8002086:	4619      	mov	r1, r3
 8002088:	6878      	ldr	r0, [r7, #4]
 800208a:	f7ff fc39 	bl	8001900 <UARTTxWrite>
					Connect = 1;
 800208e:	4b5a      	ldr	r3, [pc, #360]	; (80021f8 <DynamixelProtocal2+0x868>)
 8002090:	2201      	movs	r2, #1
 8002092:	801a      	strh	r2, [r3, #0]
					State = S_idle ;
 8002094:	4b55      	ldr	r3, [pc, #340]	; (80021ec <DynamixelProtocal2+0x85c>)
 8002096:	2200      	movs	r2, #0
 8002098:	701a      	strb	r2, [r3, #0]
					break;
 800209a:	e071      	b.n	8002180 <DynamixelProtocal2+0x7f0>
					uint8_t temp[] = {0x58,0x75};
 800209c:	f247 5358 	movw	r3, #30040	; 0x7558
 80020a0:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
					UARTTxWrite(uart, temp, 2);
 80020a4:	f107 0350 	add.w	r3, r7, #80	; 0x50
 80020a8:	2202      	movs	r2, #2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fc27 	bl	8001900 <UARTTxWrite>
					Connect = 0;
 80020b2:	4b51      	ldr	r3, [pc, #324]	; (80021f8 <DynamixelProtocal2+0x868>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	801a      	strh	r2, [r3, #0]
					State = S_idle ;
 80020b8:	4b4c      	ldr	r3, [pc, #304]	; (80021ec <DynamixelProtocal2+0x85c>)
 80020ba:	2200      	movs	r2, #0
 80020bc:	701a      	strb	r2, [r3, #0]
					break;
 80020be:	e05f      	b.n	8002180 <DynamixelProtocal2+0x7f0>
					uint8_t temp[] = {0x58,0x75};
 80020c0:	f247 5358 	movw	r3, #30040	; 0x7558
 80020c4:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
					UARTTxWrite(uart, temp,2);
 80020c8:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 80020cc:	2202      	movs	r2, #2
 80020ce:	4619      	mov	r1, r3
 80020d0:	6878      	ldr	r0, [r7, #4]
 80020d2:	f7ff fc15 	bl	8001900 <UARTTxWrite>
					HAL_Delay(5000);
 80020d6:	f241 3088 	movw	r0, #5000	; 0x1388
 80020da:	f001 fe23 	bl	8003d24 <HAL_Delay>
					start = 1;
 80020de:	4b47      	ldr	r3, [pc, #284]	; (80021fc <DynamixelProtocal2+0x86c>)
 80020e0:	2201      	movs	r2, #1
 80020e2:	701a      	strb	r2, [r3, #0]
					State = S_idle;
 80020e4:	4b41      	ldr	r3, [pc, #260]	; (80021ec <DynamixelProtocal2+0x85c>)
 80020e6:	2200      	movs	r2, #0
 80020e8:	701a      	strb	r2, [r3, #0]
					break;
 80020ea:	e049      	b.n	8002180 <DynamixelProtocal2+0x7f0>
					uint8_t temp[] = {0x58,0x75};
 80020ec:	f247 5358 	movw	r3, #30040	; 0x7558
 80020f0:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
					UARTTxWrite(uart, temp, 2);
 80020f4:	f107 0348 	add.w	r3, r7, #72	; 0x48
 80020f8:	2202      	movs	r2, #2
 80020fa:	4619      	mov	r1, r3
 80020fc:	6878      	ldr	r0, [r7, #4]
 80020fe:	f7ff fbff 	bl	8001900 <UARTTxWrite>
					Gripper = 1;
 8002102:	4b3f      	ldr	r3, [pc, #252]	; (8002200 <DynamixelProtocal2+0x870>)
 8002104:	2201      	movs	r2, #1
 8002106:	801a      	strh	r2, [r3, #0]
					State = S_idle ;
 8002108:	4b38      	ldr	r3, [pc, #224]	; (80021ec <DynamixelProtocal2+0x85c>)
 800210a:	2200      	movs	r2, #0
 800210c:	701a      	strb	r2, [r3, #0]
					break;
 800210e:	e037      	b.n	8002180 <DynamixelProtocal2+0x7f0>
					uint8_t temp[] = {0x58,0x75};
 8002110:	f247 5358 	movw	r3, #30040	; 0x7558
 8002114:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
					UARTTxWrite(uart, temp, 2);
 8002118:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800211c:	2202      	movs	r2, #2
 800211e:	4619      	mov	r1, r3
 8002120:	6878      	ldr	r0, [r7, #4]
 8002122:	f7ff fbed 	bl	8001900 <UARTTxWrite>
					Gripper = 0;
 8002126:	4b36      	ldr	r3, [pc, #216]	; (8002200 <DynamixelProtocal2+0x870>)
 8002128:	2200      	movs	r2, #0
 800212a:	801a      	strh	r2, [r3, #0]
					State = S_idle ;
 800212c:	4b2f      	ldr	r3, [pc, #188]	; (80021ec <DynamixelProtocal2+0x85c>)
 800212e:	2200      	movs	r2, #0
 8002130:	701a      	strb	r2, [r3, #0]
					break;
 8002132:	e025      	b.n	8002180 <DynamixelProtocal2+0x7f0>
					uint8_t temp[] = {0x58,0x75};
 8002134:	f247 5358 	movw	r3, #30040	; 0x7558
 8002138:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
					UARTTxWrite(uart, temp, 2);
 800213c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002140:	2202      	movs	r2, #2
 8002142:	4619      	mov	r1, r3
 8002144:	6878      	ldr	r0, [r7, #4]
 8002146:	f7ff fbdb 	bl	8001900 <UARTTxWrite>
					State = S_idle ;
 800214a:	4b28      	ldr	r3, [pc, #160]	; (80021ec <DynamixelProtocal2+0x85c>)
 800214c:	2200      	movs	r2, #0
 800214e:	701a      	strb	r2, [r3, #0]
					break;
 8002150:	e016      	b.n	8002180 <DynamixelProtocal2+0x7f0>
				uint8_t temp[] = {START,0x75,CHECKSUM};
 8002152:	4b23      	ldr	r3, [pc, #140]	; (80021e0 <DynamixelProtocal2+0x850>)
 8002154:	881b      	ldrh	r3, [r3, #0]
 8002156:	b2db      	uxtb	r3, r3
 8002158:	f887 303c 	strb.w	r3, [r7, #60]	; 0x3c
 800215c:	2375      	movs	r3, #117	; 0x75
 800215e:	f887 303d 	strb.w	r3, [r7, #61]	; 0x3d
 8002162:	4b20      	ldr	r3, [pc, #128]	; (80021e4 <DynamixelProtocal2+0x854>)
 8002164:	781b      	ldrb	r3, [r3, #0]
 8002166:	f887 303e 	strb.w	r3, [r7, #62]	; 0x3e
				UARTTxWrite(uart, temp, 3);
 800216a:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800216e:	2203      	movs	r2, #3
 8002170:	4619      	mov	r1, r3
 8002172:	6878      	ldr	r0, [r7, #4]
 8002174:	f7ff fbc4 	bl	8001900 <UARTTxWrite>
				State = S_idle ;
 8002178:	4b1c      	ldr	r3, [pc, #112]	; (80021ec <DynamixelProtocal2+0x85c>)
 800217a:	2200      	movs	r2, #0
 800217c:	701a      	strb	r2, [r3, #0]
			break;
 800217e:	e14d      	b.n	800241c <DynamixelProtocal2+0xa8c>
 8002180:	e14c      	b.n	800241c <DynamixelProtocal2+0xa8c>
			CHECKSUM = dataIn & 0xff ;
 8002182:	893b      	ldrh	r3, [r7, #8]
 8002184:	b2da      	uxtb	r2, r3
 8002186:	4b17      	ldr	r3, [pc, #92]	; (80021e4 <DynamixelProtocal2+0x854>)
 8002188:	701a      	strb	r2, [r3, #0]
			CHECK_SUM2 = ~( ((0x9 << 4) | MODE) + 0x0 + finalAngle );
 800218a:	4b19      	ldr	r3, [pc, #100]	; (80021f0 <DynamixelProtocal2+0x860>)
 800218c:	881b      	ldrh	r3, [r3, #0]
 800218e:	b2db      	uxtb	r3, r3
 8002190:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8002194:	b2da      	uxtb	r2, r3
 8002196:	4b1b      	ldr	r3, [pc, #108]	; (8002204 <DynamixelProtocal2+0x874>)
 8002198:	881b      	ldrh	r3, [r3, #0]
 800219a:	b2db      	uxtb	r3, r3
 800219c:	4413      	add	r3, r2
 800219e:	b2db      	uxtb	r3, r3
 80021a0:	43db      	mvns	r3, r3
 80021a2:	b2da      	uxtb	r2, r3
 80021a4:	4b18      	ldr	r3, [pc, #96]	; (8002208 <DynamixelProtocal2+0x878>)
 80021a6:	701a      	strb	r2, [r3, #0]
			if (CHECK_SUM2 == CHECKSUM)
 80021a8:	4b17      	ldr	r3, [pc, #92]	; (8002208 <DynamixelProtocal2+0x878>)
 80021aa:	781a      	ldrb	r2, [r3, #0]
 80021ac:	4b0d      	ldr	r3, [pc, #52]	; (80021e4 <DynamixelProtocal2+0x854>)
 80021ae:	781b      	ldrb	r3, [r3, #0]
 80021b0:	429a      	cmp	r2, r3
 80021b2:	d12b      	bne.n	800220c <DynamixelProtocal2+0x87c>
				switch (MODE)
 80021b4:	4b0e      	ldr	r3, [pc, #56]	; (80021f0 <DynamixelProtocal2+0x860>)
 80021b6:	881b      	ldrh	r3, [r3, #0]
 80021b8:	2b05      	cmp	r3, #5
 80021ba:	d13a      	bne.n	8002232 <DynamixelProtocal2+0x8a2>
					uint8_t temp[] = {0x58,0x75};
 80021bc:	f247 5358 	movw	r3, #30040	; 0x7558
 80021c0:	873b      	strh	r3, [r7, #56]	; 0x38
					UARTTxWrite(uart, temp, 2);
 80021c2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80021c6:	2202      	movs	r2, #2
 80021c8:	4619      	mov	r1, r3
 80021ca:	6878      	ldr	r0, [r7, #4]
 80021cc:	f7ff fb98 	bl	8001900 <UARTTxWrite>
					break;
 80021d0:	e02f      	b.n	8002232 <DynamixelProtocal2+0x8a2>
 80021d2:	bf00      	nop
 80021d4:	2000036a 	.word	0x2000036a
 80021d8:	200001d4 	.word	0x200001d4
 80021dc:	200001cf 	.word	0x200001cf
 80021e0:	200001d0 	.word	0x200001d0
 80021e4:	200001cb 	.word	0x200001cb
 80021e8:	200002de 	.word	0x200002de
 80021ec:	20000314 	.word	0x20000314
 80021f0:	200001d2 	.word	0x200001d2
 80021f4:	200001cc 	.word	0x200001cc
 80021f8:	200002e8 	.word	0x200002e8
 80021fc:	20000356 	.word	0x20000356
 8002200:	200002e6 	.word	0x200002e6
 8002204:	20000004 	.word	0x20000004
 8002208:	200001cd 	.word	0x200001cd
				uint8_t temp[] = {START,0x75,CHECKSUM};
 800220c:	4b86      	ldr	r3, [pc, #536]	; (8002428 <DynamixelProtocal2+0xa98>)
 800220e:	881b      	ldrh	r3, [r3, #0]
 8002210:	b2db      	uxtb	r3, r3
 8002212:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 8002216:	2375      	movs	r3, #117	; 0x75
 8002218:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 800221c:	4b83      	ldr	r3, [pc, #524]	; (800242c <DynamixelProtocal2+0xa9c>)
 800221e:	781b      	ldrb	r3, [r3, #0]
 8002220:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
				UARTTxWrite(uart, temp, 3);
 8002224:	f107 0334 	add.w	r3, r7, #52	; 0x34
 8002228:	2203      	movs	r2, #3
 800222a:	4619      	mov	r1, r3
 800222c:	6878      	ldr	r0, [r7, #4]
 800222e:	f7ff fb67 	bl	8001900 <UARTTxWrite>
			DATA_N_SUM = 0;
 8002232:	4b7f      	ldr	r3, [pc, #508]	; (8002430 <DynamixelProtocal2+0xaa0>)
 8002234:	2200      	movs	r2, #0
 8002236:	701a      	strb	r2, [r3, #0]
			x=0;
 8002238:	4b7e      	ldr	r3, [pc, #504]	; (8002434 <DynamixelProtocal2+0xaa4>)
 800223a:	2200      	movs	r2, #0
 800223c:	701a      	strb	r2, [r3, #0]
			State = S_idle;
 800223e:	4b7e      	ldr	r3, [pc, #504]	; (8002438 <DynamixelProtocal2+0xaa8>)
 8002240:	2200      	movs	r2, #0
 8002242:	701a      	strb	r2, [r3, #0]
			break;
 8002244:	e0eb      	b.n	800241e <DynamixelProtocal2+0xa8e>
			CHECKSUM = dataIn & 0xff ;
 8002246:	893b      	ldrh	r3, [r7, #8]
 8002248:	b2da      	uxtb	r2, r3
 800224a:	4b78      	ldr	r3, [pc, #480]	; (800242c <DynamixelProtocal2+0xa9c>)
 800224c:	701a      	strb	r2, [r3, #0]
			CHECK_SUM2 = ~( ((0x9 << 4) | MODE) + 0x0 + finalAngle );
 800224e:	4b7b      	ldr	r3, [pc, #492]	; (800243c <DynamixelProtocal2+0xaac>)
 8002250:	881b      	ldrh	r3, [r3, #0]
 8002252:	b2db      	uxtb	r3, r3
 8002254:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8002258:	b2da      	uxtb	r2, r3
 800225a:	4b79      	ldr	r3, [pc, #484]	; (8002440 <DynamixelProtocal2+0xab0>)
 800225c:	881b      	ldrh	r3, [r3, #0]
 800225e:	b2db      	uxtb	r3, r3
 8002260:	4413      	add	r3, r2
 8002262:	b2db      	uxtb	r3, r3
 8002264:	43db      	mvns	r3, r3
 8002266:	b2da      	uxtb	r2, r3
 8002268:	4b76      	ldr	r3, [pc, #472]	; (8002444 <DynamixelProtocal2+0xab4>)
 800226a:	701a      	strb	r2, [r3, #0]
			CHECK_SUM3 = ~( ((0x9 << 4) | MODE) + STATION + DATA_N_SUM);
 800226c:	4b73      	ldr	r3, [pc, #460]	; (800243c <DynamixelProtocal2+0xaac>)
 800226e:	881b      	ldrh	r3, [r3, #0]
 8002270:	b2db      	uxtb	r3, r3
 8002272:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8002276:	b2da      	uxtb	r2, r3
 8002278:	4b73      	ldr	r3, [pc, #460]	; (8002448 <DynamixelProtocal2+0xab8>)
 800227a:	781b      	ldrb	r3, [r3, #0]
 800227c:	4413      	add	r3, r2
 800227e:	b2da      	uxtb	r2, r3
 8002280:	4b6b      	ldr	r3, [pc, #428]	; (8002430 <DynamixelProtocal2+0xaa0>)
 8002282:	781b      	ldrb	r3, [r3, #0]
 8002284:	4413      	add	r3, r2
 8002286:	b2db      	uxtb	r3, r3
 8002288:	43db      	mvns	r3, r3
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b6f      	ldr	r3, [pc, #444]	; (800244c <DynamixelProtocal2+0xabc>)
 800228e:	701a      	strb	r2, [r3, #0]
			CHECK_SUM1 = ~( ((0x9 << 4) | MODE) + ((DATAFRAME[CollectedData-1]) + (DATAFRAME[CollectedData-2])) );
 8002290:	4b6a      	ldr	r3, [pc, #424]	; (800243c <DynamixelProtocal2+0xaac>)
 8002292:	881b      	ldrh	r3, [r3, #0]
 8002294:	b2db      	uxtb	r3, r3
 8002296:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800229a:	b2da      	uxtb	r2, r3
 800229c:	4b6c      	ldr	r3, [pc, #432]	; (8002450 <DynamixelProtocal2+0xac0>)
 800229e:	881b      	ldrh	r3, [r3, #0]
 80022a0:	3b01      	subs	r3, #1
 80022a2:	496c      	ldr	r1, [pc, #432]	; (8002454 <DynamixelProtocal2+0xac4>)
 80022a4:	5cc9      	ldrb	r1, [r1, r3]
 80022a6:	4b6a      	ldr	r3, [pc, #424]	; (8002450 <DynamixelProtocal2+0xac0>)
 80022a8:	881b      	ldrh	r3, [r3, #0]
 80022aa:	3b02      	subs	r3, #2
 80022ac:	4869      	ldr	r0, [pc, #420]	; (8002454 <DynamixelProtocal2+0xac4>)
 80022ae:	5cc3      	ldrb	r3, [r0, r3]
 80022b0:	440b      	add	r3, r1
 80022b2:	b2db      	uxtb	r3, r3
 80022b4:	4413      	add	r3, r2
 80022b6:	b2db      	uxtb	r3, r3
 80022b8:	43db      	mvns	r3, r3
 80022ba:	b2da      	uxtb	r2, r3
 80022bc:	4b66      	ldr	r3, [pc, #408]	; (8002458 <DynamixelProtocal2+0xac8>)
 80022be:	701a      	strb	r2, [r3, #0]
			if (CHECK_SUM1 == CHECKSUM)
 80022c0:	4b65      	ldr	r3, [pc, #404]	; (8002458 <DynamixelProtocal2+0xac8>)
 80022c2:	781a      	ldrb	r2, [r3, #0]
 80022c4:	4b59      	ldr	r3, [pc, #356]	; (800242c <DynamixelProtocal2+0xa9c>)
 80022c6:	781b      	ldrb	r3, [r3, #0]
 80022c8:	429a      	cmp	r2, r3
 80022ca:	d14c      	bne.n	8002366 <DynamixelProtocal2+0x9d6>
				switch (MODE)
 80022cc:	4b5b      	ldr	r3, [pc, #364]	; (800243c <DynamixelProtocal2+0xaac>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	3b01      	subs	r3, #1
 80022d2:	2b06      	cmp	r3, #6
 80022d4:	d857      	bhi.n	8002386 <DynamixelProtocal2+0x9f6>
 80022d6:	a201      	add	r2, pc, #4	; (adr r2, 80022dc <DynamixelProtocal2+0x94c>)
 80022d8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80022dc:	080022f9 	.word	0x080022f9
 80022e0:	08002387 	.word	0x08002387
 80022e4:	08002387 	.word	0x08002387
 80022e8:	0800230f 	.word	0x0800230f
 80022ec:	08002325 	.word	0x08002325
 80022f0:	0800233b 	.word	0x0800233b
 80022f4:	08002351 	.word	0x08002351
					uint8_t temp[] = {0x58,0x75};
 80022f8:	f247 5358 	movw	r3, #30040	; 0x7558
 80022fc:	863b      	strh	r3, [r7, #48]	; 0x30
					UARTTxWrite(uart, temp, 2);
 80022fe:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002302:	2202      	movs	r2, #2
 8002304:	4619      	mov	r1, r3
 8002306:	6878      	ldr	r0, [r7, #4]
 8002308:	f7ff fafa 	bl	8001900 <UARTTxWrite>
					break;
 800230c:	e03b      	b.n	8002386 <DynamixelProtocal2+0x9f6>
					uint8_t temp[] = {0x58,0x75};
 800230e:	f247 5358 	movw	r3, #30040	; 0x7558
 8002312:	85bb      	strh	r3, [r7, #44]	; 0x2c
					UARTTxWrite(uart, temp, 2);
 8002314:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 8002318:	2202      	movs	r2, #2
 800231a:	4619      	mov	r1, r3
 800231c:	6878      	ldr	r0, [r7, #4]
 800231e:	f7ff faef 	bl	8001900 <UARTTxWrite>
					break;
 8002322:	e030      	b.n	8002386 <DynamixelProtocal2+0x9f6>
					uint8_t temp[] = {0x58,0x75};
 8002324:	f247 5358 	movw	r3, #30040	; 0x7558
 8002328:	853b      	strh	r3, [r7, #40]	; 0x28
					UARTTxWrite(uart, temp, 2);
 800232a:	f107 0328 	add.w	r3, r7, #40	; 0x28
 800232e:	2202      	movs	r2, #2
 8002330:	4619      	mov	r1, r3
 8002332:	6878      	ldr	r0, [r7, #4]
 8002334:	f7ff fae4 	bl	8001900 <UARTTxWrite>
					break;
 8002338:	e025      	b.n	8002386 <DynamixelProtocal2+0x9f6>
					uint8_t temp[] = {0x58,0x75};
 800233a:	f247 5358 	movw	r3, #30040	; 0x7558
 800233e:	84bb      	strh	r3, [r7, #36]	; 0x24
					UARTTxWrite(uart, temp, 2);
 8002340:	f107 0324 	add.w	r3, r7, #36	; 0x24
 8002344:	2202      	movs	r2, #2
 8002346:	4619      	mov	r1, r3
 8002348:	6878      	ldr	r0, [r7, #4]
 800234a:	f7ff fad9 	bl	8001900 <UARTTxWrite>
					break;
 800234e:	e01a      	b.n	8002386 <DynamixelProtocal2+0x9f6>
					uint8_t temp[] = {0x58,0x75};
 8002350:	f247 5358 	movw	r3, #30040	; 0x7558
 8002354:	843b      	strh	r3, [r7, #32]
					UARTTxWrite(uart, temp, 2);
 8002356:	f107 0320 	add.w	r3, r7, #32
 800235a:	2202      	movs	r2, #2
 800235c:	4619      	mov	r1, r3
 800235e:	6878      	ldr	r0, [r7, #4]
 8002360:	f7ff face 	bl	8001900 <UARTTxWrite>
					break;
 8002364:	e00f      	b.n	8002386 <DynamixelProtocal2+0x9f6>
				uint8_t temp[] = {START,0x75,CHECKSUM};
 8002366:	4b30      	ldr	r3, [pc, #192]	; (8002428 <DynamixelProtocal2+0xa98>)
 8002368:	881b      	ldrh	r3, [r3, #0]
 800236a:	b2db      	uxtb	r3, r3
 800236c:	773b      	strb	r3, [r7, #28]
 800236e:	2375      	movs	r3, #117	; 0x75
 8002370:	777b      	strb	r3, [r7, #29]
 8002372:	4b2e      	ldr	r3, [pc, #184]	; (800242c <DynamixelProtocal2+0xa9c>)
 8002374:	781b      	ldrb	r3, [r3, #0]
 8002376:	77bb      	strb	r3, [r7, #30]
				UARTTxWrite(uart, temp, 3);
 8002378:	f107 031c 	add.w	r3, r7, #28
 800237c:	2203      	movs	r2, #3
 800237e:	4619      	mov	r1, r3
 8002380:	6878      	ldr	r0, [r7, #4]
 8002382:	f7ff fabd 	bl	8001900 <UARTTxWrite>
			DATA_N_SUM = 0;
 8002386:	4b2a      	ldr	r3, [pc, #168]	; (8002430 <DynamixelProtocal2+0xaa0>)
 8002388:	2200      	movs	r2, #0
 800238a:	701a      	strb	r2, [r3, #0]
			x=0;
 800238c:	4b29      	ldr	r3, [pc, #164]	; (8002434 <DynamixelProtocal2+0xaa4>)
 800238e:	2200      	movs	r2, #0
 8002390:	701a      	strb	r2, [r3, #0]
			State = S_idle;
 8002392:	4b29      	ldr	r3, [pc, #164]	; (8002438 <DynamixelProtocal2+0xaa8>)
 8002394:	2200      	movs	r2, #0
 8002396:	701a      	strb	r2, [r3, #0]
			break;
 8002398:	e041      	b.n	800241e <DynamixelProtocal2+0xa8e>
			x = 0;
 800239a:	4b26      	ldr	r3, [pc, #152]	; (8002434 <DynamixelProtocal2+0xaa4>)
 800239c:	2200      	movs	r2, #0
 800239e:	701a      	strb	r2, [r3, #0]
			CHECK_SUM1 = ~( ((0x9 << 4) | MODE) + STATION + DATA_N_SUM);
 80023a0:	4b26      	ldr	r3, [pc, #152]	; (800243c <DynamixelProtocal2+0xaac>)
 80023a2:	881b      	ldrh	r3, [r3, #0]
 80023a4:	b2db      	uxtb	r3, r3
 80023a6:	f063 036f 	orn	r3, r3, #111	; 0x6f
 80023aa:	b2da      	uxtb	r2, r3
 80023ac:	4b26      	ldr	r3, [pc, #152]	; (8002448 <DynamixelProtocal2+0xab8>)
 80023ae:	781b      	ldrb	r3, [r3, #0]
 80023b0:	4413      	add	r3, r2
 80023b2:	b2da      	uxtb	r2, r3
 80023b4:	4b1e      	ldr	r3, [pc, #120]	; (8002430 <DynamixelProtocal2+0xaa0>)
 80023b6:	781b      	ldrb	r3, [r3, #0]
 80023b8:	4413      	add	r3, r2
 80023ba:	b2db      	uxtb	r3, r3
 80023bc:	43db      	mvns	r3, r3
 80023be:	b2da      	uxtb	r2, r3
 80023c0:	4b25      	ldr	r3, [pc, #148]	; (8002458 <DynamixelProtocal2+0xac8>)
 80023c2:	701a      	strb	r2, [r3, #0]
			CHECKSUM = dataIn & 0xff ;
 80023c4:	893b      	ldrh	r3, [r7, #8]
 80023c6:	b2da      	uxtb	r2, r3
 80023c8:	4b18      	ldr	r3, [pc, #96]	; (800242c <DynamixelProtocal2+0xa9c>)
 80023ca:	701a      	strb	r2, [r3, #0]
			if (CHECK_SUM1 == CHECKSUM)
 80023cc:	4b22      	ldr	r3, [pc, #136]	; (8002458 <DynamixelProtocal2+0xac8>)
 80023ce:	781a      	ldrb	r2, [r3, #0]
 80023d0:	4b16      	ldr	r3, [pc, #88]	; (800242c <DynamixelProtocal2+0xa9c>)
 80023d2:	781b      	ldrb	r3, [r3, #0]
 80023d4:	429a      	cmp	r2, r3
 80023d6:	d10d      	bne.n	80023f4 <DynamixelProtocal2+0xa64>
				switch (MODE)
 80023d8:	4b18      	ldr	r3, [pc, #96]	; (800243c <DynamixelProtocal2+0xaac>)
 80023da:	881b      	ldrh	r3, [r3, #0]
 80023dc:	2b07      	cmp	r3, #7
 80023de:	d119      	bne.n	8002414 <DynamixelProtocal2+0xa84>
					uint8_t temp[] = {0x75};
 80023e0:	2375      	movs	r3, #117	; 0x75
 80023e2:	763b      	strb	r3, [r7, #24]
					UARTTxWrite(uart, temp, 1);
 80023e4:	f107 0318 	add.w	r3, r7, #24
 80023e8:	2201      	movs	r2, #1
 80023ea:	4619      	mov	r1, r3
 80023ec:	6878      	ldr	r0, [r7, #4]
 80023ee:	f7ff fa87 	bl	8001900 <UARTTxWrite>
					break;
 80023f2:	e00f      	b.n	8002414 <DynamixelProtocal2+0xa84>
				uint8_t temp[] = {START,0x75,CHECKSUM};
 80023f4:	4b0c      	ldr	r3, [pc, #48]	; (8002428 <DynamixelProtocal2+0xa98>)
 80023f6:	881b      	ldrh	r3, [r3, #0]
 80023f8:	b2db      	uxtb	r3, r3
 80023fa:	753b      	strb	r3, [r7, #20]
 80023fc:	2375      	movs	r3, #117	; 0x75
 80023fe:	757b      	strb	r3, [r7, #21]
 8002400:	4b0a      	ldr	r3, [pc, #40]	; (800242c <DynamixelProtocal2+0xa9c>)
 8002402:	781b      	ldrb	r3, [r3, #0]
 8002404:	75bb      	strb	r3, [r7, #22]
				UARTTxWrite(uart, temp, 3);
 8002406:	f107 0314 	add.w	r3, r7, #20
 800240a:	2203      	movs	r2, #3
 800240c:	4619      	mov	r1, r3
 800240e:	6878      	ldr	r0, [r7, #4]
 8002410:	f7ff fa76 	bl	8001900 <UARTTxWrite>
			State = S_idle;
 8002414:	4b08      	ldr	r3, [pc, #32]	; (8002438 <DynamixelProtocal2+0xaa8>)
 8002416:	2200      	movs	r2, #0
 8002418:	701a      	strb	r2, [r3, #0]
			break;
 800241a:	e000      	b.n	800241e <DynamixelProtocal2+0xa8e>
			break;
 800241c:	bf00      	nop
}
 800241e:	bf00      	nop
 8002420:	3778      	adds	r7, #120	; 0x78
 8002422:	46bd      	mov	sp, r7
 8002424:	bd80      	pop	{r7, pc}
 8002426:	bf00      	nop
 8002428:	200001d0 	.word	0x200001d0
 800242c:	200001cb 	.word	0x200001cb
 8002430:	200002d9 	.word	0x200002d9
 8002434:	200002dc 	.word	0x200002dc
 8002438:	20000314 	.word	0x20000314
 800243c:	200001d2 	.word	0x200001d2
 8002440:	20000004 	.word	0x20000004
 8002444:	200001cd 	.word	0x200001cd
 8002448:	200002d8 	.word	0x200002d8
 800244c:	200001ce 	.word	0x200001ce
 8002450:	2000036a 	.word	0x2000036a
 8002454:	200001d4 	.word	0x200001d4
 8002458:	200001cc 	.word	0x200001cc

0800245c <I2Con>:

void I2Con(){
 800245c:	b580      	push	{r7, lr}
 800245e:	b082      	sub	sp, #8
 8002460:	af00      	add	r7, sp, #0
	const uint8_t laserAddress = 0x23<<1;
 8002462:	2346      	movs	r3, #70	; 0x46
 8002464:	71fb      	strb	r3, [r7, #7]
	static uint8_t pdataStart[1] = {0x45};
	HAL_I2C_Master_Transmit_IT(&hi2c1, laserAddress, pdataStart, 1);
 8002466:	79fb      	ldrb	r3, [r7, #7]
 8002468:	b299      	uxth	r1, r3
 800246a:	2301      	movs	r3, #1
 800246c:	4a03      	ldr	r2, [pc, #12]	; (800247c <I2Con+0x20>)
 800246e:	4804      	ldr	r0, [pc, #16]	; (8002480 <I2Con+0x24>)
 8002470:	f002 fcca 	bl	8004e08 <HAL_I2C_Master_Transmit_IT>
}
 8002474:	bf00      	nop
 8002476:	3708      	adds	r7, #8
 8002478:	46bd      	mov	sp, r7
 800247a:	bd80      	pop	{r7, pc}
 800247c:	20000020 	.word	0x20000020
 8002480:	20000444 	.word	0x20000444

08002484 <findingPosition>:
		HAL_I2C_Master_Receive_IT(&hi2c1, laserAddress, status, 1);
	}
	return status;
}

uint8_t findingPosition(){
 8002484:	b480      	push	{r7}
 8002486:	af00      	add	r7, sp, #0
	rawPosition[0] = (float)HTIM_ENCODER.Instance->CNT*90/2048;
 8002488:	4b34      	ldr	r3, [pc, #208]	; (800255c <findingPosition+0xd8>)
 800248a:	681b      	ldr	r3, [r3, #0]
 800248c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800248e:	ee07 3a90 	vmov	s15, r3
 8002492:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002496:	ed9f 7a32 	vldr	s14, [pc, #200]	; 8002560 <findingPosition+0xdc>
 800249a:	ee27 7a87 	vmul.f32	s14, s15, s14
 800249e:	eddf 6a31 	vldr	s13, [pc, #196]	; 8002564 <findingPosition+0xe0>
 80024a2:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80024a6:	4b30      	ldr	r3, [pc, #192]	; (8002568 <findingPosition+0xe4>)
 80024a8:	edc3 7a00 	vstr	s15, [r3]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 80)){
 80024ac:	4b2e      	ldr	r3, [pc, #184]	; (8002568 <findingPosition+0xe4>)
 80024ae:	edd3 7a00 	vldr	s15, [r3]
 80024b2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024b6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ba:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024be:	d510      	bpl.n	80024e2 <findingPosition+0x5e>
 80024c0:	4b29      	ldr	r3, [pc, #164]	; (8002568 <findingPosition+0xe4>)
 80024c2:	edd3 7a01 	vldr	s15, [r3, #4]
 80024c6:	ed9f 7a29 	vldr	s14, [pc, #164]	; 800256c <findingPosition+0xe8>
 80024ca:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024ce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024d2:	dd06      	ble.n	80024e2 <findingPosition+0x5e>
		cP += 1;
 80024d4:	4b26      	ldr	r3, [pc, #152]	; (8002570 <findingPosition+0xec>)
 80024d6:	781b      	ldrb	r3, [r3, #0]
 80024d8:	3301      	adds	r3, #1
 80024da:	b2da      	uxtb	r2, r3
 80024dc:	4b24      	ldr	r3, [pc, #144]	; (8002570 <findingPosition+0xec>)
 80024de:	701a      	strb	r2, [r3, #0]
 80024e0:	e019      	b.n	8002516 <findingPosition+0x92>
	}
	else if ((rawPosition[0] > 80 )&& (rawPosition[1] < 10)){
 80024e2:	4b21      	ldr	r3, [pc, #132]	; (8002568 <findingPosition+0xe4>)
 80024e4:	edd3 7a00 	vldr	s15, [r3]
 80024e8:	ed9f 7a20 	vldr	s14, [pc, #128]	; 800256c <findingPosition+0xe8>
 80024ec:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024f0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024f4:	dd0f      	ble.n	8002516 <findingPosition+0x92>
 80024f6:	4b1c      	ldr	r3, [pc, #112]	; (8002568 <findingPosition+0xe4>)
 80024f8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024fc:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002500:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002504:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002508:	d505      	bpl.n	8002516 <findingPosition+0x92>
		cP -= 1;
 800250a:	4b19      	ldr	r3, [pc, #100]	; (8002570 <findingPosition+0xec>)
 800250c:	781b      	ldrb	r3, [r3, #0]
 800250e:	3b01      	subs	r3, #1
 8002510:	b2da      	uxtb	r2, r3
 8002512:	4b17      	ldr	r3, [pc, #92]	; (8002570 <findingPosition+0xec>)
 8002514:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 8002516:	4b16      	ldr	r3, [pc, #88]	; (8002570 <findingPosition+0xec>)
 8002518:	781b      	ldrb	r3, [r3, #0]
 800251a:	2b03      	cmp	r3, #3
 800251c:	d902      	bls.n	8002524 <findingPosition+0xa0>
		cP = 0;
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <findingPosition+0xec>)
 8002520:	2200      	movs	r2, #0
 8002522:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = (float)rawPosition[0] + cP*90;
 8002524:	4b10      	ldr	r3, [pc, #64]	; (8002568 <findingPosition+0xe4>)
 8002526:	ed93 7a00 	vldr	s14, [r3]
 800252a:	4b11      	ldr	r3, [pc, #68]	; (8002570 <findingPosition+0xec>)
 800252c:	781b      	ldrb	r3, [r3, #0]
 800252e:	461a      	mov	r2, r3
 8002530:	235a      	movs	r3, #90	; 0x5a
 8002532:	fb03 f302 	mul.w	r3, r3, r2
 8002536:	ee07 3a90 	vmov	s15, r3
 800253a:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800253e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002542:	4b0c      	ldr	r3, [pc, #48]	; (8002574 <findingPosition+0xf0>)
 8002544:	edc3 7a00 	vstr	s15, [r3]
	rawPosition[1] = rawPosition[0];
 8002548:	4b07      	ldr	r3, [pc, #28]	; (8002568 <findingPosition+0xe4>)
 800254a:	681b      	ldr	r3, [r3, #0]
 800254c:	4a06      	ldr	r2, [pc, #24]	; (8002568 <findingPosition+0xe4>)
 800254e:	6053      	str	r3, [r2, #4]
}
 8002550:	bf00      	nop
 8002552:	4618      	mov	r0, r3
 8002554:	46bd      	mov	sp, r7
 8002556:	f85d 7b04 	ldr.w	r7, [sp], #4
 800255a:	4770      	bx	lr
 800255c:	20000540 	.word	0x20000540
 8002560:	42b40000 	.word	0x42b40000
 8002564:	45000000 	.word	0x45000000
 8002568:	2000034c 	.word	0x2000034c
 800256c:	42a00000 	.word	0x42a00000
 8002570:	20000320 	.word	0x20000320
 8002574:	20000348 	.word	0x20000348

08002578 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 8002578:	b5b0      	push	{r4, r5, r7, lr}
 800257a:	b086      	sub	sp, #24
 800257c:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800257e:	4b36      	ldr	r3, [pc, #216]	; (8002658 <EncoderVelocity_Update+0xe0>)
 8002580:	681b      	ldr	r3, [r3, #0]
 8002582:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002584:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8002586:	f001 f817 	bl	80035b8 <micros>
 800258a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800258e:	4b33      	ldr	r3, [pc, #204]	; (800265c <EncoderVelocity_Update+0xe4>)
 8002590:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002594:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002598:	1a84      	subs	r4, r0, r2
 800259a:	eb61 0503 	sbc.w	r5, r1, r3
 800259e:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80025a2:	4b2f      	ldr	r3, [pc, #188]	; (8002660 <EncoderVelocity_Update+0xe8>)
 80025a4:	681b      	ldr	r3, [r3, #0]
 80025a6:	693a      	ldr	r2, [r7, #16]
 80025a8:	1ad3      	subs	r3, r2, r3
 80025aa:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80025ac:	697b      	ldr	r3, [r7, #20]
 80025ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80025b2:	db04      	blt.n	80025be <EncoderVelocity_Update+0x46>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80025b4:	697b      	ldr	r3, [r7, #20]
 80025b6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80025ba:	617b      	str	r3, [r7, #20]
 80025bc:	e007      	b.n	80025ce <EncoderVelocity_Update+0x56>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80025be:	697b      	ldr	r3, [r7, #20]
 80025c0:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 80025c4:	dc03      	bgt.n	80025ce <EncoderVelocity_Update+0x56>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80025c6:	697b      	ldr	r3, [r7, #20]
 80025c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80025cc:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80025ce:	4a24      	ldr	r2, [pc, #144]	; (8002660 <EncoderVelocity_Update+0xe8>)
 80025d0:	693b      	ldr	r3, [r7, #16]
 80025d2:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80025d4:	4921      	ldr	r1, [pc, #132]	; (800265c <EncoderVelocity_Update+0xe4>)
 80025d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80025da:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000*2*3.14) / (float) (EncoderTimeDiff *2048*4);
 80025de:	697b      	ldr	r3, [r7, #20]
 80025e0:	4a20      	ldr	r2, [pc, #128]	; (8002664 <EncoderVelocity_Update+0xec>)
 80025e2:	fb02 f303 	mul.w	r3, r2, r3
 80025e6:	4618      	mov	r0, r3
 80025e8:	f7fd ff48 	bl	800047c <__aeabi_i2d>
 80025ec:	a318      	add	r3, pc, #96	; (adr r3, 8002650 <EncoderVelocity_Update+0xd8>)
 80025ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025f2:	f7fd ffad 	bl	8000550 <__aeabi_dmul>
 80025f6:	4602      	mov	r2, r0
 80025f8:	460b      	mov	r3, r1
 80025fa:	4614      	mov	r4, r2
 80025fc:	461d      	mov	r5, r3
 80025fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002602:	f04f 0200 	mov.w	r2, #0
 8002606:	f04f 0300 	mov.w	r3, #0
 800260a:	034b      	lsls	r3, r1, #13
 800260c:	ea43 43d0 	orr.w	r3, r3, r0, lsr #19
 8002610:	0342      	lsls	r2, r0, #13
 8002612:	4610      	mov	r0, r2
 8002614:	4619      	mov	r1, r3
 8002616:	f7fe fb63 	bl	8000ce0 <__aeabi_ul2f>
 800261a:	4603      	mov	r3, r0
 800261c:	4618      	mov	r0, r3
 800261e:	f7fd ff3f 	bl	80004a0 <__aeabi_f2d>
 8002622:	4602      	mov	r2, r0
 8002624:	460b      	mov	r3, r1
 8002626:	4620      	mov	r0, r4
 8002628:	4629      	mov	r1, r5
 800262a:	f7fe f8bb 	bl	80007a4 <__aeabi_ddiv>
 800262e:	4602      	mov	r2, r0
 8002630:	460b      	mov	r3, r1
 8002632:	4610      	mov	r0, r2
 8002634:	4619      	mov	r1, r3
 8002636:	f7fe fa3b 	bl	8000ab0 <__aeabi_d2f>
 800263a:	4603      	mov	r3, r0
 800263c:	ee07 3a90 	vmov	s15, r3

}
 8002640:	eeb0 0a67 	vmov.f32	s0, s15
 8002644:	3718      	adds	r7, #24
 8002646:	46bd      	mov	sp, r7
 8002648:	bdb0      	pop	{r4, r5, r7, pc}
 800264a:	bf00      	nop
 800264c:	f3af 8000 	nop.w
 8002650:	51eb851f 	.word	0x51eb851f
 8002654:	40091eb8 	.word	0x40091eb8
 8002658:	20000540 	.word	0x20000540
 800265c:	20000370 	.word	0x20000370
 8002660:	20000378 	.word	0x20000378
 8002664:	001e8480 	.word	0x001e8480

08002668 <trajectory>:

void trajectory(uint64_t Timestamp){
 8002668:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800266c:	b082      	sub	sp, #8
 800266e:	af00      	add	r7, sp, #0
 8002670:	e9c7 0100 	strd	r0, r1, [r7]
	static float a0 = 0;
	static float a1 = 0;
	static float a2 = 0;
	static float a3 = 0;
	static uint64_t setTime = 0;
	state[0] = start;
 8002674:	4b16      	ldr	r3, [pc, #88]	; (80026d0 <trajectory+0x68>)
 8002676:	781b      	ldrb	r3, [r3, #0]
 8002678:	461a      	mov	r2, r3
 800267a:	4b16      	ldr	r3, [pc, #88]	; (80026d4 <trajectory+0x6c>)
 800267c:	701a      	strb	r2, [r3, #0]
	rawPosition[0] = HTIM_ENCODER.Instance->CNT*90/2048;
 800267e:	4b16      	ldr	r3, [pc, #88]	; (80026d8 <trajectory+0x70>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002684:	225a      	movs	r2, #90	; 0x5a
 8002686:	fb02 f303 	mul.w	r3, r2, r3
 800268a:	0adb      	lsrs	r3, r3, #11
 800268c:	ee07 3a90 	vmov	s15, r3
 8002690:	eef8 7a67 	vcvt.f32.u32	s15, s15
 8002694:	4b11      	ldr	r3, [pc, #68]	; (80026dc <trajectory+0x74>)
 8002696:	edc3 7a00 	vstr	s15, [r3]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 87)){
 800269a:	4b10      	ldr	r3, [pc, #64]	; (80026dc <trajectory+0x74>)
 800269c:	edd3 7a00 	vldr	s15, [r3]
 80026a0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80026a4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026a8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026ac:	d51c      	bpl.n	80026e8 <trajectory+0x80>
 80026ae:	4b0b      	ldr	r3, [pc, #44]	; (80026dc <trajectory+0x74>)
 80026b0:	edd3 7a01 	vldr	s15, [r3, #4]
 80026b4:	ed9f 7a0a 	vldr	s14, [pc, #40]	; 80026e0 <trajectory+0x78>
 80026b8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026bc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026c0:	dd12      	ble.n	80026e8 <trajectory+0x80>
		cP += 1;
 80026c2:	4b08      	ldr	r3, [pc, #32]	; (80026e4 <trajectory+0x7c>)
 80026c4:	781b      	ldrb	r3, [r3, #0]
 80026c6:	3301      	adds	r3, #1
 80026c8:	b2da      	uxtb	r2, r3
 80026ca:	4b06      	ldr	r3, [pc, #24]	; (80026e4 <trajectory+0x7c>)
 80026cc:	701a      	strb	r2, [r3, #0]
 80026ce:	e025      	b.n	800271c <trajectory+0xb4>
 80026d0:	20000356 	.word	0x20000356
 80026d4:	20000354 	.word	0x20000354
 80026d8:	20000540 	.word	0x20000540
 80026dc:	2000034c 	.word	0x2000034c
 80026e0:	42ae0000 	.word	0x42ae0000
 80026e4:	20000320 	.word	0x20000320
	}
	else if ((rawPosition[0] >87 )&& (rawPosition[1] < 10)){
 80026e8:	4bd1      	ldr	r3, [pc, #836]	; (8002a30 <trajectory+0x3c8>)
 80026ea:	edd3 7a00 	vldr	s15, [r3]
 80026ee:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8002a34 <trajectory+0x3cc>
 80026f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80026f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80026fa:	dd0f      	ble.n	800271c <trajectory+0xb4>
 80026fc:	4bcc      	ldr	r3, [pc, #816]	; (8002a30 <trajectory+0x3c8>)
 80026fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8002702:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8002706:	eef4 7ac7 	vcmpe.f32	s15, s14
 800270a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800270e:	d505      	bpl.n	800271c <trajectory+0xb4>
		cP -= 1;
 8002710:	4bc9      	ldr	r3, [pc, #804]	; (8002a38 <trajectory+0x3d0>)
 8002712:	781b      	ldrb	r3, [r3, #0]
 8002714:	3b01      	subs	r3, #1
 8002716:	b2da      	uxtb	r2, r3
 8002718:	4bc7      	ldr	r3, [pc, #796]	; (8002a38 <trajectory+0x3d0>)
 800271a:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 800271c:	4bc6      	ldr	r3, [pc, #792]	; (8002a38 <trajectory+0x3d0>)
 800271e:	781b      	ldrb	r3, [r3, #0]
 8002720:	2b03      	cmp	r3, #3
 8002722:	d902      	bls.n	800272a <trajectory+0xc2>
		cP = 0;
 8002724:	4bc4      	ldr	r3, [pc, #784]	; (8002a38 <trajectory+0x3d0>)
 8002726:	2200      	movs	r2, #0
 8002728:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = rawPosition[0] + cP*90;
 800272a:	4bc1      	ldr	r3, [pc, #772]	; (8002a30 <trajectory+0x3c8>)
 800272c:	ed93 7a00 	vldr	s14, [r3]
 8002730:	4bc1      	ldr	r3, [pc, #772]	; (8002a38 <trajectory+0x3d0>)
 8002732:	781b      	ldrb	r3, [r3, #0]
 8002734:	461a      	mov	r2, r3
 8002736:	235a      	movs	r3, #90	; 0x5a
 8002738:	fb03 f302 	mul.w	r3, r3, r2
 800273c:	ee07 3a90 	vmov	s15, r3
 8002740:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002744:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002748:	4bbc      	ldr	r3, [pc, #752]	; (8002a3c <trajectory+0x3d4>)
 800274a:	edc3 7a00 	vstr	s15, [r3]
	if(state[0] == 1){
 800274e:	4bbc      	ldr	r3, [pc, #752]	; (8002a40 <trajectory+0x3d8>)
 8002750:	781b      	ldrb	r3, [r3, #0]
 8002752:	2b01      	cmp	r3, #1
 8002754:	f040 8206 	bne.w	8002b64 <trajectory+0x4fc>
		if(state[0] != state[1]){
 8002758:	4bb9      	ldr	r3, [pc, #740]	; (8002a40 <trajectory+0x3d8>)
 800275a:	781a      	ldrb	r2, [r3, #0]
 800275c:	4bb8      	ldr	r3, [pc, #736]	; (8002a40 <trajectory+0x3d8>)
 800275e:	785b      	ldrb	r3, [r3, #1]
 8002760:	429a      	cmp	r2, r3
 8002762:	d008      	beq.n	8002776 <trajectory+0x10e>
			setTime = Timestamp;
 8002764:	49b7      	ldr	r1, [pc, #732]	; (8002a44 <trajectory+0x3dc>)
 8002766:	e9d7 2300 	ldrd	r2, r3, [r7]
 800276a:	e9c1 2300 	strd	r2, r3, [r1]
			startAngle = currentPosition;
 800276e:	4bb3      	ldr	r3, [pc, #716]	; (8002a3c <trajectory+0x3d4>)
 8002770:	681b      	ldr	r3, [r3, #0]
 8002772:	4ab5      	ldr	r2, [pc, #724]	; (8002a48 <trajectory+0x3e0>)
 8002774:	6013      	str	r3, [r2, #0]
		}
		tim = (float) (Timestamp-setTime)/1000000;
 8002776:	4bb3      	ldr	r3, [pc, #716]	; (8002a44 <trajectory+0x3dc>)
 8002778:	e9d3 2300 	ldrd	r2, r3, [r3]
 800277c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002780:	1a84      	subs	r4, r0, r2
 8002782:	eb61 0503 	sbc.w	r5, r1, r3
 8002786:	4620      	mov	r0, r4
 8002788:	4629      	mov	r1, r5
 800278a:	f7fe faa9 	bl	8000ce0 <__aeabi_ul2f>
 800278e:	ee06 0a90 	vmov	s13, r0
 8002792:	ed9f 7aae 	vldr	s14, [pc, #696]	; 8002a4c <trajectory+0x3e4>
 8002796:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800279a:	4bad      	ldr	r3, [pc, #692]	; (8002a50 <trajectory+0x3e8>)
 800279c:	edc3 7a00 	vstr	s15, [r3]
		tF = (float) (250*abs(finalAngle-startAngle-storeAngle)/(355*vMax));
 80027a0:	4bac      	ldr	r3, [pc, #688]	; (8002a54 <trajectory+0x3ec>)
 80027a2:	881b      	ldrh	r3, [r3, #0]
 80027a4:	ee07 3a90 	vmov	s15, r3
 80027a8:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 80027ac:	4ba6      	ldr	r3, [pc, #664]	; (8002a48 <trajectory+0x3e0>)
 80027ae:	edd3 7a00 	vldr	s15, [r3]
 80027b2:	ee37 7a67 	vsub.f32	s14, s14, s15
 80027b6:	4ba8      	ldr	r3, [pc, #672]	; (8002a58 <trajectory+0x3f0>)
 80027b8:	781b      	ldrb	r3, [r3, #0]
 80027ba:	ee07 3a90 	vmov	s15, r3
 80027be:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80027c2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80027c6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80027ca:	ee17 3a90 	vmov	r3, s15
 80027ce:	2b00      	cmp	r3, #0
 80027d0:	bfb8      	it	lt
 80027d2:	425b      	neglt	r3, r3
 80027d4:	22fa      	movs	r2, #250	; 0xfa
 80027d6:	fb02 f303 	mul.w	r3, r2, r3
 80027da:	ee07 3a90 	vmov	s15, r3
 80027de:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80027e2:	4b9e      	ldr	r3, [pc, #632]	; (8002a5c <trajectory+0x3f4>)
 80027e4:	edd3 7a00 	vldr	s15, [r3]
 80027e8:	ed9f 7a9d 	vldr	s14, [pc, #628]	; 8002a60 <trajectory+0x3f8>
 80027ec:	ee27 7a87 	vmul.f32	s14, s15, s14
 80027f0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80027f4:	4b9b      	ldr	r3, [pc, #620]	; (8002a64 <trajectory+0x3fc>)
 80027f6:	edc3 7a00 	vstr	s15, [r3]
		a0 = startAngle;
 80027fa:	4b93      	ldr	r3, [pc, #588]	; (8002a48 <trajectory+0x3e0>)
 80027fc:	681b      	ldr	r3, [r3, #0]
 80027fe:	4a9a      	ldr	r2, [pc, #616]	; (8002a68 <trajectory+0x400>)
 8002800:	6013      	str	r3, [r2, #0]
		a1 = 0;
 8002802:	4b9a      	ldr	r3, [pc, #616]	; (8002a6c <trajectory+0x404>)
 8002804:	f04f 0200 	mov.w	r2, #0
 8002808:	601a      	str	r2, [r3, #0]
		a2 = (float) (3/pow(tF,2))*(finalAngle-startAngle);
 800280a:	4b96      	ldr	r3, [pc, #600]	; (8002a64 <trajectory+0x3fc>)
 800280c:	681b      	ldr	r3, [r3, #0]
 800280e:	4618      	mov	r0, r3
 8002810:	f7fd fe46 	bl	80004a0 <__aeabi_f2d>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	ed9f 1b81 	vldr	d1, [pc, #516]	; 8002a20 <trajectory+0x3b8>
 800281c:	ec43 2b10 	vmov	d0, r2, r3
 8002820:	f006 fe1a 	bl	8009458 <pow>
 8002824:	ec53 2b10 	vmov	r2, r3, d0
 8002828:	f04f 0000 	mov.w	r0, #0
 800282c:	4990      	ldr	r1, [pc, #576]	; (8002a70 <trajectory+0x408>)
 800282e:	f7fd ffb9 	bl	80007a4 <__aeabi_ddiv>
 8002832:	4602      	mov	r2, r0
 8002834:	460b      	mov	r3, r1
 8002836:	4610      	mov	r0, r2
 8002838:	4619      	mov	r1, r3
 800283a:	f7fe f939 	bl	8000ab0 <__aeabi_d2f>
 800283e:	ee06 0a90 	vmov	s13, r0
 8002842:	4b84      	ldr	r3, [pc, #528]	; (8002a54 <trajectory+0x3ec>)
 8002844:	881b      	ldrh	r3, [r3, #0]
 8002846:	ee07 3a90 	vmov	s15, r3
 800284a:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 800284e:	4b7e      	ldr	r3, [pc, #504]	; (8002a48 <trajectory+0x3e0>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002858:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800285c:	4b85      	ldr	r3, [pc, #532]	; (8002a74 <trajectory+0x40c>)
 800285e:	edc3 7a00 	vstr	s15, [r3]
		a3 = (float) -(2/pow(tF,3))*(finalAngle-startAngle);
 8002862:	4b80      	ldr	r3, [pc, #512]	; (8002a64 <trajectory+0x3fc>)
 8002864:	681b      	ldr	r3, [r3, #0]
 8002866:	4618      	mov	r0, r3
 8002868:	f7fd fe1a 	bl	80004a0 <__aeabi_f2d>
 800286c:	4602      	mov	r2, r0
 800286e:	460b      	mov	r3, r1
 8002870:	ed9f 1b6d 	vldr	d1, [pc, #436]	; 8002a28 <trajectory+0x3c0>
 8002874:	ec43 2b10 	vmov	d0, r2, r3
 8002878:	f006 fdee 	bl	8009458 <pow>
 800287c:	ec53 2b10 	vmov	r2, r3, d0
 8002880:	f04f 0000 	mov.w	r0, #0
 8002884:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002888:	f7fd ff8c 	bl	80007a4 <__aeabi_ddiv>
 800288c:	4602      	mov	r2, r0
 800288e:	460b      	mov	r3, r1
 8002890:	4610      	mov	r0, r2
 8002892:	4619      	mov	r1, r3
 8002894:	f7fe f90c 	bl	8000ab0 <__aeabi_d2f>
 8002898:	4603      	mov	r3, r0
 800289a:	ee07 3a90 	vmov	s15, r3
 800289e:	eeb1 7a67 	vneg.f32	s14, s15
 80028a2:	4b6c      	ldr	r3, [pc, #432]	; (8002a54 <trajectory+0x3ec>)
 80028a4:	881b      	ldrh	r3, [r3, #0]
 80028a6:	ee07 3a90 	vmov	s15, r3
 80028aa:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80028ae:	4b66      	ldr	r3, [pc, #408]	; (8002a48 <trajectory+0x3e0>)
 80028b0:	edd3 7a00 	vldr	s15, [r3]
 80028b4:	ee76 7ae7 	vsub.f32	s15, s13, s15
 80028b8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80028bc:	4b6e      	ldr	r3, [pc, #440]	; (8002a78 <trajectory+0x410>)
 80028be:	edc3 7a00 	vstr	s15, [r3]
		position = (float) a0+ (a1*tim) +(a2*pow(tim,2)) +(a3*pow(tim,3));
 80028c2:	4b6a      	ldr	r3, [pc, #424]	; (8002a6c <trajectory+0x404>)
 80028c4:	ed93 7a00 	vldr	s14, [r3]
 80028c8:	4b61      	ldr	r3, [pc, #388]	; (8002a50 <trajectory+0x3e8>)
 80028ca:	edd3 7a00 	vldr	s15, [r3]
 80028ce:	ee27 7a27 	vmul.f32	s14, s14, s15
 80028d2:	4b65      	ldr	r3, [pc, #404]	; (8002a68 <trajectory+0x400>)
 80028d4:	edd3 7a00 	vldr	s15, [r3]
 80028d8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028dc:	ee17 0a90 	vmov	r0, s15
 80028e0:	f7fd fdde 	bl	80004a0 <__aeabi_f2d>
 80028e4:	4604      	mov	r4, r0
 80028e6:	460d      	mov	r5, r1
 80028e8:	4b62      	ldr	r3, [pc, #392]	; (8002a74 <trajectory+0x40c>)
 80028ea:	681b      	ldr	r3, [r3, #0]
 80028ec:	4618      	mov	r0, r3
 80028ee:	f7fd fdd7 	bl	80004a0 <__aeabi_f2d>
 80028f2:	4680      	mov	r8, r0
 80028f4:	4689      	mov	r9, r1
 80028f6:	4b56      	ldr	r3, [pc, #344]	; (8002a50 <trajectory+0x3e8>)
 80028f8:	681b      	ldr	r3, [r3, #0]
 80028fa:	4618      	mov	r0, r3
 80028fc:	f7fd fdd0 	bl	80004a0 <__aeabi_f2d>
 8002900:	4602      	mov	r2, r0
 8002902:	460b      	mov	r3, r1
 8002904:	ed9f 1b46 	vldr	d1, [pc, #280]	; 8002a20 <trajectory+0x3b8>
 8002908:	ec43 2b10 	vmov	d0, r2, r3
 800290c:	f006 fda4 	bl	8009458 <pow>
 8002910:	ec53 2b10 	vmov	r2, r3, d0
 8002914:	4640      	mov	r0, r8
 8002916:	4649      	mov	r1, r9
 8002918:	f7fd fe1a 	bl	8000550 <__aeabi_dmul>
 800291c:	4602      	mov	r2, r0
 800291e:	460b      	mov	r3, r1
 8002920:	4620      	mov	r0, r4
 8002922:	4629      	mov	r1, r5
 8002924:	f7fd fc5e 	bl	80001e4 <__adddf3>
 8002928:	4602      	mov	r2, r0
 800292a:	460b      	mov	r3, r1
 800292c:	4690      	mov	r8, r2
 800292e:	4699      	mov	r9, r3
 8002930:	4b51      	ldr	r3, [pc, #324]	; (8002a78 <trajectory+0x410>)
 8002932:	681b      	ldr	r3, [r3, #0]
 8002934:	4618      	mov	r0, r3
 8002936:	f7fd fdb3 	bl	80004a0 <__aeabi_f2d>
 800293a:	4604      	mov	r4, r0
 800293c:	460d      	mov	r5, r1
 800293e:	4b44      	ldr	r3, [pc, #272]	; (8002a50 <trajectory+0x3e8>)
 8002940:	681b      	ldr	r3, [r3, #0]
 8002942:	4618      	mov	r0, r3
 8002944:	f7fd fdac 	bl	80004a0 <__aeabi_f2d>
 8002948:	4602      	mov	r2, r0
 800294a:	460b      	mov	r3, r1
 800294c:	ed9f 1b36 	vldr	d1, [pc, #216]	; 8002a28 <trajectory+0x3c0>
 8002950:	ec43 2b10 	vmov	d0, r2, r3
 8002954:	f006 fd80 	bl	8009458 <pow>
 8002958:	ec53 2b10 	vmov	r2, r3, d0
 800295c:	4620      	mov	r0, r4
 800295e:	4629      	mov	r1, r5
 8002960:	f7fd fdf6 	bl	8000550 <__aeabi_dmul>
 8002964:	4602      	mov	r2, r0
 8002966:	460b      	mov	r3, r1
 8002968:	4640      	mov	r0, r8
 800296a:	4649      	mov	r1, r9
 800296c:	f7fd fc3a 	bl	80001e4 <__adddf3>
 8002970:	4602      	mov	r2, r0
 8002972:	460b      	mov	r3, r1
 8002974:	4610      	mov	r0, r2
 8002976:	4619      	mov	r1, r3
 8002978:	f7fe f89a 	bl	8000ab0 <__aeabi_d2f>
 800297c:	4603      	mov	r3, r0
 800297e:	4a3f      	ldr	r2, [pc, #252]	; (8002a7c <trajectory+0x414>)
 8002980:	6013      	str	r3, [r2, #0]
		velocity = (float) (a1 +(2*a2*tim) +(3*a3*pow(tim,2)))/6;
 8002982:	4b3c      	ldr	r3, [pc, #240]	; (8002a74 <trajectory+0x40c>)
 8002984:	edd3 7a00 	vldr	s15, [r3]
 8002988:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800298c:	4b30      	ldr	r3, [pc, #192]	; (8002a50 <trajectory+0x3e8>)
 800298e:	edd3 7a00 	vldr	s15, [r3]
 8002992:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002996:	4b35      	ldr	r3, [pc, #212]	; (8002a6c <trajectory+0x404>)
 8002998:	edd3 7a00 	vldr	s15, [r3]
 800299c:	ee77 7a27 	vadd.f32	s15, s14, s15
 80029a0:	ee17 0a90 	vmov	r0, s15
 80029a4:	f7fd fd7c 	bl	80004a0 <__aeabi_f2d>
 80029a8:	4604      	mov	r4, r0
 80029aa:	460d      	mov	r5, r1
 80029ac:	4b32      	ldr	r3, [pc, #200]	; (8002a78 <trajectory+0x410>)
 80029ae:	edd3 7a00 	vldr	s15, [r3]
 80029b2:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 80029b6:	ee67 7a87 	vmul.f32	s15, s15, s14
 80029ba:	ee17 0a90 	vmov	r0, s15
 80029be:	f7fd fd6f 	bl	80004a0 <__aeabi_f2d>
 80029c2:	4680      	mov	r8, r0
 80029c4:	4689      	mov	r9, r1
 80029c6:	4b22      	ldr	r3, [pc, #136]	; (8002a50 <trajectory+0x3e8>)
 80029c8:	681b      	ldr	r3, [r3, #0]
 80029ca:	4618      	mov	r0, r3
 80029cc:	f7fd fd68 	bl	80004a0 <__aeabi_f2d>
 80029d0:	4602      	mov	r2, r0
 80029d2:	460b      	mov	r3, r1
 80029d4:	ed9f 1b12 	vldr	d1, [pc, #72]	; 8002a20 <trajectory+0x3b8>
 80029d8:	ec43 2b10 	vmov	d0, r2, r3
 80029dc:	f006 fd3c 	bl	8009458 <pow>
 80029e0:	ec53 2b10 	vmov	r2, r3, d0
 80029e4:	4640      	mov	r0, r8
 80029e6:	4649      	mov	r1, r9
 80029e8:	f7fd fdb2 	bl	8000550 <__aeabi_dmul>
 80029ec:	4602      	mov	r2, r0
 80029ee:	460b      	mov	r3, r1
 80029f0:	4620      	mov	r0, r4
 80029f2:	4629      	mov	r1, r5
 80029f4:	f7fd fbf6 	bl	80001e4 <__adddf3>
 80029f8:	4602      	mov	r2, r0
 80029fa:	460b      	mov	r3, r1
 80029fc:	4610      	mov	r0, r2
 80029fe:	4619      	mov	r1, r3
 8002a00:	f7fe f856 	bl	8000ab0 <__aeabi_d2f>
 8002a04:	ee06 0a90 	vmov	s13, r0
 8002a08:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002a0c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002a10:	4b1b      	ldr	r3, [pc, #108]	; (8002a80 <trajectory+0x418>)
 8002a12:	edc3 7a00 	vstr	s15, [r3]
		alpha = (float) ((2*a2) +(6*a3*tim))*2*3.14/360;
 8002a16:	4b17      	ldr	r3, [pc, #92]	; (8002a74 <trajectory+0x40c>)
 8002a18:	edd3 7a00 	vldr	s15, [r3]
 8002a1c:	e032      	b.n	8002a84 <trajectory+0x41c>
 8002a1e:	bf00      	nop
 8002a20:	00000000 	.word	0x00000000
 8002a24:	40000000 	.word	0x40000000
 8002a28:	00000000 	.word	0x00000000
 8002a2c:	40080000 	.word	0x40080000
 8002a30:	2000034c 	.word	0x2000034c
 8002a34:	42ae0000 	.word	0x42ae0000
 8002a38:	20000320 	.word	0x20000320
 8002a3c:	20000348 	.word	0x20000348
 8002a40:	20000354 	.word	0x20000354
 8002a44:	20000380 	.word	0x20000380
 8002a48:	2000033c 	.word	0x2000033c
 8002a4c:	49742400 	.word	0x49742400
 8002a50:	20000334 	.word	0x20000334
 8002a54:	20000004 	.word	0x20000004
 8002a58:	20000344 	.word	0x20000344
 8002a5c:	20000008 	.word	0x20000008
 8002a60:	43b18000 	.word	0x43b18000
 8002a64:	20000364 	.word	0x20000364
 8002a68:	20000388 	.word	0x20000388
 8002a6c:	2000038c 	.word	0x2000038c
 8002a70:	40080000 	.word	0x40080000
 8002a74:	20000390 	.word	0x20000390
 8002a78:	20000394 	.word	0x20000394
 8002a7c:	2000032c 	.word	0x2000032c
 8002a80:	20000328 	.word	0x20000328
 8002a84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002a88:	4b3d      	ldr	r3, [pc, #244]	; (8002b80 <trajectory+0x518>)
 8002a8a:	edd3 7a00 	vldr	s15, [r3]
 8002a8e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002a92:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8002a96:	4b3b      	ldr	r3, [pc, #236]	; (8002b84 <trajectory+0x51c>)
 8002a98:	edd3 7a00 	vldr	s15, [r3]
 8002a9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002aa4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002aa8:	ee17 0a90 	vmov	r0, s15
 8002aac:	f7fd fcf8 	bl	80004a0 <__aeabi_f2d>
 8002ab0:	a331      	add	r3, pc, #196	; (adr r3, 8002b78 <trajectory+0x510>)
 8002ab2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002ab6:	f7fd fd4b 	bl	8000550 <__aeabi_dmul>
 8002aba:	4602      	mov	r2, r0
 8002abc:	460b      	mov	r3, r1
 8002abe:	4610      	mov	r0, r2
 8002ac0:	4619      	mov	r1, r3
 8002ac2:	f04f 0200 	mov.w	r2, #0
 8002ac6:	4b30      	ldr	r3, [pc, #192]	; (8002b88 <trajectory+0x520>)
 8002ac8:	f7fd fe6c 	bl	80007a4 <__aeabi_ddiv>
 8002acc:	4602      	mov	r2, r0
 8002ace:	460b      	mov	r3, r1
 8002ad0:	4610      	mov	r0, r2
 8002ad2:	4619      	mov	r1, r3
 8002ad4:	f7fd ffec 	bl	8000ab0 <__aeabi_d2f>
 8002ad8:	4603      	mov	r3, r0
 8002ada:	4a2c      	ldr	r2, [pc, #176]	; (8002b8c <trajectory+0x524>)
 8002adc:	6013      	str	r3, [r2, #0]
		if ((abs(currentPosition - finalAngle) < 2)||(tim >= tF)){
 8002ade:	4b2c      	ldr	r3, [pc, #176]	; (8002b90 <trajectory+0x528>)
 8002ae0:	ed93 7a00 	vldr	s14, [r3]
 8002ae4:	4b2b      	ldr	r3, [pc, #172]	; (8002b94 <trajectory+0x52c>)
 8002ae6:	881b      	ldrh	r3, [r3, #0]
 8002ae8:	ee07 3a90 	vmov	s15, r3
 8002aec:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002af0:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002af4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002af8:	ee17 3a90 	vmov	r3, s15
 8002afc:	f1b3 3fff 	cmp.w	r3, #4294967295
 8002b00:	db10      	blt.n	8002b24 <trajectory+0x4bc>
 8002b02:	4b23      	ldr	r3, [pc, #140]	; (8002b90 <trajectory+0x528>)
 8002b04:	ed93 7a00 	vldr	s14, [r3]
 8002b08:	4b22      	ldr	r3, [pc, #136]	; (8002b94 <trajectory+0x52c>)
 8002b0a:	881b      	ldrh	r3, [r3, #0]
 8002b0c:	ee07 3a90 	vmov	s15, r3
 8002b10:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002b14:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002b18:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b1c:	ee17 3a90 	vmov	r3, s15
 8002b20:	2b01      	cmp	r3, #1
 8002b22:	dd0a      	ble.n	8002b3a <trajectory+0x4d2>
 8002b24:	4b17      	ldr	r3, [pc, #92]	; (8002b84 <trajectory+0x51c>)
 8002b26:	ed93 7a00 	vldr	s14, [r3]
 8002b2a:	4b1b      	ldr	r3, [pc, #108]	; (8002b98 <trajectory+0x530>)
 8002b2c:	edd3 7a00 	vldr	s15, [r3]
 8002b30:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b34:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b38:	db14      	blt.n	8002b64 <trajectory+0x4fc>
			start = 0;
 8002b3a:	4b18      	ldr	r3, [pc, #96]	; (8002b9c <trajectory+0x534>)
 8002b3c:	2200      	movs	r2, #0
 8002b3e:	701a      	strb	r2, [r3, #0]
			velocity = 0;
 8002b40:	4b17      	ldr	r3, [pc, #92]	; (8002ba0 <trajectory+0x538>)
 8002b42:	f04f 0200 	mov.w	r2, #0
 8002b46:	601a      	str	r2, [r3, #0]
			stopTime = Timestamp;
 8002b48:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002b4c:	f7fe f8c8 	bl	8000ce0 <__aeabi_ul2f>
 8002b50:	4603      	mov	r3, r0
 8002b52:	4a14      	ldr	r2, [pc, #80]	; (8002ba4 <trajectory+0x53c>)
 8002b54:	6013      	str	r3, [r2, #0]
			DynamixelProtocal2(MainMemory, 1,999, &UART2);
 8002b56:	4b14      	ldr	r3, [pc, #80]	; (8002ba8 <trajectory+0x540>)
 8002b58:	f240 32e7 	movw	r2, #999	; 0x3e7
 8002b5c:	2101      	movs	r1, #1
 8002b5e:	4813      	ldr	r0, [pc, #76]	; (8002bac <trajectory+0x544>)
 8002b60:	f7fe ff16 	bl	8001990 <DynamixelProtocal2>
		}
	}
	rawPosition[1] = rawPosition[0];
 8002b64:	4b12      	ldr	r3, [pc, #72]	; (8002bb0 <trajectory+0x548>)
 8002b66:	681b      	ldr	r3, [r3, #0]
 8002b68:	4a11      	ldr	r2, [pc, #68]	; (8002bb0 <trajectory+0x548>)
 8002b6a:	6053      	str	r3, [r2, #4]
}
 8002b6c:	bf00      	nop
 8002b6e:	3708      	adds	r7, #8
 8002b70:	46bd      	mov	sp, r7
 8002b72:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002b76:	bf00      	nop
 8002b78:	51eb851f 	.word	0x51eb851f
 8002b7c:	40091eb8 	.word	0x40091eb8
 8002b80:	20000394 	.word	0x20000394
 8002b84:	20000334 	.word	0x20000334
 8002b88:	40768000 	.word	0x40768000
 8002b8c:	20000330 	.word	0x20000330
 8002b90:	20000348 	.word	0x20000348
 8002b94:	20000004 	.word	0x20000004
 8002b98:	20000364 	.word	0x20000364
 8002b9c:	20000356 	.word	0x20000356
 8002ba0:	20000328 	.word	0x20000328
 8002ba4:	20000340 	.word	0x20000340
 8002ba8:	200000b4 	.word	0x200000b4
 8002bac:	200000cc 	.word	0x200000cc
 8002bb0:	2000034c 	.word	0x2000034c

08002bb4 <piVelocity>:
		integralP = 0;
		derivativeP = 0;
	}
}

void piVelocity(){
 8002bb4:	b580      	push	{r7, lr}
 8002bb6:	af00      	add	r7, sp, #0
	static float error = 0;
	static float integral = 0;
	static float derivative = 0;
	if (velocity == 0){
 8002bb8:	4b58      	ldr	r3, [pc, #352]	; (8002d1c <piVelocity+0x168>)
 8002bba:	edd3 7a00 	vldr	s15, [r3]
 8002bbe:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002bc2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002bc6:	d10f      	bne.n	8002be8 <piVelocity+0x34>
		PWMOut = 0;
 8002bc8:	4b55      	ldr	r3, [pc, #340]	; (8002d20 <piVelocity+0x16c>)
 8002bca:	2200      	movs	r2, #0
 8002bcc:	601a      	str	r2, [r3, #0]
		error = 0;
 8002bce:	4b55      	ldr	r3, [pc, #340]	; (8002d24 <piVelocity+0x170>)
 8002bd0:	f04f 0200 	mov.w	r2, #0
 8002bd4:	601a      	str	r2, [r3, #0]
		integral = 0;
 8002bd6:	4b54      	ldr	r3, [pc, #336]	; (8002d28 <piVelocity+0x174>)
 8002bd8:	f04f 0200 	mov.w	r2, #0
 8002bdc:	601a      	str	r2, [r3, #0]
		derivative = 0;
 8002bde:	4b53      	ldr	r3, [pc, #332]	; (8002d2c <piVelocity+0x178>)
 8002be0:	f04f 0200 	mov.w	r2, #0
 8002be4:	601a      	str	r2, [r3, #0]
 8002be6:	e057      	b.n	8002c98 <piVelocity+0xe4>
	}
	else{

		error = abs(velocity) - abs(EncoderVel);
 8002be8:	4b4c      	ldr	r3, [pc, #304]	; (8002d1c <piVelocity+0x168>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002bf2:	ee17 3a90 	vmov	r3, s15
 8002bf6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002bfa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002bfe:	4b4c      	ldr	r3, [pc, #304]	; (8002d30 <piVelocity+0x17c>)
 8002c00:	edd3 7a00 	vldr	s15, [r3]
 8002c04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c08:	ee17 3a90 	vmov	r3, s15
 8002c0c:	2b00      	cmp	r3, #0
 8002c0e:	bfb8      	it	lt
 8002c10:	425b      	neglt	r3, r3
 8002c12:	1ad3      	subs	r3, r2, r3
 8002c14:	ee07 3a90 	vmov	s15, r3
 8002c18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002c1c:	4b41      	ldr	r3, [pc, #260]	; (8002d24 <piVelocity+0x170>)
 8002c1e:	edc3 7a00 	vstr	s15, [r3]
		integral = integral+error;
 8002c22:	4b41      	ldr	r3, [pc, #260]	; (8002d28 <piVelocity+0x174>)
 8002c24:	ed93 7a00 	vldr	s14, [r3]
 8002c28:	4b3e      	ldr	r3, [pc, #248]	; (8002d24 <piVelocity+0x170>)
 8002c2a:	edd3 7a00 	vldr	s15, [r3]
 8002c2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c32:	4b3d      	ldr	r3, [pc, #244]	; (8002d28 <piVelocity+0x174>)
 8002c34:	edc3 7a00 	vstr	s15, [r3]
		PWMOut = K + Kp*error + Ki*integral +Kd*(error-derivative);
 8002c38:	4b3e      	ldr	r3, [pc, #248]	; (8002d34 <piVelocity+0x180>)
 8002c3a:	ed93 7a00 	vldr	s14, [r3]
 8002c3e:	4b39      	ldr	r3, [pc, #228]	; (8002d24 <piVelocity+0x170>)
 8002c40:	edd3 7a00 	vldr	s15, [r3]
 8002c44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c48:	4b3b      	ldr	r3, [pc, #236]	; (8002d38 <piVelocity+0x184>)
 8002c4a:	edd3 7a00 	vldr	s15, [r3]
 8002c4e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c52:	4b3a      	ldr	r3, [pc, #232]	; (8002d3c <piVelocity+0x188>)
 8002c54:	edd3 6a00 	vldr	s13, [r3]
 8002c58:	4b33      	ldr	r3, [pc, #204]	; (8002d28 <piVelocity+0x174>)
 8002c5a:	edd3 7a00 	vldr	s15, [r3]
 8002c5e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c62:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c66:	4b2f      	ldr	r3, [pc, #188]	; (8002d24 <piVelocity+0x170>)
 8002c68:	edd3 6a00 	vldr	s13, [r3]
 8002c6c:	4b2f      	ldr	r3, [pc, #188]	; (8002d2c <piVelocity+0x178>)
 8002c6e:	edd3 7a00 	vldr	s15, [r3]
 8002c72:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c76:	4b32      	ldr	r3, [pc, #200]	; (8002d40 <piVelocity+0x18c>)
 8002c78:	edd3 7a00 	vldr	s15, [r3]
 8002c7c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c80:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c84:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c88:	ee17 2a90 	vmov	r2, s15
 8002c8c:	4b24      	ldr	r3, [pc, #144]	; (8002d20 <piVelocity+0x16c>)
 8002c8e:	601a      	str	r2, [r3, #0]
		derivative = error;
 8002c90:	4b24      	ldr	r3, [pc, #144]	; (8002d24 <piVelocity+0x170>)
 8002c92:	681b      	ldr	r3, [r3, #0]
 8002c94:	4a25      	ldr	r2, [pc, #148]	; (8002d2c <piVelocity+0x178>)
 8002c96:	6013      	str	r3, [r2, #0]
	}
	if (abs(PWMOut) > 10000){
 8002c98:	4b21      	ldr	r3, [pc, #132]	; (8002d20 <piVelocity+0x16c>)
 8002c9a:	681b      	ldr	r3, [r3, #0]
 8002c9c:	2b00      	cmp	r3, #0
 8002c9e:	bfb8      	it	lt
 8002ca0:	425b      	neglt	r3, r3
 8002ca2:	f242 7210 	movw	r2, #10000	; 0x2710
 8002ca6:	4293      	cmp	r3, r2
 8002ca8:	dd03      	ble.n	8002cb2 <piVelocity+0xfe>
		PWMOut = 10000;
 8002caa:	4b1d      	ldr	r3, [pc, #116]	; (8002d20 <piVelocity+0x16c>)
 8002cac:	f242 7210 	movw	r2, #10000	; 0x2710
 8002cb0:	601a      	str	r2, [r3, #0]
	}
	if(velocity < 0){
 8002cb2:	4b1a      	ldr	r3, [pc, #104]	; (8002d1c <piVelocity+0x168>)
 8002cb4:	edd3 7a00 	vldr	s15, [r3]
 8002cb8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cbc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cc0:	d50a      	bpl.n	8002cd8 <piVelocity+0x124>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8002cc2:	2201      	movs	r2, #1
 8002cc4:	2110      	movs	r1, #16
 8002cc6:	481f      	ldr	r0, [pc, #124]	; (8002d44 <piVelocity+0x190>)
 8002cc8:	f001 ff28 	bl	8004b1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8002ccc:	2200      	movs	r2, #0
 8002cce:	2120      	movs	r1, #32
 8002cd0:	481c      	ldr	r0, [pc, #112]	; (8002d44 <piVelocity+0x190>)
 8002cd2:	f001 ff23 	bl	8004b1c <HAL_GPIO_WritePin>
 8002cd6:	e011      	b.n	8002cfc <piVelocity+0x148>
	}
	else if (velocity > 0){
 8002cd8:	4b10      	ldr	r3, [pc, #64]	; (8002d1c <piVelocity+0x168>)
 8002cda:	edd3 7a00 	vldr	s15, [r3]
 8002cde:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002ce2:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ce6:	dd09      	ble.n	8002cfc <piVelocity+0x148>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 8002ce8:	2201      	movs	r2, #1
 8002cea:	2120      	movs	r1, #32
 8002cec:	4815      	ldr	r0, [pc, #84]	; (8002d44 <piVelocity+0x190>)
 8002cee:	f001 ff15 	bl	8004b1c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 8002cf2:	2200      	movs	r2, #0
 8002cf4:	2110      	movs	r1, #16
 8002cf6:	4813      	ldr	r0, [pc, #76]	; (8002d44 <piVelocity+0x190>)
 8002cf8:	f001 ff10 	bl	8004b1c <HAL_GPIO_WritePin>
	}
	htim3.Instance->CCR1 = abs(PWMOut);
 8002cfc:	4b08      	ldr	r3, [pc, #32]	; (8002d20 <piVelocity+0x16c>)
 8002cfe:	681b      	ldr	r3, [r3, #0]
 8002d00:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002d04:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002d08:	4b0f      	ldr	r3, [pc, #60]	; (8002d48 <piVelocity+0x194>)
 8002d0a:	681b      	ldr	r3, [r3, #0]
 8002d0c:	635a      	str	r2, [r3, #52]	; 0x34
	state[1] = state[0];
 8002d0e:	4b0f      	ldr	r3, [pc, #60]	; (8002d4c <piVelocity+0x198>)
 8002d10:	781a      	ldrb	r2, [r3, #0]
 8002d12:	4b0e      	ldr	r3, [pc, #56]	; (8002d4c <piVelocity+0x198>)
 8002d14:	705a      	strb	r2, [r3, #1]
}
 8002d16:	bf00      	nop
 8002d18:	bd80      	pop	{r7, pc}
 8002d1a:	bf00      	nop
 8002d1c:	20000328 	.word	0x20000328
 8002d20:	20000000 	.word	0x20000000
 8002d24:	20000398 	.word	0x20000398
 8002d28:	2000039c 	.word	0x2000039c
 8002d2c:	200003a0 	.word	0x200003a0
 8002d30:	20000324 	.word	0x20000324
 8002d34:	2000000c 	.word	0x2000000c
 8002d38:	20000014 	.word	0x20000014
 8002d3c:	20000010 	.word	0x20000010
 8002d40:	20000360 	.word	0x20000360
 8002d44:	40020400 	.word	0x40020400
 8002d48:	20000498 	.word	0x20000498
 8002d4c:	20000354 	.word	0x20000354

08002d50 <gotoSethome>:
void gotoSethome(){
 8002d50:	b580      	push	{r7, lr}
 8002d52:	af00      	add	r7, sp, #0
	if(SetHome == 1){
 8002d54:	4b13      	ldr	r3, [pc, #76]	; (8002da4 <gotoSethome+0x54>)
 8002d56:	781b      	ldrb	r3, [r3, #0]
 8002d58:	2b00      	cmp	r3, #0
 8002d5a:	d01e      	beq.n	8002d9a <gotoSethome+0x4a>
		if (currentPosition < 70){
 8002d5c:	4b12      	ldr	r3, [pc, #72]	; (8002da8 <gotoSethome+0x58>)
 8002d5e:	edd3 7a00 	vldr	s15, [r3]
 8002d62:	ed9f 7a12 	vldr	s14, [pc, #72]	; 8002dac <gotoSethome+0x5c>
 8002d66:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d6a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d6e:	d503      	bpl.n	8002d78 <gotoSethome+0x28>
			velocity = -1.5;
 8002d70:	4b0f      	ldr	r3, [pc, #60]	; (8002db0 <gotoSethome+0x60>)
 8002d72:	4a10      	ldr	r2, [pc, #64]	; (8002db4 <gotoSethome+0x64>)
 8002d74:	601a      	str	r2, [r3, #0]
 8002d76:	e00d      	b.n	8002d94 <gotoSethome+0x44>
		}
		else if(currentPosition > 70){
 8002d78:	4b0b      	ldr	r3, [pc, #44]	; (8002da8 <gotoSethome+0x58>)
 8002d7a:	edd3 7a00 	vldr	s15, [r3]
 8002d7e:	ed9f 7a0b 	vldr	s14, [pc, #44]	; 8002dac <gotoSethome+0x5c>
 8002d82:	eef4 7ac7 	vcmpe.f32	s15, s14
 8002d86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002d8a:	dd03      	ble.n	8002d94 <gotoSethome+0x44>
			velocity = 1.5;
 8002d8c:	4b08      	ldr	r3, [pc, #32]	; (8002db0 <gotoSethome+0x60>)
 8002d8e:	f04f 527f 	mov.w	r2, #1069547520	; 0x3fc00000
 8002d92:	601a      	str	r2, [r3, #0]
		}
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d94:	2017      	movs	r0, #23
 8002d96:	f001 f904 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
	}
	piVelocity();
 8002d9a:	f7ff ff0b 	bl	8002bb4 <piVelocity>
}
 8002d9e:	bf00      	nop
 8002da0:	bd80      	pop	{r7, pc}
 8002da2:	bf00      	nop
 8002da4:	20000338 	.word	0x20000338
 8002da8:	20000348 	.word	0x20000348
 8002dac:	428c0000 	.word	0x428c0000
 8002db0:	20000328 	.word	0x20000328
 8002db4:	bfc00000 	.word	0xbfc00000

08002db8 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002db8:	b580      	push	{r7, lr}
 8002dba:	b082      	sub	sp, #8
 8002dbc:	af00      	add	r7, sp, #0
 8002dbe:	4603      	mov	r3, r0
 8002dc0:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){
 8002dc2:	88fb      	ldrh	r3, [r7, #6]
 8002dc4:	2b80      	cmp	r3, #128	; 0x80
 8002dc6:	d10c      	bne.n	8002de2 <HAL_GPIO_EXTI_Callback+0x2a>
		cP = 0;
 8002dc8:	4b08      	ldr	r3, [pc, #32]	; (8002dec <HAL_GPIO_EXTI_Callback+0x34>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	701a      	strb	r2, [r3, #0]
		velocity = 0;
 8002dce:	4b08      	ldr	r3, [pc, #32]	; (8002df0 <HAL_GPIO_EXTI_Callback+0x38>)
 8002dd0:	f04f 0200 	mov.w	r2, #0
 8002dd4:	601a      	str	r2, [r3, #0]
		SetHome = 0;
 8002dd6:	4b07      	ldr	r3, [pc, #28]	; (8002df4 <HAL_GPIO_EXTI_Callback+0x3c>)
 8002dd8:	2200      	movs	r2, #0
 8002dda:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002ddc:	2017      	movs	r0, #23
 8002dde:	f001 f8ee 	bl	8003fbe <HAL_NVIC_DisableIRQ>
	}
}
 8002de2:	bf00      	nop
 8002de4:	3708      	adds	r7, #8
 8002de6:	46bd      	mov	sp, r7
 8002de8:	bd80      	pop	{r7, pc}
 8002dea:	bf00      	nop
 8002dec:	20000320 	.word	0x20000320
 8002df0:	20000328 	.word	0x20000328
 8002df4:	20000338 	.word	0x20000338

08002df8 <kalman>:

void kalman(){
 8002df8:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002dfc:	af00      	add	r7, sp, #0
	static float P21predictPRE = 0;
	static float P22predictPRE = 0;
	static float errorVel = 0;
	static float delt = 0;

	delt = (float) dt/1000000;
 8002dfe:	4bda      	ldr	r3, [pc, #872]	; (8003168 <kalman+0x370>)
 8002e00:	881b      	ldrh	r3, [r3, #0]
 8002e02:	ee07 3a90 	vmov	s15, r3
 8002e06:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002e0a:	eddf 6ad8 	vldr	s13, [pc, #864]	; 800316c <kalman+0x374>
 8002e0e:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002e12:	4bd7      	ldr	r3, [pc, #860]	; (8003170 <kalman+0x378>)
 8002e14:	edc3 7a00 	vstr	s15, [r3]
	omegaPredict =  (float) omegaPredictPre;
 8002e18:	4bd6      	ldr	r3, [pc, #856]	; (8003174 <kalman+0x37c>)
 8002e1a:	681b      	ldr	r3, [r3, #0]
 8002e1c:	4ad6      	ldr	r2, [pc, #856]	; (8003178 <kalman+0x380>)
 8002e1e:	6013      	str	r3, [r2, #0]
	errorVel = (float) EncoderVelocity_Update() - omegaPredict;
 8002e20:	f7ff fbaa 	bl	8002578 <EncoderVelocity_Update>
 8002e24:	eeb0 7a40 	vmov.f32	s14, s0
 8002e28:	4bd3      	ldr	r3, [pc, #844]	; (8003178 <kalman+0x380>)
 8002e2a:	edd3 7a00 	vldr	s15, [r3]
 8002e2e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002e32:	4bd2      	ldr	r3, [pc, #840]	; (800317c <kalman+0x384>)
 8002e34:	edc3 7a00 	vstr	s15, [r3]

	P11predict = (float) P11predictPRE+delt*P21predictPRE+(pow(Gl,2)*pow(delt,4))/4+(pow(delt,2)*(P12predictPRE+delt*P22predictPRE))/delt;
 8002e38:	4bcd      	ldr	r3, [pc, #820]	; (8003170 <kalman+0x378>)
 8002e3a:	ed93 7a00 	vldr	s14, [r3]
 8002e3e:	4bd0      	ldr	r3, [pc, #832]	; (8003180 <kalman+0x388>)
 8002e40:	edd3 7a00 	vldr	s15, [r3]
 8002e44:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e48:	4bce      	ldr	r3, [pc, #824]	; (8003184 <kalman+0x38c>)
 8002e4a:	edd3 7a00 	vldr	s15, [r3]
 8002e4e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e52:	ee17 0a90 	vmov	r0, s15
 8002e56:	f7fd fb23 	bl	80004a0 <__aeabi_f2d>
 8002e5a:	4604      	mov	r4, r0
 8002e5c:	460d      	mov	r5, r1
 8002e5e:	4bca      	ldr	r3, [pc, #808]	; (8003188 <kalman+0x390>)
 8002e60:	681b      	ldr	r3, [r3, #0]
 8002e62:	4618      	mov	r0, r3
 8002e64:	f7fd fb1c 	bl	80004a0 <__aeabi_f2d>
 8002e68:	4602      	mov	r2, r0
 8002e6a:	460b      	mov	r3, r1
 8002e6c:	ed9f 1bba 	vldr	d1, [pc, #744]	; 8003158 <kalman+0x360>
 8002e70:	ec43 2b10 	vmov	d0, r2, r3
 8002e74:	f006 faf0 	bl	8009458 <pow>
 8002e78:	ec59 8b10 	vmov	r8, r9, d0
 8002e7c:	4bbc      	ldr	r3, [pc, #752]	; (8003170 <kalman+0x378>)
 8002e7e:	681b      	ldr	r3, [r3, #0]
 8002e80:	4618      	mov	r0, r3
 8002e82:	f7fd fb0d 	bl	80004a0 <__aeabi_f2d>
 8002e86:	4602      	mov	r2, r0
 8002e88:	460b      	mov	r3, r1
 8002e8a:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8003160 <kalman+0x368>
 8002e8e:	ec43 2b10 	vmov	d0, r2, r3
 8002e92:	f006 fae1 	bl	8009458 <pow>
 8002e96:	ec53 2b10 	vmov	r2, r3, d0
 8002e9a:	4640      	mov	r0, r8
 8002e9c:	4649      	mov	r1, r9
 8002e9e:	f7fd fb57 	bl	8000550 <__aeabi_dmul>
 8002ea2:	4602      	mov	r2, r0
 8002ea4:	460b      	mov	r3, r1
 8002ea6:	4610      	mov	r0, r2
 8002ea8:	4619      	mov	r1, r3
 8002eaa:	f04f 0200 	mov.w	r2, #0
 8002eae:	4bb7      	ldr	r3, [pc, #732]	; (800318c <kalman+0x394>)
 8002eb0:	f7fd fc78 	bl	80007a4 <__aeabi_ddiv>
 8002eb4:	4602      	mov	r2, r0
 8002eb6:	460b      	mov	r3, r1
 8002eb8:	4620      	mov	r0, r4
 8002eba:	4629      	mov	r1, r5
 8002ebc:	f7fd f992 	bl	80001e4 <__adddf3>
 8002ec0:	4602      	mov	r2, r0
 8002ec2:	460b      	mov	r3, r1
 8002ec4:	4614      	mov	r4, r2
 8002ec6:	461d      	mov	r5, r3
 8002ec8:	4ba9      	ldr	r3, [pc, #676]	; (8003170 <kalman+0x378>)
 8002eca:	681b      	ldr	r3, [r3, #0]
 8002ecc:	4618      	mov	r0, r3
 8002ece:	f7fd fae7 	bl	80004a0 <__aeabi_f2d>
 8002ed2:	4602      	mov	r2, r0
 8002ed4:	460b      	mov	r3, r1
 8002ed6:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 8003158 <kalman+0x360>
 8002eda:	ec43 2b10 	vmov	d0, r2, r3
 8002ede:	f006 fabb 	bl	8009458 <pow>
 8002ee2:	ec59 8b10 	vmov	r8, r9, d0
 8002ee6:	4ba2      	ldr	r3, [pc, #648]	; (8003170 <kalman+0x378>)
 8002ee8:	ed93 7a00 	vldr	s14, [r3]
 8002eec:	4ba8      	ldr	r3, [pc, #672]	; (8003190 <kalman+0x398>)
 8002eee:	edd3 7a00 	vldr	s15, [r3]
 8002ef2:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002ef6:	4ba7      	ldr	r3, [pc, #668]	; (8003194 <kalman+0x39c>)
 8002ef8:	edd3 7a00 	vldr	s15, [r3]
 8002efc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f00:	ee17 0a90 	vmov	r0, s15
 8002f04:	f7fd facc 	bl	80004a0 <__aeabi_f2d>
 8002f08:	4602      	mov	r2, r0
 8002f0a:	460b      	mov	r3, r1
 8002f0c:	4640      	mov	r0, r8
 8002f0e:	4649      	mov	r1, r9
 8002f10:	f7fd fb1e 	bl	8000550 <__aeabi_dmul>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	4690      	mov	r8, r2
 8002f1a:	4699      	mov	r9, r3
 8002f1c:	4b94      	ldr	r3, [pc, #592]	; (8003170 <kalman+0x378>)
 8002f1e:	681b      	ldr	r3, [r3, #0]
 8002f20:	4618      	mov	r0, r3
 8002f22:	f7fd fabd 	bl	80004a0 <__aeabi_f2d>
 8002f26:	4602      	mov	r2, r0
 8002f28:	460b      	mov	r3, r1
 8002f2a:	4640      	mov	r0, r8
 8002f2c:	4649      	mov	r1, r9
 8002f2e:	f7fd fc39 	bl	80007a4 <__aeabi_ddiv>
 8002f32:	4602      	mov	r2, r0
 8002f34:	460b      	mov	r3, r1
 8002f36:	4620      	mov	r0, r4
 8002f38:	4629      	mov	r1, r5
 8002f3a:	f7fd f953 	bl	80001e4 <__adddf3>
 8002f3e:	4602      	mov	r2, r0
 8002f40:	460b      	mov	r3, r1
 8002f42:	4610      	mov	r0, r2
 8002f44:	4619      	mov	r1, r3
 8002f46:	f7fd fdb3 	bl	8000ab0 <__aeabi_d2f>
 8002f4a:	4603      	mov	r3, r0
 8002f4c:	4a92      	ldr	r2, [pc, #584]	; (8003198 <kalman+0x3a0>)
 8002f4e:	6013      	str	r3, [r2, #0]
	P12predict = (float) P12predictPRE+delt*P22predictPRE+(pow(Gl,2)*delt*pow(delt,2))/2;
 8002f50:	4b87      	ldr	r3, [pc, #540]	; (8003170 <kalman+0x378>)
 8002f52:	ed93 7a00 	vldr	s14, [r3]
 8002f56:	4b8e      	ldr	r3, [pc, #568]	; (8003190 <kalman+0x398>)
 8002f58:	edd3 7a00 	vldr	s15, [r3]
 8002f5c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002f60:	4b8c      	ldr	r3, [pc, #560]	; (8003194 <kalman+0x39c>)
 8002f62:	edd3 7a00 	vldr	s15, [r3]
 8002f66:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002f6a:	ee17 0a90 	vmov	r0, s15
 8002f6e:	f7fd fa97 	bl	80004a0 <__aeabi_f2d>
 8002f72:	4604      	mov	r4, r0
 8002f74:	460d      	mov	r5, r1
 8002f76:	4b84      	ldr	r3, [pc, #528]	; (8003188 <kalman+0x390>)
 8002f78:	681b      	ldr	r3, [r3, #0]
 8002f7a:	4618      	mov	r0, r3
 8002f7c:	f7fd fa90 	bl	80004a0 <__aeabi_f2d>
 8002f80:	4602      	mov	r2, r0
 8002f82:	460b      	mov	r3, r1
 8002f84:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003158 <kalman+0x360>
 8002f88:	ec43 2b10 	vmov	d0, r2, r3
 8002f8c:	f006 fa64 	bl	8009458 <pow>
 8002f90:	ec59 8b10 	vmov	r8, r9, d0
 8002f94:	4b76      	ldr	r3, [pc, #472]	; (8003170 <kalman+0x378>)
 8002f96:	681b      	ldr	r3, [r3, #0]
 8002f98:	4618      	mov	r0, r3
 8002f9a:	f7fd fa81 	bl	80004a0 <__aeabi_f2d>
 8002f9e:	4602      	mov	r2, r0
 8002fa0:	460b      	mov	r3, r1
 8002fa2:	4640      	mov	r0, r8
 8002fa4:	4649      	mov	r1, r9
 8002fa6:	f7fd fad3 	bl	8000550 <__aeabi_dmul>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	4690      	mov	r8, r2
 8002fb0:	4699      	mov	r9, r3
 8002fb2:	4b6f      	ldr	r3, [pc, #444]	; (8003170 <kalman+0x378>)
 8002fb4:	681b      	ldr	r3, [r3, #0]
 8002fb6:	4618      	mov	r0, r3
 8002fb8:	f7fd fa72 	bl	80004a0 <__aeabi_f2d>
 8002fbc:	4602      	mov	r2, r0
 8002fbe:	460b      	mov	r3, r1
 8002fc0:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8003158 <kalman+0x360>
 8002fc4:	ec43 2b10 	vmov	d0, r2, r3
 8002fc8:	f006 fa46 	bl	8009458 <pow>
 8002fcc:	ec53 2b10 	vmov	r2, r3, d0
 8002fd0:	4640      	mov	r0, r8
 8002fd2:	4649      	mov	r1, r9
 8002fd4:	f7fd fabc 	bl	8000550 <__aeabi_dmul>
 8002fd8:	4602      	mov	r2, r0
 8002fda:	460b      	mov	r3, r1
 8002fdc:	4610      	mov	r0, r2
 8002fde:	4619      	mov	r1, r3
 8002fe0:	f04f 0200 	mov.w	r2, #0
 8002fe4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002fe8:	f7fd fbdc 	bl	80007a4 <__aeabi_ddiv>
 8002fec:	4602      	mov	r2, r0
 8002fee:	460b      	mov	r3, r1
 8002ff0:	4620      	mov	r0, r4
 8002ff2:	4629      	mov	r1, r5
 8002ff4:	f7fd f8f6 	bl	80001e4 <__adddf3>
 8002ff8:	4602      	mov	r2, r0
 8002ffa:	460b      	mov	r3, r1
 8002ffc:	4610      	mov	r0, r2
 8002ffe:	4619      	mov	r1, r3
 8003000:	f7fd fd56 	bl	8000ab0 <__aeabi_d2f>
 8003004:	4603      	mov	r3, r0
 8003006:	4a65      	ldr	r2, [pc, #404]	; (800319c <kalman+0x3a4>)
 8003008:	6013      	str	r3, [r2, #0]
	P21predict = (float) (2*delt*P21predictPRE+pow(Gl,2)*pow(delt,4)+2*P22predictPRE*pow(delt,2))/(2*delt);
 800300a:	4b59      	ldr	r3, [pc, #356]	; (8003170 <kalman+0x378>)
 800300c:	edd3 7a00 	vldr	s15, [r3]
 8003010:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8003014:	4b5a      	ldr	r3, [pc, #360]	; (8003180 <kalman+0x388>)
 8003016:	edd3 7a00 	vldr	s15, [r3]
 800301a:	ee67 7a27 	vmul.f32	s15, s14, s15
 800301e:	ee17 0a90 	vmov	r0, s15
 8003022:	f7fd fa3d 	bl	80004a0 <__aeabi_f2d>
 8003026:	4604      	mov	r4, r0
 8003028:	460d      	mov	r5, r1
 800302a:	4b57      	ldr	r3, [pc, #348]	; (8003188 <kalman+0x390>)
 800302c:	681b      	ldr	r3, [r3, #0]
 800302e:	4618      	mov	r0, r3
 8003030:	f7fd fa36 	bl	80004a0 <__aeabi_f2d>
 8003034:	4602      	mov	r2, r0
 8003036:	460b      	mov	r3, r1
 8003038:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8003158 <kalman+0x360>
 800303c:	ec43 2b10 	vmov	d0, r2, r3
 8003040:	f006 fa0a 	bl	8009458 <pow>
 8003044:	ec59 8b10 	vmov	r8, r9, d0
 8003048:	4b49      	ldr	r3, [pc, #292]	; (8003170 <kalman+0x378>)
 800304a:	681b      	ldr	r3, [r3, #0]
 800304c:	4618      	mov	r0, r3
 800304e:	f7fd fa27 	bl	80004a0 <__aeabi_f2d>
 8003052:	4602      	mov	r2, r0
 8003054:	460b      	mov	r3, r1
 8003056:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8003160 <kalman+0x368>
 800305a:	ec43 2b10 	vmov	d0, r2, r3
 800305e:	f006 f9fb 	bl	8009458 <pow>
 8003062:	ec53 2b10 	vmov	r2, r3, d0
 8003066:	4640      	mov	r0, r8
 8003068:	4649      	mov	r1, r9
 800306a:	f7fd fa71 	bl	8000550 <__aeabi_dmul>
 800306e:	4602      	mov	r2, r0
 8003070:	460b      	mov	r3, r1
 8003072:	4620      	mov	r0, r4
 8003074:	4629      	mov	r1, r5
 8003076:	f7fd f8b5 	bl	80001e4 <__adddf3>
 800307a:	4602      	mov	r2, r0
 800307c:	460b      	mov	r3, r1
 800307e:	4690      	mov	r8, r2
 8003080:	4699      	mov	r9, r3
 8003082:	4b43      	ldr	r3, [pc, #268]	; (8003190 <kalman+0x398>)
 8003084:	edd3 7a00 	vldr	s15, [r3]
 8003088:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800308c:	ee17 0a90 	vmov	r0, s15
 8003090:	f7fd fa06 	bl	80004a0 <__aeabi_f2d>
 8003094:	4604      	mov	r4, r0
 8003096:	460d      	mov	r5, r1
 8003098:	4b35      	ldr	r3, [pc, #212]	; (8003170 <kalman+0x378>)
 800309a:	681b      	ldr	r3, [r3, #0]
 800309c:	4618      	mov	r0, r3
 800309e:	f7fd f9ff 	bl	80004a0 <__aeabi_f2d>
 80030a2:	4602      	mov	r2, r0
 80030a4:	460b      	mov	r3, r1
 80030a6:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8003158 <kalman+0x360>
 80030aa:	ec43 2b10 	vmov	d0, r2, r3
 80030ae:	f006 f9d3 	bl	8009458 <pow>
 80030b2:	ec53 2b10 	vmov	r2, r3, d0
 80030b6:	4620      	mov	r0, r4
 80030b8:	4629      	mov	r1, r5
 80030ba:	f7fd fa49 	bl	8000550 <__aeabi_dmul>
 80030be:	4602      	mov	r2, r0
 80030c0:	460b      	mov	r3, r1
 80030c2:	4640      	mov	r0, r8
 80030c4:	4649      	mov	r1, r9
 80030c6:	f7fd f88d 	bl	80001e4 <__adddf3>
 80030ca:	4602      	mov	r2, r0
 80030cc:	460b      	mov	r3, r1
 80030ce:	4610      	mov	r0, r2
 80030d0:	4619      	mov	r1, r3
 80030d2:	f7fd fced 	bl	8000ab0 <__aeabi_d2f>
 80030d6:	ee06 0a90 	vmov	s13, r0
 80030da:	4b25      	ldr	r3, [pc, #148]	; (8003170 <kalman+0x378>)
 80030dc:	edd3 7a00 	vldr	s15, [r3]
 80030e0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80030e4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80030e8:	4b2d      	ldr	r3, [pc, #180]	; (80031a0 <kalman+0x3a8>)
 80030ea:	edc3 7a00 	vstr	s15, [r3]
	P22predict = (float) pow(Gl,2)*pow(delt,2) +P22predictPRE;
 80030ee:	4b26      	ldr	r3, [pc, #152]	; (8003188 <kalman+0x390>)
 80030f0:	681b      	ldr	r3, [r3, #0]
 80030f2:	4618      	mov	r0, r3
 80030f4:	f7fd f9d4 	bl	80004a0 <__aeabi_f2d>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8003158 <kalman+0x360>
 8003100:	ec43 2b10 	vmov	d0, r2, r3
 8003104:	f006 f9a8 	bl	8009458 <pow>
 8003108:	ec53 2b10 	vmov	r2, r3, d0
 800310c:	4610      	mov	r0, r2
 800310e:	4619      	mov	r1, r3
 8003110:	f7fd fcce 	bl	8000ab0 <__aeabi_d2f>
 8003114:	4603      	mov	r3, r0
 8003116:	4618      	mov	r0, r3
 8003118:	f7fd f9c2 	bl	80004a0 <__aeabi_f2d>
 800311c:	4604      	mov	r4, r0
 800311e:	460d      	mov	r5, r1
 8003120:	4b13      	ldr	r3, [pc, #76]	; (8003170 <kalman+0x378>)
 8003122:	681b      	ldr	r3, [r3, #0]
 8003124:	4618      	mov	r0, r3
 8003126:	f7fd f9bb 	bl	80004a0 <__aeabi_f2d>
 800312a:	4602      	mov	r2, r0
 800312c:	460b      	mov	r3, r1
 800312e:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8003158 <kalman+0x360>
 8003132:	ec43 2b10 	vmov	d0, r2, r3
 8003136:	f006 f98f 	bl	8009458 <pow>
 800313a:	ec53 2b10 	vmov	r2, r3, d0
 800313e:	4620      	mov	r0, r4
 8003140:	4629      	mov	r1, r5
 8003142:	f7fd fa05 	bl	8000550 <__aeabi_dmul>
 8003146:	4602      	mov	r2, r0
 8003148:	460b      	mov	r3, r1
 800314a:	4614      	mov	r4, r2
 800314c:	461d      	mov	r5, r3
 800314e:	4b10      	ldr	r3, [pc, #64]	; (8003190 <kalman+0x398>)
 8003150:	681b      	ldr	r3, [r3, #0]
 8003152:	4618      	mov	r0, r3
 8003154:	e026      	b.n	80031a4 <kalman+0x3ac>
 8003156:	bf00      	nop
 8003158:	00000000 	.word	0x00000000
 800315c:	40000000 	.word	0x40000000
 8003160:	00000000 	.word	0x00000000
 8003164:	40100000 	.word	0x40100000
 8003168:	20000006 	.word	0x20000006
 800316c:	49742400 	.word	0x49742400
 8003170:	200003a4 	.word	0x200003a4
 8003174:	200003a8 	.word	0x200003a8
 8003178:	200003ac 	.word	0x200003ac
 800317c:	200003b0 	.word	0x200003b0
 8003180:	200003b4 	.word	0x200003b4
 8003184:	200003b8 	.word	0x200003b8
 8003188:	2000001c 	.word	0x2000001c
 800318c:	40100000 	.word	0x40100000
 8003190:	200003bc 	.word	0x200003bc
 8003194:	200003c0 	.word	0x200003c0
 8003198:	200003c4 	.word	0x200003c4
 800319c:	200003c8 	.word	0x200003c8
 80031a0:	200003cc 	.word	0x200003cc
 80031a4:	f7fd f97c 	bl	80004a0 <__aeabi_f2d>
 80031a8:	4602      	mov	r2, r0
 80031aa:	460b      	mov	r3, r1
 80031ac:	4620      	mov	r0, r4
 80031ae:	4629      	mov	r1, r5
 80031b0:	f7fd f818 	bl	80001e4 <__adddf3>
 80031b4:	4602      	mov	r2, r0
 80031b6:	460b      	mov	r3, r1
 80031b8:	4610      	mov	r0, r2
 80031ba:	4619      	mov	r1, r3
 80031bc:	f7fd fc78 	bl	8000ab0 <__aeabi_d2f>
 80031c0:	4603      	mov	r3, r0
 80031c2:	4acb      	ldr	r2, [pc, #812]	; (80034f0 <kalman+0x6f8>)
 80031c4:	6013      	str	r3, [r2, #0]

	omega = (float) omegaPredict + (P22predict*errorVel)/(pow(R,2)+P22predict);
 80031c6:	4bcb      	ldr	r3, [pc, #812]	; (80034f4 <kalman+0x6fc>)
 80031c8:	681b      	ldr	r3, [r3, #0]
 80031ca:	4618      	mov	r0, r3
 80031cc:	f7fd f968 	bl	80004a0 <__aeabi_f2d>
 80031d0:	4604      	mov	r4, r0
 80031d2:	460d      	mov	r5, r1
 80031d4:	4bc6      	ldr	r3, [pc, #792]	; (80034f0 <kalman+0x6f8>)
 80031d6:	ed93 7a00 	vldr	s14, [r3]
 80031da:	4bc7      	ldr	r3, [pc, #796]	; (80034f8 <kalman+0x700>)
 80031dc:	edd3 7a00 	vldr	s15, [r3]
 80031e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031e4:	ee17 0a90 	vmov	r0, s15
 80031e8:	f7fd f95a 	bl	80004a0 <__aeabi_f2d>
 80031ec:	4680      	mov	r8, r0
 80031ee:	4689      	mov	r9, r1
 80031f0:	4bc2      	ldr	r3, [pc, #776]	; (80034fc <kalman+0x704>)
 80031f2:	681b      	ldr	r3, [r3, #0]
 80031f4:	4618      	mov	r0, r3
 80031f6:	f7fd f953 	bl	80004a0 <__aeabi_f2d>
 80031fa:	4602      	mov	r2, r0
 80031fc:	460b      	mov	r3, r1
 80031fe:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 80034e0 <kalman+0x6e8>
 8003202:	ec43 2b10 	vmov	d0, r2, r3
 8003206:	f006 f927 	bl	8009458 <pow>
 800320a:	ec5b ab10 	vmov	sl, fp, d0
 800320e:	4bb8      	ldr	r3, [pc, #736]	; (80034f0 <kalman+0x6f8>)
 8003210:	681b      	ldr	r3, [r3, #0]
 8003212:	4618      	mov	r0, r3
 8003214:	f7fd f944 	bl	80004a0 <__aeabi_f2d>
 8003218:	4602      	mov	r2, r0
 800321a:	460b      	mov	r3, r1
 800321c:	4650      	mov	r0, sl
 800321e:	4659      	mov	r1, fp
 8003220:	f7fc ffe0 	bl	80001e4 <__adddf3>
 8003224:	4602      	mov	r2, r0
 8003226:	460b      	mov	r3, r1
 8003228:	4640      	mov	r0, r8
 800322a:	4649      	mov	r1, r9
 800322c:	f7fd faba 	bl	80007a4 <__aeabi_ddiv>
 8003230:	4602      	mov	r2, r0
 8003232:	460b      	mov	r3, r1
 8003234:	4620      	mov	r0, r4
 8003236:	4629      	mov	r1, r5
 8003238:	f7fc ffd4 	bl	80001e4 <__adddf3>
 800323c:	4602      	mov	r2, r0
 800323e:	460b      	mov	r3, r1
 8003240:	4610      	mov	r0, r2
 8003242:	4619      	mov	r1, r3
 8003244:	f7fd fc34 	bl	8000ab0 <__aeabi_d2f>
 8003248:	4603      	mov	r3, r0
 800324a:	4aad      	ldr	r2, [pc, #692]	; (8003500 <kalman+0x708>)
 800324c:	6013      	str	r3, [r2, #0]
	P11predictPRE = (float) P11predict - (P12predict*P21predict)/(pow(R,2)+P22predict);
 800324e:	4bad      	ldr	r3, [pc, #692]	; (8003504 <kalman+0x70c>)
 8003250:	681b      	ldr	r3, [r3, #0]
 8003252:	4618      	mov	r0, r3
 8003254:	f7fd f924 	bl	80004a0 <__aeabi_f2d>
 8003258:	4604      	mov	r4, r0
 800325a:	460d      	mov	r5, r1
 800325c:	4baa      	ldr	r3, [pc, #680]	; (8003508 <kalman+0x710>)
 800325e:	ed93 7a00 	vldr	s14, [r3]
 8003262:	4baa      	ldr	r3, [pc, #680]	; (800350c <kalman+0x714>)
 8003264:	edd3 7a00 	vldr	s15, [r3]
 8003268:	ee67 7a27 	vmul.f32	s15, s14, s15
 800326c:	ee17 0a90 	vmov	r0, s15
 8003270:	f7fd f916 	bl	80004a0 <__aeabi_f2d>
 8003274:	4680      	mov	r8, r0
 8003276:	4689      	mov	r9, r1
 8003278:	4ba0      	ldr	r3, [pc, #640]	; (80034fc <kalman+0x704>)
 800327a:	681b      	ldr	r3, [r3, #0]
 800327c:	4618      	mov	r0, r3
 800327e:	f7fd f90f 	bl	80004a0 <__aeabi_f2d>
 8003282:	4602      	mov	r2, r0
 8003284:	460b      	mov	r3, r1
 8003286:	ed9f 1b96 	vldr	d1, [pc, #600]	; 80034e0 <kalman+0x6e8>
 800328a:	ec43 2b10 	vmov	d0, r2, r3
 800328e:	f006 f8e3 	bl	8009458 <pow>
 8003292:	ec5b ab10 	vmov	sl, fp, d0
 8003296:	4b96      	ldr	r3, [pc, #600]	; (80034f0 <kalman+0x6f8>)
 8003298:	681b      	ldr	r3, [r3, #0]
 800329a:	4618      	mov	r0, r3
 800329c:	f7fd f900 	bl	80004a0 <__aeabi_f2d>
 80032a0:	4602      	mov	r2, r0
 80032a2:	460b      	mov	r3, r1
 80032a4:	4650      	mov	r0, sl
 80032a6:	4659      	mov	r1, fp
 80032a8:	f7fc ff9c 	bl	80001e4 <__adddf3>
 80032ac:	4602      	mov	r2, r0
 80032ae:	460b      	mov	r3, r1
 80032b0:	4640      	mov	r0, r8
 80032b2:	4649      	mov	r1, r9
 80032b4:	f7fd fa76 	bl	80007a4 <__aeabi_ddiv>
 80032b8:	4602      	mov	r2, r0
 80032ba:	460b      	mov	r3, r1
 80032bc:	4620      	mov	r0, r4
 80032be:	4629      	mov	r1, r5
 80032c0:	f7fc ff8e 	bl	80001e0 <__aeabi_dsub>
 80032c4:	4602      	mov	r2, r0
 80032c6:	460b      	mov	r3, r1
 80032c8:	4610      	mov	r0, r2
 80032ca:	4619      	mov	r1, r3
 80032cc:	f7fd fbf0 	bl	8000ab0 <__aeabi_d2f>
 80032d0:	4603      	mov	r3, r0
 80032d2:	4a8f      	ldr	r2, [pc, #572]	; (8003510 <kalman+0x718>)
 80032d4:	6013      	str	r3, [r2, #0]
	P12predictPRE = (float) P12predict - (P12predict*P22predict)/(pow(R,2)+P22predict);
 80032d6:	4b8c      	ldr	r3, [pc, #560]	; (8003508 <kalman+0x710>)
 80032d8:	681b      	ldr	r3, [r3, #0]
 80032da:	4618      	mov	r0, r3
 80032dc:	f7fd f8e0 	bl	80004a0 <__aeabi_f2d>
 80032e0:	4604      	mov	r4, r0
 80032e2:	460d      	mov	r5, r1
 80032e4:	4b88      	ldr	r3, [pc, #544]	; (8003508 <kalman+0x710>)
 80032e6:	ed93 7a00 	vldr	s14, [r3]
 80032ea:	4b81      	ldr	r3, [pc, #516]	; (80034f0 <kalman+0x6f8>)
 80032ec:	edd3 7a00 	vldr	s15, [r3]
 80032f0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80032f4:	ee17 0a90 	vmov	r0, s15
 80032f8:	f7fd f8d2 	bl	80004a0 <__aeabi_f2d>
 80032fc:	4680      	mov	r8, r0
 80032fe:	4689      	mov	r9, r1
 8003300:	4b7e      	ldr	r3, [pc, #504]	; (80034fc <kalman+0x704>)
 8003302:	681b      	ldr	r3, [r3, #0]
 8003304:	4618      	mov	r0, r3
 8003306:	f7fd f8cb 	bl	80004a0 <__aeabi_f2d>
 800330a:	4602      	mov	r2, r0
 800330c:	460b      	mov	r3, r1
 800330e:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80034e0 <kalman+0x6e8>
 8003312:	ec43 2b10 	vmov	d0, r2, r3
 8003316:	f006 f89f 	bl	8009458 <pow>
 800331a:	ec5b ab10 	vmov	sl, fp, d0
 800331e:	4b74      	ldr	r3, [pc, #464]	; (80034f0 <kalman+0x6f8>)
 8003320:	681b      	ldr	r3, [r3, #0]
 8003322:	4618      	mov	r0, r3
 8003324:	f7fd f8bc 	bl	80004a0 <__aeabi_f2d>
 8003328:	4602      	mov	r2, r0
 800332a:	460b      	mov	r3, r1
 800332c:	4650      	mov	r0, sl
 800332e:	4659      	mov	r1, fp
 8003330:	f7fc ff58 	bl	80001e4 <__adddf3>
 8003334:	4602      	mov	r2, r0
 8003336:	460b      	mov	r3, r1
 8003338:	4640      	mov	r0, r8
 800333a:	4649      	mov	r1, r9
 800333c:	f7fd fa32 	bl	80007a4 <__aeabi_ddiv>
 8003340:	4602      	mov	r2, r0
 8003342:	460b      	mov	r3, r1
 8003344:	4620      	mov	r0, r4
 8003346:	4629      	mov	r1, r5
 8003348:	f7fc ff4a 	bl	80001e0 <__aeabi_dsub>
 800334c:	4602      	mov	r2, r0
 800334e:	460b      	mov	r3, r1
 8003350:	4610      	mov	r0, r2
 8003352:	4619      	mov	r1, r3
 8003354:	f7fd fbac 	bl	8000ab0 <__aeabi_d2f>
 8003358:	4603      	mov	r3, r0
 800335a:	4a6e      	ldr	r2, [pc, #440]	; (8003514 <kalman+0x71c>)
 800335c:	6013      	str	r3, [r2, #0]
	P21predictPRE = (float) P21predict*(P22predict/(pow(R,2)+P22predict)-1);
 800335e:	4b6b      	ldr	r3, [pc, #428]	; (800350c <kalman+0x714>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f89c 	bl	80004a0 <__aeabi_f2d>
 8003368:	4604      	mov	r4, r0
 800336a:	460d      	mov	r5, r1
 800336c:	4b60      	ldr	r3, [pc, #384]	; (80034f0 <kalman+0x6f8>)
 800336e:	681b      	ldr	r3, [r3, #0]
 8003370:	4618      	mov	r0, r3
 8003372:	f7fd f895 	bl	80004a0 <__aeabi_f2d>
 8003376:	4680      	mov	r8, r0
 8003378:	4689      	mov	r9, r1
 800337a:	4b60      	ldr	r3, [pc, #384]	; (80034fc <kalman+0x704>)
 800337c:	681b      	ldr	r3, [r3, #0]
 800337e:	4618      	mov	r0, r3
 8003380:	f7fd f88e 	bl	80004a0 <__aeabi_f2d>
 8003384:	4602      	mov	r2, r0
 8003386:	460b      	mov	r3, r1
 8003388:	ed9f 1b55 	vldr	d1, [pc, #340]	; 80034e0 <kalman+0x6e8>
 800338c:	ec43 2b10 	vmov	d0, r2, r3
 8003390:	f006 f862 	bl	8009458 <pow>
 8003394:	ec5b ab10 	vmov	sl, fp, d0
 8003398:	4b55      	ldr	r3, [pc, #340]	; (80034f0 <kalman+0x6f8>)
 800339a:	681b      	ldr	r3, [r3, #0]
 800339c:	4618      	mov	r0, r3
 800339e:	f7fd f87f 	bl	80004a0 <__aeabi_f2d>
 80033a2:	4602      	mov	r2, r0
 80033a4:	460b      	mov	r3, r1
 80033a6:	4650      	mov	r0, sl
 80033a8:	4659      	mov	r1, fp
 80033aa:	f7fc ff1b 	bl	80001e4 <__adddf3>
 80033ae:	4602      	mov	r2, r0
 80033b0:	460b      	mov	r3, r1
 80033b2:	4640      	mov	r0, r8
 80033b4:	4649      	mov	r1, r9
 80033b6:	f7fd f9f5 	bl	80007a4 <__aeabi_ddiv>
 80033ba:	4602      	mov	r2, r0
 80033bc:	460b      	mov	r3, r1
 80033be:	4610      	mov	r0, r2
 80033c0:	4619      	mov	r1, r3
 80033c2:	f04f 0200 	mov.w	r2, #0
 80033c6:	4b54      	ldr	r3, [pc, #336]	; (8003518 <kalman+0x720>)
 80033c8:	f7fc ff0a 	bl	80001e0 <__aeabi_dsub>
 80033cc:	4602      	mov	r2, r0
 80033ce:	460b      	mov	r3, r1
 80033d0:	4620      	mov	r0, r4
 80033d2:	4629      	mov	r1, r5
 80033d4:	f7fd f8bc 	bl	8000550 <__aeabi_dmul>
 80033d8:	4602      	mov	r2, r0
 80033da:	460b      	mov	r3, r1
 80033dc:	4610      	mov	r0, r2
 80033de:	4619      	mov	r1, r3
 80033e0:	f7fd fb66 	bl	8000ab0 <__aeabi_d2f>
 80033e4:	4603      	mov	r3, r0
 80033e6:	4a4d      	ldr	r2, [pc, #308]	; (800351c <kalman+0x724>)
 80033e8:	6013      	str	r3, [r2, #0]
	P22predictPRE = (float) P22predict*(P22predict/(pow(R,2)+P22predict)-1);
 80033ea:	4b41      	ldr	r3, [pc, #260]	; (80034f0 <kalman+0x6f8>)
 80033ec:	681b      	ldr	r3, [r3, #0]
 80033ee:	4618      	mov	r0, r3
 80033f0:	f7fd f856 	bl	80004a0 <__aeabi_f2d>
 80033f4:	4604      	mov	r4, r0
 80033f6:	460d      	mov	r5, r1
 80033f8:	4b3d      	ldr	r3, [pc, #244]	; (80034f0 <kalman+0x6f8>)
 80033fa:	681b      	ldr	r3, [r3, #0]
 80033fc:	4618      	mov	r0, r3
 80033fe:	f7fd f84f 	bl	80004a0 <__aeabi_f2d>
 8003402:	4680      	mov	r8, r0
 8003404:	4689      	mov	r9, r1
 8003406:	4b3d      	ldr	r3, [pc, #244]	; (80034fc <kalman+0x704>)
 8003408:	681b      	ldr	r3, [r3, #0]
 800340a:	4618      	mov	r0, r3
 800340c:	f7fd f848 	bl	80004a0 <__aeabi_f2d>
 8003410:	4602      	mov	r2, r0
 8003412:	460b      	mov	r3, r1
 8003414:	ed9f 1b32 	vldr	d1, [pc, #200]	; 80034e0 <kalman+0x6e8>
 8003418:	ec43 2b10 	vmov	d0, r2, r3
 800341c:	f006 f81c 	bl	8009458 <pow>
 8003420:	ec5b ab10 	vmov	sl, fp, d0
 8003424:	4b32      	ldr	r3, [pc, #200]	; (80034f0 <kalman+0x6f8>)
 8003426:	681b      	ldr	r3, [r3, #0]
 8003428:	4618      	mov	r0, r3
 800342a:	f7fd f839 	bl	80004a0 <__aeabi_f2d>
 800342e:	4602      	mov	r2, r0
 8003430:	460b      	mov	r3, r1
 8003432:	4650      	mov	r0, sl
 8003434:	4659      	mov	r1, fp
 8003436:	f7fc fed5 	bl	80001e4 <__adddf3>
 800343a:	4602      	mov	r2, r0
 800343c:	460b      	mov	r3, r1
 800343e:	4640      	mov	r0, r8
 8003440:	4649      	mov	r1, r9
 8003442:	f7fd f9af 	bl	80007a4 <__aeabi_ddiv>
 8003446:	4602      	mov	r2, r0
 8003448:	460b      	mov	r3, r1
 800344a:	4610      	mov	r0, r2
 800344c:	4619      	mov	r1, r3
 800344e:	f04f 0200 	mov.w	r2, #0
 8003452:	4b31      	ldr	r3, [pc, #196]	; (8003518 <kalman+0x720>)
 8003454:	f7fc fec4 	bl	80001e0 <__aeabi_dsub>
 8003458:	4602      	mov	r2, r0
 800345a:	460b      	mov	r3, r1
 800345c:	4620      	mov	r0, r4
 800345e:	4629      	mov	r1, r5
 8003460:	f7fd f876 	bl	8000550 <__aeabi_dmul>
 8003464:	4602      	mov	r2, r0
 8003466:	460b      	mov	r3, r1
 8003468:	4610      	mov	r0, r2
 800346a:	4619      	mov	r1, r3
 800346c:	f7fd fb20 	bl	8000ab0 <__aeabi_d2f>
 8003470:	4603      	mov	r3, r0
 8003472:	4a2b      	ldr	r2, [pc, #172]	; (8003520 <kalman+0x728>)
 8003474:	6013      	str	r3, [r2, #0]
	omegaPredictPre = omega;
 8003476:	4b22      	ldr	r3, [pc, #136]	; (8003500 <kalman+0x708>)
 8003478:	681b      	ldr	r3, [r3, #0]
 800347a:	4a2a      	ldr	r2, [pc, #168]	; (8003524 <kalman+0x72c>)
 800347c:	6013      	str	r3, [r2, #0]
	EncoderVel = omega/0.10472;
 800347e:	4b20      	ldr	r3, [pc, #128]	; (8003500 <kalman+0x708>)
 8003480:	681b      	ldr	r3, [r3, #0]
 8003482:	4618      	mov	r0, r3
 8003484:	f7fd f80c 	bl	80004a0 <__aeabi_f2d>
 8003488:	a317      	add	r3, pc, #92	; (adr r3, 80034e8 <kalman+0x6f0>)
 800348a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800348e:	f7fd f989 	bl	80007a4 <__aeabi_ddiv>
 8003492:	4602      	mov	r2, r0
 8003494:	460b      	mov	r3, r1
 8003496:	4610      	mov	r0, r2
 8003498:	4619      	mov	r1, r3
 800349a:	f7fd fb09 	bl	8000ab0 <__aeabi_d2f>
 800349e:	4603      	mov	r3, r0
 80034a0:	4a21      	ldr	r2, [pc, #132]	; (8003528 <kalman+0x730>)
 80034a2:	6013      	str	r3, [r2, #0]
	if (velocity == 0){
 80034a4:	4b21      	ldr	r3, [pc, #132]	; (800352c <kalman+0x734>)
 80034a6:	edd3 7a00 	vldr	s15, [r3]
 80034aa:	eef5 7a40 	vcmp.f32	s15, #0.0
 80034ae:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80034b2:	d155      	bne.n	8003560 <kalman+0x768>
		P11predict = 0;
 80034b4:	4b13      	ldr	r3, [pc, #76]	; (8003504 <kalman+0x70c>)
 80034b6:	f04f 0200 	mov.w	r2, #0
 80034ba:	601a      	str	r2, [r3, #0]
		P12predict = 0;
 80034bc:	4b12      	ldr	r3, [pc, #72]	; (8003508 <kalman+0x710>)
 80034be:	f04f 0200 	mov.w	r2, #0
 80034c2:	601a      	str	r2, [r3, #0]
		P21predict = 0;
 80034c4:	4b11      	ldr	r3, [pc, #68]	; (800350c <kalman+0x714>)
 80034c6:	f04f 0200 	mov.w	r2, #0
 80034ca:	601a      	str	r2, [r3, #0]
		P22predict = 0;
 80034cc:	4b08      	ldr	r3, [pc, #32]	; (80034f0 <kalman+0x6f8>)
 80034ce:	f04f 0200 	mov.w	r2, #0
 80034d2:	601a      	str	r2, [r3, #0]
		P11predictPRE = 0;
 80034d4:	4b0e      	ldr	r3, [pc, #56]	; (8003510 <kalman+0x718>)
 80034d6:	f04f 0200 	mov.w	r2, #0
 80034da:	601a      	str	r2, [r3, #0]
 80034dc:	e028      	b.n	8003530 <kalman+0x738>
 80034de:	bf00      	nop
 80034e0:	00000000 	.word	0x00000000
 80034e4:	40000000 	.word	0x40000000
 80034e8:	0f3cb3e5 	.word	0x0f3cb3e5
 80034ec:	3fbaceee 	.word	0x3fbaceee
 80034f0:	200003d0 	.word	0x200003d0
 80034f4:	200003ac 	.word	0x200003ac
 80034f8:	200003b0 	.word	0x200003b0
 80034fc:	20000018 	.word	0x20000018
 8003500:	200003d4 	.word	0x200003d4
 8003504:	200003c4 	.word	0x200003c4
 8003508:	200003c8 	.word	0x200003c8
 800350c:	200003cc 	.word	0x200003cc
 8003510:	200003b8 	.word	0x200003b8
 8003514:	200003c0 	.word	0x200003c0
 8003518:	3ff00000 	.word	0x3ff00000
 800351c:	200003b4 	.word	0x200003b4
 8003520:	200003bc 	.word	0x200003bc
 8003524:	200003a8 	.word	0x200003a8
 8003528:	20000324 	.word	0x20000324
 800352c:	20000328 	.word	0x20000328
		P12predictPRE = 0;
 8003530:	4b0d      	ldr	r3, [pc, #52]	; (8003568 <kalman+0x770>)
 8003532:	f04f 0200 	mov.w	r2, #0
 8003536:	601a      	str	r2, [r3, #0]
		P21predictPRE = 0;
 8003538:	4b0c      	ldr	r3, [pc, #48]	; (800356c <kalman+0x774>)
 800353a:	f04f 0200 	mov.w	r2, #0
 800353e:	601a      	str	r2, [r3, #0]
		P22predictPRE = 0;
 8003540:	4b0b      	ldr	r3, [pc, #44]	; (8003570 <kalman+0x778>)
 8003542:	f04f 0200 	mov.w	r2, #0
 8003546:	601a      	str	r2, [r3, #0]
		omegaPredict = 0;
 8003548:	4b0a      	ldr	r3, [pc, #40]	; (8003574 <kalman+0x77c>)
 800354a:	f04f 0200 	mov.w	r2, #0
 800354e:	601a      	str	r2, [r3, #0]
		omegaPredictPre = 0;
 8003550:	4b09      	ldr	r3, [pc, #36]	; (8003578 <kalman+0x780>)
 8003552:	f04f 0200 	mov.w	r2, #0
 8003556:	601a      	str	r2, [r3, #0]
		errorVel = 0;
 8003558:	4b08      	ldr	r3, [pc, #32]	; (800357c <kalman+0x784>)
 800355a:	f04f 0200 	mov.w	r2, #0
 800355e:	601a      	str	r2, [r3, #0]
	}
}
 8003560:	bf00      	nop
 8003562:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 8003566:	bf00      	nop
 8003568:	200003c0 	.word	0x200003c0
 800356c:	200003b4 	.word	0x200003b4
 8003570:	200003bc 	.word	0x200003bc
 8003574:	200003ac 	.word	0x200003ac
 8003578:	200003a8 	.word	0x200003a8
 800357c:	200003b0 	.word	0x200003b0

08003580 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8003580:	b4b0      	push	{r4, r5, r7}
 8003582:	b083      	sub	sp, #12
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8003588:	687b      	ldr	r3, [r7, #4]
 800358a:	4a09      	ldr	r2, [pc, #36]	; (80035b0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800358c:	4293      	cmp	r3, r2
 800358e:	d109      	bne.n	80035a4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8003590:	4b08      	ldr	r3, [pc, #32]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003592:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003596:	f112 34ff 	adds.w	r4, r2, #4294967295
 800359a:	f143 0500 	adc.w	r5, r3, #0
 800359e:	4b05      	ldr	r3, [pc, #20]	; (80035b4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80035a0:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80035a4:	bf00      	nop
 80035a6:	370c      	adds	r7, #12
 80035a8:	46bd      	mov	sp, r7
 80035aa:	bcb0      	pop	{r4, r5, r7}
 80035ac:	4770      	bx	lr
 80035ae:	bf00      	nop
 80035b0:	200005cc 	.word	0x200005cc
 80035b4:	20000318 	.word	0x20000318

080035b8 <micros>:
uint64_t micros()
{
 80035b8:	b4b0      	push	{r4, r5, r7}
 80035ba:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80035bc:	4b09      	ldr	r3, [pc, #36]	; (80035e4 <micros+0x2c>)
 80035be:	681b      	ldr	r3, [r3, #0]
 80035c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80035c2:	4618      	mov	r0, r3
 80035c4:	f04f 0100 	mov.w	r1, #0
 80035c8:	4b07      	ldr	r3, [pc, #28]	; (80035e8 <micros+0x30>)
 80035ca:	e9d3 2300 	ldrd	r2, r3, [r3]
 80035ce:	1884      	adds	r4, r0, r2
 80035d0:	eb41 0503 	adc.w	r5, r1, r3
 80035d4:	4622      	mov	r2, r4
 80035d6:	462b      	mov	r3, r5
}
 80035d8:	4610      	mov	r0, r2
 80035da:	4619      	mov	r1, r3
 80035dc:	46bd      	mov	sp, r7
 80035de:	bcb0      	pop	{r4, r5, r7}
 80035e0:	4770      	bx	lr
 80035e2:	bf00      	nop
 80035e4:	200005cc 	.word	0x200005cc
 80035e8:	20000318 	.word	0x20000318

080035ec <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80035ec:	b480      	push	{r7}
 80035ee:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 80035f0:	b672      	cpsid	i
}
 80035f2:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 80035f4:	e7fe      	b.n	80035f4 <Error_Handler+0x8>
	...

080035f8 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 80035f8:	b580      	push	{r7, lr}
 80035fa:	b082      	sub	sp, #8
 80035fc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	607b      	str	r3, [r7, #4]
 8003602:	4b10      	ldr	r3, [pc, #64]	; (8003644 <HAL_MspInit+0x4c>)
 8003604:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003606:	4a0f      	ldr	r2, [pc, #60]	; (8003644 <HAL_MspInit+0x4c>)
 8003608:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800360c:	6453      	str	r3, [r2, #68]	; 0x44
 800360e:	4b0d      	ldr	r3, [pc, #52]	; (8003644 <HAL_MspInit+0x4c>)
 8003610:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003612:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003616:	607b      	str	r3, [r7, #4]
 8003618:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800361a:	2300      	movs	r3, #0
 800361c:	603b      	str	r3, [r7, #0]
 800361e:	4b09      	ldr	r3, [pc, #36]	; (8003644 <HAL_MspInit+0x4c>)
 8003620:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003622:	4a08      	ldr	r2, [pc, #32]	; (8003644 <HAL_MspInit+0x4c>)
 8003624:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003628:	6413      	str	r3, [r2, #64]	; 0x40
 800362a:	4b06      	ldr	r3, [pc, #24]	; (8003644 <HAL_MspInit+0x4c>)
 800362c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003632:	603b      	str	r3, [r7, #0]
 8003634:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8003636:	2007      	movs	r0, #7
 8003638:	f000 fc8c 	bl	8003f54 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800363c:	bf00      	nop
 800363e:	3708      	adds	r7, #8
 8003640:	46bd      	mov	sp, r7
 8003642:	bd80      	pop	{r7, pc}
 8003644:	40023800 	.word	0x40023800

08003648 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8003648:	b580      	push	{r7, lr}
 800364a:	b08a      	sub	sp, #40	; 0x28
 800364c:	af00      	add	r7, sp, #0
 800364e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003650:	f107 0314 	add.w	r3, r7, #20
 8003654:	2200      	movs	r2, #0
 8003656:	601a      	str	r2, [r3, #0]
 8003658:	605a      	str	r2, [r3, #4]
 800365a:	609a      	str	r2, [r3, #8]
 800365c:	60da      	str	r2, [r3, #12]
 800365e:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8003660:	687b      	ldr	r3, [r7, #4]
 8003662:	681b      	ldr	r3, [r3, #0]
 8003664:	4a21      	ldr	r2, [pc, #132]	; (80036ec <HAL_I2C_MspInit+0xa4>)
 8003666:	4293      	cmp	r3, r2
 8003668:	d13c      	bne.n	80036e4 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 800366a:	2300      	movs	r3, #0
 800366c:	613b      	str	r3, [r7, #16]
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_I2C_MspInit+0xa8>)
 8003670:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003672:	4a1f      	ldr	r2, [pc, #124]	; (80036f0 <HAL_I2C_MspInit+0xa8>)
 8003674:	f043 0302 	orr.w	r3, r3, #2
 8003678:	6313      	str	r3, [r2, #48]	; 0x30
 800367a:	4b1d      	ldr	r3, [pc, #116]	; (80036f0 <HAL_I2C_MspInit+0xa8>)
 800367c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800367e:	f003 0302 	and.w	r3, r3, #2
 8003682:	613b      	str	r3, [r7, #16]
 8003684:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003686:	f44f 7340 	mov.w	r3, #768	; 0x300
 800368a:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 800368c:	2312      	movs	r3, #18
 800368e:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003690:	2301      	movs	r3, #1
 8003692:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003694:	2303      	movs	r3, #3
 8003696:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003698:	2304      	movs	r3, #4
 800369a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800369c:	f107 0314 	add.w	r3, r7, #20
 80036a0:	4619      	mov	r1, r3
 80036a2:	4814      	ldr	r0, [pc, #80]	; (80036f4 <HAL_I2C_MspInit+0xac>)
 80036a4:	f001 f8b6 	bl	8004814 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80036a8:	2300      	movs	r3, #0
 80036aa:	60fb      	str	r3, [r7, #12]
 80036ac:	4b10      	ldr	r3, [pc, #64]	; (80036f0 <HAL_I2C_MspInit+0xa8>)
 80036ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036b0:	4a0f      	ldr	r2, [pc, #60]	; (80036f0 <HAL_I2C_MspInit+0xa8>)
 80036b2:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 80036b6:	6413      	str	r3, [r2, #64]	; 0x40
 80036b8:	4b0d      	ldr	r3, [pc, #52]	; (80036f0 <HAL_I2C_MspInit+0xa8>)
 80036ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036bc:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80036c0:	60fb      	str	r3, [r7, #12]
 80036c2:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 80036c4:	2200      	movs	r2, #0
 80036c6:	2100      	movs	r1, #0
 80036c8:	201f      	movs	r0, #31
 80036ca:	f000 fc4e 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 80036ce:	201f      	movs	r0, #31
 80036d0:	f000 fc67 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 80036d4:	2200      	movs	r2, #0
 80036d6:	2100      	movs	r1, #0
 80036d8:	2020      	movs	r0, #32
 80036da:	f000 fc46 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 80036de:	2020      	movs	r0, #32
 80036e0:	f000 fc5f 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 80036e4:	bf00      	nop
 80036e6:	3728      	adds	r7, #40	; 0x28
 80036e8:	46bd      	mov	sp, r7
 80036ea:	bd80      	pop	{r7, pc}
 80036ec:	40005400 	.word	0x40005400
 80036f0:	40023800 	.word	0x40023800
 80036f4:	40020400 	.word	0x40020400

080036f8 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 80036f8:	b580      	push	{r7, lr}
 80036fa:	b08a      	sub	sp, #40	; 0x28
 80036fc:	af00      	add	r7, sp, #0
 80036fe:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003700:	f107 0314 	add.w	r3, r7, #20
 8003704:	2200      	movs	r2, #0
 8003706:	601a      	str	r2, [r3, #0]
 8003708:	605a      	str	r2, [r3, #4]
 800370a:	609a      	str	r2, [r3, #8]
 800370c:	60da      	str	r2, [r3, #12]
 800370e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003710:	687b      	ldr	r3, [r7, #4]
 8003712:	681b      	ldr	r3, [r3, #0]
 8003714:	4a19      	ldr	r2, [pc, #100]	; (800377c <HAL_TIM_Encoder_MspInit+0x84>)
 8003716:	4293      	cmp	r3, r2
 8003718:	d12c      	bne.n	8003774 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800371a:	2300      	movs	r3, #0
 800371c:	613b      	str	r3, [r7, #16]
 800371e:	4b18      	ldr	r3, [pc, #96]	; (8003780 <HAL_TIM_Encoder_MspInit+0x88>)
 8003720:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003722:	4a17      	ldr	r2, [pc, #92]	; (8003780 <HAL_TIM_Encoder_MspInit+0x88>)
 8003724:	f043 0301 	orr.w	r3, r3, #1
 8003728:	6453      	str	r3, [r2, #68]	; 0x44
 800372a:	4b15      	ldr	r3, [pc, #84]	; (8003780 <HAL_TIM_Encoder_MspInit+0x88>)
 800372c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	613b      	str	r3, [r7, #16]
 8003734:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003736:	2300      	movs	r3, #0
 8003738:	60fb      	str	r3, [r7, #12]
 800373a:	4b11      	ldr	r3, [pc, #68]	; (8003780 <HAL_TIM_Encoder_MspInit+0x88>)
 800373c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800373e:	4a10      	ldr	r2, [pc, #64]	; (8003780 <HAL_TIM_Encoder_MspInit+0x88>)
 8003740:	f043 0301 	orr.w	r3, r3, #1
 8003744:	6313      	str	r3, [r2, #48]	; 0x30
 8003746:	4b0e      	ldr	r3, [pc, #56]	; (8003780 <HAL_TIM_Encoder_MspInit+0x88>)
 8003748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800374a:	f003 0301 	and.w	r3, r3, #1
 800374e:	60fb      	str	r3, [r7, #12]
 8003750:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8003752:	f44f 7340 	mov.w	r3, #768	; 0x300
 8003756:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003758:	2302      	movs	r3, #2
 800375a:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800375c:	2300      	movs	r3, #0
 800375e:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8003760:	2300      	movs	r3, #0
 8003762:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8003764:	2301      	movs	r3, #1
 8003766:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003768:	f107 0314 	add.w	r3, r7, #20
 800376c:	4619      	mov	r1, r3
 800376e:	4805      	ldr	r0, [pc, #20]	; (8003784 <HAL_TIM_Encoder_MspInit+0x8c>)
 8003770:	f001 f850 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8003774:	bf00      	nop
 8003776:	3728      	adds	r7, #40	; 0x28
 8003778:	46bd      	mov	sp, r7
 800377a:	bd80      	pop	{r7, pc}
 800377c:	40010000 	.word	0x40010000
 8003780:	40023800 	.word	0x40023800
 8003784:	40020000 	.word	0x40020000

08003788 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8003788:	b580      	push	{r7, lr}
 800378a:	b084      	sub	sp, #16
 800378c:	af00      	add	r7, sp, #0
 800378e:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003798:	d116      	bne.n	80037c8 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800379a:	2300      	movs	r3, #0
 800379c:	60fb      	str	r3, [r7, #12]
 800379e:	4b1a      	ldr	r3, [pc, #104]	; (8003808 <HAL_TIM_Base_MspInit+0x80>)
 80037a0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037a2:	4a19      	ldr	r2, [pc, #100]	; (8003808 <HAL_TIM_Base_MspInit+0x80>)
 80037a4:	f043 0301 	orr.w	r3, r3, #1
 80037a8:	6413      	str	r3, [r2, #64]	; 0x40
 80037aa:	4b17      	ldr	r3, [pc, #92]	; (8003808 <HAL_TIM_Base_MspInit+0x80>)
 80037ac:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037ae:	f003 0301 	and.w	r3, r3, #1
 80037b2:	60fb      	str	r3, [r7, #12]
 80037b4:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 80037b6:	2200      	movs	r2, #0
 80037b8:	2100      	movs	r1, #0
 80037ba:	201c      	movs	r0, #28
 80037bc:	f000 fbd5 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 80037c0:	201c      	movs	r0, #28
 80037c2:	f000 fbee 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 80037c6:	e01a      	b.n	80037fe <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 80037c8:	687b      	ldr	r3, [r7, #4]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	4a0f      	ldr	r2, [pc, #60]	; (800380c <HAL_TIM_Base_MspInit+0x84>)
 80037ce:	4293      	cmp	r3, r2
 80037d0:	d115      	bne.n	80037fe <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 80037d2:	2300      	movs	r3, #0
 80037d4:	60bb      	str	r3, [r7, #8]
 80037d6:	4b0c      	ldr	r3, [pc, #48]	; (8003808 <HAL_TIM_Base_MspInit+0x80>)
 80037d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037da:	4a0b      	ldr	r2, [pc, #44]	; (8003808 <HAL_TIM_Base_MspInit+0x80>)
 80037dc:	f043 0302 	orr.w	r3, r3, #2
 80037e0:	6413      	str	r3, [r2, #64]	; 0x40
 80037e2:	4b09      	ldr	r3, [pc, #36]	; (8003808 <HAL_TIM_Base_MspInit+0x80>)
 80037e4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80037e6:	f003 0302 	and.w	r3, r3, #2
 80037ea:	60bb      	str	r3, [r7, #8]
 80037ec:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 80037ee:	2200      	movs	r2, #0
 80037f0:	2100      	movs	r1, #0
 80037f2:	201d      	movs	r0, #29
 80037f4:	f000 fbb9 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 80037f8:	201d      	movs	r0, #29
 80037fa:	f000 fbd2 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
}
 80037fe:	bf00      	nop
 8003800:	3710      	adds	r7, #16
 8003802:	46bd      	mov	sp, r7
 8003804:	bd80      	pop	{r7, pc}
 8003806:	bf00      	nop
 8003808:	40023800 	.word	0x40023800
 800380c:	40000400 	.word	0x40000400

08003810 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003810:	b580      	push	{r7, lr}
 8003812:	b088      	sub	sp, #32
 8003814:	af00      	add	r7, sp, #0
 8003816:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003818:	f107 030c 	add.w	r3, r7, #12
 800381c:	2200      	movs	r2, #0
 800381e:	601a      	str	r2, [r3, #0]
 8003820:	605a      	str	r2, [r3, #4]
 8003822:	609a      	str	r2, [r3, #8]
 8003824:	60da      	str	r2, [r3, #12]
 8003826:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003828:	687b      	ldr	r3, [r7, #4]
 800382a:	681b      	ldr	r3, [r3, #0]
 800382c:	4a12      	ldr	r2, [pc, #72]	; (8003878 <HAL_TIM_MspPostInit+0x68>)
 800382e:	4293      	cmp	r3, r2
 8003830:	d11d      	bne.n	800386e <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003832:	2300      	movs	r3, #0
 8003834:	60bb      	str	r3, [r7, #8]
 8003836:	4b11      	ldr	r3, [pc, #68]	; (800387c <HAL_TIM_MspPostInit+0x6c>)
 8003838:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800383a:	4a10      	ldr	r2, [pc, #64]	; (800387c <HAL_TIM_MspPostInit+0x6c>)
 800383c:	f043 0301 	orr.w	r3, r3, #1
 8003840:	6313      	str	r3, [r2, #48]	; 0x30
 8003842:	4b0e      	ldr	r3, [pc, #56]	; (800387c <HAL_TIM_MspPostInit+0x6c>)
 8003844:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003846:	f003 0301 	and.w	r3, r3, #1
 800384a:	60bb      	str	r3, [r7, #8]
 800384c:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 800384e:	2340      	movs	r3, #64	; 0x40
 8003850:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003852:	2302      	movs	r3, #2
 8003854:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003856:	2300      	movs	r3, #0
 8003858:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800385a:	2300      	movs	r3, #0
 800385c:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 800385e:	2302      	movs	r3, #2
 8003860:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003862:	f107 030c 	add.w	r3, r7, #12
 8003866:	4619      	mov	r1, r3
 8003868:	4805      	ldr	r0, [pc, #20]	; (8003880 <HAL_TIM_MspPostInit+0x70>)
 800386a:	f000 ffd3 	bl	8004814 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 800386e:	bf00      	nop
 8003870:	3720      	adds	r7, #32
 8003872:	46bd      	mov	sp, r7
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	40000400 	.word	0x40000400
 800387c:	40023800 	.word	0x40023800
 8003880:	40020000 	.word	0x40020000

08003884 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8003884:	b580      	push	{r7, lr}
 8003886:	b08c      	sub	sp, #48	; 0x30
 8003888:	af00      	add	r7, sp, #0
 800388a:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 800388c:	f107 031c 	add.w	r3, r7, #28
 8003890:	2200      	movs	r2, #0
 8003892:	601a      	str	r2, [r3, #0]
 8003894:	605a      	str	r2, [r3, #4]
 8003896:	609a      	str	r2, [r3, #8]
 8003898:	60da      	str	r2, [r3, #12]
 800389a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800389c:	687b      	ldr	r3, [r7, #4]
 800389e:	681b      	ldr	r3, [r3, #0]
 80038a0:	4a65      	ldr	r2, [pc, #404]	; (8003a38 <HAL_UART_MspInit+0x1b4>)
 80038a2:	4293      	cmp	r3, r2
 80038a4:	f040 8092 	bne.w	80039cc <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 80038a8:	2300      	movs	r3, #0
 80038aa:	61bb      	str	r3, [r7, #24]
 80038ac:	4b63      	ldr	r3, [pc, #396]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80038ae:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038b0:	4a62      	ldr	r2, [pc, #392]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80038b2:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 80038b6:	6413      	str	r3, [r2, #64]	; 0x40
 80038b8:	4b60      	ldr	r3, [pc, #384]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80038ba:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80038c0:	61bb      	str	r3, [r7, #24]
 80038c2:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80038c4:	2300      	movs	r3, #0
 80038c6:	617b      	str	r3, [r7, #20]
 80038c8:	4b5c      	ldr	r3, [pc, #368]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80038ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038cc:	4a5b      	ldr	r2, [pc, #364]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80038ce:	f043 0301 	orr.w	r3, r3, #1
 80038d2:	6313      	str	r3, [r2, #48]	; 0x30
 80038d4:	4b59      	ldr	r3, [pc, #356]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80038d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80038d8:	f003 0301 	and.w	r3, r3, #1
 80038dc:	617b      	str	r3, [r7, #20]
 80038de:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 80038e0:	230c      	movs	r3, #12
 80038e2:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80038e4:	2302      	movs	r3, #2
 80038e6:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80038e8:	2300      	movs	r3, #0
 80038ea:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80038ec:	2303      	movs	r3, #3
 80038ee:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 80038f0:	2307      	movs	r3, #7
 80038f2:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80038f4:	f107 031c 	add.w	r3, r7, #28
 80038f8:	4619      	mov	r1, r3
 80038fa:	4851      	ldr	r0, [pc, #324]	; (8003a40 <HAL_UART_MspInit+0x1bc>)
 80038fc:	f000 ff8a 	bl	8004814 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003900:	4b50      	ldr	r3, [pc, #320]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003902:	4a51      	ldr	r2, [pc, #324]	; (8003a48 <HAL_UART_MspInit+0x1c4>)
 8003904:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003906:	4b4f      	ldr	r3, [pc, #316]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003908:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800390c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800390e:	4b4d      	ldr	r3, [pc, #308]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003910:	2200      	movs	r2, #0
 8003912:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003914:	4b4b      	ldr	r3, [pc, #300]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003916:	2200      	movs	r2, #0
 8003918:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800391a:	4b4a      	ldr	r3, [pc, #296]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 800391c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003920:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003922:	4b48      	ldr	r3, [pc, #288]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003924:	2200      	movs	r2, #0
 8003926:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003928:	4b46      	ldr	r3, [pc, #280]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 800392a:	2200      	movs	r2, #0
 800392c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800392e:	4b45      	ldr	r3, [pc, #276]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003930:	f44f 7280 	mov.w	r2, #256	; 0x100
 8003934:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8003936:	4b43      	ldr	r3, [pc, #268]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003938:	2200      	movs	r2, #0
 800393a:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 800393c:	4b41      	ldr	r3, [pc, #260]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 800393e:	2200      	movs	r2, #0
 8003940:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8003942:	4840      	ldr	r0, [pc, #256]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003944:	f000 fb56 	bl	8003ff4 <HAL_DMA_Init>
 8003948:	4603      	mov	r3, r0
 800394a:	2b00      	cmp	r3, #0
 800394c:	d001      	beq.n	8003952 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 800394e:	f7ff fe4d 	bl	80035ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8003952:	687b      	ldr	r3, [r7, #4]
 8003954:	4a3b      	ldr	r2, [pc, #236]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 8003956:	639a      	str	r2, [r3, #56]	; 0x38
 8003958:	4a3a      	ldr	r2, [pc, #232]	; (8003a44 <HAL_UART_MspInit+0x1c0>)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 800395e:	4b3b      	ldr	r3, [pc, #236]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 8003960:	4a3b      	ldr	r2, [pc, #236]	; (8003a50 <HAL_UART_MspInit+0x1cc>)
 8003962:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8003964:	4b39      	ldr	r3, [pc, #228]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 8003966:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800396a:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 800396c:	4b37      	ldr	r3, [pc, #220]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 800396e:	2240      	movs	r2, #64	; 0x40
 8003970:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003972:	4b36      	ldr	r3, [pc, #216]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 8003974:	2200      	movs	r2, #0
 8003976:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8003978:	4b34      	ldr	r3, [pc, #208]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 800397a:	f44f 6280 	mov.w	r2, #1024	; 0x400
 800397e:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003980:	4b32      	ldr	r3, [pc, #200]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 8003982:	2200      	movs	r2, #0
 8003984:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003986:	4b31      	ldr	r3, [pc, #196]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 8003988:	2200      	movs	r2, #0
 800398a:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 800398c:	4b2f      	ldr	r3, [pc, #188]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 800398e:	2200      	movs	r2, #0
 8003990:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003992:	4b2e      	ldr	r3, [pc, #184]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 8003994:	2200      	movs	r2, #0
 8003996:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003998:	4b2c      	ldr	r3, [pc, #176]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 800399a:	2200      	movs	r2, #0
 800399c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800399e:	482b      	ldr	r0, [pc, #172]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 80039a0:	f000 fb28 	bl	8003ff4 <HAL_DMA_Init>
 80039a4:	4603      	mov	r3, r0
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d001      	beq.n	80039ae <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 80039aa:	f7ff fe1f 	bl	80035ec <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	4a26      	ldr	r2, [pc, #152]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 80039b2:	635a      	str	r2, [r3, #52]	; 0x34
 80039b4:	4a25      	ldr	r2, [pc, #148]	; (8003a4c <HAL_UART_MspInit+0x1c8>)
 80039b6:	687b      	ldr	r3, [r7, #4]
 80039b8:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 80039ba:	2200      	movs	r2, #0
 80039bc:	2100      	movs	r1, #0
 80039be:	2026      	movs	r0, #38	; 0x26
 80039c0:	f000 fad3 	bl	8003f6a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 80039c4:	2026      	movs	r0, #38	; 0x26
 80039c6:	f000 faec 	bl	8003fa2 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 80039ca:	e030      	b.n	8003a2e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 80039cc:	687b      	ldr	r3, [r7, #4]
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a20      	ldr	r2, [pc, #128]	; (8003a54 <HAL_UART_MspInit+0x1d0>)
 80039d2:	4293      	cmp	r3, r2
 80039d4:	d12b      	bne.n	8003a2e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 80039d6:	2300      	movs	r3, #0
 80039d8:	613b      	str	r3, [r7, #16]
 80039da:	4b18      	ldr	r3, [pc, #96]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80039dc:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039de:	4a17      	ldr	r2, [pc, #92]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80039e0:	f043 0320 	orr.w	r3, r3, #32
 80039e4:	6453      	str	r3, [r2, #68]	; 0x44
 80039e6:	4b15      	ldr	r3, [pc, #84]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80039e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80039ea:	f003 0320 	and.w	r3, r3, #32
 80039ee:	613b      	str	r3, [r7, #16]
 80039f0:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 80039f2:	2300      	movs	r3, #0
 80039f4:	60fb      	str	r3, [r7, #12]
 80039f6:	4b11      	ldr	r3, [pc, #68]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80039f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80039fa:	4a10      	ldr	r2, [pc, #64]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 80039fc:	f043 0304 	orr.w	r3, r3, #4
 8003a00:	6313      	str	r3, [r2, #48]	; 0x30
 8003a02:	4b0e      	ldr	r3, [pc, #56]	; (8003a3c <HAL_UART_MspInit+0x1b8>)
 8003a04:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a06:	f003 0304 	and.w	r3, r3, #4
 8003a0a:	60fb      	str	r3, [r7, #12]
 8003a0c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003a0e:	23c0      	movs	r3, #192	; 0xc0
 8003a10:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003a12:	2302      	movs	r3, #2
 8003a14:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003a16:	2300      	movs	r3, #0
 8003a18:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003a1a:	2303      	movs	r3, #3
 8003a1c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003a1e:	2308      	movs	r3, #8
 8003a20:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003a22:	f107 031c 	add.w	r3, r7, #28
 8003a26:	4619      	mov	r1, r3
 8003a28:	480b      	ldr	r0, [pc, #44]	; (8003a58 <HAL_UART_MspInit+0x1d4>)
 8003a2a:	f000 fef3 	bl	8004814 <HAL_GPIO_Init>
}
 8003a2e:	bf00      	nop
 8003a30:	3730      	adds	r7, #48	; 0x30
 8003a32:	46bd      	mov	sp, r7
 8003a34:	bd80      	pop	{r7, pc}
 8003a36:	bf00      	nop
 8003a38:	40004400 	.word	0x40004400
 8003a3c:	40023800 	.word	0x40023800
 8003a40:	40020000 	.word	0x40020000
 8003a44:	200003e4 	.word	0x200003e4
 8003a48:	40026088 	.word	0x40026088
 8003a4c:	200004e0 	.word	0x200004e0
 8003a50:	400260a0 	.word	0x400260a0
 8003a54:	40011400 	.word	0x40011400
 8003a58:	40020800 	.word	0x40020800

08003a5c <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8003a5c:	b480      	push	{r7}
 8003a5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8003a60:	e7fe      	b.n	8003a60 <NMI_Handler+0x4>

08003a62 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8003a62:	b480      	push	{r7}
 8003a64:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8003a66:	e7fe      	b.n	8003a66 <HardFault_Handler+0x4>

08003a68 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8003a68:	b480      	push	{r7}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8003a6c:	e7fe      	b.n	8003a6c <MemManage_Handler+0x4>

08003a6e <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8003a6e:	b480      	push	{r7}
 8003a70:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8003a72:	e7fe      	b.n	8003a72 <BusFault_Handler+0x4>

08003a74 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8003a74:	b480      	push	{r7}
 8003a76:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8003a78:	e7fe      	b.n	8003a78 <UsageFault_Handler+0x4>

08003a7a <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8003a7a:	b480      	push	{r7}
 8003a7c:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8003a7e:	bf00      	nop
 8003a80:	46bd      	mov	sp, r7
 8003a82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a86:	4770      	bx	lr

08003a88 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8003a88:	b480      	push	{r7}
 8003a8a:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8003a8c:	bf00      	nop
 8003a8e:	46bd      	mov	sp, r7
 8003a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a94:	4770      	bx	lr

08003a96 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003a96:	b480      	push	{r7}
 8003a98:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	46bd      	mov	sp, r7
 8003a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003aa2:	4770      	bx	lr

08003aa4 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003aa8:	f000 f91c 	bl	8003ce4 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003aac:	bf00      	nop
 8003aae:	bd80      	pop	{r7, pc}

08003ab0 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003ab0:	b580      	push	{r7, lr}
 8003ab2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003ab4:	2008      	movs	r0, #8
 8003ab6:	f001 f84b 	bl	8004b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 8003aba:	bf00      	nop
 8003abc:	bd80      	pop	{r7, pc}
	...

08003ac0 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003ac0:	b580      	push	{r7, lr}
 8003ac2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003ac4:	4802      	ldr	r0, [pc, #8]	; (8003ad0 <DMA1_Stream5_IRQHandler+0x10>)
 8003ac6:	f000 fc2d 	bl	8004324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003aca:	bf00      	nop
 8003acc:	bd80      	pop	{r7, pc}
 8003ace:	bf00      	nop
 8003ad0:	200003e4 	.word	0x200003e4

08003ad4 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003ad4:	b580      	push	{r7, lr}
 8003ad6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003ad8:	4802      	ldr	r0, [pc, #8]	; (8003ae4 <DMA1_Stream6_IRQHandler+0x10>)
 8003ada:	f000 fc23 	bl	8004324 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003ade:	bf00      	nop
 8003ae0:	bd80      	pop	{r7, pc}
 8003ae2:	bf00      	nop
 8003ae4:	200004e0 	.word	0x200004e0

08003ae8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003ae8:	b580      	push	{r7, lr}
 8003aea:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003aec:	2080      	movs	r0, #128	; 0x80
 8003aee:	f001 f82f 	bl	8004b50 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003af2:	bf00      	nop
 8003af4:	bd80      	pop	{r7, pc}
	...

08003af8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003af8:	b580      	push	{r7, lr}
 8003afa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003afc:	4802      	ldr	r0, [pc, #8]	; (8003b08 <TIM2_IRQHandler+0x10>)
 8003afe:	f003 fe9d 	bl	800783c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003b02:	bf00      	nop
 8003b04:	bd80      	pop	{r7, pc}
 8003b06:	bf00      	nop
 8003b08:	200005cc 	.word	0x200005cc

08003b0c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003b0c:	b580      	push	{r7, lr}
 8003b0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003b10:	4802      	ldr	r0, [pc, #8]	; (8003b1c <TIM3_IRQHandler+0x10>)
 8003b12:	f003 fe93 	bl	800783c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003b16:	bf00      	nop
 8003b18:	bd80      	pop	{r7, pc}
 8003b1a:	bf00      	nop
 8003b1c:	20000498 	.word	0x20000498

08003b20 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003b20:	b580      	push	{r7, lr}
 8003b22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003b24:	4802      	ldr	r0, [pc, #8]	; (8003b30 <I2C1_EV_IRQHandler+0x10>)
 8003b26:	f001 fa15 	bl	8004f54 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003b2a:	bf00      	nop
 8003b2c:	bd80      	pop	{r7, pc}
 8003b2e:	bf00      	nop
 8003b30:	20000444 	.word	0x20000444

08003b34 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003b34:	b580      	push	{r7, lr}
 8003b36:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003b38:	4802      	ldr	r0, [pc, #8]	; (8003b44 <I2C1_ER_IRQHandler+0x10>)
 8003b3a:	f001 fb78 	bl	800522e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003b3e:	bf00      	nop
 8003b40:	bd80      	pop	{r7, pc}
 8003b42:	bf00      	nop
 8003b44:	20000444 	.word	0x20000444

08003b48 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003b48:	b580      	push	{r7, lr}
 8003b4a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003b4c:	4802      	ldr	r0, [pc, #8]	; (8003b58 <USART2_IRQHandler+0x10>)
 8003b4e:	f004 fd5f 	bl	8008610 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003b52:	bf00      	nop
 8003b54:	bd80      	pop	{r7, pc}
 8003b56:	bf00      	nop
 8003b58:	20000614 	.word	0x20000614

08003b5c <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003b5c:	b580      	push	{r7, lr}
 8003b5e:	b086      	sub	sp, #24
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003b64:	4a14      	ldr	r2, [pc, #80]	; (8003bb8 <_sbrk+0x5c>)
 8003b66:	4b15      	ldr	r3, [pc, #84]	; (8003bbc <_sbrk+0x60>)
 8003b68:	1ad3      	subs	r3, r2, r3
 8003b6a:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003b6c:	697b      	ldr	r3, [r7, #20]
 8003b6e:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003b70:	4b13      	ldr	r3, [pc, #76]	; (8003bc0 <_sbrk+0x64>)
 8003b72:	681b      	ldr	r3, [r3, #0]
 8003b74:	2b00      	cmp	r3, #0
 8003b76:	d102      	bne.n	8003b7e <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003b78:	4b11      	ldr	r3, [pc, #68]	; (8003bc0 <_sbrk+0x64>)
 8003b7a:	4a12      	ldr	r2, [pc, #72]	; (8003bc4 <_sbrk+0x68>)
 8003b7c:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003b7e:	4b10      	ldr	r3, [pc, #64]	; (8003bc0 <_sbrk+0x64>)
 8003b80:	681a      	ldr	r2, [r3, #0]
 8003b82:	687b      	ldr	r3, [r7, #4]
 8003b84:	4413      	add	r3, r2
 8003b86:	693a      	ldr	r2, [r7, #16]
 8003b88:	429a      	cmp	r2, r3
 8003b8a:	d207      	bcs.n	8003b9c <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003b8c:	f005 fb9c 	bl	80092c8 <__errno>
 8003b90:	4603      	mov	r3, r0
 8003b92:	220c      	movs	r2, #12
 8003b94:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003b96:	f04f 33ff 	mov.w	r3, #4294967295
 8003b9a:	e009      	b.n	8003bb0 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003b9c:	4b08      	ldr	r3, [pc, #32]	; (8003bc0 <_sbrk+0x64>)
 8003b9e:	681b      	ldr	r3, [r3, #0]
 8003ba0:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003ba2:	4b07      	ldr	r3, [pc, #28]	; (8003bc0 <_sbrk+0x64>)
 8003ba4:	681a      	ldr	r2, [r3, #0]
 8003ba6:	687b      	ldr	r3, [r7, #4]
 8003ba8:	4413      	add	r3, r2
 8003baa:	4a05      	ldr	r2, [pc, #20]	; (8003bc0 <_sbrk+0x64>)
 8003bac:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003bae:	68fb      	ldr	r3, [r7, #12]
}
 8003bb0:	4618      	mov	r0, r3
 8003bb2:	3718      	adds	r7, #24
 8003bb4:	46bd      	mov	sp, r7
 8003bb6:	bd80      	pop	{r7, pc}
 8003bb8:	20020000 	.word	0x20020000
 8003bbc:	00000400 	.word	0x00000400
 8003bc0:	200003d8 	.word	0x200003d8
 8003bc4:	20000670 	.word	0x20000670

08003bc8 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003bcc:	4b06      	ldr	r3, [pc, #24]	; (8003be8 <SystemInit+0x20>)
 8003bce:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003bd2:	4a05      	ldr	r2, [pc, #20]	; (8003be8 <SystemInit+0x20>)
 8003bd4:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003bd8:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003bdc:	bf00      	nop
 8003bde:	46bd      	mov	sp, r7
 8003be0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003be4:	4770      	bx	lr
 8003be6:	bf00      	nop
 8003be8:	e000ed00 	.word	0xe000ed00

08003bec <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003bec:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003c24 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003bf0:	480d      	ldr	r0, [pc, #52]	; (8003c28 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003bf2:	490e      	ldr	r1, [pc, #56]	; (8003c2c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003bf4:	4a0e      	ldr	r2, [pc, #56]	; (8003c30 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003bf6:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003bf8:	e002      	b.n	8003c00 <LoopCopyDataInit>

08003bfa <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003bfa:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003bfc:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003bfe:	3304      	adds	r3, #4

08003c00 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003c00:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003c02:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003c04:	d3f9      	bcc.n	8003bfa <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003c06:	4a0b      	ldr	r2, [pc, #44]	; (8003c34 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003c08:	4c0b      	ldr	r4, [pc, #44]	; (8003c38 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003c0a:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003c0c:	e001      	b.n	8003c12 <LoopFillZerobss>

08003c0e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003c0e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003c10:	3204      	adds	r2, #4

08003c12 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003c12:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003c14:	d3fb      	bcc.n	8003c0e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003c16:	f7ff ffd7 	bl	8003bc8 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003c1a:	f005 fb5b 	bl	80092d4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003c1e:	f7fd fa21 	bl	8001064 <main>
  bx  lr    
 8003c22:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003c24:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003c28:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003c2c:	20000098 	.word	0x20000098
  ldr r2, =_sidata
 8003c30:	0800a458 	.word	0x0800a458
  ldr r2, =_sbss
 8003c34:	20000098 	.word	0x20000098
  ldr r4, =_ebss
 8003c38:	2000066c 	.word	0x2000066c

08003c3c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003c3c:	e7fe      	b.n	8003c3c <ADC_IRQHandler>
	...

08003c40 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003c40:	b580      	push	{r7, lr}
 8003c42:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003c44:	4b0e      	ldr	r3, [pc, #56]	; (8003c80 <HAL_Init+0x40>)
 8003c46:	681b      	ldr	r3, [r3, #0]
 8003c48:	4a0d      	ldr	r2, [pc, #52]	; (8003c80 <HAL_Init+0x40>)
 8003c4a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003c4e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003c50:	4b0b      	ldr	r3, [pc, #44]	; (8003c80 <HAL_Init+0x40>)
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	4a0a      	ldr	r2, [pc, #40]	; (8003c80 <HAL_Init+0x40>)
 8003c56:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003c5a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003c5c:	4b08      	ldr	r3, [pc, #32]	; (8003c80 <HAL_Init+0x40>)
 8003c5e:	681b      	ldr	r3, [r3, #0]
 8003c60:	4a07      	ldr	r2, [pc, #28]	; (8003c80 <HAL_Init+0x40>)
 8003c62:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003c66:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003c68:	2003      	movs	r0, #3
 8003c6a:	f000 f973 	bl	8003f54 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003c6e:	2000      	movs	r0, #0
 8003c70:	f000 f808 	bl	8003c84 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003c74:	f7ff fcc0 	bl	80035f8 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003c78:	2300      	movs	r3, #0
}
 8003c7a:	4618      	mov	r0, r3
 8003c7c:	bd80      	pop	{r7, pc}
 8003c7e:	bf00      	nop
 8003c80:	40023c00 	.word	0x40023c00

08003c84 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003c84:	b580      	push	{r7, lr}
 8003c86:	b082      	sub	sp, #8
 8003c88:	af00      	add	r7, sp, #0
 8003c8a:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003c8c:	4b12      	ldr	r3, [pc, #72]	; (8003cd8 <HAL_InitTick+0x54>)
 8003c8e:	681a      	ldr	r2, [r3, #0]
 8003c90:	4b12      	ldr	r3, [pc, #72]	; (8003cdc <HAL_InitTick+0x58>)
 8003c92:	781b      	ldrb	r3, [r3, #0]
 8003c94:	4619      	mov	r1, r3
 8003c96:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003c9a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003c9e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003ca2:	4618      	mov	r0, r3
 8003ca4:	f000 f999 	bl	8003fda <HAL_SYSTICK_Config>
 8003ca8:	4603      	mov	r3, r0
 8003caa:	2b00      	cmp	r3, #0
 8003cac:	d001      	beq.n	8003cb2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003cae:	2301      	movs	r3, #1
 8003cb0:	e00e      	b.n	8003cd0 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	2b0f      	cmp	r3, #15
 8003cb6:	d80a      	bhi.n	8003cce <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003cb8:	2200      	movs	r2, #0
 8003cba:	6879      	ldr	r1, [r7, #4]
 8003cbc:	f04f 30ff 	mov.w	r0, #4294967295
 8003cc0:	f000 f953 	bl	8003f6a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003cc4:	4a06      	ldr	r2, [pc, #24]	; (8003ce0 <HAL_InitTick+0x5c>)
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003cca:	2300      	movs	r3, #0
 8003ccc:	e000      	b.n	8003cd0 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003cce:	2301      	movs	r3, #1
}
 8003cd0:	4618      	mov	r0, r3
 8003cd2:	3708      	adds	r7, #8
 8003cd4:	46bd      	mov	sp, r7
 8003cd6:	bd80      	pop	{r7, pc}
 8003cd8:	20000024 	.word	0x20000024
 8003cdc:	2000002c 	.word	0x2000002c
 8003ce0:	20000028 	.word	0x20000028

08003ce4 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003ce4:	b480      	push	{r7}
 8003ce6:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003ce8:	4b06      	ldr	r3, [pc, #24]	; (8003d04 <HAL_IncTick+0x20>)
 8003cea:	781b      	ldrb	r3, [r3, #0]
 8003cec:	461a      	mov	r2, r3
 8003cee:	4b06      	ldr	r3, [pc, #24]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf0:	681b      	ldr	r3, [r3, #0]
 8003cf2:	4413      	add	r3, r2
 8003cf4:	4a04      	ldr	r2, [pc, #16]	; (8003d08 <HAL_IncTick+0x24>)
 8003cf6:	6013      	str	r3, [r2, #0]
}
 8003cf8:	bf00      	nop
 8003cfa:	46bd      	mov	sp, r7
 8003cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d00:	4770      	bx	lr
 8003d02:	bf00      	nop
 8003d04:	2000002c 	.word	0x2000002c
 8003d08:	20000658 	.word	0x20000658

08003d0c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003d0c:	b480      	push	{r7}
 8003d0e:	af00      	add	r7, sp, #0
  return uwTick;
 8003d10:	4b03      	ldr	r3, [pc, #12]	; (8003d20 <HAL_GetTick+0x14>)
 8003d12:	681b      	ldr	r3, [r3, #0]
}
 8003d14:	4618      	mov	r0, r3
 8003d16:	46bd      	mov	sp, r7
 8003d18:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d1c:	4770      	bx	lr
 8003d1e:	bf00      	nop
 8003d20:	20000658 	.word	0x20000658

08003d24 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003d24:	b580      	push	{r7, lr}
 8003d26:	b084      	sub	sp, #16
 8003d28:	af00      	add	r7, sp, #0
 8003d2a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003d2c:	f7ff ffee 	bl	8003d0c <HAL_GetTick>
 8003d30:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003d32:	687b      	ldr	r3, [r7, #4]
 8003d34:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003d36:	68fb      	ldr	r3, [r7, #12]
 8003d38:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003d3c:	d005      	beq.n	8003d4a <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003d3e:	4b0a      	ldr	r3, [pc, #40]	; (8003d68 <HAL_Delay+0x44>)
 8003d40:	781b      	ldrb	r3, [r3, #0]
 8003d42:	461a      	mov	r2, r3
 8003d44:	68fb      	ldr	r3, [r7, #12]
 8003d46:	4413      	add	r3, r2
 8003d48:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003d4a:	bf00      	nop
 8003d4c:	f7ff ffde 	bl	8003d0c <HAL_GetTick>
 8003d50:	4602      	mov	r2, r0
 8003d52:	68bb      	ldr	r3, [r7, #8]
 8003d54:	1ad3      	subs	r3, r2, r3
 8003d56:	68fa      	ldr	r2, [r7, #12]
 8003d58:	429a      	cmp	r2, r3
 8003d5a:	d8f7      	bhi.n	8003d4c <HAL_Delay+0x28>
  {
  }
}
 8003d5c:	bf00      	nop
 8003d5e:	bf00      	nop
 8003d60:	3710      	adds	r7, #16
 8003d62:	46bd      	mov	sp, r7
 8003d64:	bd80      	pop	{r7, pc}
 8003d66:	bf00      	nop
 8003d68:	2000002c 	.word	0x2000002c

08003d6c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003d6c:	b480      	push	{r7}
 8003d6e:	b085      	sub	sp, #20
 8003d70:	af00      	add	r7, sp, #0
 8003d72:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003d74:	687b      	ldr	r3, [r7, #4]
 8003d76:	f003 0307 	and.w	r3, r3, #7
 8003d7a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003d7c:	4b0c      	ldr	r3, [pc, #48]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003d7e:	68db      	ldr	r3, [r3, #12]
 8003d80:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003d82:	68ba      	ldr	r2, [r7, #8]
 8003d84:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003d88:	4013      	ands	r3, r2
 8003d8a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003d8c:	68fb      	ldr	r3, [r7, #12]
 8003d8e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003d90:	68bb      	ldr	r3, [r7, #8]
 8003d92:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003d94:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003d98:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003d9c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003d9e:	4a04      	ldr	r2, [pc, #16]	; (8003db0 <__NVIC_SetPriorityGrouping+0x44>)
 8003da0:	68bb      	ldr	r3, [r7, #8]
 8003da2:	60d3      	str	r3, [r2, #12]
}
 8003da4:	bf00      	nop
 8003da6:	3714      	adds	r7, #20
 8003da8:	46bd      	mov	sp, r7
 8003daa:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dae:	4770      	bx	lr
 8003db0:	e000ed00 	.word	0xe000ed00

08003db4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003db4:	b480      	push	{r7}
 8003db6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003db8:	4b04      	ldr	r3, [pc, #16]	; (8003dcc <__NVIC_GetPriorityGrouping+0x18>)
 8003dba:	68db      	ldr	r3, [r3, #12]
 8003dbc:	0a1b      	lsrs	r3, r3, #8
 8003dbe:	f003 0307 	and.w	r3, r3, #7
}
 8003dc2:	4618      	mov	r0, r3
 8003dc4:	46bd      	mov	sp, r7
 8003dc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003dca:	4770      	bx	lr
 8003dcc:	e000ed00 	.word	0xe000ed00

08003dd0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003dd0:	b480      	push	{r7}
 8003dd2:	b083      	sub	sp, #12
 8003dd4:	af00      	add	r7, sp, #0
 8003dd6:	4603      	mov	r3, r0
 8003dd8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003dda:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dde:	2b00      	cmp	r3, #0
 8003de0:	db0b      	blt.n	8003dfa <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003de2:	79fb      	ldrb	r3, [r7, #7]
 8003de4:	f003 021f 	and.w	r2, r3, #31
 8003de8:	4907      	ldr	r1, [pc, #28]	; (8003e08 <__NVIC_EnableIRQ+0x38>)
 8003dea:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dee:	095b      	lsrs	r3, r3, #5
 8003df0:	2001      	movs	r0, #1
 8003df2:	fa00 f202 	lsl.w	r2, r0, r2
 8003df6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003dfa:	bf00      	nop
 8003dfc:	370c      	adds	r7, #12
 8003dfe:	46bd      	mov	sp, r7
 8003e00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e04:	4770      	bx	lr
 8003e06:	bf00      	nop
 8003e08:	e000e100 	.word	0xe000e100

08003e0c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003e0c:	b480      	push	{r7}
 8003e0e:	b083      	sub	sp, #12
 8003e10:	af00      	add	r7, sp, #0
 8003e12:	4603      	mov	r3, r0
 8003e14:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e16:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e1a:	2b00      	cmp	r3, #0
 8003e1c:	db12      	blt.n	8003e44 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003e1e:	79fb      	ldrb	r3, [r7, #7]
 8003e20:	f003 021f 	and.w	r2, r3, #31
 8003e24:	490a      	ldr	r1, [pc, #40]	; (8003e50 <__NVIC_DisableIRQ+0x44>)
 8003e26:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e2a:	095b      	lsrs	r3, r3, #5
 8003e2c:	2001      	movs	r0, #1
 8003e2e:	fa00 f202 	lsl.w	r2, r0, r2
 8003e32:	3320      	adds	r3, #32
 8003e34:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003e38:	f3bf 8f4f 	dsb	sy
}
 8003e3c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003e3e:	f3bf 8f6f 	isb	sy
}
 8003e42:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003e44:	bf00      	nop
 8003e46:	370c      	adds	r7, #12
 8003e48:	46bd      	mov	sp, r7
 8003e4a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e4e:	4770      	bx	lr
 8003e50:	e000e100 	.word	0xe000e100

08003e54 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003e54:	b480      	push	{r7}
 8003e56:	b083      	sub	sp, #12
 8003e58:	af00      	add	r7, sp, #0
 8003e5a:	4603      	mov	r3, r0
 8003e5c:	6039      	str	r1, [r7, #0]
 8003e5e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003e60:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	db0a      	blt.n	8003e7e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e68:	683b      	ldr	r3, [r7, #0]
 8003e6a:	b2da      	uxtb	r2, r3
 8003e6c:	490c      	ldr	r1, [pc, #48]	; (8003ea0 <__NVIC_SetPriority+0x4c>)
 8003e6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003e72:	0112      	lsls	r2, r2, #4
 8003e74:	b2d2      	uxtb	r2, r2
 8003e76:	440b      	add	r3, r1
 8003e78:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003e7c:	e00a      	b.n	8003e94 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003e7e:	683b      	ldr	r3, [r7, #0]
 8003e80:	b2da      	uxtb	r2, r3
 8003e82:	4908      	ldr	r1, [pc, #32]	; (8003ea4 <__NVIC_SetPriority+0x50>)
 8003e84:	79fb      	ldrb	r3, [r7, #7]
 8003e86:	f003 030f 	and.w	r3, r3, #15
 8003e8a:	3b04      	subs	r3, #4
 8003e8c:	0112      	lsls	r2, r2, #4
 8003e8e:	b2d2      	uxtb	r2, r2
 8003e90:	440b      	add	r3, r1
 8003e92:	761a      	strb	r2, [r3, #24]
}
 8003e94:	bf00      	nop
 8003e96:	370c      	adds	r7, #12
 8003e98:	46bd      	mov	sp, r7
 8003e9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e9e:	4770      	bx	lr
 8003ea0:	e000e100 	.word	0xe000e100
 8003ea4:	e000ed00 	.word	0xe000ed00

08003ea8 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003ea8:	b480      	push	{r7}
 8003eaa:	b089      	sub	sp, #36	; 0x24
 8003eac:	af00      	add	r7, sp, #0
 8003eae:	60f8      	str	r0, [r7, #12]
 8003eb0:	60b9      	str	r1, [r7, #8]
 8003eb2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003eb4:	68fb      	ldr	r3, [r7, #12]
 8003eb6:	f003 0307 	and.w	r3, r3, #7
 8003eba:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003ebc:	69fb      	ldr	r3, [r7, #28]
 8003ebe:	f1c3 0307 	rsb	r3, r3, #7
 8003ec2:	2b04      	cmp	r3, #4
 8003ec4:	bf28      	it	cs
 8003ec6:	2304      	movcs	r3, #4
 8003ec8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003eca:	69fb      	ldr	r3, [r7, #28]
 8003ecc:	3304      	adds	r3, #4
 8003ece:	2b06      	cmp	r3, #6
 8003ed0:	d902      	bls.n	8003ed8 <NVIC_EncodePriority+0x30>
 8003ed2:	69fb      	ldr	r3, [r7, #28]
 8003ed4:	3b03      	subs	r3, #3
 8003ed6:	e000      	b.n	8003eda <NVIC_EncodePriority+0x32>
 8003ed8:	2300      	movs	r3, #0
 8003eda:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003edc:	f04f 32ff 	mov.w	r2, #4294967295
 8003ee0:	69bb      	ldr	r3, [r7, #24]
 8003ee2:	fa02 f303 	lsl.w	r3, r2, r3
 8003ee6:	43da      	mvns	r2, r3
 8003ee8:	68bb      	ldr	r3, [r7, #8]
 8003eea:	401a      	ands	r2, r3
 8003eec:	697b      	ldr	r3, [r7, #20]
 8003eee:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003ef0:	f04f 31ff 	mov.w	r1, #4294967295
 8003ef4:	697b      	ldr	r3, [r7, #20]
 8003ef6:	fa01 f303 	lsl.w	r3, r1, r3
 8003efa:	43d9      	mvns	r1, r3
 8003efc:	687b      	ldr	r3, [r7, #4]
 8003efe:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003f00:	4313      	orrs	r3, r2
         );
}
 8003f02:	4618      	mov	r0, r3
 8003f04:	3724      	adds	r7, #36	; 0x24
 8003f06:	46bd      	mov	sp, r7
 8003f08:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f0c:	4770      	bx	lr
	...

08003f10 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003f10:	b580      	push	{r7, lr}
 8003f12:	b082      	sub	sp, #8
 8003f14:	af00      	add	r7, sp, #0
 8003f16:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	3b01      	subs	r3, #1
 8003f1c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003f20:	d301      	bcc.n	8003f26 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003f22:	2301      	movs	r3, #1
 8003f24:	e00f      	b.n	8003f46 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003f26:	4a0a      	ldr	r2, [pc, #40]	; (8003f50 <SysTick_Config+0x40>)
 8003f28:	687b      	ldr	r3, [r7, #4]
 8003f2a:	3b01      	subs	r3, #1
 8003f2c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003f2e:	210f      	movs	r1, #15
 8003f30:	f04f 30ff 	mov.w	r0, #4294967295
 8003f34:	f7ff ff8e 	bl	8003e54 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003f38:	4b05      	ldr	r3, [pc, #20]	; (8003f50 <SysTick_Config+0x40>)
 8003f3a:	2200      	movs	r2, #0
 8003f3c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003f3e:	4b04      	ldr	r3, [pc, #16]	; (8003f50 <SysTick_Config+0x40>)
 8003f40:	2207      	movs	r2, #7
 8003f42:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003f44:	2300      	movs	r3, #0
}
 8003f46:	4618      	mov	r0, r3
 8003f48:	3708      	adds	r7, #8
 8003f4a:	46bd      	mov	sp, r7
 8003f4c:	bd80      	pop	{r7, pc}
 8003f4e:	bf00      	nop
 8003f50:	e000e010 	.word	0xe000e010

08003f54 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003f54:	b580      	push	{r7, lr}
 8003f56:	b082      	sub	sp, #8
 8003f58:	af00      	add	r7, sp, #0
 8003f5a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003f5c:	6878      	ldr	r0, [r7, #4]
 8003f5e:	f7ff ff05 	bl	8003d6c <__NVIC_SetPriorityGrouping>
}
 8003f62:	bf00      	nop
 8003f64:	3708      	adds	r7, #8
 8003f66:	46bd      	mov	sp, r7
 8003f68:	bd80      	pop	{r7, pc}

08003f6a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003f6a:	b580      	push	{r7, lr}
 8003f6c:	b086      	sub	sp, #24
 8003f6e:	af00      	add	r7, sp, #0
 8003f70:	4603      	mov	r3, r0
 8003f72:	60b9      	str	r1, [r7, #8]
 8003f74:	607a      	str	r2, [r7, #4]
 8003f76:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003f78:	2300      	movs	r3, #0
 8003f7a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003f7c:	f7ff ff1a 	bl	8003db4 <__NVIC_GetPriorityGrouping>
 8003f80:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003f82:	687a      	ldr	r2, [r7, #4]
 8003f84:	68b9      	ldr	r1, [r7, #8]
 8003f86:	6978      	ldr	r0, [r7, #20]
 8003f88:	f7ff ff8e 	bl	8003ea8 <NVIC_EncodePriority>
 8003f8c:	4602      	mov	r2, r0
 8003f8e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003f92:	4611      	mov	r1, r2
 8003f94:	4618      	mov	r0, r3
 8003f96:	f7ff ff5d 	bl	8003e54 <__NVIC_SetPriority>
}
 8003f9a:	bf00      	nop
 8003f9c:	3718      	adds	r7, #24
 8003f9e:	46bd      	mov	sp, r7
 8003fa0:	bd80      	pop	{r7, pc}

08003fa2 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003fa2:	b580      	push	{r7, lr}
 8003fa4:	b082      	sub	sp, #8
 8003fa6:	af00      	add	r7, sp, #0
 8003fa8:	4603      	mov	r3, r0
 8003faa:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003fac:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fb0:	4618      	mov	r0, r3
 8003fb2:	f7ff ff0d 	bl	8003dd0 <__NVIC_EnableIRQ>
}
 8003fb6:	bf00      	nop
 8003fb8:	3708      	adds	r7, #8
 8003fba:	46bd      	mov	sp, r7
 8003fbc:	bd80      	pop	{r7, pc}

08003fbe <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003fbe:	b580      	push	{r7, lr}
 8003fc0:	b082      	sub	sp, #8
 8003fc2:	af00      	add	r7, sp, #0
 8003fc4:	4603      	mov	r3, r0
 8003fc6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003fc8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003fcc:	4618      	mov	r0, r3
 8003fce:	f7ff ff1d 	bl	8003e0c <__NVIC_DisableIRQ>
}
 8003fd2:	bf00      	nop
 8003fd4:	3708      	adds	r7, #8
 8003fd6:	46bd      	mov	sp, r7
 8003fd8:	bd80      	pop	{r7, pc}

08003fda <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003fda:	b580      	push	{r7, lr}
 8003fdc:	b082      	sub	sp, #8
 8003fde:	af00      	add	r7, sp, #0
 8003fe0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003fe2:	6878      	ldr	r0, [r7, #4]
 8003fe4:	f7ff ff94 	bl	8003f10 <SysTick_Config>
 8003fe8:	4603      	mov	r3, r0
}
 8003fea:	4618      	mov	r0, r3
 8003fec:	3708      	adds	r7, #8
 8003fee:	46bd      	mov	sp, r7
 8003ff0:	bd80      	pop	{r7, pc}
	...

08003ff4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003ff4:	b580      	push	{r7, lr}
 8003ff6:	b086      	sub	sp, #24
 8003ff8:	af00      	add	r7, sp, #0
 8003ffa:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003ffc:	2300      	movs	r3, #0
 8003ffe:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8004000:	f7ff fe84 	bl	8003d0c <HAL_GetTick>
 8004004:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8004006:	687b      	ldr	r3, [r7, #4]
 8004008:	2b00      	cmp	r3, #0
 800400a:	d101      	bne.n	8004010 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 800400c:	2301      	movs	r3, #1
 800400e:	e099      	b.n	8004144 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2200      	movs	r2, #0
 8004014:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8004018:	687b      	ldr	r3, [r7, #4]
 800401a:	2202      	movs	r2, #2
 800401c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	681a      	ldr	r2, [r3, #0]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	681b      	ldr	r3, [r3, #0]
 800402a:	f022 0201 	bic.w	r2, r2, #1
 800402e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004030:	e00f      	b.n	8004052 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004032:	f7ff fe6b 	bl	8003d0c <HAL_GetTick>
 8004036:	4602      	mov	r2, r0
 8004038:	693b      	ldr	r3, [r7, #16]
 800403a:	1ad3      	subs	r3, r2, r3
 800403c:	2b05      	cmp	r3, #5
 800403e:	d908      	bls.n	8004052 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004040:	687b      	ldr	r3, [r7, #4]
 8004042:	2220      	movs	r2, #32
 8004044:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2203      	movs	r2, #3
 800404a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800404e:	2303      	movs	r3, #3
 8004050:	e078      	b.n	8004144 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	681b      	ldr	r3, [r3, #0]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	f003 0301 	and.w	r3, r3, #1
 800405c:	2b00      	cmp	r3, #0
 800405e:	d1e8      	bne.n	8004032 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	681b      	ldr	r3, [r3, #0]
 8004066:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8004068:	697a      	ldr	r2, [r7, #20]
 800406a:	4b38      	ldr	r3, [pc, #224]	; (800414c <HAL_DMA_Init+0x158>)
 800406c:	4013      	ands	r3, r2
 800406e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	685a      	ldr	r2, [r3, #4]
 8004074:	687b      	ldr	r3, [r7, #4]
 8004076:	689b      	ldr	r3, [r3, #8]
 8004078:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800407a:	687b      	ldr	r3, [r7, #4]
 800407c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800407e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8004080:	687b      	ldr	r3, [r7, #4]
 8004082:	691b      	ldr	r3, [r3, #16]
 8004084:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004086:	687b      	ldr	r3, [r7, #4]
 8004088:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800408a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	699b      	ldr	r3, [r3, #24]
 8004090:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8004096:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8004098:	687b      	ldr	r3, [r7, #4]
 800409a:	6a1b      	ldr	r3, [r3, #32]
 800409c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800409e:	697a      	ldr	r2, [r7, #20]
 80040a0:	4313      	orrs	r3, r2
 80040a2:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040a8:	2b04      	cmp	r3, #4
 80040aa:	d107      	bne.n	80040bc <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80040b0:	687b      	ldr	r3, [r7, #4]
 80040b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80040b4:	4313      	orrs	r3, r2
 80040b6:	697a      	ldr	r2, [r7, #20]
 80040b8:	4313      	orrs	r3, r2
 80040ba:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80040bc:	687b      	ldr	r3, [r7, #4]
 80040be:	681b      	ldr	r3, [r3, #0]
 80040c0:	697a      	ldr	r2, [r7, #20]
 80040c2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	695b      	ldr	r3, [r3, #20]
 80040ca:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80040cc:	697b      	ldr	r3, [r7, #20]
 80040ce:	f023 0307 	bic.w	r3, r3, #7
 80040d2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80040d4:	687b      	ldr	r3, [r7, #4]
 80040d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040d8:	697a      	ldr	r2, [r7, #20]
 80040da:	4313      	orrs	r3, r2
 80040dc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040e2:	2b04      	cmp	r3, #4
 80040e4:	d117      	bne.n	8004116 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80040e6:	687b      	ldr	r3, [r7, #4]
 80040e8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80040ea:	697a      	ldr	r2, [r7, #20]
 80040ec:	4313      	orrs	r3, r2
 80040ee:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	d00e      	beq.n	8004116 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80040f8:	6878      	ldr	r0, [r7, #4]
 80040fa:	f000 fb0f 	bl	800471c <DMA_CheckFifoParam>
 80040fe:	4603      	mov	r3, r0
 8004100:	2b00      	cmp	r3, #0
 8004102:	d008      	beq.n	8004116 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8004104:	687b      	ldr	r3, [r7, #4]
 8004106:	2240      	movs	r2, #64	; 0x40
 8004108:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	2201      	movs	r2, #1
 800410e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8004112:	2301      	movs	r3, #1
 8004114:	e016      	b.n	8004144 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8004116:	687b      	ldr	r3, [r7, #4]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	697a      	ldr	r2, [r7, #20]
 800411c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800411e:	6878      	ldr	r0, [r7, #4]
 8004120:	f000 fac6 	bl	80046b0 <DMA_CalcBaseAndBitshift>
 8004124:	4603      	mov	r3, r0
 8004126:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800412c:	223f      	movs	r2, #63	; 0x3f
 800412e:	409a      	lsls	r2, r3
 8004130:	68fb      	ldr	r3, [r7, #12]
 8004132:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004134:	687b      	ldr	r3, [r7, #4]
 8004136:	2200      	movs	r2, #0
 8004138:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800413a:	687b      	ldr	r3, [r7, #4]
 800413c:	2201      	movs	r2, #1
 800413e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8004142:	2300      	movs	r3, #0
}
 8004144:	4618      	mov	r0, r3
 8004146:	3718      	adds	r7, #24
 8004148:	46bd      	mov	sp, r7
 800414a:	bd80      	pop	{r7, pc}
 800414c:	f010803f 	.word	0xf010803f

08004150 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004150:	b580      	push	{r7, lr}
 8004152:	b086      	sub	sp, #24
 8004154:	af00      	add	r7, sp, #0
 8004156:	60f8      	str	r0, [r7, #12]
 8004158:	60b9      	str	r1, [r7, #8]
 800415a:	607a      	str	r2, [r7, #4]
 800415c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800415e:	2300      	movs	r3, #0
 8004160:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004162:	68fb      	ldr	r3, [r7, #12]
 8004164:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004166:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8004168:	68fb      	ldr	r3, [r7, #12]
 800416a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800416e:	2b01      	cmp	r3, #1
 8004170:	d101      	bne.n	8004176 <HAL_DMA_Start_IT+0x26>
 8004172:	2302      	movs	r3, #2
 8004174:	e040      	b.n	80041f8 <HAL_DMA_Start_IT+0xa8>
 8004176:	68fb      	ldr	r3, [r7, #12]
 8004178:	2201      	movs	r2, #1
 800417a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800417e:	68fb      	ldr	r3, [r7, #12]
 8004180:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004184:	b2db      	uxtb	r3, r3
 8004186:	2b01      	cmp	r3, #1
 8004188:	d12f      	bne.n	80041ea <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800418a:	68fb      	ldr	r3, [r7, #12]
 800418c:	2202      	movs	r2, #2
 800418e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8004192:	68fb      	ldr	r3, [r7, #12]
 8004194:	2200      	movs	r2, #0
 8004196:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8004198:	683b      	ldr	r3, [r7, #0]
 800419a:	687a      	ldr	r2, [r7, #4]
 800419c:	68b9      	ldr	r1, [r7, #8]
 800419e:	68f8      	ldr	r0, [r7, #12]
 80041a0:	f000 fa58 	bl	8004654 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80041a4:	68fb      	ldr	r3, [r7, #12]
 80041a6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80041a8:	223f      	movs	r2, #63	; 0x3f
 80041aa:	409a      	lsls	r2, r3
 80041ac:	693b      	ldr	r3, [r7, #16]
 80041ae:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80041b0:	68fb      	ldr	r3, [r7, #12]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	681a      	ldr	r2, [r3, #0]
 80041b6:	68fb      	ldr	r3, [r7, #12]
 80041b8:	681b      	ldr	r3, [r3, #0]
 80041ba:	f042 0216 	orr.w	r2, r2, #22
 80041be:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80041c0:	68fb      	ldr	r3, [r7, #12]
 80041c2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041c4:	2b00      	cmp	r3, #0
 80041c6:	d007      	beq.n	80041d8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80041c8:	68fb      	ldr	r3, [r7, #12]
 80041ca:	681b      	ldr	r3, [r3, #0]
 80041cc:	681a      	ldr	r2, [r3, #0]
 80041ce:	68fb      	ldr	r3, [r7, #12]
 80041d0:	681b      	ldr	r3, [r3, #0]
 80041d2:	f042 0208 	orr.w	r2, r2, #8
 80041d6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80041d8:	68fb      	ldr	r3, [r7, #12]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	681a      	ldr	r2, [r3, #0]
 80041de:	68fb      	ldr	r3, [r7, #12]
 80041e0:	681b      	ldr	r3, [r3, #0]
 80041e2:	f042 0201 	orr.w	r2, r2, #1
 80041e6:	601a      	str	r2, [r3, #0]
 80041e8:	e005      	b.n	80041f6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80041ea:	68fb      	ldr	r3, [r7, #12]
 80041ec:	2200      	movs	r2, #0
 80041ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80041f2:	2302      	movs	r3, #2
 80041f4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80041f6:	7dfb      	ldrb	r3, [r7, #23]
}
 80041f8:	4618      	mov	r0, r3
 80041fa:	3718      	adds	r7, #24
 80041fc:	46bd      	mov	sp, r7
 80041fe:	bd80      	pop	{r7, pc}

08004200 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004200:	b580      	push	{r7, lr}
 8004202:	b084      	sub	sp, #16
 8004204:	af00      	add	r7, sp, #0
 8004206:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004208:	687b      	ldr	r3, [r7, #4]
 800420a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800420c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 800420e:	f7ff fd7d 	bl	8003d0c <HAL_GetTick>
 8004212:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800421a:	b2db      	uxtb	r3, r3
 800421c:	2b02      	cmp	r3, #2
 800421e:	d008      	beq.n	8004232 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004220:	687b      	ldr	r3, [r7, #4]
 8004222:	2280      	movs	r2, #128	; 0x80
 8004224:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	2200      	movs	r2, #0
 800422a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800422e:	2301      	movs	r3, #1
 8004230:	e052      	b.n	80042d8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	681b      	ldr	r3, [r3, #0]
 8004236:	681a      	ldr	r2, [r3, #0]
 8004238:	687b      	ldr	r3, [r7, #4]
 800423a:	681b      	ldr	r3, [r3, #0]
 800423c:	f022 0216 	bic.w	r2, r2, #22
 8004240:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004242:	687b      	ldr	r3, [r7, #4]
 8004244:	681b      	ldr	r3, [r3, #0]
 8004246:	695a      	ldr	r2, [r3, #20]
 8004248:	687b      	ldr	r3, [r7, #4]
 800424a:	681b      	ldr	r3, [r3, #0]
 800424c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004250:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004252:	687b      	ldr	r3, [r7, #4]
 8004254:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004256:	2b00      	cmp	r3, #0
 8004258:	d103      	bne.n	8004262 <HAL_DMA_Abort+0x62>
 800425a:	687b      	ldr	r3, [r7, #4]
 800425c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800425e:	2b00      	cmp	r3, #0
 8004260:	d007      	beq.n	8004272 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004262:	687b      	ldr	r3, [r7, #4]
 8004264:	681b      	ldr	r3, [r3, #0]
 8004266:	681a      	ldr	r2, [r3, #0]
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	681b      	ldr	r3, [r3, #0]
 800426c:	f022 0208 	bic.w	r2, r2, #8
 8004270:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004272:	687b      	ldr	r3, [r7, #4]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	681a      	ldr	r2, [r3, #0]
 8004278:	687b      	ldr	r3, [r7, #4]
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	f022 0201 	bic.w	r2, r2, #1
 8004280:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8004282:	e013      	b.n	80042ac <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8004284:	f7ff fd42 	bl	8003d0c <HAL_GetTick>
 8004288:	4602      	mov	r2, r0
 800428a:	68bb      	ldr	r3, [r7, #8]
 800428c:	1ad3      	subs	r3, r2, r3
 800428e:	2b05      	cmp	r3, #5
 8004290:	d90c      	bls.n	80042ac <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2220      	movs	r2, #32
 8004296:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004298:	687b      	ldr	r3, [r7, #4]
 800429a:	2200      	movs	r2, #0
 800429c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	2203      	movs	r2, #3
 80042a4:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80042a8:	2303      	movs	r3, #3
 80042aa:	e015      	b.n	80042d8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f003 0301 	and.w	r3, r3, #1
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d1e4      	bne.n	8004284 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042be:	223f      	movs	r2, #63	; 0x3f
 80042c0:	409a      	lsls	r2, r3
 80042c2:	68fb      	ldr	r3, [r7, #12]
 80042c4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80042c6:	687b      	ldr	r3, [r7, #4]
 80042c8:	2200      	movs	r2, #0
 80042ca:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80042ce:	687b      	ldr	r3, [r7, #4]
 80042d0:	2201      	movs	r2, #1
 80042d2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80042d6:	2300      	movs	r3, #0
}
 80042d8:	4618      	mov	r0, r3
 80042da:	3710      	adds	r7, #16
 80042dc:	46bd      	mov	sp, r7
 80042de:	bd80      	pop	{r7, pc}

080042e0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80042e0:	b480      	push	{r7}
 80042e2:	b083      	sub	sp, #12
 80042e4:	af00      	add	r7, sp, #0
 80042e6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80042ee:	b2db      	uxtb	r3, r3
 80042f0:	2b02      	cmp	r3, #2
 80042f2:	d004      	beq.n	80042fe <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	2280      	movs	r2, #128	; 0x80
 80042f8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80042fa:	2301      	movs	r3, #1
 80042fc:	e00c      	b.n	8004318 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	2205      	movs	r2, #5
 8004302:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004306:	687b      	ldr	r3, [r7, #4]
 8004308:	681b      	ldr	r3, [r3, #0]
 800430a:	681a      	ldr	r2, [r3, #0]
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	f022 0201 	bic.w	r2, r2, #1
 8004314:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004316:	2300      	movs	r3, #0
}
 8004318:	4618      	mov	r0, r3
 800431a:	370c      	adds	r7, #12
 800431c:	46bd      	mov	sp, r7
 800431e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004322:	4770      	bx	lr

08004324 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004324:	b580      	push	{r7, lr}
 8004326:	b086      	sub	sp, #24
 8004328:	af00      	add	r7, sp, #0
 800432a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800432c:	2300      	movs	r3, #0
 800432e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004330:	4b92      	ldr	r3, [pc, #584]	; (800457c <HAL_DMA_IRQHandler+0x258>)
 8004332:	681b      	ldr	r3, [r3, #0]
 8004334:	4a92      	ldr	r2, [pc, #584]	; (8004580 <HAL_DMA_IRQHandler+0x25c>)
 8004336:	fba2 2303 	umull	r2, r3, r2, r3
 800433a:	0a9b      	lsrs	r3, r3, #10
 800433c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800433e:	687b      	ldr	r3, [r7, #4]
 8004340:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004342:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8004344:	693b      	ldr	r3, [r7, #16]
 8004346:	681b      	ldr	r3, [r3, #0]
 8004348:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800434a:	687b      	ldr	r3, [r7, #4]
 800434c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800434e:	2208      	movs	r2, #8
 8004350:	409a      	lsls	r2, r3
 8004352:	68fb      	ldr	r3, [r7, #12]
 8004354:	4013      	ands	r3, r2
 8004356:	2b00      	cmp	r3, #0
 8004358:	d01a      	beq.n	8004390 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800435a:	687b      	ldr	r3, [r7, #4]
 800435c:	681b      	ldr	r3, [r3, #0]
 800435e:	681b      	ldr	r3, [r3, #0]
 8004360:	f003 0304 	and.w	r3, r3, #4
 8004364:	2b00      	cmp	r3, #0
 8004366:	d013      	beq.n	8004390 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8004368:	687b      	ldr	r3, [r7, #4]
 800436a:	681b      	ldr	r3, [r3, #0]
 800436c:	681a      	ldr	r2, [r3, #0]
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	f022 0204 	bic.w	r2, r2, #4
 8004376:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8004378:	687b      	ldr	r3, [r7, #4]
 800437a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800437c:	2208      	movs	r2, #8
 800437e:	409a      	lsls	r2, r3
 8004380:	693b      	ldr	r3, [r7, #16]
 8004382:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004388:	f043 0201 	orr.w	r2, r3, #1
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004390:	687b      	ldr	r3, [r7, #4]
 8004392:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004394:	2201      	movs	r2, #1
 8004396:	409a      	lsls	r2, r3
 8004398:	68fb      	ldr	r3, [r7, #12]
 800439a:	4013      	ands	r3, r2
 800439c:	2b00      	cmp	r3, #0
 800439e:	d012      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	681b      	ldr	r3, [r3, #0]
 80043a4:	695b      	ldr	r3, [r3, #20]
 80043a6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80043aa:	2b00      	cmp	r3, #0
 80043ac:	d00b      	beq.n	80043c6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043b2:	2201      	movs	r2, #1
 80043b4:	409a      	lsls	r2, r3
 80043b6:	693b      	ldr	r3, [r7, #16]
 80043b8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80043ba:	687b      	ldr	r3, [r7, #4]
 80043bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043be:	f043 0202 	orr.w	r2, r3, #2
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80043c6:	687b      	ldr	r3, [r7, #4]
 80043c8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043ca:	2204      	movs	r2, #4
 80043cc:	409a      	lsls	r2, r3
 80043ce:	68fb      	ldr	r3, [r7, #12]
 80043d0:	4013      	ands	r3, r2
 80043d2:	2b00      	cmp	r3, #0
 80043d4:	d012      	beq.n	80043fc <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80043d6:	687b      	ldr	r3, [r7, #4]
 80043d8:	681b      	ldr	r3, [r3, #0]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f003 0302 	and.w	r3, r3, #2
 80043e0:	2b00      	cmp	r3, #0
 80043e2:	d00b      	beq.n	80043fc <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80043e4:	687b      	ldr	r3, [r7, #4]
 80043e6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e8:	2204      	movs	r2, #4
 80043ea:	409a      	lsls	r2, r3
 80043ec:	693b      	ldr	r3, [r7, #16]
 80043ee:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80043f0:	687b      	ldr	r3, [r7, #4]
 80043f2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80043f4:	f043 0204 	orr.w	r2, r3, #4
 80043f8:	687b      	ldr	r3, [r7, #4]
 80043fa:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80043fc:	687b      	ldr	r3, [r7, #4]
 80043fe:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004400:	2210      	movs	r2, #16
 8004402:	409a      	lsls	r2, r3
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	4013      	ands	r3, r2
 8004408:	2b00      	cmp	r3, #0
 800440a:	d043      	beq.n	8004494 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800440c:	687b      	ldr	r3, [r7, #4]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	681b      	ldr	r3, [r3, #0]
 8004412:	f003 0308 	and.w	r3, r3, #8
 8004416:	2b00      	cmp	r3, #0
 8004418:	d03c      	beq.n	8004494 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800441e:	2210      	movs	r2, #16
 8004420:	409a      	lsls	r2, r3
 8004422:	693b      	ldr	r3, [r7, #16]
 8004424:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004430:	2b00      	cmp	r3, #0
 8004432:	d018      	beq.n	8004466 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	681b      	ldr	r3, [r3, #0]
 8004438:	681b      	ldr	r3, [r3, #0]
 800443a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800443e:	2b00      	cmp	r3, #0
 8004440:	d108      	bne.n	8004454 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8004442:	687b      	ldr	r3, [r7, #4]
 8004444:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004446:	2b00      	cmp	r3, #0
 8004448:	d024      	beq.n	8004494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800444a:	687b      	ldr	r3, [r7, #4]
 800444c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800444e:	6878      	ldr	r0, [r7, #4]
 8004450:	4798      	blx	r3
 8004452:	e01f      	b.n	8004494 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8004454:	687b      	ldr	r3, [r7, #4]
 8004456:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004458:	2b00      	cmp	r3, #0
 800445a:	d01b      	beq.n	8004494 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004460:	6878      	ldr	r0, [r7, #4]
 8004462:	4798      	blx	r3
 8004464:	e016      	b.n	8004494 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004466:	687b      	ldr	r3, [r7, #4]
 8004468:	681b      	ldr	r3, [r3, #0]
 800446a:	681b      	ldr	r3, [r3, #0]
 800446c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8004470:	2b00      	cmp	r3, #0
 8004472:	d107      	bne.n	8004484 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	681b      	ldr	r3, [r3, #0]
 8004478:	681a      	ldr	r2, [r3, #0]
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	681b      	ldr	r3, [r3, #0]
 800447e:	f022 0208 	bic.w	r2, r2, #8
 8004482:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004488:	2b00      	cmp	r3, #0
 800448a:	d003      	beq.n	8004494 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800448c:	687b      	ldr	r3, [r7, #4]
 800448e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004490:	6878      	ldr	r0, [r7, #4]
 8004492:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004494:	687b      	ldr	r3, [r7, #4]
 8004496:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004498:	2220      	movs	r2, #32
 800449a:	409a      	lsls	r2, r3
 800449c:	68fb      	ldr	r3, [r7, #12]
 800449e:	4013      	ands	r3, r2
 80044a0:	2b00      	cmp	r3, #0
 80044a2:	f000 808e 	beq.w	80045c2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	681b      	ldr	r3, [r3, #0]
 80044aa:	681b      	ldr	r3, [r3, #0]
 80044ac:	f003 0310 	and.w	r3, r3, #16
 80044b0:	2b00      	cmp	r3, #0
 80044b2:	f000 8086 	beq.w	80045c2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80044b6:	687b      	ldr	r3, [r7, #4]
 80044b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80044ba:	2220      	movs	r2, #32
 80044bc:	409a      	lsls	r2, r3
 80044be:	693b      	ldr	r3, [r7, #16]
 80044c0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80044c8:	b2db      	uxtb	r3, r3
 80044ca:	2b05      	cmp	r3, #5
 80044cc:	d136      	bne.n	800453c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80044ce:	687b      	ldr	r3, [r7, #4]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	681a      	ldr	r2, [r3, #0]
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	f022 0216 	bic.w	r2, r2, #22
 80044dc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80044de:	687b      	ldr	r3, [r7, #4]
 80044e0:	681b      	ldr	r3, [r3, #0]
 80044e2:	695a      	ldr	r2, [r3, #20]
 80044e4:	687b      	ldr	r3, [r7, #4]
 80044e6:	681b      	ldr	r3, [r3, #0]
 80044e8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80044ec:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80044ee:	687b      	ldr	r3, [r7, #4]
 80044f0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044f2:	2b00      	cmp	r3, #0
 80044f4:	d103      	bne.n	80044fe <HAL_DMA_IRQHandler+0x1da>
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d007      	beq.n	800450e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	681a      	ldr	r2, [r3, #0]
 8004504:	687b      	ldr	r3, [r7, #4]
 8004506:	681b      	ldr	r3, [r3, #0]
 8004508:	f022 0208 	bic.w	r2, r2, #8
 800450c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800450e:	687b      	ldr	r3, [r7, #4]
 8004510:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004512:	223f      	movs	r2, #63	; 0x3f
 8004514:	409a      	lsls	r2, r3
 8004516:	693b      	ldr	r3, [r7, #16]
 8004518:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800451a:	687b      	ldr	r3, [r7, #4]
 800451c:	2200      	movs	r2, #0
 800451e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	2201      	movs	r2, #1
 8004526:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800452a:	687b      	ldr	r3, [r7, #4]
 800452c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800452e:	2b00      	cmp	r3, #0
 8004530:	d07d      	beq.n	800462e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8004532:	687b      	ldr	r3, [r7, #4]
 8004534:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004536:	6878      	ldr	r0, [r7, #4]
 8004538:	4798      	blx	r3
        }
        return;
 800453a:	e078      	b.n	800462e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800453c:	687b      	ldr	r3, [r7, #4]
 800453e:	681b      	ldr	r3, [r3, #0]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004546:	2b00      	cmp	r3, #0
 8004548:	d01c      	beq.n	8004584 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681b      	ldr	r3, [r3, #0]
 8004550:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004554:	2b00      	cmp	r3, #0
 8004556:	d108      	bne.n	800456a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8004558:	687b      	ldr	r3, [r7, #4]
 800455a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800455c:	2b00      	cmp	r3, #0
 800455e:	d030      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8004560:	687b      	ldr	r3, [r7, #4]
 8004562:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004564:	6878      	ldr	r0, [r7, #4]
 8004566:	4798      	blx	r3
 8004568:	e02b      	b.n	80045c2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800456a:	687b      	ldr	r3, [r7, #4]
 800456c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800456e:	2b00      	cmp	r3, #0
 8004570:	d027      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8004572:	687b      	ldr	r3, [r7, #4]
 8004574:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004576:	6878      	ldr	r0, [r7, #4]
 8004578:	4798      	blx	r3
 800457a:	e022      	b.n	80045c2 <HAL_DMA_IRQHandler+0x29e>
 800457c:	20000024 	.word	0x20000024
 8004580:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8004584:	687b      	ldr	r3, [r7, #4]
 8004586:	681b      	ldr	r3, [r3, #0]
 8004588:	681b      	ldr	r3, [r3, #0]
 800458a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800458e:	2b00      	cmp	r3, #0
 8004590:	d10f      	bne.n	80045b2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004592:	687b      	ldr	r3, [r7, #4]
 8004594:	681b      	ldr	r3, [r3, #0]
 8004596:	681a      	ldr	r2, [r3, #0]
 8004598:	687b      	ldr	r3, [r7, #4]
 800459a:	681b      	ldr	r3, [r3, #0]
 800459c:	f022 0210 	bic.w	r2, r2, #16
 80045a0:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80045a2:	687b      	ldr	r3, [r7, #4]
 80045a4:	2200      	movs	r2, #0
 80045a6:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80045aa:	687b      	ldr	r3, [r7, #4]
 80045ac:	2201      	movs	r2, #1
 80045ae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80045b2:	687b      	ldr	r3, [r7, #4]
 80045b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d003      	beq.n	80045c2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80045ba:	687b      	ldr	r3, [r7, #4]
 80045bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80045be:	6878      	ldr	r0, [r7, #4]
 80045c0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80045c2:	687b      	ldr	r3, [r7, #4]
 80045c4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045c6:	2b00      	cmp	r3, #0
 80045c8:	d032      	beq.n	8004630 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80045ca:	687b      	ldr	r3, [r7, #4]
 80045cc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80045ce:	f003 0301 	and.w	r3, r3, #1
 80045d2:	2b00      	cmp	r3, #0
 80045d4:	d022      	beq.n	800461c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	2205      	movs	r2, #5
 80045da:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	681b      	ldr	r3, [r3, #0]
 80045e2:	681a      	ldr	r2, [r3, #0]
 80045e4:	687b      	ldr	r3, [r7, #4]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	f022 0201 	bic.w	r2, r2, #1
 80045ec:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80045ee:	68bb      	ldr	r3, [r7, #8]
 80045f0:	3301      	adds	r3, #1
 80045f2:	60bb      	str	r3, [r7, #8]
 80045f4:	697a      	ldr	r2, [r7, #20]
 80045f6:	429a      	cmp	r2, r3
 80045f8:	d307      	bcc.n	800460a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80045fa:	687b      	ldr	r3, [r7, #4]
 80045fc:	681b      	ldr	r3, [r3, #0]
 80045fe:	681b      	ldr	r3, [r3, #0]
 8004600:	f003 0301 	and.w	r3, r3, #1
 8004604:	2b00      	cmp	r3, #0
 8004606:	d1f2      	bne.n	80045ee <HAL_DMA_IRQHandler+0x2ca>
 8004608:	e000      	b.n	800460c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800460a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800460c:	687b      	ldr	r3, [r7, #4]
 800460e:	2200      	movs	r2, #0
 8004610:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	2201      	movs	r2, #1
 8004618:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004620:	2b00      	cmp	r3, #0
 8004622:	d005      	beq.n	8004630 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004624:	687b      	ldr	r3, [r7, #4]
 8004626:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004628:	6878      	ldr	r0, [r7, #4]
 800462a:	4798      	blx	r3
 800462c:	e000      	b.n	8004630 <HAL_DMA_IRQHandler+0x30c>
        return;
 800462e:	bf00      	nop
    }
  }
}
 8004630:	3718      	adds	r7, #24
 8004632:	46bd      	mov	sp, r7
 8004634:	bd80      	pop	{r7, pc}
 8004636:	bf00      	nop

08004638 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004638:	b480      	push	{r7}
 800463a:	b083      	sub	sp, #12
 800463c:	af00      	add	r7, sp, #0
 800463e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004640:	687b      	ldr	r3, [r7, #4]
 8004642:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004646:	b2db      	uxtb	r3, r3
}
 8004648:	4618      	mov	r0, r3
 800464a:	370c      	adds	r7, #12
 800464c:	46bd      	mov	sp, r7
 800464e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004652:	4770      	bx	lr

08004654 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004654:	b480      	push	{r7}
 8004656:	b085      	sub	sp, #20
 8004658:	af00      	add	r7, sp, #0
 800465a:	60f8      	str	r0, [r7, #12]
 800465c:	60b9      	str	r1, [r7, #8]
 800465e:	607a      	str	r2, [r7, #4]
 8004660:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8004662:	68fb      	ldr	r3, [r7, #12]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	681a      	ldr	r2, [r3, #0]
 8004668:	68fb      	ldr	r3, [r7, #12]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8004670:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8004672:	68fb      	ldr	r3, [r7, #12]
 8004674:	681b      	ldr	r3, [r3, #0]
 8004676:	683a      	ldr	r2, [r7, #0]
 8004678:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	689b      	ldr	r3, [r3, #8]
 800467e:	2b40      	cmp	r3, #64	; 0x40
 8004680:	d108      	bne.n	8004694 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8004682:	68fb      	ldr	r3, [r7, #12]
 8004684:	681b      	ldr	r3, [r3, #0]
 8004686:	687a      	ldr	r2, [r7, #4]
 8004688:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 800468a:	68fb      	ldr	r3, [r7, #12]
 800468c:	681b      	ldr	r3, [r3, #0]
 800468e:	68ba      	ldr	r2, [r7, #8]
 8004690:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004692:	e007      	b.n	80046a4 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004694:	68fb      	ldr	r3, [r7, #12]
 8004696:	681b      	ldr	r3, [r3, #0]
 8004698:	68ba      	ldr	r2, [r7, #8]
 800469a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800469c:	68fb      	ldr	r3, [r7, #12]
 800469e:	681b      	ldr	r3, [r3, #0]
 80046a0:	687a      	ldr	r2, [r7, #4]
 80046a2:	60da      	str	r2, [r3, #12]
}
 80046a4:	bf00      	nop
 80046a6:	3714      	adds	r7, #20
 80046a8:	46bd      	mov	sp, r7
 80046aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046ae:	4770      	bx	lr

080046b0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80046b0:	b480      	push	{r7}
 80046b2:	b085      	sub	sp, #20
 80046b4:	af00      	add	r7, sp, #0
 80046b6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 80046b8:	687b      	ldr	r3, [r7, #4]
 80046ba:	681b      	ldr	r3, [r3, #0]
 80046bc:	b2db      	uxtb	r3, r3
 80046be:	3b10      	subs	r3, #16
 80046c0:	4a14      	ldr	r2, [pc, #80]	; (8004714 <DMA_CalcBaseAndBitshift+0x64>)
 80046c2:	fba2 2303 	umull	r2, r3, r2, r3
 80046c6:	091b      	lsrs	r3, r3, #4
 80046c8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 80046ca:	4a13      	ldr	r2, [pc, #76]	; (8004718 <DMA_CalcBaseAndBitshift+0x68>)
 80046cc:	68fb      	ldr	r3, [r7, #12]
 80046ce:	4413      	add	r3, r2
 80046d0:	781b      	ldrb	r3, [r3, #0]
 80046d2:	461a      	mov	r2, r3
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 80046d8:	68fb      	ldr	r3, [r7, #12]
 80046da:	2b03      	cmp	r3, #3
 80046dc:	d909      	bls.n	80046f2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 80046de:	687b      	ldr	r3, [r7, #4]
 80046e0:	681b      	ldr	r3, [r3, #0]
 80046e2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046e6:	f023 0303 	bic.w	r3, r3, #3
 80046ea:	1d1a      	adds	r2, r3, #4
 80046ec:	687b      	ldr	r3, [r7, #4]
 80046ee:	659a      	str	r2, [r3, #88]	; 0x58
 80046f0:	e007      	b.n	8004702 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 80046f2:	687b      	ldr	r3, [r7, #4]
 80046f4:	681b      	ldr	r3, [r3, #0]
 80046f6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 80046fa:	f023 0303 	bic.w	r3, r3, #3
 80046fe:	687a      	ldr	r2, [r7, #4]
 8004700:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004702:	687b      	ldr	r3, [r7, #4]
 8004704:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004706:	4618      	mov	r0, r3
 8004708:	3714      	adds	r7, #20
 800470a:	46bd      	mov	sp, r7
 800470c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004710:	4770      	bx	lr
 8004712:	bf00      	nop
 8004714:	aaaaaaab 	.word	0xaaaaaaab
 8004718:	0800a3f8 	.word	0x0800a3f8

0800471c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800471c:	b480      	push	{r7}
 800471e:	b085      	sub	sp, #20
 8004720:	af00      	add	r7, sp, #0
 8004722:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004724:	2300      	movs	r3, #0
 8004726:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004728:	687b      	ldr	r3, [r7, #4]
 800472a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800472c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800472e:	687b      	ldr	r3, [r7, #4]
 8004730:	699b      	ldr	r3, [r3, #24]
 8004732:	2b00      	cmp	r3, #0
 8004734:	d11f      	bne.n	8004776 <DMA_CheckFifoParam+0x5a>
 8004736:	68bb      	ldr	r3, [r7, #8]
 8004738:	2b03      	cmp	r3, #3
 800473a:	d856      	bhi.n	80047ea <DMA_CheckFifoParam+0xce>
 800473c:	a201      	add	r2, pc, #4	; (adr r2, 8004744 <DMA_CheckFifoParam+0x28>)
 800473e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8004742:	bf00      	nop
 8004744:	08004755 	.word	0x08004755
 8004748:	08004767 	.word	0x08004767
 800474c:	08004755 	.word	0x08004755
 8004750:	080047eb 	.word	0x080047eb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004754:	687b      	ldr	r3, [r7, #4]
 8004756:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004758:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800475c:	2b00      	cmp	r3, #0
 800475e:	d046      	beq.n	80047ee <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8004760:	2301      	movs	r3, #1
 8004762:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004764:	e043      	b.n	80047ee <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800476a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800476e:	d140      	bne.n	80047f2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8004770:	2301      	movs	r3, #1
 8004772:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004774:	e03d      	b.n	80047f2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8004776:	687b      	ldr	r3, [r7, #4]
 8004778:	699b      	ldr	r3, [r3, #24]
 800477a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800477e:	d121      	bne.n	80047c4 <DMA_CheckFifoParam+0xa8>
 8004780:	68bb      	ldr	r3, [r7, #8]
 8004782:	2b03      	cmp	r3, #3
 8004784:	d837      	bhi.n	80047f6 <DMA_CheckFifoParam+0xda>
 8004786:	a201      	add	r2, pc, #4	; (adr r2, 800478c <DMA_CheckFifoParam+0x70>)
 8004788:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800478c:	0800479d 	.word	0x0800479d
 8004790:	080047a3 	.word	0x080047a3
 8004794:	0800479d 	.word	0x0800479d
 8004798:	080047b5 	.word	0x080047b5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800479c:	2301      	movs	r3, #1
 800479e:	73fb      	strb	r3, [r7, #15]
      break;
 80047a0:	e030      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047a2:	687b      	ldr	r3, [r7, #4]
 80047a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047a6:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047aa:	2b00      	cmp	r3, #0
 80047ac:	d025      	beq.n	80047fa <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80047ae:	2301      	movs	r3, #1
 80047b0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80047b2:	e022      	b.n	80047fa <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047b8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80047bc:	d11f      	bne.n	80047fe <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 80047be:	2301      	movs	r3, #1
 80047c0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 80047c2:	e01c      	b.n	80047fe <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 80047c4:	68bb      	ldr	r3, [r7, #8]
 80047c6:	2b02      	cmp	r3, #2
 80047c8:	d903      	bls.n	80047d2 <DMA_CheckFifoParam+0xb6>
 80047ca:	68bb      	ldr	r3, [r7, #8]
 80047cc:	2b03      	cmp	r3, #3
 80047ce:	d003      	beq.n	80047d8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 80047d0:	e018      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 80047d2:	2301      	movs	r3, #1
 80047d4:	73fb      	strb	r3, [r7, #15]
      break;
 80047d6:	e015      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80047dc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80047e0:	2b00      	cmp	r3, #0
 80047e2:	d00e      	beq.n	8004802 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 80047e4:	2301      	movs	r3, #1
 80047e6:	73fb      	strb	r3, [r7, #15]
      break;
 80047e8:	e00b      	b.n	8004802 <DMA_CheckFifoParam+0xe6>
      break;
 80047ea:	bf00      	nop
 80047ec:	e00a      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      break;
 80047ee:	bf00      	nop
 80047f0:	e008      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      break;
 80047f2:	bf00      	nop
 80047f4:	e006      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      break;
 80047f6:	bf00      	nop
 80047f8:	e004      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      break;
 80047fa:	bf00      	nop
 80047fc:	e002      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      break;   
 80047fe:	bf00      	nop
 8004800:	e000      	b.n	8004804 <DMA_CheckFifoParam+0xe8>
      break;
 8004802:	bf00      	nop
    }
  } 
  
  return status; 
 8004804:	7bfb      	ldrb	r3, [r7, #15]
}
 8004806:	4618      	mov	r0, r3
 8004808:	3714      	adds	r7, #20
 800480a:	46bd      	mov	sp, r7
 800480c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004810:	4770      	bx	lr
 8004812:	bf00      	nop

08004814 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004814:	b480      	push	{r7}
 8004816:	b089      	sub	sp, #36	; 0x24
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
 800481c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800481e:	2300      	movs	r3, #0
 8004820:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004822:	2300      	movs	r3, #0
 8004824:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004826:	2300      	movs	r3, #0
 8004828:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800482a:	2300      	movs	r3, #0
 800482c:	61fb      	str	r3, [r7, #28]
 800482e:	e159      	b.n	8004ae4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004830:	2201      	movs	r2, #1
 8004832:	69fb      	ldr	r3, [r7, #28]
 8004834:	fa02 f303 	lsl.w	r3, r2, r3
 8004838:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 800483a:	683b      	ldr	r3, [r7, #0]
 800483c:	681b      	ldr	r3, [r3, #0]
 800483e:	697a      	ldr	r2, [r7, #20]
 8004840:	4013      	ands	r3, r2
 8004842:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8004844:	693a      	ldr	r2, [r7, #16]
 8004846:	697b      	ldr	r3, [r7, #20]
 8004848:	429a      	cmp	r2, r3
 800484a:	f040 8148 	bne.w	8004ade <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800484e:	683b      	ldr	r3, [r7, #0]
 8004850:	685b      	ldr	r3, [r3, #4]
 8004852:	f003 0303 	and.w	r3, r3, #3
 8004856:	2b01      	cmp	r3, #1
 8004858:	d005      	beq.n	8004866 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800485a:	683b      	ldr	r3, [r7, #0]
 800485c:	685b      	ldr	r3, [r3, #4]
 800485e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004862:	2b02      	cmp	r3, #2
 8004864:	d130      	bne.n	80048c8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8004866:	687b      	ldr	r3, [r7, #4]
 8004868:	689b      	ldr	r3, [r3, #8]
 800486a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 800486c:	69fb      	ldr	r3, [r7, #28]
 800486e:	005b      	lsls	r3, r3, #1
 8004870:	2203      	movs	r2, #3
 8004872:	fa02 f303 	lsl.w	r3, r2, r3
 8004876:	43db      	mvns	r3, r3
 8004878:	69ba      	ldr	r2, [r7, #24]
 800487a:	4013      	ands	r3, r2
 800487c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800487e:	683b      	ldr	r3, [r7, #0]
 8004880:	68da      	ldr	r2, [r3, #12]
 8004882:	69fb      	ldr	r3, [r7, #28]
 8004884:	005b      	lsls	r3, r3, #1
 8004886:	fa02 f303 	lsl.w	r3, r2, r3
 800488a:	69ba      	ldr	r2, [r7, #24]
 800488c:	4313      	orrs	r3, r2
 800488e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	69ba      	ldr	r2, [r7, #24]
 8004894:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	685b      	ldr	r3, [r3, #4]
 800489a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800489c:	2201      	movs	r2, #1
 800489e:	69fb      	ldr	r3, [r7, #28]
 80048a0:	fa02 f303 	lsl.w	r3, r2, r3
 80048a4:	43db      	mvns	r3, r3
 80048a6:	69ba      	ldr	r2, [r7, #24]
 80048a8:	4013      	ands	r3, r2
 80048aa:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80048ac:	683b      	ldr	r3, [r7, #0]
 80048ae:	685b      	ldr	r3, [r3, #4]
 80048b0:	091b      	lsrs	r3, r3, #4
 80048b2:	f003 0201 	and.w	r2, r3, #1
 80048b6:	69fb      	ldr	r3, [r7, #28]
 80048b8:	fa02 f303 	lsl.w	r3, r2, r3
 80048bc:	69ba      	ldr	r2, [r7, #24]
 80048be:	4313      	orrs	r3, r2
 80048c0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	69ba      	ldr	r2, [r7, #24]
 80048c6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80048c8:	683b      	ldr	r3, [r7, #0]
 80048ca:	685b      	ldr	r3, [r3, #4]
 80048cc:	f003 0303 	and.w	r3, r3, #3
 80048d0:	2b03      	cmp	r3, #3
 80048d2:	d017      	beq.n	8004904 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80048d4:	687b      	ldr	r3, [r7, #4]
 80048d6:	68db      	ldr	r3, [r3, #12]
 80048d8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80048da:	69fb      	ldr	r3, [r7, #28]
 80048dc:	005b      	lsls	r3, r3, #1
 80048de:	2203      	movs	r2, #3
 80048e0:	fa02 f303 	lsl.w	r3, r2, r3
 80048e4:	43db      	mvns	r3, r3
 80048e6:	69ba      	ldr	r2, [r7, #24]
 80048e8:	4013      	ands	r3, r2
 80048ea:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80048ec:	683b      	ldr	r3, [r7, #0]
 80048ee:	689a      	ldr	r2, [r3, #8]
 80048f0:	69fb      	ldr	r3, [r7, #28]
 80048f2:	005b      	lsls	r3, r3, #1
 80048f4:	fa02 f303 	lsl.w	r3, r2, r3
 80048f8:	69ba      	ldr	r2, [r7, #24]
 80048fa:	4313      	orrs	r3, r2
 80048fc:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	69ba      	ldr	r2, [r7, #24]
 8004902:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004904:	683b      	ldr	r3, [r7, #0]
 8004906:	685b      	ldr	r3, [r3, #4]
 8004908:	f003 0303 	and.w	r3, r3, #3
 800490c:	2b02      	cmp	r3, #2
 800490e:	d123      	bne.n	8004958 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004910:	69fb      	ldr	r3, [r7, #28]
 8004912:	08da      	lsrs	r2, r3, #3
 8004914:	687b      	ldr	r3, [r7, #4]
 8004916:	3208      	adds	r2, #8
 8004918:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800491c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800491e:	69fb      	ldr	r3, [r7, #28]
 8004920:	f003 0307 	and.w	r3, r3, #7
 8004924:	009b      	lsls	r3, r3, #2
 8004926:	220f      	movs	r2, #15
 8004928:	fa02 f303 	lsl.w	r3, r2, r3
 800492c:	43db      	mvns	r3, r3
 800492e:	69ba      	ldr	r2, [r7, #24]
 8004930:	4013      	ands	r3, r2
 8004932:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8004934:	683b      	ldr	r3, [r7, #0]
 8004936:	691a      	ldr	r2, [r3, #16]
 8004938:	69fb      	ldr	r3, [r7, #28]
 800493a:	f003 0307 	and.w	r3, r3, #7
 800493e:	009b      	lsls	r3, r3, #2
 8004940:	fa02 f303 	lsl.w	r3, r2, r3
 8004944:	69ba      	ldr	r2, [r7, #24]
 8004946:	4313      	orrs	r3, r2
 8004948:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 800494a:	69fb      	ldr	r3, [r7, #28]
 800494c:	08da      	lsrs	r2, r3, #3
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	3208      	adds	r2, #8
 8004952:	69b9      	ldr	r1, [r7, #24]
 8004954:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	681b      	ldr	r3, [r3, #0]
 800495c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800495e:	69fb      	ldr	r3, [r7, #28]
 8004960:	005b      	lsls	r3, r3, #1
 8004962:	2203      	movs	r2, #3
 8004964:	fa02 f303 	lsl.w	r3, r2, r3
 8004968:	43db      	mvns	r3, r3
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4013      	ands	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8004970:	683b      	ldr	r3, [r7, #0]
 8004972:	685b      	ldr	r3, [r3, #4]
 8004974:	f003 0203 	and.w	r2, r3, #3
 8004978:	69fb      	ldr	r3, [r7, #28]
 800497a:	005b      	lsls	r3, r3, #1
 800497c:	fa02 f303 	lsl.w	r3, r2, r3
 8004980:	69ba      	ldr	r2, [r7, #24]
 8004982:	4313      	orrs	r3, r2
 8004984:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 800498c:	683b      	ldr	r3, [r7, #0]
 800498e:	685b      	ldr	r3, [r3, #4]
 8004990:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004994:	2b00      	cmp	r3, #0
 8004996:	f000 80a2 	beq.w	8004ade <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800499a:	2300      	movs	r3, #0
 800499c:	60fb      	str	r3, [r7, #12]
 800499e:	4b57      	ldr	r3, [pc, #348]	; (8004afc <HAL_GPIO_Init+0x2e8>)
 80049a0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049a2:	4a56      	ldr	r2, [pc, #344]	; (8004afc <HAL_GPIO_Init+0x2e8>)
 80049a4:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80049a8:	6453      	str	r3, [r2, #68]	; 0x44
 80049aa:	4b54      	ldr	r3, [pc, #336]	; (8004afc <HAL_GPIO_Init+0x2e8>)
 80049ac:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80049ae:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80049b2:	60fb      	str	r3, [r7, #12]
 80049b4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80049b6:	4a52      	ldr	r2, [pc, #328]	; (8004b00 <HAL_GPIO_Init+0x2ec>)
 80049b8:	69fb      	ldr	r3, [r7, #28]
 80049ba:	089b      	lsrs	r3, r3, #2
 80049bc:	3302      	adds	r3, #2
 80049be:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 80049c2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80049c4:	69fb      	ldr	r3, [r7, #28]
 80049c6:	f003 0303 	and.w	r3, r3, #3
 80049ca:	009b      	lsls	r3, r3, #2
 80049cc:	220f      	movs	r2, #15
 80049ce:	fa02 f303 	lsl.w	r3, r2, r3
 80049d2:	43db      	mvns	r3, r3
 80049d4:	69ba      	ldr	r2, [r7, #24]
 80049d6:	4013      	ands	r3, r2
 80049d8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	4a49      	ldr	r2, [pc, #292]	; (8004b04 <HAL_GPIO_Init+0x2f0>)
 80049de:	4293      	cmp	r3, r2
 80049e0:	d019      	beq.n	8004a16 <HAL_GPIO_Init+0x202>
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	4a48      	ldr	r2, [pc, #288]	; (8004b08 <HAL_GPIO_Init+0x2f4>)
 80049e6:	4293      	cmp	r3, r2
 80049e8:	d013      	beq.n	8004a12 <HAL_GPIO_Init+0x1fe>
 80049ea:	687b      	ldr	r3, [r7, #4]
 80049ec:	4a47      	ldr	r2, [pc, #284]	; (8004b0c <HAL_GPIO_Init+0x2f8>)
 80049ee:	4293      	cmp	r3, r2
 80049f0:	d00d      	beq.n	8004a0e <HAL_GPIO_Init+0x1fa>
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	4a46      	ldr	r2, [pc, #280]	; (8004b10 <HAL_GPIO_Init+0x2fc>)
 80049f6:	4293      	cmp	r3, r2
 80049f8:	d007      	beq.n	8004a0a <HAL_GPIO_Init+0x1f6>
 80049fa:	687b      	ldr	r3, [r7, #4]
 80049fc:	4a45      	ldr	r2, [pc, #276]	; (8004b14 <HAL_GPIO_Init+0x300>)
 80049fe:	4293      	cmp	r3, r2
 8004a00:	d101      	bne.n	8004a06 <HAL_GPIO_Init+0x1f2>
 8004a02:	2304      	movs	r3, #4
 8004a04:	e008      	b.n	8004a18 <HAL_GPIO_Init+0x204>
 8004a06:	2307      	movs	r3, #7
 8004a08:	e006      	b.n	8004a18 <HAL_GPIO_Init+0x204>
 8004a0a:	2303      	movs	r3, #3
 8004a0c:	e004      	b.n	8004a18 <HAL_GPIO_Init+0x204>
 8004a0e:	2302      	movs	r3, #2
 8004a10:	e002      	b.n	8004a18 <HAL_GPIO_Init+0x204>
 8004a12:	2301      	movs	r3, #1
 8004a14:	e000      	b.n	8004a18 <HAL_GPIO_Init+0x204>
 8004a16:	2300      	movs	r3, #0
 8004a18:	69fa      	ldr	r2, [r7, #28]
 8004a1a:	f002 0203 	and.w	r2, r2, #3
 8004a1e:	0092      	lsls	r2, r2, #2
 8004a20:	4093      	lsls	r3, r2
 8004a22:	69ba      	ldr	r2, [r7, #24]
 8004a24:	4313      	orrs	r3, r2
 8004a26:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004a28:	4935      	ldr	r1, [pc, #212]	; (8004b00 <HAL_GPIO_Init+0x2ec>)
 8004a2a:	69fb      	ldr	r3, [r7, #28]
 8004a2c:	089b      	lsrs	r3, r3, #2
 8004a2e:	3302      	adds	r3, #2
 8004a30:	69ba      	ldr	r2, [r7, #24]
 8004a32:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8004a36:	4b38      	ldr	r3, [pc, #224]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004a38:	681b      	ldr	r3, [r3, #0]
 8004a3a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a3c:	693b      	ldr	r3, [r7, #16]
 8004a3e:	43db      	mvns	r3, r3
 8004a40:	69ba      	ldr	r2, [r7, #24]
 8004a42:	4013      	ands	r3, r2
 8004a44:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8004a46:	683b      	ldr	r3, [r7, #0]
 8004a48:	685b      	ldr	r3, [r3, #4]
 8004a4a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004a4e:	2b00      	cmp	r3, #0
 8004a50:	d003      	beq.n	8004a5a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8004a52:	69ba      	ldr	r2, [r7, #24]
 8004a54:	693b      	ldr	r3, [r7, #16]
 8004a56:	4313      	orrs	r3, r2
 8004a58:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8004a5a:	4a2f      	ldr	r2, [pc, #188]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004a5c:	69bb      	ldr	r3, [r7, #24]
 8004a5e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8004a60:	4b2d      	ldr	r3, [pc, #180]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004a62:	685b      	ldr	r3, [r3, #4]
 8004a64:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a66:	693b      	ldr	r3, [r7, #16]
 8004a68:	43db      	mvns	r3, r3
 8004a6a:	69ba      	ldr	r2, [r7, #24]
 8004a6c:	4013      	ands	r3, r2
 8004a6e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8004a70:	683b      	ldr	r3, [r7, #0]
 8004a72:	685b      	ldr	r3, [r3, #4]
 8004a74:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8004a78:	2b00      	cmp	r3, #0
 8004a7a:	d003      	beq.n	8004a84 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8004a7c:	69ba      	ldr	r2, [r7, #24]
 8004a7e:	693b      	ldr	r3, [r7, #16]
 8004a80:	4313      	orrs	r3, r2
 8004a82:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8004a84:	4a24      	ldr	r2, [pc, #144]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004a86:	69bb      	ldr	r3, [r7, #24]
 8004a88:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8004a8a:	4b23      	ldr	r3, [pc, #140]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004a8c:	689b      	ldr	r3, [r3, #8]
 8004a8e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a90:	693b      	ldr	r3, [r7, #16]
 8004a92:	43db      	mvns	r3, r3
 8004a94:	69ba      	ldr	r2, [r7, #24]
 8004a96:	4013      	ands	r3, r2
 8004a98:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8004a9a:	683b      	ldr	r3, [r7, #0]
 8004a9c:	685b      	ldr	r3, [r3, #4]
 8004a9e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004aa2:	2b00      	cmp	r3, #0
 8004aa4:	d003      	beq.n	8004aae <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004aa6:	69ba      	ldr	r2, [r7, #24]
 8004aa8:	693b      	ldr	r3, [r7, #16]
 8004aaa:	4313      	orrs	r3, r2
 8004aac:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8004aae:	4a1a      	ldr	r2, [pc, #104]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004ab0:	69bb      	ldr	r3, [r7, #24]
 8004ab2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004ab4:	4b18      	ldr	r3, [pc, #96]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004ab6:	68db      	ldr	r3, [r3, #12]
 8004ab8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004aba:	693b      	ldr	r3, [r7, #16]
 8004abc:	43db      	mvns	r3, r3
 8004abe:	69ba      	ldr	r2, [r7, #24]
 8004ac0:	4013      	ands	r3, r2
 8004ac2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004ac4:	683b      	ldr	r3, [r7, #0]
 8004ac6:	685b      	ldr	r3, [r3, #4]
 8004ac8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004acc:	2b00      	cmp	r3, #0
 8004ace:	d003      	beq.n	8004ad8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004ad0:	69ba      	ldr	r2, [r7, #24]
 8004ad2:	693b      	ldr	r3, [r7, #16]
 8004ad4:	4313      	orrs	r3, r2
 8004ad6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004ad8:	4a0f      	ldr	r2, [pc, #60]	; (8004b18 <HAL_GPIO_Init+0x304>)
 8004ada:	69bb      	ldr	r3, [r7, #24]
 8004adc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004ade:	69fb      	ldr	r3, [r7, #28]
 8004ae0:	3301      	adds	r3, #1
 8004ae2:	61fb      	str	r3, [r7, #28]
 8004ae4:	69fb      	ldr	r3, [r7, #28]
 8004ae6:	2b0f      	cmp	r3, #15
 8004ae8:	f67f aea2 	bls.w	8004830 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004aec:	bf00      	nop
 8004aee:	bf00      	nop
 8004af0:	3724      	adds	r7, #36	; 0x24
 8004af2:	46bd      	mov	sp, r7
 8004af4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004af8:	4770      	bx	lr
 8004afa:	bf00      	nop
 8004afc:	40023800 	.word	0x40023800
 8004b00:	40013800 	.word	0x40013800
 8004b04:	40020000 	.word	0x40020000
 8004b08:	40020400 	.word	0x40020400
 8004b0c:	40020800 	.word	0x40020800
 8004b10:	40020c00 	.word	0x40020c00
 8004b14:	40021000 	.word	0x40021000
 8004b18:	40013c00 	.word	0x40013c00

08004b1c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004b1c:	b480      	push	{r7}
 8004b1e:	b083      	sub	sp, #12
 8004b20:	af00      	add	r7, sp, #0
 8004b22:	6078      	str	r0, [r7, #4]
 8004b24:	460b      	mov	r3, r1
 8004b26:	807b      	strh	r3, [r7, #2]
 8004b28:	4613      	mov	r3, r2
 8004b2a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004b2c:	787b      	ldrb	r3, [r7, #1]
 8004b2e:	2b00      	cmp	r3, #0
 8004b30:	d003      	beq.n	8004b3a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004b32:	887a      	ldrh	r2, [r7, #2]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004b38:	e003      	b.n	8004b42 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004b3a:	887b      	ldrh	r3, [r7, #2]
 8004b3c:	041a      	lsls	r2, r3, #16
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	619a      	str	r2, [r3, #24]
}
 8004b42:	bf00      	nop
 8004b44:	370c      	adds	r7, #12
 8004b46:	46bd      	mov	sp, r7
 8004b48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004b4c:	4770      	bx	lr
	...

08004b50 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004b50:	b580      	push	{r7, lr}
 8004b52:	b082      	sub	sp, #8
 8004b54:	af00      	add	r7, sp, #0
 8004b56:	4603      	mov	r3, r0
 8004b58:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004b5a:	4b08      	ldr	r3, [pc, #32]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b5c:	695a      	ldr	r2, [r3, #20]
 8004b5e:	88fb      	ldrh	r3, [r7, #6]
 8004b60:	4013      	ands	r3, r2
 8004b62:	2b00      	cmp	r3, #0
 8004b64:	d006      	beq.n	8004b74 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004b66:	4a05      	ldr	r2, [pc, #20]	; (8004b7c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004b68:	88fb      	ldrh	r3, [r7, #6]
 8004b6a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004b6c:	88fb      	ldrh	r3, [r7, #6]
 8004b6e:	4618      	mov	r0, r3
 8004b70:	f7fe f922 	bl	8002db8 <HAL_GPIO_EXTI_Callback>
  }
}
 8004b74:	bf00      	nop
 8004b76:	3708      	adds	r7, #8
 8004b78:	46bd      	mov	sp, r7
 8004b7a:	bd80      	pop	{r7, pc}
 8004b7c:	40013c00 	.word	0x40013c00

08004b80 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004b80:	b580      	push	{r7, lr}
 8004b82:	b084      	sub	sp, #16
 8004b84:	af00      	add	r7, sp, #0
 8004b86:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004b88:	687b      	ldr	r3, [r7, #4]
 8004b8a:	2b00      	cmp	r3, #0
 8004b8c:	d101      	bne.n	8004b92 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004b8e:	2301      	movs	r3, #1
 8004b90:	e12b      	b.n	8004dea <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004b92:	687b      	ldr	r3, [r7, #4]
 8004b94:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b98:	b2db      	uxtb	r3, r3
 8004b9a:	2b00      	cmp	r3, #0
 8004b9c:	d106      	bne.n	8004bac <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	2200      	movs	r2, #0
 8004ba2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004ba6:	6878      	ldr	r0, [r7, #4]
 8004ba8:	f7fe fd4e 	bl	8003648 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	2224      	movs	r2, #36	; 0x24
 8004bb0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004bb4:	687b      	ldr	r3, [r7, #4]
 8004bb6:	681b      	ldr	r3, [r3, #0]
 8004bb8:	681a      	ldr	r2, [r3, #0]
 8004bba:	687b      	ldr	r3, [r7, #4]
 8004bbc:	681b      	ldr	r3, [r3, #0]
 8004bbe:	f022 0201 	bic.w	r2, r2, #1
 8004bc2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004bc4:	687b      	ldr	r3, [r7, #4]
 8004bc6:	681b      	ldr	r3, [r3, #0]
 8004bc8:	681a      	ldr	r2, [r3, #0]
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	681b      	ldr	r3, [r3, #0]
 8004bce:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004bd2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	681b      	ldr	r3, [r3, #0]
 8004bd8:	681a      	ldr	r2, [r3, #0]
 8004bda:	687b      	ldr	r3, [r7, #4]
 8004bdc:	681b      	ldr	r3, [r3, #0]
 8004bde:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004be2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004be4:	f002 fab8 	bl	8007158 <HAL_RCC_GetPCLK1Freq>
 8004be8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	685b      	ldr	r3, [r3, #4]
 8004bee:	4a81      	ldr	r2, [pc, #516]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004bf0:	4293      	cmp	r3, r2
 8004bf2:	d807      	bhi.n	8004c04 <HAL_I2C_Init+0x84>
 8004bf4:	68fb      	ldr	r3, [r7, #12]
 8004bf6:	4a80      	ldr	r2, [pc, #512]	; (8004df8 <HAL_I2C_Init+0x278>)
 8004bf8:	4293      	cmp	r3, r2
 8004bfa:	bf94      	ite	ls
 8004bfc:	2301      	movls	r3, #1
 8004bfe:	2300      	movhi	r3, #0
 8004c00:	b2db      	uxtb	r3, r3
 8004c02:	e006      	b.n	8004c12 <HAL_I2C_Init+0x92>
 8004c04:	68fb      	ldr	r3, [r7, #12]
 8004c06:	4a7d      	ldr	r2, [pc, #500]	; (8004dfc <HAL_I2C_Init+0x27c>)
 8004c08:	4293      	cmp	r3, r2
 8004c0a:	bf94      	ite	ls
 8004c0c:	2301      	movls	r3, #1
 8004c0e:	2300      	movhi	r3, #0
 8004c10:	b2db      	uxtb	r3, r3
 8004c12:	2b00      	cmp	r3, #0
 8004c14:	d001      	beq.n	8004c1a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004c16:	2301      	movs	r3, #1
 8004c18:	e0e7      	b.n	8004dea <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004c1a:	68fb      	ldr	r3, [r7, #12]
 8004c1c:	4a78      	ldr	r2, [pc, #480]	; (8004e00 <HAL_I2C_Init+0x280>)
 8004c1e:	fba2 2303 	umull	r2, r3, r2, r3
 8004c22:	0c9b      	lsrs	r3, r3, #18
 8004c24:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004c26:	687b      	ldr	r3, [r7, #4]
 8004c28:	681b      	ldr	r3, [r3, #0]
 8004c2a:	685b      	ldr	r3, [r3, #4]
 8004c2c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	68ba      	ldr	r2, [r7, #8]
 8004c36:	430a      	orrs	r2, r1
 8004c38:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004c3a:	687b      	ldr	r3, [r7, #4]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	6a1b      	ldr	r3, [r3, #32]
 8004c40:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	685b      	ldr	r3, [r3, #4]
 8004c48:	4a6a      	ldr	r2, [pc, #424]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004c4a:	4293      	cmp	r3, r2
 8004c4c:	d802      	bhi.n	8004c54 <HAL_I2C_Init+0xd4>
 8004c4e:	68bb      	ldr	r3, [r7, #8]
 8004c50:	3301      	adds	r3, #1
 8004c52:	e009      	b.n	8004c68 <HAL_I2C_Init+0xe8>
 8004c54:	68bb      	ldr	r3, [r7, #8]
 8004c56:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004c5a:	fb02 f303 	mul.w	r3, r2, r3
 8004c5e:	4a69      	ldr	r2, [pc, #420]	; (8004e04 <HAL_I2C_Init+0x284>)
 8004c60:	fba2 2303 	umull	r2, r3, r2, r3
 8004c64:	099b      	lsrs	r3, r3, #6
 8004c66:	3301      	adds	r3, #1
 8004c68:	687a      	ldr	r2, [r7, #4]
 8004c6a:	6812      	ldr	r2, [r2, #0]
 8004c6c:	430b      	orrs	r3, r1
 8004c6e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	69db      	ldr	r3, [r3, #28]
 8004c76:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004c7a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004c7e:	687b      	ldr	r3, [r7, #4]
 8004c80:	685b      	ldr	r3, [r3, #4]
 8004c82:	495c      	ldr	r1, [pc, #368]	; (8004df4 <HAL_I2C_Init+0x274>)
 8004c84:	428b      	cmp	r3, r1
 8004c86:	d819      	bhi.n	8004cbc <HAL_I2C_Init+0x13c>
 8004c88:	68fb      	ldr	r3, [r7, #12]
 8004c8a:	1e59      	subs	r1, r3, #1
 8004c8c:	687b      	ldr	r3, [r7, #4]
 8004c8e:	685b      	ldr	r3, [r3, #4]
 8004c90:	005b      	lsls	r3, r3, #1
 8004c92:	fbb1 f3f3 	udiv	r3, r1, r3
 8004c96:	1c59      	adds	r1, r3, #1
 8004c98:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004c9c:	400b      	ands	r3, r1
 8004c9e:	2b00      	cmp	r3, #0
 8004ca0:	d00a      	beq.n	8004cb8 <HAL_I2C_Init+0x138>
 8004ca2:	68fb      	ldr	r3, [r7, #12]
 8004ca4:	1e59      	subs	r1, r3, #1
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	685b      	ldr	r3, [r3, #4]
 8004caa:	005b      	lsls	r3, r3, #1
 8004cac:	fbb1 f3f3 	udiv	r3, r1, r3
 8004cb0:	3301      	adds	r3, #1
 8004cb2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cb6:	e051      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004cb8:	2304      	movs	r3, #4
 8004cba:	e04f      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004cbc:	687b      	ldr	r3, [r7, #4]
 8004cbe:	689b      	ldr	r3, [r3, #8]
 8004cc0:	2b00      	cmp	r3, #0
 8004cc2:	d111      	bne.n	8004ce8 <HAL_I2C_Init+0x168>
 8004cc4:	68fb      	ldr	r3, [r7, #12]
 8004cc6:	1e58      	subs	r0, r3, #1
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	6859      	ldr	r1, [r3, #4]
 8004ccc:	460b      	mov	r3, r1
 8004cce:	005b      	lsls	r3, r3, #1
 8004cd0:	440b      	add	r3, r1
 8004cd2:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cd6:	3301      	adds	r3, #1
 8004cd8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004cdc:	2b00      	cmp	r3, #0
 8004cde:	bf0c      	ite	eq
 8004ce0:	2301      	moveq	r3, #1
 8004ce2:	2300      	movne	r3, #0
 8004ce4:	b2db      	uxtb	r3, r3
 8004ce6:	e012      	b.n	8004d0e <HAL_I2C_Init+0x18e>
 8004ce8:	68fb      	ldr	r3, [r7, #12]
 8004cea:	1e58      	subs	r0, r3, #1
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	6859      	ldr	r1, [r3, #4]
 8004cf0:	460b      	mov	r3, r1
 8004cf2:	009b      	lsls	r3, r3, #2
 8004cf4:	440b      	add	r3, r1
 8004cf6:	0099      	lsls	r1, r3, #2
 8004cf8:	440b      	add	r3, r1
 8004cfa:	fbb0 f3f3 	udiv	r3, r0, r3
 8004cfe:	3301      	adds	r3, #1
 8004d00:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	bf0c      	ite	eq
 8004d08:	2301      	moveq	r3, #1
 8004d0a:	2300      	movne	r3, #0
 8004d0c:	b2db      	uxtb	r3, r3
 8004d0e:	2b00      	cmp	r3, #0
 8004d10:	d001      	beq.n	8004d16 <HAL_I2C_Init+0x196>
 8004d12:	2301      	movs	r3, #1
 8004d14:	e022      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	689b      	ldr	r3, [r3, #8]
 8004d1a:	2b00      	cmp	r3, #0
 8004d1c:	d10e      	bne.n	8004d3c <HAL_I2C_Init+0x1bc>
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	1e58      	subs	r0, r3, #1
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	6859      	ldr	r1, [r3, #4]
 8004d26:	460b      	mov	r3, r1
 8004d28:	005b      	lsls	r3, r3, #1
 8004d2a:	440b      	add	r3, r1
 8004d2c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d30:	3301      	adds	r3, #1
 8004d32:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d36:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004d3a:	e00f      	b.n	8004d5c <HAL_I2C_Init+0x1dc>
 8004d3c:	68fb      	ldr	r3, [r7, #12]
 8004d3e:	1e58      	subs	r0, r3, #1
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	6859      	ldr	r1, [r3, #4]
 8004d44:	460b      	mov	r3, r1
 8004d46:	009b      	lsls	r3, r3, #2
 8004d48:	440b      	add	r3, r1
 8004d4a:	0099      	lsls	r1, r3, #2
 8004d4c:	440b      	add	r3, r1
 8004d4e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004d52:	3301      	adds	r3, #1
 8004d54:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004d58:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004d5c:	6879      	ldr	r1, [r7, #4]
 8004d5e:	6809      	ldr	r1, [r1, #0]
 8004d60:	4313      	orrs	r3, r2
 8004d62:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	681b      	ldr	r3, [r3, #0]
 8004d6a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004d6e:	687b      	ldr	r3, [r7, #4]
 8004d70:	69da      	ldr	r2, [r3, #28]
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	6a1b      	ldr	r3, [r3, #32]
 8004d76:	431a      	orrs	r2, r3
 8004d78:	687b      	ldr	r3, [r7, #4]
 8004d7a:	681b      	ldr	r3, [r3, #0]
 8004d7c:	430a      	orrs	r2, r1
 8004d7e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004d80:	687b      	ldr	r3, [r7, #4]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	689b      	ldr	r3, [r3, #8]
 8004d86:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004d8a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004d8e:	687a      	ldr	r2, [r7, #4]
 8004d90:	6911      	ldr	r1, [r2, #16]
 8004d92:	687a      	ldr	r2, [r7, #4]
 8004d94:	68d2      	ldr	r2, [r2, #12]
 8004d96:	4311      	orrs	r1, r2
 8004d98:	687a      	ldr	r2, [r7, #4]
 8004d9a:	6812      	ldr	r2, [r2, #0]
 8004d9c:	430b      	orrs	r3, r1
 8004d9e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004da0:	687b      	ldr	r3, [r7, #4]
 8004da2:	681b      	ldr	r3, [r3, #0]
 8004da4:	68db      	ldr	r3, [r3, #12]
 8004da6:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004daa:	687b      	ldr	r3, [r7, #4]
 8004dac:	695a      	ldr	r2, [r3, #20]
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	699b      	ldr	r3, [r3, #24]
 8004db2:	431a      	orrs	r2, r3
 8004db4:	687b      	ldr	r3, [r7, #4]
 8004db6:	681b      	ldr	r3, [r3, #0]
 8004db8:	430a      	orrs	r2, r1
 8004dba:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	681a      	ldr	r2, [r3, #0]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	681b      	ldr	r3, [r3, #0]
 8004dc6:	f042 0201 	orr.w	r2, r2, #1
 8004dca:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004dcc:	687b      	ldr	r3, [r7, #4]
 8004dce:	2200      	movs	r2, #0
 8004dd0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004dd2:	687b      	ldr	r3, [r7, #4]
 8004dd4:	2220      	movs	r2, #32
 8004dd6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	2200      	movs	r2, #0
 8004dde:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004de0:	687b      	ldr	r3, [r7, #4]
 8004de2:	2200      	movs	r2, #0
 8004de4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004de8:	2300      	movs	r3, #0
}
 8004dea:	4618      	mov	r0, r3
 8004dec:	3710      	adds	r7, #16
 8004dee:	46bd      	mov	sp, r7
 8004df0:	bd80      	pop	{r7, pc}
 8004df2:	bf00      	nop
 8004df4:	000186a0 	.word	0x000186a0
 8004df8:	001e847f 	.word	0x001e847f
 8004dfc:	003d08ff 	.word	0x003d08ff
 8004e00:	431bde83 	.word	0x431bde83
 8004e04:	10624dd3 	.word	0x10624dd3

08004e08 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004e08:	b480      	push	{r7}
 8004e0a:	b087      	sub	sp, #28
 8004e0c:	af00      	add	r7, sp, #0
 8004e0e:	60f8      	str	r0, [r7, #12]
 8004e10:	607a      	str	r2, [r7, #4]
 8004e12:	461a      	mov	r2, r3
 8004e14:	460b      	mov	r3, r1
 8004e16:	817b      	strh	r3, [r7, #10]
 8004e18:	4613      	mov	r3, r2
 8004e1a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004e1c:	2300      	movs	r3, #0
 8004e1e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004e20:	68fb      	ldr	r3, [r7, #12]
 8004e22:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e26:	b2db      	uxtb	r3, r3
 8004e28:	2b20      	cmp	r3, #32
 8004e2a:	f040 8085 	bne.w	8004f38 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e2e:	4b46      	ldr	r3, [pc, #280]	; (8004f48 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	08db      	lsrs	r3, r3, #3
 8004e34:	4a45      	ldr	r2, [pc, #276]	; (8004f4c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004e36:	fba2 2303 	umull	r2, r3, r2, r3
 8004e3a:	0a1a      	lsrs	r2, r3, #8
 8004e3c:	4613      	mov	r3, r2
 8004e3e:	009b      	lsls	r3, r3, #2
 8004e40:	4413      	add	r3, r2
 8004e42:	009a      	lsls	r2, r3, #2
 8004e44:	4413      	add	r3, r2
 8004e46:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004e48:	697b      	ldr	r3, [r7, #20]
 8004e4a:	3b01      	subs	r3, #1
 8004e4c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004e4e:	697b      	ldr	r3, [r7, #20]
 8004e50:	2b00      	cmp	r3, #0
 8004e52:	d116      	bne.n	8004e82 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004e54:	68fb      	ldr	r3, [r7, #12]
 8004e56:	2200      	movs	r2, #0
 8004e58:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004e5a:	68fb      	ldr	r3, [r7, #12]
 8004e5c:	2220      	movs	r2, #32
 8004e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004e62:	68fb      	ldr	r3, [r7, #12]
 8004e64:	2200      	movs	r2, #0
 8004e66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004e6a:	68fb      	ldr	r3, [r7, #12]
 8004e6c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e6e:	f043 0220 	orr.w	r2, r3, #32
 8004e72:	68fb      	ldr	r3, [r7, #12]
 8004e74:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004e76:	68fb      	ldr	r3, [r7, #12]
 8004e78:	2200      	movs	r2, #0
 8004e7a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004e7e:	2301      	movs	r3, #1
 8004e80:	e05b      	b.n	8004f3a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004e82:	68fb      	ldr	r3, [r7, #12]
 8004e84:	681b      	ldr	r3, [r3, #0]
 8004e86:	699b      	ldr	r3, [r3, #24]
 8004e88:	f003 0302 	and.w	r3, r3, #2
 8004e8c:	2b02      	cmp	r3, #2
 8004e8e:	d0db      	beq.n	8004e48 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004e90:	68fb      	ldr	r3, [r7, #12]
 8004e92:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004e96:	2b01      	cmp	r3, #1
 8004e98:	d101      	bne.n	8004e9e <HAL_I2C_Master_Transmit_IT+0x96>
 8004e9a:	2302      	movs	r3, #2
 8004e9c:	e04d      	b.n	8004f3a <HAL_I2C_Master_Transmit_IT+0x132>
 8004e9e:	68fb      	ldr	r3, [r7, #12]
 8004ea0:	2201      	movs	r2, #1
 8004ea2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004ea6:	68fb      	ldr	r3, [r7, #12]
 8004ea8:	681b      	ldr	r3, [r3, #0]
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	f003 0301 	and.w	r3, r3, #1
 8004eb0:	2b01      	cmp	r3, #1
 8004eb2:	d007      	beq.n	8004ec4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004eb4:	68fb      	ldr	r3, [r7, #12]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	681a      	ldr	r2, [r3, #0]
 8004eba:	68fb      	ldr	r3, [r7, #12]
 8004ebc:	681b      	ldr	r3, [r3, #0]
 8004ebe:	f042 0201 	orr.w	r2, r2, #1
 8004ec2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004ec4:	68fb      	ldr	r3, [r7, #12]
 8004ec6:	681b      	ldr	r3, [r3, #0]
 8004ec8:	681a      	ldr	r2, [r3, #0]
 8004eca:	68fb      	ldr	r3, [r7, #12]
 8004ecc:	681b      	ldr	r3, [r3, #0]
 8004ece:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004ed2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004ed4:	68fb      	ldr	r3, [r7, #12]
 8004ed6:	2221      	movs	r2, #33	; 0x21
 8004ed8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004edc:	68fb      	ldr	r3, [r7, #12]
 8004ede:	2210      	movs	r2, #16
 8004ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004ee4:	68fb      	ldr	r3, [r7, #12]
 8004ee6:	2200      	movs	r2, #0
 8004ee8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004eea:	68fb      	ldr	r3, [r7, #12]
 8004eec:	687a      	ldr	r2, [r7, #4]
 8004eee:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004ef0:	68fb      	ldr	r3, [r7, #12]
 8004ef2:	893a      	ldrh	r2, [r7, #8]
 8004ef4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004ef6:	68fb      	ldr	r3, [r7, #12]
 8004ef8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004efa:	b29a      	uxth	r2, r3
 8004efc:	68fb      	ldr	r3, [r7, #12]
 8004efe:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004f00:	68fb      	ldr	r3, [r7, #12]
 8004f02:	4a13      	ldr	r2, [pc, #76]	; (8004f50 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004f04:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004f06:	897a      	ldrh	r2, [r7, #10]
 8004f08:	68fb      	ldr	r3, [r7, #12]
 8004f0a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004f0c:	68fb      	ldr	r3, [r7, #12]
 8004f0e:	681b      	ldr	r3, [r3, #0]
 8004f10:	681a      	ldr	r2, [r3, #0]
 8004f12:	68fb      	ldr	r3, [r7, #12]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004f1a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004f1c:	68fb      	ldr	r3, [r7, #12]
 8004f1e:	2200      	movs	r2, #0
 8004f20:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004f24:	68fb      	ldr	r3, [r7, #12]
 8004f26:	681b      	ldr	r3, [r3, #0]
 8004f28:	685a      	ldr	r2, [r3, #4]
 8004f2a:	68fb      	ldr	r3, [r7, #12]
 8004f2c:	681b      	ldr	r3, [r3, #0]
 8004f2e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004f32:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004f34:	2300      	movs	r3, #0
 8004f36:	e000      	b.n	8004f3a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004f38:	2302      	movs	r3, #2
  }
}
 8004f3a:	4618      	mov	r0, r3
 8004f3c:	371c      	adds	r7, #28
 8004f3e:	46bd      	mov	sp, r7
 8004f40:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004f44:	4770      	bx	lr
 8004f46:	bf00      	nop
 8004f48:	20000024 	.word	0x20000024
 8004f4c:	14f8b589 	.word	0x14f8b589
 8004f50:	ffff0000 	.word	0xffff0000

08004f54 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004f54:	b580      	push	{r7, lr}
 8004f56:	b088      	sub	sp, #32
 8004f58:	af00      	add	r7, sp, #0
 8004f5a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004f5c:	2300      	movs	r3, #0
 8004f5e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004f60:	687b      	ldr	r3, [r7, #4]
 8004f62:	681b      	ldr	r3, [r3, #0]
 8004f64:	685b      	ldr	r3, [r3, #4]
 8004f66:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004f68:	687b      	ldr	r3, [r7, #4]
 8004f6a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004f6c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004f74:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004f76:	687b      	ldr	r3, [r7, #4]
 8004f78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f7c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004f7e:	7bfb      	ldrb	r3, [r7, #15]
 8004f80:	2b10      	cmp	r3, #16
 8004f82:	d003      	beq.n	8004f8c <HAL_I2C_EV_IRQHandler+0x38>
 8004f84:	7bfb      	ldrb	r3, [r7, #15]
 8004f86:	2b40      	cmp	r3, #64	; 0x40
 8004f88:	f040 80bd 	bne.w	8005106 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f8c:	687b      	ldr	r3, [r7, #4]
 8004f8e:	681b      	ldr	r3, [r3, #0]
 8004f90:	699b      	ldr	r3, [r3, #24]
 8004f92:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f94:	687b      	ldr	r3, [r7, #4]
 8004f96:	681b      	ldr	r3, [r3, #0]
 8004f98:	695b      	ldr	r3, [r3, #20]
 8004f9a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004f9c:	69fb      	ldr	r3, [r7, #28]
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d10d      	bne.n	8004fc2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004fa6:	693b      	ldr	r3, [r7, #16]
 8004fa8:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004fac:	d003      	beq.n	8004fb6 <HAL_I2C_EV_IRQHandler+0x62>
 8004fae:	693b      	ldr	r3, [r7, #16]
 8004fb0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004fb4:	d101      	bne.n	8004fba <HAL_I2C_EV_IRQHandler+0x66>
 8004fb6:	2301      	movs	r3, #1
 8004fb8:	e000      	b.n	8004fbc <HAL_I2C_EV_IRQHandler+0x68>
 8004fba:	2300      	movs	r3, #0
 8004fbc:	2b01      	cmp	r3, #1
 8004fbe:	f000 812e 	beq.w	800521e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fc2:	69fb      	ldr	r3, [r7, #28]
 8004fc4:	f003 0301 	and.w	r3, r3, #1
 8004fc8:	2b00      	cmp	r3, #0
 8004fca:	d00c      	beq.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x92>
 8004fcc:	697b      	ldr	r3, [r7, #20]
 8004fce:	0a5b      	lsrs	r3, r3, #9
 8004fd0:	f003 0301 	and.w	r3, r3, #1
 8004fd4:	2b00      	cmp	r3, #0
 8004fd6:	d006      	beq.n	8004fe6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004fd8:	6878      	ldr	r0, [r7, #4]
 8004fda:	f001 fc55 	bl	8006888 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004fde:	6878      	ldr	r0, [r7, #4]
 8004fe0:	f000 fd62 	bl	8005aa8 <I2C_Master_SB>
 8004fe4:	e08e      	b.n	8005104 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	08db      	lsrs	r3, r3, #3
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d009      	beq.n	8005006 <HAL_I2C_EV_IRQHandler+0xb2>
 8004ff2:	697b      	ldr	r3, [r7, #20]
 8004ff4:	0a5b      	lsrs	r3, r3, #9
 8004ff6:	f003 0301 	and.w	r3, r3, #1
 8004ffa:	2b00      	cmp	r3, #0
 8004ffc:	d003      	beq.n	8005006 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004ffe:	6878      	ldr	r0, [r7, #4]
 8005000:	f000 fdd8 	bl	8005bb4 <I2C_Master_ADD10>
 8005004:	e07e      	b.n	8005104 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005006:	69fb      	ldr	r3, [r7, #28]
 8005008:	085b      	lsrs	r3, r3, #1
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d009      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0xd2>
 8005012:	697b      	ldr	r3, [r7, #20]
 8005014:	0a5b      	lsrs	r3, r3, #9
 8005016:	f003 0301 	and.w	r3, r3, #1
 800501a:	2b00      	cmp	r3, #0
 800501c:	d003      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 fdf2 	bl	8005c08 <I2C_Master_ADDR>
 8005024:	e06e      	b.n	8005104 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8005026:	69bb      	ldr	r3, [r7, #24]
 8005028:	089b      	lsrs	r3, r3, #2
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d037      	beq.n	80050a2 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	685b      	ldr	r3, [r3, #4]
 8005038:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800503c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005040:	f000 80ef 	beq.w	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005044:	69fb      	ldr	r3, [r7, #28]
 8005046:	09db      	lsrs	r3, r3, #7
 8005048:	f003 0301 	and.w	r3, r3, #1
 800504c:	2b00      	cmp	r3, #0
 800504e:	d00f      	beq.n	8005070 <HAL_I2C_EV_IRQHandler+0x11c>
 8005050:	697b      	ldr	r3, [r7, #20]
 8005052:	0a9b      	lsrs	r3, r3, #10
 8005054:	f003 0301 	and.w	r3, r3, #1
 8005058:	2b00      	cmp	r3, #0
 800505a:	d009      	beq.n	8005070 <HAL_I2C_EV_IRQHandler+0x11c>
 800505c:	69fb      	ldr	r3, [r7, #28]
 800505e:	089b      	lsrs	r3, r3, #2
 8005060:	f003 0301 	and.w	r3, r3, #1
 8005064:	2b00      	cmp	r3, #0
 8005066:	d103      	bne.n	8005070 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8005068:	6878      	ldr	r0, [r7, #4]
 800506a:	f000 f9ef 	bl	800544c <I2C_MasterTransmit_TXE>
 800506e:	e049      	b.n	8005104 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005070:	69fb      	ldr	r3, [r7, #28]
 8005072:	089b      	lsrs	r3, r3, #2
 8005074:	f003 0301 	and.w	r3, r3, #1
 8005078:	2b00      	cmp	r3, #0
 800507a:	f000 80d2 	beq.w	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
 800507e:	697b      	ldr	r3, [r7, #20]
 8005080:	0a5b      	lsrs	r3, r3, #9
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	f000 80cb 	beq.w	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800508c:	7bfb      	ldrb	r3, [r7, #15]
 800508e:	2b10      	cmp	r3, #16
 8005090:	d103      	bne.n	800509a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8005092:	6878      	ldr	r0, [r7, #4]
 8005094:	f000 fa76 	bl	8005584 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005098:	e0c3      	b.n	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800509a:	6878      	ldr	r0, [r7, #4]
 800509c:	f000 fada 	bl	8005654 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050a0:	e0bf      	b.n	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80050a2:	687b      	ldr	r3, [r7, #4]
 80050a4:	681b      	ldr	r3, [r3, #0]
 80050a6:	685b      	ldr	r3, [r3, #4]
 80050a8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050ac:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050b0:	f000 80b7 	beq.w	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050b4:	69fb      	ldr	r3, [r7, #28]
 80050b6:	099b      	lsrs	r3, r3, #6
 80050b8:	f003 0301 	and.w	r3, r3, #1
 80050bc:	2b00      	cmp	r3, #0
 80050be:	d00f      	beq.n	80050e0 <HAL_I2C_EV_IRQHandler+0x18c>
 80050c0:	697b      	ldr	r3, [r7, #20]
 80050c2:	0a9b      	lsrs	r3, r3, #10
 80050c4:	f003 0301 	and.w	r3, r3, #1
 80050c8:	2b00      	cmp	r3, #0
 80050ca:	d009      	beq.n	80050e0 <HAL_I2C_EV_IRQHandler+0x18c>
 80050cc:	69fb      	ldr	r3, [r7, #28]
 80050ce:	089b      	lsrs	r3, r3, #2
 80050d0:	f003 0301 	and.w	r3, r3, #1
 80050d4:	2b00      	cmp	r3, #0
 80050d6:	d103      	bne.n	80050e0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80050d8:	6878      	ldr	r0, [r7, #4]
 80050da:	f000 fb4a 	bl	8005772 <I2C_MasterReceive_RXNE>
 80050de:	e011      	b.n	8005104 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050e0:	69fb      	ldr	r3, [r7, #28]
 80050e2:	089b      	lsrs	r3, r3, #2
 80050e4:	f003 0301 	and.w	r3, r3, #1
 80050e8:	2b00      	cmp	r3, #0
 80050ea:	f000 809a 	beq.w	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
 80050ee:	697b      	ldr	r3, [r7, #20]
 80050f0:	0a5b      	lsrs	r3, r3, #9
 80050f2:	f003 0301 	and.w	r3, r3, #1
 80050f6:	2b00      	cmp	r3, #0
 80050f8:	f000 8093 	beq.w	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80050fc:	6878      	ldr	r0, [r7, #4]
 80050fe:	f000 fbe9 	bl	80058d4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005102:	e08e      	b.n	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
 8005104:	e08d      	b.n	8005222 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005106:	687b      	ldr	r3, [r7, #4]
 8005108:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800510a:	2b00      	cmp	r3, #0
 800510c:	d004      	beq.n	8005118 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800510e:	687b      	ldr	r3, [r7, #4]
 8005110:	681b      	ldr	r3, [r3, #0]
 8005112:	695b      	ldr	r3, [r3, #20]
 8005114:	61fb      	str	r3, [r7, #28]
 8005116:	e007      	b.n	8005128 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005118:	687b      	ldr	r3, [r7, #4]
 800511a:	681b      	ldr	r3, [r3, #0]
 800511c:	699b      	ldr	r3, [r3, #24]
 800511e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8005120:	687b      	ldr	r3, [r7, #4]
 8005122:	681b      	ldr	r3, [r3, #0]
 8005124:	695b      	ldr	r3, [r3, #20]
 8005126:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005128:	69fb      	ldr	r3, [r7, #28]
 800512a:	085b      	lsrs	r3, r3, #1
 800512c:	f003 0301 	and.w	r3, r3, #1
 8005130:	2b00      	cmp	r3, #0
 8005132:	d012      	beq.n	800515a <HAL_I2C_EV_IRQHandler+0x206>
 8005134:	697b      	ldr	r3, [r7, #20]
 8005136:	0a5b      	lsrs	r3, r3, #9
 8005138:	f003 0301 	and.w	r3, r3, #1
 800513c:	2b00      	cmp	r3, #0
 800513e:	d00c      	beq.n	800515a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8005140:	687b      	ldr	r3, [r7, #4]
 8005142:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005144:	2b00      	cmp	r3, #0
 8005146:	d003      	beq.n	8005150 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005148:	687b      	ldr	r3, [r7, #4]
 800514a:	681b      	ldr	r3, [r3, #0]
 800514c:	699b      	ldr	r3, [r3, #24]
 800514e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8005150:	69b9      	ldr	r1, [r7, #24]
 8005152:	6878      	ldr	r0, [r7, #4]
 8005154:	f000 ffa7 	bl	80060a6 <I2C_Slave_ADDR>
 8005158:	e066      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800515a:	69fb      	ldr	r3, [r7, #28]
 800515c:	091b      	lsrs	r3, r3, #4
 800515e:	f003 0301 	and.w	r3, r3, #1
 8005162:	2b00      	cmp	r3, #0
 8005164:	d009      	beq.n	800517a <HAL_I2C_EV_IRQHandler+0x226>
 8005166:	697b      	ldr	r3, [r7, #20]
 8005168:	0a5b      	lsrs	r3, r3, #9
 800516a:	f003 0301 	and.w	r3, r3, #1
 800516e:	2b00      	cmp	r3, #0
 8005170:	d003      	beq.n	800517a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8005172:	6878      	ldr	r0, [r7, #4]
 8005174:	f000 ffdc 	bl	8006130 <I2C_Slave_STOPF>
 8005178:	e056      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800517a:	7bbb      	ldrb	r3, [r7, #14]
 800517c:	2b21      	cmp	r3, #33	; 0x21
 800517e:	d002      	beq.n	8005186 <HAL_I2C_EV_IRQHandler+0x232>
 8005180:	7bbb      	ldrb	r3, [r7, #14]
 8005182:	2b29      	cmp	r3, #41	; 0x29
 8005184:	d125      	bne.n	80051d2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005186:	69fb      	ldr	r3, [r7, #28]
 8005188:	09db      	lsrs	r3, r3, #7
 800518a:	f003 0301 	and.w	r3, r3, #1
 800518e:	2b00      	cmp	r3, #0
 8005190:	d00f      	beq.n	80051b2 <HAL_I2C_EV_IRQHandler+0x25e>
 8005192:	697b      	ldr	r3, [r7, #20]
 8005194:	0a9b      	lsrs	r3, r3, #10
 8005196:	f003 0301 	and.w	r3, r3, #1
 800519a:	2b00      	cmp	r3, #0
 800519c:	d009      	beq.n	80051b2 <HAL_I2C_EV_IRQHandler+0x25e>
 800519e:	69fb      	ldr	r3, [r7, #28]
 80051a0:	089b      	lsrs	r3, r3, #2
 80051a2:	f003 0301 	and.w	r3, r3, #1
 80051a6:	2b00      	cmp	r3, #0
 80051a8:	d103      	bne.n	80051b2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 80051aa:	6878      	ldr	r0, [r7, #4]
 80051ac:	f000 febd 	bl	8005f2a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051b0:	e039      	b.n	8005226 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051b2:	69fb      	ldr	r3, [r7, #28]
 80051b4:	089b      	lsrs	r3, r3, #2
 80051b6:	f003 0301 	and.w	r3, r3, #1
 80051ba:	2b00      	cmp	r3, #0
 80051bc:	d033      	beq.n	8005226 <HAL_I2C_EV_IRQHandler+0x2d2>
 80051be:	697b      	ldr	r3, [r7, #20]
 80051c0:	0a5b      	lsrs	r3, r3, #9
 80051c2:	f003 0301 	and.w	r3, r3, #1
 80051c6:	2b00      	cmp	r3, #0
 80051c8:	d02d      	beq.n	8005226 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80051ca:	6878      	ldr	r0, [r7, #4]
 80051cc:	f000 feea 	bl	8005fa4 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051d0:	e029      	b.n	8005226 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80051d2:	69fb      	ldr	r3, [r7, #28]
 80051d4:	099b      	lsrs	r3, r3, #6
 80051d6:	f003 0301 	and.w	r3, r3, #1
 80051da:	2b00      	cmp	r3, #0
 80051dc:	d00f      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x2aa>
 80051de:	697b      	ldr	r3, [r7, #20]
 80051e0:	0a9b      	lsrs	r3, r3, #10
 80051e2:	f003 0301 	and.w	r3, r3, #1
 80051e6:	2b00      	cmp	r3, #0
 80051e8:	d009      	beq.n	80051fe <HAL_I2C_EV_IRQHandler+0x2aa>
 80051ea:	69fb      	ldr	r3, [r7, #28]
 80051ec:	089b      	lsrs	r3, r3, #2
 80051ee:	f003 0301 	and.w	r3, r3, #1
 80051f2:	2b00      	cmp	r3, #0
 80051f4:	d103      	bne.n	80051fe <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80051f6:	6878      	ldr	r0, [r7, #4]
 80051f8:	f000 fef5 	bl	8005fe6 <I2C_SlaveReceive_RXNE>
 80051fc:	e014      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80051fe:	69fb      	ldr	r3, [r7, #28]
 8005200:	089b      	lsrs	r3, r3, #2
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00e      	beq.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
 800520a:	697b      	ldr	r3, [r7, #20]
 800520c:	0a5b      	lsrs	r3, r3, #9
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005216:	6878      	ldr	r0, [r7, #4]
 8005218:	f000 ff23 	bl	8006062 <I2C_SlaveReceive_BTF>
 800521c:	e004      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800521e:	bf00      	nop
 8005220:	e002      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005222:	bf00      	nop
 8005224:	e000      	b.n	8005228 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005226:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005228:	3720      	adds	r7, #32
 800522a:	46bd      	mov	sp, r7
 800522c:	bd80      	pop	{r7, pc}

0800522e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800522e:	b580      	push	{r7, lr}
 8005230:	b08a      	sub	sp, #40	; 0x28
 8005232:	af00      	add	r7, sp, #0
 8005234:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	681b      	ldr	r3, [r3, #0]
 800523a:	695b      	ldr	r3, [r3, #20]
 800523c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800523e:	687b      	ldr	r3, [r7, #4]
 8005240:	681b      	ldr	r3, [r3, #0]
 8005242:	685b      	ldr	r3, [r3, #4]
 8005244:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005246:	2300      	movs	r3, #0
 8005248:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800524a:	687b      	ldr	r3, [r7, #4]
 800524c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005250:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005252:	6a3b      	ldr	r3, [r7, #32]
 8005254:	0a1b      	lsrs	r3, r3, #8
 8005256:	f003 0301 	and.w	r3, r3, #1
 800525a:	2b00      	cmp	r3, #0
 800525c:	d00e      	beq.n	800527c <HAL_I2C_ER_IRQHandler+0x4e>
 800525e:	69fb      	ldr	r3, [r7, #28]
 8005260:	0a1b      	lsrs	r3, r3, #8
 8005262:	f003 0301 	and.w	r3, r3, #1
 8005266:	2b00      	cmp	r3, #0
 8005268:	d008      	beq.n	800527c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800526a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800526c:	f043 0301 	orr.w	r3, r3, #1
 8005270:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8005272:	687b      	ldr	r3, [r7, #4]
 8005274:	681b      	ldr	r3, [r3, #0]
 8005276:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800527a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800527c:	6a3b      	ldr	r3, [r7, #32]
 800527e:	0a5b      	lsrs	r3, r3, #9
 8005280:	f003 0301 	and.w	r3, r3, #1
 8005284:	2b00      	cmp	r3, #0
 8005286:	d00e      	beq.n	80052a6 <HAL_I2C_ER_IRQHandler+0x78>
 8005288:	69fb      	ldr	r3, [r7, #28]
 800528a:	0a1b      	lsrs	r3, r3, #8
 800528c:	f003 0301 	and.w	r3, r3, #1
 8005290:	2b00      	cmp	r3, #0
 8005292:	d008      	beq.n	80052a6 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005294:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005296:	f043 0302 	orr.w	r3, r3, #2
 800529a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80052a4:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80052a6:	6a3b      	ldr	r3, [r7, #32]
 80052a8:	0a9b      	lsrs	r3, r3, #10
 80052aa:	f003 0301 	and.w	r3, r3, #1
 80052ae:	2b00      	cmp	r3, #0
 80052b0:	d03f      	beq.n	8005332 <HAL_I2C_ER_IRQHandler+0x104>
 80052b2:	69fb      	ldr	r3, [r7, #28]
 80052b4:	0a1b      	lsrs	r3, r3, #8
 80052b6:	f003 0301 	and.w	r3, r3, #1
 80052ba:	2b00      	cmp	r3, #0
 80052bc:	d039      	beq.n	8005332 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80052be:	7efb      	ldrb	r3, [r7, #27]
 80052c0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80052c2:	687b      	ldr	r3, [r7, #4]
 80052c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80052c6:	b29b      	uxth	r3, r3
 80052c8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80052ca:	687b      	ldr	r3, [r7, #4]
 80052cc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80052d0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80052d2:	687b      	ldr	r3, [r7, #4]
 80052d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80052d6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80052d8:	7ebb      	ldrb	r3, [r7, #26]
 80052da:	2b20      	cmp	r3, #32
 80052dc:	d112      	bne.n	8005304 <HAL_I2C_ER_IRQHandler+0xd6>
 80052de:	697b      	ldr	r3, [r7, #20]
 80052e0:	2b00      	cmp	r3, #0
 80052e2:	d10f      	bne.n	8005304 <HAL_I2C_ER_IRQHandler+0xd6>
 80052e4:	7cfb      	ldrb	r3, [r7, #19]
 80052e6:	2b21      	cmp	r3, #33	; 0x21
 80052e8:	d008      	beq.n	80052fc <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80052ea:	7cfb      	ldrb	r3, [r7, #19]
 80052ec:	2b29      	cmp	r3, #41	; 0x29
 80052ee:	d005      	beq.n	80052fc <HAL_I2C_ER_IRQHandler+0xce>
 80052f0:	7cfb      	ldrb	r3, [r7, #19]
 80052f2:	2b28      	cmp	r3, #40	; 0x28
 80052f4:	d106      	bne.n	8005304 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80052f6:	68fb      	ldr	r3, [r7, #12]
 80052f8:	2b21      	cmp	r3, #33	; 0x21
 80052fa:	d103      	bne.n	8005304 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80052fc:	6878      	ldr	r0, [r7, #4]
 80052fe:	f001 f847 	bl	8006390 <I2C_Slave_AF>
 8005302:	e016      	b.n	8005332 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005304:	687b      	ldr	r3, [r7, #4]
 8005306:	681b      	ldr	r3, [r3, #0]
 8005308:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800530c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800530e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005310:	f043 0304 	orr.w	r3, r3, #4
 8005314:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005316:	7efb      	ldrb	r3, [r7, #27]
 8005318:	2b10      	cmp	r3, #16
 800531a:	d002      	beq.n	8005322 <HAL_I2C_ER_IRQHandler+0xf4>
 800531c:	7efb      	ldrb	r3, [r7, #27]
 800531e:	2b40      	cmp	r3, #64	; 0x40
 8005320:	d107      	bne.n	8005332 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	681b      	ldr	r3, [r3, #0]
 8005326:	681a      	ldr	r2, [r3, #0]
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	681b      	ldr	r3, [r3, #0]
 800532c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005330:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005332:	6a3b      	ldr	r3, [r7, #32]
 8005334:	0adb      	lsrs	r3, r3, #11
 8005336:	f003 0301 	and.w	r3, r3, #1
 800533a:	2b00      	cmp	r3, #0
 800533c:	d00e      	beq.n	800535c <HAL_I2C_ER_IRQHandler+0x12e>
 800533e:	69fb      	ldr	r3, [r7, #28]
 8005340:	0a1b      	lsrs	r3, r3, #8
 8005342:	f003 0301 	and.w	r3, r3, #1
 8005346:	2b00      	cmp	r3, #0
 8005348:	d008      	beq.n	800535c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800534a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800534c:	f043 0308 	orr.w	r3, r3, #8
 8005350:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	681b      	ldr	r3, [r3, #0]
 8005356:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800535a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800535c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800535e:	2b00      	cmp	r3, #0
 8005360:	d008      	beq.n	8005374 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8005362:	687b      	ldr	r3, [r7, #4]
 8005364:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005366:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005368:	431a      	orrs	r2, r3
 800536a:	687b      	ldr	r3, [r7, #4]
 800536c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800536e:	6878      	ldr	r0, [r7, #4]
 8005370:	f001 f87e 	bl	8006470 <I2C_ITError>
  }
}
 8005374:	bf00      	nop
 8005376:	3728      	adds	r7, #40	; 0x28
 8005378:	46bd      	mov	sp, r7
 800537a:	bd80      	pop	{r7, pc}

0800537c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800537c:	b480      	push	{r7}
 800537e:	b083      	sub	sp, #12
 8005380:	af00      	add	r7, sp, #0
 8005382:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005384:	bf00      	nop
 8005386:	370c      	adds	r7, #12
 8005388:	46bd      	mov	sp, r7
 800538a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800538e:	4770      	bx	lr

08005390 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005390:	b480      	push	{r7}
 8005392:	b083      	sub	sp, #12
 8005394:	af00      	add	r7, sp, #0
 8005396:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005398:	bf00      	nop
 800539a:	370c      	adds	r7, #12
 800539c:	46bd      	mov	sp, r7
 800539e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053a2:	4770      	bx	lr

080053a4 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053a4:	b480      	push	{r7}
 80053a6:	b083      	sub	sp, #12
 80053a8:	af00      	add	r7, sp, #0
 80053aa:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80053ac:	bf00      	nop
 80053ae:	370c      	adds	r7, #12
 80053b0:	46bd      	mov	sp, r7
 80053b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053b6:	4770      	bx	lr

080053b8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053b8:	b480      	push	{r7}
 80053ba:	b083      	sub	sp, #12
 80053bc:	af00      	add	r7, sp, #0
 80053be:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80053c0:	bf00      	nop
 80053c2:	370c      	adds	r7, #12
 80053c4:	46bd      	mov	sp, r7
 80053c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053ca:	4770      	bx	lr

080053cc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80053cc:	b480      	push	{r7}
 80053ce:	b083      	sub	sp, #12
 80053d0:	af00      	add	r7, sp, #0
 80053d2:	6078      	str	r0, [r7, #4]
 80053d4:	460b      	mov	r3, r1
 80053d6:	70fb      	strb	r3, [r7, #3]
 80053d8:	4613      	mov	r3, r2
 80053da:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80053dc:	bf00      	nop
 80053de:	370c      	adds	r7, #12
 80053e0:	46bd      	mov	sp, r7
 80053e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053e6:	4770      	bx	lr

080053e8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053e8:	b480      	push	{r7}
 80053ea:	b083      	sub	sp, #12
 80053ec:	af00      	add	r7, sp, #0
 80053ee:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80053f0:	bf00      	nop
 80053f2:	370c      	adds	r7, #12
 80053f4:	46bd      	mov	sp, r7
 80053f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053fa:	4770      	bx	lr

080053fc <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80053fc:	b480      	push	{r7}
 80053fe:	b083      	sub	sp, #12
 8005400:	af00      	add	r7, sp, #0
 8005402:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005404:	bf00      	nop
 8005406:	370c      	adds	r7, #12
 8005408:	46bd      	mov	sp, r7
 800540a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800540e:	4770      	bx	lr

08005410 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005410:	b480      	push	{r7}
 8005412:	b083      	sub	sp, #12
 8005414:	af00      	add	r7, sp, #0
 8005416:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005418:	bf00      	nop
 800541a:	370c      	adds	r7, #12
 800541c:	46bd      	mov	sp, r7
 800541e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005422:	4770      	bx	lr

08005424 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005424:	b480      	push	{r7}
 8005426:	b083      	sub	sp, #12
 8005428:	af00      	add	r7, sp, #0
 800542a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800542c:	bf00      	nop
 800542e:	370c      	adds	r7, #12
 8005430:	46bd      	mov	sp, r7
 8005432:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005436:	4770      	bx	lr

08005438 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005438:	b480      	push	{r7}
 800543a:	b083      	sub	sp, #12
 800543c:	af00      	add	r7, sp, #0
 800543e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8005440:	bf00      	nop
 8005442:	370c      	adds	r7, #12
 8005444:	46bd      	mov	sp, r7
 8005446:	f85d 7b04 	ldr.w	r7, [sp], #4
 800544a:	4770      	bx	lr

0800544c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800544c:	b580      	push	{r7, lr}
 800544e:	b084      	sub	sp, #16
 8005450:	af00      	add	r7, sp, #0
 8005452:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005454:	687b      	ldr	r3, [r7, #4]
 8005456:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800545c:	687b      	ldr	r3, [r7, #4]
 800545e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005462:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005468:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800546e:	2b00      	cmp	r3, #0
 8005470:	d150      	bne.n	8005514 <I2C_MasterTransmit_TXE+0xc8>
 8005472:	7bfb      	ldrb	r3, [r7, #15]
 8005474:	2b21      	cmp	r3, #33	; 0x21
 8005476:	d14d      	bne.n	8005514 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005478:	68bb      	ldr	r3, [r7, #8]
 800547a:	2b08      	cmp	r3, #8
 800547c:	d01d      	beq.n	80054ba <I2C_MasterTransmit_TXE+0x6e>
 800547e:	68bb      	ldr	r3, [r7, #8]
 8005480:	2b20      	cmp	r3, #32
 8005482:	d01a      	beq.n	80054ba <I2C_MasterTransmit_TXE+0x6e>
 8005484:	68bb      	ldr	r3, [r7, #8]
 8005486:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800548a:	d016      	beq.n	80054ba <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800548c:	687b      	ldr	r3, [r7, #4]
 800548e:	681b      	ldr	r3, [r3, #0]
 8005490:	685a      	ldr	r2, [r3, #4]
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800549a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800549c:	687b      	ldr	r3, [r7, #4]
 800549e:	2211      	movs	r2, #17
 80054a0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80054a2:	687b      	ldr	r3, [r7, #4]
 80054a4:	2200      	movs	r2, #0
 80054a6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80054aa:	687b      	ldr	r3, [r7, #4]
 80054ac:	2220      	movs	r2, #32
 80054ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80054b2:	6878      	ldr	r0, [r7, #4]
 80054b4:	f7ff ff62 	bl	800537c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80054b8:	e060      	b.n	800557c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	685a      	ldr	r2, [r3, #4]
 80054c0:	687b      	ldr	r3, [r7, #4]
 80054c2:	681b      	ldr	r3, [r3, #0]
 80054c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054c8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ca:	687b      	ldr	r3, [r7, #4]
 80054cc:	681b      	ldr	r3, [r3, #0]
 80054ce:	681a      	ldr	r2, [r3, #0]
 80054d0:	687b      	ldr	r3, [r7, #4]
 80054d2:	681b      	ldr	r3, [r3, #0]
 80054d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054d8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	2200      	movs	r2, #0
 80054de:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	2220      	movs	r2, #32
 80054e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80054ee:	b2db      	uxtb	r3, r3
 80054f0:	2b40      	cmp	r3, #64	; 0x40
 80054f2:	d107      	bne.n	8005504 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	2200      	movs	r2, #0
 80054f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff ff7d 	bl	80053fc <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005502:	e03b      	b.n	800557c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	2200      	movs	r2, #0
 8005508:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 800550c:	6878      	ldr	r0, [r7, #4]
 800550e:	f7ff ff35 	bl	800537c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005512:	e033      	b.n	800557c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005514:	7bfb      	ldrb	r3, [r7, #15]
 8005516:	2b21      	cmp	r3, #33	; 0x21
 8005518:	d005      	beq.n	8005526 <I2C_MasterTransmit_TXE+0xda>
 800551a:	7bbb      	ldrb	r3, [r7, #14]
 800551c:	2b40      	cmp	r3, #64	; 0x40
 800551e:	d12d      	bne.n	800557c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8005520:	7bfb      	ldrb	r3, [r7, #15]
 8005522:	2b22      	cmp	r3, #34	; 0x22
 8005524:	d12a      	bne.n	800557c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005526:	687b      	ldr	r3, [r7, #4]
 8005528:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800552a:	b29b      	uxth	r3, r3
 800552c:	2b00      	cmp	r3, #0
 800552e:	d108      	bne.n	8005542 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800553e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8005540:	e01c      	b.n	800557c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005542:	687b      	ldr	r3, [r7, #4]
 8005544:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005548:	b2db      	uxtb	r3, r3
 800554a:	2b40      	cmp	r3, #64	; 0x40
 800554c:	d103      	bne.n	8005556 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800554e:	6878      	ldr	r0, [r7, #4]
 8005550:	f000 f880 	bl	8005654 <I2C_MemoryTransmit_TXE_BTF>
}
 8005554:	e012      	b.n	800557c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005556:	687b      	ldr	r3, [r7, #4]
 8005558:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800555a:	781a      	ldrb	r2, [r3, #0]
 800555c:	687b      	ldr	r3, [r7, #4]
 800555e:	681b      	ldr	r3, [r3, #0]
 8005560:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005566:	1c5a      	adds	r2, r3, #1
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800556c:	687b      	ldr	r3, [r7, #4]
 800556e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005570:	b29b      	uxth	r3, r3
 8005572:	3b01      	subs	r3, #1
 8005574:	b29a      	uxth	r2, r3
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800557a:	e7ff      	b.n	800557c <I2C_MasterTransmit_TXE+0x130>
 800557c:	bf00      	nop
 800557e:	3710      	adds	r7, #16
 8005580:	46bd      	mov	sp, r7
 8005582:	bd80      	pop	{r7, pc}

08005584 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005584:	b580      	push	{r7, lr}
 8005586:	b084      	sub	sp, #16
 8005588:	af00      	add	r7, sp, #0
 800558a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800558c:	687b      	ldr	r3, [r7, #4]
 800558e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005590:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005598:	b2db      	uxtb	r3, r3
 800559a:	2b21      	cmp	r3, #33	; 0x21
 800559c:	d156      	bne.n	800564c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800559e:	687b      	ldr	r3, [r7, #4]
 80055a0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055a2:	b29b      	uxth	r3, r3
 80055a4:	2b00      	cmp	r3, #0
 80055a6:	d012      	beq.n	80055ce <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055ac:	781a      	ldrb	r2, [r3, #0]
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055b8:	1c5a      	adds	r2, r3, #1
 80055ba:	687b      	ldr	r3, [r7, #4]
 80055bc:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055c2:	b29b      	uxth	r3, r3
 80055c4:	3b01      	subs	r3, #1
 80055c6:	b29a      	uxth	r2, r3
 80055c8:	687b      	ldr	r3, [r7, #4]
 80055ca:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80055cc:	e03e      	b.n	800564c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80055ce:	68fb      	ldr	r3, [r7, #12]
 80055d0:	2b08      	cmp	r3, #8
 80055d2:	d01d      	beq.n	8005610 <I2C_MasterTransmit_BTF+0x8c>
 80055d4:	68fb      	ldr	r3, [r7, #12]
 80055d6:	2b20      	cmp	r3, #32
 80055d8:	d01a      	beq.n	8005610 <I2C_MasterTransmit_BTF+0x8c>
 80055da:	68fb      	ldr	r3, [r7, #12]
 80055dc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80055e0:	d016      	beq.n	8005610 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055e2:	687b      	ldr	r3, [r7, #4]
 80055e4:	681b      	ldr	r3, [r3, #0]
 80055e6:	685a      	ldr	r2, [r3, #4]
 80055e8:	687b      	ldr	r3, [r7, #4]
 80055ea:	681b      	ldr	r3, [r3, #0]
 80055ec:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80055f0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80055f2:	687b      	ldr	r3, [r7, #4]
 80055f4:	2211      	movs	r2, #17
 80055f6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80055f8:	687b      	ldr	r3, [r7, #4]
 80055fa:	2200      	movs	r2, #0
 80055fc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	2220      	movs	r2, #32
 8005604:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005608:	6878      	ldr	r0, [r7, #4]
 800560a:	f7ff feb7 	bl	800537c <HAL_I2C_MasterTxCpltCallback>
}
 800560e:	e01d      	b.n	800564c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	685a      	ldr	r2, [r3, #4]
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800561e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	681a      	ldr	r2, [r3, #0]
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	681b      	ldr	r3, [r3, #0]
 800562a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800562e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8005630:	687b      	ldr	r3, [r7, #4]
 8005632:	2200      	movs	r2, #0
 8005634:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005636:	687b      	ldr	r3, [r7, #4]
 8005638:	2220      	movs	r2, #32
 800563a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800563e:	687b      	ldr	r3, [r7, #4]
 8005640:	2200      	movs	r2, #0
 8005642:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005646:	6878      	ldr	r0, [r7, #4]
 8005648:	f7ff fe98 	bl	800537c <HAL_I2C_MasterTxCpltCallback>
}
 800564c:	bf00      	nop
 800564e:	3710      	adds	r7, #16
 8005650:	46bd      	mov	sp, r7
 8005652:	bd80      	pop	{r7, pc}

08005654 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005654:	b580      	push	{r7, lr}
 8005656:	b084      	sub	sp, #16
 8005658:	af00      	add	r7, sp, #0
 800565a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800565c:	687b      	ldr	r3, [r7, #4]
 800565e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005662:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005668:	2b00      	cmp	r3, #0
 800566a:	d11d      	bne.n	80056a8 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 800566c:	687b      	ldr	r3, [r7, #4]
 800566e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8005670:	2b01      	cmp	r3, #1
 8005672:	d10b      	bne.n	800568c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005674:	687b      	ldr	r3, [r7, #4]
 8005676:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005678:	b2da      	uxtb	r2, r3
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	681b      	ldr	r3, [r3, #0]
 800567e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8005680:	687b      	ldr	r3, [r7, #4]
 8005682:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005684:	1c9a      	adds	r2, r3, #2
 8005686:	687b      	ldr	r3, [r7, #4]
 8005688:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 800568a:	e06e      	b.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005690:	b29b      	uxth	r3, r3
 8005692:	121b      	asrs	r3, r3, #8
 8005694:	b2da      	uxtb	r2, r3
 8005696:	687b      	ldr	r3, [r7, #4]
 8005698:	681b      	ldr	r3, [r3, #0]
 800569a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056a0:	1c5a      	adds	r2, r3, #1
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056a6:	e060      	b.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80056a8:	687b      	ldr	r3, [r7, #4]
 80056aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056ac:	2b01      	cmp	r3, #1
 80056ae:	d10b      	bne.n	80056c8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80056b4:	b2da      	uxtb	r2, r3
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	681b      	ldr	r3, [r3, #0]
 80056ba:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80056bc:	687b      	ldr	r3, [r7, #4]
 80056be:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056c0:	1c5a      	adds	r2, r3, #1
 80056c2:	687b      	ldr	r3, [r7, #4]
 80056c4:	651a      	str	r2, [r3, #80]	; 0x50
}
 80056c6:	e050      	b.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80056cc:	2b02      	cmp	r3, #2
 80056ce:	d14c      	bne.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80056d0:	7bfb      	ldrb	r3, [r7, #15]
 80056d2:	2b22      	cmp	r3, #34	; 0x22
 80056d4:	d108      	bne.n	80056e8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	681a      	ldr	r2, [r3, #0]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80056e4:	601a      	str	r2, [r3, #0]
}
 80056e6:	e040      	b.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056ec:	b29b      	uxth	r3, r3
 80056ee:	2b00      	cmp	r3, #0
 80056f0:	d015      	beq.n	800571e <I2C_MemoryTransmit_TXE_BTF+0xca>
 80056f2:	7bfb      	ldrb	r3, [r7, #15]
 80056f4:	2b21      	cmp	r3, #33	; 0x21
 80056f6:	d112      	bne.n	800571e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056fc:	781a      	ldrb	r2, [r3, #0]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	681b      	ldr	r3, [r3, #0]
 8005702:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005704:	687b      	ldr	r3, [r7, #4]
 8005706:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005708:	1c5a      	adds	r2, r3, #1
 800570a:	687b      	ldr	r3, [r7, #4]
 800570c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800570e:	687b      	ldr	r3, [r7, #4]
 8005710:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005712:	b29b      	uxth	r3, r3
 8005714:	3b01      	subs	r3, #1
 8005716:	b29a      	uxth	r2, r3
 8005718:	687b      	ldr	r3, [r7, #4]
 800571a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800571c:	e025      	b.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800571e:	687b      	ldr	r3, [r7, #4]
 8005720:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005722:	b29b      	uxth	r3, r3
 8005724:	2b00      	cmp	r3, #0
 8005726:	d120      	bne.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005728:	7bfb      	ldrb	r3, [r7, #15]
 800572a:	2b21      	cmp	r3, #33	; 0x21
 800572c:	d11d      	bne.n	800576a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	681b      	ldr	r3, [r3, #0]
 8005732:	685a      	ldr	r2, [r3, #4]
 8005734:	687b      	ldr	r3, [r7, #4]
 8005736:	681b      	ldr	r3, [r3, #0]
 8005738:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800573c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	681b      	ldr	r3, [r3, #0]
 8005742:	681a      	ldr	r2, [r3, #0]
 8005744:	687b      	ldr	r3, [r7, #4]
 8005746:	681b      	ldr	r3, [r3, #0]
 8005748:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800574c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800574e:	687b      	ldr	r3, [r7, #4]
 8005750:	2200      	movs	r2, #0
 8005752:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2220      	movs	r2, #32
 8005758:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	2200      	movs	r2, #0
 8005760:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005764:	6878      	ldr	r0, [r7, #4]
 8005766:	f7ff fe49 	bl	80053fc <HAL_I2C_MemTxCpltCallback>
}
 800576a:	bf00      	nop
 800576c:	3710      	adds	r7, #16
 800576e:	46bd      	mov	sp, r7
 8005770:	bd80      	pop	{r7, pc}

08005772 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005772:	b580      	push	{r7, lr}
 8005774:	b084      	sub	sp, #16
 8005776:	af00      	add	r7, sp, #0
 8005778:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 800577a:	687b      	ldr	r3, [r7, #4]
 800577c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005780:	b2db      	uxtb	r3, r3
 8005782:	2b22      	cmp	r3, #34	; 0x22
 8005784:	f040 80a2 	bne.w	80058cc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800578c:	b29b      	uxth	r3, r3
 800578e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8005790:	68fb      	ldr	r3, [r7, #12]
 8005792:	2b03      	cmp	r3, #3
 8005794:	d921      	bls.n	80057da <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005796:	687b      	ldr	r3, [r7, #4]
 8005798:	681b      	ldr	r3, [r3, #0]
 800579a:	691a      	ldr	r2, [r3, #16]
 800579c:	687b      	ldr	r3, [r7, #4]
 800579e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a0:	b2d2      	uxtb	r2, r2
 80057a2:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80057a4:	687b      	ldr	r3, [r7, #4]
 80057a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057a8:	1c5a      	adds	r2, r3, #1
 80057aa:	687b      	ldr	r3, [r7, #4]
 80057ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	3b01      	subs	r3, #1
 80057b6:	b29a      	uxth	r2, r3
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80057bc:	687b      	ldr	r3, [r7, #4]
 80057be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057c0:	b29b      	uxth	r3, r3
 80057c2:	2b03      	cmp	r3, #3
 80057c4:	f040 8082 	bne.w	80058cc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	685a      	ldr	r2, [r3, #4]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80057d8:	e078      	b.n	80058cc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057de:	2b02      	cmp	r3, #2
 80057e0:	d074      	beq.n	80058cc <I2C_MasterReceive_RXNE+0x15a>
 80057e2:	68fb      	ldr	r3, [r7, #12]
 80057e4:	2b01      	cmp	r3, #1
 80057e6:	d002      	beq.n	80057ee <I2C_MasterReceive_RXNE+0x7c>
 80057e8:	68fb      	ldr	r3, [r7, #12]
 80057ea:	2b00      	cmp	r3, #0
 80057ec:	d16e      	bne.n	80058cc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f001 f818 	bl	8006824 <I2C_WaitOnSTOPRequestThroughIT>
 80057f4:	4603      	mov	r3, r0
 80057f6:	2b00      	cmp	r3, #0
 80057f8:	d142      	bne.n	8005880 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	681a      	ldr	r2, [r3, #0]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005808:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800580a:	687b      	ldr	r3, [r7, #4]
 800580c:	681b      	ldr	r3, [r3, #0]
 800580e:	685a      	ldr	r2, [r3, #4]
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	681b      	ldr	r3, [r3, #0]
 8005814:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005818:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800581a:	687b      	ldr	r3, [r7, #4]
 800581c:	681b      	ldr	r3, [r3, #0]
 800581e:	691a      	ldr	r2, [r3, #16]
 8005820:	687b      	ldr	r3, [r7, #4]
 8005822:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005824:	b2d2      	uxtb	r2, r2
 8005826:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800582c:	1c5a      	adds	r2, r3, #1
 800582e:	687b      	ldr	r3, [r7, #4]
 8005830:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005836:	b29b      	uxth	r3, r3
 8005838:	3b01      	subs	r3, #1
 800583a:	b29a      	uxth	r2, r3
 800583c:	687b      	ldr	r3, [r7, #4]
 800583e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005840:	687b      	ldr	r3, [r7, #4]
 8005842:	2220      	movs	r2, #32
 8005844:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800584e:	b2db      	uxtb	r3, r3
 8005850:	2b40      	cmp	r3, #64	; 0x40
 8005852:	d10a      	bne.n	800586a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005854:	687b      	ldr	r3, [r7, #4]
 8005856:	2200      	movs	r2, #0
 8005858:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 800585c:	687b      	ldr	r3, [r7, #4]
 800585e:	2200      	movs	r2, #0
 8005860:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8005862:	6878      	ldr	r0, [r7, #4]
 8005864:	f7ff fdd4 	bl	8005410 <HAL_I2C_MemRxCpltCallback>
}
 8005868:	e030      	b.n	80058cc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	2200      	movs	r2, #0
 800586e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005872:	687b      	ldr	r3, [r7, #4]
 8005874:	2212      	movs	r2, #18
 8005876:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005878:	6878      	ldr	r0, [r7, #4]
 800587a:	f7ff fd89 	bl	8005390 <HAL_I2C_MasterRxCpltCallback>
}
 800587e:	e025      	b.n	80058cc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	681b      	ldr	r3, [r3, #0]
 8005884:	685a      	ldr	r2, [r3, #4]
 8005886:	687b      	ldr	r3, [r7, #4]
 8005888:	681b      	ldr	r3, [r3, #0]
 800588a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800588e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	691a      	ldr	r2, [r3, #16]
 8005896:	687b      	ldr	r3, [r7, #4]
 8005898:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800589a:	b2d2      	uxtb	r2, r2
 800589c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800589e:	687b      	ldr	r3, [r7, #4]
 80058a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058a2:	1c5a      	adds	r2, r3, #1
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80058a8:	687b      	ldr	r3, [r7, #4]
 80058aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ac:	b29b      	uxth	r3, r3
 80058ae:	3b01      	subs	r3, #1
 80058b0:	b29a      	uxth	r2, r3
 80058b2:	687b      	ldr	r3, [r7, #4]
 80058b4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80058b6:	687b      	ldr	r3, [r7, #4]
 80058b8:	2220      	movs	r2, #32
 80058ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	2200      	movs	r2, #0
 80058c2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80058c6:	6878      	ldr	r0, [r7, #4]
 80058c8:	f7ff fdac 	bl	8005424 <HAL_I2C_ErrorCallback>
}
 80058cc:	bf00      	nop
 80058ce:	3710      	adds	r7, #16
 80058d0:	46bd      	mov	sp, r7
 80058d2:	bd80      	pop	{r7, pc}

080058d4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80058d4:	b580      	push	{r7, lr}
 80058d6:	b084      	sub	sp, #16
 80058d8:	af00      	add	r7, sp, #0
 80058da:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80058dc:	687b      	ldr	r3, [r7, #4]
 80058de:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80058e0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80058e2:	687b      	ldr	r3, [r7, #4]
 80058e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058e6:	b29b      	uxth	r3, r3
 80058e8:	2b04      	cmp	r3, #4
 80058ea:	d11b      	bne.n	8005924 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80058ec:	687b      	ldr	r3, [r7, #4]
 80058ee:	681b      	ldr	r3, [r3, #0]
 80058f0:	685a      	ldr	r2, [r3, #4]
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	681b      	ldr	r3, [r3, #0]
 80058f6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80058fa:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	691a      	ldr	r2, [r3, #16]
 8005902:	687b      	ldr	r3, [r7, #4]
 8005904:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005906:	b2d2      	uxtb	r2, r2
 8005908:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800590a:	687b      	ldr	r3, [r7, #4]
 800590c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800590e:	1c5a      	adds	r2, r3, #1
 8005910:	687b      	ldr	r3, [r7, #4]
 8005912:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005914:	687b      	ldr	r3, [r7, #4]
 8005916:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005918:	b29b      	uxth	r3, r3
 800591a:	3b01      	subs	r3, #1
 800591c:	b29a      	uxth	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8005922:	e0bd      	b.n	8005aa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005928:	b29b      	uxth	r3, r3
 800592a:	2b03      	cmp	r3, #3
 800592c:	d129      	bne.n	8005982 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	685a      	ldr	r2, [r3, #4]
 8005934:	687b      	ldr	r3, [r7, #4]
 8005936:	681b      	ldr	r3, [r3, #0]
 8005938:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800593c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800593e:	68fb      	ldr	r3, [r7, #12]
 8005940:	2b04      	cmp	r3, #4
 8005942:	d00a      	beq.n	800595a <I2C_MasterReceive_BTF+0x86>
 8005944:	68fb      	ldr	r3, [r7, #12]
 8005946:	2b02      	cmp	r3, #2
 8005948:	d007      	beq.n	800595a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	681b      	ldr	r3, [r3, #0]
 800594e:	681a      	ldr	r2, [r3, #0]
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	681b      	ldr	r3, [r3, #0]
 8005954:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005958:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	681b      	ldr	r3, [r3, #0]
 800595e:	691a      	ldr	r2, [r3, #16]
 8005960:	687b      	ldr	r3, [r7, #4]
 8005962:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005964:	b2d2      	uxtb	r2, r2
 8005966:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800596c:	1c5a      	adds	r2, r3, #1
 800596e:	687b      	ldr	r3, [r7, #4]
 8005970:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005972:	687b      	ldr	r3, [r7, #4]
 8005974:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005976:	b29b      	uxth	r3, r3
 8005978:	3b01      	subs	r3, #1
 800597a:	b29a      	uxth	r2, r3
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005980:	e08e      	b.n	8005aa0 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8005982:	687b      	ldr	r3, [r7, #4]
 8005984:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005986:	b29b      	uxth	r3, r3
 8005988:	2b02      	cmp	r3, #2
 800598a:	d176      	bne.n	8005a7a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800598c:	68fb      	ldr	r3, [r7, #12]
 800598e:	2b01      	cmp	r3, #1
 8005990:	d002      	beq.n	8005998 <I2C_MasterReceive_BTF+0xc4>
 8005992:	68fb      	ldr	r3, [r7, #12]
 8005994:	2b10      	cmp	r3, #16
 8005996:	d108      	bne.n	80059aa <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	681a      	ldr	r2, [r3, #0]
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80059a6:	601a      	str	r2, [r3, #0]
 80059a8:	e019      	b.n	80059de <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80059aa:	68fb      	ldr	r3, [r7, #12]
 80059ac:	2b04      	cmp	r3, #4
 80059ae:	d002      	beq.n	80059b6 <I2C_MasterReceive_BTF+0xe2>
 80059b0:	68fb      	ldr	r3, [r7, #12]
 80059b2:	2b02      	cmp	r3, #2
 80059b4:	d108      	bne.n	80059c8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	681b      	ldr	r3, [r3, #0]
 80059ba:	681a      	ldr	r2, [r3, #0]
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	681b      	ldr	r3, [r3, #0]
 80059c0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80059c4:	601a      	str	r2, [r3, #0]
 80059c6:	e00a      	b.n	80059de <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80059c8:	68fb      	ldr	r3, [r7, #12]
 80059ca:	2b10      	cmp	r3, #16
 80059cc:	d007      	beq.n	80059de <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	681b      	ldr	r3, [r3, #0]
 80059d2:	681a      	ldr	r2, [r3, #0]
 80059d4:	687b      	ldr	r3, [r7, #4]
 80059d6:	681b      	ldr	r3, [r3, #0]
 80059d8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80059dc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80059fa:	b29b      	uxth	r3, r3
 80059fc:	3b01      	subs	r3, #1
 80059fe:	b29a      	uxth	r2, r3
 8005a00:	687b      	ldr	r3, [r7, #4]
 8005a02:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a04:	687b      	ldr	r3, [r7, #4]
 8005a06:	681b      	ldr	r3, [r3, #0]
 8005a08:	691a      	ldr	r2, [r3, #16]
 8005a0a:	687b      	ldr	r3, [r7, #4]
 8005a0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a0e:	b2d2      	uxtb	r2, r2
 8005a10:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a12:	687b      	ldr	r3, [r7, #4]
 8005a14:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a16:	1c5a      	adds	r2, r3, #1
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a20:	b29b      	uxth	r3, r3
 8005a22:	3b01      	subs	r3, #1
 8005a24:	b29a      	uxth	r2, r3
 8005a26:	687b      	ldr	r3, [r7, #4]
 8005a28:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	685a      	ldr	r2, [r3, #4]
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	681b      	ldr	r3, [r3, #0]
 8005a34:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005a38:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	2220      	movs	r2, #32
 8005a3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005a42:	687b      	ldr	r3, [r7, #4]
 8005a44:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a48:	b2db      	uxtb	r3, r3
 8005a4a:	2b40      	cmp	r3, #64	; 0x40
 8005a4c:	d10a      	bne.n	8005a64 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a4e:	687b      	ldr	r3, [r7, #4]
 8005a50:	2200      	movs	r2, #0
 8005a52:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005a56:	687b      	ldr	r3, [r7, #4]
 8005a58:	2200      	movs	r2, #0
 8005a5a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005a5c:	6878      	ldr	r0, [r7, #4]
 8005a5e:	f7ff fcd7 	bl	8005410 <HAL_I2C_MemRxCpltCallback>
}
 8005a62:	e01d      	b.n	8005aa0 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005a64:	687b      	ldr	r3, [r7, #4]
 8005a66:	2200      	movs	r2, #0
 8005a68:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005a6c:	687b      	ldr	r3, [r7, #4]
 8005a6e:	2212      	movs	r2, #18
 8005a70:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8005a72:	6878      	ldr	r0, [r7, #4]
 8005a74:	f7ff fc8c 	bl	8005390 <HAL_I2C_MasterRxCpltCallback>
}
 8005a78:	e012      	b.n	8005aa0 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a7a:	687b      	ldr	r3, [r7, #4]
 8005a7c:	681b      	ldr	r3, [r3, #0]
 8005a7e:	691a      	ldr	r2, [r3, #16]
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a84:	b2d2      	uxtb	r2, r2
 8005a86:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a8c:	1c5a      	adds	r2, r3, #1
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005a96:	b29b      	uxth	r3, r3
 8005a98:	3b01      	subs	r3, #1
 8005a9a:	b29a      	uxth	r2, r3
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005aa0:	bf00      	nop
 8005aa2:	3710      	adds	r7, #16
 8005aa4:	46bd      	mov	sp, r7
 8005aa6:	bd80      	pop	{r7, pc}

08005aa8 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005aa8:	b480      	push	{r7}
 8005aaa:	b083      	sub	sp, #12
 8005aac:	af00      	add	r7, sp, #0
 8005aae:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005ab0:	687b      	ldr	r3, [r7, #4]
 8005ab2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ab6:	b2db      	uxtb	r3, r3
 8005ab8:	2b40      	cmp	r3, #64	; 0x40
 8005aba:	d117      	bne.n	8005aec <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ac0:	2b00      	cmp	r3, #0
 8005ac2:	d109      	bne.n	8005ad8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005ac4:	687b      	ldr	r3, [r7, #4]
 8005ac6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005ac8:	b2db      	uxtb	r3, r3
 8005aca:	461a      	mov	r2, r3
 8005acc:	687b      	ldr	r3, [r7, #4]
 8005ace:	681b      	ldr	r3, [r3, #0]
 8005ad0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005ad4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8005ad6:	e067      	b.n	8005ba8 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005ad8:	687b      	ldr	r3, [r7, #4]
 8005ada:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005adc:	b2db      	uxtb	r3, r3
 8005ade:	f043 0301 	orr.w	r3, r3, #1
 8005ae2:	b2da      	uxtb	r2, r3
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	611a      	str	r2, [r3, #16]
}
 8005aea:	e05d      	b.n	8005ba8 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	691b      	ldr	r3, [r3, #16]
 8005af0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8005af4:	d133      	bne.n	8005b5e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8005af6:	687b      	ldr	r3, [r7, #4]
 8005af8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005afc:	b2db      	uxtb	r3, r3
 8005afe:	2b21      	cmp	r3, #33	; 0x21
 8005b00:	d109      	bne.n	8005b16 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b06:	b2db      	uxtb	r3, r3
 8005b08:	461a      	mov	r2, r3
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8005b12:	611a      	str	r2, [r3, #16]
 8005b14:	e008      	b.n	8005b28 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b1a:	b2db      	uxtb	r3, r3
 8005b1c:	f043 0301 	orr.w	r3, r3, #1
 8005b20:	b2da      	uxtb	r2, r3
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d004      	beq.n	8005b3a <I2C_Master_SB+0x92>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b34:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d108      	bne.n	8005b4c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005b3a:	687b      	ldr	r3, [r7, #4]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	2b00      	cmp	r3, #0
 8005b40:	d032      	beq.n	8005ba8 <I2C_Master_SB+0x100>
 8005b42:	687b      	ldr	r3, [r7, #4]
 8005b44:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b46:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005b48:	2b00      	cmp	r3, #0
 8005b4a:	d02d      	beq.n	8005ba8 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005b4c:	687b      	ldr	r3, [r7, #4]
 8005b4e:	681b      	ldr	r3, [r3, #0]
 8005b50:	685a      	ldr	r2, [r3, #4]
 8005b52:	687b      	ldr	r3, [r7, #4]
 8005b54:	681b      	ldr	r3, [r3, #0]
 8005b56:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005b5a:	605a      	str	r2, [r3, #4]
}
 8005b5c:	e024      	b.n	8005ba8 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005b5e:	687b      	ldr	r3, [r7, #4]
 8005b60:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b62:	2b00      	cmp	r3, #0
 8005b64:	d10e      	bne.n	8005b84 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b6a:	b29b      	uxth	r3, r3
 8005b6c:	11db      	asrs	r3, r3, #7
 8005b6e:	b2db      	uxtb	r3, r3
 8005b70:	f003 0306 	and.w	r3, r3, #6
 8005b74:	b2db      	uxtb	r3, r3
 8005b76:	f063 030f 	orn	r3, r3, #15
 8005b7a:	b2da      	uxtb	r2, r3
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	611a      	str	r2, [r3, #16]
}
 8005b82:	e011      	b.n	8005ba8 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b88:	2b01      	cmp	r3, #1
 8005b8a:	d10d      	bne.n	8005ba8 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005b90:	b29b      	uxth	r3, r3
 8005b92:	11db      	asrs	r3, r3, #7
 8005b94:	b2db      	uxtb	r3, r3
 8005b96:	f003 0306 	and.w	r3, r3, #6
 8005b9a:	b2db      	uxtb	r3, r3
 8005b9c:	f063 030e 	orn	r3, r3, #14
 8005ba0:	b2da      	uxtb	r2, r3
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	611a      	str	r2, [r3, #16]
}
 8005ba8:	bf00      	nop
 8005baa:	370c      	adds	r7, #12
 8005bac:	46bd      	mov	sp, r7
 8005bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005bb2:	4770      	bx	lr

08005bb4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005bb4:	b480      	push	{r7}
 8005bb6:	b083      	sub	sp, #12
 8005bb8:	af00      	add	r7, sp, #0
 8005bba:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005bc0:	b2da      	uxtb	r2, r3
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005bc8:	687b      	ldr	r3, [r7, #4]
 8005bca:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bcc:	2b00      	cmp	r3, #0
 8005bce:	d004      	beq.n	8005bda <I2C_Master_ADD10+0x26>
 8005bd0:	687b      	ldr	r3, [r7, #4]
 8005bd2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005bd4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005bd6:	2b00      	cmp	r3, #0
 8005bd8:	d108      	bne.n	8005bec <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005bda:	687b      	ldr	r3, [r7, #4]
 8005bdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005bde:	2b00      	cmp	r3, #0
 8005be0:	d00c      	beq.n	8005bfc <I2C_Master_ADD10+0x48>
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005be6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005be8:	2b00      	cmp	r3, #0
 8005bea:	d007      	beq.n	8005bfc <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005bec:	687b      	ldr	r3, [r7, #4]
 8005bee:	681b      	ldr	r3, [r3, #0]
 8005bf0:	685a      	ldr	r2, [r3, #4]
 8005bf2:	687b      	ldr	r3, [r7, #4]
 8005bf4:	681b      	ldr	r3, [r3, #0]
 8005bf6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005bfa:	605a      	str	r2, [r3, #4]
  }
}
 8005bfc:	bf00      	nop
 8005bfe:	370c      	adds	r7, #12
 8005c00:	46bd      	mov	sp, r7
 8005c02:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c06:	4770      	bx	lr

08005c08 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005c08:	b480      	push	{r7}
 8005c0a:	b091      	sub	sp, #68	; 0x44
 8005c0c:	af00      	add	r7, sp, #0
 8005c0e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c16:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c1e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005c24:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005c26:	687b      	ldr	r3, [r7, #4]
 8005c28:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005c2c:	b2db      	uxtb	r3, r3
 8005c2e:	2b22      	cmp	r3, #34	; 0x22
 8005c30:	f040 8169 	bne.w	8005f06 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005c34:	687b      	ldr	r3, [r7, #4]
 8005c36:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c38:	2b00      	cmp	r3, #0
 8005c3a:	d10f      	bne.n	8005c5c <I2C_Master_ADDR+0x54>
 8005c3c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005c40:	2b40      	cmp	r3, #64	; 0x40
 8005c42:	d10b      	bne.n	8005c5c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c44:	2300      	movs	r3, #0
 8005c46:	633b      	str	r3, [r7, #48]	; 0x30
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	681b      	ldr	r3, [r3, #0]
 8005c4c:	695b      	ldr	r3, [r3, #20]
 8005c4e:	633b      	str	r3, [r7, #48]	; 0x30
 8005c50:	687b      	ldr	r3, [r7, #4]
 8005c52:	681b      	ldr	r3, [r3, #0]
 8005c54:	699b      	ldr	r3, [r3, #24]
 8005c56:	633b      	str	r3, [r7, #48]	; 0x30
 8005c58:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005c5a:	e160      	b.n	8005f1e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c60:	2b00      	cmp	r3, #0
 8005c62:	d11d      	bne.n	8005ca0 <I2C_Master_ADDR+0x98>
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	691b      	ldr	r3, [r3, #16]
 8005c68:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005c6c:	d118      	bne.n	8005ca0 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005c82:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005c84:	687b      	ldr	r3, [r7, #4]
 8005c86:	681b      	ldr	r3, [r3, #0]
 8005c88:	681a      	ldr	r2, [r3, #0]
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	681b      	ldr	r3, [r3, #0]
 8005c8e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005c92:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005c98:	1c5a      	adds	r2, r3, #1
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	651a      	str	r2, [r3, #80]	; 0x50
 8005c9e:	e13e      	b.n	8005f1e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005ca0:	687b      	ldr	r3, [r7, #4]
 8005ca2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ca4:	b29b      	uxth	r3, r3
 8005ca6:	2b00      	cmp	r3, #0
 8005ca8:	d113      	bne.n	8005cd2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005caa:	2300      	movs	r3, #0
 8005cac:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	695b      	ldr	r3, [r3, #20]
 8005cb4:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cb6:	687b      	ldr	r3, [r7, #4]
 8005cb8:	681b      	ldr	r3, [r3, #0]
 8005cba:	699b      	ldr	r3, [r3, #24]
 8005cbc:	62bb      	str	r3, [r7, #40]	; 0x28
 8005cbe:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cc0:	687b      	ldr	r3, [r7, #4]
 8005cc2:	681b      	ldr	r3, [r3, #0]
 8005cc4:	681a      	ldr	r2, [r3, #0]
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cce:	601a      	str	r2, [r3, #0]
 8005cd0:	e115      	b.n	8005efe <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005cd2:	687b      	ldr	r3, [r7, #4]
 8005cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cd6:	b29b      	uxth	r3, r3
 8005cd8:	2b01      	cmp	r3, #1
 8005cda:	f040 808a 	bne.w	8005df2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005cde:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ce0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ce4:	d137      	bne.n	8005d56 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ce6:	687b      	ldr	r3, [r7, #4]
 8005ce8:	681b      	ldr	r3, [r3, #0]
 8005cea:	681a      	ldr	r2, [r3, #0]
 8005cec:	687b      	ldr	r3, [r7, #4]
 8005cee:	681b      	ldr	r3, [r3, #0]
 8005cf0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005cf4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005cf6:	687b      	ldr	r3, [r7, #4]
 8005cf8:	681b      	ldr	r3, [r3, #0]
 8005cfa:	685b      	ldr	r3, [r3, #4]
 8005cfc:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d00:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d04:	d113      	bne.n	8005d2e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	681a      	ldr	r2, [r3, #0]
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d14:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d16:	2300      	movs	r3, #0
 8005d18:	627b      	str	r3, [r7, #36]	; 0x24
 8005d1a:	687b      	ldr	r3, [r7, #4]
 8005d1c:	681b      	ldr	r3, [r3, #0]
 8005d1e:	695b      	ldr	r3, [r3, #20]
 8005d20:	627b      	str	r3, [r7, #36]	; 0x24
 8005d22:	687b      	ldr	r3, [r7, #4]
 8005d24:	681b      	ldr	r3, [r3, #0]
 8005d26:	699b      	ldr	r3, [r3, #24]
 8005d28:	627b      	str	r3, [r7, #36]	; 0x24
 8005d2a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005d2c:	e0e7      	b.n	8005efe <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d2e:	2300      	movs	r3, #0
 8005d30:	623b      	str	r3, [r7, #32]
 8005d32:	687b      	ldr	r3, [r7, #4]
 8005d34:	681b      	ldr	r3, [r3, #0]
 8005d36:	695b      	ldr	r3, [r3, #20]
 8005d38:	623b      	str	r3, [r7, #32]
 8005d3a:	687b      	ldr	r3, [r7, #4]
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	699b      	ldr	r3, [r3, #24]
 8005d40:	623b      	str	r3, [r7, #32]
 8005d42:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005d44:	687b      	ldr	r3, [r7, #4]
 8005d46:	681b      	ldr	r3, [r3, #0]
 8005d48:	681a      	ldr	r2, [r3, #0]
 8005d4a:	687b      	ldr	r3, [r7, #4]
 8005d4c:	681b      	ldr	r3, [r3, #0]
 8005d4e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005d52:	601a      	str	r2, [r3, #0]
 8005d54:	e0d3      	b.n	8005efe <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005d56:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d58:	2b08      	cmp	r3, #8
 8005d5a:	d02e      	beq.n	8005dba <I2C_Master_ADDR+0x1b2>
 8005d5c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d5e:	2b20      	cmp	r3, #32
 8005d60:	d02b      	beq.n	8005dba <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005d62:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005d64:	2b12      	cmp	r3, #18
 8005d66:	d102      	bne.n	8005d6e <I2C_Master_ADDR+0x166>
 8005d68:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d6a:	2b01      	cmp	r3, #1
 8005d6c:	d125      	bne.n	8005dba <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005d6e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d70:	2b04      	cmp	r3, #4
 8005d72:	d00e      	beq.n	8005d92 <I2C_Master_ADDR+0x18a>
 8005d74:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d76:	2b02      	cmp	r3, #2
 8005d78:	d00b      	beq.n	8005d92 <I2C_Master_ADDR+0x18a>
 8005d7a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d7c:	2b10      	cmp	r3, #16
 8005d7e:	d008      	beq.n	8005d92 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d80:	687b      	ldr	r3, [r7, #4]
 8005d82:	681b      	ldr	r3, [r3, #0]
 8005d84:	681a      	ldr	r2, [r3, #0]
 8005d86:	687b      	ldr	r3, [r7, #4]
 8005d88:	681b      	ldr	r3, [r3, #0]
 8005d8a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d8e:	601a      	str	r2, [r3, #0]
 8005d90:	e007      	b.n	8005da2 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	681b      	ldr	r3, [r3, #0]
 8005d96:	681a      	ldr	r2, [r3, #0]
 8005d98:	687b      	ldr	r3, [r7, #4]
 8005d9a:	681b      	ldr	r3, [r3, #0]
 8005d9c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005da0:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005da2:	2300      	movs	r3, #0
 8005da4:	61fb      	str	r3, [r7, #28]
 8005da6:	687b      	ldr	r3, [r7, #4]
 8005da8:	681b      	ldr	r3, [r3, #0]
 8005daa:	695b      	ldr	r3, [r3, #20]
 8005dac:	61fb      	str	r3, [r7, #28]
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681b      	ldr	r3, [r3, #0]
 8005db2:	699b      	ldr	r3, [r3, #24]
 8005db4:	61fb      	str	r3, [r7, #28]
 8005db6:	69fb      	ldr	r3, [r7, #28]
 8005db8:	e0a1      	b.n	8005efe <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	681a      	ldr	r2, [r3, #0]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005dc8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dca:	2300      	movs	r3, #0
 8005dcc:	61bb      	str	r3, [r7, #24]
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	695b      	ldr	r3, [r3, #20]
 8005dd4:	61bb      	str	r3, [r7, #24]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	699b      	ldr	r3, [r3, #24]
 8005ddc:	61bb      	str	r3, [r7, #24]
 8005dde:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005de0:	687b      	ldr	r3, [r7, #4]
 8005de2:	681b      	ldr	r3, [r3, #0]
 8005de4:	681a      	ldr	r2, [r3, #0]
 8005de6:	687b      	ldr	r3, [r7, #4]
 8005de8:	681b      	ldr	r3, [r3, #0]
 8005dea:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005dee:	601a      	str	r2, [r3, #0]
 8005df0:	e085      	b.n	8005efe <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b02      	cmp	r3, #2
 8005dfa:	d14d      	bne.n	8005e98 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005dfc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005dfe:	2b04      	cmp	r3, #4
 8005e00:	d016      	beq.n	8005e30 <I2C_Master_ADDR+0x228>
 8005e02:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e04:	2b02      	cmp	r3, #2
 8005e06:	d013      	beq.n	8005e30 <I2C_Master_ADDR+0x228>
 8005e08:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e0a:	2b10      	cmp	r3, #16
 8005e0c:	d010      	beq.n	8005e30 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e0e:	687b      	ldr	r3, [r7, #4]
 8005e10:	681b      	ldr	r3, [r3, #0]
 8005e12:	681a      	ldr	r2, [r3, #0]
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	681b      	ldr	r3, [r3, #0]
 8005e18:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e1c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	681b      	ldr	r3, [r3, #0]
 8005e22:	681a      	ldr	r2, [r3, #0]
 8005e24:	687b      	ldr	r3, [r7, #4]
 8005e26:	681b      	ldr	r3, [r3, #0]
 8005e28:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005e2c:	601a      	str	r2, [r3, #0]
 8005e2e:	e007      	b.n	8005e40 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	681b      	ldr	r3, [r3, #0]
 8005e34:	681a      	ldr	r2, [r3, #0]
 8005e36:	687b      	ldr	r3, [r7, #4]
 8005e38:	681b      	ldr	r3, [r3, #0]
 8005e3a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005e3e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005e40:	687b      	ldr	r3, [r7, #4]
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	685b      	ldr	r3, [r3, #4]
 8005e46:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005e4a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005e4e:	d117      	bne.n	8005e80 <I2C_Master_ADDR+0x278>
 8005e50:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e52:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005e56:	d00b      	beq.n	8005e70 <I2C_Master_ADDR+0x268>
 8005e58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e5a:	2b01      	cmp	r3, #1
 8005e5c:	d008      	beq.n	8005e70 <I2C_Master_ADDR+0x268>
 8005e5e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e60:	2b08      	cmp	r3, #8
 8005e62:	d005      	beq.n	8005e70 <I2C_Master_ADDR+0x268>
 8005e64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e66:	2b10      	cmp	r3, #16
 8005e68:	d002      	beq.n	8005e70 <I2C_Master_ADDR+0x268>
 8005e6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005e6c:	2b20      	cmp	r3, #32
 8005e6e:	d107      	bne.n	8005e80 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	685a      	ldr	r2, [r3, #4]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	681b      	ldr	r3, [r3, #0]
 8005e7a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005e7e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005e80:	2300      	movs	r3, #0
 8005e82:	617b      	str	r3, [r7, #20]
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	681b      	ldr	r3, [r3, #0]
 8005e88:	695b      	ldr	r3, [r3, #20]
 8005e8a:	617b      	str	r3, [r7, #20]
 8005e8c:	687b      	ldr	r3, [r7, #4]
 8005e8e:	681b      	ldr	r3, [r3, #0]
 8005e90:	699b      	ldr	r3, [r3, #24]
 8005e92:	617b      	str	r3, [r7, #20]
 8005e94:	697b      	ldr	r3, [r7, #20]
 8005e96:	e032      	b.n	8005efe <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	681b      	ldr	r3, [r3, #0]
 8005e9c:	681a      	ldr	r2, [r3, #0]
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	681b      	ldr	r3, [r3, #0]
 8005ea2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ea6:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ea8:	687b      	ldr	r3, [r7, #4]
 8005eaa:	681b      	ldr	r3, [r3, #0]
 8005eac:	685b      	ldr	r3, [r3, #4]
 8005eae:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005eb2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005eb6:	d117      	bne.n	8005ee8 <I2C_Master_ADDR+0x2e0>
 8005eb8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005eba:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ebe:	d00b      	beq.n	8005ed8 <I2C_Master_ADDR+0x2d0>
 8005ec0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec2:	2b01      	cmp	r3, #1
 8005ec4:	d008      	beq.n	8005ed8 <I2C_Master_ADDR+0x2d0>
 8005ec6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ec8:	2b08      	cmp	r3, #8
 8005eca:	d005      	beq.n	8005ed8 <I2C_Master_ADDR+0x2d0>
 8005ecc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ece:	2b10      	cmp	r3, #16
 8005ed0:	d002      	beq.n	8005ed8 <I2C_Master_ADDR+0x2d0>
 8005ed2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005ed4:	2b20      	cmp	r3, #32
 8005ed6:	d107      	bne.n	8005ee8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005ed8:	687b      	ldr	r3, [r7, #4]
 8005eda:	681b      	ldr	r3, [r3, #0]
 8005edc:	685a      	ldr	r2, [r3, #4]
 8005ede:	687b      	ldr	r3, [r7, #4]
 8005ee0:	681b      	ldr	r3, [r3, #0]
 8005ee2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ee6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ee8:	2300      	movs	r3, #0
 8005eea:	613b      	str	r3, [r7, #16]
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	681b      	ldr	r3, [r3, #0]
 8005ef0:	695b      	ldr	r3, [r3, #20]
 8005ef2:	613b      	str	r3, [r7, #16]
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	681b      	ldr	r3, [r3, #0]
 8005ef8:	699b      	ldr	r3, [r3, #24]
 8005efa:	613b      	str	r3, [r7, #16]
 8005efc:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005efe:	687b      	ldr	r3, [r7, #4]
 8005f00:	2200      	movs	r2, #0
 8005f02:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005f04:	e00b      	b.n	8005f1e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005f06:	2300      	movs	r3, #0
 8005f08:	60fb      	str	r3, [r7, #12]
 8005f0a:	687b      	ldr	r3, [r7, #4]
 8005f0c:	681b      	ldr	r3, [r3, #0]
 8005f0e:	695b      	ldr	r3, [r3, #20]
 8005f10:	60fb      	str	r3, [r7, #12]
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	681b      	ldr	r3, [r3, #0]
 8005f16:	699b      	ldr	r3, [r3, #24]
 8005f18:	60fb      	str	r3, [r7, #12]
 8005f1a:	68fb      	ldr	r3, [r7, #12]
}
 8005f1c:	e7ff      	b.n	8005f1e <I2C_Master_ADDR+0x316>
 8005f1e:	bf00      	nop
 8005f20:	3744      	adds	r7, #68	; 0x44
 8005f22:	46bd      	mov	sp, r7
 8005f24:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f28:	4770      	bx	lr

08005f2a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005f2a:	b580      	push	{r7, lr}
 8005f2c:	b084      	sub	sp, #16
 8005f2e:	af00      	add	r7, sp, #0
 8005f30:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f32:	687b      	ldr	r3, [r7, #4]
 8005f34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f38:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005f3a:	687b      	ldr	r3, [r7, #4]
 8005f3c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3e:	b29b      	uxth	r3, r3
 8005f40:	2b00      	cmp	r3, #0
 8005f42:	d02b      	beq.n	8005f9c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005f44:	687b      	ldr	r3, [r7, #4]
 8005f46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f48:	781a      	ldrb	r2, [r3, #0]
 8005f4a:	687b      	ldr	r3, [r7, #4]
 8005f4c:	681b      	ldr	r3, [r3, #0]
 8005f4e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f54:	1c5a      	adds	r2, r3, #1
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f5a:	687b      	ldr	r3, [r7, #4]
 8005f5c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5e:	b29b      	uxth	r3, r3
 8005f60:	3b01      	subs	r3, #1
 8005f62:	b29a      	uxth	r2, r3
 8005f64:	687b      	ldr	r3, [r7, #4]
 8005f66:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005f68:	687b      	ldr	r3, [r7, #4]
 8005f6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f6c:	b29b      	uxth	r3, r3
 8005f6e:	2b00      	cmp	r3, #0
 8005f70:	d114      	bne.n	8005f9c <I2C_SlaveTransmit_TXE+0x72>
 8005f72:	7bfb      	ldrb	r3, [r7, #15]
 8005f74:	2b29      	cmp	r3, #41	; 0x29
 8005f76:	d111      	bne.n	8005f9c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f78:	687b      	ldr	r3, [r7, #4]
 8005f7a:	681b      	ldr	r3, [r3, #0]
 8005f7c:	685a      	ldr	r2, [r3, #4]
 8005f7e:	687b      	ldr	r3, [r7, #4]
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f86:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005f88:	687b      	ldr	r3, [r7, #4]
 8005f8a:	2221      	movs	r2, #33	; 0x21
 8005f8c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f8e:	687b      	ldr	r3, [r7, #4]
 8005f90:	2228      	movs	r2, #40	; 0x28
 8005f92:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005f96:	6878      	ldr	r0, [r7, #4]
 8005f98:	f7ff fa04 	bl	80053a4 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f9c:	bf00      	nop
 8005f9e:	3710      	adds	r7, #16
 8005fa0:	46bd      	mov	sp, r7
 8005fa2:	bd80      	pop	{r7, pc}

08005fa4 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005fa4:	b480      	push	{r7}
 8005fa6:	b083      	sub	sp, #12
 8005fa8:	af00      	add	r7, sp, #0
 8005faa:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005fac:	687b      	ldr	r3, [r7, #4]
 8005fae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fb0:	b29b      	uxth	r3, r3
 8005fb2:	2b00      	cmp	r3, #0
 8005fb4:	d011      	beq.n	8005fda <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fba:	781a      	ldrb	r2, [r3, #0]
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	681b      	ldr	r3, [r3, #0]
 8005fc0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005fc2:	687b      	ldr	r3, [r7, #4]
 8005fc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005fc6:	1c5a      	adds	r2, r3, #1
 8005fc8:	687b      	ldr	r3, [r7, #4]
 8005fca:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005fcc:	687b      	ldr	r3, [r7, #4]
 8005fce:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fd0:	b29b      	uxth	r3, r3
 8005fd2:	3b01      	subs	r3, #1
 8005fd4:	b29a      	uxth	r2, r3
 8005fd6:	687b      	ldr	r3, [r7, #4]
 8005fd8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005fda:	bf00      	nop
 8005fdc:	370c      	adds	r7, #12
 8005fde:	46bd      	mov	sp, r7
 8005fe0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005fe4:	4770      	bx	lr

08005fe6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005fe6:	b580      	push	{r7, lr}
 8005fe8:	b084      	sub	sp, #16
 8005fea:	af00      	add	r7, sp, #0
 8005fec:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005fee:	687b      	ldr	r3, [r7, #4]
 8005ff0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ff4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ff6:	687b      	ldr	r3, [r7, #4]
 8005ff8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ffa:	b29b      	uxth	r3, r3
 8005ffc:	2b00      	cmp	r3, #0
 8005ffe:	d02c      	beq.n	800605a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	691a      	ldr	r2, [r3, #16]
 8006006:	687b      	ldr	r3, [r7, #4]
 8006008:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800600a:	b2d2      	uxtb	r2, r2
 800600c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800600e:	687b      	ldr	r3, [r7, #4]
 8006010:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006012:	1c5a      	adds	r2, r3, #1
 8006014:	687b      	ldr	r3, [r7, #4]
 8006016:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8006018:	687b      	ldr	r3, [r7, #4]
 800601a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800601c:	b29b      	uxth	r3, r3
 800601e:	3b01      	subs	r3, #1
 8006020:	b29a      	uxth	r2, r3
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800602a:	b29b      	uxth	r3, r3
 800602c:	2b00      	cmp	r3, #0
 800602e:	d114      	bne.n	800605a <I2C_SlaveReceive_RXNE+0x74>
 8006030:	7bfb      	ldrb	r3, [r7, #15]
 8006032:	2b2a      	cmp	r3, #42	; 0x2a
 8006034:	d111      	bne.n	800605a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	685a      	ldr	r2, [r3, #4]
 800603c:	687b      	ldr	r3, [r7, #4]
 800603e:	681b      	ldr	r3, [r3, #0]
 8006040:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006044:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	2222      	movs	r2, #34	; 0x22
 800604a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800604c:	687b      	ldr	r3, [r7, #4]
 800604e:	2228      	movs	r2, #40	; 0x28
 8006050:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006054:	6878      	ldr	r0, [r7, #4]
 8006056:	f7ff f9af 	bl	80053b8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800605a:	bf00      	nop
 800605c:	3710      	adds	r7, #16
 800605e:	46bd      	mov	sp, r7
 8006060:	bd80      	pop	{r7, pc}

08006062 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8006062:	b480      	push	{r7}
 8006064:	b083      	sub	sp, #12
 8006066:	af00      	add	r7, sp, #0
 8006068:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800606a:	687b      	ldr	r3, [r7, #4]
 800606c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800606e:	b29b      	uxth	r3, r3
 8006070:	2b00      	cmp	r3, #0
 8006072:	d012      	beq.n	800609a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	681b      	ldr	r3, [r3, #0]
 8006078:	691a      	ldr	r2, [r3, #16]
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800607e:	b2d2      	uxtb	r2, r2
 8006080:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8006082:	687b      	ldr	r3, [r7, #4]
 8006084:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006086:	1c5a      	adds	r2, r3, #1
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800608c:	687b      	ldr	r3, [r7, #4]
 800608e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006090:	b29b      	uxth	r3, r3
 8006092:	3b01      	subs	r3, #1
 8006094:	b29a      	uxth	r2, r3
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800609a:	bf00      	nop
 800609c:	370c      	adds	r7, #12
 800609e:	46bd      	mov	sp, r7
 80060a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80060a4:	4770      	bx	lr

080060a6 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 80060a6:	b580      	push	{r7, lr}
 80060a8:	b084      	sub	sp, #16
 80060aa:	af00      	add	r7, sp, #0
 80060ac:	6078      	str	r0, [r7, #4]
 80060ae:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80060b0:	2300      	movs	r3, #0
 80060b2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80060b4:	687b      	ldr	r3, [r7, #4]
 80060b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80060ba:	b2db      	uxtb	r3, r3
 80060bc:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80060c0:	2b28      	cmp	r3, #40	; 0x28
 80060c2:	d127      	bne.n	8006114 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80060c4:	687b      	ldr	r3, [r7, #4]
 80060c6:	681b      	ldr	r3, [r3, #0]
 80060c8:	685a      	ldr	r2, [r3, #4]
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	681b      	ldr	r3, [r3, #0]
 80060ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80060d2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80060d4:	683b      	ldr	r3, [r7, #0]
 80060d6:	089b      	lsrs	r3, r3, #2
 80060d8:	f003 0301 	and.w	r3, r3, #1
 80060dc:	2b00      	cmp	r3, #0
 80060de:	d101      	bne.n	80060e4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80060e0:	2301      	movs	r3, #1
 80060e2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80060e4:	683b      	ldr	r3, [r7, #0]
 80060e6:	09db      	lsrs	r3, r3, #7
 80060e8:	f003 0301 	and.w	r3, r3, #1
 80060ec:	2b00      	cmp	r3, #0
 80060ee:	d103      	bne.n	80060f8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80060f0:	687b      	ldr	r3, [r7, #4]
 80060f2:	68db      	ldr	r3, [r3, #12]
 80060f4:	81bb      	strh	r3, [r7, #12]
 80060f6:	e002      	b.n	80060fe <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	699b      	ldr	r3, [r3, #24]
 80060fc:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80060fe:	687b      	ldr	r3, [r7, #4]
 8006100:	2200      	movs	r2, #0
 8006102:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8006106:	89ba      	ldrh	r2, [r7, #12]
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	4619      	mov	r1, r3
 800610c:	6878      	ldr	r0, [r7, #4]
 800610e:	f7ff f95d 	bl	80053cc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8006112:	e008      	b.n	8006126 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	681b      	ldr	r3, [r3, #0]
 8006118:	f06f 0202 	mvn.w	r2, #2
 800611c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8006126:	bf00      	nop
 8006128:	3710      	adds	r7, #16
 800612a:	46bd      	mov	sp, r7
 800612c:	bd80      	pop	{r7, pc}
	...

08006130 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8006130:	b580      	push	{r7, lr}
 8006132:	b084      	sub	sp, #16
 8006134:	af00      	add	r7, sp, #0
 8006136:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006138:	687b      	ldr	r3, [r7, #4]
 800613a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800613e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	685a      	ldr	r2, [r3, #4]
 8006146:	687b      	ldr	r3, [r7, #4]
 8006148:	681b      	ldr	r3, [r3, #0]
 800614a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800614e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8006150:	2300      	movs	r3, #0
 8006152:	60bb      	str	r3, [r7, #8]
 8006154:	687b      	ldr	r3, [r7, #4]
 8006156:	681b      	ldr	r3, [r3, #0]
 8006158:	695b      	ldr	r3, [r3, #20]
 800615a:	60bb      	str	r3, [r7, #8]
 800615c:	687b      	ldr	r3, [r7, #4]
 800615e:	681b      	ldr	r3, [r3, #0]
 8006160:	681a      	ldr	r2, [r3, #0]
 8006162:	687b      	ldr	r3, [r7, #4]
 8006164:	681b      	ldr	r3, [r3, #0]
 8006166:	f042 0201 	orr.w	r2, r2, #1
 800616a:	601a      	str	r2, [r3, #0]
 800616c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	681b      	ldr	r3, [r3, #0]
 8006172:	681a      	ldr	r2, [r3, #0]
 8006174:	687b      	ldr	r3, [r7, #4]
 8006176:	681b      	ldr	r3, [r3, #0]
 8006178:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800617c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	685b      	ldr	r3, [r3, #4]
 8006184:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006188:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800618c:	d172      	bne.n	8006274 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800618e:	7bfb      	ldrb	r3, [r7, #15]
 8006190:	2b22      	cmp	r3, #34	; 0x22
 8006192:	d002      	beq.n	800619a <I2C_Slave_STOPF+0x6a>
 8006194:	7bfb      	ldrb	r3, [r7, #15]
 8006196:	2b2a      	cmp	r3, #42	; 0x2a
 8006198:	d135      	bne.n	8006206 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800619e:	681b      	ldr	r3, [r3, #0]
 80061a0:	685b      	ldr	r3, [r3, #4]
 80061a2:	b29a      	uxth	r2, r3
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061ac:	b29b      	uxth	r3, r3
 80061ae:	2b00      	cmp	r3, #0
 80061b0:	d005      	beq.n	80061be <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061b6:	f043 0204 	orr.w	r2, r3, #4
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80061be:	687b      	ldr	r3, [r7, #4]
 80061c0:	681b      	ldr	r3, [r3, #0]
 80061c2:	685a      	ldr	r2, [r3, #4]
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80061cc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80061ce:	687b      	ldr	r3, [r7, #4]
 80061d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061d2:	4618      	mov	r0, r3
 80061d4:	f7fe fa30 	bl	8004638 <HAL_DMA_GetState>
 80061d8:	4603      	mov	r3, r0
 80061da:	2b01      	cmp	r3, #1
 80061dc:	d049      	beq.n	8006272 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061e2:	4a69      	ldr	r2, [pc, #420]	; (8006388 <I2C_Slave_STOPF+0x258>)
 80061e4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80061e6:	687b      	ldr	r3, [r7, #4]
 80061e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061ea:	4618      	mov	r0, r3
 80061ec:	f7fe f878 	bl	80042e0 <HAL_DMA_Abort_IT>
 80061f0:	4603      	mov	r3, r0
 80061f2:	2b00      	cmp	r3, #0
 80061f4:	d03d      	beq.n	8006272 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80061f6:	687b      	ldr	r3, [r7, #4]
 80061f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80061fa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80061fc:	687a      	ldr	r2, [r7, #4]
 80061fe:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8006200:	4610      	mov	r0, r2
 8006202:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006204:	e035      	b.n	8006272 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006206:	687b      	ldr	r3, [r7, #4]
 8006208:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800620a:	681b      	ldr	r3, [r3, #0]
 800620c:	685b      	ldr	r3, [r3, #4]
 800620e:	b29a      	uxth	r2, r3
 8006210:	687b      	ldr	r3, [r7, #4]
 8006212:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006218:	b29b      	uxth	r3, r3
 800621a:	2b00      	cmp	r3, #0
 800621c:	d005      	beq.n	800622a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800621e:	687b      	ldr	r3, [r7, #4]
 8006220:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006222:	f043 0204 	orr.w	r2, r3, #4
 8006226:	687b      	ldr	r3, [r7, #4]
 8006228:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	685a      	ldr	r2, [r3, #4]
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	681b      	ldr	r3, [r3, #0]
 8006234:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006238:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800623a:	687b      	ldr	r3, [r7, #4]
 800623c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800623e:	4618      	mov	r0, r3
 8006240:	f7fe f9fa 	bl	8004638 <HAL_DMA_GetState>
 8006244:	4603      	mov	r3, r0
 8006246:	2b01      	cmp	r3, #1
 8006248:	d014      	beq.n	8006274 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800624a:	687b      	ldr	r3, [r7, #4]
 800624c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800624e:	4a4e      	ldr	r2, [pc, #312]	; (8006388 <I2C_Slave_STOPF+0x258>)
 8006250:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006252:	687b      	ldr	r3, [r7, #4]
 8006254:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006256:	4618      	mov	r0, r3
 8006258:	f7fe f842 	bl	80042e0 <HAL_DMA_Abort_IT>
 800625c:	4603      	mov	r3, r0
 800625e:	2b00      	cmp	r3, #0
 8006260:	d008      	beq.n	8006274 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006262:	687b      	ldr	r3, [r7, #4]
 8006264:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006266:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006268:	687a      	ldr	r2, [r7, #4]
 800626a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800626c:	4610      	mov	r0, r2
 800626e:	4798      	blx	r3
 8006270:	e000      	b.n	8006274 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006272:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006278:	b29b      	uxth	r3, r3
 800627a:	2b00      	cmp	r3, #0
 800627c:	d03e      	beq.n	80062fc <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800627e:	687b      	ldr	r3, [r7, #4]
 8006280:	681b      	ldr	r3, [r3, #0]
 8006282:	695b      	ldr	r3, [r3, #20]
 8006284:	f003 0304 	and.w	r3, r3, #4
 8006288:	2b04      	cmp	r3, #4
 800628a:	d112      	bne.n	80062b2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800628c:	687b      	ldr	r3, [r7, #4]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	691a      	ldr	r2, [r3, #16]
 8006292:	687b      	ldr	r3, [r7, #4]
 8006294:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006296:	b2d2      	uxtb	r2, r2
 8006298:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800629e:	1c5a      	adds	r2, r3, #1
 80062a0:	687b      	ldr	r3, [r7, #4]
 80062a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062a8:	b29b      	uxth	r3, r3
 80062aa:	3b01      	subs	r3, #1
 80062ac:	b29a      	uxth	r2, r3
 80062ae:	687b      	ldr	r3, [r7, #4]
 80062b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80062b2:	687b      	ldr	r3, [r7, #4]
 80062b4:	681b      	ldr	r3, [r3, #0]
 80062b6:	695b      	ldr	r3, [r3, #20]
 80062b8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80062bc:	2b40      	cmp	r3, #64	; 0x40
 80062be:	d112      	bne.n	80062e6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	691a      	ldr	r2, [r3, #16]
 80062c6:	687b      	ldr	r3, [r7, #4]
 80062c8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062ca:	b2d2      	uxtb	r2, r2
 80062cc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80062ce:	687b      	ldr	r3, [r7, #4]
 80062d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80062d2:	1c5a      	adds	r2, r3, #1
 80062d4:	687b      	ldr	r3, [r7, #4]
 80062d6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062dc:	b29b      	uxth	r3, r3
 80062de:	3b01      	subs	r3, #1
 80062e0:	b29a      	uxth	r2, r3
 80062e2:	687b      	ldr	r3, [r7, #4]
 80062e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80062ea:	b29b      	uxth	r3, r3
 80062ec:	2b00      	cmp	r3, #0
 80062ee:	d005      	beq.n	80062fc <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80062f0:	687b      	ldr	r3, [r7, #4]
 80062f2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80062f4:	f043 0204 	orr.w	r2, r3, #4
 80062f8:	687b      	ldr	r3, [r7, #4]
 80062fa:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006300:	2b00      	cmp	r3, #0
 8006302:	d003      	beq.n	800630c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006304:	6878      	ldr	r0, [r7, #4]
 8006306:	f000 f8b3 	bl	8006470 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 800630a:	e039      	b.n	8006380 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 800630c:	7bfb      	ldrb	r3, [r7, #15]
 800630e:	2b2a      	cmp	r3, #42	; 0x2a
 8006310:	d109      	bne.n	8006326 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8006312:	687b      	ldr	r3, [r7, #4]
 8006314:	2200      	movs	r2, #0
 8006316:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006318:	687b      	ldr	r3, [r7, #4]
 800631a:	2228      	movs	r2, #40	; 0x28
 800631c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006320:	6878      	ldr	r0, [r7, #4]
 8006322:	f7ff f849 	bl	80053b8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800632c:	b2db      	uxtb	r3, r3
 800632e:	2b28      	cmp	r3, #40	; 0x28
 8006330:	d111      	bne.n	8006356 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006332:	687b      	ldr	r3, [r7, #4]
 8006334:	4a15      	ldr	r2, [pc, #84]	; (800638c <I2C_Slave_STOPF+0x25c>)
 8006336:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006338:	687b      	ldr	r3, [r7, #4]
 800633a:	2200      	movs	r2, #0
 800633c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800633e:	687b      	ldr	r3, [r7, #4]
 8006340:	2220      	movs	r2, #32
 8006342:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006346:	687b      	ldr	r3, [r7, #4]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800634e:	6878      	ldr	r0, [r7, #4]
 8006350:	f7ff f84a 	bl	80053e8 <HAL_I2C_ListenCpltCallback>
}
 8006354:	e014      	b.n	8006380 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006356:	687b      	ldr	r3, [r7, #4]
 8006358:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800635a:	2b22      	cmp	r3, #34	; 0x22
 800635c:	d002      	beq.n	8006364 <I2C_Slave_STOPF+0x234>
 800635e:	7bfb      	ldrb	r3, [r7, #15]
 8006360:	2b22      	cmp	r3, #34	; 0x22
 8006362:	d10d      	bne.n	8006380 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	2200      	movs	r2, #0
 8006368:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800636a:	687b      	ldr	r3, [r7, #4]
 800636c:	2220      	movs	r2, #32
 800636e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8006372:	687b      	ldr	r3, [r7, #4]
 8006374:	2200      	movs	r2, #0
 8006376:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800637a:	6878      	ldr	r0, [r7, #4]
 800637c:	f7ff f81c 	bl	80053b8 <HAL_I2C_SlaveRxCpltCallback>
}
 8006380:	bf00      	nop
 8006382:	3710      	adds	r7, #16
 8006384:	46bd      	mov	sp, r7
 8006386:	bd80      	pop	{r7, pc}
 8006388:	080066d5 	.word	0x080066d5
 800638c:	ffff0000 	.word	0xffff0000

08006390 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8006390:	b580      	push	{r7, lr}
 8006392:	b084      	sub	sp, #16
 8006394:	af00      	add	r7, sp, #0
 8006396:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800639e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80063a4:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80063a6:	68bb      	ldr	r3, [r7, #8]
 80063a8:	2b08      	cmp	r3, #8
 80063aa:	d002      	beq.n	80063b2 <I2C_Slave_AF+0x22>
 80063ac:	68bb      	ldr	r3, [r7, #8]
 80063ae:	2b20      	cmp	r3, #32
 80063b0:	d129      	bne.n	8006406 <I2C_Slave_AF+0x76>
 80063b2:	7bfb      	ldrb	r3, [r7, #15]
 80063b4:	2b28      	cmp	r3, #40	; 0x28
 80063b6:	d126      	bne.n	8006406 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80063b8:	687b      	ldr	r3, [r7, #4]
 80063ba:	4a2c      	ldr	r2, [pc, #176]	; (800646c <I2C_Slave_AF+0xdc>)
 80063bc:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80063be:	687b      	ldr	r3, [r7, #4]
 80063c0:	681b      	ldr	r3, [r3, #0]
 80063c2:	685a      	ldr	r2, [r3, #4]
 80063c4:	687b      	ldr	r3, [r7, #4]
 80063c6:	681b      	ldr	r3, [r3, #0]
 80063c8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80063cc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	681b      	ldr	r3, [r3, #0]
 80063d2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80063d6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80063d8:	687b      	ldr	r3, [r7, #4]
 80063da:	681b      	ldr	r3, [r3, #0]
 80063dc:	681a      	ldr	r2, [r3, #0]
 80063de:	687b      	ldr	r3, [r7, #4]
 80063e0:	681b      	ldr	r3, [r3, #0]
 80063e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80063e6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80063e8:	687b      	ldr	r3, [r7, #4]
 80063ea:	2200      	movs	r2, #0
 80063ec:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80063ee:	687b      	ldr	r3, [r7, #4]
 80063f0:	2220      	movs	r2, #32
 80063f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80063f6:	687b      	ldr	r3, [r7, #4]
 80063f8:	2200      	movs	r2, #0
 80063fa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80063fe:	6878      	ldr	r0, [r7, #4]
 8006400:	f7fe fff2 	bl	80053e8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006404:	e02e      	b.n	8006464 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006406:	7bfb      	ldrb	r3, [r7, #15]
 8006408:	2b21      	cmp	r3, #33	; 0x21
 800640a:	d126      	bne.n	800645a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800640c:	687b      	ldr	r3, [r7, #4]
 800640e:	4a17      	ldr	r2, [pc, #92]	; (800646c <I2C_Slave_AF+0xdc>)
 8006410:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8006412:	687b      	ldr	r3, [r7, #4]
 8006414:	2221      	movs	r2, #33	; 0x21
 8006416:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006418:	687b      	ldr	r3, [r7, #4]
 800641a:	2220      	movs	r2, #32
 800641c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006420:	687b      	ldr	r3, [r7, #4]
 8006422:	2200      	movs	r2, #0
 8006424:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	685a      	ldr	r2, [r3, #4]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	681b      	ldr	r3, [r3, #0]
 8006432:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006436:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006438:	687b      	ldr	r3, [r7, #4]
 800643a:	681b      	ldr	r3, [r3, #0]
 800643c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006440:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	681a      	ldr	r2, [r3, #0]
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	681b      	ldr	r3, [r3, #0]
 800644c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006450:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8006452:	6878      	ldr	r0, [r7, #4]
 8006454:	f7fe ffa6 	bl	80053a4 <HAL_I2C_SlaveTxCpltCallback>
}
 8006458:	e004      	b.n	8006464 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800645a:	687b      	ldr	r3, [r7, #4]
 800645c:	681b      	ldr	r3, [r3, #0]
 800645e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8006462:	615a      	str	r2, [r3, #20]
}
 8006464:	bf00      	nop
 8006466:	3710      	adds	r7, #16
 8006468:	46bd      	mov	sp, r7
 800646a:	bd80      	pop	{r7, pc}
 800646c:	ffff0000 	.word	0xffff0000

08006470 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8006470:	b580      	push	{r7, lr}
 8006472:	b084      	sub	sp, #16
 8006474:	af00      	add	r7, sp, #0
 8006476:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006478:	687b      	ldr	r3, [r7, #4]
 800647a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800647e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006486:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006488:	7bbb      	ldrb	r3, [r7, #14]
 800648a:	2b10      	cmp	r3, #16
 800648c:	d002      	beq.n	8006494 <I2C_ITError+0x24>
 800648e:	7bbb      	ldrb	r3, [r7, #14]
 8006490:	2b40      	cmp	r3, #64	; 0x40
 8006492:	d10a      	bne.n	80064aa <I2C_ITError+0x3a>
 8006494:	7bfb      	ldrb	r3, [r7, #15]
 8006496:	2b22      	cmp	r3, #34	; 0x22
 8006498:	d107      	bne.n	80064aa <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800649a:	687b      	ldr	r3, [r7, #4]
 800649c:	681b      	ldr	r3, [r3, #0]
 800649e:	681a      	ldr	r2, [r3, #0]
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80064a8:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80064aa:	7bfb      	ldrb	r3, [r7, #15]
 80064ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80064b0:	2b28      	cmp	r3, #40	; 0x28
 80064b2:	d107      	bne.n	80064c4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80064b4:	687b      	ldr	r3, [r7, #4]
 80064b6:	2200      	movs	r2, #0
 80064b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	2228      	movs	r2, #40	; 0x28
 80064be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80064c2:	e015      	b.n	80064f0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80064c4:	687b      	ldr	r3, [r7, #4]
 80064c6:	681b      	ldr	r3, [r3, #0]
 80064c8:	685b      	ldr	r3, [r3, #4]
 80064ca:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064ce:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064d2:	d00a      	beq.n	80064ea <I2C_ITError+0x7a>
 80064d4:	7bfb      	ldrb	r3, [r7, #15]
 80064d6:	2b60      	cmp	r3, #96	; 0x60
 80064d8:	d007      	beq.n	80064ea <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80064da:	687b      	ldr	r3, [r7, #4]
 80064dc:	2220      	movs	r2, #32
 80064de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80064e2:	687b      	ldr	r3, [r7, #4]
 80064e4:	2200      	movs	r2, #0
 80064e6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	2200      	movs	r2, #0
 80064ee:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80064f0:	687b      	ldr	r3, [r7, #4]
 80064f2:	681b      	ldr	r3, [r3, #0]
 80064f4:	685b      	ldr	r3, [r3, #4]
 80064f6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80064fa:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80064fe:	d162      	bne.n	80065c6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8006500:	687b      	ldr	r3, [r7, #4]
 8006502:	681b      	ldr	r3, [r3, #0]
 8006504:	685a      	ldr	r2, [r3, #4]
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	681b      	ldr	r3, [r3, #0]
 800650a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800650e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8006510:	687b      	ldr	r3, [r7, #4]
 8006512:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006514:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006518:	b2db      	uxtb	r3, r3
 800651a:	2b01      	cmp	r3, #1
 800651c:	d020      	beq.n	8006560 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800651e:	687b      	ldr	r3, [r7, #4]
 8006520:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006522:	4a6a      	ldr	r2, [pc, #424]	; (80066cc <I2C_ITError+0x25c>)
 8006524:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006526:	687b      	ldr	r3, [r7, #4]
 8006528:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800652a:	4618      	mov	r0, r3
 800652c:	f7fd fed8 	bl	80042e0 <HAL_DMA_Abort_IT>
 8006530:	4603      	mov	r3, r0
 8006532:	2b00      	cmp	r3, #0
 8006534:	f000 8089 	beq.w	800664a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006538:	687b      	ldr	r3, [r7, #4]
 800653a:	681b      	ldr	r3, [r3, #0]
 800653c:	681a      	ldr	r2, [r3, #0]
 800653e:	687b      	ldr	r3, [r7, #4]
 8006540:	681b      	ldr	r3, [r3, #0]
 8006542:	f022 0201 	bic.w	r2, r2, #1
 8006546:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	2220      	movs	r2, #32
 800654c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006554:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006556:	687a      	ldr	r2, [r7, #4]
 8006558:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800655a:	4610      	mov	r0, r2
 800655c:	4798      	blx	r3
 800655e:	e074      	b.n	800664a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006564:	4a59      	ldr	r2, [pc, #356]	; (80066cc <I2C_ITError+0x25c>)
 8006566:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006568:	687b      	ldr	r3, [r7, #4]
 800656a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800656c:	4618      	mov	r0, r3
 800656e:	f7fd feb7 	bl	80042e0 <HAL_DMA_Abort_IT>
 8006572:	4603      	mov	r3, r0
 8006574:	2b00      	cmp	r3, #0
 8006576:	d068      	beq.n	800664a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006578:	687b      	ldr	r3, [r7, #4]
 800657a:	681b      	ldr	r3, [r3, #0]
 800657c:	695b      	ldr	r3, [r3, #20]
 800657e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006582:	2b40      	cmp	r3, #64	; 0x40
 8006584:	d10b      	bne.n	800659e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006586:	687b      	ldr	r3, [r7, #4]
 8006588:	681b      	ldr	r3, [r3, #0]
 800658a:	691a      	ldr	r2, [r3, #16]
 800658c:	687b      	ldr	r3, [r7, #4]
 800658e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006590:	b2d2      	uxtb	r2, r2
 8006592:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006594:	687b      	ldr	r3, [r7, #4]
 8006596:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006598:	1c5a      	adds	r2, r3, #1
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800659e:	687b      	ldr	r3, [r7, #4]
 80065a0:	681b      	ldr	r3, [r3, #0]
 80065a2:	681a      	ldr	r2, [r3, #0]
 80065a4:	687b      	ldr	r3, [r7, #4]
 80065a6:	681b      	ldr	r3, [r3, #0]
 80065a8:	f022 0201 	bic.w	r2, r2, #1
 80065ac:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80065ae:	687b      	ldr	r3, [r7, #4]
 80065b0:	2220      	movs	r2, #32
 80065b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80065bc:	687a      	ldr	r2, [r7, #4]
 80065be:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80065c0:	4610      	mov	r0, r2
 80065c2:	4798      	blx	r3
 80065c4:	e041      	b.n	800664a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80065c6:	687b      	ldr	r3, [r7, #4]
 80065c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065cc:	b2db      	uxtb	r3, r3
 80065ce:	2b60      	cmp	r3, #96	; 0x60
 80065d0:	d125      	bne.n	800661e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80065d2:	687b      	ldr	r3, [r7, #4]
 80065d4:	2220      	movs	r2, #32
 80065d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	2200      	movs	r2, #0
 80065de:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80065e0:	687b      	ldr	r3, [r7, #4]
 80065e2:	681b      	ldr	r3, [r3, #0]
 80065e4:	695b      	ldr	r3, [r3, #20]
 80065e6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80065ea:	2b40      	cmp	r3, #64	; 0x40
 80065ec:	d10b      	bne.n	8006606 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80065ee:	687b      	ldr	r3, [r7, #4]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	691a      	ldr	r2, [r3, #16]
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80065f8:	b2d2      	uxtb	r2, r2
 80065fa:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006600:	1c5a      	adds	r2, r3, #1
 8006602:	687b      	ldr	r3, [r7, #4]
 8006604:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006606:	687b      	ldr	r3, [r7, #4]
 8006608:	681b      	ldr	r3, [r3, #0]
 800660a:	681a      	ldr	r2, [r3, #0]
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	681b      	ldr	r3, [r3, #0]
 8006610:	f022 0201 	bic.w	r2, r2, #1
 8006614:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006616:	6878      	ldr	r0, [r7, #4]
 8006618:	f7fe ff0e 	bl	8005438 <HAL_I2C_AbortCpltCallback>
 800661c:	e015      	b.n	800664a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800661e:	687b      	ldr	r3, [r7, #4]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	695b      	ldr	r3, [r3, #20]
 8006624:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006628:	2b40      	cmp	r3, #64	; 0x40
 800662a:	d10b      	bne.n	8006644 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800662c:	687b      	ldr	r3, [r7, #4]
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	691a      	ldr	r2, [r3, #16]
 8006632:	687b      	ldr	r3, [r7, #4]
 8006634:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006636:	b2d2      	uxtb	r2, r2
 8006638:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800663e:	1c5a      	adds	r2, r3, #1
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006644:	6878      	ldr	r0, [r7, #4]
 8006646:	f7fe feed 	bl	8005424 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 800664a:	687b      	ldr	r3, [r7, #4]
 800664c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800664e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006650:	68bb      	ldr	r3, [r7, #8]
 8006652:	f003 0301 	and.w	r3, r3, #1
 8006656:	2b00      	cmp	r3, #0
 8006658:	d10e      	bne.n	8006678 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800665a:	68bb      	ldr	r3, [r7, #8]
 800665c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8006660:	2b00      	cmp	r3, #0
 8006662:	d109      	bne.n	8006678 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006664:	68bb      	ldr	r3, [r7, #8]
 8006666:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 800666a:	2b00      	cmp	r3, #0
 800666c:	d104      	bne.n	8006678 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800666e:	68bb      	ldr	r3, [r7, #8]
 8006670:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006674:	2b00      	cmp	r3, #0
 8006676:	d007      	beq.n	8006688 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006678:	687b      	ldr	r3, [r7, #4]
 800667a:	681b      	ldr	r3, [r3, #0]
 800667c:	685a      	ldr	r2, [r3, #4]
 800667e:	687b      	ldr	r3, [r7, #4]
 8006680:	681b      	ldr	r3, [r3, #0]
 8006682:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006686:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006688:	687b      	ldr	r3, [r7, #4]
 800668a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800668e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8006690:	687b      	ldr	r3, [r7, #4]
 8006692:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006694:	f003 0304 	and.w	r3, r3, #4
 8006698:	2b04      	cmp	r3, #4
 800669a:	d113      	bne.n	80066c4 <I2C_ITError+0x254>
 800669c:	7bfb      	ldrb	r3, [r7, #15]
 800669e:	2b28      	cmp	r3, #40	; 0x28
 80066a0:	d110      	bne.n	80066c4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80066a2:	687b      	ldr	r3, [r7, #4]
 80066a4:	4a0a      	ldr	r2, [pc, #40]	; (80066d0 <I2C_ITError+0x260>)
 80066a6:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2200      	movs	r2, #0
 80066ac:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80066ae:	687b      	ldr	r3, [r7, #4]
 80066b0:	2220      	movs	r2, #32
 80066b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80066b6:	687b      	ldr	r3, [r7, #4]
 80066b8:	2200      	movs	r2, #0
 80066ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80066be:	6878      	ldr	r0, [r7, #4]
 80066c0:	f7fe fe92 	bl	80053e8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80066c4:	bf00      	nop
 80066c6:	3710      	adds	r7, #16
 80066c8:	46bd      	mov	sp, r7
 80066ca:	bd80      	pop	{r7, pc}
 80066cc:	080066d5 	.word	0x080066d5
 80066d0:	ffff0000 	.word	0xffff0000

080066d4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80066d4:	b580      	push	{r7, lr}
 80066d6:	b086      	sub	sp, #24
 80066d8:	af00      	add	r7, sp, #0
 80066da:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066dc:	2300      	movs	r3, #0
 80066de:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80066e0:	687b      	ldr	r3, [r7, #4]
 80066e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80066e4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80066e6:	697b      	ldr	r3, [r7, #20]
 80066e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066ec:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80066ee:	4b4b      	ldr	r3, [pc, #300]	; (800681c <I2C_DMAAbort+0x148>)
 80066f0:	681b      	ldr	r3, [r3, #0]
 80066f2:	08db      	lsrs	r3, r3, #3
 80066f4:	4a4a      	ldr	r2, [pc, #296]	; (8006820 <I2C_DMAAbort+0x14c>)
 80066f6:	fba2 2303 	umull	r2, r3, r2, r3
 80066fa:	0a1a      	lsrs	r2, r3, #8
 80066fc:	4613      	mov	r3, r2
 80066fe:	009b      	lsls	r3, r3, #2
 8006700:	4413      	add	r3, r2
 8006702:	00da      	lsls	r2, r3, #3
 8006704:	1ad3      	subs	r3, r2, r3
 8006706:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006708:	68fb      	ldr	r3, [r7, #12]
 800670a:	2b00      	cmp	r3, #0
 800670c:	d106      	bne.n	800671c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800670e:	697b      	ldr	r3, [r7, #20]
 8006710:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006712:	f043 0220 	orr.w	r2, r3, #32
 8006716:	697b      	ldr	r3, [r7, #20]
 8006718:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 800671a:	e00a      	b.n	8006732 <I2C_DMAAbort+0x5e>
    }
    count--;
 800671c:	68fb      	ldr	r3, [r7, #12]
 800671e:	3b01      	subs	r3, #1
 8006720:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006722:	697b      	ldr	r3, [r7, #20]
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	681b      	ldr	r3, [r3, #0]
 8006728:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800672c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006730:	d0ea      	beq.n	8006708 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8006732:	697b      	ldr	r3, [r7, #20]
 8006734:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006736:	2b00      	cmp	r3, #0
 8006738:	d003      	beq.n	8006742 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 800673a:	697b      	ldr	r3, [r7, #20]
 800673c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800673e:	2200      	movs	r2, #0
 8006740:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8006742:	697b      	ldr	r3, [r7, #20]
 8006744:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006746:	2b00      	cmp	r3, #0
 8006748:	d003      	beq.n	8006752 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 800674a:	697b      	ldr	r3, [r7, #20]
 800674c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800674e:	2200      	movs	r2, #0
 8006750:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8006752:	697b      	ldr	r3, [r7, #20]
 8006754:	681b      	ldr	r3, [r3, #0]
 8006756:	681a      	ldr	r2, [r3, #0]
 8006758:	697b      	ldr	r3, [r7, #20]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006760:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8006762:	697b      	ldr	r3, [r7, #20]
 8006764:	2200      	movs	r2, #0
 8006766:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006768:	697b      	ldr	r3, [r7, #20]
 800676a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800676c:	2b00      	cmp	r3, #0
 800676e:	d003      	beq.n	8006778 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006774:	2200      	movs	r2, #0
 8006776:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006778:	697b      	ldr	r3, [r7, #20]
 800677a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800677c:	2b00      	cmp	r3, #0
 800677e:	d003      	beq.n	8006788 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8006780:	697b      	ldr	r3, [r7, #20]
 8006782:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006784:	2200      	movs	r2, #0
 8006786:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006788:	697b      	ldr	r3, [r7, #20]
 800678a:	681b      	ldr	r3, [r3, #0]
 800678c:	681a      	ldr	r2, [r3, #0]
 800678e:	697b      	ldr	r3, [r7, #20]
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f022 0201 	bic.w	r2, r2, #1
 8006796:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006798:	697b      	ldr	r3, [r7, #20]
 800679a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800679e:	b2db      	uxtb	r3, r3
 80067a0:	2b60      	cmp	r3, #96	; 0x60
 80067a2:	d10e      	bne.n	80067c2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80067a4:	697b      	ldr	r3, [r7, #20]
 80067a6:	2220      	movs	r2, #32
 80067a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80067ac:	697b      	ldr	r3, [r7, #20]
 80067ae:	2200      	movs	r2, #0
 80067b0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80067b4:	697b      	ldr	r3, [r7, #20]
 80067b6:	2200      	movs	r2, #0
 80067b8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80067ba:	6978      	ldr	r0, [r7, #20]
 80067bc:	f7fe fe3c 	bl	8005438 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80067c0:	e027      	b.n	8006812 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80067c2:	7cfb      	ldrb	r3, [r7, #19]
 80067c4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80067c8:	2b28      	cmp	r3, #40	; 0x28
 80067ca:	d117      	bne.n	80067fc <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80067cc:	697b      	ldr	r3, [r7, #20]
 80067ce:	681b      	ldr	r3, [r3, #0]
 80067d0:	681a      	ldr	r2, [r3, #0]
 80067d2:	697b      	ldr	r3, [r7, #20]
 80067d4:	681b      	ldr	r3, [r3, #0]
 80067d6:	f042 0201 	orr.w	r2, r2, #1
 80067da:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80067dc:	697b      	ldr	r3, [r7, #20]
 80067de:	681b      	ldr	r3, [r3, #0]
 80067e0:	681a      	ldr	r2, [r3, #0]
 80067e2:	697b      	ldr	r3, [r7, #20]
 80067e4:	681b      	ldr	r3, [r3, #0]
 80067e6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80067ea:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80067ec:	697b      	ldr	r3, [r7, #20]
 80067ee:	2200      	movs	r2, #0
 80067f0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80067f2:	697b      	ldr	r3, [r7, #20]
 80067f4:	2228      	movs	r2, #40	; 0x28
 80067f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80067fa:	e007      	b.n	800680c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80067fc:	697b      	ldr	r3, [r7, #20]
 80067fe:	2220      	movs	r2, #32
 8006800:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006804:	697b      	ldr	r3, [r7, #20]
 8006806:	2200      	movs	r2, #0
 8006808:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 800680c:	6978      	ldr	r0, [r7, #20]
 800680e:	f7fe fe09 	bl	8005424 <HAL_I2C_ErrorCallback>
}
 8006812:	bf00      	nop
 8006814:	3718      	adds	r7, #24
 8006816:	46bd      	mov	sp, r7
 8006818:	bd80      	pop	{r7, pc}
 800681a:	bf00      	nop
 800681c:	20000024 	.word	0x20000024
 8006820:	14f8b589 	.word	0x14f8b589

08006824 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006824:	b480      	push	{r7}
 8006826:	b085      	sub	sp, #20
 8006828:	af00      	add	r7, sp, #0
 800682a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 800682c:	2300      	movs	r3, #0
 800682e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8006830:	4b13      	ldr	r3, [pc, #76]	; (8006880 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	08db      	lsrs	r3, r3, #3
 8006836:	4a13      	ldr	r2, [pc, #76]	; (8006884 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006838:	fba2 2303 	umull	r2, r3, r2, r3
 800683c:	0a1a      	lsrs	r2, r3, #8
 800683e:	4613      	mov	r3, r2
 8006840:	009b      	lsls	r3, r3, #2
 8006842:	4413      	add	r3, r2
 8006844:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006846:	68fb      	ldr	r3, [r7, #12]
 8006848:	3b01      	subs	r3, #1
 800684a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 800684c:	68fb      	ldr	r3, [r7, #12]
 800684e:	2b00      	cmp	r3, #0
 8006850:	d107      	bne.n	8006862 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8006852:	687b      	ldr	r3, [r7, #4]
 8006854:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006856:	f043 0220 	orr.w	r2, r3, #32
 800685a:	687b      	ldr	r3, [r7, #4]
 800685c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800685e:	2301      	movs	r3, #1
 8006860:	e008      	b.n	8006874 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8006862:	687b      	ldr	r3, [r7, #4]
 8006864:	681b      	ldr	r3, [r3, #0]
 8006866:	681b      	ldr	r3, [r3, #0]
 8006868:	f403 7300 	and.w	r3, r3, #512	; 0x200
 800686c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8006870:	d0e9      	beq.n	8006846 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8006872:	2300      	movs	r3, #0
}
 8006874:	4618      	mov	r0, r3
 8006876:	3714      	adds	r7, #20
 8006878:	46bd      	mov	sp, r7
 800687a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800687e:	4770      	bx	lr
 8006880:	20000024 	.word	0x20000024
 8006884:	14f8b589 	.word	0x14f8b589

08006888 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006888:	b480      	push	{r7}
 800688a:	b083      	sub	sp, #12
 800688c:	af00      	add	r7, sp, #0
 800688e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8006890:	687b      	ldr	r3, [r7, #4]
 8006892:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006894:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006898:	d103      	bne.n	80068a2 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	2201      	movs	r2, #1
 800689e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 80068a0:	e007      	b.n	80068b2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 80068a2:	687b      	ldr	r3, [r7, #4]
 80068a4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80068a6:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80068aa:	d102      	bne.n	80068b2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80068ac:	687b      	ldr	r3, [r7, #4]
 80068ae:	2208      	movs	r2, #8
 80068b0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80068b2:	bf00      	nop
 80068b4:	370c      	adds	r7, #12
 80068b6:	46bd      	mov	sp, r7
 80068b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068bc:	4770      	bx	lr
	...

080068c0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80068c0:	b580      	push	{r7, lr}
 80068c2:	b086      	sub	sp, #24
 80068c4:	af00      	add	r7, sp, #0
 80068c6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80068c8:	687b      	ldr	r3, [r7, #4]
 80068ca:	2b00      	cmp	r3, #0
 80068cc:	d101      	bne.n	80068d2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80068ce:	2301      	movs	r3, #1
 80068d0:	e264      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	681b      	ldr	r3, [r3, #0]
 80068d6:	f003 0301 	and.w	r3, r3, #1
 80068da:	2b00      	cmp	r3, #0
 80068dc:	d075      	beq.n	80069ca <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068de:	4ba3      	ldr	r3, [pc, #652]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068e0:	689b      	ldr	r3, [r3, #8]
 80068e2:	f003 030c 	and.w	r3, r3, #12
 80068e6:	2b04      	cmp	r3, #4
 80068e8:	d00c      	beq.n	8006904 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068ea:	4ba0      	ldr	r3, [pc, #640]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068ec:	689b      	ldr	r3, [r3, #8]
 80068ee:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80068f2:	2b08      	cmp	r3, #8
 80068f4:	d112      	bne.n	800691c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80068f6:	4b9d      	ldr	r3, [pc, #628]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80068f8:	685b      	ldr	r3, [r3, #4]
 80068fa:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068fe:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8006902:	d10b      	bne.n	800691c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006904:	4b99      	ldr	r3, [pc, #612]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006906:	681b      	ldr	r3, [r3, #0]
 8006908:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800690c:	2b00      	cmp	r3, #0
 800690e:	d05b      	beq.n	80069c8 <HAL_RCC_OscConfig+0x108>
 8006910:	687b      	ldr	r3, [r7, #4]
 8006912:	685b      	ldr	r3, [r3, #4]
 8006914:	2b00      	cmp	r3, #0
 8006916:	d157      	bne.n	80069c8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006918:	2301      	movs	r3, #1
 800691a:	e23f      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	685b      	ldr	r3, [r3, #4]
 8006920:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006924:	d106      	bne.n	8006934 <HAL_RCC_OscConfig+0x74>
 8006926:	4b91      	ldr	r3, [pc, #580]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	4a90      	ldr	r2, [pc, #576]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800692c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006930:	6013      	str	r3, [r2, #0]
 8006932:	e01d      	b.n	8006970 <HAL_RCC_OscConfig+0xb0>
 8006934:	687b      	ldr	r3, [r7, #4]
 8006936:	685b      	ldr	r3, [r3, #4]
 8006938:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 800693c:	d10c      	bne.n	8006958 <HAL_RCC_OscConfig+0x98>
 800693e:	4b8b      	ldr	r3, [pc, #556]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006940:	681b      	ldr	r3, [r3, #0]
 8006942:	4a8a      	ldr	r2, [pc, #552]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006944:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006948:	6013      	str	r3, [r2, #0]
 800694a:	4b88      	ldr	r3, [pc, #544]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a87      	ldr	r2, [pc, #540]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006950:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006954:	6013      	str	r3, [r2, #0]
 8006956:	e00b      	b.n	8006970 <HAL_RCC_OscConfig+0xb0>
 8006958:	4b84      	ldr	r3, [pc, #528]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800695a:	681b      	ldr	r3, [r3, #0]
 800695c:	4a83      	ldr	r2, [pc, #524]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800695e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8006962:	6013      	str	r3, [r2, #0]
 8006964:	4b81      	ldr	r3, [pc, #516]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006966:	681b      	ldr	r3, [r3, #0]
 8006968:	4a80      	ldr	r2, [pc, #512]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 800696a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800696e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8006970:	687b      	ldr	r3, [r7, #4]
 8006972:	685b      	ldr	r3, [r3, #4]
 8006974:	2b00      	cmp	r3, #0
 8006976:	d013      	beq.n	80069a0 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006978:	f7fd f9c8 	bl	8003d0c <HAL_GetTick>
 800697c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800697e:	e008      	b.n	8006992 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006980:	f7fd f9c4 	bl	8003d0c <HAL_GetTick>
 8006984:	4602      	mov	r2, r0
 8006986:	693b      	ldr	r3, [r7, #16]
 8006988:	1ad3      	subs	r3, r2, r3
 800698a:	2b64      	cmp	r3, #100	; 0x64
 800698c:	d901      	bls.n	8006992 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800698e:	2303      	movs	r3, #3
 8006990:	e204      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006992:	4b76      	ldr	r3, [pc, #472]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006994:	681b      	ldr	r3, [r3, #0]
 8006996:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800699a:	2b00      	cmp	r3, #0
 800699c:	d0f0      	beq.n	8006980 <HAL_RCC_OscConfig+0xc0>
 800699e:	e014      	b.n	80069ca <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80069a0:	f7fd f9b4 	bl	8003d0c <HAL_GetTick>
 80069a4:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069a6:	e008      	b.n	80069ba <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80069a8:	f7fd f9b0 	bl	8003d0c <HAL_GetTick>
 80069ac:	4602      	mov	r2, r0
 80069ae:	693b      	ldr	r3, [r7, #16]
 80069b0:	1ad3      	subs	r3, r2, r3
 80069b2:	2b64      	cmp	r3, #100	; 0x64
 80069b4:	d901      	bls.n	80069ba <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80069b6:	2303      	movs	r3, #3
 80069b8:	e1f0      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80069ba:	4b6c      	ldr	r3, [pc, #432]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069bc:	681b      	ldr	r3, [r3, #0]
 80069be:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80069c2:	2b00      	cmp	r3, #0
 80069c4:	d1f0      	bne.n	80069a8 <HAL_RCC_OscConfig+0xe8>
 80069c6:	e000      	b.n	80069ca <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80069c8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80069ca:	687b      	ldr	r3, [r7, #4]
 80069cc:	681b      	ldr	r3, [r3, #0]
 80069ce:	f003 0302 	and.w	r3, r3, #2
 80069d2:	2b00      	cmp	r3, #0
 80069d4:	d063      	beq.n	8006a9e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069d6:	4b65      	ldr	r3, [pc, #404]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069d8:	689b      	ldr	r3, [r3, #8]
 80069da:	f003 030c 	and.w	r3, r3, #12
 80069de:	2b00      	cmp	r3, #0
 80069e0:	d00b      	beq.n	80069fa <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069e2:	4b62      	ldr	r3, [pc, #392]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069e4:	689b      	ldr	r3, [r3, #8]
 80069e6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80069ea:	2b08      	cmp	r3, #8
 80069ec:	d11c      	bne.n	8006a28 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80069ee:	4b5f      	ldr	r3, [pc, #380]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069f0:	685b      	ldr	r3, [r3, #4]
 80069f2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80069f6:	2b00      	cmp	r3, #0
 80069f8:	d116      	bne.n	8006a28 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80069fa:	4b5c      	ldr	r3, [pc, #368]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	f003 0302 	and.w	r3, r3, #2
 8006a02:	2b00      	cmp	r3, #0
 8006a04:	d005      	beq.n	8006a12 <HAL_RCC_OscConfig+0x152>
 8006a06:	687b      	ldr	r3, [r7, #4]
 8006a08:	68db      	ldr	r3, [r3, #12]
 8006a0a:	2b01      	cmp	r3, #1
 8006a0c:	d001      	beq.n	8006a12 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8006a0e:	2301      	movs	r3, #1
 8006a10:	e1c4      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a12:	4b56      	ldr	r3, [pc, #344]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a14:	681b      	ldr	r3, [r3, #0]
 8006a16:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a1a:	687b      	ldr	r3, [r7, #4]
 8006a1c:	691b      	ldr	r3, [r3, #16]
 8006a1e:	00db      	lsls	r3, r3, #3
 8006a20:	4952      	ldr	r1, [pc, #328]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a22:	4313      	orrs	r3, r2
 8006a24:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006a26:	e03a      	b.n	8006a9e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006a28:	687b      	ldr	r3, [r7, #4]
 8006a2a:	68db      	ldr	r3, [r3, #12]
 8006a2c:	2b00      	cmp	r3, #0
 8006a2e:	d020      	beq.n	8006a72 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8006a30:	4b4f      	ldr	r3, [pc, #316]	; (8006b70 <HAL_RCC_OscConfig+0x2b0>)
 8006a32:	2201      	movs	r2, #1
 8006a34:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a36:	f7fd f969 	bl	8003d0c <HAL_GetTick>
 8006a3a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a3c:	e008      	b.n	8006a50 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a3e:	f7fd f965 	bl	8003d0c <HAL_GetTick>
 8006a42:	4602      	mov	r2, r0
 8006a44:	693b      	ldr	r3, [r7, #16]
 8006a46:	1ad3      	subs	r3, r2, r3
 8006a48:	2b02      	cmp	r3, #2
 8006a4a:	d901      	bls.n	8006a50 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006a4c:	2303      	movs	r3, #3
 8006a4e:	e1a5      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006a50:	4b46      	ldr	r3, [pc, #280]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a52:	681b      	ldr	r3, [r3, #0]
 8006a54:	f003 0302 	and.w	r3, r3, #2
 8006a58:	2b00      	cmp	r3, #0
 8006a5a:	d0f0      	beq.n	8006a3e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006a5c:	4b43      	ldr	r3, [pc, #268]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a5e:	681b      	ldr	r3, [r3, #0]
 8006a60:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006a64:	687b      	ldr	r3, [r7, #4]
 8006a66:	691b      	ldr	r3, [r3, #16]
 8006a68:	00db      	lsls	r3, r3, #3
 8006a6a:	4940      	ldr	r1, [pc, #256]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a6c:	4313      	orrs	r3, r2
 8006a6e:	600b      	str	r3, [r1, #0]
 8006a70:	e015      	b.n	8006a9e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8006a72:	4b3f      	ldr	r3, [pc, #252]	; (8006b70 <HAL_RCC_OscConfig+0x2b0>)
 8006a74:	2200      	movs	r2, #0
 8006a76:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006a78:	f7fd f948 	bl	8003d0c <HAL_GetTick>
 8006a7c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a7e:	e008      	b.n	8006a92 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8006a80:	f7fd f944 	bl	8003d0c <HAL_GetTick>
 8006a84:	4602      	mov	r2, r0
 8006a86:	693b      	ldr	r3, [r7, #16]
 8006a88:	1ad3      	subs	r3, r2, r3
 8006a8a:	2b02      	cmp	r3, #2
 8006a8c:	d901      	bls.n	8006a92 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8006a8e:	2303      	movs	r3, #3
 8006a90:	e184      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8006a92:	4b36      	ldr	r3, [pc, #216]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006a94:	681b      	ldr	r3, [r3, #0]
 8006a96:	f003 0302 	and.w	r3, r3, #2
 8006a9a:	2b00      	cmp	r3, #0
 8006a9c:	d1f0      	bne.n	8006a80 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8006a9e:	687b      	ldr	r3, [r7, #4]
 8006aa0:	681b      	ldr	r3, [r3, #0]
 8006aa2:	f003 0308 	and.w	r3, r3, #8
 8006aa6:	2b00      	cmp	r3, #0
 8006aa8:	d030      	beq.n	8006b0c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	695b      	ldr	r3, [r3, #20]
 8006aae:	2b00      	cmp	r3, #0
 8006ab0:	d016      	beq.n	8006ae0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8006ab2:	4b30      	ldr	r3, [pc, #192]	; (8006b74 <HAL_RCC_OscConfig+0x2b4>)
 8006ab4:	2201      	movs	r2, #1
 8006ab6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006ab8:	f7fd f928 	bl	8003d0c <HAL_GetTick>
 8006abc:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006abe:	e008      	b.n	8006ad2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006ac0:	f7fd f924 	bl	8003d0c <HAL_GetTick>
 8006ac4:	4602      	mov	r2, r0
 8006ac6:	693b      	ldr	r3, [r7, #16]
 8006ac8:	1ad3      	subs	r3, r2, r3
 8006aca:	2b02      	cmp	r3, #2
 8006acc:	d901      	bls.n	8006ad2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8006ace:	2303      	movs	r3, #3
 8006ad0:	e164      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8006ad2:	4b26      	ldr	r3, [pc, #152]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006ad4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006ad6:	f003 0302 	and.w	r3, r3, #2
 8006ada:	2b00      	cmp	r3, #0
 8006adc:	d0f0      	beq.n	8006ac0 <HAL_RCC_OscConfig+0x200>
 8006ade:	e015      	b.n	8006b0c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8006ae0:	4b24      	ldr	r3, [pc, #144]	; (8006b74 <HAL_RCC_OscConfig+0x2b4>)
 8006ae2:	2200      	movs	r2, #0
 8006ae4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006ae6:	f7fd f911 	bl	8003d0c <HAL_GetTick>
 8006aea:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006aec:	e008      	b.n	8006b00 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8006aee:	f7fd f90d 	bl	8003d0c <HAL_GetTick>
 8006af2:	4602      	mov	r2, r0
 8006af4:	693b      	ldr	r3, [r7, #16]
 8006af6:	1ad3      	subs	r3, r2, r3
 8006af8:	2b02      	cmp	r3, #2
 8006afa:	d901      	bls.n	8006b00 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8006afc:	2303      	movs	r3, #3
 8006afe:	e14d      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8006b00:	4b1a      	ldr	r3, [pc, #104]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b02:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006b04:	f003 0302 	and.w	r3, r3, #2
 8006b08:	2b00      	cmp	r3, #0
 8006b0a:	d1f0      	bne.n	8006aee <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006b0c:	687b      	ldr	r3, [r7, #4]
 8006b0e:	681b      	ldr	r3, [r3, #0]
 8006b10:	f003 0304 	and.w	r3, r3, #4
 8006b14:	2b00      	cmp	r3, #0
 8006b16:	f000 80a0 	beq.w	8006c5a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006b1a:	2300      	movs	r3, #0
 8006b1c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8006b1e:	4b13      	ldr	r3, [pc, #76]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b22:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b26:	2b00      	cmp	r3, #0
 8006b28:	d10f      	bne.n	8006b4a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006b2a:	2300      	movs	r3, #0
 8006b2c:	60bb      	str	r3, [r7, #8]
 8006b2e:	4b0f      	ldr	r3, [pc, #60]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b32:	4a0e      	ldr	r2, [pc, #56]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b34:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006b38:	6413      	str	r3, [r2, #64]	; 0x40
 8006b3a:	4b0c      	ldr	r3, [pc, #48]	; (8006b6c <HAL_RCC_OscConfig+0x2ac>)
 8006b3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b3e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006b42:	60bb      	str	r3, [r7, #8]
 8006b44:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006b46:	2301      	movs	r3, #1
 8006b48:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b4a:	4b0b      	ldr	r3, [pc, #44]	; (8006b78 <HAL_RCC_OscConfig+0x2b8>)
 8006b4c:	681b      	ldr	r3, [r3, #0]
 8006b4e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b52:	2b00      	cmp	r3, #0
 8006b54:	d121      	bne.n	8006b9a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006b56:	4b08      	ldr	r3, [pc, #32]	; (8006b78 <HAL_RCC_OscConfig+0x2b8>)
 8006b58:	681b      	ldr	r3, [r3, #0]
 8006b5a:	4a07      	ldr	r2, [pc, #28]	; (8006b78 <HAL_RCC_OscConfig+0x2b8>)
 8006b5c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006b60:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006b62:	f7fd f8d3 	bl	8003d0c <HAL_GetTick>
 8006b66:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b68:	e011      	b.n	8006b8e <HAL_RCC_OscConfig+0x2ce>
 8006b6a:	bf00      	nop
 8006b6c:	40023800 	.word	0x40023800
 8006b70:	42470000 	.word	0x42470000
 8006b74:	42470e80 	.word	0x42470e80
 8006b78:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006b7c:	f7fd f8c6 	bl	8003d0c <HAL_GetTick>
 8006b80:	4602      	mov	r2, r0
 8006b82:	693b      	ldr	r3, [r7, #16]
 8006b84:	1ad3      	subs	r3, r2, r3
 8006b86:	2b02      	cmp	r3, #2
 8006b88:	d901      	bls.n	8006b8e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006b8a:	2303      	movs	r3, #3
 8006b8c:	e106      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006b8e:	4b85      	ldr	r3, [pc, #532]	; (8006da4 <HAL_RCC_OscConfig+0x4e4>)
 8006b90:	681b      	ldr	r3, [r3, #0]
 8006b92:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006b96:	2b00      	cmp	r3, #0
 8006b98:	d0f0      	beq.n	8006b7c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006b9a:	687b      	ldr	r3, [r7, #4]
 8006b9c:	689b      	ldr	r3, [r3, #8]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d106      	bne.n	8006bb0 <HAL_RCC_OscConfig+0x2f0>
 8006ba2:	4b81      	ldr	r3, [pc, #516]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006ba4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ba6:	4a80      	ldr	r2, [pc, #512]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006ba8:	f043 0301 	orr.w	r3, r3, #1
 8006bac:	6713      	str	r3, [r2, #112]	; 0x70
 8006bae:	e01c      	b.n	8006bea <HAL_RCC_OscConfig+0x32a>
 8006bb0:	687b      	ldr	r3, [r7, #4]
 8006bb2:	689b      	ldr	r3, [r3, #8]
 8006bb4:	2b05      	cmp	r3, #5
 8006bb6:	d10c      	bne.n	8006bd2 <HAL_RCC_OscConfig+0x312>
 8006bb8:	4b7b      	ldr	r3, [pc, #492]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006bba:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bbc:	4a7a      	ldr	r2, [pc, #488]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006bbe:	f043 0304 	orr.w	r3, r3, #4
 8006bc2:	6713      	str	r3, [r2, #112]	; 0x70
 8006bc4:	4b78      	ldr	r3, [pc, #480]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006bc6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bc8:	4a77      	ldr	r2, [pc, #476]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006bca:	f043 0301 	orr.w	r3, r3, #1
 8006bce:	6713      	str	r3, [r2, #112]	; 0x70
 8006bd0:	e00b      	b.n	8006bea <HAL_RCC_OscConfig+0x32a>
 8006bd2:	4b75      	ldr	r3, [pc, #468]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006bd4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006bd6:	4a74      	ldr	r2, [pc, #464]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006bd8:	f023 0301 	bic.w	r3, r3, #1
 8006bdc:	6713      	str	r3, [r2, #112]	; 0x70
 8006bde:	4b72      	ldr	r3, [pc, #456]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006be0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006be2:	4a71      	ldr	r2, [pc, #452]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006be4:	f023 0304 	bic.w	r3, r3, #4
 8006be8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	689b      	ldr	r3, [r3, #8]
 8006bee:	2b00      	cmp	r3, #0
 8006bf0:	d015      	beq.n	8006c1e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006bf2:	f7fd f88b 	bl	8003d0c <HAL_GetTick>
 8006bf6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006bf8:	e00a      	b.n	8006c10 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006bfa:	f7fd f887 	bl	8003d0c <HAL_GetTick>
 8006bfe:	4602      	mov	r2, r0
 8006c00:	693b      	ldr	r3, [r7, #16]
 8006c02:	1ad3      	subs	r3, r2, r3
 8006c04:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c08:	4293      	cmp	r3, r2
 8006c0a:	d901      	bls.n	8006c10 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006c0c:	2303      	movs	r3, #3
 8006c0e:	e0c5      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006c10:	4b65      	ldr	r3, [pc, #404]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006c12:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c14:	f003 0302 	and.w	r3, r3, #2
 8006c18:	2b00      	cmp	r3, #0
 8006c1a:	d0ee      	beq.n	8006bfa <HAL_RCC_OscConfig+0x33a>
 8006c1c:	e014      	b.n	8006c48 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006c1e:	f7fd f875 	bl	8003d0c <HAL_GetTick>
 8006c22:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c24:	e00a      	b.n	8006c3c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006c26:	f7fd f871 	bl	8003d0c <HAL_GetTick>
 8006c2a:	4602      	mov	r2, r0
 8006c2c:	693b      	ldr	r3, [r7, #16]
 8006c2e:	1ad3      	subs	r3, r2, r3
 8006c30:	f241 3288 	movw	r2, #5000	; 0x1388
 8006c34:	4293      	cmp	r3, r2
 8006c36:	d901      	bls.n	8006c3c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006c38:	2303      	movs	r3, #3
 8006c3a:	e0af      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006c3c:	4b5a      	ldr	r3, [pc, #360]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006c3e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006c40:	f003 0302 	and.w	r3, r3, #2
 8006c44:	2b00      	cmp	r3, #0
 8006c46:	d1ee      	bne.n	8006c26 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006c48:	7dfb      	ldrb	r3, [r7, #23]
 8006c4a:	2b01      	cmp	r3, #1
 8006c4c:	d105      	bne.n	8006c5a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006c4e:	4b56      	ldr	r3, [pc, #344]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006c50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006c52:	4a55      	ldr	r2, [pc, #340]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006c54:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006c58:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	699b      	ldr	r3, [r3, #24]
 8006c5e:	2b00      	cmp	r3, #0
 8006c60:	f000 809b 	beq.w	8006d9a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006c64:	4b50      	ldr	r3, [pc, #320]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006c66:	689b      	ldr	r3, [r3, #8]
 8006c68:	f003 030c 	and.w	r3, r3, #12
 8006c6c:	2b08      	cmp	r3, #8
 8006c6e:	d05c      	beq.n	8006d2a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006c70:	687b      	ldr	r3, [r7, #4]
 8006c72:	699b      	ldr	r3, [r3, #24]
 8006c74:	2b02      	cmp	r3, #2
 8006c76:	d141      	bne.n	8006cfc <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006c78:	4b4c      	ldr	r3, [pc, #304]	; (8006dac <HAL_RCC_OscConfig+0x4ec>)
 8006c7a:	2200      	movs	r2, #0
 8006c7c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006c7e:	f7fd f845 	bl	8003d0c <HAL_GetTick>
 8006c82:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c84:	e008      	b.n	8006c98 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006c86:	f7fd f841 	bl	8003d0c <HAL_GetTick>
 8006c8a:	4602      	mov	r2, r0
 8006c8c:	693b      	ldr	r3, [r7, #16]
 8006c8e:	1ad3      	subs	r3, r2, r3
 8006c90:	2b02      	cmp	r3, #2
 8006c92:	d901      	bls.n	8006c98 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006c94:	2303      	movs	r3, #3
 8006c96:	e081      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006c98:	4b43      	ldr	r3, [pc, #268]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006c9a:	681b      	ldr	r3, [r3, #0]
 8006c9c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006ca0:	2b00      	cmp	r3, #0
 8006ca2:	d1f0      	bne.n	8006c86 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	69da      	ldr	r2, [r3, #28]
 8006ca8:	687b      	ldr	r3, [r7, #4]
 8006caa:	6a1b      	ldr	r3, [r3, #32]
 8006cac:	431a      	orrs	r2, r3
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006cb2:	019b      	lsls	r3, r3, #6
 8006cb4:	431a      	orrs	r2, r3
 8006cb6:	687b      	ldr	r3, [r7, #4]
 8006cb8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006cba:	085b      	lsrs	r3, r3, #1
 8006cbc:	3b01      	subs	r3, #1
 8006cbe:	041b      	lsls	r3, r3, #16
 8006cc0:	431a      	orrs	r2, r3
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006cc6:	061b      	lsls	r3, r3, #24
 8006cc8:	4937      	ldr	r1, [pc, #220]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006cca:	4313      	orrs	r3, r2
 8006ccc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006cce:	4b37      	ldr	r3, [pc, #220]	; (8006dac <HAL_RCC_OscConfig+0x4ec>)
 8006cd0:	2201      	movs	r2, #1
 8006cd2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006cd4:	f7fd f81a 	bl	8003d0c <HAL_GetTick>
 8006cd8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cda:	e008      	b.n	8006cee <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006cdc:	f7fd f816 	bl	8003d0c <HAL_GetTick>
 8006ce0:	4602      	mov	r2, r0
 8006ce2:	693b      	ldr	r3, [r7, #16]
 8006ce4:	1ad3      	subs	r3, r2, r3
 8006ce6:	2b02      	cmp	r3, #2
 8006ce8:	d901      	bls.n	8006cee <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006cea:	2303      	movs	r3, #3
 8006cec:	e056      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006cee:	4b2e      	ldr	r3, [pc, #184]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006cf0:	681b      	ldr	r3, [r3, #0]
 8006cf2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006cf6:	2b00      	cmp	r3, #0
 8006cf8:	d0f0      	beq.n	8006cdc <HAL_RCC_OscConfig+0x41c>
 8006cfa:	e04e      	b.n	8006d9a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006cfc:	4b2b      	ldr	r3, [pc, #172]	; (8006dac <HAL_RCC_OscConfig+0x4ec>)
 8006cfe:	2200      	movs	r2, #0
 8006d00:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006d02:	f7fd f803 	bl	8003d0c <HAL_GetTick>
 8006d06:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d08:	e008      	b.n	8006d1c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006d0a:	f7fc ffff 	bl	8003d0c <HAL_GetTick>
 8006d0e:	4602      	mov	r2, r0
 8006d10:	693b      	ldr	r3, [r7, #16]
 8006d12:	1ad3      	subs	r3, r2, r3
 8006d14:	2b02      	cmp	r3, #2
 8006d16:	d901      	bls.n	8006d1c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006d18:	2303      	movs	r3, #3
 8006d1a:	e03f      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006d1c:	4b22      	ldr	r3, [pc, #136]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006d1e:	681b      	ldr	r3, [r3, #0]
 8006d20:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d24:	2b00      	cmp	r3, #0
 8006d26:	d1f0      	bne.n	8006d0a <HAL_RCC_OscConfig+0x44a>
 8006d28:	e037      	b.n	8006d9a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	699b      	ldr	r3, [r3, #24]
 8006d2e:	2b01      	cmp	r3, #1
 8006d30:	d101      	bne.n	8006d36 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006d32:	2301      	movs	r3, #1
 8006d34:	e032      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006d36:	4b1c      	ldr	r3, [pc, #112]	; (8006da8 <HAL_RCC_OscConfig+0x4e8>)
 8006d38:	685b      	ldr	r3, [r3, #4]
 8006d3a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d3c:	687b      	ldr	r3, [r7, #4]
 8006d3e:	699b      	ldr	r3, [r3, #24]
 8006d40:	2b01      	cmp	r3, #1
 8006d42:	d028      	beq.n	8006d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d44:	68fb      	ldr	r3, [r7, #12]
 8006d46:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006d4a:	687b      	ldr	r3, [r7, #4]
 8006d4c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006d4e:	429a      	cmp	r2, r3
 8006d50:	d121      	bne.n	8006d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d52:	68fb      	ldr	r3, [r7, #12]
 8006d54:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006d58:	687b      	ldr	r3, [r7, #4]
 8006d5a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006d5c:	429a      	cmp	r2, r3
 8006d5e:	d11a      	bne.n	8006d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d60:	68fa      	ldr	r2, [r7, #12]
 8006d62:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006d66:	4013      	ands	r3, r2
 8006d68:	687a      	ldr	r2, [r7, #4]
 8006d6a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006d6c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006d6e:	4293      	cmp	r3, r2
 8006d70:	d111      	bne.n	8006d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d72:	68fb      	ldr	r3, [r7, #12]
 8006d74:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006d78:	687b      	ldr	r3, [r7, #4]
 8006d7a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006d7c:	085b      	lsrs	r3, r3, #1
 8006d7e:	3b01      	subs	r3, #1
 8006d80:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006d82:	429a      	cmp	r2, r3
 8006d84:	d107      	bne.n	8006d96 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006d86:	68fb      	ldr	r3, [r7, #12]
 8006d88:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006d8c:	687b      	ldr	r3, [r7, #4]
 8006d8e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006d90:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006d92:	429a      	cmp	r2, r3
 8006d94:	d001      	beq.n	8006d9a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006d96:	2301      	movs	r3, #1
 8006d98:	e000      	b.n	8006d9c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006d9a:	2300      	movs	r3, #0
}
 8006d9c:	4618      	mov	r0, r3
 8006d9e:	3718      	adds	r7, #24
 8006da0:	46bd      	mov	sp, r7
 8006da2:	bd80      	pop	{r7, pc}
 8006da4:	40007000 	.word	0x40007000
 8006da8:	40023800 	.word	0x40023800
 8006dac:	42470060 	.word	0x42470060

08006db0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006db0:	b580      	push	{r7, lr}
 8006db2:	b084      	sub	sp, #16
 8006db4:	af00      	add	r7, sp, #0
 8006db6:	6078      	str	r0, [r7, #4]
 8006db8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006dba:	687b      	ldr	r3, [r7, #4]
 8006dbc:	2b00      	cmp	r3, #0
 8006dbe:	d101      	bne.n	8006dc4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e0cc      	b.n	8006f5e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006dc4:	4b68      	ldr	r3, [pc, #416]	; (8006f68 <HAL_RCC_ClockConfig+0x1b8>)
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0307 	and.w	r3, r3, #7
 8006dcc:	683a      	ldr	r2, [r7, #0]
 8006dce:	429a      	cmp	r2, r3
 8006dd0:	d90c      	bls.n	8006dec <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006dd2:	4b65      	ldr	r3, [pc, #404]	; (8006f68 <HAL_RCC_ClockConfig+0x1b8>)
 8006dd4:	683a      	ldr	r2, [r7, #0]
 8006dd6:	b2d2      	uxtb	r2, r2
 8006dd8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006dda:	4b63      	ldr	r3, [pc, #396]	; (8006f68 <HAL_RCC_ClockConfig+0x1b8>)
 8006ddc:	681b      	ldr	r3, [r3, #0]
 8006dde:	f003 0307 	and.w	r3, r3, #7
 8006de2:	683a      	ldr	r2, [r7, #0]
 8006de4:	429a      	cmp	r2, r3
 8006de6:	d001      	beq.n	8006dec <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006de8:	2301      	movs	r3, #1
 8006dea:	e0b8      	b.n	8006f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006dec:	687b      	ldr	r3, [r7, #4]
 8006dee:	681b      	ldr	r3, [r3, #0]
 8006df0:	f003 0302 	and.w	r3, r3, #2
 8006df4:	2b00      	cmp	r3, #0
 8006df6:	d020      	beq.n	8006e3a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f003 0304 	and.w	r3, r3, #4
 8006e00:	2b00      	cmp	r3, #0
 8006e02:	d005      	beq.n	8006e10 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006e04:	4b59      	ldr	r3, [pc, #356]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e06:	689b      	ldr	r3, [r3, #8]
 8006e08:	4a58      	ldr	r2, [pc, #352]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006e0e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006e10:	687b      	ldr	r3, [r7, #4]
 8006e12:	681b      	ldr	r3, [r3, #0]
 8006e14:	f003 0308 	and.w	r3, r3, #8
 8006e18:	2b00      	cmp	r3, #0
 8006e1a:	d005      	beq.n	8006e28 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006e1c:	4b53      	ldr	r3, [pc, #332]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e1e:	689b      	ldr	r3, [r3, #8]
 8006e20:	4a52      	ldr	r2, [pc, #328]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e22:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006e26:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006e28:	4b50      	ldr	r3, [pc, #320]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e2a:	689b      	ldr	r3, [r3, #8]
 8006e2c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006e30:	687b      	ldr	r3, [r7, #4]
 8006e32:	689b      	ldr	r3, [r3, #8]
 8006e34:	494d      	ldr	r1, [pc, #308]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e36:	4313      	orrs	r3, r2
 8006e38:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006e3a:	687b      	ldr	r3, [r7, #4]
 8006e3c:	681b      	ldr	r3, [r3, #0]
 8006e3e:	f003 0301 	and.w	r3, r3, #1
 8006e42:	2b00      	cmp	r3, #0
 8006e44:	d044      	beq.n	8006ed0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006e46:	687b      	ldr	r3, [r7, #4]
 8006e48:	685b      	ldr	r3, [r3, #4]
 8006e4a:	2b01      	cmp	r3, #1
 8006e4c:	d107      	bne.n	8006e5e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006e4e:	4b47      	ldr	r3, [pc, #284]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e50:	681b      	ldr	r3, [r3, #0]
 8006e52:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006e56:	2b00      	cmp	r3, #0
 8006e58:	d119      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e5a:	2301      	movs	r3, #1
 8006e5c:	e07f      	b.n	8006f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	685b      	ldr	r3, [r3, #4]
 8006e62:	2b02      	cmp	r3, #2
 8006e64:	d003      	beq.n	8006e6e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006e66:	687b      	ldr	r3, [r7, #4]
 8006e68:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006e6a:	2b03      	cmp	r3, #3
 8006e6c:	d107      	bne.n	8006e7e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006e6e:	4b3f      	ldr	r3, [pc, #252]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e70:	681b      	ldr	r3, [r3, #0]
 8006e72:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006e76:	2b00      	cmp	r3, #0
 8006e78:	d109      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e7a:	2301      	movs	r3, #1
 8006e7c:	e06f      	b.n	8006f5e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006e7e:	4b3b      	ldr	r3, [pc, #236]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e80:	681b      	ldr	r3, [r3, #0]
 8006e82:	f003 0302 	and.w	r3, r3, #2
 8006e86:	2b00      	cmp	r3, #0
 8006e88:	d101      	bne.n	8006e8e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006e8a:	2301      	movs	r3, #1
 8006e8c:	e067      	b.n	8006f5e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006e8e:	4b37      	ldr	r3, [pc, #220]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e90:	689b      	ldr	r3, [r3, #8]
 8006e92:	f023 0203 	bic.w	r2, r3, #3
 8006e96:	687b      	ldr	r3, [r7, #4]
 8006e98:	685b      	ldr	r3, [r3, #4]
 8006e9a:	4934      	ldr	r1, [pc, #208]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006e9c:	4313      	orrs	r3, r2
 8006e9e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006ea0:	f7fc ff34 	bl	8003d0c <HAL_GetTick>
 8006ea4:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ea6:	e00a      	b.n	8006ebe <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ea8:	f7fc ff30 	bl	8003d0c <HAL_GetTick>
 8006eac:	4602      	mov	r2, r0
 8006eae:	68fb      	ldr	r3, [r7, #12]
 8006eb0:	1ad3      	subs	r3, r2, r3
 8006eb2:	f241 3288 	movw	r2, #5000	; 0x1388
 8006eb6:	4293      	cmp	r3, r2
 8006eb8:	d901      	bls.n	8006ebe <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006eba:	2303      	movs	r3, #3
 8006ebc:	e04f      	b.n	8006f5e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ebe:	4b2b      	ldr	r3, [pc, #172]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006ec0:	689b      	ldr	r3, [r3, #8]
 8006ec2:	f003 020c 	and.w	r2, r3, #12
 8006ec6:	687b      	ldr	r3, [r7, #4]
 8006ec8:	685b      	ldr	r3, [r3, #4]
 8006eca:	009b      	lsls	r3, r3, #2
 8006ecc:	429a      	cmp	r2, r3
 8006ece:	d1eb      	bne.n	8006ea8 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ed0:	4b25      	ldr	r3, [pc, #148]	; (8006f68 <HAL_RCC_ClockConfig+0x1b8>)
 8006ed2:	681b      	ldr	r3, [r3, #0]
 8006ed4:	f003 0307 	and.w	r3, r3, #7
 8006ed8:	683a      	ldr	r2, [r7, #0]
 8006eda:	429a      	cmp	r2, r3
 8006edc:	d20c      	bcs.n	8006ef8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006ede:	4b22      	ldr	r3, [pc, #136]	; (8006f68 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee0:	683a      	ldr	r2, [r7, #0]
 8006ee2:	b2d2      	uxtb	r2, r2
 8006ee4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ee6:	4b20      	ldr	r3, [pc, #128]	; (8006f68 <HAL_RCC_ClockConfig+0x1b8>)
 8006ee8:	681b      	ldr	r3, [r3, #0]
 8006eea:	f003 0307 	and.w	r3, r3, #7
 8006eee:	683a      	ldr	r2, [r7, #0]
 8006ef0:	429a      	cmp	r2, r3
 8006ef2:	d001      	beq.n	8006ef8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006ef4:	2301      	movs	r3, #1
 8006ef6:	e032      	b.n	8006f5e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006ef8:	687b      	ldr	r3, [r7, #4]
 8006efa:	681b      	ldr	r3, [r3, #0]
 8006efc:	f003 0304 	and.w	r3, r3, #4
 8006f00:	2b00      	cmp	r3, #0
 8006f02:	d008      	beq.n	8006f16 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006f04:	4b19      	ldr	r3, [pc, #100]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006f06:	689b      	ldr	r3, [r3, #8]
 8006f08:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006f0c:	687b      	ldr	r3, [r7, #4]
 8006f0e:	68db      	ldr	r3, [r3, #12]
 8006f10:	4916      	ldr	r1, [pc, #88]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006f12:	4313      	orrs	r3, r2
 8006f14:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006f16:	687b      	ldr	r3, [r7, #4]
 8006f18:	681b      	ldr	r3, [r3, #0]
 8006f1a:	f003 0308 	and.w	r3, r3, #8
 8006f1e:	2b00      	cmp	r3, #0
 8006f20:	d009      	beq.n	8006f36 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006f22:	4b12      	ldr	r3, [pc, #72]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006f24:	689b      	ldr	r3, [r3, #8]
 8006f26:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006f2a:	687b      	ldr	r3, [r7, #4]
 8006f2c:	691b      	ldr	r3, [r3, #16]
 8006f2e:	00db      	lsls	r3, r3, #3
 8006f30:	490e      	ldr	r1, [pc, #56]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006f32:	4313      	orrs	r3, r2
 8006f34:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006f36:	f000 f821 	bl	8006f7c <HAL_RCC_GetSysClockFreq>
 8006f3a:	4602      	mov	r2, r0
 8006f3c:	4b0b      	ldr	r3, [pc, #44]	; (8006f6c <HAL_RCC_ClockConfig+0x1bc>)
 8006f3e:	689b      	ldr	r3, [r3, #8]
 8006f40:	091b      	lsrs	r3, r3, #4
 8006f42:	f003 030f 	and.w	r3, r3, #15
 8006f46:	490a      	ldr	r1, [pc, #40]	; (8006f70 <HAL_RCC_ClockConfig+0x1c0>)
 8006f48:	5ccb      	ldrb	r3, [r1, r3]
 8006f4a:	fa22 f303 	lsr.w	r3, r2, r3
 8006f4e:	4a09      	ldr	r2, [pc, #36]	; (8006f74 <HAL_RCC_ClockConfig+0x1c4>)
 8006f50:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006f52:	4b09      	ldr	r3, [pc, #36]	; (8006f78 <HAL_RCC_ClockConfig+0x1c8>)
 8006f54:	681b      	ldr	r3, [r3, #0]
 8006f56:	4618      	mov	r0, r3
 8006f58:	f7fc fe94 	bl	8003c84 <HAL_InitTick>

  return HAL_OK;
 8006f5c:	2300      	movs	r3, #0
}
 8006f5e:	4618      	mov	r0, r3
 8006f60:	3710      	adds	r7, #16
 8006f62:	46bd      	mov	sp, r7
 8006f64:	bd80      	pop	{r7, pc}
 8006f66:	bf00      	nop
 8006f68:	40023c00 	.word	0x40023c00
 8006f6c:	40023800 	.word	0x40023800
 8006f70:	0800a3e0 	.word	0x0800a3e0
 8006f74:	20000024 	.word	0x20000024
 8006f78:	20000028 	.word	0x20000028

08006f7c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006f7c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006f80:	b084      	sub	sp, #16
 8006f82:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006f84:	2300      	movs	r3, #0
 8006f86:	607b      	str	r3, [r7, #4]
 8006f88:	2300      	movs	r3, #0
 8006f8a:	60fb      	str	r3, [r7, #12]
 8006f8c:	2300      	movs	r3, #0
 8006f8e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006f90:	2300      	movs	r3, #0
 8006f92:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006f94:	4b67      	ldr	r3, [pc, #412]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f96:	689b      	ldr	r3, [r3, #8]
 8006f98:	f003 030c 	and.w	r3, r3, #12
 8006f9c:	2b08      	cmp	r3, #8
 8006f9e:	d00d      	beq.n	8006fbc <HAL_RCC_GetSysClockFreq+0x40>
 8006fa0:	2b08      	cmp	r3, #8
 8006fa2:	f200 80bd 	bhi.w	8007120 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006fa6:	2b00      	cmp	r3, #0
 8006fa8:	d002      	beq.n	8006fb0 <HAL_RCC_GetSysClockFreq+0x34>
 8006faa:	2b04      	cmp	r3, #4
 8006fac:	d003      	beq.n	8006fb6 <HAL_RCC_GetSysClockFreq+0x3a>
 8006fae:	e0b7      	b.n	8007120 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006fb0:	4b61      	ldr	r3, [pc, #388]	; (8007138 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fb2:	60bb      	str	r3, [r7, #8]
       break;
 8006fb4:	e0b7      	b.n	8007126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006fb6:	4b61      	ldr	r3, [pc, #388]	; (800713c <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006fb8:	60bb      	str	r3, [r7, #8]
      break;
 8006fba:	e0b4      	b.n	8007126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006fbc:	4b5d      	ldr	r3, [pc, #372]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fbe:	685b      	ldr	r3, [r3, #4]
 8006fc0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006fc4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006fc6:	4b5b      	ldr	r3, [pc, #364]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fc8:	685b      	ldr	r3, [r3, #4]
 8006fca:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006fce:	2b00      	cmp	r3, #0
 8006fd0:	d04d      	beq.n	800706e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006fd2:	4b58      	ldr	r3, [pc, #352]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fd4:	685b      	ldr	r3, [r3, #4]
 8006fd6:	099b      	lsrs	r3, r3, #6
 8006fd8:	461a      	mov	r2, r3
 8006fda:	f04f 0300 	mov.w	r3, #0
 8006fde:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006fe2:	f04f 0100 	mov.w	r1, #0
 8006fe6:	ea02 0800 	and.w	r8, r2, r0
 8006fea:	ea03 0901 	and.w	r9, r3, r1
 8006fee:	4640      	mov	r0, r8
 8006ff0:	4649      	mov	r1, r9
 8006ff2:	f04f 0200 	mov.w	r2, #0
 8006ff6:	f04f 0300 	mov.w	r3, #0
 8006ffa:	014b      	lsls	r3, r1, #5
 8006ffc:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8007000:	0142      	lsls	r2, r0, #5
 8007002:	4610      	mov	r0, r2
 8007004:	4619      	mov	r1, r3
 8007006:	ebb0 0008 	subs.w	r0, r0, r8
 800700a:	eb61 0109 	sbc.w	r1, r1, r9
 800700e:	f04f 0200 	mov.w	r2, #0
 8007012:	f04f 0300 	mov.w	r3, #0
 8007016:	018b      	lsls	r3, r1, #6
 8007018:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800701c:	0182      	lsls	r2, r0, #6
 800701e:	1a12      	subs	r2, r2, r0
 8007020:	eb63 0301 	sbc.w	r3, r3, r1
 8007024:	f04f 0000 	mov.w	r0, #0
 8007028:	f04f 0100 	mov.w	r1, #0
 800702c:	00d9      	lsls	r1, r3, #3
 800702e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8007032:	00d0      	lsls	r0, r2, #3
 8007034:	4602      	mov	r2, r0
 8007036:	460b      	mov	r3, r1
 8007038:	eb12 0208 	adds.w	r2, r2, r8
 800703c:	eb43 0309 	adc.w	r3, r3, r9
 8007040:	f04f 0000 	mov.w	r0, #0
 8007044:	f04f 0100 	mov.w	r1, #0
 8007048:	0259      	lsls	r1, r3, #9
 800704a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800704e:	0250      	lsls	r0, r2, #9
 8007050:	4602      	mov	r2, r0
 8007052:	460b      	mov	r3, r1
 8007054:	4610      	mov	r0, r2
 8007056:	4619      	mov	r1, r3
 8007058:	687b      	ldr	r3, [r7, #4]
 800705a:	461a      	mov	r2, r3
 800705c:	f04f 0300 	mov.w	r3, #0
 8007060:	f7f9 fe84 	bl	8000d6c <__aeabi_uldivmod>
 8007064:	4602      	mov	r2, r0
 8007066:	460b      	mov	r3, r1
 8007068:	4613      	mov	r3, r2
 800706a:	60fb      	str	r3, [r7, #12]
 800706c:	e04a      	b.n	8007104 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800706e:	4b31      	ldr	r3, [pc, #196]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007070:	685b      	ldr	r3, [r3, #4]
 8007072:	099b      	lsrs	r3, r3, #6
 8007074:	461a      	mov	r2, r3
 8007076:	f04f 0300 	mov.w	r3, #0
 800707a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800707e:	f04f 0100 	mov.w	r1, #0
 8007082:	ea02 0400 	and.w	r4, r2, r0
 8007086:	ea03 0501 	and.w	r5, r3, r1
 800708a:	4620      	mov	r0, r4
 800708c:	4629      	mov	r1, r5
 800708e:	f04f 0200 	mov.w	r2, #0
 8007092:	f04f 0300 	mov.w	r3, #0
 8007096:	014b      	lsls	r3, r1, #5
 8007098:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800709c:	0142      	lsls	r2, r0, #5
 800709e:	4610      	mov	r0, r2
 80070a0:	4619      	mov	r1, r3
 80070a2:	1b00      	subs	r0, r0, r4
 80070a4:	eb61 0105 	sbc.w	r1, r1, r5
 80070a8:	f04f 0200 	mov.w	r2, #0
 80070ac:	f04f 0300 	mov.w	r3, #0
 80070b0:	018b      	lsls	r3, r1, #6
 80070b2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80070b6:	0182      	lsls	r2, r0, #6
 80070b8:	1a12      	subs	r2, r2, r0
 80070ba:	eb63 0301 	sbc.w	r3, r3, r1
 80070be:	f04f 0000 	mov.w	r0, #0
 80070c2:	f04f 0100 	mov.w	r1, #0
 80070c6:	00d9      	lsls	r1, r3, #3
 80070c8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80070cc:	00d0      	lsls	r0, r2, #3
 80070ce:	4602      	mov	r2, r0
 80070d0:	460b      	mov	r3, r1
 80070d2:	1912      	adds	r2, r2, r4
 80070d4:	eb45 0303 	adc.w	r3, r5, r3
 80070d8:	f04f 0000 	mov.w	r0, #0
 80070dc:	f04f 0100 	mov.w	r1, #0
 80070e0:	0299      	lsls	r1, r3, #10
 80070e2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80070e6:	0290      	lsls	r0, r2, #10
 80070e8:	4602      	mov	r2, r0
 80070ea:	460b      	mov	r3, r1
 80070ec:	4610      	mov	r0, r2
 80070ee:	4619      	mov	r1, r3
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	461a      	mov	r2, r3
 80070f4:	f04f 0300 	mov.w	r3, #0
 80070f8:	f7f9 fe38 	bl	8000d6c <__aeabi_uldivmod>
 80070fc:	4602      	mov	r2, r0
 80070fe:	460b      	mov	r3, r1
 8007100:	4613      	mov	r3, r2
 8007102:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8007104:	4b0b      	ldr	r3, [pc, #44]	; (8007134 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8007106:	685b      	ldr	r3, [r3, #4]
 8007108:	0c1b      	lsrs	r3, r3, #16
 800710a:	f003 0303 	and.w	r3, r3, #3
 800710e:	3301      	adds	r3, #1
 8007110:	005b      	lsls	r3, r3, #1
 8007112:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8007114:	68fa      	ldr	r2, [r7, #12]
 8007116:	683b      	ldr	r3, [r7, #0]
 8007118:	fbb2 f3f3 	udiv	r3, r2, r3
 800711c:	60bb      	str	r3, [r7, #8]
      break;
 800711e:	e002      	b.n	8007126 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8007120:	4b05      	ldr	r3, [pc, #20]	; (8007138 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8007122:	60bb      	str	r3, [r7, #8]
      break;
 8007124:	bf00      	nop
    }
  }
  return sysclockfreq;
 8007126:	68bb      	ldr	r3, [r7, #8]
}
 8007128:	4618      	mov	r0, r3
 800712a:	3710      	adds	r7, #16
 800712c:	46bd      	mov	sp, r7
 800712e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8007132:	bf00      	nop
 8007134:	40023800 	.word	0x40023800
 8007138:	00f42400 	.word	0x00f42400
 800713c:	007a1200 	.word	0x007a1200

08007140 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8007140:	b480      	push	{r7}
 8007142:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007144:	4b03      	ldr	r3, [pc, #12]	; (8007154 <HAL_RCC_GetHCLKFreq+0x14>)
 8007146:	681b      	ldr	r3, [r3, #0]
}
 8007148:	4618      	mov	r0, r3
 800714a:	46bd      	mov	sp, r7
 800714c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007150:	4770      	bx	lr
 8007152:	bf00      	nop
 8007154:	20000024 	.word	0x20000024

08007158 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007158:	b580      	push	{r7, lr}
 800715a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800715c:	f7ff fff0 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 8007160:	4602      	mov	r2, r0
 8007162:	4b05      	ldr	r3, [pc, #20]	; (8007178 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007164:	689b      	ldr	r3, [r3, #8]
 8007166:	0a9b      	lsrs	r3, r3, #10
 8007168:	f003 0307 	and.w	r3, r3, #7
 800716c:	4903      	ldr	r1, [pc, #12]	; (800717c <HAL_RCC_GetPCLK1Freq+0x24>)
 800716e:	5ccb      	ldrb	r3, [r1, r3]
 8007170:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007174:	4618      	mov	r0, r3
 8007176:	bd80      	pop	{r7, pc}
 8007178:	40023800 	.word	0x40023800
 800717c:	0800a3f0 	.word	0x0800a3f0

08007180 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8007180:	b580      	push	{r7, lr}
 8007182:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007184:	f7ff ffdc 	bl	8007140 <HAL_RCC_GetHCLKFreq>
 8007188:	4602      	mov	r2, r0
 800718a:	4b05      	ldr	r3, [pc, #20]	; (80071a0 <HAL_RCC_GetPCLK2Freq+0x20>)
 800718c:	689b      	ldr	r3, [r3, #8]
 800718e:	0b5b      	lsrs	r3, r3, #13
 8007190:	f003 0307 	and.w	r3, r3, #7
 8007194:	4903      	ldr	r1, [pc, #12]	; (80071a4 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007196:	5ccb      	ldrb	r3, [r1, r3]
 8007198:	fa22 f303 	lsr.w	r3, r2, r3
}
 800719c:	4618      	mov	r0, r3
 800719e:	bd80      	pop	{r7, pc}
 80071a0:	40023800 	.word	0x40023800
 80071a4:	0800a3f0 	.word	0x0800a3f0

080071a8 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 80071a8:	b580      	push	{r7, lr}
 80071aa:	b082      	sub	sp, #8
 80071ac:	af00      	add	r7, sp, #0
 80071ae:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	2b00      	cmp	r3, #0
 80071b4:	d101      	bne.n	80071ba <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80071b6:	2301      	movs	r3, #1
 80071b8:	e041      	b.n	800723e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ba:	687b      	ldr	r3, [r7, #4]
 80071bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071c0:	b2db      	uxtb	r3, r3
 80071c2:	2b00      	cmp	r3, #0
 80071c4:	d106      	bne.n	80071d4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071c6:	687b      	ldr	r3, [r7, #4]
 80071c8:	2200      	movs	r2, #0
 80071ca:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80071ce:	6878      	ldr	r0, [r7, #4]
 80071d0:	f7fc fada 	bl	8003788 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071d4:	687b      	ldr	r3, [r7, #4]
 80071d6:	2202      	movs	r2, #2
 80071d8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071dc:	687b      	ldr	r3, [r7, #4]
 80071de:	681a      	ldr	r2, [r3, #0]
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	3304      	adds	r3, #4
 80071e4:	4619      	mov	r1, r3
 80071e6:	4610      	mov	r0, r2
 80071e8:	f000 fdda 	bl	8007da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80071ec:	687b      	ldr	r3, [r7, #4]
 80071ee:	2201      	movs	r2, #1
 80071f0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	2201      	movs	r2, #1
 80071f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80071fc:	687b      	ldr	r3, [r7, #4]
 80071fe:	2201      	movs	r2, #1
 8007200:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007204:	687b      	ldr	r3, [r7, #4]
 8007206:	2201      	movs	r2, #1
 8007208:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	2201      	movs	r2, #1
 8007210:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007214:	687b      	ldr	r3, [r7, #4]
 8007216:	2201      	movs	r2, #1
 8007218:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800721c:	687b      	ldr	r3, [r7, #4]
 800721e:	2201      	movs	r2, #1
 8007220:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007224:	687b      	ldr	r3, [r7, #4]
 8007226:	2201      	movs	r2, #1
 8007228:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800722c:	687b      	ldr	r3, [r7, #4]
 800722e:	2201      	movs	r2, #1
 8007230:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	2201      	movs	r2, #1
 8007238:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800723c:	2300      	movs	r3, #0
}
 800723e:	4618      	mov	r0, r3
 8007240:	3708      	adds	r7, #8
 8007242:	46bd      	mov	sp, r7
 8007244:	bd80      	pop	{r7, pc}
	...

08007248 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007248:	b480      	push	{r7}
 800724a:	b085      	sub	sp, #20
 800724c:	af00      	add	r7, sp, #0
 800724e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007256:	b2db      	uxtb	r3, r3
 8007258:	2b01      	cmp	r3, #1
 800725a:	d001      	beq.n	8007260 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800725c:	2301      	movs	r3, #1
 800725e:	e03c      	b.n	80072da <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2202      	movs	r2, #2
 8007264:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007268:	687b      	ldr	r3, [r7, #4]
 800726a:	681b      	ldr	r3, [r3, #0]
 800726c:	4a1e      	ldr	r2, [pc, #120]	; (80072e8 <HAL_TIM_Base_Start+0xa0>)
 800726e:	4293      	cmp	r3, r2
 8007270:	d018      	beq.n	80072a4 <HAL_TIM_Base_Start+0x5c>
 8007272:	687b      	ldr	r3, [r7, #4]
 8007274:	681b      	ldr	r3, [r3, #0]
 8007276:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800727a:	d013      	beq.n	80072a4 <HAL_TIM_Base_Start+0x5c>
 800727c:	687b      	ldr	r3, [r7, #4]
 800727e:	681b      	ldr	r3, [r3, #0]
 8007280:	4a1a      	ldr	r2, [pc, #104]	; (80072ec <HAL_TIM_Base_Start+0xa4>)
 8007282:	4293      	cmp	r3, r2
 8007284:	d00e      	beq.n	80072a4 <HAL_TIM_Base_Start+0x5c>
 8007286:	687b      	ldr	r3, [r7, #4]
 8007288:	681b      	ldr	r3, [r3, #0]
 800728a:	4a19      	ldr	r2, [pc, #100]	; (80072f0 <HAL_TIM_Base_Start+0xa8>)
 800728c:	4293      	cmp	r3, r2
 800728e:	d009      	beq.n	80072a4 <HAL_TIM_Base_Start+0x5c>
 8007290:	687b      	ldr	r3, [r7, #4]
 8007292:	681b      	ldr	r3, [r3, #0]
 8007294:	4a17      	ldr	r2, [pc, #92]	; (80072f4 <HAL_TIM_Base_Start+0xac>)
 8007296:	4293      	cmp	r3, r2
 8007298:	d004      	beq.n	80072a4 <HAL_TIM_Base_Start+0x5c>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	681b      	ldr	r3, [r3, #0]
 800729e:	4a16      	ldr	r2, [pc, #88]	; (80072f8 <HAL_TIM_Base_Start+0xb0>)
 80072a0:	4293      	cmp	r3, r2
 80072a2:	d111      	bne.n	80072c8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80072a4:	687b      	ldr	r3, [r7, #4]
 80072a6:	681b      	ldr	r3, [r3, #0]
 80072a8:	689b      	ldr	r3, [r3, #8]
 80072aa:	f003 0307 	and.w	r3, r3, #7
 80072ae:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072b0:	68fb      	ldr	r3, [r7, #12]
 80072b2:	2b06      	cmp	r3, #6
 80072b4:	d010      	beq.n	80072d8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80072b6:	687b      	ldr	r3, [r7, #4]
 80072b8:	681b      	ldr	r3, [r3, #0]
 80072ba:	681a      	ldr	r2, [r3, #0]
 80072bc:	687b      	ldr	r3, [r7, #4]
 80072be:	681b      	ldr	r3, [r3, #0]
 80072c0:	f042 0201 	orr.w	r2, r2, #1
 80072c4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80072c6:	e007      	b.n	80072d8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	681a      	ldr	r2, [r3, #0]
 80072ce:	687b      	ldr	r3, [r7, #4]
 80072d0:	681b      	ldr	r3, [r3, #0]
 80072d2:	f042 0201 	orr.w	r2, r2, #1
 80072d6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80072d8:	2300      	movs	r3, #0
}
 80072da:	4618      	mov	r0, r3
 80072dc:	3714      	adds	r7, #20
 80072de:	46bd      	mov	sp, r7
 80072e0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80072e4:	4770      	bx	lr
 80072e6:	bf00      	nop
 80072e8:	40010000 	.word	0x40010000
 80072ec:	40000400 	.word	0x40000400
 80072f0:	40000800 	.word	0x40000800
 80072f4:	40000c00 	.word	0x40000c00
 80072f8:	40014000 	.word	0x40014000

080072fc <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80072fc:	b480      	push	{r7}
 80072fe:	b085      	sub	sp, #20
 8007300:	af00      	add	r7, sp, #0
 8007302:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007304:	687b      	ldr	r3, [r7, #4]
 8007306:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800730a:	b2db      	uxtb	r3, r3
 800730c:	2b01      	cmp	r3, #1
 800730e:	d001      	beq.n	8007314 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8007310:	2301      	movs	r3, #1
 8007312:	e044      	b.n	800739e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007314:	687b      	ldr	r3, [r7, #4]
 8007316:	2202      	movs	r2, #2
 8007318:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800731c:	687b      	ldr	r3, [r7, #4]
 800731e:	681b      	ldr	r3, [r3, #0]
 8007320:	68da      	ldr	r2, [r3, #12]
 8007322:	687b      	ldr	r3, [r7, #4]
 8007324:	681b      	ldr	r3, [r3, #0]
 8007326:	f042 0201 	orr.w	r2, r2, #1
 800732a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800732c:	687b      	ldr	r3, [r7, #4]
 800732e:	681b      	ldr	r3, [r3, #0]
 8007330:	4a1e      	ldr	r2, [pc, #120]	; (80073ac <HAL_TIM_Base_Start_IT+0xb0>)
 8007332:	4293      	cmp	r3, r2
 8007334:	d018      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 8007336:	687b      	ldr	r3, [r7, #4]
 8007338:	681b      	ldr	r3, [r3, #0]
 800733a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800733e:	d013      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 8007340:	687b      	ldr	r3, [r7, #4]
 8007342:	681b      	ldr	r3, [r3, #0]
 8007344:	4a1a      	ldr	r2, [pc, #104]	; (80073b0 <HAL_TIM_Base_Start_IT+0xb4>)
 8007346:	4293      	cmp	r3, r2
 8007348:	d00e      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 800734a:	687b      	ldr	r3, [r7, #4]
 800734c:	681b      	ldr	r3, [r3, #0]
 800734e:	4a19      	ldr	r2, [pc, #100]	; (80073b4 <HAL_TIM_Base_Start_IT+0xb8>)
 8007350:	4293      	cmp	r3, r2
 8007352:	d009      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 8007354:	687b      	ldr	r3, [r7, #4]
 8007356:	681b      	ldr	r3, [r3, #0]
 8007358:	4a17      	ldr	r2, [pc, #92]	; (80073b8 <HAL_TIM_Base_Start_IT+0xbc>)
 800735a:	4293      	cmp	r3, r2
 800735c:	d004      	beq.n	8007368 <HAL_TIM_Base_Start_IT+0x6c>
 800735e:	687b      	ldr	r3, [r7, #4]
 8007360:	681b      	ldr	r3, [r3, #0]
 8007362:	4a16      	ldr	r2, [pc, #88]	; (80073bc <HAL_TIM_Base_Start_IT+0xc0>)
 8007364:	4293      	cmp	r3, r2
 8007366:	d111      	bne.n	800738c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007368:	687b      	ldr	r3, [r7, #4]
 800736a:	681b      	ldr	r3, [r3, #0]
 800736c:	689b      	ldr	r3, [r3, #8]
 800736e:	f003 0307 	and.w	r3, r3, #7
 8007372:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007374:	68fb      	ldr	r3, [r7, #12]
 8007376:	2b06      	cmp	r3, #6
 8007378:	d010      	beq.n	800739c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800737a:	687b      	ldr	r3, [r7, #4]
 800737c:	681b      	ldr	r3, [r3, #0]
 800737e:	681a      	ldr	r2, [r3, #0]
 8007380:	687b      	ldr	r3, [r7, #4]
 8007382:	681b      	ldr	r3, [r3, #0]
 8007384:	f042 0201 	orr.w	r2, r2, #1
 8007388:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738a:	e007      	b.n	800739c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800738c:	687b      	ldr	r3, [r7, #4]
 800738e:	681b      	ldr	r3, [r3, #0]
 8007390:	681a      	ldr	r2, [r3, #0]
 8007392:	687b      	ldr	r3, [r7, #4]
 8007394:	681b      	ldr	r3, [r3, #0]
 8007396:	f042 0201 	orr.w	r2, r2, #1
 800739a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800739c:	2300      	movs	r3, #0
}
 800739e:	4618      	mov	r0, r3
 80073a0:	3714      	adds	r7, #20
 80073a2:	46bd      	mov	sp, r7
 80073a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80073a8:	4770      	bx	lr
 80073aa:	bf00      	nop
 80073ac:	40010000 	.word	0x40010000
 80073b0:	40000400 	.word	0x40000400
 80073b4:	40000800 	.word	0x40000800
 80073b8:	40000c00 	.word	0x40000c00
 80073bc:	40014000 	.word	0x40014000

080073c0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80073c0:	b580      	push	{r7, lr}
 80073c2:	b082      	sub	sp, #8
 80073c4:	af00      	add	r7, sp, #0
 80073c6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2b00      	cmp	r3, #0
 80073cc:	d101      	bne.n	80073d2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80073ce:	2301      	movs	r3, #1
 80073d0:	e041      	b.n	8007456 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073d2:	687b      	ldr	r3, [r7, #4]
 80073d4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073d8:	b2db      	uxtb	r3, r3
 80073da:	2b00      	cmp	r3, #0
 80073dc:	d106      	bne.n	80073ec <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073de:	687b      	ldr	r3, [r7, #4]
 80073e0:	2200      	movs	r2, #0
 80073e2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80073e6:	6878      	ldr	r0, [r7, #4]
 80073e8:	f000 f839 	bl	800745e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073ec:	687b      	ldr	r3, [r7, #4]
 80073ee:	2202      	movs	r2, #2
 80073f0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80073f4:	687b      	ldr	r3, [r7, #4]
 80073f6:	681a      	ldr	r2, [r3, #0]
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	3304      	adds	r3, #4
 80073fc:	4619      	mov	r1, r3
 80073fe:	4610      	mov	r0, r2
 8007400:	f000 fcce 	bl	8007da0 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007404:	687b      	ldr	r3, [r7, #4]
 8007406:	2201      	movs	r2, #1
 8007408:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800740c:	687b      	ldr	r3, [r7, #4]
 800740e:	2201      	movs	r2, #1
 8007410:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007414:	687b      	ldr	r3, [r7, #4]
 8007416:	2201      	movs	r2, #1
 8007418:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	2201      	movs	r2, #1
 8007420:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007424:	687b      	ldr	r3, [r7, #4]
 8007426:	2201      	movs	r2, #1
 8007428:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800742c:	687b      	ldr	r3, [r7, #4]
 800742e:	2201      	movs	r2, #1
 8007430:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007434:	687b      	ldr	r3, [r7, #4]
 8007436:	2201      	movs	r2, #1
 8007438:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800743c:	687b      	ldr	r3, [r7, #4]
 800743e:	2201      	movs	r2, #1
 8007440:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	2201      	movs	r2, #1
 8007448:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800744c:	687b      	ldr	r3, [r7, #4]
 800744e:	2201      	movs	r2, #1
 8007450:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007454:	2300      	movs	r3, #0
}
 8007456:	4618      	mov	r0, r3
 8007458:	3708      	adds	r7, #8
 800745a:	46bd      	mov	sp, r7
 800745c:	bd80      	pop	{r7, pc}

0800745e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800745e:	b480      	push	{r7}
 8007460:	b083      	sub	sp, #12
 8007462:	af00      	add	r7, sp, #0
 8007464:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007466:	bf00      	nop
 8007468:	370c      	adds	r7, #12
 800746a:	46bd      	mov	sp, r7
 800746c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007470:	4770      	bx	lr
	...

08007474 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007474:	b580      	push	{r7, lr}
 8007476:	b084      	sub	sp, #16
 8007478:	af00      	add	r7, sp, #0
 800747a:	6078      	str	r0, [r7, #4]
 800747c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	2b00      	cmp	r3, #0
 8007482:	d109      	bne.n	8007498 <HAL_TIM_PWM_Start+0x24>
 8007484:	687b      	ldr	r3, [r7, #4]
 8007486:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800748a:	b2db      	uxtb	r3, r3
 800748c:	2b01      	cmp	r3, #1
 800748e:	bf14      	ite	ne
 8007490:	2301      	movne	r3, #1
 8007492:	2300      	moveq	r3, #0
 8007494:	b2db      	uxtb	r3, r3
 8007496:	e022      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 8007498:	683b      	ldr	r3, [r7, #0]
 800749a:	2b04      	cmp	r3, #4
 800749c:	d109      	bne.n	80074b2 <HAL_TIM_PWM_Start+0x3e>
 800749e:	687b      	ldr	r3, [r7, #4]
 80074a0:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80074a4:	b2db      	uxtb	r3, r3
 80074a6:	2b01      	cmp	r3, #1
 80074a8:	bf14      	ite	ne
 80074aa:	2301      	movne	r3, #1
 80074ac:	2300      	moveq	r3, #0
 80074ae:	b2db      	uxtb	r3, r3
 80074b0:	e015      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074b2:	683b      	ldr	r3, [r7, #0]
 80074b4:	2b08      	cmp	r3, #8
 80074b6:	d109      	bne.n	80074cc <HAL_TIM_PWM_Start+0x58>
 80074b8:	687b      	ldr	r3, [r7, #4]
 80074ba:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80074be:	b2db      	uxtb	r3, r3
 80074c0:	2b01      	cmp	r3, #1
 80074c2:	bf14      	ite	ne
 80074c4:	2301      	movne	r3, #1
 80074c6:	2300      	moveq	r3, #0
 80074c8:	b2db      	uxtb	r3, r3
 80074ca:	e008      	b.n	80074de <HAL_TIM_PWM_Start+0x6a>
 80074cc:	687b      	ldr	r3, [r7, #4]
 80074ce:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80074d2:	b2db      	uxtb	r3, r3
 80074d4:	2b01      	cmp	r3, #1
 80074d6:	bf14      	ite	ne
 80074d8:	2301      	movne	r3, #1
 80074da:	2300      	moveq	r3, #0
 80074dc:	b2db      	uxtb	r3, r3
 80074de:	2b00      	cmp	r3, #0
 80074e0:	d001      	beq.n	80074e6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80074e2:	2301      	movs	r3, #1
 80074e4:	e068      	b.n	80075b8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80074e6:	683b      	ldr	r3, [r7, #0]
 80074e8:	2b00      	cmp	r3, #0
 80074ea:	d104      	bne.n	80074f6 <HAL_TIM_PWM_Start+0x82>
 80074ec:	687b      	ldr	r3, [r7, #4]
 80074ee:	2202      	movs	r2, #2
 80074f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80074f4:	e013      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 80074f6:	683b      	ldr	r3, [r7, #0]
 80074f8:	2b04      	cmp	r3, #4
 80074fa:	d104      	bne.n	8007506 <HAL_TIM_PWM_Start+0x92>
 80074fc:	687b      	ldr	r3, [r7, #4]
 80074fe:	2202      	movs	r2, #2
 8007500:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007504:	e00b      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007506:	683b      	ldr	r3, [r7, #0]
 8007508:	2b08      	cmp	r3, #8
 800750a:	d104      	bne.n	8007516 <HAL_TIM_PWM_Start+0xa2>
 800750c:	687b      	ldr	r3, [r7, #4]
 800750e:	2202      	movs	r2, #2
 8007510:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007514:	e003      	b.n	800751e <HAL_TIM_PWM_Start+0xaa>
 8007516:	687b      	ldr	r3, [r7, #4]
 8007518:	2202      	movs	r2, #2
 800751a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	681b      	ldr	r3, [r3, #0]
 8007522:	2201      	movs	r2, #1
 8007524:	6839      	ldr	r1, [r7, #0]
 8007526:	4618      	mov	r0, r3
 8007528:	f000 fee0 	bl	80082ec <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800752c:	687b      	ldr	r3, [r7, #4]
 800752e:	681b      	ldr	r3, [r3, #0]
 8007530:	4a23      	ldr	r2, [pc, #140]	; (80075c0 <HAL_TIM_PWM_Start+0x14c>)
 8007532:	4293      	cmp	r3, r2
 8007534:	d107      	bne.n	8007546 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	681b      	ldr	r3, [r3, #0]
 800753a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800753c:	687b      	ldr	r3, [r7, #4]
 800753e:	681b      	ldr	r3, [r3, #0]
 8007540:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007544:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007546:	687b      	ldr	r3, [r7, #4]
 8007548:	681b      	ldr	r3, [r3, #0]
 800754a:	4a1d      	ldr	r2, [pc, #116]	; (80075c0 <HAL_TIM_PWM_Start+0x14c>)
 800754c:	4293      	cmp	r3, r2
 800754e:	d018      	beq.n	8007582 <HAL_TIM_PWM_Start+0x10e>
 8007550:	687b      	ldr	r3, [r7, #4]
 8007552:	681b      	ldr	r3, [r3, #0]
 8007554:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007558:	d013      	beq.n	8007582 <HAL_TIM_PWM_Start+0x10e>
 800755a:	687b      	ldr	r3, [r7, #4]
 800755c:	681b      	ldr	r3, [r3, #0]
 800755e:	4a19      	ldr	r2, [pc, #100]	; (80075c4 <HAL_TIM_PWM_Start+0x150>)
 8007560:	4293      	cmp	r3, r2
 8007562:	d00e      	beq.n	8007582 <HAL_TIM_PWM_Start+0x10e>
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	681b      	ldr	r3, [r3, #0]
 8007568:	4a17      	ldr	r2, [pc, #92]	; (80075c8 <HAL_TIM_PWM_Start+0x154>)
 800756a:	4293      	cmp	r3, r2
 800756c:	d009      	beq.n	8007582 <HAL_TIM_PWM_Start+0x10e>
 800756e:	687b      	ldr	r3, [r7, #4]
 8007570:	681b      	ldr	r3, [r3, #0]
 8007572:	4a16      	ldr	r2, [pc, #88]	; (80075cc <HAL_TIM_PWM_Start+0x158>)
 8007574:	4293      	cmp	r3, r2
 8007576:	d004      	beq.n	8007582 <HAL_TIM_PWM_Start+0x10e>
 8007578:	687b      	ldr	r3, [r7, #4]
 800757a:	681b      	ldr	r3, [r3, #0]
 800757c:	4a14      	ldr	r2, [pc, #80]	; (80075d0 <HAL_TIM_PWM_Start+0x15c>)
 800757e:	4293      	cmp	r3, r2
 8007580:	d111      	bne.n	80075a6 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	681b      	ldr	r3, [r3, #0]
 8007586:	689b      	ldr	r3, [r3, #8]
 8007588:	f003 0307 	and.w	r3, r3, #7
 800758c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800758e:	68fb      	ldr	r3, [r7, #12]
 8007590:	2b06      	cmp	r3, #6
 8007592:	d010      	beq.n	80075b6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007594:	687b      	ldr	r3, [r7, #4]
 8007596:	681b      	ldr	r3, [r3, #0]
 8007598:	681a      	ldr	r2, [r3, #0]
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	f042 0201 	orr.w	r2, r2, #1
 80075a2:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80075a4:	e007      	b.n	80075b6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80075a6:	687b      	ldr	r3, [r7, #4]
 80075a8:	681b      	ldr	r3, [r3, #0]
 80075aa:	681a      	ldr	r2, [r3, #0]
 80075ac:	687b      	ldr	r3, [r7, #4]
 80075ae:	681b      	ldr	r3, [r3, #0]
 80075b0:	f042 0201 	orr.w	r2, r2, #1
 80075b4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80075b6:	2300      	movs	r3, #0
}
 80075b8:	4618      	mov	r0, r3
 80075ba:	3710      	adds	r7, #16
 80075bc:	46bd      	mov	sp, r7
 80075be:	bd80      	pop	{r7, pc}
 80075c0:	40010000 	.word	0x40010000
 80075c4:	40000400 	.word	0x40000400
 80075c8:	40000800 	.word	0x40000800
 80075cc:	40000c00 	.word	0x40000c00
 80075d0:	40014000 	.word	0x40014000

080075d4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80075d4:	b580      	push	{r7, lr}
 80075d6:	b086      	sub	sp, #24
 80075d8:	af00      	add	r7, sp, #0
 80075da:	6078      	str	r0, [r7, #4]
 80075dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80075de:	687b      	ldr	r3, [r7, #4]
 80075e0:	2b00      	cmp	r3, #0
 80075e2:	d101      	bne.n	80075e8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80075e4:	2301      	movs	r3, #1
 80075e6:	e097      	b.n	8007718 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80075e8:	687b      	ldr	r3, [r7, #4]
 80075ea:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80075ee:	b2db      	uxtb	r3, r3
 80075f0:	2b00      	cmp	r3, #0
 80075f2:	d106      	bne.n	8007602 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80075f4:	687b      	ldr	r3, [r7, #4]
 80075f6:	2200      	movs	r2, #0
 80075f8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80075fc:	6878      	ldr	r0, [r7, #4]
 80075fe:	f7fc f87b 	bl	80036f8 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007602:	687b      	ldr	r3, [r7, #4]
 8007604:	2202      	movs	r2, #2
 8007606:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 800760a:	687b      	ldr	r3, [r7, #4]
 800760c:	681b      	ldr	r3, [r3, #0]
 800760e:	689b      	ldr	r3, [r3, #8]
 8007610:	687a      	ldr	r2, [r7, #4]
 8007612:	6812      	ldr	r2, [r2, #0]
 8007614:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007618:	f023 0307 	bic.w	r3, r3, #7
 800761c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681a      	ldr	r2, [r3, #0]
 8007622:	687b      	ldr	r3, [r7, #4]
 8007624:	3304      	adds	r3, #4
 8007626:	4619      	mov	r1, r3
 8007628:	4610      	mov	r0, r2
 800762a:	f000 fbb9 	bl	8007da0 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800762e:	687b      	ldr	r3, [r7, #4]
 8007630:	681b      	ldr	r3, [r3, #0]
 8007632:	689b      	ldr	r3, [r3, #8]
 8007634:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007636:	687b      	ldr	r3, [r7, #4]
 8007638:	681b      	ldr	r3, [r3, #0]
 800763a:	699b      	ldr	r3, [r3, #24]
 800763c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800763e:	687b      	ldr	r3, [r7, #4]
 8007640:	681b      	ldr	r3, [r3, #0]
 8007642:	6a1b      	ldr	r3, [r3, #32]
 8007644:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007646:	683b      	ldr	r3, [r7, #0]
 8007648:	681b      	ldr	r3, [r3, #0]
 800764a:	697a      	ldr	r2, [r7, #20]
 800764c:	4313      	orrs	r3, r2
 800764e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8007650:	693b      	ldr	r3, [r7, #16]
 8007652:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007656:	f023 0303 	bic.w	r3, r3, #3
 800765a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 800765c:	683b      	ldr	r3, [r7, #0]
 800765e:	689a      	ldr	r2, [r3, #8]
 8007660:	683b      	ldr	r3, [r7, #0]
 8007662:	699b      	ldr	r3, [r3, #24]
 8007664:	021b      	lsls	r3, r3, #8
 8007666:	4313      	orrs	r3, r2
 8007668:	693a      	ldr	r2, [r7, #16]
 800766a:	4313      	orrs	r3, r2
 800766c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800766e:	693b      	ldr	r3, [r7, #16]
 8007670:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007674:	f023 030c 	bic.w	r3, r3, #12
 8007678:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 800767a:	693b      	ldr	r3, [r7, #16]
 800767c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007680:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007684:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007686:	683b      	ldr	r3, [r7, #0]
 8007688:	68da      	ldr	r2, [r3, #12]
 800768a:	683b      	ldr	r3, [r7, #0]
 800768c:	69db      	ldr	r3, [r3, #28]
 800768e:	021b      	lsls	r3, r3, #8
 8007690:	4313      	orrs	r3, r2
 8007692:	693a      	ldr	r2, [r7, #16]
 8007694:	4313      	orrs	r3, r2
 8007696:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007698:	683b      	ldr	r3, [r7, #0]
 800769a:	691b      	ldr	r3, [r3, #16]
 800769c:	011a      	lsls	r2, r3, #4
 800769e:	683b      	ldr	r3, [r7, #0]
 80076a0:	6a1b      	ldr	r3, [r3, #32]
 80076a2:	031b      	lsls	r3, r3, #12
 80076a4:	4313      	orrs	r3, r2
 80076a6:	693a      	ldr	r2, [r7, #16]
 80076a8:	4313      	orrs	r3, r2
 80076aa:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80076ac:	68fb      	ldr	r3, [r7, #12]
 80076ae:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80076b2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80076b4:	68fb      	ldr	r3, [r7, #12]
 80076b6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80076ba:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80076bc:	683b      	ldr	r3, [r7, #0]
 80076be:	685a      	ldr	r2, [r3, #4]
 80076c0:	683b      	ldr	r3, [r7, #0]
 80076c2:	695b      	ldr	r3, [r3, #20]
 80076c4:	011b      	lsls	r3, r3, #4
 80076c6:	4313      	orrs	r3, r2
 80076c8:	68fa      	ldr	r2, [r7, #12]
 80076ca:	4313      	orrs	r3, r2
 80076cc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80076ce:	687b      	ldr	r3, [r7, #4]
 80076d0:	681b      	ldr	r3, [r3, #0]
 80076d2:	697a      	ldr	r2, [r7, #20]
 80076d4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80076d6:	687b      	ldr	r3, [r7, #4]
 80076d8:	681b      	ldr	r3, [r3, #0]
 80076da:	693a      	ldr	r2, [r7, #16]
 80076dc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	68fa      	ldr	r2, [r7, #12]
 80076e4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80076e6:	687b      	ldr	r3, [r7, #4]
 80076e8:	2201      	movs	r2, #1
 80076ea:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	2201      	movs	r2, #1
 80076f2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	2201      	movs	r2, #1
 80076fa:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80076fe:	687b      	ldr	r3, [r7, #4]
 8007700:	2201      	movs	r2, #1
 8007702:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007706:	687b      	ldr	r3, [r7, #4]
 8007708:	2201      	movs	r2, #1
 800770a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2201      	movs	r2, #1
 8007712:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007716:	2300      	movs	r3, #0
}
 8007718:	4618      	mov	r0, r3
 800771a:	3718      	adds	r7, #24
 800771c:	46bd      	mov	sp, r7
 800771e:	bd80      	pop	{r7, pc}

08007720 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007720:	b580      	push	{r7, lr}
 8007722:	b084      	sub	sp, #16
 8007724:	af00      	add	r7, sp, #0
 8007726:	6078      	str	r0, [r7, #4]
 8007728:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 800772a:	687b      	ldr	r3, [r7, #4]
 800772c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007730:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007738:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 800773a:	687b      	ldr	r3, [r7, #4]
 800773c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8007740:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8007742:	687b      	ldr	r3, [r7, #4]
 8007744:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007748:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 800774a:	683b      	ldr	r3, [r7, #0]
 800774c:	2b00      	cmp	r3, #0
 800774e:	d110      	bne.n	8007772 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007750:	7bfb      	ldrb	r3, [r7, #15]
 8007752:	2b01      	cmp	r3, #1
 8007754:	d102      	bne.n	800775c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007756:	7b7b      	ldrb	r3, [r7, #13]
 8007758:	2b01      	cmp	r3, #1
 800775a:	d001      	beq.n	8007760 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 800775c:	2301      	movs	r3, #1
 800775e:	e069      	b.n	8007834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007760:	687b      	ldr	r3, [r7, #4]
 8007762:	2202      	movs	r2, #2
 8007764:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	2202      	movs	r2, #2
 800776c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007770:	e031      	b.n	80077d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8007772:	683b      	ldr	r3, [r7, #0]
 8007774:	2b04      	cmp	r3, #4
 8007776:	d110      	bne.n	800779a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007778:	7bbb      	ldrb	r3, [r7, #14]
 800777a:	2b01      	cmp	r3, #1
 800777c:	d102      	bne.n	8007784 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800777e:	7b3b      	ldrb	r3, [r7, #12]
 8007780:	2b01      	cmp	r3, #1
 8007782:	d001      	beq.n	8007788 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007784:	2301      	movs	r3, #1
 8007786:	e055      	b.n	8007834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007788:	687b      	ldr	r3, [r7, #4]
 800778a:	2202      	movs	r2, #2
 800778c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	2202      	movs	r2, #2
 8007794:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007798:	e01d      	b.n	80077d6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800779a:	7bfb      	ldrb	r3, [r7, #15]
 800779c:	2b01      	cmp	r3, #1
 800779e:	d108      	bne.n	80077b2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a0:	7bbb      	ldrb	r3, [r7, #14]
 80077a2:	2b01      	cmp	r3, #1
 80077a4:	d105      	bne.n	80077b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80077a6:	7b7b      	ldrb	r3, [r7, #13]
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d102      	bne.n	80077b2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80077ac:	7b3b      	ldrb	r3, [r7, #12]
 80077ae:	2b01      	cmp	r3, #1
 80077b0:	d001      	beq.n	80077b6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80077b2:	2301      	movs	r3, #1
 80077b4:	e03e      	b.n	8007834 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077b6:	687b      	ldr	r3, [r7, #4]
 80077b8:	2202      	movs	r2, #2
 80077ba:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077be:	687b      	ldr	r3, [r7, #4]
 80077c0:	2202      	movs	r2, #2
 80077c2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	2202      	movs	r2, #2
 80077ca:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80077ce:	687b      	ldr	r3, [r7, #4]
 80077d0:	2202      	movs	r2, #2
 80077d2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80077d6:	683b      	ldr	r3, [r7, #0]
 80077d8:	2b00      	cmp	r3, #0
 80077da:	d003      	beq.n	80077e4 <HAL_TIM_Encoder_Start+0xc4>
 80077dc:	683b      	ldr	r3, [r7, #0]
 80077de:	2b04      	cmp	r3, #4
 80077e0:	d008      	beq.n	80077f4 <HAL_TIM_Encoder_Start+0xd4>
 80077e2:	e00f      	b.n	8007804 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	2201      	movs	r2, #1
 80077ea:	2100      	movs	r1, #0
 80077ec:	4618      	mov	r0, r3
 80077ee:	f000 fd7d 	bl	80082ec <TIM_CCxChannelCmd>
      break;
 80077f2:	e016      	b.n	8007822 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80077f4:	687b      	ldr	r3, [r7, #4]
 80077f6:	681b      	ldr	r3, [r3, #0]
 80077f8:	2201      	movs	r2, #1
 80077fa:	2104      	movs	r1, #4
 80077fc:	4618      	mov	r0, r3
 80077fe:	f000 fd75 	bl	80082ec <TIM_CCxChannelCmd>
      break;
 8007802:	e00e      	b.n	8007822 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	2201      	movs	r2, #1
 800780a:	2100      	movs	r1, #0
 800780c:	4618      	mov	r0, r3
 800780e:	f000 fd6d 	bl	80082ec <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8007812:	687b      	ldr	r3, [r7, #4]
 8007814:	681b      	ldr	r3, [r3, #0]
 8007816:	2201      	movs	r2, #1
 8007818:	2104      	movs	r1, #4
 800781a:	4618      	mov	r0, r3
 800781c:	f000 fd66 	bl	80082ec <TIM_CCxChannelCmd>
      break;
 8007820:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	681a      	ldr	r2, [r3, #0]
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f042 0201 	orr.w	r2, r2, #1
 8007830:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8007832:	2300      	movs	r3, #0
}
 8007834:	4618      	mov	r0, r3
 8007836:	3710      	adds	r7, #16
 8007838:	46bd      	mov	sp, r7
 800783a:	bd80      	pop	{r7, pc}

0800783c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 800783c:	b580      	push	{r7, lr}
 800783e:	b082      	sub	sp, #8
 8007840:	af00      	add	r7, sp, #0
 8007842:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007844:	687b      	ldr	r3, [r7, #4]
 8007846:	681b      	ldr	r3, [r3, #0]
 8007848:	691b      	ldr	r3, [r3, #16]
 800784a:	f003 0302 	and.w	r3, r3, #2
 800784e:	2b02      	cmp	r3, #2
 8007850:	d122      	bne.n	8007898 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8007852:	687b      	ldr	r3, [r7, #4]
 8007854:	681b      	ldr	r3, [r3, #0]
 8007856:	68db      	ldr	r3, [r3, #12]
 8007858:	f003 0302 	and.w	r3, r3, #2
 800785c:	2b02      	cmp	r3, #2
 800785e:	d11b      	bne.n	8007898 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	f06f 0202 	mvn.w	r2, #2
 8007868:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2201      	movs	r2, #1
 800786e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8007870:	687b      	ldr	r3, [r7, #4]
 8007872:	681b      	ldr	r3, [r3, #0]
 8007874:	699b      	ldr	r3, [r3, #24]
 8007876:	f003 0303 	and.w	r3, r3, #3
 800787a:	2b00      	cmp	r3, #0
 800787c:	d003      	beq.n	8007886 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800787e:	6878      	ldr	r0, [r7, #4]
 8007880:	f000 fa70 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 8007884:	e005      	b.n	8007892 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f000 fa62 	bl	8007d50 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800788c:	6878      	ldr	r0, [r7, #4]
 800788e:	f000 fa73 	bl	8007d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007892:	687b      	ldr	r3, [r7, #4]
 8007894:	2200      	movs	r2, #0
 8007896:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007898:	687b      	ldr	r3, [r7, #4]
 800789a:	681b      	ldr	r3, [r3, #0]
 800789c:	691b      	ldr	r3, [r3, #16]
 800789e:	f003 0304 	and.w	r3, r3, #4
 80078a2:	2b04      	cmp	r3, #4
 80078a4:	d122      	bne.n	80078ec <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	681b      	ldr	r3, [r3, #0]
 80078aa:	68db      	ldr	r3, [r3, #12]
 80078ac:	f003 0304 	and.w	r3, r3, #4
 80078b0:	2b04      	cmp	r3, #4
 80078b2:	d11b      	bne.n	80078ec <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	681b      	ldr	r3, [r3, #0]
 80078b8:	f06f 0204 	mvn.w	r2, #4
 80078bc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80078be:	687b      	ldr	r3, [r7, #4]
 80078c0:	2202      	movs	r2, #2
 80078c2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80078c4:	687b      	ldr	r3, [r7, #4]
 80078c6:	681b      	ldr	r3, [r3, #0]
 80078c8:	699b      	ldr	r3, [r3, #24]
 80078ca:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80078ce:	2b00      	cmp	r3, #0
 80078d0:	d003      	beq.n	80078da <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80078d2:	6878      	ldr	r0, [r7, #4]
 80078d4:	f000 fa46 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 80078d8:	e005      	b.n	80078e6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80078da:	6878      	ldr	r0, [r7, #4]
 80078dc:	f000 fa38 	bl	8007d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80078e0:	6878      	ldr	r0, [r7, #4]
 80078e2:	f000 fa49 	bl	8007d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80078e6:	687b      	ldr	r3, [r7, #4]
 80078e8:	2200      	movs	r2, #0
 80078ea:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80078ec:	687b      	ldr	r3, [r7, #4]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	691b      	ldr	r3, [r3, #16]
 80078f2:	f003 0308 	and.w	r3, r3, #8
 80078f6:	2b08      	cmp	r3, #8
 80078f8:	d122      	bne.n	8007940 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80078fa:	687b      	ldr	r3, [r7, #4]
 80078fc:	681b      	ldr	r3, [r3, #0]
 80078fe:	68db      	ldr	r3, [r3, #12]
 8007900:	f003 0308 	and.w	r3, r3, #8
 8007904:	2b08      	cmp	r3, #8
 8007906:	d11b      	bne.n	8007940 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007908:	687b      	ldr	r3, [r7, #4]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	f06f 0208 	mvn.w	r2, #8
 8007910:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8007912:	687b      	ldr	r3, [r7, #4]
 8007914:	2204      	movs	r2, #4
 8007916:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007918:	687b      	ldr	r3, [r7, #4]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	69db      	ldr	r3, [r3, #28]
 800791e:	f003 0303 	and.w	r3, r3, #3
 8007922:	2b00      	cmp	r3, #0
 8007924:	d003      	beq.n	800792e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007926:	6878      	ldr	r0, [r7, #4]
 8007928:	f000 fa1c 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 800792c:	e005      	b.n	800793a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800792e:	6878      	ldr	r0, [r7, #4]
 8007930:	f000 fa0e 	bl	8007d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007934:	6878      	ldr	r0, [r7, #4]
 8007936:	f000 fa1f 	bl	8007d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2200      	movs	r2, #0
 800793e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8007940:	687b      	ldr	r3, [r7, #4]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	691b      	ldr	r3, [r3, #16]
 8007946:	f003 0310 	and.w	r3, r3, #16
 800794a:	2b10      	cmp	r3, #16
 800794c:	d122      	bne.n	8007994 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800794e:	687b      	ldr	r3, [r7, #4]
 8007950:	681b      	ldr	r3, [r3, #0]
 8007952:	68db      	ldr	r3, [r3, #12]
 8007954:	f003 0310 	and.w	r3, r3, #16
 8007958:	2b10      	cmp	r3, #16
 800795a:	d11b      	bne.n	8007994 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 800795c:	687b      	ldr	r3, [r7, #4]
 800795e:	681b      	ldr	r3, [r3, #0]
 8007960:	f06f 0210 	mvn.w	r2, #16
 8007964:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007966:	687b      	ldr	r3, [r7, #4]
 8007968:	2208      	movs	r2, #8
 800796a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 800796c:	687b      	ldr	r3, [r7, #4]
 800796e:	681b      	ldr	r3, [r3, #0]
 8007970:	69db      	ldr	r3, [r3, #28]
 8007972:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007976:	2b00      	cmp	r3, #0
 8007978:	d003      	beq.n	8007982 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800797a:	6878      	ldr	r0, [r7, #4]
 800797c:	f000 f9f2 	bl	8007d64 <HAL_TIM_IC_CaptureCallback>
 8007980:	e005      	b.n	800798e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8007982:	6878      	ldr	r0, [r7, #4]
 8007984:	f000 f9e4 	bl	8007d50 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007988:	6878      	ldr	r0, [r7, #4]
 800798a:	f000 f9f5 	bl	8007d78 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800798e:	687b      	ldr	r3, [r7, #4]
 8007990:	2200      	movs	r2, #0
 8007992:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007994:	687b      	ldr	r3, [r7, #4]
 8007996:	681b      	ldr	r3, [r3, #0]
 8007998:	691b      	ldr	r3, [r3, #16]
 800799a:	f003 0301 	and.w	r3, r3, #1
 800799e:	2b01      	cmp	r3, #1
 80079a0:	d10e      	bne.n	80079c0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 80079a2:	687b      	ldr	r3, [r7, #4]
 80079a4:	681b      	ldr	r3, [r3, #0]
 80079a6:	68db      	ldr	r3, [r3, #12]
 80079a8:	f003 0301 	and.w	r3, r3, #1
 80079ac:	2b01      	cmp	r3, #1
 80079ae:	d107      	bne.n	80079c0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80079b0:	687b      	ldr	r3, [r7, #4]
 80079b2:	681b      	ldr	r3, [r3, #0]
 80079b4:	f06f 0201 	mvn.w	r2, #1
 80079b8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80079ba:	6878      	ldr	r0, [r7, #4]
 80079bc:	f7fb fde0 	bl	8003580 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80079c0:	687b      	ldr	r3, [r7, #4]
 80079c2:	681b      	ldr	r3, [r3, #0]
 80079c4:	691b      	ldr	r3, [r3, #16]
 80079c6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079ca:	2b80      	cmp	r3, #128	; 0x80
 80079cc:	d10e      	bne.n	80079ec <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	68db      	ldr	r3, [r3, #12]
 80079d4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80079d8:	2b80      	cmp	r3, #128	; 0x80
 80079da:	d107      	bne.n	80079ec <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	681b      	ldr	r3, [r3, #0]
 80079e0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80079e4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80079e6:	6878      	ldr	r0, [r7, #4]
 80079e8:	f000 fd1e 	bl	8008428 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80079f6:	2b40      	cmp	r3, #64	; 0x40
 80079f8:	d10e      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80079fa:	687b      	ldr	r3, [r7, #4]
 80079fc:	681b      	ldr	r3, [r3, #0]
 80079fe:	68db      	ldr	r3, [r3, #12]
 8007a00:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007a04:	2b40      	cmp	r3, #64	; 0x40
 8007a06:	d107      	bne.n	8007a18 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8007a10:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8007a12:	6878      	ldr	r0, [r7, #4]
 8007a14:	f000 f9ba 	bl	8007d8c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	691b      	ldr	r3, [r3, #16]
 8007a1e:	f003 0320 	and.w	r3, r3, #32
 8007a22:	2b20      	cmp	r3, #32
 8007a24:	d10e      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007a26:	687b      	ldr	r3, [r7, #4]
 8007a28:	681b      	ldr	r3, [r3, #0]
 8007a2a:	68db      	ldr	r3, [r3, #12]
 8007a2c:	f003 0320 	and.w	r3, r3, #32
 8007a30:	2b20      	cmp	r3, #32
 8007a32:	d107      	bne.n	8007a44 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007a34:	687b      	ldr	r3, [r7, #4]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	f06f 0220 	mvn.w	r2, #32
 8007a3c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8007a3e:	6878      	ldr	r0, [r7, #4]
 8007a40:	f000 fce8 	bl	8008414 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007a44:	bf00      	nop
 8007a46:	3708      	adds	r7, #8
 8007a48:	46bd      	mov	sp, r7
 8007a4a:	bd80      	pop	{r7, pc}

08007a4c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007a4c:	b580      	push	{r7, lr}
 8007a4e:	b084      	sub	sp, #16
 8007a50:	af00      	add	r7, sp, #0
 8007a52:	60f8      	str	r0, [r7, #12]
 8007a54:	60b9      	str	r1, [r7, #8]
 8007a56:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a58:	68fb      	ldr	r3, [r7, #12]
 8007a5a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007a5e:	2b01      	cmp	r3, #1
 8007a60:	d101      	bne.n	8007a66 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8007a62:	2302      	movs	r3, #2
 8007a64:	e0ac      	b.n	8007bc0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8007a66:	68fb      	ldr	r3, [r7, #12]
 8007a68:	2201      	movs	r2, #1
 8007a6a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8007a6e:	687b      	ldr	r3, [r7, #4]
 8007a70:	2b0c      	cmp	r3, #12
 8007a72:	f200 809f 	bhi.w	8007bb4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007a76:	a201      	add	r2, pc, #4	; (adr r2, 8007a7c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007a78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007a7c:	08007ab1 	.word	0x08007ab1
 8007a80:	08007bb5 	.word	0x08007bb5
 8007a84:	08007bb5 	.word	0x08007bb5
 8007a88:	08007bb5 	.word	0x08007bb5
 8007a8c:	08007af1 	.word	0x08007af1
 8007a90:	08007bb5 	.word	0x08007bb5
 8007a94:	08007bb5 	.word	0x08007bb5
 8007a98:	08007bb5 	.word	0x08007bb5
 8007a9c:	08007b33 	.word	0x08007b33
 8007aa0:	08007bb5 	.word	0x08007bb5
 8007aa4:	08007bb5 	.word	0x08007bb5
 8007aa8:	08007bb5 	.word	0x08007bb5
 8007aac:	08007b73 	.word	0x08007b73
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8007ab0:	68fb      	ldr	r3, [r7, #12]
 8007ab2:	681b      	ldr	r3, [r3, #0]
 8007ab4:	68b9      	ldr	r1, [r7, #8]
 8007ab6:	4618      	mov	r0, r3
 8007ab8:	f000 f9f2 	bl	8007ea0 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007abc:	68fb      	ldr	r3, [r7, #12]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	699a      	ldr	r2, [r3, #24]
 8007ac2:	68fb      	ldr	r3, [r7, #12]
 8007ac4:	681b      	ldr	r3, [r3, #0]
 8007ac6:	f042 0208 	orr.w	r2, r2, #8
 8007aca:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	699a      	ldr	r2, [r3, #24]
 8007ad2:	68fb      	ldr	r3, [r7, #12]
 8007ad4:	681b      	ldr	r3, [r3, #0]
 8007ad6:	f022 0204 	bic.w	r2, r2, #4
 8007ada:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8007adc:	68fb      	ldr	r3, [r7, #12]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	6999      	ldr	r1, [r3, #24]
 8007ae2:	68bb      	ldr	r3, [r7, #8]
 8007ae4:	691a      	ldr	r2, [r3, #16]
 8007ae6:	68fb      	ldr	r3, [r7, #12]
 8007ae8:	681b      	ldr	r3, [r3, #0]
 8007aea:	430a      	orrs	r2, r1
 8007aec:	619a      	str	r2, [r3, #24]
      break;
 8007aee:	e062      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8007af0:	68fb      	ldr	r3, [r7, #12]
 8007af2:	681b      	ldr	r3, [r3, #0]
 8007af4:	68b9      	ldr	r1, [r7, #8]
 8007af6:	4618      	mov	r0, r3
 8007af8:	f000 fa38 	bl	8007f6c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8007afc:	68fb      	ldr	r3, [r7, #12]
 8007afe:	681b      	ldr	r3, [r3, #0]
 8007b00:	699a      	ldr	r2, [r3, #24]
 8007b02:	68fb      	ldr	r3, [r7, #12]
 8007b04:	681b      	ldr	r3, [r3, #0]
 8007b06:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b0a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007b0c:	68fb      	ldr	r3, [r7, #12]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	699a      	ldr	r2, [r3, #24]
 8007b12:	68fb      	ldr	r3, [r7, #12]
 8007b14:	681b      	ldr	r3, [r3, #0]
 8007b16:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b1a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007b1c:	68fb      	ldr	r3, [r7, #12]
 8007b1e:	681b      	ldr	r3, [r3, #0]
 8007b20:	6999      	ldr	r1, [r3, #24]
 8007b22:	68bb      	ldr	r3, [r7, #8]
 8007b24:	691b      	ldr	r3, [r3, #16]
 8007b26:	021a      	lsls	r2, r3, #8
 8007b28:	68fb      	ldr	r3, [r7, #12]
 8007b2a:	681b      	ldr	r3, [r3, #0]
 8007b2c:	430a      	orrs	r2, r1
 8007b2e:	619a      	str	r2, [r3, #24]
      break;
 8007b30:	e041      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8007b32:	68fb      	ldr	r3, [r7, #12]
 8007b34:	681b      	ldr	r3, [r3, #0]
 8007b36:	68b9      	ldr	r1, [r7, #8]
 8007b38:	4618      	mov	r0, r3
 8007b3a:	f000 fa83 	bl	8008044 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007b3e:	68fb      	ldr	r3, [r7, #12]
 8007b40:	681b      	ldr	r3, [r3, #0]
 8007b42:	69da      	ldr	r2, [r3, #28]
 8007b44:	68fb      	ldr	r3, [r7, #12]
 8007b46:	681b      	ldr	r3, [r3, #0]
 8007b48:	f042 0208 	orr.w	r2, r2, #8
 8007b4c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007b4e:	68fb      	ldr	r3, [r7, #12]
 8007b50:	681b      	ldr	r3, [r3, #0]
 8007b52:	69da      	ldr	r2, [r3, #28]
 8007b54:	68fb      	ldr	r3, [r7, #12]
 8007b56:	681b      	ldr	r3, [r3, #0]
 8007b58:	f022 0204 	bic.w	r2, r2, #4
 8007b5c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007b5e:	68fb      	ldr	r3, [r7, #12]
 8007b60:	681b      	ldr	r3, [r3, #0]
 8007b62:	69d9      	ldr	r1, [r3, #28]
 8007b64:	68bb      	ldr	r3, [r7, #8]
 8007b66:	691a      	ldr	r2, [r3, #16]
 8007b68:	68fb      	ldr	r3, [r7, #12]
 8007b6a:	681b      	ldr	r3, [r3, #0]
 8007b6c:	430a      	orrs	r2, r1
 8007b6e:	61da      	str	r2, [r3, #28]
      break;
 8007b70:	e021      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007b72:	68fb      	ldr	r3, [r7, #12]
 8007b74:	681b      	ldr	r3, [r3, #0]
 8007b76:	68b9      	ldr	r1, [r7, #8]
 8007b78:	4618      	mov	r0, r3
 8007b7a:	f000 facd 	bl	8008118 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007b7e:	68fb      	ldr	r3, [r7, #12]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	69da      	ldr	r2, [r3, #28]
 8007b84:	68fb      	ldr	r3, [r7, #12]
 8007b86:	681b      	ldr	r3, [r3, #0]
 8007b88:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007b8c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007b8e:	68fb      	ldr	r3, [r7, #12]
 8007b90:	681b      	ldr	r3, [r3, #0]
 8007b92:	69da      	ldr	r2, [r3, #28]
 8007b94:	68fb      	ldr	r3, [r7, #12]
 8007b96:	681b      	ldr	r3, [r3, #0]
 8007b98:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007b9c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007b9e:	68fb      	ldr	r3, [r7, #12]
 8007ba0:	681b      	ldr	r3, [r3, #0]
 8007ba2:	69d9      	ldr	r1, [r3, #28]
 8007ba4:	68bb      	ldr	r3, [r7, #8]
 8007ba6:	691b      	ldr	r3, [r3, #16]
 8007ba8:	021a      	lsls	r2, r3, #8
 8007baa:	68fb      	ldr	r3, [r7, #12]
 8007bac:	681b      	ldr	r3, [r3, #0]
 8007bae:	430a      	orrs	r2, r1
 8007bb0:	61da      	str	r2, [r3, #28]
      break;
 8007bb2:	e000      	b.n	8007bb6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007bb4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007bb6:	68fb      	ldr	r3, [r7, #12]
 8007bb8:	2200      	movs	r2, #0
 8007bba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007bbe:	2300      	movs	r3, #0
}
 8007bc0:	4618      	mov	r0, r3
 8007bc2:	3710      	adds	r7, #16
 8007bc4:	46bd      	mov	sp, r7
 8007bc6:	bd80      	pop	{r7, pc}

08007bc8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007bc8:	b580      	push	{r7, lr}
 8007bca:	b084      	sub	sp, #16
 8007bcc:	af00      	add	r7, sp, #0
 8007bce:	6078      	str	r0, [r7, #4]
 8007bd0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007bd2:	687b      	ldr	r3, [r7, #4]
 8007bd4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007bd8:	2b01      	cmp	r3, #1
 8007bda:	d101      	bne.n	8007be0 <HAL_TIM_ConfigClockSource+0x18>
 8007bdc:	2302      	movs	r3, #2
 8007bde:	e0b3      	b.n	8007d48 <HAL_TIM_ConfigClockSource+0x180>
 8007be0:	687b      	ldr	r3, [r7, #4]
 8007be2:	2201      	movs	r2, #1
 8007be4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007be8:	687b      	ldr	r3, [r7, #4]
 8007bea:	2202      	movs	r2, #2
 8007bec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007bf0:	687b      	ldr	r3, [r7, #4]
 8007bf2:	681b      	ldr	r3, [r3, #0]
 8007bf4:	689b      	ldr	r3, [r3, #8]
 8007bf6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007bf8:	68fb      	ldr	r3, [r7, #12]
 8007bfa:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007bfe:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007c00:	68fb      	ldr	r3, [r7, #12]
 8007c02:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007c06:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007c08:	687b      	ldr	r3, [r7, #4]
 8007c0a:	681b      	ldr	r3, [r3, #0]
 8007c0c:	68fa      	ldr	r2, [r7, #12]
 8007c0e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007c10:	683b      	ldr	r3, [r7, #0]
 8007c12:	681b      	ldr	r3, [r3, #0]
 8007c14:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c18:	d03e      	beq.n	8007c98 <HAL_TIM_ConfigClockSource+0xd0>
 8007c1a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007c1e:	f200 8087 	bhi.w	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c22:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c26:	f000 8085 	beq.w	8007d34 <HAL_TIM_ConfigClockSource+0x16c>
 8007c2a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007c2e:	d87f      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c30:	2b70      	cmp	r3, #112	; 0x70
 8007c32:	d01a      	beq.n	8007c6a <HAL_TIM_ConfigClockSource+0xa2>
 8007c34:	2b70      	cmp	r3, #112	; 0x70
 8007c36:	d87b      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c38:	2b60      	cmp	r3, #96	; 0x60
 8007c3a:	d050      	beq.n	8007cde <HAL_TIM_ConfigClockSource+0x116>
 8007c3c:	2b60      	cmp	r3, #96	; 0x60
 8007c3e:	d877      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c40:	2b50      	cmp	r3, #80	; 0x50
 8007c42:	d03c      	beq.n	8007cbe <HAL_TIM_ConfigClockSource+0xf6>
 8007c44:	2b50      	cmp	r3, #80	; 0x50
 8007c46:	d873      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c48:	2b40      	cmp	r3, #64	; 0x40
 8007c4a:	d058      	beq.n	8007cfe <HAL_TIM_ConfigClockSource+0x136>
 8007c4c:	2b40      	cmp	r3, #64	; 0x40
 8007c4e:	d86f      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c50:	2b30      	cmp	r3, #48	; 0x30
 8007c52:	d064      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x156>
 8007c54:	2b30      	cmp	r3, #48	; 0x30
 8007c56:	d86b      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c58:	2b20      	cmp	r3, #32
 8007c5a:	d060      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x156>
 8007c5c:	2b20      	cmp	r3, #32
 8007c5e:	d867      	bhi.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
 8007c60:	2b00      	cmp	r3, #0
 8007c62:	d05c      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x156>
 8007c64:	2b10      	cmp	r3, #16
 8007c66:	d05a      	beq.n	8007d1e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007c68:	e062      	b.n	8007d30 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	6818      	ldr	r0, [r3, #0]
 8007c6e:	683b      	ldr	r3, [r7, #0]
 8007c70:	6899      	ldr	r1, [r3, #8]
 8007c72:	683b      	ldr	r3, [r7, #0]
 8007c74:	685a      	ldr	r2, [r3, #4]
 8007c76:	683b      	ldr	r3, [r7, #0]
 8007c78:	68db      	ldr	r3, [r3, #12]
 8007c7a:	f000 fb17 	bl	80082ac <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007c7e:	687b      	ldr	r3, [r7, #4]
 8007c80:	681b      	ldr	r3, [r3, #0]
 8007c82:	689b      	ldr	r3, [r3, #8]
 8007c84:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007c86:	68fb      	ldr	r3, [r7, #12]
 8007c88:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007c8c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	681b      	ldr	r3, [r3, #0]
 8007c92:	68fa      	ldr	r2, [r7, #12]
 8007c94:	609a      	str	r2, [r3, #8]
      break;
 8007c96:	e04e      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007c98:	687b      	ldr	r3, [r7, #4]
 8007c9a:	6818      	ldr	r0, [r3, #0]
 8007c9c:	683b      	ldr	r3, [r7, #0]
 8007c9e:	6899      	ldr	r1, [r3, #8]
 8007ca0:	683b      	ldr	r3, [r7, #0]
 8007ca2:	685a      	ldr	r2, [r3, #4]
 8007ca4:	683b      	ldr	r3, [r7, #0]
 8007ca6:	68db      	ldr	r3, [r3, #12]
 8007ca8:	f000 fb00 	bl	80082ac <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007cac:	687b      	ldr	r3, [r7, #4]
 8007cae:	681b      	ldr	r3, [r3, #0]
 8007cb0:	689a      	ldr	r2, [r3, #8]
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	681b      	ldr	r3, [r3, #0]
 8007cb6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007cba:	609a      	str	r2, [r3, #8]
      break;
 8007cbc:	e03b      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	6818      	ldr	r0, [r3, #0]
 8007cc2:	683b      	ldr	r3, [r7, #0]
 8007cc4:	6859      	ldr	r1, [r3, #4]
 8007cc6:	683b      	ldr	r3, [r7, #0]
 8007cc8:	68db      	ldr	r3, [r3, #12]
 8007cca:	461a      	mov	r2, r3
 8007ccc:	f000 fa74 	bl	80081b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	2150      	movs	r1, #80	; 0x50
 8007cd6:	4618      	mov	r0, r3
 8007cd8:	f000 facd 	bl	8008276 <TIM_ITRx_SetConfig>
      break;
 8007cdc:	e02b      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	6818      	ldr	r0, [r3, #0]
 8007ce2:	683b      	ldr	r3, [r7, #0]
 8007ce4:	6859      	ldr	r1, [r3, #4]
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	68db      	ldr	r3, [r3, #12]
 8007cea:	461a      	mov	r2, r3
 8007cec:	f000 fa93 	bl	8008216 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	681b      	ldr	r3, [r3, #0]
 8007cf4:	2160      	movs	r1, #96	; 0x60
 8007cf6:	4618      	mov	r0, r3
 8007cf8:	f000 fabd 	bl	8008276 <TIM_ITRx_SetConfig>
      break;
 8007cfc:	e01b      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007cfe:	687b      	ldr	r3, [r7, #4]
 8007d00:	6818      	ldr	r0, [r3, #0]
 8007d02:	683b      	ldr	r3, [r7, #0]
 8007d04:	6859      	ldr	r1, [r3, #4]
 8007d06:	683b      	ldr	r3, [r7, #0]
 8007d08:	68db      	ldr	r3, [r3, #12]
 8007d0a:	461a      	mov	r2, r3
 8007d0c:	f000 fa54 	bl	80081b8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007d10:	687b      	ldr	r3, [r7, #4]
 8007d12:	681b      	ldr	r3, [r3, #0]
 8007d14:	2140      	movs	r1, #64	; 0x40
 8007d16:	4618      	mov	r0, r3
 8007d18:	f000 faad 	bl	8008276 <TIM_ITRx_SetConfig>
      break;
 8007d1c:	e00b      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007d1e:	687b      	ldr	r3, [r7, #4]
 8007d20:	681a      	ldr	r2, [r3, #0]
 8007d22:	683b      	ldr	r3, [r7, #0]
 8007d24:	681b      	ldr	r3, [r3, #0]
 8007d26:	4619      	mov	r1, r3
 8007d28:	4610      	mov	r0, r2
 8007d2a:	f000 faa4 	bl	8008276 <TIM_ITRx_SetConfig>
        break;
 8007d2e:	e002      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007d30:	bf00      	nop
 8007d32:	e000      	b.n	8007d36 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007d34:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007d36:	687b      	ldr	r3, [r7, #4]
 8007d38:	2201      	movs	r2, #1
 8007d3a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	2200      	movs	r2, #0
 8007d42:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007d46:	2300      	movs	r3, #0
}
 8007d48:	4618      	mov	r0, r3
 8007d4a:	3710      	adds	r7, #16
 8007d4c:	46bd      	mov	sp, r7
 8007d4e:	bd80      	pop	{r7, pc}

08007d50 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007d50:	b480      	push	{r7}
 8007d52:	b083      	sub	sp, #12
 8007d54:	af00      	add	r7, sp, #0
 8007d56:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007d58:	bf00      	nop
 8007d5a:	370c      	adds	r7, #12
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr

08007d64 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007d64:	b480      	push	{r7}
 8007d66:	b083      	sub	sp, #12
 8007d68:	af00      	add	r7, sp, #0
 8007d6a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007d6c:	bf00      	nop
 8007d6e:	370c      	adds	r7, #12
 8007d70:	46bd      	mov	sp, r7
 8007d72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d76:	4770      	bx	lr

08007d78 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007d78:	b480      	push	{r7}
 8007d7a:	b083      	sub	sp, #12
 8007d7c:	af00      	add	r7, sp, #0
 8007d7e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007d80:	bf00      	nop
 8007d82:	370c      	adds	r7, #12
 8007d84:	46bd      	mov	sp, r7
 8007d86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d8a:	4770      	bx	lr

08007d8c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007d8c:	b480      	push	{r7}
 8007d8e:	b083      	sub	sp, #12
 8007d90:	af00      	add	r7, sp, #0
 8007d92:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007d94:	bf00      	nop
 8007d96:	370c      	adds	r7, #12
 8007d98:	46bd      	mov	sp, r7
 8007d9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d9e:	4770      	bx	lr

08007da0 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007da0:	b480      	push	{r7}
 8007da2:	b085      	sub	sp, #20
 8007da4:	af00      	add	r7, sp, #0
 8007da6:	6078      	str	r0, [r7, #4]
 8007da8:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007daa:	687b      	ldr	r3, [r7, #4]
 8007dac:	681b      	ldr	r3, [r3, #0]
 8007dae:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007db0:	687b      	ldr	r3, [r7, #4]
 8007db2:	4a34      	ldr	r2, [pc, #208]	; (8007e84 <TIM_Base_SetConfig+0xe4>)
 8007db4:	4293      	cmp	r3, r2
 8007db6:	d00f      	beq.n	8007dd8 <TIM_Base_SetConfig+0x38>
 8007db8:	687b      	ldr	r3, [r7, #4]
 8007dba:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007dbe:	d00b      	beq.n	8007dd8 <TIM_Base_SetConfig+0x38>
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a31      	ldr	r2, [pc, #196]	; (8007e88 <TIM_Base_SetConfig+0xe8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d007      	beq.n	8007dd8 <TIM_Base_SetConfig+0x38>
 8007dc8:	687b      	ldr	r3, [r7, #4]
 8007dca:	4a30      	ldr	r2, [pc, #192]	; (8007e8c <TIM_Base_SetConfig+0xec>)
 8007dcc:	4293      	cmp	r3, r2
 8007dce:	d003      	beq.n	8007dd8 <TIM_Base_SetConfig+0x38>
 8007dd0:	687b      	ldr	r3, [r7, #4]
 8007dd2:	4a2f      	ldr	r2, [pc, #188]	; (8007e90 <TIM_Base_SetConfig+0xf0>)
 8007dd4:	4293      	cmp	r3, r2
 8007dd6:	d108      	bne.n	8007dea <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007dd8:	68fb      	ldr	r3, [r7, #12]
 8007dda:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007dde:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007de0:	683b      	ldr	r3, [r7, #0]
 8007de2:	685b      	ldr	r3, [r3, #4]
 8007de4:	68fa      	ldr	r2, [r7, #12]
 8007de6:	4313      	orrs	r3, r2
 8007de8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007dea:	687b      	ldr	r3, [r7, #4]
 8007dec:	4a25      	ldr	r2, [pc, #148]	; (8007e84 <TIM_Base_SetConfig+0xe4>)
 8007dee:	4293      	cmp	r3, r2
 8007df0:	d01b      	beq.n	8007e2a <TIM_Base_SetConfig+0x8a>
 8007df2:	687b      	ldr	r3, [r7, #4]
 8007df4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007df8:	d017      	beq.n	8007e2a <TIM_Base_SetConfig+0x8a>
 8007dfa:	687b      	ldr	r3, [r7, #4]
 8007dfc:	4a22      	ldr	r2, [pc, #136]	; (8007e88 <TIM_Base_SetConfig+0xe8>)
 8007dfe:	4293      	cmp	r3, r2
 8007e00:	d013      	beq.n	8007e2a <TIM_Base_SetConfig+0x8a>
 8007e02:	687b      	ldr	r3, [r7, #4]
 8007e04:	4a21      	ldr	r2, [pc, #132]	; (8007e8c <TIM_Base_SetConfig+0xec>)
 8007e06:	4293      	cmp	r3, r2
 8007e08:	d00f      	beq.n	8007e2a <TIM_Base_SetConfig+0x8a>
 8007e0a:	687b      	ldr	r3, [r7, #4]
 8007e0c:	4a20      	ldr	r2, [pc, #128]	; (8007e90 <TIM_Base_SetConfig+0xf0>)
 8007e0e:	4293      	cmp	r3, r2
 8007e10:	d00b      	beq.n	8007e2a <TIM_Base_SetConfig+0x8a>
 8007e12:	687b      	ldr	r3, [r7, #4]
 8007e14:	4a1f      	ldr	r2, [pc, #124]	; (8007e94 <TIM_Base_SetConfig+0xf4>)
 8007e16:	4293      	cmp	r3, r2
 8007e18:	d007      	beq.n	8007e2a <TIM_Base_SetConfig+0x8a>
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	4a1e      	ldr	r2, [pc, #120]	; (8007e98 <TIM_Base_SetConfig+0xf8>)
 8007e1e:	4293      	cmp	r3, r2
 8007e20:	d003      	beq.n	8007e2a <TIM_Base_SetConfig+0x8a>
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	4a1d      	ldr	r2, [pc, #116]	; (8007e9c <TIM_Base_SetConfig+0xfc>)
 8007e26:	4293      	cmp	r3, r2
 8007e28:	d108      	bne.n	8007e3c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007e2a:	68fb      	ldr	r3, [r7, #12]
 8007e2c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e30:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007e32:	683b      	ldr	r3, [r7, #0]
 8007e34:	68db      	ldr	r3, [r3, #12]
 8007e36:	68fa      	ldr	r2, [r7, #12]
 8007e38:	4313      	orrs	r3, r2
 8007e3a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007e3c:	68fb      	ldr	r3, [r7, #12]
 8007e3e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007e42:	683b      	ldr	r3, [r7, #0]
 8007e44:	695b      	ldr	r3, [r3, #20]
 8007e46:	4313      	orrs	r3, r2
 8007e48:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	68fa      	ldr	r2, [r7, #12]
 8007e4e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007e50:	683b      	ldr	r3, [r7, #0]
 8007e52:	689a      	ldr	r2, [r3, #8]
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007e58:	683b      	ldr	r3, [r7, #0]
 8007e5a:	681a      	ldr	r2, [r3, #0]
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007e60:	687b      	ldr	r3, [r7, #4]
 8007e62:	4a08      	ldr	r2, [pc, #32]	; (8007e84 <TIM_Base_SetConfig+0xe4>)
 8007e64:	4293      	cmp	r3, r2
 8007e66:	d103      	bne.n	8007e70 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007e68:	683b      	ldr	r3, [r7, #0]
 8007e6a:	691a      	ldr	r2, [r3, #16]
 8007e6c:	687b      	ldr	r3, [r7, #4]
 8007e6e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007e70:	687b      	ldr	r3, [r7, #4]
 8007e72:	2201      	movs	r2, #1
 8007e74:	615a      	str	r2, [r3, #20]
}
 8007e76:	bf00      	nop
 8007e78:	3714      	adds	r7, #20
 8007e7a:	46bd      	mov	sp, r7
 8007e7c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e80:	4770      	bx	lr
 8007e82:	bf00      	nop
 8007e84:	40010000 	.word	0x40010000
 8007e88:	40000400 	.word	0x40000400
 8007e8c:	40000800 	.word	0x40000800
 8007e90:	40000c00 	.word	0x40000c00
 8007e94:	40014000 	.word	0x40014000
 8007e98:	40014400 	.word	0x40014400
 8007e9c:	40014800 	.word	0x40014800

08007ea0 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007ea0:	b480      	push	{r7}
 8007ea2:	b087      	sub	sp, #28
 8007ea4:	af00      	add	r7, sp, #0
 8007ea6:	6078      	str	r0, [r7, #4]
 8007ea8:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007eaa:	687b      	ldr	r3, [r7, #4]
 8007eac:	6a1b      	ldr	r3, [r3, #32]
 8007eae:	f023 0201 	bic.w	r2, r3, #1
 8007eb2:	687b      	ldr	r3, [r7, #4]
 8007eb4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007eb6:	687b      	ldr	r3, [r7, #4]
 8007eb8:	6a1b      	ldr	r3, [r3, #32]
 8007eba:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007ebc:	687b      	ldr	r3, [r7, #4]
 8007ebe:	685b      	ldr	r3, [r3, #4]
 8007ec0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007ec2:	687b      	ldr	r3, [r7, #4]
 8007ec4:	699b      	ldr	r3, [r3, #24]
 8007ec6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007ec8:	68fb      	ldr	r3, [r7, #12]
 8007eca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007ece:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ed0:	68fb      	ldr	r3, [r7, #12]
 8007ed2:	f023 0303 	bic.w	r3, r3, #3
 8007ed6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	681b      	ldr	r3, [r3, #0]
 8007edc:	68fa      	ldr	r2, [r7, #12]
 8007ede:	4313      	orrs	r3, r2
 8007ee0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007ee2:	697b      	ldr	r3, [r7, #20]
 8007ee4:	f023 0302 	bic.w	r3, r3, #2
 8007ee8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007eea:	683b      	ldr	r3, [r7, #0]
 8007eec:	689b      	ldr	r3, [r3, #8]
 8007eee:	697a      	ldr	r2, [r7, #20]
 8007ef0:	4313      	orrs	r3, r2
 8007ef2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	4a1c      	ldr	r2, [pc, #112]	; (8007f68 <TIM_OC1_SetConfig+0xc8>)
 8007ef8:	4293      	cmp	r3, r2
 8007efa:	d10c      	bne.n	8007f16 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007efc:	697b      	ldr	r3, [r7, #20]
 8007efe:	f023 0308 	bic.w	r3, r3, #8
 8007f02:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007f04:	683b      	ldr	r3, [r7, #0]
 8007f06:	68db      	ldr	r3, [r3, #12]
 8007f08:	697a      	ldr	r2, [r7, #20]
 8007f0a:	4313      	orrs	r3, r2
 8007f0c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007f0e:	697b      	ldr	r3, [r7, #20]
 8007f10:	f023 0304 	bic.w	r3, r3, #4
 8007f14:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f16:	687b      	ldr	r3, [r7, #4]
 8007f18:	4a13      	ldr	r2, [pc, #76]	; (8007f68 <TIM_OC1_SetConfig+0xc8>)
 8007f1a:	4293      	cmp	r3, r2
 8007f1c:	d111      	bne.n	8007f42 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007f1e:	693b      	ldr	r3, [r7, #16]
 8007f20:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007f24:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007f26:	693b      	ldr	r3, [r7, #16]
 8007f28:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f2c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007f2e:	683b      	ldr	r3, [r7, #0]
 8007f30:	695b      	ldr	r3, [r3, #20]
 8007f32:	693a      	ldr	r2, [r7, #16]
 8007f34:	4313      	orrs	r3, r2
 8007f36:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007f38:	683b      	ldr	r3, [r7, #0]
 8007f3a:	699b      	ldr	r3, [r3, #24]
 8007f3c:	693a      	ldr	r2, [r7, #16]
 8007f3e:	4313      	orrs	r3, r2
 8007f40:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f42:	687b      	ldr	r3, [r7, #4]
 8007f44:	693a      	ldr	r2, [r7, #16]
 8007f46:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007f48:	687b      	ldr	r3, [r7, #4]
 8007f4a:	68fa      	ldr	r2, [r7, #12]
 8007f4c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007f4e:	683b      	ldr	r3, [r7, #0]
 8007f50:	685a      	ldr	r2, [r3, #4]
 8007f52:	687b      	ldr	r3, [r7, #4]
 8007f54:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f56:	687b      	ldr	r3, [r7, #4]
 8007f58:	697a      	ldr	r2, [r7, #20]
 8007f5a:	621a      	str	r2, [r3, #32]
}
 8007f5c:	bf00      	nop
 8007f5e:	371c      	adds	r7, #28
 8007f60:	46bd      	mov	sp, r7
 8007f62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f66:	4770      	bx	lr
 8007f68:	40010000 	.word	0x40010000

08007f6c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f6c:	b480      	push	{r7}
 8007f6e:	b087      	sub	sp, #28
 8007f70:	af00      	add	r7, sp, #0
 8007f72:	6078      	str	r0, [r7, #4]
 8007f74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007f76:	687b      	ldr	r3, [r7, #4]
 8007f78:	6a1b      	ldr	r3, [r3, #32]
 8007f7a:	f023 0210 	bic.w	r2, r3, #16
 8007f7e:	687b      	ldr	r3, [r7, #4]
 8007f80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f82:	687b      	ldr	r3, [r7, #4]
 8007f84:	6a1b      	ldr	r3, [r3, #32]
 8007f86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	685b      	ldr	r3, [r3, #4]
 8007f8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	699b      	ldr	r3, [r3, #24]
 8007f92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007f94:	68fb      	ldr	r3, [r7, #12]
 8007f96:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007f9c:	68fb      	ldr	r3, [r7, #12]
 8007f9e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007fa2:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007fa4:	683b      	ldr	r3, [r7, #0]
 8007fa6:	681b      	ldr	r3, [r3, #0]
 8007fa8:	021b      	lsls	r3, r3, #8
 8007faa:	68fa      	ldr	r2, [r7, #12]
 8007fac:	4313      	orrs	r3, r2
 8007fae:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007fb0:	697b      	ldr	r3, [r7, #20]
 8007fb2:	f023 0320 	bic.w	r3, r3, #32
 8007fb6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007fb8:	683b      	ldr	r3, [r7, #0]
 8007fba:	689b      	ldr	r3, [r3, #8]
 8007fbc:	011b      	lsls	r3, r3, #4
 8007fbe:	697a      	ldr	r2, [r7, #20]
 8007fc0:	4313      	orrs	r3, r2
 8007fc2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007fc4:	687b      	ldr	r3, [r7, #4]
 8007fc6:	4a1e      	ldr	r2, [pc, #120]	; (8008040 <TIM_OC2_SetConfig+0xd4>)
 8007fc8:	4293      	cmp	r3, r2
 8007fca:	d10d      	bne.n	8007fe8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007fcc:	697b      	ldr	r3, [r7, #20]
 8007fce:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007fd2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007fd4:	683b      	ldr	r3, [r7, #0]
 8007fd6:	68db      	ldr	r3, [r3, #12]
 8007fd8:	011b      	lsls	r3, r3, #4
 8007fda:	697a      	ldr	r2, [r7, #20]
 8007fdc:	4313      	orrs	r3, r2
 8007fde:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007fe0:	697b      	ldr	r3, [r7, #20]
 8007fe2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007fe6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007fe8:	687b      	ldr	r3, [r7, #4]
 8007fea:	4a15      	ldr	r2, [pc, #84]	; (8008040 <TIM_OC2_SetConfig+0xd4>)
 8007fec:	4293      	cmp	r3, r2
 8007fee:	d113      	bne.n	8008018 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ff0:	693b      	ldr	r3, [r7, #16]
 8007ff2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ff6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ff8:	693b      	ldr	r3, [r7, #16]
 8007ffa:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ffe:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8008000:	683b      	ldr	r3, [r7, #0]
 8008002:	695b      	ldr	r3, [r3, #20]
 8008004:	009b      	lsls	r3, r3, #2
 8008006:	693a      	ldr	r2, [r7, #16]
 8008008:	4313      	orrs	r3, r2
 800800a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800800c:	683b      	ldr	r3, [r7, #0]
 800800e:	699b      	ldr	r3, [r3, #24]
 8008010:	009b      	lsls	r3, r3, #2
 8008012:	693a      	ldr	r2, [r7, #16]
 8008014:	4313      	orrs	r3, r2
 8008016:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008018:	687b      	ldr	r3, [r7, #4]
 800801a:	693a      	ldr	r2, [r7, #16]
 800801c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800801e:	687b      	ldr	r3, [r7, #4]
 8008020:	68fa      	ldr	r2, [r7, #12]
 8008022:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8008024:	683b      	ldr	r3, [r7, #0]
 8008026:	685a      	ldr	r2, [r3, #4]
 8008028:	687b      	ldr	r3, [r7, #4]
 800802a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800802c:	687b      	ldr	r3, [r7, #4]
 800802e:	697a      	ldr	r2, [r7, #20]
 8008030:	621a      	str	r2, [r3, #32]
}
 8008032:	bf00      	nop
 8008034:	371c      	adds	r7, #28
 8008036:	46bd      	mov	sp, r7
 8008038:	f85d 7b04 	ldr.w	r7, [sp], #4
 800803c:	4770      	bx	lr
 800803e:	bf00      	nop
 8008040:	40010000 	.word	0x40010000

08008044 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008044:	b480      	push	{r7}
 8008046:	b087      	sub	sp, #28
 8008048:	af00      	add	r7, sp, #0
 800804a:	6078      	str	r0, [r7, #4]
 800804c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800804e:	687b      	ldr	r3, [r7, #4]
 8008050:	6a1b      	ldr	r3, [r3, #32]
 8008052:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8008056:	687b      	ldr	r3, [r7, #4]
 8008058:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800805a:	687b      	ldr	r3, [r7, #4]
 800805c:	6a1b      	ldr	r3, [r3, #32]
 800805e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008060:	687b      	ldr	r3, [r7, #4]
 8008062:	685b      	ldr	r3, [r3, #4]
 8008064:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008066:	687b      	ldr	r3, [r7, #4]
 8008068:	69db      	ldr	r3, [r3, #28]
 800806a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800806c:	68fb      	ldr	r3, [r7, #12]
 800806e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008072:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8008074:	68fb      	ldr	r3, [r7, #12]
 8008076:	f023 0303 	bic.w	r3, r3, #3
 800807a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800807c:	683b      	ldr	r3, [r7, #0]
 800807e:	681b      	ldr	r3, [r3, #0]
 8008080:	68fa      	ldr	r2, [r7, #12]
 8008082:	4313      	orrs	r3, r2
 8008084:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8008086:	697b      	ldr	r3, [r7, #20]
 8008088:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800808c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800808e:	683b      	ldr	r3, [r7, #0]
 8008090:	689b      	ldr	r3, [r3, #8]
 8008092:	021b      	lsls	r3, r3, #8
 8008094:	697a      	ldr	r2, [r7, #20]
 8008096:	4313      	orrs	r3, r2
 8008098:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800809a:	687b      	ldr	r3, [r7, #4]
 800809c:	4a1d      	ldr	r2, [pc, #116]	; (8008114 <TIM_OC3_SetConfig+0xd0>)
 800809e:	4293      	cmp	r3, r2
 80080a0:	d10d      	bne.n	80080be <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80080a2:	697b      	ldr	r3, [r7, #20]
 80080a4:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80080a8:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80080aa:	683b      	ldr	r3, [r7, #0]
 80080ac:	68db      	ldr	r3, [r3, #12]
 80080ae:	021b      	lsls	r3, r3, #8
 80080b0:	697a      	ldr	r2, [r7, #20]
 80080b2:	4313      	orrs	r3, r2
 80080b4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80080b6:	697b      	ldr	r3, [r7, #20]
 80080b8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80080bc:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80080be:	687b      	ldr	r3, [r7, #4]
 80080c0:	4a14      	ldr	r2, [pc, #80]	; (8008114 <TIM_OC3_SetConfig+0xd0>)
 80080c2:	4293      	cmp	r3, r2
 80080c4:	d113      	bne.n	80080ee <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80080c6:	693b      	ldr	r3, [r7, #16]
 80080c8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80080cc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80080ce:	693b      	ldr	r3, [r7, #16]
 80080d0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80080d4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80080d6:	683b      	ldr	r3, [r7, #0]
 80080d8:	695b      	ldr	r3, [r3, #20]
 80080da:	011b      	lsls	r3, r3, #4
 80080dc:	693a      	ldr	r2, [r7, #16]
 80080de:	4313      	orrs	r3, r2
 80080e0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80080e2:	683b      	ldr	r3, [r7, #0]
 80080e4:	699b      	ldr	r3, [r3, #24]
 80080e6:	011b      	lsls	r3, r3, #4
 80080e8:	693a      	ldr	r2, [r7, #16]
 80080ea:	4313      	orrs	r3, r2
 80080ec:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80080ee:	687b      	ldr	r3, [r7, #4]
 80080f0:	693a      	ldr	r2, [r7, #16]
 80080f2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80080f4:	687b      	ldr	r3, [r7, #4]
 80080f6:	68fa      	ldr	r2, [r7, #12]
 80080f8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80080fa:	683b      	ldr	r3, [r7, #0]
 80080fc:	685a      	ldr	r2, [r3, #4]
 80080fe:	687b      	ldr	r3, [r7, #4]
 8008100:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8008102:	687b      	ldr	r3, [r7, #4]
 8008104:	697a      	ldr	r2, [r7, #20]
 8008106:	621a      	str	r2, [r3, #32]
}
 8008108:	bf00      	nop
 800810a:	371c      	adds	r7, #28
 800810c:	46bd      	mov	sp, r7
 800810e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008112:	4770      	bx	lr
 8008114:	40010000 	.word	0x40010000

08008118 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8008118:	b480      	push	{r7}
 800811a:	b087      	sub	sp, #28
 800811c:	af00      	add	r7, sp, #0
 800811e:	6078      	str	r0, [r7, #4]
 8008120:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	6a1b      	ldr	r3, [r3, #32]
 8008126:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800812a:	687b      	ldr	r3, [r7, #4]
 800812c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	6a1b      	ldr	r3, [r3, #32]
 8008132:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008134:	687b      	ldr	r3, [r7, #4]
 8008136:	685b      	ldr	r3, [r3, #4]
 8008138:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800813a:	687b      	ldr	r3, [r7, #4]
 800813c:	69db      	ldr	r3, [r3, #28]
 800813e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8008140:	68fb      	ldr	r3, [r7, #12]
 8008142:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008146:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008148:	68fb      	ldr	r3, [r7, #12]
 800814a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800814e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8008150:	683b      	ldr	r3, [r7, #0]
 8008152:	681b      	ldr	r3, [r3, #0]
 8008154:	021b      	lsls	r3, r3, #8
 8008156:	68fa      	ldr	r2, [r7, #12]
 8008158:	4313      	orrs	r3, r2
 800815a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800815c:	693b      	ldr	r3, [r7, #16]
 800815e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8008162:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008164:	683b      	ldr	r3, [r7, #0]
 8008166:	689b      	ldr	r3, [r3, #8]
 8008168:	031b      	lsls	r3, r3, #12
 800816a:	693a      	ldr	r2, [r7, #16]
 800816c:	4313      	orrs	r3, r2
 800816e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8008170:	687b      	ldr	r3, [r7, #4]
 8008172:	4a10      	ldr	r2, [pc, #64]	; (80081b4 <TIM_OC4_SetConfig+0x9c>)
 8008174:	4293      	cmp	r3, r2
 8008176:	d109      	bne.n	800818c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008178:	697b      	ldr	r3, [r7, #20]
 800817a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800817e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8008180:	683b      	ldr	r3, [r7, #0]
 8008182:	695b      	ldr	r3, [r3, #20]
 8008184:	019b      	lsls	r3, r3, #6
 8008186:	697a      	ldr	r2, [r7, #20]
 8008188:	4313      	orrs	r3, r2
 800818a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800818c:	687b      	ldr	r3, [r7, #4]
 800818e:	697a      	ldr	r2, [r7, #20]
 8008190:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8008192:	687b      	ldr	r3, [r7, #4]
 8008194:	68fa      	ldr	r2, [r7, #12]
 8008196:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008198:	683b      	ldr	r3, [r7, #0]
 800819a:	685a      	ldr	r2, [r3, #4]
 800819c:	687b      	ldr	r3, [r7, #4]
 800819e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80081a0:	687b      	ldr	r3, [r7, #4]
 80081a2:	693a      	ldr	r2, [r7, #16]
 80081a4:	621a      	str	r2, [r3, #32]
}
 80081a6:	bf00      	nop
 80081a8:	371c      	adds	r7, #28
 80081aa:	46bd      	mov	sp, r7
 80081ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b0:	4770      	bx	lr
 80081b2:	bf00      	nop
 80081b4:	40010000 	.word	0x40010000

080081b8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80081c4:	68fb      	ldr	r3, [r7, #12]
 80081c6:	6a1b      	ldr	r3, [r3, #32]
 80081c8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80081ca:	68fb      	ldr	r3, [r7, #12]
 80081cc:	6a1b      	ldr	r3, [r3, #32]
 80081ce:	f023 0201 	bic.w	r2, r3, #1
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80081d6:	68fb      	ldr	r3, [r7, #12]
 80081d8:	699b      	ldr	r3, [r3, #24]
 80081da:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80081dc:	693b      	ldr	r3, [r7, #16]
 80081de:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80081e2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	011b      	lsls	r3, r3, #4
 80081e8:	693a      	ldr	r2, [r7, #16]
 80081ea:	4313      	orrs	r3, r2
 80081ec:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80081ee:	697b      	ldr	r3, [r7, #20]
 80081f0:	f023 030a 	bic.w	r3, r3, #10
 80081f4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80081f6:	697a      	ldr	r2, [r7, #20]
 80081f8:	68bb      	ldr	r3, [r7, #8]
 80081fa:	4313      	orrs	r3, r2
 80081fc:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80081fe:	68fb      	ldr	r3, [r7, #12]
 8008200:	693a      	ldr	r2, [r7, #16]
 8008202:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008204:	68fb      	ldr	r3, [r7, #12]
 8008206:	697a      	ldr	r2, [r7, #20]
 8008208:	621a      	str	r2, [r3, #32]
}
 800820a:	bf00      	nop
 800820c:	371c      	adds	r7, #28
 800820e:	46bd      	mov	sp, r7
 8008210:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008214:	4770      	bx	lr

08008216 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008216:	b480      	push	{r7}
 8008218:	b087      	sub	sp, #28
 800821a:	af00      	add	r7, sp, #0
 800821c:	60f8      	str	r0, [r7, #12]
 800821e:	60b9      	str	r1, [r7, #8]
 8008220:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8008222:	68fb      	ldr	r3, [r7, #12]
 8008224:	6a1b      	ldr	r3, [r3, #32]
 8008226:	f023 0210 	bic.w	r2, r3, #16
 800822a:	68fb      	ldr	r3, [r7, #12]
 800822c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800822e:	68fb      	ldr	r3, [r7, #12]
 8008230:	699b      	ldr	r3, [r3, #24]
 8008232:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008234:	68fb      	ldr	r3, [r7, #12]
 8008236:	6a1b      	ldr	r3, [r3, #32]
 8008238:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800823a:	697b      	ldr	r3, [r7, #20]
 800823c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8008240:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8008242:	687b      	ldr	r3, [r7, #4]
 8008244:	031b      	lsls	r3, r3, #12
 8008246:	697a      	ldr	r2, [r7, #20]
 8008248:	4313      	orrs	r3, r2
 800824a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800824c:	693b      	ldr	r3, [r7, #16]
 800824e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8008252:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008254:	68bb      	ldr	r3, [r7, #8]
 8008256:	011b      	lsls	r3, r3, #4
 8008258:	693a      	ldr	r2, [r7, #16]
 800825a:	4313      	orrs	r3, r2
 800825c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800825e:	68fb      	ldr	r3, [r7, #12]
 8008260:	697a      	ldr	r2, [r7, #20]
 8008262:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008264:	68fb      	ldr	r3, [r7, #12]
 8008266:	693a      	ldr	r2, [r7, #16]
 8008268:	621a      	str	r2, [r3, #32]
}
 800826a:	bf00      	nop
 800826c:	371c      	adds	r7, #28
 800826e:	46bd      	mov	sp, r7
 8008270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008274:	4770      	bx	lr

08008276 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008276:	b480      	push	{r7}
 8008278:	b085      	sub	sp, #20
 800827a:	af00      	add	r7, sp, #0
 800827c:	6078      	str	r0, [r7, #4]
 800827e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8008280:	687b      	ldr	r3, [r7, #4]
 8008282:	689b      	ldr	r3, [r3, #8]
 8008284:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008286:	68fb      	ldr	r3, [r7, #12]
 8008288:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800828c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800828e:	683a      	ldr	r2, [r7, #0]
 8008290:	68fb      	ldr	r3, [r7, #12]
 8008292:	4313      	orrs	r3, r2
 8008294:	f043 0307 	orr.w	r3, r3, #7
 8008298:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800829a:	687b      	ldr	r3, [r7, #4]
 800829c:	68fa      	ldr	r2, [r7, #12]
 800829e:	609a      	str	r2, [r3, #8]
}
 80082a0:	bf00      	nop
 80082a2:	3714      	adds	r7, #20
 80082a4:	46bd      	mov	sp, r7
 80082a6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082aa:	4770      	bx	lr

080082ac <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80082ac:	b480      	push	{r7}
 80082ae:	b087      	sub	sp, #28
 80082b0:	af00      	add	r7, sp, #0
 80082b2:	60f8      	str	r0, [r7, #12]
 80082b4:	60b9      	str	r1, [r7, #8]
 80082b6:	607a      	str	r2, [r7, #4]
 80082b8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80082ba:	68fb      	ldr	r3, [r7, #12]
 80082bc:	689b      	ldr	r3, [r3, #8]
 80082be:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80082c0:	697b      	ldr	r3, [r7, #20]
 80082c2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80082c6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80082c8:	683b      	ldr	r3, [r7, #0]
 80082ca:	021a      	lsls	r2, r3, #8
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	431a      	orrs	r2, r3
 80082d0:	68bb      	ldr	r3, [r7, #8]
 80082d2:	4313      	orrs	r3, r2
 80082d4:	697a      	ldr	r2, [r7, #20]
 80082d6:	4313      	orrs	r3, r2
 80082d8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80082da:	68fb      	ldr	r3, [r7, #12]
 80082dc:	697a      	ldr	r2, [r7, #20]
 80082de:	609a      	str	r2, [r3, #8]
}
 80082e0:	bf00      	nop
 80082e2:	371c      	adds	r7, #28
 80082e4:	46bd      	mov	sp, r7
 80082e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082ea:	4770      	bx	lr

080082ec <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80082ec:	b480      	push	{r7}
 80082ee:	b087      	sub	sp, #28
 80082f0:	af00      	add	r7, sp, #0
 80082f2:	60f8      	str	r0, [r7, #12]
 80082f4:	60b9      	str	r1, [r7, #8]
 80082f6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80082f8:	68bb      	ldr	r3, [r7, #8]
 80082fa:	f003 031f 	and.w	r3, r3, #31
 80082fe:	2201      	movs	r2, #1
 8008300:	fa02 f303 	lsl.w	r3, r2, r3
 8008304:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008306:	68fb      	ldr	r3, [r7, #12]
 8008308:	6a1a      	ldr	r2, [r3, #32]
 800830a:	697b      	ldr	r3, [r7, #20]
 800830c:	43db      	mvns	r3, r3
 800830e:	401a      	ands	r2, r3
 8008310:	68fb      	ldr	r3, [r7, #12]
 8008312:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008314:	68fb      	ldr	r3, [r7, #12]
 8008316:	6a1a      	ldr	r2, [r3, #32]
 8008318:	68bb      	ldr	r3, [r7, #8]
 800831a:	f003 031f 	and.w	r3, r3, #31
 800831e:	6879      	ldr	r1, [r7, #4]
 8008320:	fa01 f303 	lsl.w	r3, r1, r3
 8008324:	431a      	orrs	r2, r3
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	621a      	str	r2, [r3, #32]
}
 800832a:	bf00      	nop
 800832c:	371c      	adds	r7, #28
 800832e:	46bd      	mov	sp, r7
 8008330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008334:	4770      	bx	lr
	...

08008338 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008338:	b480      	push	{r7}
 800833a:	b085      	sub	sp, #20
 800833c:	af00      	add	r7, sp, #0
 800833e:	6078      	str	r0, [r7, #4]
 8008340:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008348:	2b01      	cmp	r3, #1
 800834a:	d101      	bne.n	8008350 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800834c:	2302      	movs	r3, #2
 800834e:	e050      	b.n	80083f2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8008350:	687b      	ldr	r3, [r7, #4]
 8008352:	2201      	movs	r2, #1
 8008354:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	2202      	movs	r2, #2
 800835c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8008360:	687b      	ldr	r3, [r7, #4]
 8008362:	681b      	ldr	r3, [r3, #0]
 8008364:	685b      	ldr	r3, [r3, #4]
 8008366:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	689b      	ldr	r3, [r3, #8]
 800836e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008376:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008378:	683b      	ldr	r3, [r7, #0]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	68fa      	ldr	r2, [r7, #12]
 800837e:	4313      	orrs	r3, r2
 8008380:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	68fa      	ldr	r2, [r7, #12]
 8008388:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800838a:	687b      	ldr	r3, [r7, #4]
 800838c:	681b      	ldr	r3, [r3, #0]
 800838e:	4a1c      	ldr	r2, [pc, #112]	; (8008400 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8008390:	4293      	cmp	r3, r2
 8008392:	d018      	beq.n	80083c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008394:	687b      	ldr	r3, [r7, #4]
 8008396:	681b      	ldr	r3, [r3, #0]
 8008398:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800839c:	d013      	beq.n	80083c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800839e:	687b      	ldr	r3, [r7, #4]
 80083a0:	681b      	ldr	r3, [r3, #0]
 80083a2:	4a18      	ldr	r2, [pc, #96]	; (8008404 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80083a4:	4293      	cmp	r3, r2
 80083a6:	d00e      	beq.n	80083c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083a8:	687b      	ldr	r3, [r7, #4]
 80083aa:	681b      	ldr	r3, [r3, #0]
 80083ac:	4a16      	ldr	r2, [pc, #88]	; (8008408 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80083ae:	4293      	cmp	r3, r2
 80083b0:	d009      	beq.n	80083c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083b2:	687b      	ldr	r3, [r7, #4]
 80083b4:	681b      	ldr	r3, [r3, #0]
 80083b6:	4a15      	ldr	r2, [pc, #84]	; (800840c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80083b8:	4293      	cmp	r3, r2
 80083ba:	d004      	beq.n	80083c6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80083bc:	687b      	ldr	r3, [r7, #4]
 80083be:	681b      	ldr	r3, [r3, #0]
 80083c0:	4a13      	ldr	r2, [pc, #76]	; (8008410 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80083c2:	4293      	cmp	r3, r2
 80083c4:	d10c      	bne.n	80083e0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80083cc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80083ce:	683b      	ldr	r3, [r7, #0]
 80083d0:	685b      	ldr	r3, [r3, #4]
 80083d2:	68ba      	ldr	r2, [r7, #8]
 80083d4:	4313      	orrs	r3, r2
 80083d6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80083d8:	687b      	ldr	r3, [r7, #4]
 80083da:	681b      	ldr	r3, [r3, #0]
 80083dc:	68ba      	ldr	r2, [r7, #8]
 80083de:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80083e0:	687b      	ldr	r3, [r7, #4]
 80083e2:	2201      	movs	r2, #1
 80083e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80083e8:	687b      	ldr	r3, [r7, #4]
 80083ea:	2200      	movs	r2, #0
 80083ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80083f0:	2300      	movs	r3, #0
}
 80083f2:	4618      	mov	r0, r3
 80083f4:	3714      	adds	r7, #20
 80083f6:	46bd      	mov	sp, r7
 80083f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80083fc:	4770      	bx	lr
 80083fe:	bf00      	nop
 8008400:	40010000 	.word	0x40010000
 8008404:	40000400 	.word	0x40000400
 8008408:	40000800 	.word	0x40000800
 800840c:	40000c00 	.word	0x40000c00
 8008410:	40014000 	.word	0x40014000

08008414 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008414:	b480      	push	{r7}
 8008416:	b083      	sub	sp, #12
 8008418:	af00      	add	r7, sp, #0
 800841a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800841c:	bf00      	nop
 800841e:	370c      	adds	r7, #12
 8008420:	46bd      	mov	sp, r7
 8008422:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008426:	4770      	bx	lr

08008428 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008428:	b480      	push	{r7}
 800842a:	b083      	sub	sp, #12
 800842c:	af00      	add	r7, sp, #0
 800842e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8008430:	bf00      	nop
 8008432:	370c      	adds	r7, #12
 8008434:	46bd      	mov	sp, r7
 8008436:	f85d 7b04 	ldr.w	r7, [sp], #4
 800843a:	4770      	bx	lr

0800843c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800843c:	b580      	push	{r7, lr}
 800843e:	b082      	sub	sp, #8
 8008440:	af00      	add	r7, sp, #0
 8008442:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008444:	687b      	ldr	r3, [r7, #4]
 8008446:	2b00      	cmp	r3, #0
 8008448:	d101      	bne.n	800844e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800844a:	2301      	movs	r3, #1
 800844c:	e03f      	b.n	80084ce <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800844e:	687b      	ldr	r3, [r7, #4]
 8008450:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008454:	b2db      	uxtb	r3, r3
 8008456:	2b00      	cmp	r3, #0
 8008458:	d106      	bne.n	8008468 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800845a:	687b      	ldr	r3, [r7, #4]
 800845c:	2200      	movs	r2, #0
 800845e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8008462:	6878      	ldr	r0, [r7, #4]
 8008464:	f7fb fa0e 	bl	8003884 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008468:	687b      	ldr	r3, [r7, #4]
 800846a:	2224      	movs	r2, #36	; 0x24
 800846c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8008470:	687b      	ldr	r3, [r7, #4]
 8008472:	681b      	ldr	r3, [r3, #0]
 8008474:	68da      	ldr	r2, [r3, #12]
 8008476:	687b      	ldr	r3, [r7, #4]
 8008478:	681b      	ldr	r3, [r3, #0]
 800847a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800847e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8008480:	6878      	ldr	r0, [r7, #4]
 8008482:	f000 fd51 	bl	8008f28 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008486:	687b      	ldr	r3, [r7, #4]
 8008488:	681b      	ldr	r3, [r3, #0]
 800848a:	691a      	ldr	r2, [r3, #16]
 800848c:	687b      	ldr	r3, [r7, #4]
 800848e:	681b      	ldr	r3, [r3, #0]
 8008490:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008494:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008496:	687b      	ldr	r3, [r7, #4]
 8008498:	681b      	ldr	r3, [r3, #0]
 800849a:	695a      	ldr	r2, [r3, #20]
 800849c:	687b      	ldr	r3, [r7, #4]
 800849e:	681b      	ldr	r3, [r3, #0]
 80084a0:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80084a4:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80084a6:	687b      	ldr	r3, [r7, #4]
 80084a8:	681b      	ldr	r3, [r3, #0]
 80084aa:	68da      	ldr	r2, [r3, #12]
 80084ac:	687b      	ldr	r3, [r7, #4]
 80084ae:	681b      	ldr	r3, [r3, #0]
 80084b0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80084b4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80084b6:	687b      	ldr	r3, [r7, #4]
 80084b8:	2200      	movs	r2, #0
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80084bc:	687b      	ldr	r3, [r7, #4]
 80084be:	2220      	movs	r2, #32
 80084c0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80084c4:	687b      	ldr	r3, [r7, #4]
 80084c6:	2220      	movs	r2, #32
 80084c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80084cc:	2300      	movs	r3, #0
}
 80084ce:	4618      	mov	r0, r3
 80084d0:	3708      	adds	r7, #8
 80084d2:	46bd      	mov	sp, r7
 80084d4:	bd80      	pop	{r7, pc}
	...

080084d8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80084d8:	b580      	push	{r7, lr}
 80084da:	b086      	sub	sp, #24
 80084dc:	af00      	add	r7, sp, #0
 80084de:	60f8      	str	r0, [r7, #12]
 80084e0:	60b9      	str	r1, [r7, #8]
 80084e2:	4613      	mov	r3, r2
 80084e4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80084e6:	68fb      	ldr	r3, [r7, #12]
 80084e8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80084ec:	b2db      	uxtb	r3, r3
 80084ee:	2b20      	cmp	r3, #32
 80084f0:	d153      	bne.n	800859a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80084f2:	68bb      	ldr	r3, [r7, #8]
 80084f4:	2b00      	cmp	r3, #0
 80084f6:	d002      	beq.n	80084fe <HAL_UART_Transmit_DMA+0x26>
 80084f8:	88fb      	ldrh	r3, [r7, #6]
 80084fa:	2b00      	cmp	r3, #0
 80084fc:	d101      	bne.n	8008502 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80084fe:	2301      	movs	r3, #1
 8008500:	e04c      	b.n	800859c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 8008502:	68fb      	ldr	r3, [r7, #12]
 8008504:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008508:	2b01      	cmp	r3, #1
 800850a:	d101      	bne.n	8008510 <HAL_UART_Transmit_DMA+0x38>
 800850c:	2302      	movs	r3, #2
 800850e:	e045      	b.n	800859c <HAL_UART_Transmit_DMA+0xc4>
 8008510:	68fb      	ldr	r3, [r7, #12]
 8008512:	2201      	movs	r2, #1
 8008514:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008518:	68ba      	ldr	r2, [r7, #8]
 800851a:	68fb      	ldr	r3, [r7, #12]
 800851c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800851e:	68fb      	ldr	r3, [r7, #12]
 8008520:	88fa      	ldrh	r2, [r7, #6]
 8008522:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008524:	68fb      	ldr	r3, [r7, #12]
 8008526:	88fa      	ldrh	r2, [r7, #6]
 8008528:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800852a:	68fb      	ldr	r3, [r7, #12]
 800852c:	2200      	movs	r2, #0
 800852e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8008530:	68fb      	ldr	r3, [r7, #12]
 8008532:	2221      	movs	r2, #33	; 0x21
 8008534:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008538:	68fb      	ldr	r3, [r7, #12]
 800853a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800853c:	4a19      	ldr	r2, [pc, #100]	; (80085a4 <HAL_UART_Transmit_DMA+0xcc>)
 800853e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8008540:	68fb      	ldr	r3, [r7, #12]
 8008542:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008544:	4a18      	ldr	r2, [pc, #96]	; (80085a8 <HAL_UART_Transmit_DMA+0xd0>)
 8008546:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008548:	68fb      	ldr	r3, [r7, #12]
 800854a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800854c:	4a17      	ldr	r2, [pc, #92]	; (80085ac <HAL_UART_Transmit_DMA+0xd4>)
 800854e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8008550:	68fb      	ldr	r3, [r7, #12]
 8008552:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008554:	2200      	movs	r2, #0
 8008556:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008558:	f107 0308 	add.w	r3, r7, #8
 800855c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800855e:	68fb      	ldr	r3, [r7, #12]
 8008560:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8008562:	697b      	ldr	r3, [r7, #20]
 8008564:	6819      	ldr	r1, [r3, #0]
 8008566:	68fb      	ldr	r3, [r7, #12]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	3304      	adds	r3, #4
 800856c:	461a      	mov	r2, r3
 800856e:	88fb      	ldrh	r3, [r7, #6]
 8008570:	f7fb fdee 	bl	8004150 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008574:	68fb      	ldr	r3, [r7, #12]
 8008576:	681b      	ldr	r3, [r3, #0]
 8008578:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800857c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800857e:	68fb      	ldr	r3, [r7, #12]
 8008580:	2200      	movs	r2, #0
 8008582:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008586:	68fb      	ldr	r3, [r7, #12]
 8008588:	681b      	ldr	r3, [r3, #0]
 800858a:	695a      	ldr	r2, [r3, #20]
 800858c:	68fb      	ldr	r3, [r7, #12]
 800858e:	681b      	ldr	r3, [r3, #0]
 8008590:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008594:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008596:	2300      	movs	r3, #0
 8008598:	e000      	b.n	800859c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800859a:	2302      	movs	r3, #2
  }
}
 800859c:	4618      	mov	r0, r3
 800859e:	3718      	adds	r7, #24
 80085a0:	46bd      	mov	sp, r7
 80085a2:	bd80      	pop	{r7, pc}
 80085a4:	080089e5 	.word	0x080089e5
 80085a8:	08008a37 	.word	0x08008a37
 80085ac:	08008b1f 	.word	0x08008b1f

080085b0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80085b0:	b580      	push	{r7, lr}
 80085b2:	b084      	sub	sp, #16
 80085b4:	af00      	add	r7, sp, #0
 80085b6:	60f8      	str	r0, [r7, #12]
 80085b8:	60b9      	str	r1, [r7, #8]
 80085ba:	4613      	mov	r3, r2
 80085bc:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80085be:	68fb      	ldr	r3, [r7, #12]
 80085c0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80085c4:	b2db      	uxtb	r3, r3
 80085c6:	2b20      	cmp	r3, #32
 80085c8:	d11d      	bne.n	8008606 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80085ca:	68bb      	ldr	r3, [r7, #8]
 80085cc:	2b00      	cmp	r3, #0
 80085ce:	d002      	beq.n	80085d6 <HAL_UART_Receive_DMA+0x26>
 80085d0:	88fb      	ldrh	r3, [r7, #6]
 80085d2:	2b00      	cmp	r3, #0
 80085d4:	d101      	bne.n	80085da <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80085d6:	2301      	movs	r3, #1
 80085d8:	e016      	b.n	8008608 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80085da:	68fb      	ldr	r3, [r7, #12]
 80085dc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80085e0:	2b01      	cmp	r3, #1
 80085e2:	d101      	bne.n	80085e8 <HAL_UART_Receive_DMA+0x38>
 80085e4:	2302      	movs	r3, #2
 80085e6:	e00f      	b.n	8008608 <HAL_UART_Receive_DMA+0x58>
 80085e8:	68fb      	ldr	r3, [r7, #12]
 80085ea:	2201      	movs	r2, #1
 80085ec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80085f0:	68fb      	ldr	r3, [r7, #12]
 80085f2:	2200      	movs	r2, #0
 80085f4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80085f6:	88fb      	ldrh	r3, [r7, #6]
 80085f8:	461a      	mov	r2, r3
 80085fa:	68b9      	ldr	r1, [r7, #8]
 80085fc:	68f8      	ldr	r0, [r7, #12]
 80085fe:	f000 fad9 	bl	8008bb4 <UART_Start_Receive_DMA>
 8008602:	4603      	mov	r3, r0
 8008604:	e000      	b.n	8008608 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008606:	2302      	movs	r3, #2
  }
}
 8008608:	4618      	mov	r0, r3
 800860a:	3710      	adds	r7, #16
 800860c:	46bd      	mov	sp, r7
 800860e:	bd80      	pop	{r7, pc}

08008610 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8008610:	b580      	push	{r7, lr}
 8008612:	b08a      	sub	sp, #40	; 0x28
 8008614:	af00      	add	r7, sp, #0
 8008616:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008618:	687b      	ldr	r3, [r7, #4]
 800861a:	681b      	ldr	r3, [r3, #0]
 800861c:	681b      	ldr	r3, [r3, #0]
 800861e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	681b      	ldr	r3, [r3, #0]
 8008624:	68db      	ldr	r3, [r3, #12]
 8008626:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8008630:	2300      	movs	r3, #0
 8008632:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008634:	2300      	movs	r3, #0
 8008636:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008638:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800863a:	f003 030f 	and.w	r3, r3, #15
 800863e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8008640:	69bb      	ldr	r3, [r7, #24]
 8008642:	2b00      	cmp	r3, #0
 8008644:	d10d      	bne.n	8008662 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008646:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008648:	f003 0320 	and.w	r3, r3, #32
 800864c:	2b00      	cmp	r3, #0
 800864e:	d008      	beq.n	8008662 <HAL_UART_IRQHandler+0x52>
 8008650:	6a3b      	ldr	r3, [r7, #32]
 8008652:	f003 0320 	and.w	r3, r3, #32
 8008656:	2b00      	cmp	r3, #0
 8008658:	d003      	beq.n	8008662 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 800865a:	6878      	ldr	r0, [r7, #4]
 800865c:	f000 fbcd 	bl	8008dfa <UART_Receive_IT>
      return;
 8008660:	e17c      	b.n	800895c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8008662:	69bb      	ldr	r3, [r7, #24]
 8008664:	2b00      	cmp	r3, #0
 8008666:	f000 80b1 	beq.w	80087cc <HAL_UART_IRQHandler+0x1bc>
 800866a:	69fb      	ldr	r3, [r7, #28]
 800866c:	f003 0301 	and.w	r3, r3, #1
 8008670:	2b00      	cmp	r3, #0
 8008672:	d105      	bne.n	8008680 <HAL_UART_IRQHandler+0x70>
 8008674:	6a3b      	ldr	r3, [r7, #32]
 8008676:	f403 7390 	and.w	r3, r3, #288	; 0x120
 800867a:	2b00      	cmp	r3, #0
 800867c:	f000 80a6 	beq.w	80087cc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8008680:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008682:	f003 0301 	and.w	r3, r3, #1
 8008686:	2b00      	cmp	r3, #0
 8008688:	d00a      	beq.n	80086a0 <HAL_UART_IRQHandler+0x90>
 800868a:	6a3b      	ldr	r3, [r7, #32]
 800868c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008690:	2b00      	cmp	r3, #0
 8008692:	d005      	beq.n	80086a0 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008694:	687b      	ldr	r3, [r7, #4]
 8008696:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008698:	f043 0201 	orr.w	r2, r3, #1
 800869c:	687b      	ldr	r3, [r7, #4]
 800869e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086a0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a2:	f003 0304 	and.w	r3, r3, #4
 80086a6:	2b00      	cmp	r3, #0
 80086a8:	d00a      	beq.n	80086c0 <HAL_UART_IRQHandler+0xb0>
 80086aa:	69fb      	ldr	r3, [r7, #28]
 80086ac:	f003 0301 	and.w	r3, r3, #1
 80086b0:	2b00      	cmp	r3, #0
 80086b2:	d005      	beq.n	80086c0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80086b4:	687b      	ldr	r3, [r7, #4]
 80086b6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086b8:	f043 0202 	orr.w	r2, r3, #2
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80086c0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086c2:	f003 0302 	and.w	r3, r3, #2
 80086c6:	2b00      	cmp	r3, #0
 80086c8:	d00a      	beq.n	80086e0 <HAL_UART_IRQHandler+0xd0>
 80086ca:	69fb      	ldr	r3, [r7, #28]
 80086cc:	f003 0301 	and.w	r3, r3, #1
 80086d0:	2b00      	cmp	r3, #0
 80086d2:	d005      	beq.n	80086e0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80086d4:	687b      	ldr	r3, [r7, #4]
 80086d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80086d8:	f043 0204 	orr.w	r2, r3, #4
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80086e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086e2:	f003 0308 	and.w	r3, r3, #8
 80086e6:	2b00      	cmp	r3, #0
 80086e8:	d00f      	beq.n	800870a <HAL_UART_IRQHandler+0xfa>
 80086ea:	6a3b      	ldr	r3, [r7, #32]
 80086ec:	f003 0320 	and.w	r3, r3, #32
 80086f0:	2b00      	cmp	r3, #0
 80086f2:	d104      	bne.n	80086fe <HAL_UART_IRQHandler+0xee>
 80086f4:	69fb      	ldr	r3, [r7, #28]
 80086f6:	f003 0301 	and.w	r3, r3, #1
 80086fa:	2b00      	cmp	r3, #0
 80086fc:	d005      	beq.n	800870a <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80086fe:	687b      	ldr	r3, [r7, #4]
 8008700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008702:	f043 0208 	orr.w	r2, r3, #8
 8008706:	687b      	ldr	r3, [r7, #4]
 8008708:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 800870a:	687b      	ldr	r3, [r7, #4]
 800870c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800870e:	2b00      	cmp	r3, #0
 8008710:	f000 811f 	beq.w	8008952 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008714:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008716:	f003 0320 	and.w	r3, r3, #32
 800871a:	2b00      	cmp	r3, #0
 800871c:	d007      	beq.n	800872e <HAL_UART_IRQHandler+0x11e>
 800871e:	6a3b      	ldr	r3, [r7, #32]
 8008720:	f003 0320 	and.w	r3, r3, #32
 8008724:	2b00      	cmp	r3, #0
 8008726:	d002      	beq.n	800872e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008728:	6878      	ldr	r0, [r7, #4]
 800872a:	f000 fb66 	bl	8008dfa <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695b      	ldr	r3, [r3, #20]
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b40      	cmp	r3, #64	; 0x40
 800873a:	bf0c      	ite	eq
 800873c:	2301      	moveq	r3, #1
 800873e:	2300      	movne	r3, #0
 8008740:	b2db      	uxtb	r3, r3
 8008742:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008744:	687b      	ldr	r3, [r7, #4]
 8008746:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008748:	f003 0308 	and.w	r3, r3, #8
 800874c:	2b00      	cmp	r3, #0
 800874e:	d102      	bne.n	8008756 <HAL_UART_IRQHandler+0x146>
 8008750:	697b      	ldr	r3, [r7, #20]
 8008752:	2b00      	cmp	r3, #0
 8008754:	d031      	beq.n	80087ba <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008756:	6878      	ldr	r0, [r7, #4]
 8008758:	f000 faa6 	bl	8008ca8 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	681b      	ldr	r3, [r3, #0]
 8008760:	695b      	ldr	r3, [r3, #20]
 8008762:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008766:	2b40      	cmp	r3, #64	; 0x40
 8008768:	d123      	bne.n	80087b2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	681b      	ldr	r3, [r3, #0]
 800876e:	695a      	ldr	r2, [r3, #20]
 8008770:	687b      	ldr	r3, [r7, #4]
 8008772:	681b      	ldr	r3, [r3, #0]
 8008774:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008778:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 800877a:	687b      	ldr	r3, [r7, #4]
 800877c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800877e:	2b00      	cmp	r3, #0
 8008780:	d013      	beq.n	80087aa <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008786:	4a77      	ldr	r2, [pc, #476]	; (8008964 <HAL_UART_IRQHandler+0x354>)
 8008788:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 800878a:	687b      	ldr	r3, [r7, #4]
 800878c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800878e:	4618      	mov	r0, r3
 8008790:	f7fb fda6 	bl	80042e0 <HAL_DMA_Abort_IT>
 8008794:	4603      	mov	r3, r0
 8008796:	2b00      	cmp	r3, #0
 8008798:	d016      	beq.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 800879a:	687b      	ldr	r3, [r7, #4]
 800879c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800879e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80087a0:	687a      	ldr	r2, [r7, #4]
 80087a2:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80087a4:	4610      	mov	r0, r2
 80087a6:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087a8:	e00e      	b.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80087aa:	6878      	ldr	r0, [r7, #4]
 80087ac:	f000 f904 	bl	80089b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b0:	e00a      	b.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80087b2:	6878      	ldr	r0, [r7, #4]
 80087b4:	f000 f900 	bl	80089b8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087b8:	e006      	b.n	80087c8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80087ba:	6878      	ldr	r0, [r7, #4]
 80087bc:	f000 f8fc 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80087c0:	687b      	ldr	r3, [r7, #4]
 80087c2:	2200      	movs	r2, #0
 80087c4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80087c6:	e0c4      	b.n	8008952 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80087c8:	bf00      	nop
    return;
 80087ca:	e0c2      	b.n	8008952 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80087cc:	687b      	ldr	r3, [r7, #4]
 80087ce:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80087d0:	2b01      	cmp	r3, #1
 80087d2:	f040 80a2 	bne.w	800891a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80087d6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087d8:	f003 0310 	and.w	r3, r3, #16
 80087dc:	2b00      	cmp	r3, #0
 80087de:	f000 809c 	beq.w	800891a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80087e2:	6a3b      	ldr	r3, [r7, #32]
 80087e4:	f003 0310 	and.w	r3, r3, #16
 80087e8:	2b00      	cmp	r3, #0
 80087ea:	f000 8096 	beq.w	800891a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80087ee:	2300      	movs	r3, #0
 80087f0:	60fb      	str	r3, [r7, #12]
 80087f2:	687b      	ldr	r3, [r7, #4]
 80087f4:	681b      	ldr	r3, [r3, #0]
 80087f6:	681b      	ldr	r3, [r3, #0]
 80087f8:	60fb      	str	r3, [r7, #12]
 80087fa:	687b      	ldr	r3, [r7, #4]
 80087fc:	681b      	ldr	r3, [r3, #0]
 80087fe:	685b      	ldr	r3, [r3, #4]
 8008800:	60fb      	str	r3, [r7, #12]
 8008802:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008804:	687b      	ldr	r3, [r7, #4]
 8008806:	681b      	ldr	r3, [r3, #0]
 8008808:	695b      	ldr	r3, [r3, #20]
 800880a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800880e:	2b40      	cmp	r3, #64	; 0x40
 8008810:	d14f      	bne.n	80088b2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8008812:	687b      	ldr	r3, [r7, #4]
 8008814:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008816:	681b      	ldr	r3, [r3, #0]
 8008818:	685b      	ldr	r3, [r3, #4]
 800881a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 800881c:	8a3b      	ldrh	r3, [r7, #16]
 800881e:	2b00      	cmp	r3, #0
 8008820:	f000 8099 	beq.w	8008956 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008824:	687b      	ldr	r3, [r7, #4]
 8008826:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008828:	8a3a      	ldrh	r2, [r7, #16]
 800882a:	429a      	cmp	r2, r3
 800882c:	f080 8093 	bcs.w	8008956 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8008830:	687b      	ldr	r3, [r7, #4]
 8008832:	8a3a      	ldrh	r2, [r7, #16]
 8008834:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008836:	687b      	ldr	r3, [r7, #4]
 8008838:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883a:	69db      	ldr	r3, [r3, #28]
 800883c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8008840:	d02b      	beq.n	800889a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008842:	687b      	ldr	r3, [r7, #4]
 8008844:	681b      	ldr	r3, [r3, #0]
 8008846:	68da      	ldr	r2, [r3, #12]
 8008848:	687b      	ldr	r3, [r7, #4]
 800884a:	681b      	ldr	r3, [r3, #0]
 800884c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008850:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008852:	687b      	ldr	r3, [r7, #4]
 8008854:	681b      	ldr	r3, [r3, #0]
 8008856:	695a      	ldr	r2, [r3, #20]
 8008858:	687b      	ldr	r3, [r7, #4]
 800885a:	681b      	ldr	r3, [r3, #0]
 800885c:	f022 0201 	bic.w	r2, r2, #1
 8008860:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008862:	687b      	ldr	r3, [r7, #4]
 8008864:	681b      	ldr	r3, [r3, #0]
 8008866:	695a      	ldr	r2, [r3, #20]
 8008868:	687b      	ldr	r3, [r7, #4]
 800886a:	681b      	ldr	r3, [r3, #0]
 800886c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008870:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8008872:	687b      	ldr	r3, [r7, #4]
 8008874:	2220      	movs	r2, #32
 8008876:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 800887a:	687b      	ldr	r3, [r7, #4]
 800887c:	2200      	movs	r2, #0
 800887e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008880:	687b      	ldr	r3, [r7, #4]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	68da      	ldr	r2, [r3, #12]
 8008886:	687b      	ldr	r3, [r7, #4]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0210 	bic.w	r2, r2, #16
 800888e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8008890:	687b      	ldr	r3, [r7, #4]
 8008892:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008894:	4618      	mov	r0, r3
 8008896:	f7fb fcb3 	bl	8004200 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 800889a:	687b      	ldr	r3, [r7, #4]
 800889c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800889e:	687b      	ldr	r3, [r7, #4]
 80088a0:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088a2:	b29b      	uxth	r3, r3
 80088a4:	1ad3      	subs	r3, r2, r3
 80088a6:	b29b      	uxth	r3, r3
 80088a8:	4619      	mov	r1, r3
 80088aa:	6878      	ldr	r0, [r7, #4]
 80088ac:	f000 f88e 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80088b0:	e051      	b.n	8008956 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80088b2:	687b      	ldr	r3, [r7, #4]
 80088b4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80088b6:	687b      	ldr	r3, [r7, #4]
 80088b8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088ba:	b29b      	uxth	r3, r3
 80088bc:	1ad3      	subs	r3, r2, r3
 80088be:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80088c0:	687b      	ldr	r3, [r7, #4]
 80088c2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80088c4:	b29b      	uxth	r3, r3
 80088c6:	2b00      	cmp	r3, #0
 80088c8:	d047      	beq.n	800895a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80088ca:	8a7b      	ldrh	r3, [r7, #18]
 80088cc:	2b00      	cmp	r3, #0
 80088ce:	d044      	beq.n	800895a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80088d0:	687b      	ldr	r3, [r7, #4]
 80088d2:	681b      	ldr	r3, [r3, #0]
 80088d4:	68da      	ldr	r2, [r3, #12]
 80088d6:	687b      	ldr	r3, [r7, #4]
 80088d8:	681b      	ldr	r3, [r3, #0]
 80088da:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80088de:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80088e0:	687b      	ldr	r3, [r7, #4]
 80088e2:	681b      	ldr	r3, [r3, #0]
 80088e4:	695a      	ldr	r2, [r3, #20]
 80088e6:	687b      	ldr	r3, [r7, #4]
 80088e8:	681b      	ldr	r3, [r3, #0]
 80088ea:	f022 0201 	bic.w	r2, r2, #1
 80088ee:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80088f0:	687b      	ldr	r3, [r7, #4]
 80088f2:	2220      	movs	r2, #32
 80088f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80088f8:	687b      	ldr	r3, [r7, #4]
 80088fa:	2200      	movs	r2, #0
 80088fc:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088fe:	687b      	ldr	r3, [r7, #4]
 8008900:	681b      	ldr	r3, [r3, #0]
 8008902:	68da      	ldr	r2, [r3, #12]
 8008904:	687b      	ldr	r3, [r7, #4]
 8008906:	681b      	ldr	r3, [r3, #0]
 8008908:	f022 0210 	bic.w	r2, r2, #16
 800890c:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800890e:	8a7b      	ldrh	r3, [r7, #18]
 8008910:	4619      	mov	r1, r3
 8008912:	6878      	ldr	r0, [r7, #4]
 8008914:	f000 f85a 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008918:	e01f      	b.n	800895a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 800891a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800891c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008920:	2b00      	cmp	r3, #0
 8008922:	d008      	beq.n	8008936 <HAL_UART_IRQHandler+0x326>
 8008924:	6a3b      	ldr	r3, [r7, #32]
 8008926:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800892a:	2b00      	cmp	r3, #0
 800892c:	d003      	beq.n	8008936 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800892e:	6878      	ldr	r0, [r7, #4]
 8008930:	f000 f9fb 	bl	8008d2a <UART_Transmit_IT>
    return;
 8008934:	e012      	b.n	800895c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008936:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008938:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800893c:	2b00      	cmp	r3, #0
 800893e:	d00d      	beq.n	800895c <HAL_UART_IRQHandler+0x34c>
 8008940:	6a3b      	ldr	r3, [r7, #32]
 8008942:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008946:	2b00      	cmp	r3, #0
 8008948:	d008      	beq.n	800895c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 800894a:	6878      	ldr	r0, [r7, #4]
 800894c:	f000 fa3d 	bl	8008dca <UART_EndTransmit_IT>
    return;
 8008950:	e004      	b.n	800895c <HAL_UART_IRQHandler+0x34c>
    return;
 8008952:	bf00      	nop
 8008954:	e002      	b.n	800895c <HAL_UART_IRQHandler+0x34c>
      return;
 8008956:	bf00      	nop
 8008958:	e000      	b.n	800895c <HAL_UART_IRQHandler+0x34c>
      return;
 800895a:	bf00      	nop
  }
}
 800895c:	3728      	adds	r7, #40	; 0x28
 800895e:	46bd      	mov	sp, r7
 8008960:	bd80      	pop	{r7, pc}
 8008962:	bf00      	nop
 8008964:	08008d03 	.word	0x08008d03

08008968 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008968:	b480      	push	{r7}
 800896a:	b083      	sub	sp, #12
 800896c:	af00      	add	r7, sp, #0
 800896e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8008970:	bf00      	nop
 8008972:	370c      	adds	r7, #12
 8008974:	46bd      	mov	sp, r7
 8008976:	f85d 7b04 	ldr.w	r7, [sp], #4
 800897a:	4770      	bx	lr

0800897c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 800897c:	b480      	push	{r7}
 800897e:	b083      	sub	sp, #12
 8008980:	af00      	add	r7, sp, #0
 8008982:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008984:	bf00      	nop
 8008986:	370c      	adds	r7, #12
 8008988:	46bd      	mov	sp, r7
 800898a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800898e:	4770      	bx	lr

08008990 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8008990:	b480      	push	{r7}
 8008992:	b083      	sub	sp, #12
 8008994:	af00      	add	r7, sp, #0
 8008996:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008998:	bf00      	nop
 800899a:	370c      	adds	r7, #12
 800899c:	46bd      	mov	sp, r7
 800899e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089a2:	4770      	bx	lr

080089a4 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80089a4:	b480      	push	{r7}
 80089a6:	b083      	sub	sp, #12
 80089a8:	af00      	add	r7, sp, #0
 80089aa:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80089ac:	bf00      	nop
 80089ae:	370c      	adds	r7, #12
 80089b0:	46bd      	mov	sp, r7
 80089b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089b6:	4770      	bx	lr

080089b8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80089b8:	b480      	push	{r7}
 80089ba:	b083      	sub	sp, #12
 80089bc:	af00      	add	r7, sp, #0
 80089be:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80089c0:	bf00      	nop
 80089c2:	370c      	adds	r7, #12
 80089c4:	46bd      	mov	sp, r7
 80089c6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089ca:	4770      	bx	lr

080089cc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80089cc:	b480      	push	{r7}
 80089ce:	b083      	sub	sp, #12
 80089d0:	af00      	add	r7, sp, #0
 80089d2:	6078      	str	r0, [r7, #4]
 80089d4:	460b      	mov	r3, r1
 80089d6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80089d8:	bf00      	nop
 80089da:	370c      	adds	r7, #12
 80089dc:	46bd      	mov	sp, r7
 80089de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80089e2:	4770      	bx	lr

080089e4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80089e4:	b580      	push	{r7, lr}
 80089e6:	b084      	sub	sp, #16
 80089e8:	af00      	add	r7, sp, #0
 80089ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089ec:	687b      	ldr	r3, [r7, #4]
 80089ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80089f2:	687b      	ldr	r3, [r7, #4]
 80089f4:	681b      	ldr	r3, [r3, #0]
 80089f6:	681b      	ldr	r3, [r3, #0]
 80089f8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80089fc:	2b00      	cmp	r3, #0
 80089fe:	d113      	bne.n	8008a28 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8008a00:	68fb      	ldr	r3, [r7, #12]
 8008a02:	2200      	movs	r2, #0
 8008a04:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008a06:	68fb      	ldr	r3, [r7, #12]
 8008a08:	681b      	ldr	r3, [r3, #0]
 8008a0a:	695a      	ldr	r2, [r3, #20]
 8008a0c:	68fb      	ldr	r3, [r7, #12]
 8008a0e:	681b      	ldr	r3, [r3, #0]
 8008a10:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008a14:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008a16:	68fb      	ldr	r3, [r7, #12]
 8008a18:	681b      	ldr	r3, [r3, #0]
 8008a1a:	68da      	ldr	r2, [r3, #12]
 8008a1c:	68fb      	ldr	r3, [r7, #12]
 8008a1e:	681b      	ldr	r3, [r3, #0]
 8008a20:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a24:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008a26:	e002      	b.n	8008a2e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008a28:	68f8      	ldr	r0, [r7, #12]
 8008a2a:	f7ff ff9d 	bl	8008968 <HAL_UART_TxCpltCallback>
}
 8008a2e:	bf00      	nop
 8008a30:	3710      	adds	r7, #16
 8008a32:	46bd      	mov	sp, r7
 8008a34:	bd80      	pop	{r7, pc}

08008a36 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008a36:	b580      	push	{r7, lr}
 8008a38:	b084      	sub	sp, #16
 8008a3a:	af00      	add	r7, sp, #0
 8008a3c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a3e:	687b      	ldr	r3, [r7, #4]
 8008a40:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a42:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008a44:	68f8      	ldr	r0, [r7, #12]
 8008a46:	f7ff ff99 	bl	800897c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a4a:	bf00      	nop
 8008a4c:	3710      	adds	r7, #16
 8008a4e:	46bd      	mov	sp, r7
 8008a50:	bd80      	pop	{r7, pc}

08008a52 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8008a52:	b580      	push	{r7, lr}
 8008a54:	b084      	sub	sp, #16
 8008a56:	af00      	add	r7, sp, #0
 8008a58:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008a5a:	687b      	ldr	r3, [r7, #4]
 8008a5c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008a5e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8008a60:	687b      	ldr	r3, [r7, #4]
 8008a62:	681b      	ldr	r3, [r3, #0]
 8008a64:	681b      	ldr	r3, [r3, #0]
 8008a66:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008a6a:	2b00      	cmp	r3, #0
 8008a6c:	d12a      	bne.n	8008ac4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8008a6e:	68fb      	ldr	r3, [r7, #12]
 8008a70:	2200      	movs	r2, #0
 8008a72:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a74:	68fb      	ldr	r3, [r7, #12]
 8008a76:	681b      	ldr	r3, [r3, #0]
 8008a78:	68da      	ldr	r2, [r3, #12]
 8008a7a:	68fb      	ldr	r3, [r7, #12]
 8008a7c:	681b      	ldr	r3, [r3, #0]
 8008a7e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008a82:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a84:	68fb      	ldr	r3, [r7, #12]
 8008a86:	681b      	ldr	r3, [r3, #0]
 8008a88:	695a      	ldr	r2, [r3, #20]
 8008a8a:	68fb      	ldr	r3, [r7, #12]
 8008a8c:	681b      	ldr	r3, [r3, #0]
 8008a8e:	f022 0201 	bic.w	r2, r2, #1
 8008a92:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	681b      	ldr	r3, [r3, #0]
 8008a98:	695a      	ldr	r2, [r3, #20]
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	681b      	ldr	r3, [r3, #0]
 8008a9e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008aa2:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008aa4:	68fb      	ldr	r3, [r7, #12]
 8008aa6:	2220      	movs	r2, #32
 8008aa8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008aac:	68fb      	ldr	r3, [r7, #12]
 8008aae:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ab0:	2b01      	cmp	r3, #1
 8008ab2:	d107      	bne.n	8008ac4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ab4:	68fb      	ldr	r3, [r7, #12]
 8008ab6:	681b      	ldr	r3, [r3, #0]
 8008ab8:	68da      	ldr	r2, [r3, #12]
 8008aba:	68fb      	ldr	r3, [r7, #12]
 8008abc:	681b      	ldr	r3, [r3, #0]
 8008abe:	f022 0210 	bic.w	r2, r2, #16
 8008ac2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ac4:	68fb      	ldr	r3, [r7, #12]
 8008ac6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ac8:	2b01      	cmp	r3, #1
 8008aca:	d106      	bne.n	8008ada <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008acc:	68fb      	ldr	r3, [r7, #12]
 8008ace:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008ad0:	4619      	mov	r1, r3
 8008ad2:	68f8      	ldr	r0, [r7, #12]
 8008ad4:	f7ff ff7a 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008ad8:	e002      	b.n	8008ae0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8008ada:	68f8      	ldr	r0, [r7, #12]
 8008adc:	f7ff ff58 	bl	8008990 <HAL_UART_RxCpltCallback>
}
 8008ae0:	bf00      	nop
 8008ae2:	3710      	adds	r7, #16
 8008ae4:	46bd      	mov	sp, r7
 8008ae6:	bd80      	pop	{r7, pc}

08008ae8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008ae8:	b580      	push	{r7, lr}
 8008aea:	b084      	sub	sp, #16
 8008aec:	af00      	add	r7, sp, #0
 8008aee:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008af0:	687b      	ldr	r3, [r7, #4]
 8008af2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008af4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008af6:	68fb      	ldr	r3, [r7, #12]
 8008af8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008afa:	2b01      	cmp	r3, #1
 8008afc:	d108      	bne.n	8008b10 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8008afe:	68fb      	ldr	r3, [r7, #12]
 8008b00:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008b02:	085b      	lsrs	r3, r3, #1
 8008b04:	b29b      	uxth	r3, r3
 8008b06:	4619      	mov	r1, r3
 8008b08:	68f8      	ldr	r0, [r7, #12]
 8008b0a:	f7ff ff5f 	bl	80089cc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008b0e:	e002      	b.n	8008b16 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8008b10:	68f8      	ldr	r0, [r7, #12]
 8008b12:	f7ff ff47 	bl	80089a4 <HAL_UART_RxHalfCpltCallback>
}
 8008b16:	bf00      	nop
 8008b18:	3710      	adds	r7, #16
 8008b1a:	46bd      	mov	sp, r7
 8008b1c:	bd80      	pop	{r7, pc}

08008b1e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8008b1e:	b580      	push	{r7, lr}
 8008b20:	b084      	sub	sp, #16
 8008b22:	af00      	add	r7, sp, #0
 8008b24:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008b26:	2300      	movs	r3, #0
 8008b28:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b2a:	687b      	ldr	r3, [r7, #4]
 8008b2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b2e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8008b30:	68bb      	ldr	r3, [r7, #8]
 8008b32:	681b      	ldr	r3, [r3, #0]
 8008b34:	695b      	ldr	r3, [r3, #20]
 8008b36:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008b3a:	2b80      	cmp	r3, #128	; 0x80
 8008b3c:	bf0c      	ite	eq
 8008b3e:	2301      	moveq	r3, #1
 8008b40:	2300      	movne	r3, #0
 8008b42:	b2db      	uxtb	r3, r3
 8008b44:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008b46:	68bb      	ldr	r3, [r7, #8]
 8008b48:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b4c:	b2db      	uxtb	r3, r3
 8008b4e:	2b21      	cmp	r3, #33	; 0x21
 8008b50:	d108      	bne.n	8008b64 <UART_DMAError+0x46>
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	2b00      	cmp	r3, #0
 8008b56:	d005      	beq.n	8008b64 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008b58:	68bb      	ldr	r3, [r7, #8]
 8008b5a:	2200      	movs	r2, #0
 8008b5c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008b5e:	68b8      	ldr	r0, [r7, #8]
 8008b60:	f000 f88c 	bl	8008c7c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008b64:	68bb      	ldr	r3, [r7, #8]
 8008b66:	681b      	ldr	r3, [r3, #0]
 8008b68:	695b      	ldr	r3, [r3, #20]
 8008b6a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008b6e:	2b40      	cmp	r3, #64	; 0x40
 8008b70:	bf0c      	ite	eq
 8008b72:	2301      	moveq	r3, #1
 8008b74:	2300      	movne	r3, #0
 8008b76:	b2db      	uxtb	r3, r3
 8008b78:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008b7a:	68bb      	ldr	r3, [r7, #8]
 8008b7c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008b80:	b2db      	uxtb	r3, r3
 8008b82:	2b22      	cmp	r3, #34	; 0x22
 8008b84:	d108      	bne.n	8008b98 <UART_DMAError+0x7a>
 8008b86:	68fb      	ldr	r3, [r7, #12]
 8008b88:	2b00      	cmp	r3, #0
 8008b8a:	d005      	beq.n	8008b98 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008b8c:	68bb      	ldr	r3, [r7, #8]
 8008b8e:	2200      	movs	r2, #0
 8008b90:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008b92:	68b8      	ldr	r0, [r7, #8]
 8008b94:	f000 f888 	bl	8008ca8 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008b98:	68bb      	ldr	r3, [r7, #8]
 8008b9a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008b9c:	f043 0210 	orr.w	r2, r3, #16
 8008ba0:	68bb      	ldr	r3, [r7, #8]
 8008ba2:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008ba4:	68b8      	ldr	r0, [r7, #8]
 8008ba6:	f7ff ff07 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008baa:	bf00      	nop
 8008bac:	3710      	adds	r7, #16
 8008bae:	46bd      	mov	sp, r7
 8008bb0:	bd80      	pop	{r7, pc}
	...

08008bb4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008bb4:	b580      	push	{r7, lr}
 8008bb6:	b086      	sub	sp, #24
 8008bb8:	af00      	add	r7, sp, #0
 8008bba:	60f8      	str	r0, [r7, #12]
 8008bbc:	60b9      	str	r1, [r7, #8]
 8008bbe:	4613      	mov	r3, r2
 8008bc0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008bc2:	68ba      	ldr	r2, [r7, #8]
 8008bc4:	68fb      	ldr	r3, [r7, #12]
 8008bc6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008bc8:	68fb      	ldr	r3, [r7, #12]
 8008bca:	88fa      	ldrh	r2, [r7, #6]
 8008bcc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008bce:	68fb      	ldr	r3, [r7, #12]
 8008bd0:	2200      	movs	r2, #0
 8008bd2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008bd4:	68fb      	ldr	r3, [r7, #12]
 8008bd6:	2222      	movs	r2, #34	; 0x22
 8008bd8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be0:	4a23      	ldr	r2, [pc, #140]	; (8008c70 <UART_Start_Receive_DMA+0xbc>)
 8008be2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008be4:	68fb      	ldr	r3, [r7, #12]
 8008be6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008be8:	4a22      	ldr	r2, [pc, #136]	; (8008c74 <UART_Start_Receive_DMA+0xc0>)
 8008bea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008bec:	68fb      	ldr	r3, [r7, #12]
 8008bee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf0:	4a21      	ldr	r2, [pc, #132]	; (8008c78 <UART_Start_Receive_DMA+0xc4>)
 8008bf2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008bf4:	68fb      	ldr	r3, [r7, #12]
 8008bf6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bf8:	2200      	movs	r2, #0
 8008bfa:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008bfc:	f107 0308 	add.w	r3, r7, #8
 8008c00:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008c02:	68fb      	ldr	r3, [r7, #12]
 8008c04:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008c06:	68fb      	ldr	r3, [r7, #12]
 8008c08:	681b      	ldr	r3, [r3, #0]
 8008c0a:	3304      	adds	r3, #4
 8008c0c:	4619      	mov	r1, r3
 8008c0e:	697b      	ldr	r3, [r7, #20]
 8008c10:	681a      	ldr	r2, [r3, #0]
 8008c12:	88fb      	ldrh	r3, [r7, #6]
 8008c14:	f7fb fa9c 	bl	8004150 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008c18:	2300      	movs	r3, #0
 8008c1a:	613b      	str	r3, [r7, #16]
 8008c1c:	68fb      	ldr	r3, [r7, #12]
 8008c1e:	681b      	ldr	r3, [r3, #0]
 8008c20:	681b      	ldr	r3, [r3, #0]
 8008c22:	613b      	str	r3, [r7, #16]
 8008c24:	68fb      	ldr	r3, [r7, #12]
 8008c26:	681b      	ldr	r3, [r3, #0]
 8008c28:	685b      	ldr	r3, [r3, #4]
 8008c2a:	613b      	str	r3, [r7, #16]
 8008c2c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008c2e:	68fb      	ldr	r3, [r7, #12]
 8008c30:	2200      	movs	r2, #0
 8008c32:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008c36:	68fb      	ldr	r3, [r7, #12]
 8008c38:	681b      	ldr	r3, [r3, #0]
 8008c3a:	68da      	ldr	r2, [r3, #12]
 8008c3c:	68fb      	ldr	r3, [r7, #12]
 8008c3e:	681b      	ldr	r3, [r3, #0]
 8008c40:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008c44:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008c46:	68fb      	ldr	r3, [r7, #12]
 8008c48:	681b      	ldr	r3, [r3, #0]
 8008c4a:	695a      	ldr	r2, [r3, #20]
 8008c4c:	68fb      	ldr	r3, [r7, #12]
 8008c4e:	681b      	ldr	r3, [r3, #0]
 8008c50:	f042 0201 	orr.w	r2, r2, #1
 8008c54:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008c56:	68fb      	ldr	r3, [r7, #12]
 8008c58:	681b      	ldr	r3, [r3, #0]
 8008c5a:	695a      	ldr	r2, [r3, #20]
 8008c5c:	68fb      	ldr	r3, [r7, #12]
 8008c5e:	681b      	ldr	r3, [r3, #0]
 8008c60:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c64:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008c66:	2300      	movs	r3, #0
}
 8008c68:	4618      	mov	r0, r3
 8008c6a:	3718      	adds	r7, #24
 8008c6c:	46bd      	mov	sp, r7
 8008c6e:	bd80      	pop	{r7, pc}
 8008c70:	08008a53 	.word	0x08008a53
 8008c74:	08008ae9 	.word	0x08008ae9
 8008c78:	08008b1f 	.word	0x08008b1f

08008c7c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008c7c:	b480      	push	{r7}
 8008c7e:	b083      	sub	sp, #12
 8008c80:	af00      	add	r7, sp, #0
 8008c82:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008c84:	687b      	ldr	r3, [r7, #4]
 8008c86:	681b      	ldr	r3, [r3, #0]
 8008c88:	68da      	ldr	r2, [r3, #12]
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	681b      	ldr	r3, [r3, #0]
 8008c8e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008c92:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	2220      	movs	r2, #32
 8008c98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008c9c:	bf00      	nop
 8008c9e:	370c      	adds	r7, #12
 8008ca0:	46bd      	mov	sp, r7
 8008ca2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008ca6:	4770      	bx	lr

08008ca8 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008ca8:	b480      	push	{r7}
 8008caa:	b083      	sub	sp, #12
 8008cac:	af00      	add	r7, sp, #0
 8008cae:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008cb0:	687b      	ldr	r3, [r7, #4]
 8008cb2:	681b      	ldr	r3, [r3, #0]
 8008cb4:	68da      	ldr	r2, [r3, #12]
 8008cb6:	687b      	ldr	r3, [r7, #4]
 8008cb8:	681b      	ldr	r3, [r3, #0]
 8008cba:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008cbe:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008cc0:	687b      	ldr	r3, [r7, #4]
 8008cc2:	681b      	ldr	r3, [r3, #0]
 8008cc4:	695a      	ldr	r2, [r3, #20]
 8008cc6:	687b      	ldr	r3, [r7, #4]
 8008cc8:	681b      	ldr	r3, [r3, #0]
 8008cca:	f022 0201 	bic.w	r2, r2, #1
 8008cce:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008cd0:	687b      	ldr	r3, [r7, #4]
 8008cd2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008cd4:	2b01      	cmp	r3, #1
 8008cd6:	d107      	bne.n	8008ce8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	681b      	ldr	r3, [r3, #0]
 8008cdc:	68da      	ldr	r2, [r3, #12]
 8008cde:	687b      	ldr	r3, [r7, #4]
 8008ce0:	681b      	ldr	r3, [r3, #0]
 8008ce2:	f022 0210 	bic.w	r2, r2, #16
 8008ce6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	2220      	movs	r2, #32
 8008cec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008cf0:	687b      	ldr	r3, [r7, #4]
 8008cf2:	2200      	movs	r2, #0
 8008cf4:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008cf6:	bf00      	nop
 8008cf8:	370c      	adds	r7, #12
 8008cfa:	46bd      	mov	sp, r7
 8008cfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008d00:	4770      	bx	lr

08008d02 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008d02:	b580      	push	{r7, lr}
 8008d04:	b084      	sub	sp, #16
 8008d06:	af00      	add	r7, sp, #0
 8008d08:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008d0e:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008d10:	68fb      	ldr	r3, [r7, #12]
 8008d12:	2200      	movs	r2, #0
 8008d14:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008d16:	68fb      	ldr	r3, [r7, #12]
 8008d18:	2200      	movs	r2, #0
 8008d1a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008d1c:	68f8      	ldr	r0, [r7, #12]
 8008d1e:	f7ff fe4b 	bl	80089b8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008d22:	bf00      	nop
 8008d24:	3710      	adds	r7, #16
 8008d26:	46bd      	mov	sp, r7
 8008d28:	bd80      	pop	{r7, pc}

08008d2a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008d2a:	b480      	push	{r7}
 8008d2c:	b085      	sub	sp, #20
 8008d2e:	af00      	add	r7, sp, #0
 8008d30:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008d38:	b2db      	uxtb	r3, r3
 8008d3a:	2b21      	cmp	r3, #33	; 0x21
 8008d3c:	d13e      	bne.n	8008dbc <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008d3e:	687b      	ldr	r3, [r7, #4]
 8008d40:	689b      	ldr	r3, [r3, #8]
 8008d42:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d46:	d114      	bne.n	8008d72 <UART_Transmit_IT+0x48>
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	691b      	ldr	r3, [r3, #16]
 8008d4c:	2b00      	cmp	r3, #0
 8008d4e:	d110      	bne.n	8008d72 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008d50:	687b      	ldr	r3, [r7, #4]
 8008d52:	6a1b      	ldr	r3, [r3, #32]
 8008d54:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	881b      	ldrh	r3, [r3, #0]
 8008d5a:	461a      	mov	r2, r3
 8008d5c:	687b      	ldr	r3, [r7, #4]
 8008d5e:	681b      	ldr	r3, [r3, #0]
 8008d60:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008d64:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008d66:	687b      	ldr	r3, [r7, #4]
 8008d68:	6a1b      	ldr	r3, [r3, #32]
 8008d6a:	1c9a      	adds	r2, r3, #2
 8008d6c:	687b      	ldr	r3, [r7, #4]
 8008d6e:	621a      	str	r2, [r3, #32]
 8008d70:	e008      	b.n	8008d84 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008d72:	687b      	ldr	r3, [r7, #4]
 8008d74:	6a1b      	ldr	r3, [r3, #32]
 8008d76:	1c59      	adds	r1, r3, #1
 8008d78:	687a      	ldr	r2, [r7, #4]
 8008d7a:	6211      	str	r1, [r2, #32]
 8008d7c:	781a      	ldrb	r2, [r3, #0]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008d84:	687b      	ldr	r3, [r7, #4]
 8008d86:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008d88:	b29b      	uxth	r3, r3
 8008d8a:	3b01      	subs	r3, #1
 8008d8c:	b29b      	uxth	r3, r3
 8008d8e:	687a      	ldr	r2, [r7, #4]
 8008d90:	4619      	mov	r1, r3
 8008d92:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008d94:	2b00      	cmp	r3, #0
 8008d96:	d10f      	bne.n	8008db8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	68da      	ldr	r2, [r3, #12]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008da6:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	681b      	ldr	r3, [r3, #0]
 8008dac:	68da      	ldr	r2, [r3, #12]
 8008dae:	687b      	ldr	r3, [r7, #4]
 8008db0:	681b      	ldr	r3, [r3, #0]
 8008db2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008db6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008db8:	2300      	movs	r3, #0
 8008dba:	e000      	b.n	8008dbe <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008dbc:	2302      	movs	r3, #2
  }
}
 8008dbe:	4618      	mov	r0, r3
 8008dc0:	3714      	adds	r7, #20
 8008dc2:	46bd      	mov	sp, r7
 8008dc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008dc8:	4770      	bx	lr

08008dca <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008dca:	b580      	push	{r7, lr}
 8008dcc:	b082      	sub	sp, #8
 8008dce:	af00      	add	r7, sp, #0
 8008dd0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008dd2:	687b      	ldr	r3, [r7, #4]
 8008dd4:	681b      	ldr	r3, [r3, #0]
 8008dd6:	68da      	ldr	r2, [r3, #12]
 8008dd8:	687b      	ldr	r3, [r7, #4]
 8008dda:	681b      	ldr	r3, [r3, #0]
 8008ddc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008de0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008de2:	687b      	ldr	r3, [r7, #4]
 8008de4:	2220      	movs	r2, #32
 8008de6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008dea:	6878      	ldr	r0, [r7, #4]
 8008dec:	f7ff fdbc 	bl	8008968 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008df0:	2300      	movs	r3, #0
}
 8008df2:	4618      	mov	r0, r3
 8008df4:	3708      	adds	r7, #8
 8008df6:	46bd      	mov	sp, r7
 8008df8:	bd80      	pop	{r7, pc}

08008dfa <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008dfa:	b580      	push	{r7, lr}
 8008dfc:	b084      	sub	sp, #16
 8008dfe:	af00      	add	r7, sp, #0
 8008e00:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008e02:	687b      	ldr	r3, [r7, #4]
 8008e04:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008e08:	b2db      	uxtb	r3, r3
 8008e0a:	2b22      	cmp	r3, #34	; 0x22
 8008e0c:	f040 8087 	bne.w	8008f1e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008e10:	687b      	ldr	r3, [r7, #4]
 8008e12:	689b      	ldr	r3, [r3, #8]
 8008e14:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e18:	d117      	bne.n	8008e4a <UART_Receive_IT+0x50>
 8008e1a:	687b      	ldr	r3, [r7, #4]
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	2b00      	cmp	r3, #0
 8008e20:	d113      	bne.n	8008e4a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008e22:	2300      	movs	r3, #0
 8008e24:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008e26:	687b      	ldr	r3, [r7, #4]
 8008e28:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e2a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008e2c:	687b      	ldr	r3, [r7, #4]
 8008e2e:	681b      	ldr	r3, [r3, #0]
 8008e30:	685b      	ldr	r3, [r3, #4]
 8008e32:	b29b      	uxth	r3, r3
 8008e34:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008e38:	b29a      	uxth	r2, r3
 8008e3a:	68bb      	ldr	r3, [r7, #8]
 8008e3c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008e3e:	687b      	ldr	r3, [r7, #4]
 8008e40:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e42:	1c9a      	adds	r2, r3, #2
 8008e44:	687b      	ldr	r3, [r7, #4]
 8008e46:	629a      	str	r2, [r3, #40]	; 0x28
 8008e48:	e026      	b.n	8008e98 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008e4a:	687b      	ldr	r3, [r7, #4]
 8008e4c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e4e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008e50:	2300      	movs	r3, #0
 8008e52:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008e54:	687b      	ldr	r3, [r7, #4]
 8008e56:	689b      	ldr	r3, [r3, #8]
 8008e58:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008e5c:	d007      	beq.n	8008e6e <UART_Receive_IT+0x74>
 8008e5e:	687b      	ldr	r3, [r7, #4]
 8008e60:	689b      	ldr	r3, [r3, #8]
 8008e62:	2b00      	cmp	r3, #0
 8008e64:	d10a      	bne.n	8008e7c <UART_Receive_IT+0x82>
 8008e66:	687b      	ldr	r3, [r7, #4]
 8008e68:	691b      	ldr	r3, [r3, #16]
 8008e6a:	2b00      	cmp	r3, #0
 8008e6c:	d106      	bne.n	8008e7c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008e6e:	687b      	ldr	r3, [r7, #4]
 8008e70:	681b      	ldr	r3, [r3, #0]
 8008e72:	685b      	ldr	r3, [r3, #4]
 8008e74:	b2da      	uxtb	r2, r3
 8008e76:	68fb      	ldr	r3, [r7, #12]
 8008e78:	701a      	strb	r2, [r3, #0]
 8008e7a:	e008      	b.n	8008e8e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008e7c:	687b      	ldr	r3, [r7, #4]
 8008e7e:	681b      	ldr	r3, [r3, #0]
 8008e80:	685b      	ldr	r3, [r3, #4]
 8008e82:	b2db      	uxtb	r3, r3
 8008e84:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008e88:	b2da      	uxtb	r2, r3
 8008e8a:	68fb      	ldr	r3, [r7, #12]
 8008e8c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008e8e:	687b      	ldr	r3, [r7, #4]
 8008e90:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008e92:	1c5a      	adds	r2, r3, #1
 8008e94:	687b      	ldr	r3, [r7, #4]
 8008e96:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008e98:	687b      	ldr	r3, [r7, #4]
 8008e9a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008e9c:	b29b      	uxth	r3, r3
 8008e9e:	3b01      	subs	r3, #1
 8008ea0:	b29b      	uxth	r3, r3
 8008ea2:	687a      	ldr	r2, [r7, #4]
 8008ea4:	4619      	mov	r1, r3
 8008ea6:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ea8:	2b00      	cmp	r3, #0
 8008eaa:	d136      	bne.n	8008f1a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008eac:	687b      	ldr	r3, [r7, #4]
 8008eae:	681b      	ldr	r3, [r3, #0]
 8008eb0:	68da      	ldr	r2, [r3, #12]
 8008eb2:	687b      	ldr	r3, [r7, #4]
 8008eb4:	681b      	ldr	r3, [r3, #0]
 8008eb6:	f022 0220 	bic.w	r2, r2, #32
 8008eba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008ebc:	687b      	ldr	r3, [r7, #4]
 8008ebe:	681b      	ldr	r3, [r3, #0]
 8008ec0:	68da      	ldr	r2, [r3, #12]
 8008ec2:	687b      	ldr	r3, [r7, #4]
 8008ec4:	681b      	ldr	r3, [r3, #0]
 8008ec6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008eca:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008ecc:	687b      	ldr	r3, [r7, #4]
 8008ece:	681b      	ldr	r3, [r3, #0]
 8008ed0:	695a      	ldr	r2, [r3, #20]
 8008ed2:	687b      	ldr	r3, [r7, #4]
 8008ed4:	681b      	ldr	r3, [r3, #0]
 8008ed6:	f022 0201 	bic.w	r2, r2, #1
 8008eda:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008edc:	687b      	ldr	r3, [r7, #4]
 8008ede:	2220      	movs	r2, #32
 8008ee0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ee4:	687b      	ldr	r3, [r7, #4]
 8008ee6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ee8:	2b01      	cmp	r3, #1
 8008eea:	d10e      	bne.n	8008f0a <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008eec:	687b      	ldr	r3, [r7, #4]
 8008eee:	681b      	ldr	r3, [r3, #0]
 8008ef0:	68da      	ldr	r2, [r3, #12]
 8008ef2:	687b      	ldr	r3, [r7, #4]
 8008ef4:	681b      	ldr	r3, [r3, #0]
 8008ef6:	f022 0210 	bic.w	r2, r2, #16
 8008efa:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008efc:	687b      	ldr	r3, [r7, #4]
 8008efe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008f00:	4619      	mov	r1, r3
 8008f02:	6878      	ldr	r0, [r7, #4]
 8008f04:	f7ff fd62 	bl	80089cc <HAL_UARTEx_RxEventCallback>
 8008f08:	e002      	b.n	8008f10 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008f0a:	6878      	ldr	r0, [r7, #4]
 8008f0c:	f7ff fd40 	bl	8008990 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008f10:	687b      	ldr	r3, [r7, #4]
 8008f12:	2200      	movs	r2, #0
 8008f14:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008f16:	2300      	movs	r3, #0
 8008f18:	e002      	b.n	8008f20 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008f1a:	2300      	movs	r3, #0
 8008f1c:	e000      	b.n	8008f20 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008f1e:	2302      	movs	r3, #2
  }
}
 8008f20:	4618      	mov	r0, r3
 8008f22:	3710      	adds	r7, #16
 8008f24:	46bd      	mov	sp, r7
 8008f26:	bd80      	pop	{r7, pc}

08008f28 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008f28:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008f2c:	b09f      	sub	sp, #124	; 0x7c
 8008f2e:	af00      	add	r7, sp, #0
 8008f30:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008f32:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f34:	681b      	ldr	r3, [r3, #0]
 8008f36:	691b      	ldr	r3, [r3, #16]
 8008f38:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008f3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f3e:	68d9      	ldr	r1, [r3, #12]
 8008f40:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f42:	681a      	ldr	r2, [r3, #0]
 8008f44:	ea40 0301 	orr.w	r3, r0, r1
 8008f48:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008f4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f4c:	689a      	ldr	r2, [r3, #8]
 8008f4e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f50:	691b      	ldr	r3, [r3, #16]
 8008f52:	431a      	orrs	r2, r3
 8008f54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f56:	695b      	ldr	r3, [r3, #20]
 8008f58:	431a      	orrs	r2, r3
 8008f5a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f5c:	69db      	ldr	r3, [r3, #28]
 8008f5e:	4313      	orrs	r3, r2
 8008f60:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f64:	681b      	ldr	r3, [r3, #0]
 8008f66:	68db      	ldr	r3, [r3, #12]
 8008f68:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008f6c:	f021 010c 	bic.w	r1, r1, #12
 8008f70:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f72:	681a      	ldr	r2, [r3, #0]
 8008f74:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008f76:	430b      	orrs	r3, r1
 8008f78:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008f7a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f7c:	681b      	ldr	r3, [r3, #0]
 8008f7e:	695b      	ldr	r3, [r3, #20]
 8008f80:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008f84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f86:	6999      	ldr	r1, [r3, #24]
 8008f88:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f8a:	681a      	ldr	r2, [r3, #0]
 8008f8c:	ea40 0301 	orr.w	r3, r0, r1
 8008f90:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f94:	681a      	ldr	r2, [r3, #0]
 8008f96:	4bc5      	ldr	r3, [pc, #788]	; (80092ac <UART_SetConfig+0x384>)
 8008f98:	429a      	cmp	r2, r3
 8008f9a:	d004      	beq.n	8008fa6 <UART_SetConfig+0x7e>
 8008f9c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f9e:	681a      	ldr	r2, [r3, #0]
 8008fa0:	4bc3      	ldr	r3, [pc, #780]	; (80092b0 <UART_SetConfig+0x388>)
 8008fa2:	429a      	cmp	r2, r3
 8008fa4:	d103      	bne.n	8008fae <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008fa6:	f7fe f8eb 	bl	8007180 <HAL_RCC_GetPCLK2Freq>
 8008faa:	6778      	str	r0, [r7, #116]	; 0x74
 8008fac:	e002      	b.n	8008fb4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008fae:	f7fe f8d3 	bl	8007158 <HAL_RCC_GetPCLK1Freq>
 8008fb2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008fb4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fb6:	69db      	ldr	r3, [r3, #28]
 8008fb8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008fbc:	f040 80b6 	bne.w	800912c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008fc0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008fc2:	461c      	mov	r4, r3
 8008fc4:	f04f 0500 	mov.w	r5, #0
 8008fc8:	4622      	mov	r2, r4
 8008fca:	462b      	mov	r3, r5
 8008fcc:	1891      	adds	r1, r2, r2
 8008fce:	6439      	str	r1, [r7, #64]	; 0x40
 8008fd0:	415b      	adcs	r3, r3
 8008fd2:	647b      	str	r3, [r7, #68]	; 0x44
 8008fd4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008fd8:	1912      	adds	r2, r2, r4
 8008fda:	eb45 0303 	adc.w	r3, r5, r3
 8008fde:	f04f 0000 	mov.w	r0, #0
 8008fe2:	f04f 0100 	mov.w	r1, #0
 8008fe6:	00d9      	lsls	r1, r3, #3
 8008fe8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008fec:	00d0      	lsls	r0, r2, #3
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	1911      	adds	r1, r2, r4
 8008ff4:	6639      	str	r1, [r7, #96]	; 0x60
 8008ff6:	416b      	adcs	r3, r5
 8008ff8:	667b      	str	r3, [r7, #100]	; 0x64
 8008ffa:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ffc:	685b      	ldr	r3, [r3, #4]
 8008ffe:	461a      	mov	r2, r3
 8009000:	f04f 0300 	mov.w	r3, #0
 8009004:	1891      	adds	r1, r2, r2
 8009006:	63b9      	str	r1, [r7, #56]	; 0x38
 8009008:	415b      	adcs	r3, r3
 800900a:	63fb      	str	r3, [r7, #60]	; 0x3c
 800900c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8009010:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8009014:	f7f7 feaa 	bl	8000d6c <__aeabi_uldivmod>
 8009018:	4602      	mov	r2, r0
 800901a:	460b      	mov	r3, r1
 800901c:	4ba5      	ldr	r3, [pc, #660]	; (80092b4 <UART_SetConfig+0x38c>)
 800901e:	fba3 2302 	umull	r2, r3, r3, r2
 8009022:	095b      	lsrs	r3, r3, #5
 8009024:	011e      	lsls	r6, r3, #4
 8009026:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009028:	461c      	mov	r4, r3
 800902a:	f04f 0500 	mov.w	r5, #0
 800902e:	4622      	mov	r2, r4
 8009030:	462b      	mov	r3, r5
 8009032:	1891      	adds	r1, r2, r2
 8009034:	6339      	str	r1, [r7, #48]	; 0x30
 8009036:	415b      	adcs	r3, r3
 8009038:	637b      	str	r3, [r7, #52]	; 0x34
 800903a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800903e:	1912      	adds	r2, r2, r4
 8009040:	eb45 0303 	adc.w	r3, r5, r3
 8009044:	f04f 0000 	mov.w	r0, #0
 8009048:	f04f 0100 	mov.w	r1, #0
 800904c:	00d9      	lsls	r1, r3, #3
 800904e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009052:	00d0      	lsls	r0, r2, #3
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	1911      	adds	r1, r2, r4
 800905a:	65b9      	str	r1, [r7, #88]	; 0x58
 800905c:	416b      	adcs	r3, r5
 800905e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8009060:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009062:	685b      	ldr	r3, [r3, #4]
 8009064:	461a      	mov	r2, r3
 8009066:	f04f 0300 	mov.w	r3, #0
 800906a:	1891      	adds	r1, r2, r2
 800906c:	62b9      	str	r1, [r7, #40]	; 0x28
 800906e:	415b      	adcs	r3, r3
 8009070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8009072:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8009076:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800907a:	f7f7 fe77 	bl	8000d6c <__aeabi_uldivmod>
 800907e:	4602      	mov	r2, r0
 8009080:	460b      	mov	r3, r1
 8009082:	4b8c      	ldr	r3, [pc, #560]	; (80092b4 <UART_SetConfig+0x38c>)
 8009084:	fba3 1302 	umull	r1, r3, r3, r2
 8009088:	095b      	lsrs	r3, r3, #5
 800908a:	2164      	movs	r1, #100	; 0x64
 800908c:	fb01 f303 	mul.w	r3, r1, r3
 8009090:	1ad3      	subs	r3, r2, r3
 8009092:	00db      	lsls	r3, r3, #3
 8009094:	3332      	adds	r3, #50	; 0x32
 8009096:	4a87      	ldr	r2, [pc, #540]	; (80092b4 <UART_SetConfig+0x38c>)
 8009098:	fba2 2303 	umull	r2, r3, r2, r3
 800909c:	095b      	lsrs	r3, r3, #5
 800909e:	005b      	lsls	r3, r3, #1
 80090a0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 80090a4:	441e      	add	r6, r3
 80090a6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090a8:	4618      	mov	r0, r3
 80090aa:	f04f 0100 	mov.w	r1, #0
 80090ae:	4602      	mov	r2, r0
 80090b0:	460b      	mov	r3, r1
 80090b2:	1894      	adds	r4, r2, r2
 80090b4:	623c      	str	r4, [r7, #32]
 80090b6:	415b      	adcs	r3, r3
 80090b8:	627b      	str	r3, [r7, #36]	; 0x24
 80090ba:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80090be:	1812      	adds	r2, r2, r0
 80090c0:	eb41 0303 	adc.w	r3, r1, r3
 80090c4:	f04f 0400 	mov.w	r4, #0
 80090c8:	f04f 0500 	mov.w	r5, #0
 80090cc:	00dd      	lsls	r5, r3, #3
 80090ce:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80090d2:	00d4      	lsls	r4, r2, #3
 80090d4:	4622      	mov	r2, r4
 80090d6:	462b      	mov	r3, r5
 80090d8:	1814      	adds	r4, r2, r0
 80090da:	653c      	str	r4, [r7, #80]	; 0x50
 80090dc:	414b      	adcs	r3, r1
 80090de:	657b      	str	r3, [r7, #84]	; 0x54
 80090e0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80090e2:	685b      	ldr	r3, [r3, #4]
 80090e4:	461a      	mov	r2, r3
 80090e6:	f04f 0300 	mov.w	r3, #0
 80090ea:	1891      	adds	r1, r2, r2
 80090ec:	61b9      	str	r1, [r7, #24]
 80090ee:	415b      	adcs	r3, r3
 80090f0:	61fb      	str	r3, [r7, #28]
 80090f2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80090f6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80090fa:	f7f7 fe37 	bl	8000d6c <__aeabi_uldivmod>
 80090fe:	4602      	mov	r2, r0
 8009100:	460b      	mov	r3, r1
 8009102:	4b6c      	ldr	r3, [pc, #432]	; (80092b4 <UART_SetConfig+0x38c>)
 8009104:	fba3 1302 	umull	r1, r3, r3, r2
 8009108:	095b      	lsrs	r3, r3, #5
 800910a:	2164      	movs	r1, #100	; 0x64
 800910c:	fb01 f303 	mul.w	r3, r1, r3
 8009110:	1ad3      	subs	r3, r2, r3
 8009112:	00db      	lsls	r3, r3, #3
 8009114:	3332      	adds	r3, #50	; 0x32
 8009116:	4a67      	ldr	r2, [pc, #412]	; (80092b4 <UART_SetConfig+0x38c>)
 8009118:	fba2 2303 	umull	r2, r3, r2, r3
 800911c:	095b      	lsrs	r3, r3, #5
 800911e:	f003 0207 	and.w	r2, r3, #7
 8009122:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009124:	681b      	ldr	r3, [r3, #0]
 8009126:	4432      	add	r2, r6
 8009128:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800912a:	e0b9      	b.n	80092a0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800912c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800912e:	461c      	mov	r4, r3
 8009130:	f04f 0500 	mov.w	r5, #0
 8009134:	4622      	mov	r2, r4
 8009136:	462b      	mov	r3, r5
 8009138:	1891      	adds	r1, r2, r2
 800913a:	6139      	str	r1, [r7, #16]
 800913c:	415b      	adcs	r3, r3
 800913e:	617b      	str	r3, [r7, #20]
 8009140:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009144:	1912      	adds	r2, r2, r4
 8009146:	eb45 0303 	adc.w	r3, r5, r3
 800914a:	f04f 0000 	mov.w	r0, #0
 800914e:	f04f 0100 	mov.w	r1, #0
 8009152:	00d9      	lsls	r1, r3, #3
 8009154:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009158:	00d0      	lsls	r0, r2, #3
 800915a:	4602      	mov	r2, r0
 800915c:	460b      	mov	r3, r1
 800915e:	eb12 0804 	adds.w	r8, r2, r4
 8009162:	eb43 0905 	adc.w	r9, r3, r5
 8009166:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009168:	685b      	ldr	r3, [r3, #4]
 800916a:	4618      	mov	r0, r3
 800916c:	f04f 0100 	mov.w	r1, #0
 8009170:	f04f 0200 	mov.w	r2, #0
 8009174:	f04f 0300 	mov.w	r3, #0
 8009178:	008b      	lsls	r3, r1, #2
 800917a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800917e:	0082      	lsls	r2, r0, #2
 8009180:	4640      	mov	r0, r8
 8009182:	4649      	mov	r1, r9
 8009184:	f7f7 fdf2 	bl	8000d6c <__aeabi_uldivmod>
 8009188:	4602      	mov	r2, r0
 800918a:	460b      	mov	r3, r1
 800918c:	4b49      	ldr	r3, [pc, #292]	; (80092b4 <UART_SetConfig+0x38c>)
 800918e:	fba3 2302 	umull	r2, r3, r3, r2
 8009192:	095b      	lsrs	r3, r3, #5
 8009194:	011e      	lsls	r6, r3, #4
 8009196:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009198:	4618      	mov	r0, r3
 800919a:	f04f 0100 	mov.w	r1, #0
 800919e:	4602      	mov	r2, r0
 80091a0:	460b      	mov	r3, r1
 80091a2:	1894      	adds	r4, r2, r2
 80091a4:	60bc      	str	r4, [r7, #8]
 80091a6:	415b      	adcs	r3, r3
 80091a8:	60fb      	str	r3, [r7, #12]
 80091aa:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80091ae:	1812      	adds	r2, r2, r0
 80091b0:	eb41 0303 	adc.w	r3, r1, r3
 80091b4:	f04f 0400 	mov.w	r4, #0
 80091b8:	f04f 0500 	mov.w	r5, #0
 80091bc:	00dd      	lsls	r5, r3, #3
 80091be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80091c2:	00d4      	lsls	r4, r2, #3
 80091c4:	4622      	mov	r2, r4
 80091c6:	462b      	mov	r3, r5
 80091c8:	1814      	adds	r4, r2, r0
 80091ca:	64bc      	str	r4, [r7, #72]	; 0x48
 80091cc:	414b      	adcs	r3, r1
 80091ce:	64fb      	str	r3, [r7, #76]	; 0x4c
 80091d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80091d2:	685b      	ldr	r3, [r3, #4]
 80091d4:	4618      	mov	r0, r3
 80091d6:	f04f 0100 	mov.w	r1, #0
 80091da:	f04f 0200 	mov.w	r2, #0
 80091de:	f04f 0300 	mov.w	r3, #0
 80091e2:	008b      	lsls	r3, r1, #2
 80091e4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80091e8:	0082      	lsls	r2, r0, #2
 80091ea:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80091ee:	f7f7 fdbd 	bl	8000d6c <__aeabi_uldivmod>
 80091f2:	4602      	mov	r2, r0
 80091f4:	460b      	mov	r3, r1
 80091f6:	4b2f      	ldr	r3, [pc, #188]	; (80092b4 <UART_SetConfig+0x38c>)
 80091f8:	fba3 1302 	umull	r1, r3, r3, r2
 80091fc:	095b      	lsrs	r3, r3, #5
 80091fe:	2164      	movs	r1, #100	; 0x64
 8009200:	fb01 f303 	mul.w	r3, r1, r3
 8009204:	1ad3      	subs	r3, r2, r3
 8009206:	011b      	lsls	r3, r3, #4
 8009208:	3332      	adds	r3, #50	; 0x32
 800920a:	4a2a      	ldr	r2, [pc, #168]	; (80092b4 <UART_SetConfig+0x38c>)
 800920c:	fba2 2303 	umull	r2, r3, r2, r3
 8009210:	095b      	lsrs	r3, r3, #5
 8009212:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009216:	441e      	add	r6, r3
 8009218:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800921a:	4618      	mov	r0, r3
 800921c:	f04f 0100 	mov.w	r1, #0
 8009220:	4602      	mov	r2, r0
 8009222:	460b      	mov	r3, r1
 8009224:	1894      	adds	r4, r2, r2
 8009226:	603c      	str	r4, [r7, #0]
 8009228:	415b      	adcs	r3, r3
 800922a:	607b      	str	r3, [r7, #4]
 800922c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8009230:	1812      	adds	r2, r2, r0
 8009232:	eb41 0303 	adc.w	r3, r1, r3
 8009236:	f04f 0400 	mov.w	r4, #0
 800923a:	f04f 0500 	mov.w	r5, #0
 800923e:	00dd      	lsls	r5, r3, #3
 8009240:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009244:	00d4      	lsls	r4, r2, #3
 8009246:	4622      	mov	r2, r4
 8009248:	462b      	mov	r3, r5
 800924a:	eb12 0a00 	adds.w	sl, r2, r0
 800924e:	eb43 0b01 	adc.w	fp, r3, r1
 8009252:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009254:	685b      	ldr	r3, [r3, #4]
 8009256:	4618      	mov	r0, r3
 8009258:	f04f 0100 	mov.w	r1, #0
 800925c:	f04f 0200 	mov.w	r2, #0
 8009260:	f04f 0300 	mov.w	r3, #0
 8009264:	008b      	lsls	r3, r1, #2
 8009266:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800926a:	0082      	lsls	r2, r0, #2
 800926c:	4650      	mov	r0, sl
 800926e:	4659      	mov	r1, fp
 8009270:	f7f7 fd7c 	bl	8000d6c <__aeabi_uldivmod>
 8009274:	4602      	mov	r2, r0
 8009276:	460b      	mov	r3, r1
 8009278:	4b0e      	ldr	r3, [pc, #56]	; (80092b4 <UART_SetConfig+0x38c>)
 800927a:	fba3 1302 	umull	r1, r3, r3, r2
 800927e:	095b      	lsrs	r3, r3, #5
 8009280:	2164      	movs	r1, #100	; 0x64
 8009282:	fb01 f303 	mul.w	r3, r1, r3
 8009286:	1ad3      	subs	r3, r2, r3
 8009288:	011b      	lsls	r3, r3, #4
 800928a:	3332      	adds	r3, #50	; 0x32
 800928c:	4a09      	ldr	r2, [pc, #36]	; (80092b4 <UART_SetConfig+0x38c>)
 800928e:	fba2 2303 	umull	r2, r3, r2, r3
 8009292:	095b      	lsrs	r3, r3, #5
 8009294:	f003 020f 	and.w	r2, r3, #15
 8009298:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800929a:	681b      	ldr	r3, [r3, #0]
 800929c:	4432      	add	r2, r6
 800929e:	609a      	str	r2, [r3, #8]
}
 80092a0:	bf00      	nop
 80092a2:	377c      	adds	r7, #124	; 0x7c
 80092a4:	46bd      	mov	sp, r7
 80092a6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80092aa:	bf00      	nop
 80092ac:	40011000 	.word	0x40011000
 80092b0:	40011400 	.word	0x40011400
 80092b4:	51eb851f 	.word	0x51eb851f

080092b8 <calloc>:
 80092b8:	4b02      	ldr	r3, [pc, #8]	; (80092c4 <calloc+0xc>)
 80092ba:	460a      	mov	r2, r1
 80092bc:	4601      	mov	r1, r0
 80092be:	6818      	ldr	r0, [r3, #0]
 80092c0:	f000 b842 	b.w	8009348 <_calloc_r>
 80092c4:	20000030 	.word	0x20000030

080092c8 <__errno>:
 80092c8:	4b01      	ldr	r3, [pc, #4]	; (80092d0 <__errno+0x8>)
 80092ca:	6818      	ldr	r0, [r3, #0]
 80092cc:	4770      	bx	lr
 80092ce:	bf00      	nop
 80092d0:	20000030 	.word	0x20000030

080092d4 <__libc_init_array>:
 80092d4:	b570      	push	{r4, r5, r6, lr}
 80092d6:	4d0d      	ldr	r5, [pc, #52]	; (800930c <__libc_init_array+0x38>)
 80092d8:	4c0d      	ldr	r4, [pc, #52]	; (8009310 <__libc_init_array+0x3c>)
 80092da:	1b64      	subs	r4, r4, r5
 80092dc:	10a4      	asrs	r4, r4, #2
 80092de:	2600      	movs	r6, #0
 80092e0:	42a6      	cmp	r6, r4
 80092e2:	d109      	bne.n	80092f8 <__libc_init_array+0x24>
 80092e4:	4d0b      	ldr	r5, [pc, #44]	; (8009314 <__libc_init_array+0x40>)
 80092e6:	4c0c      	ldr	r4, [pc, #48]	; (8009318 <__libc_init_array+0x44>)
 80092e8:	f001 f86c 	bl	800a3c4 <_init>
 80092ec:	1b64      	subs	r4, r4, r5
 80092ee:	10a4      	asrs	r4, r4, #2
 80092f0:	2600      	movs	r6, #0
 80092f2:	42a6      	cmp	r6, r4
 80092f4:	d105      	bne.n	8009302 <__libc_init_array+0x2e>
 80092f6:	bd70      	pop	{r4, r5, r6, pc}
 80092f8:	f855 3b04 	ldr.w	r3, [r5], #4
 80092fc:	4798      	blx	r3
 80092fe:	3601      	adds	r6, #1
 8009300:	e7ee      	b.n	80092e0 <__libc_init_array+0xc>
 8009302:	f855 3b04 	ldr.w	r3, [r5], #4
 8009306:	4798      	blx	r3
 8009308:	3601      	adds	r6, #1
 800930a:	e7f2      	b.n	80092f2 <__libc_init_array+0x1e>
 800930c:	0800a450 	.word	0x0800a450
 8009310:	0800a450 	.word	0x0800a450
 8009314:	0800a450 	.word	0x0800a450
 8009318:	0800a454 	.word	0x0800a454

0800931c <memcpy>:
 800931c:	440a      	add	r2, r1
 800931e:	4291      	cmp	r1, r2
 8009320:	f100 33ff 	add.w	r3, r0, #4294967295
 8009324:	d100      	bne.n	8009328 <memcpy+0xc>
 8009326:	4770      	bx	lr
 8009328:	b510      	push	{r4, lr}
 800932a:	f811 4b01 	ldrb.w	r4, [r1], #1
 800932e:	f803 4f01 	strb.w	r4, [r3, #1]!
 8009332:	4291      	cmp	r1, r2
 8009334:	d1f9      	bne.n	800932a <memcpy+0xe>
 8009336:	bd10      	pop	{r4, pc}

08009338 <memset>:
 8009338:	4402      	add	r2, r0
 800933a:	4603      	mov	r3, r0
 800933c:	4293      	cmp	r3, r2
 800933e:	d100      	bne.n	8009342 <memset+0xa>
 8009340:	4770      	bx	lr
 8009342:	f803 1b01 	strb.w	r1, [r3], #1
 8009346:	e7f9      	b.n	800933c <memset+0x4>

08009348 <_calloc_r>:
 8009348:	b513      	push	{r0, r1, r4, lr}
 800934a:	434a      	muls	r2, r1
 800934c:	4611      	mov	r1, r2
 800934e:	9201      	str	r2, [sp, #4]
 8009350:	f000 f80a 	bl	8009368 <_malloc_r>
 8009354:	4604      	mov	r4, r0
 8009356:	b118      	cbz	r0, 8009360 <_calloc_r+0x18>
 8009358:	9a01      	ldr	r2, [sp, #4]
 800935a:	2100      	movs	r1, #0
 800935c:	f7ff ffec 	bl	8009338 <memset>
 8009360:	4620      	mov	r0, r4
 8009362:	b002      	add	sp, #8
 8009364:	bd10      	pop	{r4, pc}
	...

08009368 <_malloc_r>:
 8009368:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800936a:	1ccd      	adds	r5, r1, #3
 800936c:	f025 0503 	bic.w	r5, r5, #3
 8009370:	3508      	adds	r5, #8
 8009372:	2d0c      	cmp	r5, #12
 8009374:	bf38      	it	cc
 8009376:	250c      	movcc	r5, #12
 8009378:	2d00      	cmp	r5, #0
 800937a:	4606      	mov	r6, r0
 800937c:	db01      	blt.n	8009382 <_malloc_r+0x1a>
 800937e:	42a9      	cmp	r1, r5
 8009380:	d903      	bls.n	800938a <_malloc_r+0x22>
 8009382:	230c      	movs	r3, #12
 8009384:	6033      	str	r3, [r6, #0]
 8009386:	2000      	movs	r0, #0
 8009388:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800938a:	f000 f857 	bl	800943c <__malloc_lock>
 800938e:	4921      	ldr	r1, [pc, #132]	; (8009414 <_malloc_r+0xac>)
 8009390:	680a      	ldr	r2, [r1, #0]
 8009392:	4614      	mov	r4, r2
 8009394:	b99c      	cbnz	r4, 80093be <_malloc_r+0x56>
 8009396:	4f20      	ldr	r7, [pc, #128]	; (8009418 <_malloc_r+0xb0>)
 8009398:	683b      	ldr	r3, [r7, #0]
 800939a:	b923      	cbnz	r3, 80093a6 <_malloc_r+0x3e>
 800939c:	4621      	mov	r1, r4
 800939e:	4630      	mov	r0, r6
 80093a0:	f000 f83c 	bl	800941c <_sbrk_r>
 80093a4:	6038      	str	r0, [r7, #0]
 80093a6:	4629      	mov	r1, r5
 80093a8:	4630      	mov	r0, r6
 80093aa:	f000 f837 	bl	800941c <_sbrk_r>
 80093ae:	1c43      	adds	r3, r0, #1
 80093b0:	d123      	bne.n	80093fa <_malloc_r+0x92>
 80093b2:	230c      	movs	r3, #12
 80093b4:	6033      	str	r3, [r6, #0]
 80093b6:	4630      	mov	r0, r6
 80093b8:	f000 f846 	bl	8009448 <__malloc_unlock>
 80093bc:	e7e3      	b.n	8009386 <_malloc_r+0x1e>
 80093be:	6823      	ldr	r3, [r4, #0]
 80093c0:	1b5b      	subs	r3, r3, r5
 80093c2:	d417      	bmi.n	80093f4 <_malloc_r+0x8c>
 80093c4:	2b0b      	cmp	r3, #11
 80093c6:	d903      	bls.n	80093d0 <_malloc_r+0x68>
 80093c8:	6023      	str	r3, [r4, #0]
 80093ca:	441c      	add	r4, r3
 80093cc:	6025      	str	r5, [r4, #0]
 80093ce:	e004      	b.n	80093da <_malloc_r+0x72>
 80093d0:	6863      	ldr	r3, [r4, #4]
 80093d2:	42a2      	cmp	r2, r4
 80093d4:	bf0c      	ite	eq
 80093d6:	600b      	streq	r3, [r1, #0]
 80093d8:	6053      	strne	r3, [r2, #4]
 80093da:	4630      	mov	r0, r6
 80093dc:	f000 f834 	bl	8009448 <__malloc_unlock>
 80093e0:	f104 000b 	add.w	r0, r4, #11
 80093e4:	1d23      	adds	r3, r4, #4
 80093e6:	f020 0007 	bic.w	r0, r0, #7
 80093ea:	1ac2      	subs	r2, r0, r3
 80093ec:	d0cc      	beq.n	8009388 <_malloc_r+0x20>
 80093ee:	1a1b      	subs	r3, r3, r0
 80093f0:	50a3      	str	r3, [r4, r2]
 80093f2:	e7c9      	b.n	8009388 <_malloc_r+0x20>
 80093f4:	4622      	mov	r2, r4
 80093f6:	6864      	ldr	r4, [r4, #4]
 80093f8:	e7cc      	b.n	8009394 <_malloc_r+0x2c>
 80093fa:	1cc4      	adds	r4, r0, #3
 80093fc:	f024 0403 	bic.w	r4, r4, #3
 8009400:	42a0      	cmp	r0, r4
 8009402:	d0e3      	beq.n	80093cc <_malloc_r+0x64>
 8009404:	1a21      	subs	r1, r4, r0
 8009406:	4630      	mov	r0, r6
 8009408:	f000 f808 	bl	800941c <_sbrk_r>
 800940c:	3001      	adds	r0, #1
 800940e:	d1dd      	bne.n	80093cc <_malloc_r+0x64>
 8009410:	e7cf      	b.n	80093b2 <_malloc_r+0x4a>
 8009412:	bf00      	nop
 8009414:	200003dc 	.word	0x200003dc
 8009418:	200003e0 	.word	0x200003e0

0800941c <_sbrk_r>:
 800941c:	b538      	push	{r3, r4, r5, lr}
 800941e:	4d06      	ldr	r5, [pc, #24]	; (8009438 <_sbrk_r+0x1c>)
 8009420:	2300      	movs	r3, #0
 8009422:	4604      	mov	r4, r0
 8009424:	4608      	mov	r0, r1
 8009426:	602b      	str	r3, [r5, #0]
 8009428:	f7fa fb98 	bl	8003b5c <_sbrk>
 800942c:	1c43      	adds	r3, r0, #1
 800942e:	d102      	bne.n	8009436 <_sbrk_r+0x1a>
 8009430:	682b      	ldr	r3, [r5, #0]
 8009432:	b103      	cbz	r3, 8009436 <_sbrk_r+0x1a>
 8009434:	6023      	str	r3, [r4, #0]
 8009436:	bd38      	pop	{r3, r4, r5, pc}
 8009438:	2000065c 	.word	0x2000065c

0800943c <__malloc_lock>:
 800943c:	4801      	ldr	r0, [pc, #4]	; (8009444 <__malloc_lock+0x8>)
 800943e:	f000 b809 	b.w	8009454 <__retarget_lock_acquire_recursive>
 8009442:	bf00      	nop
 8009444:	20000664 	.word	0x20000664

08009448 <__malloc_unlock>:
 8009448:	4801      	ldr	r0, [pc, #4]	; (8009450 <__malloc_unlock+0x8>)
 800944a:	f000 b804 	b.w	8009456 <__retarget_lock_release_recursive>
 800944e:	bf00      	nop
 8009450:	20000664 	.word	0x20000664

08009454 <__retarget_lock_acquire_recursive>:
 8009454:	4770      	bx	lr

08009456 <__retarget_lock_release_recursive>:
 8009456:	4770      	bx	lr

08009458 <pow>:
 8009458:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 800945c:	ec59 8b10 	vmov	r8, r9, d0
 8009460:	ec57 6b11 	vmov	r6, r7, d1
 8009464:	f000 f8a8 	bl	80095b8 <__ieee754_pow>
 8009468:	4b4e      	ldr	r3, [pc, #312]	; (80095a4 <pow+0x14c>)
 800946a:	f993 3000 	ldrsb.w	r3, [r3]
 800946e:	3301      	adds	r3, #1
 8009470:	ec55 4b10 	vmov	r4, r5, d0
 8009474:	d015      	beq.n	80094a2 <pow+0x4a>
 8009476:	4632      	mov	r2, r6
 8009478:	463b      	mov	r3, r7
 800947a:	4630      	mov	r0, r6
 800947c:	4639      	mov	r1, r7
 800947e:	f7f7 fb01 	bl	8000a84 <__aeabi_dcmpun>
 8009482:	b970      	cbnz	r0, 80094a2 <pow+0x4a>
 8009484:	4642      	mov	r2, r8
 8009486:	464b      	mov	r3, r9
 8009488:	4640      	mov	r0, r8
 800948a:	4649      	mov	r1, r9
 800948c:	f7f7 fafa 	bl	8000a84 <__aeabi_dcmpun>
 8009490:	2200      	movs	r2, #0
 8009492:	2300      	movs	r3, #0
 8009494:	b148      	cbz	r0, 80094aa <pow+0x52>
 8009496:	4630      	mov	r0, r6
 8009498:	4639      	mov	r1, r7
 800949a:	f7f7 fac1 	bl	8000a20 <__aeabi_dcmpeq>
 800949e:	2800      	cmp	r0, #0
 80094a0:	d17d      	bne.n	800959e <pow+0x146>
 80094a2:	ec45 4b10 	vmov	d0, r4, r5
 80094a6:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80094aa:	4640      	mov	r0, r8
 80094ac:	4649      	mov	r1, r9
 80094ae:	f7f7 fab7 	bl	8000a20 <__aeabi_dcmpeq>
 80094b2:	b1e0      	cbz	r0, 80094ee <pow+0x96>
 80094b4:	2200      	movs	r2, #0
 80094b6:	2300      	movs	r3, #0
 80094b8:	4630      	mov	r0, r6
 80094ba:	4639      	mov	r1, r7
 80094bc:	f7f7 fab0 	bl	8000a20 <__aeabi_dcmpeq>
 80094c0:	2800      	cmp	r0, #0
 80094c2:	d16c      	bne.n	800959e <pow+0x146>
 80094c4:	ec47 6b10 	vmov	d0, r6, r7
 80094c8:	f000 fe55 	bl	800a176 <finite>
 80094cc:	2800      	cmp	r0, #0
 80094ce:	d0e8      	beq.n	80094a2 <pow+0x4a>
 80094d0:	2200      	movs	r2, #0
 80094d2:	2300      	movs	r3, #0
 80094d4:	4630      	mov	r0, r6
 80094d6:	4639      	mov	r1, r7
 80094d8:	f7f7 faac 	bl	8000a34 <__aeabi_dcmplt>
 80094dc:	2800      	cmp	r0, #0
 80094de:	d0e0      	beq.n	80094a2 <pow+0x4a>
 80094e0:	f7ff fef2 	bl	80092c8 <__errno>
 80094e4:	2321      	movs	r3, #33	; 0x21
 80094e6:	6003      	str	r3, [r0, #0]
 80094e8:	2400      	movs	r4, #0
 80094ea:	4d2f      	ldr	r5, [pc, #188]	; (80095a8 <pow+0x150>)
 80094ec:	e7d9      	b.n	80094a2 <pow+0x4a>
 80094ee:	ec45 4b10 	vmov	d0, r4, r5
 80094f2:	f000 fe40 	bl	800a176 <finite>
 80094f6:	bbb8      	cbnz	r0, 8009568 <pow+0x110>
 80094f8:	ec49 8b10 	vmov	d0, r8, r9
 80094fc:	f000 fe3b 	bl	800a176 <finite>
 8009500:	b390      	cbz	r0, 8009568 <pow+0x110>
 8009502:	ec47 6b10 	vmov	d0, r6, r7
 8009506:	f000 fe36 	bl	800a176 <finite>
 800950a:	b368      	cbz	r0, 8009568 <pow+0x110>
 800950c:	4622      	mov	r2, r4
 800950e:	462b      	mov	r3, r5
 8009510:	4620      	mov	r0, r4
 8009512:	4629      	mov	r1, r5
 8009514:	f7f7 fab6 	bl	8000a84 <__aeabi_dcmpun>
 8009518:	b160      	cbz	r0, 8009534 <pow+0xdc>
 800951a:	f7ff fed5 	bl	80092c8 <__errno>
 800951e:	2321      	movs	r3, #33	; 0x21
 8009520:	6003      	str	r3, [r0, #0]
 8009522:	2200      	movs	r2, #0
 8009524:	2300      	movs	r3, #0
 8009526:	4610      	mov	r0, r2
 8009528:	4619      	mov	r1, r3
 800952a:	f7f7 f93b 	bl	80007a4 <__aeabi_ddiv>
 800952e:	4604      	mov	r4, r0
 8009530:	460d      	mov	r5, r1
 8009532:	e7b6      	b.n	80094a2 <pow+0x4a>
 8009534:	f7ff fec8 	bl	80092c8 <__errno>
 8009538:	2322      	movs	r3, #34	; 0x22
 800953a:	6003      	str	r3, [r0, #0]
 800953c:	2200      	movs	r2, #0
 800953e:	2300      	movs	r3, #0
 8009540:	4640      	mov	r0, r8
 8009542:	4649      	mov	r1, r9
 8009544:	f7f7 fa76 	bl	8000a34 <__aeabi_dcmplt>
 8009548:	2400      	movs	r4, #0
 800954a:	b158      	cbz	r0, 8009564 <pow+0x10c>
 800954c:	ec47 6b10 	vmov	d0, r6, r7
 8009550:	f000 fe26 	bl	800a1a0 <rint>
 8009554:	4632      	mov	r2, r6
 8009556:	ec51 0b10 	vmov	r0, r1, d0
 800955a:	463b      	mov	r3, r7
 800955c:	f7f7 fa60 	bl	8000a20 <__aeabi_dcmpeq>
 8009560:	2800      	cmp	r0, #0
 8009562:	d0c2      	beq.n	80094ea <pow+0x92>
 8009564:	4d11      	ldr	r5, [pc, #68]	; (80095ac <pow+0x154>)
 8009566:	e79c      	b.n	80094a2 <pow+0x4a>
 8009568:	2200      	movs	r2, #0
 800956a:	2300      	movs	r3, #0
 800956c:	4620      	mov	r0, r4
 800956e:	4629      	mov	r1, r5
 8009570:	f7f7 fa56 	bl	8000a20 <__aeabi_dcmpeq>
 8009574:	2800      	cmp	r0, #0
 8009576:	d094      	beq.n	80094a2 <pow+0x4a>
 8009578:	ec49 8b10 	vmov	d0, r8, r9
 800957c:	f000 fdfb 	bl	800a176 <finite>
 8009580:	2800      	cmp	r0, #0
 8009582:	d08e      	beq.n	80094a2 <pow+0x4a>
 8009584:	ec47 6b10 	vmov	d0, r6, r7
 8009588:	f000 fdf5 	bl	800a176 <finite>
 800958c:	2800      	cmp	r0, #0
 800958e:	d088      	beq.n	80094a2 <pow+0x4a>
 8009590:	f7ff fe9a 	bl	80092c8 <__errno>
 8009594:	2322      	movs	r3, #34	; 0x22
 8009596:	6003      	str	r3, [r0, #0]
 8009598:	2400      	movs	r4, #0
 800959a:	2500      	movs	r5, #0
 800959c:	e781      	b.n	80094a2 <pow+0x4a>
 800959e:	4d04      	ldr	r5, [pc, #16]	; (80095b0 <pow+0x158>)
 80095a0:	2400      	movs	r4, #0
 80095a2:	e77e      	b.n	80094a2 <pow+0x4a>
 80095a4:	20000094 	.word	0x20000094
 80095a8:	fff00000 	.word	0xfff00000
 80095ac:	7ff00000 	.word	0x7ff00000
 80095b0:	3ff00000 	.word	0x3ff00000
 80095b4:	00000000 	.word	0x00000000

080095b8 <__ieee754_pow>:
 80095b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095bc:	ed2d 8b06 	vpush	{d8-d10}
 80095c0:	b08d      	sub	sp, #52	; 0x34
 80095c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80095c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80095ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80095ce:	ea56 0100 	orrs.w	r1, r6, r0
 80095d2:	ec53 2b10 	vmov	r2, r3, d0
 80095d6:	f000 84d1 	beq.w	8009f7c <__ieee754_pow+0x9c4>
 80095da:	497f      	ldr	r1, [pc, #508]	; (80097d8 <__ieee754_pow+0x220>)
 80095dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80095e0:	428c      	cmp	r4, r1
 80095e2:	ee10 8a10 	vmov	r8, s0
 80095e6:	4699      	mov	r9, r3
 80095e8:	dc09      	bgt.n	80095fe <__ieee754_pow+0x46>
 80095ea:	d103      	bne.n	80095f4 <__ieee754_pow+0x3c>
 80095ec:	b97a      	cbnz	r2, 800960e <__ieee754_pow+0x56>
 80095ee:	42a6      	cmp	r6, r4
 80095f0:	dd02      	ble.n	80095f8 <__ieee754_pow+0x40>
 80095f2:	e00c      	b.n	800960e <__ieee754_pow+0x56>
 80095f4:	428e      	cmp	r6, r1
 80095f6:	dc02      	bgt.n	80095fe <__ieee754_pow+0x46>
 80095f8:	428e      	cmp	r6, r1
 80095fa:	d110      	bne.n	800961e <__ieee754_pow+0x66>
 80095fc:	b178      	cbz	r0, 800961e <__ieee754_pow+0x66>
 80095fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009602:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009606:	ea54 0308 	orrs.w	r3, r4, r8
 800960a:	f000 84b7 	beq.w	8009f7c <__ieee754_pow+0x9c4>
 800960e:	4873      	ldr	r0, [pc, #460]	; (80097dc <__ieee754_pow+0x224>)
 8009610:	b00d      	add	sp, #52	; 0x34
 8009612:	ecbd 8b06 	vpop	{d8-d10}
 8009616:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800961a:	f000 bdb9 	b.w	800a190 <nan>
 800961e:	f1b9 0f00 	cmp.w	r9, #0
 8009622:	da36      	bge.n	8009692 <__ieee754_pow+0xda>
 8009624:	496e      	ldr	r1, [pc, #440]	; (80097e0 <__ieee754_pow+0x228>)
 8009626:	428e      	cmp	r6, r1
 8009628:	dc51      	bgt.n	80096ce <__ieee754_pow+0x116>
 800962a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800962e:	428e      	cmp	r6, r1
 8009630:	f340 84af 	ble.w	8009f92 <__ieee754_pow+0x9da>
 8009634:	1531      	asrs	r1, r6, #20
 8009636:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800963a:	2914      	cmp	r1, #20
 800963c:	dd0f      	ble.n	800965e <__ieee754_pow+0xa6>
 800963e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8009642:	fa20 fc01 	lsr.w	ip, r0, r1
 8009646:	fa0c f101 	lsl.w	r1, ip, r1
 800964a:	4281      	cmp	r1, r0
 800964c:	f040 84a1 	bne.w	8009f92 <__ieee754_pow+0x9da>
 8009650:	f00c 0c01 	and.w	ip, ip, #1
 8009654:	f1cc 0102 	rsb	r1, ip, #2
 8009658:	9100      	str	r1, [sp, #0]
 800965a:	b180      	cbz	r0, 800967e <__ieee754_pow+0xc6>
 800965c:	e059      	b.n	8009712 <__ieee754_pow+0x15a>
 800965e:	2800      	cmp	r0, #0
 8009660:	d155      	bne.n	800970e <__ieee754_pow+0x156>
 8009662:	f1c1 0114 	rsb	r1, r1, #20
 8009666:	fa46 fc01 	asr.w	ip, r6, r1
 800966a:	fa0c f101 	lsl.w	r1, ip, r1
 800966e:	42b1      	cmp	r1, r6
 8009670:	f040 848c 	bne.w	8009f8c <__ieee754_pow+0x9d4>
 8009674:	f00c 0c01 	and.w	ip, ip, #1
 8009678:	f1cc 0102 	rsb	r1, ip, #2
 800967c:	9100      	str	r1, [sp, #0]
 800967e:	4959      	ldr	r1, [pc, #356]	; (80097e4 <__ieee754_pow+0x22c>)
 8009680:	428e      	cmp	r6, r1
 8009682:	d12d      	bne.n	80096e0 <__ieee754_pow+0x128>
 8009684:	2f00      	cmp	r7, #0
 8009686:	da79      	bge.n	800977c <__ieee754_pow+0x1c4>
 8009688:	4956      	ldr	r1, [pc, #344]	; (80097e4 <__ieee754_pow+0x22c>)
 800968a:	2000      	movs	r0, #0
 800968c:	f7f7 f88a 	bl	80007a4 <__aeabi_ddiv>
 8009690:	e016      	b.n	80096c0 <__ieee754_pow+0x108>
 8009692:	2100      	movs	r1, #0
 8009694:	9100      	str	r1, [sp, #0]
 8009696:	2800      	cmp	r0, #0
 8009698:	d13b      	bne.n	8009712 <__ieee754_pow+0x15a>
 800969a:	494f      	ldr	r1, [pc, #316]	; (80097d8 <__ieee754_pow+0x220>)
 800969c:	428e      	cmp	r6, r1
 800969e:	d1ee      	bne.n	800967e <__ieee754_pow+0xc6>
 80096a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80096a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80096a8:	ea53 0308 	orrs.w	r3, r3, r8
 80096ac:	f000 8466 	beq.w	8009f7c <__ieee754_pow+0x9c4>
 80096b0:	4b4d      	ldr	r3, [pc, #308]	; (80097e8 <__ieee754_pow+0x230>)
 80096b2:	429c      	cmp	r4, r3
 80096b4:	dd0d      	ble.n	80096d2 <__ieee754_pow+0x11a>
 80096b6:	2f00      	cmp	r7, #0
 80096b8:	f280 8464 	bge.w	8009f84 <__ieee754_pow+0x9cc>
 80096bc:	2000      	movs	r0, #0
 80096be:	2100      	movs	r1, #0
 80096c0:	ec41 0b10 	vmov	d0, r0, r1
 80096c4:	b00d      	add	sp, #52	; 0x34
 80096c6:	ecbd 8b06 	vpop	{d8-d10}
 80096ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80096ce:	2102      	movs	r1, #2
 80096d0:	e7e0      	b.n	8009694 <__ieee754_pow+0xdc>
 80096d2:	2f00      	cmp	r7, #0
 80096d4:	daf2      	bge.n	80096bc <__ieee754_pow+0x104>
 80096d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80096da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80096de:	e7ef      	b.n	80096c0 <__ieee754_pow+0x108>
 80096e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80096e4:	d104      	bne.n	80096f0 <__ieee754_pow+0x138>
 80096e6:	4610      	mov	r0, r2
 80096e8:	4619      	mov	r1, r3
 80096ea:	f7f6 ff31 	bl	8000550 <__aeabi_dmul>
 80096ee:	e7e7      	b.n	80096c0 <__ieee754_pow+0x108>
 80096f0:	493e      	ldr	r1, [pc, #248]	; (80097ec <__ieee754_pow+0x234>)
 80096f2:	428f      	cmp	r7, r1
 80096f4:	d10d      	bne.n	8009712 <__ieee754_pow+0x15a>
 80096f6:	f1b9 0f00 	cmp.w	r9, #0
 80096fa:	db0a      	blt.n	8009712 <__ieee754_pow+0x15a>
 80096fc:	ec43 2b10 	vmov	d0, r2, r3
 8009700:	b00d      	add	sp, #52	; 0x34
 8009702:	ecbd 8b06 	vpop	{d8-d10}
 8009706:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800970a:	f000 bc77 	b.w	8009ffc <__ieee754_sqrt>
 800970e:	2100      	movs	r1, #0
 8009710:	9100      	str	r1, [sp, #0]
 8009712:	ec43 2b10 	vmov	d0, r2, r3
 8009716:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800971a:	f000 fd23 	bl	800a164 <fabs>
 800971e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8009722:	ec51 0b10 	vmov	r0, r1, d0
 8009726:	f1b8 0f00 	cmp.w	r8, #0
 800972a:	d12a      	bne.n	8009782 <__ieee754_pow+0x1ca>
 800972c:	b12c      	cbz	r4, 800973a <__ieee754_pow+0x182>
 800972e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80097e4 <__ieee754_pow+0x22c>
 8009732:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8009736:	45e6      	cmp	lr, ip
 8009738:	d123      	bne.n	8009782 <__ieee754_pow+0x1ca>
 800973a:	2f00      	cmp	r7, #0
 800973c:	da05      	bge.n	800974a <__ieee754_pow+0x192>
 800973e:	4602      	mov	r2, r0
 8009740:	460b      	mov	r3, r1
 8009742:	2000      	movs	r0, #0
 8009744:	4927      	ldr	r1, [pc, #156]	; (80097e4 <__ieee754_pow+0x22c>)
 8009746:	f7f7 f82d 	bl	80007a4 <__aeabi_ddiv>
 800974a:	f1b9 0f00 	cmp.w	r9, #0
 800974e:	dab7      	bge.n	80096c0 <__ieee754_pow+0x108>
 8009750:	9b00      	ldr	r3, [sp, #0]
 8009752:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8009756:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800975a:	4323      	orrs	r3, r4
 800975c:	d108      	bne.n	8009770 <__ieee754_pow+0x1b8>
 800975e:	4602      	mov	r2, r0
 8009760:	460b      	mov	r3, r1
 8009762:	4610      	mov	r0, r2
 8009764:	4619      	mov	r1, r3
 8009766:	f7f6 fd3b 	bl	80001e0 <__aeabi_dsub>
 800976a:	4602      	mov	r2, r0
 800976c:	460b      	mov	r3, r1
 800976e:	e78d      	b.n	800968c <__ieee754_pow+0xd4>
 8009770:	9b00      	ldr	r3, [sp, #0]
 8009772:	2b01      	cmp	r3, #1
 8009774:	d1a4      	bne.n	80096c0 <__ieee754_pow+0x108>
 8009776:	4602      	mov	r2, r0
 8009778:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800977c:	4610      	mov	r0, r2
 800977e:	4619      	mov	r1, r3
 8009780:	e79e      	b.n	80096c0 <__ieee754_pow+0x108>
 8009782:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8009786:	f10c 35ff 	add.w	r5, ip, #4294967295
 800978a:	950a      	str	r5, [sp, #40]	; 0x28
 800978c:	9d00      	ldr	r5, [sp, #0]
 800978e:	46ac      	mov	ip, r5
 8009790:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8009792:	ea5c 0505 	orrs.w	r5, ip, r5
 8009796:	d0e4      	beq.n	8009762 <__ieee754_pow+0x1aa>
 8009798:	4b15      	ldr	r3, [pc, #84]	; (80097f0 <__ieee754_pow+0x238>)
 800979a:	429e      	cmp	r6, r3
 800979c:	f340 80fc 	ble.w	8009998 <__ieee754_pow+0x3e0>
 80097a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80097a4:	429e      	cmp	r6, r3
 80097a6:	4b10      	ldr	r3, [pc, #64]	; (80097e8 <__ieee754_pow+0x230>)
 80097a8:	dd07      	ble.n	80097ba <__ieee754_pow+0x202>
 80097aa:	429c      	cmp	r4, r3
 80097ac:	dc0a      	bgt.n	80097c4 <__ieee754_pow+0x20c>
 80097ae:	2f00      	cmp	r7, #0
 80097b0:	da84      	bge.n	80096bc <__ieee754_pow+0x104>
 80097b2:	a307      	add	r3, pc, #28	; (adr r3, 80097d0 <__ieee754_pow+0x218>)
 80097b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80097b8:	e795      	b.n	80096e6 <__ieee754_pow+0x12e>
 80097ba:	429c      	cmp	r4, r3
 80097bc:	dbf7      	blt.n	80097ae <__ieee754_pow+0x1f6>
 80097be:	4b09      	ldr	r3, [pc, #36]	; (80097e4 <__ieee754_pow+0x22c>)
 80097c0:	429c      	cmp	r4, r3
 80097c2:	dd17      	ble.n	80097f4 <__ieee754_pow+0x23c>
 80097c4:	2f00      	cmp	r7, #0
 80097c6:	dcf4      	bgt.n	80097b2 <__ieee754_pow+0x1fa>
 80097c8:	e778      	b.n	80096bc <__ieee754_pow+0x104>
 80097ca:	bf00      	nop
 80097cc:	f3af 8000 	nop.w
 80097d0:	8800759c 	.word	0x8800759c
 80097d4:	7e37e43c 	.word	0x7e37e43c
 80097d8:	7ff00000 	.word	0x7ff00000
 80097dc:	0800a400 	.word	0x0800a400
 80097e0:	433fffff 	.word	0x433fffff
 80097e4:	3ff00000 	.word	0x3ff00000
 80097e8:	3fefffff 	.word	0x3fefffff
 80097ec:	3fe00000 	.word	0x3fe00000
 80097f0:	41e00000 	.word	0x41e00000
 80097f4:	4b64      	ldr	r3, [pc, #400]	; (8009988 <__ieee754_pow+0x3d0>)
 80097f6:	2200      	movs	r2, #0
 80097f8:	f7f6 fcf2 	bl	80001e0 <__aeabi_dsub>
 80097fc:	a356      	add	r3, pc, #344	; (adr r3, 8009958 <__ieee754_pow+0x3a0>)
 80097fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009802:	4604      	mov	r4, r0
 8009804:	460d      	mov	r5, r1
 8009806:	f7f6 fea3 	bl	8000550 <__aeabi_dmul>
 800980a:	a355      	add	r3, pc, #340	; (adr r3, 8009960 <__ieee754_pow+0x3a8>)
 800980c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009810:	4606      	mov	r6, r0
 8009812:	460f      	mov	r7, r1
 8009814:	4620      	mov	r0, r4
 8009816:	4629      	mov	r1, r5
 8009818:	f7f6 fe9a 	bl	8000550 <__aeabi_dmul>
 800981c:	4b5b      	ldr	r3, [pc, #364]	; (800998c <__ieee754_pow+0x3d4>)
 800981e:	4682      	mov	sl, r0
 8009820:	468b      	mov	fp, r1
 8009822:	2200      	movs	r2, #0
 8009824:	4620      	mov	r0, r4
 8009826:	4629      	mov	r1, r5
 8009828:	f7f6 fe92 	bl	8000550 <__aeabi_dmul>
 800982c:	4602      	mov	r2, r0
 800982e:	460b      	mov	r3, r1
 8009830:	a14d      	add	r1, pc, #308	; (adr r1, 8009968 <__ieee754_pow+0x3b0>)
 8009832:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009836:	f7f6 fcd3 	bl	80001e0 <__aeabi_dsub>
 800983a:	4622      	mov	r2, r4
 800983c:	462b      	mov	r3, r5
 800983e:	f7f6 fe87 	bl	8000550 <__aeabi_dmul>
 8009842:	4602      	mov	r2, r0
 8009844:	460b      	mov	r3, r1
 8009846:	2000      	movs	r0, #0
 8009848:	4951      	ldr	r1, [pc, #324]	; (8009990 <__ieee754_pow+0x3d8>)
 800984a:	f7f6 fcc9 	bl	80001e0 <__aeabi_dsub>
 800984e:	4622      	mov	r2, r4
 8009850:	4680      	mov	r8, r0
 8009852:	4689      	mov	r9, r1
 8009854:	462b      	mov	r3, r5
 8009856:	4620      	mov	r0, r4
 8009858:	4629      	mov	r1, r5
 800985a:	f7f6 fe79 	bl	8000550 <__aeabi_dmul>
 800985e:	4602      	mov	r2, r0
 8009860:	460b      	mov	r3, r1
 8009862:	4640      	mov	r0, r8
 8009864:	4649      	mov	r1, r9
 8009866:	f7f6 fe73 	bl	8000550 <__aeabi_dmul>
 800986a:	a341      	add	r3, pc, #260	; (adr r3, 8009970 <__ieee754_pow+0x3b8>)
 800986c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009870:	f7f6 fe6e 	bl	8000550 <__aeabi_dmul>
 8009874:	4602      	mov	r2, r0
 8009876:	460b      	mov	r3, r1
 8009878:	4650      	mov	r0, sl
 800987a:	4659      	mov	r1, fp
 800987c:	f7f6 fcb0 	bl	80001e0 <__aeabi_dsub>
 8009880:	4602      	mov	r2, r0
 8009882:	460b      	mov	r3, r1
 8009884:	4680      	mov	r8, r0
 8009886:	4689      	mov	r9, r1
 8009888:	4630      	mov	r0, r6
 800988a:	4639      	mov	r1, r7
 800988c:	f7f6 fcaa 	bl	80001e4 <__adddf3>
 8009890:	2400      	movs	r4, #0
 8009892:	4632      	mov	r2, r6
 8009894:	463b      	mov	r3, r7
 8009896:	4620      	mov	r0, r4
 8009898:	460d      	mov	r5, r1
 800989a:	f7f6 fca1 	bl	80001e0 <__aeabi_dsub>
 800989e:	4602      	mov	r2, r0
 80098a0:	460b      	mov	r3, r1
 80098a2:	4640      	mov	r0, r8
 80098a4:	4649      	mov	r1, r9
 80098a6:	f7f6 fc9b 	bl	80001e0 <__aeabi_dsub>
 80098aa:	9b00      	ldr	r3, [sp, #0]
 80098ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80098ae:	3b01      	subs	r3, #1
 80098b0:	4313      	orrs	r3, r2
 80098b2:	4682      	mov	sl, r0
 80098b4:	468b      	mov	fp, r1
 80098b6:	f040 81f1 	bne.w	8009c9c <__ieee754_pow+0x6e4>
 80098ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009978 <__ieee754_pow+0x3c0>
 80098be:	eeb0 8a47 	vmov.f32	s16, s14
 80098c2:	eef0 8a67 	vmov.f32	s17, s15
 80098c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80098ca:	2600      	movs	r6, #0
 80098cc:	4632      	mov	r2, r6
 80098ce:	463b      	mov	r3, r7
 80098d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80098d4:	f7f6 fc84 	bl	80001e0 <__aeabi_dsub>
 80098d8:	4622      	mov	r2, r4
 80098da:	462b      	mov	r3, r5
 80098dc:	f7f6 fe38 	bl	8000550 <__aeabi_dmul>
 80098e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80098e4:	4680      	mov	r8, r0
 80098e6:	4689      	mov	r9, r1
 80098e8:	4650      	mov	r0, sl
 80098ea:	4659      	mov	r1, fp
 80098ec:	f7f6 fe30 	bl	8000550 <__aeabi_dmul>
 80098f0:	4602      	mov	r2, r0
 80098f2:	460b      	mov	r3, r1
 80098f4:	4640      	mov	r0, r8
 80098f6:	4649      	mov	r1, r9
 80098f8:	f7f6 fc74 	bl	80001e4 <__adddf3>
 80098fc:	4632      	mov	r2, r6
 80098fe:	463b      	mov	r3, r7
 8009900:	4680      	mov	r8, r0
 8009902:	4689      	mov	r9, r1
 8009904:	4620      	mov	r0, r4
 8009906:	4629      	mov	r1, r5
 8009908:	f7f6 fe22 	bl	8000550 <__aeabi_dmul>
 800990c:	460b      	mov	r3, r1
 800990e:	4604      	mov	r4, r0
 8009910:	460d      	mov	r5, r1
 8009912:	4602      	mov	r2, r0
 8009914:	4649      	mov	r1, r9
 8009916:	4640      	mov	r0, r8
 8009918:	f7f6 fc64 	bl	80001e4 <__adddf3>
 800991c:	4b1d      	ldr	r3, [pc, #116]	; (8009994 <__ieee754_pow+0x3dc>)
 800991e:	4299      	cmp	r1, r3
 8009920:	ec45 4b19 	vmov	d9, r4, r5
 8009924:	4606      	mov	r6, r0
 8009926:	460f      	mov	r7, r1
 8009928:	468b      	mov	fp, r1
 800992a:	f340 82fe 	ble.w	8009f2a <__ieee754_pow+0x972>
 800992e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8009932:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8009936:	4303      	orrs	r3, r0
 8009938:	f000 81f0 	beq.w	8009d1c <__ieee754_pow+0x764>
 800993c:	a310      	add	r3, pc, #64	; (adr r3, 8009980 <__ieee754_pow+0x3c8>)
 800993e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009942:	ec51 0b18 	vmov	r0, r1, d8
 8009946:	f7f6 fe03 	bl	8000550 <__aeabi_dmul>
 800994a:	a30d      	add	r3, pc, #52	; (adr r3, 8009980 <__ieee754_pow+0x3c8>)
 800994c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009950:	e6cb      	b.n	80096ea <__ieee754_pow+0x132>
 8009952:	bf00      	nop
 8009954:	f3af 8000 	nop.w
 8009958:	60000000 	.word	0x60000000
 800995c:	3ff71547 	.word	0x3ff71547
 8009960:	f85ddf44 	.word	0xf85ddf44
 8009964:	3e54ae0b 	.word	0x3e54ae0b
 8009968:	55555555 	.word	0x55555555
 800996c:	3fd55555 	.word	0x3fd55555
 8009970:	652b82fe 	.word	0x652b82fe
 8009974:	3ff71547 	.word	0x3ff71547
 8009978:	00000000 	.word	0x00000000
 800997c:	bff00000 	.word	0xbff00000
 8009980:	8800759c 	.word	0x8800759c
 8009984:	7e37e43c 	.word	0x7e37e43c
 8009988:	3ff00000 	.word	0x3ff00000
 800998c:	3fd00000 	.word	0x3fd00000
 8009990:	3fe00000 	.word	0x3fe00000
 8009994:	408fffff 	.word	0x408fffff
 8009998:	4bd7      	ldr	r3, [pc, #860]	; (8009cf8 <__ieee754_pow+0x740>)
 800999a:	ea03 0309 	and.w	r3, r3, r9
 800999e:	2200      	movs	r2, #0
 80099a0:	b92b      	cbnz	r3, 80099ae <__ieee754_pow+0x3f6>
 80099a2:	4bd6      	ldr	r3, [pc, #856]	; (8009cfc <__ieee754_pow+0x744>)
 80099a4:	f7f6 fdd4 	bl	8000550 <__aeabi_dmul>
 80099a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80099ac:	460c      	mov	r4, r1
 80099ae:	1523      	asrs	r3, r4, #20
 80099b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80099b4:	4413      	add	r3, r2
 80099b6:	9309      	str	r3, [sp, #36]	; 0x24
 80099b8:	4bd1      	ldr	r3, [pc, #836]	; (8009d00 <__ieee754_pow+0x748>)
 80099ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80099be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80099c2:	429c      	cmp	r4, r3
 80099c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80099c8:	dd08      	ble.n	80099dc <__ieee754_pow+0x424>
 80099ca:	4bce      	ldr	r3, [pc, #824]	; (8009d04 <__ieee754_pow+0x74c>)
 80099cc:	429c      	cmp	r4, r3
 80099ce:	f340 8163 	ble.w	8009c98 <__ieee754_pow+0x6e0>
 80099d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80099d4:	3301      	adds	r3, #1
 80099d6:	9309      	str	r3, [sp, #36]	; 0x24
 80099d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80099dc:	2400      	movs	r4, #0
 80099de:	00e3      	lsls	r3, r4, #3
 80099e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80099e2:	4bc9      	ldr	r3, [pc, #804]	; (8009d08 <__ieee754_pow+0x750>)
 80099e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80099e8:	ed93 7b00 	vldr	d7, [r3]
 80099ec:	4629      	mov	r1, r5
 80099ee:	ec53 2b17 	vmov	r2, r3, d7
 80099f2:	eeb0 8a47 	vmov.f32	s16, s14
 80099f6:	eef0 8a67 	vmov.f32	s17, s15
 80099fa:	4682      	mov	sl, r0
 80099fc:	f7f6 fbf0 	bl	80001e0 <__aeabi_dsub>
 8009a00:	4652      	mov	r2, sl
 8009a02:	4606      	mov	r6, r0
 8009a04:	460f      	mov	r7, r1
 8009a06:	462b      	mov	r3, r5
 8009a08:	ec51 0b18 	vmov	r0, r1, d8
 8009a0c:	f7f6 fbea 	bl	80001e4 <__adddf3>
 8009a10:	4602      	mov	r2, r0
 8009a12:	460b      	mov	r3, r1
 8009a14:	2000      	movs	r0, #0
 8009a16:	49bd      	ldr	r1, [pc, #756]	; (8009d0c <__ieee754_pow+0x754>)
 8009a18:	f7f6 fec4 	bl	80007a4 <__aeabi_ddiv>
 8009a1c:	ec41 0b19 	vmov	d9, r0, r1
 8009a20:	4602      	mov	r2, r0
 8009a22:	460b      	mov	r3, r1
 8009a24:	4630      	mov	r0, r6
 8009a26:	4639      	mov	r1, r7
 8009a28:	f7f6 fd92 	bl	8000550 <__aeabi_dmul>
 8009a2c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009a30:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a34:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009a38:	2300      	movs	r3, #0
 8009a3a:	9304      	str	r3, [sp, #16]
 8009a3c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009a40:	46ab      	mov	fp, r5
 8009a42:	106d      	asrs	r5, r5, #1
 8009a44:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009a48:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009a4c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009a50:	2200      	movs	r2, #0
 8009a52:	4640      	mov	r0, r8
 8009a54:	4649      	mov	r1, r9
 8009a56:	4614      	mov	r4, r2
 8009a58:	461d      	mov	r5, r3
 8009a5a:	f7f6 fd79 	bl	8000550 <__aeabi_dmul>
 8009a5e:	4602      	mov	r2, r0
 8009a60:	460b      	mov	r3, r1
 8009a62:	4630      	mov	r0, r6
 8009a64:	4639      	mov	r1, r7
 8009a66:	f7f6 fbbb 	bl	80001e0 <__aeabi_dsub>
 8009a6a:	ec53 2b18 	vmov	r2, r3, d8
 8009a6e:	4606      	mov	r6, r0
 8009a70:	460f      	mov	r7, r1
 8009a72:	4620      	mov	r0, r4
 8009a74:	4629      	mov	r1, r5
 8009a76:	f7f6 fbb3 	bl	80001e0 <__aeabi_dsub>
 8009a7a:	4602      	mov	r2, r0
 8009a7c:	460b      	mov	r3, r1
 8009a7e:	4650      	mov	r0, sl
 8009a80:	4659      	mov	r1, fp
 8009a82:	f7f6 fbad 	bl	80001e0 <__aeabi_dsub>
 8009a86:	4642      	mov	r2, r8
 8009a88:	464b      	mov	r3, r9
 8009a8a:	f7f6 fd61 	bl	8000550 <__aeabi_dmul>
 8009a8e:	4602      	mov	r2, r0
 8009a90:	460b      	mov	r3, r1
 8009a92:	4630      	mov	r0, r6
 8009a94:	4639      	mov	r1, r7
 8009a96:	f7f6 fba3 	bl	80001e0 <__aeabi_dsub>
 8009a9a:	ec53 2b19 	vmov	r2, r3, d9
 8009a9e:	f7f6 fd57 	bl	8000550 <__aeabi_dmul>
 8009aa2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009aa6:	ec41 0b18 	vmov	d8, r0, r1
 8009aaa:	4610      	mov	r0, r2
 8009aac:	4619      	mov	r1, r3
 8009aae:	f7f6 fd4f 	bl	8000550 <__aeabi_dmul>
 8009ab2:	a37d      	add	r3, pc, #500	; (adr r3, 8009ca8 <__ieee754_pow+0x6f0>)
 8009ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ab8:	4604      	mov	r4, r0
 8009aba:	460d      	mov	r5, r1
 8009abc:	f7f6 fd48 	bl	8000550 <__aeabi_dmul>
 8009ac0:	a37b      	add	r3, pc, #492	; (adr r3, 8009cb0 <__ieee754_pow+0x6f8>)
 8009ac2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ac6:	f7f6 fb8d 	bl	80001e4 <__adddf3>
 8009aca:	4622      	mov	r2, r4
 8009acc:	462b      	mov	r3, r5
 8009ace:	f7f6 fd3f 	bl	8000550 <__aeabi_dmul>
 8009ad2:	a379      	add	r3, pc, #484	; (adr r3, 8009cb8 <__ieee754_pow+0x700>)
 8009ad4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad8:	f7f6 fb84 	bl	80001e4 <__adddf3>
 8009adc:	4622      	mov	r2, r4
 8009ade:	462b      	mov	r3, r5
 8009ae0:	f7f6 fd36 	bl	8000550 <__aeabi_dmul>
 8009ae4:	a376      	add	r3, pc, #472	; (adr r3, 8009cc0 <__ieee754_pow+0x708>)
 8009ae6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aea:	f7f6 fb7b 	bl	80001e4 <__adddf3>
 8009aee:	4622      	mov	r2, r4
 8009af0:	462b      	mov	r3, r5
 8009af2:	f7f6 fd2d 	bl	8000550 <__aeabi_dmul>
 8009af6:	a374      	add	r3, pc, #464	; (adr r3, 8009cc8 <__ieee754_pow+0x710>)
 8009af8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009afc:	f7f6 fb72 	bl	80001e4 <__adddf3>
 8009b00:	4622      	mov	r2, r4
 8009b02:	462b      	mov	r3, r5
 8009b04:	f7f6 fd24 	bl	8000550 <__aeabi_dmul>
 8009b08:	a371      	add	r3, pc, #452	; (adr r3, 8009cd0 <__ieee754_pow+0x718>)
 8009b0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b0e:	f7f6 fb69 	bl	80001e4 <__adddf3>
 8009b12:	4622      	mov	r2, r4
 8009b14:	4606      	mov	r6, r0
 8009b16:	460f      	mov	r7, r1
 8009b18:	462b      	mov	r3, r5
 8009b1a:	4620      	mov	r0, r4
 8009b1c:	4629      	mov	r1, r5
 8009b1e:	f7f6 fd17 	bl	8000550 <__aeabi_dmul>
 8009b22:	4602      	mov	r2, r0
 8009b24:	460b      	mov	r3, r1
 8009b26:	4630      	mov	r0, r6
 8009b28:	4639      	mov	r1, r7
 8009b2a:	f7f6 fd11 	bl	8000550 <__aeabi_dmul>
 8009b2e:	4642      	mov	r2, r8
 8009b30:	4604      	mov	r4, r0
 8009b32:	460d      	mov	r5, r1
 8009b34:	464b      	mov	r3, r9
 8009b36:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009b3a:	f7f6 fb53 	bl	80001e4 <__adddf3>
 8009b3e:	ec53 2b18 	vmov	r2, r3, d8
 8009b42:	f7f6 fd05 	bl	8000550 <__aeabi_dmul>
 8009b46:	4622      	mov	r2, r4
 8009b48:	462b      	mov	r3, r5
 8009b4a:	f7f6 fb4b 	bl	80001e4 <__adddf3>
 8009b4e:	4642      	mov	r2, r8
 8009b50:	4682      	mov	sl, r0
 8009b52:	468b      	mov	fp, r1
 8009b54:	464b      	mov	r3, r9
 8009b56:	4640      	mov	r0, r8
 8009b58:	4649      	mov	r1, r9
 8009b5a:	f7f6 fcf9 	bl	8000550 <__aeabi_dmul>
 8009b5e:	4b6c      	ldr	r3, [pc, #432]	; (8009d10 <__ieee754_pow+0x758>)
 8009b60:	2200      	movs	r2, #0
 8009b62:	4606      	mov	r6, r0
 8009b64:	460f      	mov	r7, r1
 8009b66:	f7f6 fb3d 	bl	80001e4 <__adddf3>
 8009b6a:	4652      	mov	r2, sl
 8009b6c:	465b      	mov	r3, fp
 8009b6e:	f7f6 fb39 	bl	80001e4 <__adddf3>
 8009b72:	9c04      	ldr	r4, [sp, #16]
 8009b74:	460d      	mov	r5, r1
 8009b76:	4622      	mov	r2, r4
 8009b78:	460b      	mov	r3, r1
 8009b7a:	4640      	mov	r0, r8
 8009b7c:	4649      	mov	r1, r9
 8009b7e:	f7f6 fce7 	bl	8000550 <__aeabi_dmul>
 8009b82:	4b63      	ldr	r3, [pc, #396]	; (8009d10 <__ieee754_pow+0x758>)
 8009b84:	4680      	mov	r8, r0
 8009b86:	4689      	mov	r9, r1
 8009b88:	2200      	movs	r2, #0
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	f7f6 fb27 	bl	80001e0 <__aeabi_dsub>
 8009b92:	4632      	mov	r2, r6
 8009b94:	463b      	mov	r3, r7
 8009b96:	f7f6 fb23 	bl	80001e0 <__aeabi_dsub>
 8009b9a:	4602      	mov	r2, r0
 8009b9c:	460b      	mov	r3, r1
 8009b9e:	4650      	mov	r0, sl
 8009ba0:	4659      	mov	r1, fp
 8009ba2:	f7f6 fb1d 	bl	80001e0 <__aeabi_dsub>
 8009ba6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009baa:	f7f6 fcd1 	bl	8000550 <__aeabi_dmul>
 8009bae:	4622      	mov	r2, r4
 8009bb0:	4606      	mov	r6, r0
 8009bb2:	460f      	mov	r7, r1
 8009bb4:	462b      	mov	r3, r5
 8009bb6:	ec51 0b18 	vmov	r0, r1, d8
 8009bba:	f7f6 fcc9 	bl	8000550 <__aeabi_dmul>
 8009bbe:	4602      	mov	r2, r0
 8009bc0:	460b      	mov	r3, r1
 8009bc2:	4630      	mov	r0, r6
 8009bc4:	4639      	mov	r1, r7
 8009bc6:	f7f6 fb0d 	bl	80001e4 <__adddf3>
 8009bca:	4606      	mov	r6, r0
 8009bcc:	460f      	mov	r7, r1
 8009bce:	4602      	mov	r2, r0
 8009bd0:	460b      	mov	r3, r1
 8009bd2:	4640      	mov	r0, r8
 8009bd4:	4649      	mov	r1, r9
 8009bd6:	f7f6 fb05 	bl	80001e4 <__adddf3>
 8009bda:	9c04      	ldr	r4, [sp, #16]
 8009bdc:	a33e      	add	r3, pc, #248	; (adr r3, 8009cd8 <__ieee754_pow+0x720>)
 8009bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be2:	4620      	mov	r0, r4
 8009be4:	460d      	mov	r5, r1
 8009be6:	f7f6 fcb3 	bl	8000550 <__aeabi_dmul>
 8009bea:	4642      	mov	r2, r8
 8009bec:	ec41 0b18 	vmov	d8, r0, r1
 8009bf0:	464b      	mov	r3, r9
 8009bf2:	4620      	mov	r0, r4
 8009bf4:	4629      	mov	r1, r5
 8009bf6:	f7f6 faf3 	bl	80001e0 <__aeabi_dsub>
 8009bfa:	4602      	mov	r2, r0
 8009bfc:	460b      	mov	r3, r1
 8009bfe:	4630      	mov	r0, r6
 8009c00:	4639      	mov	r1, r7
 8009c02:	f7f6 faed 	bl	80001e0 <__aeabi_dsub>
 8009c06:	a336      	add	r3, pc, #216	; (adr r3, 8009ce0 <__ieee754_pow+0x728>)
 8009c08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c0c:	f7f6 fca0 	bl	8000550 <__aeabi_dmul>
 8009c10:	a335      	add	r3, pc, #212	; (adr r3, 8009ce8 <__ieee754_pow+0x730>)
 8009c12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c16:	4606      	mov	r6, r0
 8009c18:	460f      	mov	r7, r1
 8009c1a:	4620      	mov	r0, r4
 8009c1c:	4629      	mov	r1, r5
 8009c1e:	f7f6 fc97 	bl	8000550 <__aeabi_dmul>
 8009c22:	4602      	mov	r2, r0
 8009c24:	460b      	mov	r3, r1
 8009c26:	4630      	mov	r0, r6
 8009c28:	4639      	mov	r1, r7
 8009c2a:	f7f6 fadb 	bl	80001e4 <__adddf3>
 8009c2e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c30:	4b38      	ldr	r3, [pc, #224]	; (8009d14 <__ieee754_pow+0x75c>)
 8009c32:	4413      	add	r3, r2
 8009c34:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c38:	f7f6 fad4 	bl	80001e4 <__adddf3>
 8009c3c:	4682      	mov	sl, r0
 8009c3e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009c40:	468b      	mov	fp, r1
 8009c42:	f7f6 fc1b 	bl	800047c <__aeabi_i2d>
 8009c46:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009c48:	4b33      	ldr	r3, [pc, #204]	; (8009d18 <__ieee754_pow+0x760>)
 8009c4a:	4413      	add	r3, r2
 8009c4c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009c50:	4606      	mov	r6, r0
 8009c52:	460f      	mov	r7, r1
 8009c54:	4652      	mov	r2, sl
 8009c56:	465b      	mov	r3, fp
 8009c58:	ec51 0b18 	vmov	r0, r1, d8
 8009c5c:	f7f6 fac2 	bl	80001e4 <__adddf3>
 8009c60:	4642      	mov	r2, r8
 8009c62:	464b      	mov	r3, r9
 8009c64:	f7f6 fabe 	bl	80001e4 <__adddf3>
 8009c68:	4632      	mov	r2, r6
 8009c6a:	463b      	mov	r3, r7
 8009c6c:	f7f6 faba 	bl	80001e4 <__adddf3>
 8009c70:	9c04      	ldr	r4, [sp, #16]
 8009c72:	4632      	mov	r2, r6
 8009c74:	463b      	mov	r3, r7
 8009c76:	4620      	mov	r0, r4
 8009c78:	460d      	mov	r5, r1
 8009c7a:	f7f6 fab1 	bl	80001e0 <__aeabi_dsub>
 8009c7e:	4642      	mov	r2, r8
 8009c80:	464b      	mov	r3, r9
 8009c82:	f7f6 faad 	bl	80001e0 <__aeabi_dsub>
 8009c86:	ec53 2b18 	vmov	r2, r3, d8
 8009c8a:	f7f6 faa9 	bl	80001e0 <__aeabi_dsub>
 8009c8e:	4602      	mov	r2, r0
 8009c90:	460b      	mov	r3, r1
 8009c92:	4650      	mov	r0, sl
 8009c94:	4659      	mov	r1, fp
 8009c96:	e606      	b.n	80098a6 <__ieee754_pow+0x2ee>
 8009c98:	2401      	movs	r4, #1
 8009c9a:	e6a0      	b.n	80099de <__ieee754_pow+0x426>
 8009c9c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009cf0 <__ieee754_pow+0x738>
 8009ca0:	e60d      	b.n	80098be <__ieee754_pow+0x306>
 8009ca2:	bf00      	nop
 8009ca4:	f3af 8000 	nop.w
 8009ca8:	4a454eef 	.word	0x4a454eef
 8009cac:	3fca7e28 	.word	0x3fca7e28
 8009cb0:	93c9db65 	.word	0x93c9db65
 8009cb4:	3fcd864a 	.word	0x3fcd864a
 8009cb8:	a91d4101 	.word	0xa91d4101
 8009cbc:	3fd17460 	.word	0x3fd17460
 8009cc0:	518f264d 	.word	0x518f264d
 8009cc4:	3fd55555 	.word	0x3fd55555
 8009cc8:	db6fabff 	.word	0xdb6fabff
 8009ccc:	3fdb6db6 	.word	0x3fdb6db6
 8009cd0:	33333303 	.word	0x33333303
 8009cd4:	3fe33333 	.word	0x3fe33333
 8009cd8:	e0000000 	.word	0xe0000000
 8009cdc:	3feec709 	.word	0x3feec709
 8009ce0:	dc3a03fd 	.word	0xdc3a03fd
 8009ce4:	3feec709 	.word	0x3feec709
 8009ce8:	145b01f5 	.word	0x145b01f5
 8009cec:	be3e2fe0 	.word	0xbe3e2fe0
 8009cf0:	00000000 	.word	0x00000000
 8009cf4:	3ff00000 	.word	0x3ff00000
 8009cf8:	7ff00000 	.word	0x7ff00000
 8009cfc:	43400000 	.word	0x43400000
 8009d00:	0003988e 	.word	0x0003988e
 8009d04:	000bb679 	.word	0x000bb679
 8009d08:	0800a408 	.word	0x0800a408
 8009d0c:	3ff00000 	.word	0x3ff00000
 8009d10:	40080000 	.word	0x40080000
 8009d14:	0800a428 	.word	0x0800a428
 8009d18:	0800a418 	.word	0x0800a418
 8009d1c:	a3b5      	add	r3, pc, #724	; (adr r3, 8009ff4 <__ieee754_pow+0xa3c>)
 8009d1e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d22:	4640      	mov	r0, r8
 8009d24:	4649      	mov	r1, r9
 8009d26:	f7f6 fa5d 	bl	80001e4 <__adddf3>
 8009d2a:	4622      	mov	r2, r4
 8009d2c:	ec41 0b1a 	vmov	d10, r0, r1
 8009d30:	462b      	mov	r3, r5
 8009d32:	4630      	mov	r0, r6
 8009d34:	4639      	mov	r1, r7
 8009d36:	f7f6 fa53 	bl	80001e0 <__aeabi_dsub>
 8009d3a:	4602      	mov	r2, r0
 8009d3c:	460b      	mov	r3, r1
 8009d3e:	ec51 0b1a 	vmov	r0, r1, d10
 8009d42:	f7f6 fe95 	bl	8000a70 <__aeabi_dcmpgt>
 8009d46:	2800      	cmp	r0, #0
 8009d48:	f47f adf8 	bne.w	800993c <__ieee754_pow+0x384>
 8009d4c:	4aa4      	ldr	r2, [pc, #656]	; (8009fe0 <__ieee754_pow+0xa28>)
 8009d4e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009d52:	4293      	cmp	r3, r2
 8009d54:	f340 810b 	ble.w	8009f6e <__ieee754_pow+0x9b6>
 8009d58:	151b      	asrs	r3, r3, #20
 8009d5a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009d5e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009d62:	fa4a f303 	asr.w	r3, sl, r3
 8009d66:	445b      	add	r3, fp
 8009d68:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009d6c:	4e9d      	ldr	r6, [pc, #628]	; (8009fe4 <__ieee754_pow+0xa2c>)
 8009d6e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009d72:	4116      	asrs	r6, r2
 8009d74:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009d78:	2000      	movs	r0, #0
 8009d7a:	ea23 0106 	bic.w	r1, r3, r6
 8009d7e:	f1c2 0214 	rsb	r2, r2, #20
 8009d82:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009d86:	fa4a fa02 	asr.w	sl, sl, r2
 8009d8a:	f1bb 0f00 	cmp.w	fp, #0
 8009d8e:	4602      	mov	r2, r0
 8009d90:	460b      	mov	r3, r1
 8009d92:	4620      	mov	r0, r4
 8009d94:	4629      	mov	r1, r5
 8009d96:	bfb8      	it	lt
 8009d98:	f1ca 0a00 	rsblt	sl, sl, #0
 8009d9c:	f7f6 fa20 	bl	80001e0 <__aeabi_dsub>
 8009da0:	ec41 0b19 	vmov	d9, r0, r1
 8009da4:	4642      	mov	r2, r8
 8009da6:	464b      	mov	r3, r9
 8009da8:	ec51 0b19 	vmov	r0, r1, d9
 8009dac:	f7f6 fa1a 	bl	80001e4 <__adddf3>
 8009db0:	2400      	movs	r4, #0
 8009db2:	a379      	add	r3, pc, #484	; (adr r3, 8009f98 <__ieee754_pow+0x9e0>)
 8009db4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009db8:	4620      	mov	r0, r4
 8009dba:	460d      	mov	r5, r1
 8009dbc:	f7f6 fbc8 	bl	8000550 <__aeabi_dmul>
 8009dc0:	ec53 2b19 	vmov	r2, r3, d9
 8009dc4:	4606      	mov	r6, r0
 8009dc6:	460f      	mov	r7, r1
 8009dc8:	4620      	mov	r0, r4
 8009dca:	4629      	mov	r1, r5
 8009dcc:	f7f6 fa08 	bl	80001e0 <__aeabi_dsub>
 8009dd0:	4602      	mov	r2, r0
 8009dd2:	460b      	mov	r3, r1
 8009dd4:	4640      	mov	r0, r8
 8009dd6:	4649      	mov	r1, r9
 8009dd8:	f7f6 fa02 	bl	80001e0 <__aeabi_dsub>
 8009ddc:	a370      	add	r3, pc, #448	; (adr r3, 8009fa0 <__ieee754_pow+0x9e8>)
 8009dde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009de2:	f7f6 fbb5 	bl	8000550 <__aeabi_dmul>
 8009de6:	a370      	add	r3, pc, #448	; (adr r3, 8009fa8 <__ieee754_pow+0x9f0>)
 8009de8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009dec:	4680      	mov	r8, r0
 8009dee:	4689      	mov	r9, r1
 8009df0:	4620      	mov	r0, r4
 8009df2:	4629      	mov	r1, r5
 8009df4:	f7f6 fbac 	bl	8000550 <__aeabi_dmul>
 8009df8:	4602      	mov	r2, r0
 8009dfa:	460b      	mov	r3, r1
 8009dfc:	4640      	mov	r0, r8
 8009dfe:	4649      	mov	r1, r9
 8009e00:	f7f6 f9f0 	bl	80001e4 <__adddf3>
 8009e04:	4604      	mov	r4, r0
 8009e06:	460d      	mov	r5, r1
 8009e08:	4602      	mov	r2, r0
 8009e0a:	460b      	mov	r3, r1
 8009e0c:	4630      	mov	r0, r6
 8009e0e:	4639      	mov	r1, r7
 8009e10:	f7f6 f9e8 	bl	80001e4 <__adddf3>
 8009e14:	4632      	mov	r2, r6
 8009e16:	463b      	mov	r3, r7
 8009e18:	4680      	mov	r8, r0
 8009e1a:	4689      	mov	r9, r1
 8009e1c:	f7f6 f9e0 	bl	80001e0 <__aeabi_dsub>
 8009e20:	4602      	mov	r2, r0
 8009e22:	460b      	mov	r3, r1
 8009e24:	4620      	mov	r0, r4
 8009e26:	4629      	mov	r1, r5
 8009e28:	f7f6 f9da 	bl	80001e0 <__aeabi_dsub>
 8009e2c:	4642      	mov	r2, r8
 8009e2e:	4606      	mov	r6, r0
 8009e30:	460f      	mov	r7, r1
 8009e32:	464b      	mov	r3, r9
 8009e34:	4640      	mov	r0, r8
 8009e36:	4649      	mov	r1, r9
 8009e38:	f7f6 fb8a 	bl	8000550 <__aeabi_dmul>
 8009e3c:	a35c      	add	r3, pc, #368	; (adr r3, 8009fb0 <__ieee754_pow+0x9f8>)
 8009e3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e42:	4604      	mov	r4, r0
 8009e44:	460d      	mov	r5, r1
 8009e46:	f7f6 fb83 	bl	8000550 <__aeabi_dmul>
 8009e4a:	a35b      	add	r3, pc, #364	; (adr r3, 8009fb8 <__ieee754_pow+0xa00>)
 8009e4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e50:	f7f6 f9c6 	bl	80001e0 <__aeabi_dsub>
 8009e54:	4622      	mov	r2, r4
 8009e56:	462b      	mov	r3, r5
 8009e58:	f7f6 fb7a 	bl	8000550 <__aeabi_dmul>
 8009e5c:	a358      	add	r3, pc, #352	; (adr r3, 8009fc0 <__ieee754_pow+0xa08>)
 8009e5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e62:	f7f6 f9bf 	bl	80001e4 <__adddf3>
 8009e66:	4622      	mov	r2, r4
 8009e68:	462b      	mov	r3, r5
 8009e6a:	f7f6 fb71 	bl	8000550 <__aeabi_dmul>
 8009e6e:	a356      	add	r3, pc, #344	; (adr r3, 8009fc8 <__ieee754_pow+0xa10>)
 8009e70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e74:	f7f6 f9b4 	bl	80001e0 <__aeabi_dsub>
 8009e78:	4622      	mov	r2, r4
 8009e7a:	462b      	mov	r3, r5
 8009e7c:	f7f6 fb68 	bl	8000550 <__aeabi_dmul>
 8009e80:	a353      	add	r3, pc, #332	; (adr r3, 8009fd0 <__ieee754_pow+0xa18>)
 8009e82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e86:	f7f6 f9ad 	bl	80001e4 <__adddf3>
 8009e8a:	4622      	mov	r2, r4
 8009e8c:	462b      	mov	r3, r5
 8009e8e:	f7f6 fb5f 	bl	8000550 <__aeabi_dmul>
 8009e92:	4602      	mov	r2, r0
 8009e94:	460b      	mov	r3, r1
 8009e96:	4640      	mov	r0, r8
 8009e98:	4649      	mov	r1, r9
 8009e9a:	f7f6 f9a1 	bl	80001e0 <__aeabi_dsub>
 8009e9e:	4604      	mov	r4, r0
 8009ea0:	460d      	mov	r5, r1
 8009ea2:	4602      	mov	r2, r0
 8009ea4:	460b      	mov	r3, r1
 8009ea6:	4640      	mov	r0, r8
 8009ea8:	4649      	mov	r1, r9
 8009eaa:	f7f6 fb51 	bl	8000550 <__aeabi_dmul>
 8009eae:	2200      	movs	r2, #0
 8009eb0:	ec41 0b19 	vmov	d9, r0, r1
 8009eb4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009eb8:	4620      	mov	r0, r4
 8009eba:	4629      	mov	r1, r5
 8009ebc:	f7f6 f990 	bl	80001e0 <__aeabi_dsub>
 8009ec0:	4602      	mov	r2, r0
 8009ec2:	460b      	mov	r3, r1
 8009ec4:	ec51 0b19 	vmov	r0, r1, d9
 8009ec8:	f7f6 fc6c 	bl	80007a4 <__aeabi_ddiv>
 8009ecc:	4632      	mov	r2, r6
 8009ece:	4604      	mov	r4, r0
 8009ed0:	460d      	mov	r5, r1
 8009ed2:	463b      	mov	r3, r7
 8009ed4:	4640      	mov	r0, r8
 8009ed6:	4649      	mov	r1, r9
 8009ed8:	f7f6 fb3a 	bl	8000550 <__aeabi_dmul>
 8009edc:	4632      	mov	r2, r6
 8009ede:	463b      	mov	r3, r7
 8009ee0:	f7f6 f980 	bl	80001e4 <__adddf3>
 8009ee4:	4602      	mov	r2, r0
 8009ee6:	460b      	mov	r3, r1
 8009ee8:	4620      	mov	r0, r4
 8009eea:	4629      	mov	r1, r5
 8009eec:	f7f6 f978 	bl	80001e0 <__aeabi_dsub>
 8009ef0:	4642      	mov	r2, r8
 8009ef2:	464b      	mov	r3, r9
 8009ef4:	f7f6 f974 	bl	80001e0 <__aeabi_dsub>
 8009ef8:	460b      	mov	r3, r1
 8009efa:	4602      	mov	r2, r0
 8009efc:	493a      	ldr	r1, [pc, #232]	; (8009fe8 <__ieee754_pow+0xa30>)
 8009efe:	2000      	movs	r0, #0
 8009f00:	f7f6 f96e 	bl	80001e0 <__aeabi_dsub>
 8009f04:	e9cd 0100 	strd	r0, r1, [sp]
 8009f08:	9b01      	ldr	r3, [sp, #4]
 8009f0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009f0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009f12:	da2f      	bge.n	8009f74 <__ieee754_pow+0x9bc>
 8009f14:	4650      	mov	r0, sl
 8009f16:	ed9d 0b00 	vldr	d0, [sp]
 8009f1a:	f000 f9cd 	bl	800a2b8 <scalbn>
 8009f1e:	ec51 0b10 	vmov	r0, r1, d0
 8009f22:	ec53 2b18 	vmov	r2, r3, d8
 8009f26:	f7ff bbe0 	b.w	80096ea <__ieee754_pow+0x132>
 8009f2a:	4b30      	ldr	r3, [pc, #192]	; (8009fec <__ieee754_pow+0xa34>)
 8009f2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009f30:	429e      	cmp	r6, r3
 8009f32:	f77f af0b 	ble.w	8009d4c <__ieee754_pow+0x794>
 8009f36:	4b2e      	ldr	r3, [pc, #184]	; (8009ff0 <__ieee754_pow+0xa38>)
 8009f38:	440b      	add	r3, r1
 8009f3a:	4303      	orrs	r3, r0
 8009f3c:	d00b      	beq.n	8009f56 <__ieee754_pow+0x99e>
 8009f3e:	a326      	add	r3, pc, #152	; (adr r3, 8009fd8 <__ieee754_pow+0xa20>)
 8009f40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f44:	ec51 0b18 	vmov	r0, r1, d8
 8009f48:	f7f6 fb02 	bl	8000550 <__aeabi_dmul>
 8009f4c:	a322      	add	r3, pc, #136	; (adr r3, 8009fd8 <__ieee754_pow+0xa20>)
 8009f4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009f52:	f7ff bbca 	b.w	80096ea <__ieee754_pow+0x132>
 8009f56:	4622      	mov	r2, r4
 8009f58:	462b      	mov	r3, r5
 8009f5a:	f7f6 f941 	bl	80001e0 <__aeabi_dsub>
 8009f5e:	4642      	mov	r2, r8
 8009f60:	464b      	mov	r3, r9
 8009f62:	f7f6 fd7b 	bl	8000a5c <__aeabi_dcmpge>
 8009f66:	2800      	cmp	r0, #0
 8009f68:	f43f aef0 	beq.w	8009d4c <__ieee754_pow+0x794>
 8009f6c:	e7e7      	b.n	8009f3e <__ieee754_pow+0x986>
 8009f6e:	f04f 0a00 	mov.w	sl, #0
 8009f72:	e717      	b.n	8009da4 <__ieee754_pow+0x7ec>
 8009f74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009f78:	4619      	mov	r1, r3
 8009f7a:	e7d2      	b.n	8009f22 <__ieee754_pow+0x96a>
 8009f7c:	491a      	ldr	r1, [pc, #104]	; (8009fe8 <__ieee754_pow+0xa30>)
 8009f7e:	2000      	movs	r0, #0
 8009f80:	f7ff bb9e 	b.w	80096c0 <__ieee754_pow+0x108>
 8009f84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009f88:	f7ff bb9a 	b.w	80096c0 <__ieee754_pow+0x108>
 8009f8c:	9000      	str	r0, [sp, #0]
 8009f8e:	f7ff bb76 	b.w	800967e <__ieee754_pow+0xc6>
 8009f92:	2100      	movs	r1, #0
 8009f94:	f7ff bb60 	b.w	8009658 <__ieee754_pow+0xa0>
 8009f98:	00000000 	.word	0x00000000
 8009f9c:	3fe62e43 	.word	0x3fe62e43
 8009fa0:	fefa39ef 	.word	0xfefa39ef
 8009fa4:	3fe62e42 	.word	0x3fe62e42
 8009fa8:	0ca86c39 	.word	0x0ca86c39
 8009fac:	be205c61 	.word	0xbe205c61
 8009fb0:	72bea4d0 	.word	0x72bea4d0
 8009fb4:	3e663769 	.word	0x3e663769
 8009fb8:	c5d26bf1 	.word	0xc5d26bf1
 8009fbc:	3ebbbd41 	.word	0x3ebbbd41
 8009fc0:	af25de2c 	.word	0xaf25de2c
 8009fc4:	3f11566a 	.word	0x3f11566a
 8009fc8:	16bebd93 	.word	0x16bebd93
 8009fcc:	3f66c16c 	.word	0x3f66c16c
 8009fd0:	5555553e 	.word	0x5555553e
 8009fd4:	3fc55555 	.word	0x3fc55555
 8009fd8:	c2f8f359 	.word	0xc2f8f359
 8009fdc:	01a56e1f 	.word	0x01a56e1f
 8009fe0:	3fe00000 	.word	0x3fe00000
 8009fe4:	000fffff 	.word	0x000fffff
 8009fe8:	3ff00000 	.word	0x3ff00000
 8009fec:	4090cbff 	.word	0x4090cbff
 8009ff0:	3f6f3400 	.word	0x3f6f3400
 8009ff4:	652b82fe 	.word	0x652b82fe
 8009ff8:	3c971547 	.word	0x3c971547

08009ffc <__ieee754_sqrt>:
 8009ffc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 800a000:	ec55 4b10 	vmov	r4, r5, d0
 800a004:	4e56      	ldr	r6, [pc, #344]	; (800a160 <__ieee754_sqrt+0x164>)
 800a006:	43ae      	bics	r6, r5
 800a008:	ee10 0a10 	vmov	r0, s0
 800a00c:	ee10 3a10 	vmov	r3, s0
 800a010:	4629      	mov	r1, r5
 800a012:	462a      	mov	r2, r5
 800a014:	d110      	bne.n	800a038 <__ieee754_sqrt+0x3c>
 800a016:	ee10 2a10 	vmov	r2, s0
 800a01a:	462b      	mov	r3, r5
 800a01c:	f7f6 fa98 	bl	8000550 <__aeabi_dmul>
 800a020:	4602      	mov	r2, r0
 800a022:	460b      	mov	r3, r1
 800a024:	4620      	mov	r0, r4
 800a026:	4629      	mov	r1, r5
 800a028:	f7f6 f8dc 	bl	80001e4 <__adddf3>
 800a02c:	4604      	mov	r4, r0
 800a02e:	460d      	mov	r5, r1
 800a030:	ec45 4b10 	vmov	d0, r4, r5
 800a034:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 800a038:	2d00      	cmp	r5, #0
 800a03a:	dc10      	bgt.n	800a05e <__ieee754_sqrt+0x62>
 800a03c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 800a040:	4330      	orrs	r0, r6
 800a042:	d0f5      	beq.n	800a030 <__ieee754_sqrt+0x34>
 800a044:	b15d      	cbz	r5, 800a05e <__ieee754_sqrt+0x62>
 800a046:	ee10 2a10 	vmov	r2, s0
 800a04a:	462b      	mov	r3, r5
 800a04c:	ee10 0a10 	vmov	r0, s0
 800a050:	f7f6 f8c6 	bl	80001e0 <__aeabi_dsub>
 800a054:	4602      	mov	r2, r0
 800a056:	460b      	mov	r3, r1
 800a058:	f7f6 fba4 	bl	80007a4 <__aeabi_ddiv>
 800a05c:	e7e6      	b.n	800a02c <__ieee754_sqrt+0x30>
 800a05e:	1509      	asrs	r1, r1, #20
 800a060:	d076      	beq.n	800a150 <__ieee754_sqrt+0x154>
 800a062:	f3c2 0213 	ubfx	r2, r2, #0, #20
 800a066:	07ce      	lsls	r6, r1, #31
 800a068:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800a06c:	bf5e      	ittt	pl
 800a06e:	0fda      	lsrpl	r2, r3, #31
 800a070:	005b      	lslpl	r3, r3, #1
 800a072:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 800a076:	0fda      	lsrs	r2, r3, #31
 800a078:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800a07c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 800a080:	2000      	movs	r0, #0
 800a082:	106d      	asrs	r5, r5, #1
 800a084:	005b      	lsls	r3, r3, #1
 800a086:	f04f 0e16 	mov.w	lr, #22
 800a08a:	4684      	mov	ip, r0
 800a08c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 800a090:	eb0c 0401 	add.w	r4, ip, r1
 800a094:	4294      	cmp	r4, r2
 800a096:	bfde      	ittt	le
 800a098:	1b12      	suble	r2, r2, r4
 800a09a:	eb04 0c01 	addle.w	ip, r4, r1
 800a09e:	1840      	addle	r0, r0, r1
 800a0a0:	0052      	lsls	r2, r2, #1
 800a0a2:	f1be 0e01 	subs.w	lr, lr, #1
 800a0a6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a0aa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800a0ae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0b2:	d1ed      	bne.n	800a090 <__ieee754_sqrt+0x94>
 800a0b4:	4671      	mov	r1, lr
 800a0b6:	2720      	movs	r7, #32
 800a0b8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800a0bc:	4562      	cmp	r2, ip
 800a0be:	eb04 060e 	add.w	r6, r4, lr
 800a0c2:	dc02      	bgt.n	800a0ca <__ieee754_sqrt+0xce>
 800a0c4:	d113      	bne.n	800a0ee <__ieee754_sqrt+0xf2>
 800a0c6:	429e      	cmp	r6, r3
 800a0c8:	d811      	bhi.n	800a0ee <__ieee754_sqrt+0xf2>
 800a0ca:	2e00      	cmp	r6, #0
 800a0cc:	eb06 0e04 	add.w	lr, r6, r4
 800a0d0:	da43      	bge.n	800a15a <__ieee754_sqrt+0x15e>
 800a0d2:	f1be 0f00 	cmp.w	lr, #0
 800a0d6:	db40      	blt.n	800a15a <__ieee754_sqrt+0x15e>
 800a0d8:	f10c 0801 	add.w	r8, ip, #1
 800a0dc:	eba2 020c 	sub.w	r2, r2, ip
 800a0e0:	429e      	cmp	r6, r3
 800a0e2:	bf88      	it	hi
 800a0e4:	f102 32ff 	addhi.w	r2, r2, #4294967295
 800a0e8:	1b9b      	subs	r3, r3, r6
 800a0ea:	4421      	add	r1, r4
 800a0ec:	46c4      	mov	ip, r8
 800a0ee:	0052      	lsls	r2, r2, #1
 800a0f0:	3f01      	subs	r7, #1
 800a0f2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800a0f6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 800a0fa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 800a0fe:	d1dd      	bne.n	800a0bc <__ieee754_sqrt+0xc0>
 800a100:	4313      	orrs	r3, r2
 800a102:	d006      	beq.n	800a112 <__ieee754_sqrt+0x116>
 800a104:	1c4c      	adds	r4, r1, #1
 800a106:	bf13      	iteet	ne
 800a108:	3101      	addne	r1, #1
 800a10a:	3001      	addeq	r0, #1
 800a10c:	4639      	moveq	r1, r7
 800a10e:	f021 0101 	bicne.w	r1, r1, #1
 800a112:	1043      	asrs	r3, r0, #1
 800a114:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 800a118:	0849      	lsrs	r1, r1, #1
 800a11a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 800a11e:	07c2      	lsls	r2, r0, #31
 800a120:	bf48      	it	mi
 800a122:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 800a126:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 800a12a:	460c      	mov	r4, r1
 800a12c:	463d      	mov	r5, r7
 800a12e:	e77f      	b.n	800a030 <__ieee754_sqrt+0x34>
 800a130:	0ada      	lsrs	r2, r3, #11
 800a132:	3815      	subs	r0, #21
 800a134:	055b      	lsls	r3, r3, #21
 800a136:	2a00      	cmp	r2, #0
 800a138:	d0fa      	beq.n	800a130 <__ieee754_sqrt+0x134>
 800a13a:	02d7      	lsls	r7, r2, #11
 800a13c:	d50a      	bpl.n	800a154 <__ieee754_sqrt+0x158>
 800a13e:	f1c1 0420 	rsb	r4, r1, #32
 800a142:	fa23 f404 	lsr.w	r4, r3, r4
 800a146:	1e4d      	subs	r5, r1, #1
 800a148:	408b      	lsls	r3, r1
 800a14a:	4322      	orrs	r2, r4
 800a14c:	1b41      	subs	r1, r0, r5
 800a14e:	e788      	b.n	800a062 <__ieee754_sqrt+0x66>
 800a150:	4608      	mov	r0, r1
 800a152:	e7f0      	b.n	800a136 <__ieee754_sqrt+0x13a>
 800a154:	0052      	lsls	r2, r2, #1
 800a156:	3101      	adds	r1, #1
 800a158:	e7ef      	b.n	800a13a <__ieee754_sqrt+0x13e>
 800a15a:	46e0      	mov	r8, ip
 800a15c:	e7be      	b.n	800a0dc <__ieee754_sqrt+0xe0>
 800a15e:	bf00      	nop
 800a160:	7ff00000 	.word	0x7ff00000

0800a164 <fabs>:
 800a164:	ec51 0b10 	vmov	r0, r1, d0
 800a168:	ee10 2a10 	vmov	r2, s0
 800a16c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a170:	ec43 2b10 	vmov	d0, r2, r3
 800a174:	4770      	bx	lr

0800a176 <finite>:
 800a176:	b082      	sub	sp, #8
 800a178:	ed8d 0b00 	vstr	d0, [sp]
 800a17c:	9801      	ldr	r0, [sp, #4]
 800a17e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a182:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a186:	0fc0      	lsrs	r0, r0, #31
 800a188:	b002      	add	sp, #8
 800a18a:	4770      	bx	lr
 800a18c:	0000      	movs	r0, r0
	...

0800a190 <nan>:
 800a190:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a198 <nan+0x8>
 800a194:	4770      	bx	lr
 800a196:	bf00      	nop
 800a198:	00000000 	.word	0x00000000
 800a19c:	7ff80000 	.word	0x7ff80000

0800a1a0 <rint>:
 800a1a0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a1a2:	ec51 0b10 	vmov	r0, r1, d0
 800a1a6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1aa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a1ae:	2e13      	cmp	r6, #19
 800a1b0:	ee10 4a10 	vmov	r4, s0
 800a1b4:	460b      	mov	r3, r1
 800a1b6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a1ba:	dc58      	bgt.n	800a26e <rint+0xce>
 800a1bc:	2e00      	cmp	r6, #0
 800a1be:	da2b      	bge.n	800a218 <rint+0x78>
 800a1c0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a1c4:	4302      	orrs	r2, r0
 800a1c6:	d023      	beq.n	800a210 <rint+0x70>
 800a1c8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a1cc:	4302      	orrs	r2, r0
 800a1ce:	4254      	negs	r4, r2
 800a1d0:	4314      	orrs	r4, r2
 800a1d2:	0c4b      	lsrs	r3, r1, #17
 800a1d4:	0b24      	lsrs	r4, r4, #12
 800a1d6:	045b      	lsls	r3, r3, #17
 800a1d8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a1dc:	ea44 0103 	orr.w	r1, r4, r3
 800a1e0:	4b32      	ldr	r3, [pc, #200]	; (800a2ac <rint+0x10c>)
 800a1e2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a1e6:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a1ea:	4602      	mov	r2, r0
 800a1ec:	460b      	mov	r3, r1
 800a1ee:	4630      	mov	r0, r6
 800a1f0:	4639      	mov	r1, r7
 800a1f2:	f7f5 fff7 	bl	80001e4 <__adddf3>
 800a1f6:	e9cd 0100 	strd	r0, r1, [sp]
 800a1fa:	463b      	mov	r3, r7
 800a1fc:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a200:	4632      	mov	r2, r6
 800a202:	f7f5 ffed 	bl	80001e0 <__aeabi_dsub>
 800a206:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a20a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a20e:	4639      	mov	r1, r7
 800a210:	ec41 0b10 	vmov	d0, r0, r1
 800a214:	b003      	add	sp, #12
 800a216:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a218:	4a25      	ldr	r2, [pc, #148]	; (800a2b0 <rint+0x110>)
 800a21a:	4132      	asrs	r2, r6
 800a21c:	ea01 0702 	and.w	r7, r1, r2
 800a220:	4307      	orrs	r7, r0
 800a222:	d0f5      	beq.n	800a210 <rint+0x70>
 800a224:	0851      	lsrs	r1, r2, #1
 800a226:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a22a:	4314      	orrs	r4, r2
 800a22c:	d00c      	beq.n	800a248 <rint+0xa8>
 800a22e:	ea23 0201 	bic.w	r2, r3, r1
 800a232:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a236:	2e13      	cmp	r6, #19
 800a238:	fa43 f606 	asr.w	r6, r3, r6
 800a23c:	bf0c      	ite	eq
 800a23e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a242:	2400      	movne	r4, #0
 800a244:	ea42 0306 	orr.w	r3, r2, r6
 800a248:	4918      	ldr	r1, [pc, #96]	; (800a2ac <rint+0x10c>)
 800a24a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a24e:	4622      	mov	r2, r4
 800a250:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a254:	4620      	mov	r0, r4
 800a256:	4629      	mov	r1, r5
 800a258:	f7f5 ffc4 	bl	80001e4 <__adddf3>
 800a25c:	e9cd 0100 	strd	r0, r1, [sp]
 800a260:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a264:	4622      	mov	r2, r4
 800a266:	462b      	mov	r3, r5
 800a268:	f7f5 ffba 	bl	80001e0 <__aeabi_dsub>
 800a26c:	e7d0      	b.n	800a210 <rint+0x70>
 800a26e:	2e33      	cmp	r6, #51	; 0x33
 800a270:	dd07      	ble.n	800a282 <rint+0xe2>
 800a272:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a276:	d1cb      	bne.n	800a210 <rint+0x70>
 800a278:	ee10 2a10 	vmov	r2, s0
 800a27c:	f7f5 ffb2 	bl	80001e4 <__adddf3>
 800a280:	e7c6      	b.n	800a210 <rint+0x70>
 800a282:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a286:	f04f 36ff 	mov.w	r6, #4294967295
 800a28a:	40d6      	lsrs	r6, r2
 800a28c:	4230      	tst	r0, r6
 800a28e:	d0bf      	beq.n	800a210 <rint+0x70>
 800a290:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a294:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a298:	bf1f      	itttt	ne
 800a29a:	ea24 0101 	bicne.w	r1, r4, r1
 800a29e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a2a2:	fa44 f202 	asrne.w	r2, r4, r2
 800a2a6:	ea41 0402 	orrne.w	r4, r1, r2
 800a2aa:	e7cd      	b.n	800a248 <rint+0xa8>
 800a2ac:	0800a438 	.word	0x0800a438
 800a2b0:	000fffff 	.word	0x000fffff
 800a2b4:	00000000 	.word	0x00000000

0800a2b8 <scalbn>:
 800a2b8:	b570      	push	{r4, r5, r6, lr}
 800a2ba:	ec55 4b10 	vmov	r4, r5, d0
 800a2be:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a2c2:	4606      	mov	r6, r0
 800a2c4:	462b      	mov	r3, r5
 800a2c6:	b99a      	cbnz	r2, 800a2f0 <scalbn+0x38>
 800a2c8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a2cc:	4323      	orrs	r3, r4
 800a2ce:	d036      	beq.n	800a33e <scalbn+0x86>
 800a2d0:	4b39      	ldr	r3, [pc, #228]	; (800a3b8 <scalbn+0x100>)
 800a2d2:	4629      	mov	r1, r5
 800a2d4:	ee10 0a10 	vmov	r0, s0
 800a2d8:	2200      	movs	r2, #0
 800a2da:	f7f6 f939 	bl	8000550 <__aeabi_dmul>
 800a2de:	4b37      	ldr	r3, [pc, #220]	; (800a3bc <scalbn+0x104>)
 800a2e0:	429e      	cmp	r6, r3
 800a2e2:	4604      	mov	r4, r0
 800a2e4:	460d      	mov	r5, r1
 800a2e6:	da10      	bge.n	800a30a <scalbn+0x52>
 800a2e8:	a32b      	add	r3, pc, #172	; (adr r3, 800a398 <scalbn+0xe0>)
 800a2ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a2ee:	e03a      	b.n	800a366 <scalbn+0xae>
 800a2f0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a2f4:	428a      	cmp	r2, r1
 800a2f6:	d10c      	bne.n	800a312 <scalbn+0x5a>
 800a2f8:	ee10 2a10 	vmov	r2, s0
 800a2fc:	4620      	mov	r0, r4
 800a2fe:	4629      	mov	r1, r5
 800a300:	f7f5 ff70 	bl	80001e4 <__adddf3>
 800a304:	4604      	mov	r4, r0
 800a306:	460d      	mov	r5, r1
 800a308:	e019      	b.n	800a33e <scalbn+0x86>
 800a30a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a30e:	460b      	mov	r3, r1
 800a310:	3a36      	subs	r2, #54	; 0x36
 800a312:	4432      	add	r2, r6
 800a314:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a318:	428a      	cmp	r2, r1
 800a31a:	dd08      	ble.n	800a32e <scalbn+0x76>
 800a31c:	2d00      	cmp	r5, #0
 800a31e:	a120      	add	r1, pc, #128	; (adr r1, 800a3a0 <scalbn+0xe8>)
 800a320:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a324:	da1c      	bge.n	800a360 <scalbn+0xa8>
 800a326:	a120      	add	r1, pc, #128	; (adr r1, 800a3a8 <scalbn+0xf0>)
 800a328:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a32c:	e018      	b.n	800a360 <scalbn+0xa8>
 800a32e:	2a00      	cmp	r2, #0
 800a330:	dd08      	ble.n	800a344 <scalbn+0x8c>
 800a332:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a336:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a33a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a33e:	ec45 4b10 	vmov	d0, r4, r5
 800a342:	bd70      	pop	{r4, r5, r6, pc}
 800a344:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a348:	da19      	bge.n	800a37e <scalbn+0xc6>
 800a34a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a34e:	429e      	cmp	r6, r3
 800a350:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a354:	dd0a      	ble.n	800a36c <scalbn+0xb4>
 800a356:	a112      	add	r1, pc, #72	; (adr r1, 800a3a0 <scalbn+0xe8>)
 800a358:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a35c:	2b00      	cmp	r3, #0
 800a35e:	d1e2      	bne.n	800a326 <scalbn+0x6e>
 800a360:	a30f      	add	r3, pc, #60	; (adr r3, 800a3a0 <scalbn+0xe8>)
 800a362:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a366:	f7f6 f8f3 	bl	8000550 <__aeabi_dmul>
 800a36a:	e7cb      	b.n	800a304 <scalbn+0x4c>
 800a36c:	a10a      	add	r1, pc, #40	; (adr r1, 800a398 <scalbn+0xe0>)
 800a36e:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a372:	2b00      	cmp	r3, #0
 800a374:	d0b8      	beq.n	800a2e8 <scalbn+0x30>
 800a376:	a10e      	add	r1, pc, #56	; (adr r1, 800a3b0 <scalbn+0xf8>)
 800a378:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a37c:	e7b4      	b.n	800a2e8 <scalbn+0x30>
 800a37e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a382:	3236      	adds	r2, #54	; 0x36
 800a384:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a388:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a38c:	4620      	mov	r0, r4
 800a38e:	4b0c      	ldr	r3, [pc, #48]	; (800a3c0 <scalbn+0x108>)
 800a390:	2200      	movs	r2, #0
 800a392:	e7e8      	b.n	800a366 <scalbn+0xae>
 800a394:	f3af 8000 	nop.w
 800a398:	c2f8f359 	.word	0xc2f8f359
 800a39c:	01a56e1f 	.word	0x01a56e1f
 800a3a0:	8800759c 	.word	0x8800759c
 800a3a4:	7e37e43c 	.word	0x7e37e43c
 800a3a8:	8800759c 	.word	0x8800759c
 800a3ac:	fe37e43c 	.word	0xfe37e43c
 800a3b0:	c2f8f359 	.word	0xc2f8f359
 800a3b4:	81a56e1f 	.word	0x81a56e1f
 800a3b8:	43500000 	.word	0x43500000
 800a3bc:	ffff3cb0 	.word	0xffff3cb0
 800a3c0:	3c900000 	.word	0x3c900000

0800a3c4 <_init>:
 800a3c4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3c6:	bf00      	nop
 800a3c8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3ca:	bc08      	pop	{r3}
 800a3cc:	469e      	mov	lr, r3
 800a3ce:	4770      	bx	lr

0800a3d0 <_fini>:
 800a3d0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a3d2:	bf00      	nop
 800a3d4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a3d6:	bc08      	pop	{r3}
 800a3d8:	469e      	mov	lr, r3
 800a3da:	4770      	bx	lr

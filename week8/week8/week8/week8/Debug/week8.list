
week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a10c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a2a8  0800a2a8  0001a2a8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a310  0800a310  00020090  2**0
                  CONTENTS
  4 .ARM          00000008  0800a310  0800a310  0001a310  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a318  0800a318  00020090  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a318  0800a318  0001a318  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a31c  0800a31c  0001a31c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000090  20000000  0800a320  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009d0  20000090  0800a3b0  00020090  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a60  0800a3b0  00020a60  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020090  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011275  00000000  00000000  000200c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020c7  00000000  00000000  00031335  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fd8  00000000  00000000  00033400  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f48  00000000  00000000  000343d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a17  00000000  00000000  00035320  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   000116c0  00000000  00000000  0004bd37  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090890  00000000  00000000  0005d3f7  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000edc87  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004a4c  00000000  00000000  000edcdc  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000090 	.word	0x20000090
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a28c 	.word	0x0800a28c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	20000094 	.word	0x20000094
 80001d4:	0800a28c 	.word	0x0800a28c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 800106a:	f002 fca1 	bl	80039b0 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800106e:	f000 f881 	bl	8001174 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001072:	f000 faad 	bl	80015d0 <MX_GPIO_Init>
	MX_DMA_Init();
 8001076:	f000 fa83 	bl	8001580 <MX_DMA_Init>
	MX_USART2_UART_Init();
 800107a:	f000 fa2b 	bl	80014d4 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 800107e:	f000 f90f 	bl	80012a0 <MX_TIM1_Init>
	MX_TIM2_Init();
 8001082:	f000 f965 	bl	8001350 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001086:	f000 f9af 	bl	80013e8 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 800108a:	f000 fa4f 	bl	800152c <MX_USART6_UART_Init>
	MX_I2C1_Init();
 800108e:	f000 f8d9 	bl	8001244 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	UART2.huart = &huart2;
 8001092:	4b30      	ldr	r3, [pc, #192]	; (8001154 <main+0xf0>)
 8001094:	4a30      	ldr	r2, [pc, #192]	; (8001158 <main+0xf4>)
 8001096:	601a      	str	r2, [r3, #0]
	UART2.RxLen = 255;
 8001098:	4b2e      	ldr	r3, [pc, #184]	; (8001154 <main+0xf0>)
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	80da      	strh	r2, [r3, #6]
	UART2.TxLen = 255;
 800109e:	4b2d      	ldr	r3, [pc, #180]	; (8001154 <main+0xf0>)
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	809a      	strh	r2, [r3, #4]
	UARTInit(&UART2);
 80010a4:	482b      	ldr	r0, [pc, #172]	; (8001154 <main+0xf0>)
 80010a6:	f000 fb41 	bl	800172c <UARTInit>
	UARTResetStart(&UART2);
 80010aa:	482a      	ldr	r0, [pc, #168]	; (8001154 <main+0xf0>)
 80010ac:	f000 fb66 	bl	800177c <UARTResetStart>
	//start micros
	HAL_TIM_Base_Start_IT(&htim2);
 80010b0:	482a      	ldr	r0, [pc, #168]	; (800115c <main+0xf8>)
 80010b2:	f006 f889 	bl	80071c8 <HAL_TIM_Base_Start_IT>
	//Encoder start
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010b6:	213c      	movs	r1, #60	; 0x3c
 80010b8:	4829      	ldr	r0, [pc, #164]	; (8001160 <main+0xfc>)
 80010ba:	f006 fa97 	bl	80075ec <HAL_TIM_Encoder_Start>
	//PWM start AIN1
	HAL_TIM_Base_Start(&htim3);
 80010be:	4829      	ldr	r0, [pc, #164]	; (8001164 <main+0x100>)
 80010c0:	f006 f828 	bl	8007114 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010c4:	2100      	movs	r1, #0
 80010c6:	4827      	ldr	r0, [pc, #156]	; (8001164 <main+0x100>)
 80010c8:	f006 f93a 	bl	8007340 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 5000;
 80010cc:	4b25      	ldr	r3, [pc, #148]	; (8001164 <main+0x100>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		int16_t inputChar = UARTReadChar(&UART2);
 80010d6:	481f      	ldr	r0, [pc, #124]	; (8001154 <main+0xf0>)
 80010d8:	f000 fb74 	bl	80017c4 <UARTReadChar>
 80010dc:	4603      	mov	r3, r0
 80010de:	80fb      	strh	r3, [r7, #6]
		if (inputChar != -1)
 80010e0:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e4:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80010e8:	d006      	beq.n	80010f8 <main+0x94>
		{
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 80010ea:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010ee:	4b19      	ldr	r3, [pc, #100]	; (8001154 <main+0xf0>)
 80010f0:	2101      	movs	r1, #1
 80010f2:	481d      	ldr	r0, [pc, #116]	; (8001168 <main+0x104>)
 80010f4:	f000 fc4a 	bl	800198c <DynamixelProtocal2>
		}
		findingPosition();
 80010f8:	f001 f918 	bl	800232c <findingPosition>
		gotoSethome();
 80010fc:	f001 fd44 	bl	8002b88 <gotoSethome>
		I2Creader();
 8001100:	f001 f9c6 	bl	8002490 <I2Creader>
		if (micros() - Timestamp >= dt){
 8001104:	f002 f910 	bl	8003328 <micros>
 8001108:	4b18      	ldr	r3, [pc, #96]	; (800116c <main+0x108>)
 800110a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110e:	1a84      	subs	r4, r0, r2
 8001110:	eb61 0503 	sbc.w	r5, r1, r3
 8001114:	4b16      	ldr	r3, [pc, #88]	; (8001170 <main+0x10c>)
 8001116:	881b      	ldrh	r3, [r3, #0]
 8001118:	b29a      	uxth	r2, r3
 800111a:	f04f 0300 	mov.w	r3, #0
 800111e:	429d      	cmp	r5, r3
 8001120:	bf08      	it	eq
 8001122:	4294      	cmpeq	r4, r2
 8001124:	d311      	bcc.n	800114a <main+0xe6>
			Timestamp = micros();
 8001126:	f002 f8ff 	bl	8003328 <micros>
 800112a:	4602      	mov	r2, r0
 800112c:	460b      	mov	r3, r1
 800112e:	490f      	ldr	r1, [pc, #60]	; (800116c <main+0x108>)
 8001130:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory(Timestamp);
 8001134:	4b0d      	ldr	r3, [pc, #52]	; (800116c <main+0x108>)
 8001136:	e9d3 2300 	ldrd	r2, r3, [r3]
 800113a:	4610      	mov	r0, r2
 800113c:	4619      	mov	r1, r3
 800113e:	f001 fa17 	bl	8002570 <trajectory>
			kalman();
 8001142:	f001 fd35 	bl	8002bb0 <kalman>
			pidPosition();
 8001146:	f001 fc7f 	bl	8002a48 <pidPosition>
		}
		UARTTxDumpBuffer(&UART2);
 800114a:	4802      	ldr	r0, [pc, #8]	; (8001154 <main+0xf0>)
 800114c:	f000 fb86 	bl	800185c <UARTTxDumpBuffer>
	{
 8001150:	e7c1      	b.n	80010d6 <main+0x72>
 8001152:	bf00      	nop
 8001154:	200000ac 	.word	0x200000ac
 8001158:	20000a08 	.word	0x20000a08
 800115c:	200009c0 	.word	0x200009c0
 8001160:	20000934 	.word	0x20000934
 8001164:	2000088c 	.word	0x2000088c
 8001168:	200000c4 	.word	0x200000c4
 800116c:	20000748 	.word	0x20000748
 8001170:	20000008 	.word	0x20000008

08001174 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001174:	b580      	push	{r7, lr}
 8001176:	b094      	sub	sp, #80	; 0x50
 8001178:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800117a:	f107 0320 	add.w	r3, r7, #32
 800117e:	2230      	movs	r2, #48	; 0x30
 8001180:	2100      	movs	r1, #0
 8001182:	4618      	mov	r0, r3
 8001184:	f008 f83e 	bl	8009204 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001188:	f107 030c 	add.w	r3, r7, #12
 800118c:	2200      	movs	r2, #0
 800118e:	601a      	str	r2, [r3, #0]
 8001190:	605a      	str	r2, [r3, #4]
 8001192:	609a      	str	r2, [r3, #8]
 8001194:	60da      	str	r2, [r3, #12]
 8001196:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001198:	2300      	movs	r3, #0
 800119a:	60bb      	str	r3, [r7, #8]
 800119c:	4b27      	ldr	r3, [pc, #156]	; (800123c <SystemClock_Config+0xc8>)
 800119e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a0:	4a26      	ldr	r2, [pc, #152]	; (800123c <SystemClock_Config+0xc8>)
 80011a2:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011a6:	6413      	str	r3, [r2, #64]	; 0x40
 80011a8:	4b24      	ldr	r3, [pc, #144]	; (800123c <SystemClock_Config+0xc8>)
 80011aa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011ac:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011b0:	60bb      	str	r3, [r7, #8]
 80011b2:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011b4:	2300      	movs	r3, #0
 80011b6:	607b      	str	r3, [r7, #4]
 80011b8:	4b21      	ldr	r3, [pc, #132]	; (8001240 <SystemClock_Config+0xcc>)
 80011ba:	681b      	ldr	r3, [r3, #0]
 80011bc:	4a20      	ldr	r2, [pc, #128]	; (8001240 <SystemClock_Config+0xcc>)
 80011be:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011c2:	6013      	str	r3, [r2, #0]
 80011c4:	4b1e      	ldr	r3, [pc, #120]	; (8001240 <SystemClock_Config+0xcc>)
 80011c6:	681b      	ldr	r3, [r3, #0]
 80011c8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011cc:	607b      	str	r3, [r7, #4]
 80011ce:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011d0:	2302      	movs	r3, #2
 80011d2:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011d4:	2301      	movs	r3, #1
 80011d6:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d8:	2310      	movs	r3, #16
 80011da:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011dc:	2302      	movs	r3, #2
 80011de:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011e0:	2300      	movs	r3, #0
 80011e2:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011e4:	2308      	movs	r3, #8
 80011e6:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80011e8:	2364      	movs	r3, #100	; 0x64
 80011ea:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011ec:	2302      	movs	r3, #2
 80011ee:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 80011f0:	2304      	movs	r3, #4
 80011f2:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011f4:	f107 0320 	add.w	r3, r7, #32
 80011f8:	4618      	mov	r0, r3
 80011fa:	f005 fac7 	bl	800678c <HAL_RCC_OscConfig>
 80011fe:	4603      	mov	r3, r0
 8001200:	2b00      	cmp	r3, #0
 8001202:	d001      	beq.n	8001208 <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001204:	f002 f8aa 	bl	800335c <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001208:	230f      	movs	r3, #15
 800120a:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 800120c:	2302      	movs	r3, #2
 800120e:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001210:	2300      	movs	r3, #0
 8001212:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001214:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001218:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800121a:	2300      	movs	r3, #0
 800121c:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 800121e:	f107 030c 	add.w	r3, r7, #12
 8001222:	2103      	movs	r1, #3
 8001224:	4618      	mov	r0, r3
 8001226:	f005 fd29 	bl	8006c7c <HAL_RCC_ClockConfig>
 800122a:	4603      	mov	r3, r0
 800122c:	2b00      	cmp	r3, #0
 800122e:	d001      	beq.n	8001234 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001230:	f002 f894 	bl	800335c <Error_Handler>
	}
}
 8001234:	bf00      	nop
 8001236:	3750      	adds	r7, #80	; 0x50
 8001238:	46bd      	mov	sp, r7
 800123a:	bd80      	pop	{r7, pc}
 800123c:	40023800 	.word	0x40023800
 8001240:	40007000 	.word	0x40007000

08001244 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 8001244:	b580      	push	{r7, lr}
 8001246:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 8001248:	4b12      	ldr	r3, [pc, #72]	; (8001294 <MX_I2C1_Init+0x50>)
 800124a:	4a13      	ldr	r2, [pc, #76]	; (8001298 <MX_I2C1_Init+0x54>)
 800124c:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 800124e:	4b11      	ldr	r3, [pc, #68]	; (8001294 <MX_I2C1_Init+0x50>)
 8001250:	4a12      	ldr	r2, [pc, #72]	; (800129c <MX_I2C1_Init+0x58>)
 8001252:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001254:	4b0f      	ldr	r3, [pc, #60]	; (8001294 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 800125a:	4b0e      	ldr	r3, [pc, #56]	; (8001294 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001260:	4b0c      	ldr	r3, [pc, #48]	; (8001294 <MX_I2C1_Init+0x50>)
 8001262:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001266:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001268:	4b0a      	ldr	r3, [pc, #40]	; (8001294 <MX_I2C1_Init+0x50>)
 800126a:	2200      	movs	r2, #0
 800126c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800126e:	4b09      	ldr	r3, [pc, #36]	; (8001294 <MX_I2C1_Init+0x50>)
 8001270:	2200      	movs	r2, #0
 8001272:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001274:	4b07      	ldr	r3, [pc, #28]	; (8001294 <MX_I2C1_Init+0x50>)
 8001276:	2200      	movs	r2, #0
 8001278:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800127a:	4b06      	ldr	r3, [pc, #24]	; (8001294 <MX_I2C1_Init+0x50>)
 800127c:	2200      	movs	r2, #0
 800127e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001280:	4804      	ldr	r0, [pc, #16]	; (8001294 <MX_I2C1_Init+0x50>)
 8001282:	f003 fb35 	bl	80048f0 <HAL_I2C_Init>
 8001286:	4603      	mov	r3, r0
 8001288:	2b00      	cmp	r3, #0
 800128a:	d001      	beq.n	8001290 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800128c:	f002 f866 	bl	800335c <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001290:	bf00      	nop
 8001292:	bd80      	pop	{r7, pc}
 8001294:	20000838 	.word	0x20000838
 8001298:	40005400 	.word	0x40005400
 800129c:	000186a0 	.word	0x000186a0

080012a0 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 80012a0:	b580      	push	{r7, lr}
 80012a2:	b08c      	sub	sp, #48	; 0x30
 80012a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 80012a6:	f107 030c 	add.w	r3, r7, #12
 80012aa:	2224      	movs	r2, #36	; 0x24
 80012ac:	2100      	movs	r1, #0
 80012ae:	4618      	mov	r0, r3
 80012b0:	f007 ffa8 	bl	8009204 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012b4:	1d3b      	adds	r3, r7, #4
 80012b6:	2200      	movs	r2, #0
 80012b8:	601a      	str	r2, [r3, #0]
 80012ba:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 80012bc:	4b22      	ldr	r3, [pc, #136]	; (8001348 <MX_TIM1_Init+0xa8>)
 80012be:	4a23      	ldr	r2, [pc, #140]	; (800134c <MX_TIM1_Init+0xac>)
 80012c0:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 80012c2:	4b21      	ldr	r3, [pc, #132]	; (8001348 <MX_TIM1_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c8:	4b1f      	ldr	r3, [pc, #124]	; (8001348 <MX_TIM1_Init+0xa8>)
 80012ca:	2200      	movs	r2, #0
 80012cc:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2047;
 80012ce:	4b1e      	ldr	r3, [pc, #120]	; (8001348 <MX_TIM1_Init+0xa8>)
 80012d0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012d4:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012d6:	4b1c      	ldr	r3, [pc, #112]	; (8001348 <MX_TIM1_Init+0xa8>)
 80012d8:	2200      	movs	r2, #0
 80012da:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 80012dc:	4b1a      	ldr	r3, [pc, #104]	; (8001348 <MX_TIM1_Init+0xa8>)
 80012de:	2200      	movs	r2, #0
 80012e0:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012e2:	4b19      	ldr	r3, [pc, #100]	; (8001348 <MX_TIM1_Init+0xa8>)
 80012e4:	2200      	movs	r2, #0
 80012e6:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e8:	2303      	movs	r3, #3
 80012ea:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012ec:	2300      	movs	r3, #0
 80012ee:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012f0:	2301      	movs	r3, #1
 80012f2:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012f4:	2300      	movs	r3, #0
 80012f6:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 3;
 80012f8:	2303      	movs	r3, #3
 80012fa:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012fc:	2300      	movs	r3, #0
 80012fe:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 8001300:	2301      	movs	r3, #1
 8001302:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 8001304:	2300      	movs	r3, #0
 8001306:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 5;
 8001308:	2305      	movs	r3, #5
 800130a:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 800130c:	f107 030c 	add.w	r3, r7, #12
 8001310:	4619      	mov	r1, r3
 8001312:	480d      	ldr	r0, [pc, #52]	; (8001348 <MX_TIM1_Init+0xa8>)
 8001314:	f006 f8c4 	bl	80074a0 <HAL_TIM_Encoder_Init>
 8001318:	4603      	mov	r3, r0
 800131a:	2b00      	cmp	r3, #0
 800131c:	d001      	beq.n	8001322 <MX_TIM1_Init+0x82>
	{
		Error_Handler();
 800131e:	f002 f81d 	bl	800335c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001322:	2300      	movs	r3, #0
 8001324:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001326:	2300      	movs	r3, #0
 8001328:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800132a:	1d3b      	adds	r3, r7, #4
 800132c:	4619      	mov	r1, r3
 800132e:	4806      	ldr	r0, [pc, #24]	; (8001348 <MX_TIM1_Init+0xa8>)
 8001330:	f006 ff68 	bl	8008204 <HAL_TIMEx_MasterConfigSynchronization>
 8001334:	4603      	mov	r3, r0
 8001336:	2b00      	cmp	r3, #0
 8001338:	d001      	beq.n	800133e <MX_TIM1_Init+0x9e>
	{
		Error_Handler();
 800133a:	f002 f80f 	bl	800335c <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 800133e:	bf00      	nop
 8001340:	3730      	adds	r7, #48	; 0x30
 8001342:	46bd      	mov	sp, r7
 8001344:	bd80      	pop	{r7, pc}
 8001346:	bf00      	nop
 8001348:	20000934 	.word	0x20000934
 800134c:	40010000 	.word	0x40010000

08001350 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001350:	b580      	push	{r7, lr}
 8001352:	b086      	sub	sp, #24
 8001354:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001356:	f107 0308 	add.w	r3, r7, #8
 800135a:	2200      	movs	r2, #0
 800135c:	601a      	str	r2, [r3, #0]
 800135e:	605a      	str	r2, [r3, #4]
 8001360:	609a      	str	r2, [r3, #8]
 8001362:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001364:	463b      	mov	r3, r7
 8001366:	2200      	movs	r2, #0
 8001368:	601a      	str	r2, [r3, #0]
 800136a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800136c:	4b1d      	ldr	r3, [pc, #116]	; (80013e4 <MX_TIM2_Init+0x94>)
 800136e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001372:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8001374:	4b1b      	ldr	r3, [pc, #108]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001376:	2263      	movs	r2, #99	; 0x63
 8001378:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800137a:	4b1a      	ldr	r3, [pc, #104]	; (80013e4 <MX_TIM2_Init+0x94>)
 800137c:	2200      	movs	r2, #0
 800137e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001380:	4b18      	ldr	r3, [pc, #96]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001382:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001386:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001388:	4b16      	ldr	r3, [pc, #88]	; (80013e4 <MX_TIM2_Init+0x94>)
 800138a:	2200      	movs	r2, #0
 800138c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800138e:	4b15      	ldr	r3, [pc, #84]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001390:	2200      	movs	r2, #0
 8001392:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001394:	4813      	ldr	r0, [pc, #76]	; (80013e4 <MX_TIM2_Init+0x94>)
 8001396:	f005 fe6d 	bl	8007074 <HAL_TIM_Base_Init>
 800139a:	4603      	mov	r3, r0
 800139c:	2b00      	cmp	r3, #0
 800139e:	d001      	beq.n	80013a4 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 80013a0:	f001 ffdc 	bl	800335c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013a4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013aa:	f107 0308 	add.w	r3, r7, #8
 80013ae:	4619      	mov	r1, r3
 80013b0:	480c      	ldr	r0, [pc, #48]	; (80013e4 <MX_TIM2_Init+0x94>)
 80013b2:	f006 fb6f 	bl	8007a94 <HAL_TIM_ConfigClockSource>
 80013b6:	4603      	mov	r3, r0
 80013b8:	2b00      	cmp	r3, #0
 80013ba:	d001      	beq.n	80013c0 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 80013bc:	f001 ffce 	bl	800335c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013c0:	2300      	movs	r3, #0
 80013c2:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013c4:	2300      	movs	r3, #0
 80013c6:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c8:	463b      	mov	r3, r7
 80013ca:	4619      	mov	r1, r3
 80013cc:	4805      	ldr	r0, [pc, #20]	; (80013e4 <MX_TIM2_Init+0x94>)
 80013ce:	f006 ff19 	bl	8008204 <HAL_TIMEx_MasterConfigSynchronization>
 80013d2:	4603      	mov	r3, r0
 80013d4:	2b00      	cmp	r3, #0
 80013d6:	d001      	beq.n	80013dc <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 80013d8:	f001 ffc0 	bl	800335c <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 80013dc:	bf00      	nop
 80013de:	3718      	adds	r7, #24
 80013e0:	46bd      	mov	sp, r7
 80013e2:	bd80      	pop	{r7, pc}
 80013e4:	200009c0 	.word	0x200009c0

080013e8 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80013e8:	b580      	push	{r7, lr}
 80013ea:	b08e      	sub	sp, #56	; 0x38
 80013ec:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ee:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f2:	2200      	movs	r2, #0
 80013f4:	601a      	str	r2, [r3, #0]
 80013f6:	605a      	str	r2, [r3, #4]
 80013f8:	609a      	str	r2, [r3, #8]
 80013fa:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013fc:	f107 0320 	add.w	r3, r7, #32
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 8001406:	1d3b      	adds	r3, r7, #4
 8001408:	2200      	movs	r2, #0
 800140a:	601a      	str	r2, [r3, #0]
 800140c:	605a      	str	r2, [r3, #4]
 800140e:	609a      	str	r2, [r3, #8]
 8001410:	60da      	str	r2, [r3, #12]
 8001412:	611a      	str	r2, [r3, #16]
 8001414:	615a      	str	r2, [r3, #20]
 8001416:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 8001418:	4b2c      	ldr	r3, [pc, #176]	; (80014cc <MX_TIM3_Init+0xe4>)
 800141a:	4a2d      	ldr	r2, [pc, #180]	; (80014d0 <MX_TIM3_Init+0xe8>)
 800141c:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 800141e:	4b2b      	ldr	r3, [pc, #172]	; (80014cc <MX_TIM3_Init+0xe4>)
 8001420:	2263      	movs	r2, #99	; 0x63
 8001422:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001424:	4b29      	ldr	r3, [pc, #164]	; (80014cc <MX_TIM3_Init+0xe4>)
 8001426:	2200      	movs	r2, #0
 8001428:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000;
 800142a:	4b28      	ldr	r3, [pc, #160]	; (80014cc <MX_TIM3_Init+0xe4>)
 800142c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001430:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001432:	4b26      	ldr	r3, [pc, #152]	; (80014cc <MX_TIM3_Init+0xe4>)
 8001434:	2200      	movs	r2, #0
 8001436:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001438:	4b24      	ldr	r3, [pc, #144]	; (80014cc <MX_TIM3_Init+0xe4>)
 800143a:	2200      	movs	r2, #0
 800143c:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800143e:	4823      	ldr	r0, [pc, #140]	; (80014cc <MX_TIM3_Init+0xe4>)
 8001440:	f005 fe18 	bl	8007074 <HAL_TIM_Base_Init>
 8001444:	4603      	mov	r3, r0
 8001446:	2b00      	cmp	r3, #0
 8001448:	d001      	beq.n	800144e <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 800144a:	f001 ff87 	bl	800335c <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800144e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001452:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001454:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001458:	4619      	mov	r1, r3
 800145a:	481c      	ldr	r0, [pc, #112]	; (80014cc <MX_TIM3_Init+0xe4>)
 800145c:	f006 fb1a 	bl	8007a94 <HAL_TIM_ConfigClockSource>
 8001460:	4603      	mov	r3, r0
 8001462:	2b00      	cmp	r3, #0
 8001464:	d001      	beq.n	800146a <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 8001466:	f001 ff79 	bl	800335c <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800146a:	4818      	ldr	r0, [pc, #96]	; (80014cc <MX_TIM3_Init+0xe4>)
 800146c:	f005 ff0e 	bl	800728c <HAL_TIM_PWM_Init>
 8001470:	4603      	mov	r3, r0
 8001472:	2b00      	cmp	r3, #0
 8001474:	d001      	beq.n	800147a <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 8001476:	f001 ff71 	bl	800335c <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800147a:	2300      	movs	r3, #0
 800147c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800147e:	2300      	movs	r3, #0
 8001480:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001482:	f107 0320 	add.w	r3, r7, #32
 8001486:	4619      	mov	r1, r3
 8001488:	4810      	ldr	r0, [pc, #64]	; (80014cc <MX_TIM3_Init+0xe4>)
 800148a:	f006 febb 	bl	8008204 <HAL_TIMEx_MasterConfigSynchronization>
 800148e:	4603      	mov	r3, r0
 8001490:	2b00      	cmp	r3, #0
 8001492:	d001      	beq.n	8001498 <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 8001494:	f001 ff62 	bl	800335c <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001498:	2360      	movs	r3, #96	; 0x60
 800149a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800149c:	2300      	movs	r3, #0
 800149e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 80014a0:	2300      	movs	r3, #0
 80014a2:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 80014a4:	2300      	movs	r3, #0
 80014a6:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a8:	1d3b      	adds	r3, r7, #4
 80014aa:	2200      	movs	r2, #0
 80014ac:	4619      	mov	r1, r3
 80014ae:	4807      	ldr	r0, [pc, #28]	; (80014cc <MX_TIM3_Init+0xe4>)
 80014b0:	f006 fa32 	bl	8007918 <HAL_TIM_PWM_ConfigChannel>
 80014b4:	4603      	mov	r3, r0
 80014b6:	2b00      	cmp	r3, #0
 80014b8:	d001      	beq.n	80014be <MX_TIM3_Init+0xd6>
	{
		Error_Handler();
 80014ba:	f001 ff4f 	bl	800335c <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 80014be:	4803      	ldr	r0, [pc, #12]	; (80014cc <MX_TIM3_Init+0xe4>)
 80014c0:	f002 f85e 	bl	8003580 <HAL_TIM_MspPostInit>

}
 80014c4:	bf00      	nop
 80014c6:	3738      	adds	r7, #56	; 0x38
 80014c8:	46bd      	mov	sp, r7
 80014ca:	bd80      	pop	{r7, pc}
 80014cc:	2000088c 	.word	0x2000088c
 80014d0:	40000400 	.word	0x40000400

080014d4 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 80014d4:	b580      	push	{r7, lr}
 80014d6:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 80014d8:	4b12      	ldr	r3, [pc, #72]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014da:	4a13      	ldr	r2, [pc, #76]	; (8001528 <MX_USART2_UART_Init+0x54>)
 80014dc:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 512000;
 80014de:	4b11      	ldr	r3, [pc, #68]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014e0:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80014e4:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80014e6:	4b0f      	ldr	r3, [pc, #60]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014e8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014ec:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014ee:	4b0d      	ldr	r3, [pc, #52]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014f0:	2200      	movs	r2, #0
 80014f2:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_EVEN;
 80014f4:	4b0b      	ldr	r3, [pc, #44]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014f6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014fa:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014fc:	4b09      	ldr	r3, [pc, #36]	; (8001524 <MX_USART2_UART_Init+0x50>)
 80014fe:	220c      	movs	r2, #12
 8001500:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001502:	4b08      	ldr	r3, [pc, #32]	; (8001524 <MX_USART2_UART_Init+0x50>)
 8001504:	2200      	movs	r2, #0
 8001506:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001508:	4b06      	ldr	r3, [pc, #24]	; (8001524 <MX_USART2_UART_Init+0x50>)
 800150a:	2200      	movs	r2, #0
 800150c:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 800150e:	4805      	ldr	r0, [pc, #20]	; (8001524 <MX_USART2_UART_Init+0x50>)
 8001510:	f006 fefa 	bl	8008308 <HAL_UART_Init>
 8001514:	4603      	mov	r3, r0
 8001516:	2b00      	cmp	r3, #0
 8001518:	d001      	beq.n	800151e <MX_USART2_UART_Init+0x4a>
	{
		Error_Handler();
 800151a:	f001 ff1f 	bl	800335c <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 800151e:	bf00      	nop
 8001520:	bd80      	pop	{r7, pc}
 8001522:	bf00      	nop
 8001524:	20000a08 	.word	0x20000a08
 8001528:	40004400 	.word	0x40004400

0800152c <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 800152c:	b580      	push	{r7, lr}
 800152e:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 8001530:	4b11      	ldr	r3, [pc, #68]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 8001532:	4a12      	ldr	r2, [pc, #72]	; (800157c <MX_USART6_UART_Init+0x50>)
 8001534:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 8001536:	4b10      	ldr	r3, [pc, #64]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 8001538:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800153c:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800153e:	4b0e      	ldr	r3, [pc, #56]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 8001540:	2200      	movs	r2, #0
 8001542:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 8001544:	4b0c      	ldr	r3, [pc, #48]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 8001546:	2200      	movs	r2, #0
 8001548:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 800154a:	4b0b      	ldr	r3, [pc, #44]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 800154c:	2200      	movs	r2, #0
 800154e:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 8001550:	4b09      	ldr	r3, [pc, #36]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 8001552:	220c      	movs	r2, #12
 8001554:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001556:	4b08      	ldr	r3, [pc, #32]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 8001558:	2200      	movs	r2, #0
 800155a:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800155c:	4b06      	ldr	r3, [pc, #24]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 800155e:	2200      	movs	r2, #0
 8001560:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 8001562:	4805      	ldr	r0, [pc, #20]	; (8001578 <MX_USART6_UART_Init+0x4c>)
 8001564:	f006 fed0 	bl	8008308 <HAL_UART_Init>
 8001568:	4603      	mov	r3, r0
 800156a:	2b00      	cmp	r3, #0
 800156c:	d001      	beq.n	8001572 <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 800156e:	f001 fef5 	bl	800335c <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 8001572:	bf00      	nop
 8001574:	bd80      	pop	{r7, pc}
 8001576:	bf00      	nop
 8001578:	2000097c 	.word	0x2000097c
 800157c:	40011400 	.word	0x40011400

08001580 <MX_DMA_Init>:

/**
 * Enable DMA controller clock
 */
static void MX_DMA_Init(void)
{
 8001580:	b580      	push	{r7, lr}
 8001582:	b082      	sub	sp, #8
 8001584:	af00      	add	r7, sp, #0

	/* DMA controller clock enable */
	__HAL_RCC_DMA1_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b10      	ldr	r3, [pc, #64]	; (80015cc <MX_DMA_Init+0x4c>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a0f      	ldr	r2, [pc, #60]	; (80015cc <MX_DMA_Init+0x4c>)
 8001590:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b0d      	ldr	r3, [pc, #52]	; (80015cc <MX_DMA_Init+0x4c>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

	/* DMA interrupt init */
	/* DMA1_Stream5_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2100      	movs	r1, #0
 80015a6:	2010      	movs	r0, #16
 80015a8:	f002 fb97 	bl	8003cda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015ac:	2010      	movs	r0, #16
 80015ae:	f002 fbb0 	bl	8003d12 <HAL_NVIC_EnableIRQ>
	/* DMA1_Stream6_IRQn interrupt configuration */
	HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015b2:	2200      	movs	r2, #0
 80015b4:	2100      	movs	r1, #0
 80015b6:	2011      	movs	r0, #17
 80015b8:	f002 fb8f 	bl	8003cda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015bc:	2011      	movs	r0, #17
 80015be:	f002 fba8 	bl	8003d12 <HAL_NVIC_EnableIRQ>

}
 80015c2:	bf00      	nop
 80015c4:	3708      	adds	r7, #8
 80015c6:	46bd      	mov	sp, r7
 80015c8:	bd80      	pop	{r7, pc}
 80015ca:	bf00      	nop
 80015cc:	40023800 	.word	0x40023800

080015d0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80015d0:	b580      	push	{r7, lr}
 80015d2:	b08a      	sub	sp, #40	; 0x28
 80015d4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015d6:	f107 0314 	add.w	r3, r7, #20
 80015da:	2200      	movs	r2, #0
 80015dc:	601a      	str	r2, [r3, #0]
 80015de:	605a      	str	r2, [r3, #4]
 80015e0:	609a      	str	r2, [r3, #8]
 80015e2:	60da      	str	r2, [r3, #12]
 80015e4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80015e6:	2300      	movs	r3, #0
 80015e8:	613b      	str	r3, [r7, #16]
 80015ea:	4b4a      	ldr	r3, [pc, #296]	; (8001714 <MX_GPIO_Init+0x144>)
 80015ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ee:	4a49      	ldr	r2, [pc, #292]	; (8001714 <MX_GPIO_Init+0x144>)
 80015f0:	f043 0304 	orr.w	r3, r3, #4
 80015f4:	6313      	str	r3, [r2, #48]	; 0x30
 80015f6:	4b47      	ldr	r3, [pc, #284]	; (8001714 <MX_GPIO_Init+0x144>)
 80015f8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015fa:	f003 0304 	and.w	r3, r3, #4
 80015fe:	613b      	str	r3, [r7, #16]
 8001600:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001602:	2300      	movs	r3, #0
 8001604:	60fb      	str	r3, [r7, #12]
 8001606:	4b43      	ldr	r3, [pc, #268]	; (8001714 <MX_GPIO_Init+0x144>)
 8001608:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160a:	4a42      	ldr	r2, [pc, #264]	; (8001714 <MX_GPIO_Init+0x144>)
 800160c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001610:	6313      	str	r3, [r2, #48]	; 0x30
 8001612:	4b40      	ldr	r3, [pc, #256]	; (8001714 <MX_GPIO_Init+0x144>)
 8001614:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001616:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800161a:	60fb      	str	r3, [r7, #12]
 800161c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800161e:	2300      	movs	r3, #0
 8001620:	60bb      	str	r3, [r7, #8]
 8001622:	4b3c      	ldr	r3, [pc, #240]	; (8001714 <MX_GPIO_Init+0x144>)
 8001624:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001626:	4a3b      	ldr	r2, [pc, #236]	; (8001714 <MX_GPIO_Init+0x144>)
 8001628:	f043 0301 	orr.w	r3, r3, #1
 800162c:	6313      	str	r3, [r2, #48]	; 0x30
 800162e:	4b39      	ldr	r3, [pc, #228]	; (8001714 <MX_GPIO_Init+0x144>)
 8001630:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001632:	f003 0301 	and.w	r3, r3, #1
 8001636:	60bb      	str	r3, [r7, #8]
 8001638:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800163a:	2300      	movs	r3, #0
 800163c:	607b      	str	r3, [r7, #4]
 800163e:	4b35      	ldr	r3, [pc, #212]	; (8001714 <MX_GPIO_Init+0x144>)
 8001640:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001642:	4a34      	ldr	r2, [pc, #208]	; (8001714 <MX_GPIO_Init+0x144>)
 8001644:	f043 0302 	orr.w	r3, r3, #2
 8001648:	6313      	str	r3, [r2, #48]	; 0x30
 800164a:	4b32      	ldr	r3, [pc, #200]	; (8001714 <MX_GPIO_Init+0x144>)
 800164c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800164e:	f003 0302 	and.w	r3, r3, #2
 8001652:	607b      	str	r3, [r7, #4]
 8001654:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001656:	2200      	movs	r2, #0
 8001658:	2120      	movs	r1, #32
 800165a:	482f      	ldr	r0, [pc, #188]	; (8001718 <MX_GPIO_Init+0x148>)
 800165c:	f003 f916 	bl	800488c <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001660:	2200      	movs	r2, #0
 8001662:	2130      	movs	r1, #48	; 0x30
 8001664:	482d      	ldr	r0, [pc, #180]	; (800171c <MX_GPIO_Init+0x14c>)
 8001666:	f003 f911 	bl	800488c <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800166a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800166e:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001670:	4b2b      	ldr	r3, [pc, #172]	; (8001720 <MX_GPIO_Init+0x150>)
 8001672:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001674:	2300      	movs	r3, #0
 8001676:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001678:	f107 0314 	add.w	r3, r7, #20
 800167c:	4619      	mov	r1, r3
 800167e:	4829      	ldr	r0, [pc, #164]	; (8001724 <MX_GPIO_Init+0x154>)
 8001680:	f002 ff80 	bl	8004584 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001684:	2320      	movs	r3, #32
 8001686:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001688:	2301      	movs	r3, #1
 800168a:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800168c:	2300      	movs	r3, #0
 800168e:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001690:	2300      	movs	r3, #0
 8001692:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001694:	f107 0314 	add.w	r3, r7, #20
 8001698:	4619      	mov	r1, r3
 800169a:	481f      	ldr	r0, [pc, #124]	; (8001718 <MX_GPIO_Init+0x148>)
 800169c:	f002 ff72 	bl	8004584 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80016a0:	2380      	movs	r3, #128	; 0x80
 80016a2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016a4:	4b20      	ldr	r3, [pc, #128]	; (8001728 <MX_GPIO_Init+0x158>)
 80016a6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a8:	2300      	movs	r3, #0
 80016aa:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016ac:	f107 0314 	add.w	r3, r7, #20
 80016b0:	4619      	mov	r1, r3
 80016b2:	4819      	ldr	r0, [pc, #100]	; (8001718 <MX_GPIO_Init+0x148>)
 80016b4:	f002 ff66 	bl	8004584 <HAL_GPIO_Init>

	/*Configure GPIO pin : PB3 */
	GPIO_InitStruct.Pin = GPIO_PIN_3;
 80016b8:	2308      	movs	r3, #8
 80016ba:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80016bc:	4b1a      	ldr	r3, [pc, #104]	; (8001728 <MX_GPIO_Init+0x158>)
 80016be:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016c0:	2301      	movs	r3, #1
 80016c2:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4814      	ldr	r0, [pc, #80]	; (800171c <MX_GPIO_Init+0x14c>)
 80016cc:	f002 ff5a 	bl	8004584 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB4 PB5 */
	GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 80016d0:	2330      	movs	r3, #48	; 0x30
 80016d2:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016d4:	2311      	movs	r3, #17
 80016d6:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016d8:	2301      	movs	r3, #1
 80016da:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016dc:	2300      	movs	r3, #0
 80016de:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016e0:	f107 0314 	add.w	r3, r7, #20
 80016e4:	4619      	mov	r1, r3
 80016e6:	480d      	ldr	r0, [pc, #52]	; (800171c <MX_GPIO_Init+0x14c>)
 80016e8:	f002 ff4c 	bl	8004584 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI3_IRQn, 0, 0);
 80016ec:	2200      	movs	r2, #0
 80016ee:	2100      	movs	r1, #0
 80016f0:	2009      	movs	r0, #9
 80016f2:	f002 faf2 	bl	8003cda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI3_IRQn);
 80016f6:	2009      	movs	r0, #9
 80016f8:	f002 fb0b 	bl	8003d12 <HAL_NVIC_EnableIRQ>

	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016fc:	2200      	movs	r2, #0
 80016fe:	2100      	movs	r1, #0
 8001700:	2017      	movs	r0, #23
 8001702:	f002 faea 	bl	8003cda <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001706:	2017      	movs	r0, #23
 8001708:	f002 fb03 	bl	8003d12 <HAL_NVIC_EnableIRQ>

}
 800170c:	bf00      	nop
 800170e:	3728      	adds	r7, #40	; 0x28
 8001710:	46bd      	mov	sp, r7
 8001712:	bd80      	pop	{r7, pc}
 8001714:	40023800 	.word	0x40023800
 8001718:	40020000 	.word	0x40020000
 800171c:	40020400 	.word	0x40020400
 8001720:	10210000 	.word	0x10210000
 8001724:	40020800 	.word	0x40020800
 8001728:	10110000 	.word	0x10110000

0800172c <UARTInit>:
/* USER CODE BEGIN 4 */
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void UARTInit(UARTStucrture *uart)
{
 800172c:	b580      	push	{r7, lr}
 800172e:	b082      	sub	sp, #8
 8001730:	af00      	add	r7, sp, #0
 8001732:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001734:	4b10      	ldr	r3, [pc, #64]	; (8001778 <UARTInit+0x4c>)
 8001736:	88db      	ldrh	r3, [r3, #6]
 8001738:	4619      	mov	r1, r3
 800173a:	2001      	movs	r0, #1
 800173c:	f007 fd22 	bl	8009184 <calloc>
 8001740:	4603      	mov	r3, r0
 8001742:	461a      	mov	r2, r3
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001748:	4b0b      	ldr	r3, [pc, #44]	; (8001778 <UARTInit+0x4c>)
 800174a:	889b      	ldrh	r3, [r3, #4]
 800174c:	4619      	mov	r1, r3
 800174e:	2001      	movs	r0, #1
 8001750:	f007 fd18 	bl	8009184 <calloc>
 8001754:	4603      	mov	r3, r0
 8001756:	461a      	mov	r2, r3
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	2200      	movs	r2, #0
 8001760:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001762:	687b      	ldr	r3, [r7, #4]
 8001764:	2200      	movs	r2, #0
 8001766:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001768:	687b      	ldr	r3, [r7, #4]
 800176a:	2200      	movs	r2, #0
 800176c:	81da      	strh	r2, [r3, #14]

}
 800176e:	bf00      	nop
 8001770:	3708      	adds	r7, #8
 8001772:	46bd      	mov	sp, r7
 8001774:	bd80      	pop	{r7, pc}
 8001776:	bf00      	nop
 8001778:	200000ac 	.word	0x200000ac

0800177c <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 800177c:	b580      	push	{r7, lr}
 800177e:	b082      	sub	sp, #8
 8001780:	af00      	add	r7, sp, #0
 8001782:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001784:	687b      	ldr	r3, [r7, #4]
 8001786:	6818      	ldr	r0, [r3, #0]
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	6919      	ldr	r1, [r3, #16]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	88db      	ldrh	r3, [r3, #6]
 8001790:	461a      	mov	r2, r3
 8001792:	f006 fe73 	bl	800847c <HAL_UART_Receive_DMA>
}
 8001796:	bf00      	nop
 8001798:	3708      	adds	r7, #8
 800179a:	46bd      	mov	sp, r7
 800179c:	bd80      	pop	{r7, pc}

0800179e <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 800179e:	b480      	push	{r7}
 80017a0:	b083      	sub	sp, #12
 80017a2:	af00      	add	r7, sp, #0
 80017a4:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	88db      	ldrh	r3, [r3, #6]
 80017aa:	461a      	mov	r2, r3
 80017ac:	687b      	ldr	r3, [r7, #4]
 80017ae:	681b      	ldr	r3, [r3, #0]
 80017b0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80017b2:	681b      	ldr	r3, [r3, #0]
 80017b4:	685b      	ldr	r3, [r3, #4]
 80017b6:	1ad3      	subs	r3, r2, r3
}
 80017b8:	4618      	mov	r0, r3
 80017ba:	370c      	adds	r7, #12
 80017bc:	46bd      	mov	sp, r7
 80017be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80017c2:	4770      	bx	lr

080017c4 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 80017c4:	b590      	push	{r4, r7, lr}
 80017c6:	b085      	sub	sp, #20
 80017c8:	af00      	add	r7, sp, #0
 80017ca:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80017cc:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017d0:	81fb      	strh	r3, [r7, #14]
	static uint8_t order = 0;
	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80017d2:	687b      	ldr	r3, [r7, #4]
 80017d4:	8a9b      	ldrh	r3, [r3, #20]
 80017d6:	461c      	mov	r4, r3
 80017d8:	6878      	ldr	r0, [r7, #4]
 80017da:	f7ff ffe0 	bl	800179e <UARTGetRxHead>
 80017de:	4603      	mov	r3, r0
 80017e0:	429c      	cmp	r4, r3
 80017e2:	d02e      	beq.n	8001842 <UARTReadChar+0x7e>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80017e4:	687b      	ldr	r3, [r7, #4]
 80017e6:	691b      	ldr	r3, [r3, #16]
 80017e8:	687a      	ldr	r2, [r7, #4]
 80017ea:	8a92      	ldrh	r2, [r2, #20]
 80017ec:	4413      	add	r3, r2
 80017ee:	781b      	ldrb	r3, [r3, #0]
 80017f0:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80017f2:	687b      	ldr	r3, [r7, #4]
 80017f4:	8a9b      	ldrh	r3, [r3, #20]
 80017f6:	3301      	adds	r3, #1
 80017f8:	687a      	ldr	r2, [r7, #4]
 80017fa:	88d2      	ldrh	r2, [r2, #6]
 80017fc:	fb93 f1f2 	sdiv	r1, r3, r2
 8001800:	fb02 f201 	mul.w	r2, r2, r1
 8001804:	1a9b      	subs	r3, r3, r2
 8001806:	b29a      	uxth	r2, r3
 8001808:	687b      	ldr	r3, [r7, #4]
 800180a:	829a      	strh	r2, [r3, #20]
		store[order] = Result;
 800180c:	4b10      	ldr	r3, [pc, #64]	; (8001850 <UARTReadChar+0x8c>)
 800180e:	781b      	ldrb	r3, [r3, #0]
 8001810:	461a      	mov	r2, r3
 8001812:	89f9      	ldrh	r1, [r7, #14]
 8001814:	4b0f      	ldr	r3, [pc, #60]	; (8001854 <UARTReadChar+0x90>)
 8001816:	f823 1012 	strh.w	r1, [r3, r2, lsl #1]
		order += 1;
 800181a:	4b0d      	ldr	r3, [pc, #52]	; (8001850 <UARTReadChar+0x8c>)
 800181c:	781b      	ldrb	r3, [r3, #0]
 800181e:	3301      	adds	r3, #1
 8001820:	b2da      	uxtb	r2, r3
 8001822:	4b0b      	ldr	r3, [pc, #44]	; (8001850 <UARTReadChar+0x8c>)
 8001824:	701a      	strb	r2, [r3, #0]
		order %= 20;
 8001826:	4b0a      	ldr	r3, [pc, #40]	; (8001850 <UARTReadChar+0x8c>)
 8001828:	781a      	ldrb	r2, [r3, #0]
 800182a:	4b0b      	ldr	r3, [pc, #44]	; (8001858 <UARTReadChar+0x94>)
 800182c:	fba3 1302 	umull	r1, r3, r3, r2
 8001830:	0919      	lsrs	r1, r3, #4
 8001832:	460b      	mov	r3, r1
 8001834:	009b      	lsls	r3, r3, #2
 8001836:	440b      	add	r3, r1
 8001838:	009b      	lsls	r3, r3, #2
 800183a:	1ad3      	subs	r3, r2, r3
 800183c:	b2da      	uxtb	r2, r3
 800183e:	4b04      	ldr	r3, [pc, #16]	; (8001850 <UARTReadChar+0x8c>)
 8001840:	701a      	strb	r2, [r3, #0]

	}
	return Result;
 8001842:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 8001846:	4618      	mov	r0, r3
 8001848:	3714      	adds	r7, #20
 800184a:	46bd      	mov	sp, r7
 800184c:	bd90      	pop	{r4, r7, pc}
 800184e:	bf00      	nop
 8001850:	20000760 	.word	0x20000760
 8001854:	200006dc 	.word	0x200006dc
 8001858:	cccccccd 	.word	0xcccccccd

0800185c <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 800185c:	b580      	push	{r7, lr}
 800185e:	b084      	sub	sp, #16
 8001860:	af00      	add	r7, sp, #0
 8001862:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001864:	687b      	ldr	r3, [r7, #4]
 8001866:	681b      	ldr	r3, [r3, #0]
 8001868:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800186c:	b2db      	uxtb	r3, r3
 800186e:	2b20      	cmp	r3, #32
 8001870:	d13d      	bne.n	80018ee <UARTTxDumpBuffer+0x92>
 8001872:	4b21      	ldr	r3, [pc, #132]	; (80018f8 <UARTTxDumpBuffer+0x9c>)
 8001874:	781b      	ldrb	r3, [r3, #0]
 8001876:	2b00      	cmp	r3, #0
 8001878:	d139      	bne.n	80018ee <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800187a:	4b1f      	ldr	r3, [pc, #124]	; (80018f8 <UARTTxDumpBuffer+0x9c>)
 800187c:	2201      	movs	r2, #1
 800187e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8001880:	687b      	ldr	r3, [r7, #4]
 8001882:	89da      	ldrh	r2, [r3, #14]
 8001884:	687b      	ldr	r3, [r7, #4]
 8001886:	899b      	ldrh	r3, [r3, #12]
 8001888:	429a      	cmp	r2, r3
 800188a:	d02d      	beq.n	80018e8 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 800188c:	687b      	ldr	r3, [r7, #4]
 800188e:	89da      	ldrh	r2, [r3, #14]
 8001890:	687b      	ldr	r3, [r7, #4]
 8001892:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001894:	429a      	cmp	r2, r3
 8001896:	d906      	bls.n	80018a6 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8001898:	687b      	ldr	r3, [r7, #4]
 800189a:	89da      	ldrh	r2, [r3, #14]
 800189c:	687b      	ldr	r3, [r7, #4]
 800189e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80018a0:	1ad3      	subs	r3, r2, r3
 80018a2:	b29b      	uxth	r3, r3
 80018a4:	e005      	b.n	80018b2 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80018a6:	687b      	ldr	r3, [r7, #4]
 80018a8:	889a      	ldrh	r2, [r3, #4]
 80018aa:	687b      	ldr	r3, [r7, #4]
 80018ac:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80018ae:	1ad3      	subs	r3, r2, r3
 80018b0:	b29b      	uxth	r3, r3
 80018b2:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80018b4:	687b      	ldr	r3, [r7, #4]
 80018b6:	6818      	ldr	r0, [r3, #0]
 80018b8:	687b      	ldr	r3, [r7, #4]
 80018ba:	689b      	ldr	r3, [r3, #8]
 80018bc:	687a      	ldr	r2, [r7, #4]
 80018be:	8992      	ldrh	r2, [r2, #12]
 80018c0:	4413      	add	r3, r2
 80018c2:	89fa      	ldrh	r2, [r7, #14]
 80018c4:	4619      	mov	r1, r3
 80018c6:	f006 fd6d 	bl	80083a4 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80018ca:	687b      	ldr	r3, [r7, #4]
 80018cc:	899b      	ldrh	r3, [r3, #12]
 80018ce:	461a      	mov	r2, r3
 80018d0:	89fb      	ldrh	r3, [r7, #14]
 80018d2:	4413      	add	r3, r2
 80018d4:	687a      	ldr	r2, [r7, #4]
 80018d6:	8892      	ldrh	r2, [r2, #4]
 80018d8:	fb93 f1f2 	sdiv	r1, r3, r2
 80018dc:	fb02 f201 	mul.w	r2, r2, r1
 80018e0:	1a9b      	subs	r3, r3, r2
 80018e2:	b29a      	uxth	r2, r3
 80018e4:	687b      	ldr	r3, [r7, #4]
 80018e6:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80018e8:	4b03      	ldr	r3, [pc, #12]	; (80018f8 <UARTTxDumpBuffer+0x9c>)
 80018ea:	2200      	movs	r2, #0
 80018ec:	701a      	strb	r2, [r3, #0]
	}
}
 80018ee:	bf00      	nop
 80018f0:	3710      	adds	r7, #16
 80018f2:	46bd      	mov	sp, r7
 80018f4:	bd80      	pop	{r7, pc}
 80018f6:	bf00      	nop
 80018f8:	20000761 	.word	0x20000761

080018fc <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 80018fc:	b580      	push	{r7, lr}
 80018fe:	b086      	sub	sp, #24
 8001900:	af00      	add	r7, sp, #0
 8001902:	60f8      	str	r0, [r7, #12]
 8001904:	60b9      	str	r1, [r7, #8]
 8001906:	4613      	mov	r3, r2
 8001908:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800190a:	68fb      	ldr	r3, [r7, #12]
 800190c:	889b      	ldrh	r3, [r3, #4]
 800190e:	88fa      	ldrh	r2, [r7, #6]
 8001910:	4293      	cmp	r3, r2
 8001912:	bf28      	it	cs
 8001914:	4613      	movcs	r3, r2
 8001916:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001918:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 800191a:	68fb      	ldr	r3, [r7, #12]
 800191c:	889b      	ldrh	r3, [r3, #4]
 800191e:	4619      	mov	r1, r3
 8001920:	68fb      	ldr	r3, [r7, #12]
 8001922:	89db      	ldrh	r3, [r3, #14]
 8001924:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 8001926:	4293      	cmp	r3, r2
 8001928:	bfa8      	it	ge
 800192a:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 800192c:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 800192e:	68fb      	ldr	r3, [r7, #12]
 8001930:	689b      	ldr	r3, [r3, #8]
 8001932:	68fa      	ldr	r2, [r7, #12]
 8001934:	89d2      	ldrh	r2, [r2, #14]
 8001936:	4413      	add	r3, r2
 8001938:	8aba      	ldrh	r2, [r7, #20]
 800193a:	68b9      	ldr	r1, [r7, #8]
 800193c:	4618      	mov	r0, r3
 800193e:	f007 fc53 	bl	80091e8 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 8001942:	68fb      	ldr	r3, [r7, #12]
 8001944:	89db      	ldrh	r3, [r3, #14]
 8001946:	461a      	mov	r2, r3
 8001948:	8afb      	ldrh	r3, [r7, #22]
 800194a:	4413      	add	r3, r2
 800194c:	68fa      	ldr	r2, [r7, #12]
 800194e:	8892      	ldrh	r2, [r2, #4]
 8001950:	fb93 f1f2 	sdiv	r1, r3, r2
 8001954:	fb02 f201 	mul.w	r2, r2, r1
 8001958:	1a9b      	subs	r3, r3, r2
 800195a:	b29a      	uxth	r2, r3
 800195c:	68fb      	ldr	r3, [r7, #12]
 800195e:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 8001960:	8afa      	ldrh	r2, [r7, #22]
 8001962:	8abb      	ldrh	r3, [r7, #20]
 8001964:	429a      	cmp	r2, r3
 8001966:	d00a      	beq.n	800197e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8001968:	68fb      	ldr	r3, [r7, #12]
 800196a:	6898      	ldr	r0, [r3, #8]
 800196c:	8abb      	ldrh	r3, [r7, #20]
 800196e:	68ba      	ldr	r2, [r7, #8]
 8001970:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8001972:	8afa      	ldrh	r2, [r7, #22]
 8001974:	8abb      	ldrh	r3, [r7, #20]
 8001976:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8001978:	461a      	mov	r2, r3
 800197a:	f007 fc35 	bl	80091e8 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800197e:	68f8      	ldr	r0, [r7, #12]
 8001980:	f7ff ff6c 	bl	800185c <UARTTxDumpBuffer>

}
 8001984:	bf00      	nop
 8001986:	3718      	adds	r7, #24
 8001988:	46bd      	mov	sp, r7
 800198a:	bd80      	pop	{r7, pc}

0800198c <DynamixelProtocal2>:

void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 800198c:	b580      	push	{r7, lr}
 800198e:	b09a      	sub	sp, #104	; 0x68
 8001990:	af00      	add	r7, sp, #0
 8001992:	60f8      	str	r0, [r7, #12]
 8001994:	607b      	str	r3, [r7, #4]
 8001996:	460b      	mov	r3, r1
 8001998:	72fb      	strb	r3, [r7, #11]
 800199a:	4613      	mov	r3, r2
 800199c:	813b      	strh	r3, [r7, #8]
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;


	//Pj. Var.
	A = dataIn ;
 800199e:	893a      	ldrh	r2, [r7, #8]
 80019a0:	4ba8      	ldr	r3, [pc, #672]	; (8001c44 <DynamixelProtocal2+0x2b8>)
 80019a2:	801a      	strh	r2, [r3, #0]


	//	Pj.State Machine
	switch (State)
 80019a4:	4ba8      	ldr	r3, [pc, #672]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 80019a6:	781b      	ldrb	r3, [r3, #0]
 80019a8:	2b27      	cmp	r3, #39	; 0x27
 80019aa:	f200 84aa 	bhi.w	8002302 <DynamixelProtocal2+0x976>
 80019ae:	a201      	add	r2, pc, #4	; (adr r2, 80019b4 <DynamixelProtocal2+0x28>)
 80019b0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80019b4:	08001a77 	.word	0x08001a77
 80019b8:	08002303 	.word	0x08002303
 80019bc:	08002303 	.word	0x08002303
 80019c0:	08002303 	.word	0x08002303
 80019c4:	08002303 	.word	0x08002303
 80019c8:	08002303 	.word	0x08002303
 80019cc:	08002303 	.word	0x08002303
 80019d0:	08002303 	.word	0x08002303
 80019d4:	08002303 	.word	0x08002303
 80019d8:	08002303 	.word	0x08002303
 80019dc:	08002303 	.word	0x08002303
 80019e0:	08002303 	.word	0x08002303
 80019e4:	08002303 	.word	0x08002303
 80019e8:	08002303 	.word	0x08002303
 80019ec:	08002303 	.word	0x08002303
 80019f0:	08002303 	.word	0x08002303
 80019f4:	08002303 	.word	0x08002303
 80019f8:	08001b97 	.word	0x08001b97
 80019fc:	08001bb9 	.word	0x08001bb9
 8001a00:	08001bdb 	.word	0x08001bdb
 8001a04:	08001bfd 	.word	0x08001bfd
 8001a08:	08001c1f 	.word	0x08001c1f
 8001a0c:	08001c65 	.word	0x08001c65
 8001a10:	08001c8b 	.word	0x08001c8b
 8001a14:	08002303 	.word	0x08002303
 8001a18:	08001d41 	.word	0x08001d41
 8001a1c:	08001fb9 	.word	0x08001fb9
 8001a20:	08001da9 	.word	0x08001da9
 8001a24:	08002115 	.word	0x08002115
 8001a28:	08002303 	.word	0x08002303
 8001a2c:	08002303 	.word	0x08002303
 8001a30:	0800227f 	.word	0x0800227f
 8001a34:	08001a55 	.word	0x08001a55
 8001a38:	08001a63 	.word	0x08001a63
 8001a3c:	08002303 	.word	0x08002303
 8001a40:	08002303 	.word	0x08002303
 8001a44:	08001d39 	.word	0x08001d39
 8001a48:	08001cd3 	.word	0x08001cd3
 8001a4c:	08001cf5 	.word	0x08001cf5
 8001a50:	08001d17 	.word	0x08001d17
	{
	case CheckACK1:
		if ((dataIn &0xFF) == 0x58)
 8001a54:	893b      	ldrh	r3, [r7, #8]
 8001a56:	b2db      	uxtb	r3, r3
 8001a58:	2b58      	cmp	r3, #88	; 0x58
 8001a5a:	d102      	bne.n	8001a62 <DynamixelProtocal2+0xd6>
			State = CheckACK2 ;
 8001a5c:	4b7a      	ldr	r3, [pc, #488]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001a5e:	2221      	movs	r2, #33	; 0x21
 8001a60:	701a      	strb	r2, [r3, #0]
	case CheckACK2:
		if ((dataIn &0xFF) == 0x75)
 8001a62:	893b      	ldrh	r3, [r7, #8]
 8001a64:	b2db      	uxtb	r3, r3
 8001a66:	2b75      	cmp	r3, #117	; 0x75
 8001a68:	d102      	bne.n	8001a70 <DynamixelProtocal2+0xe4>
			ACK = 0;
 8001a6a:	4b78      	ldr	r3, [pc, #480]	; (8001c4c <DynamixelProtocal2+0x2c0>)
 8001a6c:	2200      	movs	r2, #0
 8001a6e:	801a      	strh	r2, [r3, #0]
		State = S_idle ;
 8001a70:	4b75      	ldr	r3, [pc, #468]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001a72:	2200      	movs	r2, #0
 8001a74:	701a      	strb	r2, [r3, #0]

	case S_idle:
		if (ACK == 1)
 8001a76:	4b75      	ldr	r3, [pc, #468]	; (8001c4c <DynamixelProtocal2+0x2c0>)
 8001a78:	881b      	ldrh	r3, [r3, #0]
 8001a7a:	2b01      	cmp	r3, #1
 8001a7c:	d104      	bne.n	8001a88 <DynamixelProtocal2+0xfc>
		{
			State = CheckACK1;
 8001a7e:	4b72      	ldr	r3, [pc, #456]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001a80:	2220      	movs	r2, #32
 8001a82:	701a      	strb	r2, [r3, #0]
			else
			{
				State = S_idle ;
			}
		}
		break;
 8001a84:	f000 bc3d 	b.w	8002302 <DynamixelProtocal2+0x976>
			if (((dataIn >> 4) & 0xff) == 0x09)
 8001a88:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a8c:	111b      	asrs	r3, r3, #4
 8001a8e:	b21b      	sxth	r3, r3
 8001a90:	b29b      	uxth	r3, r3
 8001a92:	b2db      	uxtb	r3, r3
 8001a94:	2b09      	cmp	r3, #9
 8001a96:	d179      	bne.n	8001b8c <DynamixelProtocal2+0x200>
				START = dataIn;
 8001a98:	893a      	ldrh	r2, [r7, #8]
 8001a9a:	4b6d      	ldr	r3, [pc, #436]	; (8001c50 <DynamixelProtocal2+0x2c4>)
 8001a9c:	801a      	strh	r2, [r3, #0]
				if ((dataIn &0x0F) == 0x02 || (dataIn &0x0F) == 0x03 || (dataIn &0x0F) >= 0x08) //case 2,3,8-14 Frame#1
 8001a9e:	893b      	ldrh	r3, [r7, #8]
 8001aa0:	f003 030f 	and.w	r3, r3, #15
 8001aa4:	2b02      	cmp	r3, #2
 8001aa6:	d009      	beq.n	8001abc <DynamixelProtocal2+0x130>
 8001aa8:	893b      	ldrh	r3, [r7, #8]
 8001aaa:	f003 030f 	and.w	r3, r3, #15
 8001aae:	2b03      	cmp	r3, #3
 8001ab0:	d004      	beq.n	8001abc <DynamixelProtocal2+0x130>
 8001ab2:	893b      	ldrh	r3, [r7, #8]
 8001ab4:	f003 0308 	and.w	r3, r3, #8
 8001ab8:	2b00      	cmp	r3, #0
 8001aba:	d022      	beq.n	8001b02 <DynamixelProtocal2+0x176>
					if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001abc:	893b      	ldrh	r3, [r7, #8]
 8001abe:	f003 030f 	and.w	r3, r3, #15
 8001ac2:	2b09      	cmp	r3, #9
 8001ac4:	d009      	beq.n	8001ada <DynamixelProtocal2+0x14e>
 8001ac6:	893b      	ldrh	r3, [r7, #8]
 8001ac8:	f003 030f 	and.w	r3, r3, #15
 8001acc:	2b0a      	cmp	r3, #10
 8001ace:	d004      	beq.n	8001ada <DynamixelProtocal2+0x14e>
 8001ad0:	893b      	ldrh	r3, [r7, #8]
 8001ad2:	f003 030f 	and.w	r3, r3, #15
 8001ad6:	2b0b      	cmp	r3, #11
 8001ad8:	d109      	bne.n	8001aee <DynamixelProtocal2+0x162>
						MODE = dataIn &0x0F ;
 8001ada:	893b      	ldrh	r3, [r7, #8]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	b29a      	uxth	r2, r3
 8001ae2:	4b5c      	ldr	r3, [pc, #368]	; (8001c54 <DynamixelProtocal2+0x2c8>)
 8001ae4:	801a      	strh	r2, [r3, #0]
						State = S_Checksum1_2;
 8001ae6:	4b58      	ldr	r3, [pc, #352]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001ae8:	221b      	movs	r2, #27
 8001aea:	701a      	strb	r2, [r3, #0]
					if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001aec:	e052      	b.n	8001b94 <DynamixelProtocal2+0x208>
						MODE = dataIn &0x0F ;
 8001aee:	893b      	ldrh	r3, [r7, #8]
 8001af0:	f003 030f 	and.w	r3, r3, #15
 8001af4:	b29a      	uxth	r2, r3
 8001af6:	4b57      	ldr	r3, [pc, #348]	; (8001c54 <DynamixelProtocal2+0x2c8>)
 8001af8:	801a      	strh	r2, [r3, #0]
						State = S_Checksum1;
 8001afa:	4b53      	ldr	r3, [pc, #332]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001afc:	221a      	movs	r2, #26
 8001afe:	701a      	strb	r2, [r3, #0]
					if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001b00:	e048      	b.n	8001b94 <DynamixelProtocal2+0x208>
				else if ((dataIn &0x0F) == 0x01 || ((dataIn &0x0F) <= 0x06)) //case 1,6 Frame#2
 8001b02:	893b      	ldrh	r3, [r7, #8]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	2b01      	cmp	r3, #1
 8001b0a:	d004      	beq.n	8001b16 <DynamixelProtocal2+0x18a>
 8001b0c:	893b      	ldrh	r3, [r7, #8]
 8001b0e:	f003 030f 	and.w	r3, r3, #15
 8001b12:	2b06      	cmp	r3, #6
 8001b14:	dc09      	bgt.n	8001b2a <DynamixelProtocal2+0x19e>
					MODE = dataIn &0x0F ;
 8001b16:	893b      	ldrh	r3, [r7, #8]
 8001b18:	f003 030f 	and.w	r3, r3, #15
 8001b1c:	b29a      	uxth	r2, r3
 8001b1e:	4b4d      	ldr	r3, [pc, #308]	; (8001c54 <DynamixelProtocal2+0x2c8>)
 8001b20:	801a      	strh	r2, [r3, #0]
					State = S_Frame2_DataFrame_1;
 8001b22:	4b49      	ldr	r3, [pc, #292]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001b24:	2211      	movs	r2, #17
 8001b26:	701a      	strb	r2, [r3, #0]
 8001b28:	e034      	b.n	8001b94 <DynamixelProtocal2+0x208>
				else if ((dataIn &0x0F) == 0x04) //case 4 Frame#2
 8001b2a:	893b      	ldrh	r3, [r7, #8]
 8001b2c:	f003 030f 	and.w	r3, r3, #15
 8001b30:	2b04      	cmp	r3, #4
 8001b32:	d109      	bne.n	8001b48 <DynamixelProtocal2+0x1bc>
					MODE = dataIn &0x0F ;
 8001b34:	893b      	ldrh	r3, [r7, #8]
 8001b36:	f003 030f 	and.w	r3, r3, #15
 8001b3a:	b29a      	uxth	r2, r3
 8001b3c:	4b45      	ldr	r3, [pc, #276]	; (8001c54 <DynamixelProtocal2+0x2c8>)
 8001b3e:	801a      	strh	r2, [r3, #0]
					State = S_Frame2_DataFrame_1;
 8001b40:	4b41      	ldr	r3, [pc, #260]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001b42:	2211      	movs	r2, #17
 8001b44:	701a      	strb	r2, [r3, #0]
		break;
 8001b46:	e3dc      	b.n	8002302 <DynamixelProtocal2+0x976>
				else if ((dataIn &0x0F) == 0x05) //case 5 Frame#2
 8001b48:	893b      	ldrh	r3, [r7, #8]
 8001b4a:	f003 030f 	and.w	r3, r3, #15
 8001b4e:	2b05      	cmp	r3, #5
 8001b50:	d109      	bne.n	8001b66 <DynamixelProtocal2+0x1da>
					MODE = dataIn &0x0F ;
 8001b52:	893b      	ldrh	r3, [r7, #8]
 8001b54:	f003 030f 	and.w	r3, r3, #15
 8001b58:	b29a      	uxth	r2, r3
 8001b5a:	4b3e      	ldr	r3, [pc, #248]	; (8001c54 <DynamixelProtocal2+0x2c8>)
 8001b5c:	801a      	strh	r2, [r3, #0]
					State = S_Frame2_DataFrame_Mode5_1;
 8001b5e:	4b3a      	ldr	r3, [pc, #232]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001b60:	2215      	movs	r2, #21
 8001b62:	701a      	strb	r2, [r3, #0]
		break;
 8001b64:	e3cd      	b.n	8002302 <DynamixelProtocal2+0x976>
				else if ((dataIn &0x0F) == 0x07) //case 7 Frame#3
 8001b66:	893b      	ldrh	r3, [r7, #8]
 8001b68:	f003 030f 	and.w	r3, r3, #15
 8001b6c:	2b07      	cmp	r3, #7
 8001b6e:	d109      	bne.n	8001b84 <DynamixelProtocal2+0x1f8>
					MODE = dataIn &0x0F ;
 8001b70:	893b      	ldrh	r3, [r7, #8]
 8001b72:	f003 030f 	and.w	r3, r3, #15
 8001b76:	b29a      	uxth	r2, r3
 8001b78:	4b36      	ldr	r3, [pc, #216]	; (8001c54 <DynamixelProtocal2+0x2c8>)
 8001b7a:	801a      	strh	r2, [r3, #0]
					State = S_Frame3_Station;
 8001b7c:	4b32      	ldr	r3, [pc, #200]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001b7e:	2217      	movs	r2, #23
 8001b80:	701a      	strb	r2, [r3, #0]
		break;
 8001b82:	e3be      	b.n	8002302 <DynamixelProtocal2+0x976>
					State = S_idle ;
 8001b84:	4b30      	ldr	r3, [pc, #192]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001b86:	2200      	movs	r2, #0
 8001b88:	701a      	strb	r2, [r3, #0]
		break;
 8001b8a:	e3ba      	b.n	8002302 <DynamixelProtocal2+0x976>
				State = S_idle ;
 8001b8c:	4b2e      	ldr	r3, [pc, #184]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001b8e:	2200      	movs	r2, #0
 8001b90:	701a      	strb	r2, [r3, #0]
		break;
 8001b92:	e3b6      	b.n	8002302 <DynamixelProtocal2+0x976>
 8001b94:	e3b5      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Frame2_DataFrame_1 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001b96:	4b30      	ldr	r3, [pc, #192]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001b98:	881b      	ldrh	r3, [r3, #0]
 8001b9a:	461a      	mov	r2, r3
 8001b9c:	893b      	ldrh	r3, [r7, #8]
 8001b9e:	b2d9      	uxtb	r1, r3
 8001ba0:	4b2e      	ldr	r3, [pc, #184]	; (8001c5c <DynamixelProtocal2+0x2d0>)
 8001ba2:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001ba4:	4b2c      	ldr	r3, [pc, #176]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001ba6:	881b      	ldrh	r3, [r3, #0]
 8001ba8:	3301      	adds	r3, #1
 8001baa:	b29a      	uxth	r2, r3
 8001bac:	4b2a      	ldr	r3, [pc, #168]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bae:	801a      	strh	r2, [r3, #0]
		State = S_Frame2_DataFrame_2;
 8001bb0:	4b25      	ldr	r3, [pc, #148]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001bb2:	2212      	movs	r2, #18
 8001bb4:	701a      	strb	r2, [r3, #0]
		break;
 8001bb6:	e3a4      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Frame2_DataFrame_2:
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001bb8:	4b27      	ldr	r3, [pc, #156]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bba:	881b      	ldrh	r3, [r3, #0]
 8001bbc:	461a      	mov	r2, r3
 8001bbe:	893b      	ldrh	r3, [r7, #8]
 8001bc0:	b2d9      	uxtb	r1, r3
 8001bc2:	4b26      	ldr	r3, [pc, #152]	; (8001c5c <DynamixelProtocal2+0x2d0>)
 8001bc4:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001bc6:	4b24      	ldr	r3, [pc, #144]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bc8:	881b      	ldrh	r3, [r3, #0]
 8001bca:	3301      	adds	r3, #1
 8001bcc:	b29a      	uxth	r2, r3
 8001bce:	4b22      	ldr	r3, [pc, #136]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bd0:	801a      	strh	r2, [r3, #0]
		State = S_Checksum2 ;
 8001bd2:	4b1d      	ldr	r3, [pc, #116]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001bd4:	221c      	movs	r2, #28
 8001bd6:	701a      	strb	r2, [r3, #0]
		break;
 8001bd8:	e393      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Frame2_DataFrame_Mode4_1 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001bda:	4b1f      	ldr	r3, [pc, #124]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bdc:	881b      	ldrh	r3, [r3, #0]
 8001bde:	461a      	mov	r2, r3
 8001be0:	893b      	ldrh	r3, [r7, #8]
 8001be2:	b2d9      	uxtb	r1, r3
 8001be4:	4b1d      	ldr	r3, [pc, #116]	; (8001c5c <DynamixelProtocal2+0x2d0>)
 8001be6:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001be8:	4b1b      	ldr	r3, [pc, #108]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bea:	881b      	ldrh	r3, [r3, #0]
 8001bec:	3301      	adds	r3, #1
 8001bee:	b29a      	uxth	r2, r3
 8001bf0:	4b19      	ldr	r3, [pc, #100]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bf2:	801a      	strh	r2, [r3, #0]
		State = S_Frame2_DataFrame_Mode4_2;
 8001bf4:	4b14      	ldr	r3, [pc, #80]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001bf6:	2214      	movs	r2, #20
 8001bf8:	701a      	strb	r2, [r3, #0]
		break;
 8001bfa:	e382      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Frame2_DataFrame_Mode4_2:
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001bfc:	4b16      	ldr	r3, [pc, #88]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	461a      	mov	r2, r3
 8001c02:	893b      	ldrh	r3, [r7, #8]
 8001c04:	b2d9      	uxtb	r1, r3
 8001c06:	4b15      	ldr	r3, [pc, #84]	; (8001c5c <DynamixelProtocal2+0x2d0>)
 8001c08:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001c0a:	4b13      	ldr	r3, [pc, #76]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b11      	ldr	r3, [pc, #68]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001c14:	801a      	strh	r2, [r3, #0]
		State = S_Checksum2_4 ;
 8001c16:	4b0c      	ldr	r3, [pc, #48]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001c18:	221d      	movs	r2, #29
 8001c1a:	701a      	strb	r2, [r3, #0]
		break;
 8001c1c:	e371      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Frame2_DataFrame_Mode5_1 :
		DATAFRAME_5[CollectedData] = dataIn &0xff;
 8001c1e:	893b      	ldrh	r3, [r7, #8]
 8001c20:	461a      	mov	r2, r3
 8001c22:	4b0d      	ldr	r3, [pc, #52]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001c24:	881b      	ldrh	r3, [r3, #0]
 8001c26:	4619      	mov	r1, r3
 8001c28:	b2d3      	uxtb	r3, r2
 8001c2a:	4a0d      	ldr	r2, [pc, #52]	; (8001c60 <DynamixelProtocal2+0x2d4>)
 8001c2c:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		CollectedData++;
 8001c30:	4b09      	ldr	r3, [pc, #36]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	3301      	adds	r3, #1
 8001c36:	b29a      	uxth	r2, r3
 8001c38:	4b07      	ldr	r3, [pc, #28]	; (8001c58 <DynamixelProtocal2+0x2cc>)
 8001c3a:	801a      	strh	r2, [r3, #0]
		State = S_Frame2_DataFrame_Mode5_2;
 8001c3c:	4b02      	ldr	r3, [pc, #8]	; (8001c48 <DynamixelProtocal2+0x2bc>)
 8001c3e:	2216      	movs	r2, #22
 8001c40:	701a      	strb	r2, [r3, #0]
		break;
 8001c42:	e35e      	b.n	8002302 <DynamixelProtocal2+0x976>
 8001c44:	200006d8 	.word	0x200006d8
 8001c48:	20000704 	.word	0x20000704
 8001c4c:	200006d6 	.word	0x200006d6
 8001c50:	200001c8 	.word	0x200001c8
 8001c54:	200001ca 	.word	0x200001ca
 8001c58:	20000762 	.word	0x20000762
 8001c5c:	200001cc 	.word	0x200001cc
 8001c60:	200002cc 	.word	0x200002cc

	case S_Frame2_DataFrame_Mode5_2:
		DATAFRAME_5[CollectedData] = dataIn &0xff;
 8001c64:	893b      	ldrh	r3, [r7, #8]
 8001c66:	461a      	mov	r2, r3
 8001c68:	4b9a      	ldr	r3, [pc, #616]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001c6a:	881b      	ldrh	r3, [r3, #0]
 8001c6c:	4619      	mov	r1, r3
 8001c6e:	b2d3      	uxtb	r3, r2
 8001c70:	4a99      	ldr	r2, [pc, #612]	; (8001ed8 <DynamixelProtocal2+0x54c>)
 8001c72:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		CollectedData++;
 8001c76:	4b97      	ldr	r3, [pc, #604]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001c78:	881b      	ldrh	r3, [r3, #0]
 8001c7a:	3301      	adds	r3, #1
 8001c7c:	b29a      	uxth	r2, r3
 8001c7e:	4b95      	ldr	r3, [pc, #596]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001c80:	801a      	strh	r2, [r3, #0]
		State = S_Checksum2_5 ;
 8001c82:	4b96      	ldr	r3, [pc, #600]	; (8001edc <DynamixelProtocal2+0x550>)
 8001c84:	221e      	movs	r2, #30
 8001c86:	701a      	strb	r2, [r3, #0]
		break;
 8001c88:	e33b      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Frame3_Station:
		STATION = dataIn &0xff;
 8001c8a:	893b      	ldrh	r3, [r7, #8]
 8001c8c:	b2da      	uxtb	r2, r3
 8001c8e:	4b94      	ldr	r3, [pc, #592]	; (8001ee0 <DynamixelProtocal2+0x554>)
 8001c90:	701a      	strb	r2, [r3, #0]
		DATA = (STATION) &0xff;
 8001c92:	4b93      	ldr	r3, [pc, #588]	; (8001ee0 <DynamixelProtocal2+0x554>)
 8001c94:	781b      	ldrb	r3, [r3, #0]
 8001c96:	b29a      	uxth	r2, r3
 8001c98:	4b92      	ldr	r3, [pc, #584]	; (8001ee4 <DynamixelProtocal2+0x558>)
 8001c9a:	801a      	strh	r2, [r3, #0]
		if(DATA % 2 == 0) 				//EVEN
 8001c9c:	4b91      	ldr	r3, [pc, #580]	; (8001ee4 <DynamixelProtocal2+0x558>)
 8001c9e:	881b      	ldrh	r3, [r3, #0]
 8001ca0:	f003 0301 	and.w	r3, r3, #1
 8001ca4:	b29b      	uxth	r3, r3
 8001ca6:	2b00      	cmp	r3, #0
 8001ca8:	d106      	bne.n	8001cb8 <DynamixelProtocal2+0x32c>
		{
			DATA_Byte = (DATA/2);
 8001caa:	4b8e      	ldr	r3, [pc, #568]	; (8001ee4 <DynamixelProtocal2+0x558>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	085b      	lsrs	r3, r3, #1
 8001cb0:	b29a      	uxth	r2, r3
 8001cb2:	4b8d      	ldr	r3, [pc, #564]	; (8001ee8 <DynamixelProtocal2+0x55c>)
 8001cb4:	801a      	strh	r2, [r3, #0]
 8001cb6:	e008      	b.n	8001cca <DynamixelProtocal2+0x33e>
		}
		else							//odd
		{
			DATA_Byte = (DATA+1)/2;
 8001cb8:	4b8a      	ldr	r3, [pc, #552]	; (8001ee4 <DynamixelProtocal2+0x558>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	0fda      	lsrs	r2, r3, #31
 8001cc0:	4413      	add	r3, r2
 8001cc2:	105b      	asrs	r3, r3, #1
 8001cc4:	b29a      	uxth	r2, r3
 8001cc6:	4b88      	ldr	r3, [pc, #544]	; (8001ee8 <DynamixelProtocal2+0x55c>)
 8001cc8:	801a      	strh	r2, [r3, #0]
		}
		State = S_Frame3_DataFrame_2;
 8001cca:	4b84      	ldr	r3, [pc, #528]	; (8001edc <DynamixelProtocal2+0x550>)
 8001ccc:	2219      	movs	r2, #25
 8001cce:	701a      	strb	r2, [r3, #0]
		break;
 8001cd0:	e317      	b.n	8002302 <DynamixelProtocal2+0x976>


	case S500 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001cd2:	4b80      	ldr	r3, [pc, #512]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001cd4:	881b      	ldrh	r3, [r3, #0]
 8001cd6:	461a      	mov	r2, r3
 8001cd8:	893b      	ldrh	r3, [r7, #8]
 8001cda:	b2d9      	uxtb	r1, r3
 8001cdc:	4b83      	ldr	r3, [pc, #524]	; (8001eec <DynamixelProtocal2+0x560>)
 8001cde:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001ce0:	4b7c      	ldr	r3, [pc, #496]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001ce2:	881b      	ldrh	r3, [r3, #0]
 8001ce4:	3301      	adds	r3, #1
 8001ce6:	b29a      	uxth	r2, r3
 8001ce8:	4b7a      	ldr	r3, [pc, #488]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001cea:	801a      	strh	r2, [r3, #0]
		State = S600;
 8001cec:	4b7b      	ldr	r3, [pc, #492]	; (8001edc <DynamixelProtocal2+0x550>)
 8001cee:	2226      	movs	r2, #38	; 0x26
 8001cf0:	701a      	strb	r2, [r3, #0]
		break;
 8001cf2:	e306      	b.n	8002302 <DynamixelProtocal2+0x976>
	case S600 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001cf4:	4b77      	ldr	r3, [pc, #476]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001cf6:	881b      	ldrh	r3, [r3, #0]
 8001cf8:	461a      	mov	r2, r3
 8001cfa:	893b      	ldrh	r3, [r7, #8]
 8001cfc:	b2d9      	uxtb	r1, r3
 8001cfe:	4b7b      	ldr	r3, [pc, #492]	; (8001eec <DynamixelProtocal2+0x560>)
 8001d00:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001d02:	4b74      	ldr	r3, [pc, #464]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d04:	881b      	ldrh	r3, [r3, #0]
 8001d06:	3301      	adds	r3, #1
 8001d08:	b29a      	uxth	r2, r3
 8001d0a:	4b72      	ldr	r3, [pc, #456]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d0c:	801a      	strh	r2, [r3, #0]
		State = S700;
 8001d0e:	4b73      	ldr	r3, [pc, #460]	; (8001edc <DynamixelProtocal2+0x550>)
 8001d10:	2227      	movs	r2, #39	; 0x27
 8001d12:	701a      	strb	r2, [r3, #0]
		break;
 8001d14:	e2f5      	b.n	8002302 <DynamixelProtocal2+0x976>
	case S700 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001d16:	4b6f      	ldr	r3, [pc, #444]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d18:	881b      	ldrh	r3, [r3, #0]
 8001d1a:	461a      	mov	r2, r3
 8001d1c:	893b      	ldrh	r3, [r7, #8]
 8001d1e:	b2d9      	uxtb	r1, r3
 8001d20:	4b72      	ldr	r3, [pc, #456]	; (8001eec <DynamixelProtocal2+0x560>)
 8001d22:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001d24:	4b6b      	ldr	r3, [pc, #428]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d26:	881b      	ldrh	r3, [r3, #0]
 8001d28:	3301      	adds	r3, #1
 8001d2a:	b29a      	uxth	r2, r3
 8001d2c:	4b69      	ldr	r3, [pc, #420]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d2e:	801a      	strh	r2, [r3, #0]
		State = S_Checksum3;
 8001d30:	4b6a      	ldr	r3, [pc, #424]	; (8001edc <DynamixelProtocal2+0x550>)
 8001d32:	221f      	movs	r2, #31
 8001d34:	701a      	strb	r2, [r3, #0]
		break;
 8001d36:	e2e4      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Jump :
		State = S_Checksum3;
 8001d38:	4b68      	ldr	r3, [pc, #416]	; (8001edc <DynamixelProtocal2+0x550>)
 8001d3a:	221f      	movs	r2, #31
 8001d3c:	701a      	strb	r2, [r3, #0]
		break;
 8001d3e:	e2e0      	b.n	8002302 <DynamixelProtocal2+0x976>

	case  S_Frame3_DataFrame_2:
	{
		if (x < DATA_Byte)
 8001d40:	4b6b      	ldr	r3, [pc, #428]	; (8001ef0 <DynamixelProtocal2+0x564>)
 8001d42:	781b      	ldrb	r3, [r3, #0]
 8001d44:	b29a      	uxth	r2, r3
 8001d46:	4b68      	ldr	r3, [pc, #416]	; (8001ee8 <DynamixelProtocal2+0x55c>)
 8001d48:	881b      	ldrh	r3, [r3, #0]
 8001d4a:	429a      	cmp	r2, r3
 8001d4c:	d222      	bcs.n	8001d94 <DynamixelProtocal2+0x408>
		{
			x++;
 8001d4e:	4b68      	ldr	r3, [pc, #416]	; (8001ef0 <DynamixelProtocal2+0x564>)
 8001d50:	781b      	ldrb	r3, [r3, #0]
 8001d52:	3301      	adds	r3, #1
 8001d54:	b2da      	uxtb	r2, r3
 8001d56:	4b66      	ldr	r3, [pc, #408]	; (8001ef0 <DynamixelProtocal2+0x564>)
 8001d58:	701a      	strb	r2, [r3, #0]
			S = dataIn &0xff;
 8001d5a:	893b      	ldrh	r3, [r7, #8]
 8001d5c:	b2db      	uxtb	r3, r3
 8001d5e:	b29a      	uxth	r2, r3
 8001d60:	4b64      	ldr	r3, [pc, #400]	; (8001ef4 <DynamixelProtocal2+0x568>)
 8001d62:	801a      	strh	r2, [r3, #0]
			DATA_N_SUM += S;
 8001d64:	4b63      	ldr	r3, [pc, #396]	; (8001ef4 <DynamixelProtocal2+0x568>)
 8001d66:	881b      	ldrh	r3, [r3, #0]
 8001d68:	b2da      	uxtb	r2, r3
 8001d6a:	4b63      	ldr	r3, [pc, #396]	; (8001ef8 <DynamixelProtocal2+0x56c>)
 8001d6c:	781b      	ldrb	r3, [r3, #0]
 8001d6e:	4413      	add	r3, r2
 8001d70:	b2da      	uxtb	r2, r3
 8001d72:	4b61      	ldr	r3, [pc, #388]	; (8001ef8 <DynamixelProtocal2+0x56c>)
 8001d74:	701a      	strb	r2, [r3, #0]
			DATAFRAME[CollectedData] = S;
 8001d76:	4b5f      	ldr	r3, [pc, #380]	; (8001ef4 <DynamixelProtocal2+0x568>)
 8001d78:	8819      	ldrh	r1, [r3, #0]
 8001d7a:	4b56      	ldr	r3, [pc, #344]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d7c:	881b      	ldrh	r3, [r3, #0]
 8001d7e:	461a      	mov	r2, r3
 8001d80:	b2c9      	uxtb	r1, r1
 8001d82:	4b5a      	ldr	r3, [pc, #360]	; (8001eec <DynamixelProtocal2+0x560>)
 8001d84:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8001d86:	4b53      	ldr	r3, [pc, #332]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d88:	881b      	ldrh	r3, [r3, #0]
 8001d8a:	3301      	adds	r3, #1
 8001d8c:	b29a      	uxth	r2, r3
 8001d8e:	4b51      	ldr	r3, [pc, #324]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001d90:	801a      	strh	r2, [r3, #0]
 8001d92:	e005      	b.n	8001da0 <DynamixelProtocal2+0x414>

		}
		else
		{
			B+=1;
 8001d94:	4b59      	ldr	r3, [pc, #356]	; (8001efc <DynamixelProtocal2+0x570>)
 8001d96:	881b      	ldrh	r3, [r3, #0]
 8001d98:	3301      	adds	r3, #1
 8001d9a:	b29a      	uxth	r2, r3
 8001d9c:	4b57      	ldr	r3, [pc, #348]	; (8001efc <DynamixelProtocal2+0x570>)
 8001d9e:	801a      	strh	r2, [r3, #0]
		}
		State = S_Checksum3;
 8001da0:	4b4e      	ldr	r3, [pc, #312]	; (8001edc <DynamixelProtocal2+0x550>)
 8001da2:	221f      	movs	r2, #31
 8001da4:	701a      	strb	r2, [r3, #0]
		break;
 8001da6:	e2ac      	b.n	8002302 <DynamixelProtocal2+0x976>
	}

	case S_Checksum1_2:
		CHECKSUM = dataIn & 0xff ;
 8001da8:	893b      	ldrh	r3, [r7, #8]
 8001daa:	b2da      	uxtb	r2, r3
 8001dac:	4b54      	ldr	r3, [pc, #336]	; (8001f00 <DynamixelProtocal2+0x574>)
 8001dae:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~((0x9 << 4) | MODE );
 8001db0:	4b54      	ldr	r3, [pc, #336]	; (8001f04 <DynamixelProtocal2+0x578>)
 8001db2:	881b      	ldrh	r3, [r3, #0]
 8001db4:	b2db      	uxtb	r3, r3
 8001db6:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001dba:	b2db      	uxtb	r3, r3
 8001dbc:	43db      	mvns	r3, r3
 8001dbe:	b2da      	uxtb	r2, r3
 8001dc0:	4b51      	ldr	r3, [pc, #324]	; (8001f08 <DynamixelProtocal2+0x57c>)
 8001dc2:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 8001dc4:	4b50      	ldr	r3, [pc, #320]	; (8001f08 <DynamixelProtocal2+0x57c>)
 8001dc6:	781a      	ldrb	r2, [r3, #0]
 8001dc8:	4b4d      	ldr	r3, [pc, #308]	; (8001f00 <DynamixelProtocal2+0x574>)
 8001dca:	781b      	ldrb	r3, [r3, #0]
 8001dcc:	429a      	cmp	r2, r3
 8001dce:	f040 80d9 	bne.w	8001f84 <DynamixelProtocal2+0x5f8>
		{
			switch (MODE)
 8001dd2:	4b4c      	ldr	r3, [pc, #304]	; (8001f04 <DynamixelProtocal2+0x578>)
 8001dd4:	881b      	ldrh	r3, [r3, #0]
 8001dd6:	2b0b      	cmp	r3, #11
 8001dd8:	f000 809a 	beq.w	8001f10 <DynamixelProtocal2+0x584>
 8001ddc:	2b0b      	cmp	r3, #11
 8001dde:	f300 80e4 	bgt.w	8001faa <DynamixelProtocal2+0x61e>
 8001de2:	2b09      	cmp	r3, #9
 8001de4:	d002      	beq.n	8001dec <DynamixelProtocal2+0x460>
 8001de6:	2b0a      	cmp	r3, #10
 8001de8:	d03a      	beq.n	8001e60 <DynamixelProtocal2+0x4d4>
 8001dea:	e0de      	b.n	8001faa <DynamixelProtocal2+0x61e>
			{
			case 0b1001: //9
			{
				uint8_t temp[] = {0x58,0x75};
 8001dec:	f247 5358 	movw	r3, #30040	; 0x7558
 8001df0:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
				UARTTxWrite(uart, temp, 2);
 8001df4:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001df8:	2202      	movs	r2, #2
 8001dfa:	4619      	mov	r1, r3
 8001dfc:	6878      	ldr	r0, [r7, #4]
 8001dfe:	f7ff fd7d 	bl	80018fc <UARTTxWrite>
				CHECK_SEND = ~ (0x99 + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001e02:	4b34      	ldr	r3, [pc, #208]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001e04:	881b      	ldrh	r3, [r3, #0]
 8001e06:	3b02      	subs	r3, #2
 8001e08:	4a38      	ldr	r2, [pc, #224]	; (8001eec <DynamixelProtocal2+0x560>)
 8001e0a:	5cd2      	ldrb	r2, [r2, r3]
 8001e0c:	4b31      	ldr	r3, [pc, #196]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001e0e:	881b      	ldrh	r3, [r3, #0]
 8001e10:	3b01      	subs	r3, #1
 8001e12:	4936      	ldr	r1, [pc, #216]	; (8001eec <DynamixelProtocal2+0x560>)
 8001e14:	5ccb      	ldrb	r3, [r1, r3]
 8001e16:	4413      	add	r3, r2
 8001e18:	b2db      	uxtb	r3, r3
 8001e1a:	3b67      	subs	r3, #103	; 0x67
 8001e1c:	b2db      	uxtb	r3, r3
 8001e1e:	43db      	mvns	r3, r3
 8001e20:	b2da      	uxtb	r2, r3
 8001e22:	4b3a      	ldr	r3, [pc, #232]	; (8001f0c <DynamixelProtocal2+0x580>)
 8001e24:	701a      	strb	r2, [r3, #0]
				uint8_t FRAME2[] = {0x99,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001e26:	2399      	movs	r3, #153	; 0x99
 8001e28:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8001e2c:	4b29      	ldr	r3, [pc, #164]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001e2e:	881b      	ldrh	r3, [r3, #0]
 8001e30:	3b02      	subs	r3, #2
 8001e32:	4a2e      	ldr	r2, [pc, #184]	; (8001eec <DynamixelProtocal2+0x560>)
 8001e34:	5cd3      	ldrb	r3, [r2, r3]
 8001e36:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8001e3a:	4b26      	ldr	r3, [pc, #152]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001e3c:	881b      	ldrh	r3, [r3, #0]
 8001e3e:	3b01      	subs	r3, #1
 8001e40:	4a2a      	ldr	r2, [pc, #168]	; (8001eec <DynamixelProtocal2+0x560>)
 8001e42:	5cd3      	ldrb	r3, [r2, r3]
 8001e44:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001e48:	4b30      	ldr	r3, [pc, #192]	; (8001f0c <DynamixelProtocal2+0x580>)
 8001e4a:	781b      	ldrb	r3, [r3, #0]
 8001e4c:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
				UARTTxWrite(uart, FRAME2, 4);
 8001e50:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e54:	2204      	movs	r2, #4
 8001e56:	4619      	mov	r1, r3
 8001e58:	6878      	ldr	r0, [r7, #4]
 8001e5a:	f7ff fd4f 	bl	80018fc <UARTTxWrite>
				break;
 8001e5e:	e0a4      	b.n	8001faa <DynamixelProtocal2+0x61e>
			}
			case 0b1010: //10
			{
				uint8_t temp[] = {0x58,0x75};
 8001e60:	f247 5358 	movw	r3, #30040	; 0x7558
 8001e64:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
				UARTTxWrite(uart, temp, 2);
 8001e68:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001e6c:	2202      	movs	r2, #2
 8001e6e:	4619      	mov	r1, r3
 8001e70:	6878      	ldr	r0, [r7, #4]
 8001e72:	f7ff fd43 	bl	80018fc <UARTTxWrite>
				CHECK_SEND = ~(0x9A + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001e76:	4b17      	ldr	r3, [pc, #92]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001e78:	881b      	ldrh	r3, [r3, #0]
 8001e7a:	3b02      	subs	r3, #2
 8001e7c:	4a1b      	ldr	r2, [pc, #108]	; (8001eec <DynamixelProtocal2+0x560>)
 8001e7e:	5cd2      	ldrb	r2, [r2, r3]
 8001e80:	4b14      	ldr	r3, [pc, #80]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001e82:	881b      	ldrh	r3, [r3, #0]
 8001e84:	3b01      	subs	r3, #1
 8001e86:	4919      	ldr	r1, [pc, #100]	; (8001eec <DynamixelProtocal2+0x560>)
 8001e88:	5ccb      	ldrb	r3, [r1, r3]
 8001e8a:	4413      	add	r3, r2
 8001e8c:	b2db      	uxtb	r3, r3
 8001e8e:	3b66      	subs	r3, #102	; 0x66
 8001e90:	b2db      	uxtb	r3, r3
 8001e92:	43db      	mvns	r3, r3
 8001e94:	b2da      	uxtb	r2, r3
 8001e96:	4b1d      	ldr	r3, [pc, #116]	; (8001f0c <DynamixelProtocal2+0x580>)
 8001e98:	701a      	strb	r2, [r3, #0]
				uint8_t FRAME2[] = {0x9A,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001e9a:	239a      	movs	r3, #154	; 0x9a
 8001e9c:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001ea0:	4b0c      	ldr	r3, [pc, #48]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001ea2:	881b      	ldrh	r3, [r3, #0]
 8001ea4:	3b02      	subs	r3, #2
 8001ea6:	4a11      	ldr	r2, [pc, #68]	; (8001eec <DynamixelProtocal2+0x560>)
 8001ea8:	5cd3      	ldrb	r3, [r2, r3]
 8001eaa:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001eae:	4b09      	ldr	r3, [pc, #36]	; (8001ed4 <DynamixelProtocal2+0x548>)
 8001eb0:	881b      	ldrh	r3, [r3, #0]
 8001eb2:	3b01      	subs	r3, #1
 8001eb4:	4a0d      	ldr	r2, [pc, #52]	; (8001eec <DynamixelProtocal2+0x560>)
 8001eb6:	5cd3      	ldrb	r3, [r2, r3]
 8001eb8:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001ebc:	4b13      	ldr	r3, [pc, #76]	; (8001f0c <DynamixelProtocal2+0x580>)
 8001ebe:	781b      	ldrb	r3, [r3, #0]
 8001ec0:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
				UARTTxWrite(uart, FRAME2, 4);
 8001ec4:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001ec8:	2204      	movs	r2, #4
 8001eca:	4619      	mov	r1, r3
 8001ecc:	6878      	ldr	r0, [r7, #4]
 8001ece:	f7ff fd15 	bl	80018fc <UARTTxWrite>
				break;
 8001ed2:	e06a      	b.n	8001faa <DynamixelProtocal2+0x61e>
 8001ed4:	20000762 	.word	0x20000762
 8001ed8:	200002cc 	.word	0x200002cc
 8001edc:	20000704 	.word	0x20000704
 8001ee0:	200006d0 	.word	0x200006d0
 8001ee4:	200006cc 	.word	0x200006cc
 8001ee8:	200006ce 	.word	0x200006ce
 8001eec:	200001cc 	.word	0x200001cc
 8001ef0:	200006d4 	.word	0x200006d4
 8001ef4:	200006d2 	.word	0x200006d2
 8001ef8:	200006d1 	.word	0x200006d1
 8001efc:	200006da 	.word	0x200006da
 8001f00:	200001c3 	.word	0x200001c3
 8001f04:	200001ca 	.word	0x200001ca
 8001f08:	200001c4 	.word	0x200001c4
 8001f0c:	200001c6 	.word	0x200001c6
			}
			case 0b1011: //11
			{
				uint8_t temp[] = {0x58,0x75};
 8001f10:	f247 5358 	movw	r3, #30040	; 0x7558
 8001f14:	f8a7 3054 	strh.w	r3, [r7, #84]	; 0x54
				UARTTxWrite(uart, temp, 2);
 8001f18:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f1c:	2202      	movs	r2, #2
 8001f1e:	4619      	mov	r1, r3
 8001f20:	6878      	ldr	r0, [r7, #4]
 8001f22:	f7ff fceb 	bl	80018fc <UARTTxWrite>
				CHECK_SEND = ~(0x9B + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001f26:	4bb6      	ldr	r3, [pc, #728]	; (8002200 <DynamixelProtocal2+0x874>)
 8001f28:	881b      	ldrh	r3, [r3, #0]
 8001f2a:	3b02      	subs	r3, #2
 8001f2c:	4ab5      	ldr	r2, [pc, #724]	; (8002204 <DynamixelProtocal2+0x878>)
 8001f2e:	5cd2      	ldrb	r2, [r2, r3]
 8001f30:	4bb3      	ldr	r3, [pc, #716]	; (8002200 <DynamixelProtocal2+0x874>)
 8001f32:	881b      	ldrh	r3, [r3, #0]
 8001f34:	3b01      	subs	r3, #1
 8001f36:	49b3      	ldr	r1, [pc, #716]	; (8002204 <DynamixelProtocal2+0x878>)
 8001f38:	5ccb      	ldrb	r3, [r1, r3]
 8001f3a:	4413      	add	r3, r2
 8001f3c:	b2db      	uxtb	r3, r3
 8001f3e:	3b65      	subs	r3, #101	; 0x65
 8001f40:	b2db      	uxtb	r3, r3
 8001f42:	43db      	mvns	r3, r3
 8001f44:	b2da      	uxtb	r2, r3
 8001f46:	4bb0      	ldr	r3, [pc, #704]	; (8002208 <DynamixelProtocal2+0x87c>)
 8001f48:	701a      	strb	r2, [r3, #0]
				uint8_t FRAME2[] = {0x9B,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001f4a:	239b      	movs	r3, #155	; 0x9b
 8001f4c:	f887 3050 	strb.w	r3, [r7, #80]	; 0x50
 8001f50:	4bab      	ldr	r3, [pc, #684]	; (8002200 <DynamixelProtocal2+0x874>)
 8001f52:	881b      	ldrh	r3, [r3, #0]
 8001f54:	3b02      	subs	r3, #2
 8001f56:	4aab      	ldr	r2, [pc, #684]	; (8002204 <DynamixelProtocal2+0x878>)
 8001f58:	5cd3      	ldrb	r3, [r2, r3]
 8001f5a:	f887 3051 	strb.w	r3, [r7, #81]	; 0x51
 8001f5e:	4ba8      	ldr	r3, [pc, #672]	; (8002200 <DynamixelProtocal2+0x874>)
 8001f60:	881b      	ldrh	r3, [r3, #0]
 8001f62:	3b01      	subs	r3, #1
 8001f64:	4aa7      	ldr	r2, [pc, #668]	; (8002204 <DynamixelProtocal2+0x878>)
 8001f66:	5cd3      	ldrb	r3, [r2, r3]
 8001f68:	f887 3052 	strb.w	r3, [r7, #82]	; 0x52
 8001f6c:	4ba6      	ldr	r3, [pc, #664]	; (8002208 <DynamixelProtocal2+0x87c>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	f887 3053 	strb.w	r3, [r7, #83]	; 0x53
				UARTTxWrite(uart, FRAME2, 4);
 8001f74:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001f78:	2204      	movs	r2, #4
 8001f7a:	4619      	mov	r1, r3
 8001f7c:	6878      	ldr	r0, [r7, #4]
 8001f7e:	f7ff fcbd 	bl	80018fc <UARTTxWrite>
				break;
 8001f82:	e012      	b.n	8001faa <DynamixelProtocal2+0x61e>
			}

		}
		else
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
 8001f84:	4ba1      	ldr	r3, [pc, #644]	; (800220c <DynamixelProtocal2+0x880>)
 8001f86:	881b      	ldrh	r3, [r3, #0]
 8001f88:	b2db      	uxtb	r3, r3
 8001f8a:	f887 304c 	strb.w	r3, [r7, #76]	; 0x4c
 8001f8e:	2375      	movs	r3, #117	; 0x75
 8001f90:	f887 304d 	strb.w	r3, [r7, #77]	; 0x4d
 8001f94:	4b9e      	ldr	r3, [pc, #632]	; (8002210 <DynamixelProtocal2+0x884>)
 8001f96:	781b      	ldrb	r3, [r3, #0]
 8001f98:	f887 304e 	strb.w	r3, [r7, #78]	; 0x4e
			UARTTxWrite(uart, temp, 3);
 8001f9c:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 8001fa0:	2203      	movs	r2, #3
 8001fa2:	4619      	mov	r1, r3
 8001fa4:	6878      	ldr	r0, [r7, #4]
 8001fa6:	f7ff fca9 	bl	80018fc <UARTTxWrite>
		}
		ACK = 1;
 8001faa:	4b9a      	ldr	r3, [pc, #616]	; (8002214 <DynamixelProtocal2+0x888>)
 8001fac:	2201      	movs	r2, #1
 8001fae:	801a      	strh	r2, [r3, #0]
		State = S_idle ;
 8001fb0:	4b99      	ldr	r3, [pc, #612]	; (8002218 <DynamixelProtocal2+0x88c>)
 8001fb2:	2200      	movs	r2, #0
 8001fb4:	701a      	strb	r2, [r3, #0]
		break;
 8001fb6:	e1a4      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Checksum1:
		CHECKSUM = dataIn & 0xff ;
 8001fb8:	893b      	ldrh	r3, [r7, #8]
 8001fba:	b2da      	uxtb	r2, r3
 8001fbc:	4b94      	ldr	r3, [pc, #592]	; (8002210 <DynamixelProtocal2+0x884>)
 8001fbe:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~((0x9 << 4) | MODE );
 8001fc0:	4b96      	ldr	r3, [pc, #600]	; (800221c <DynamixelProtocal2+0x890>)
 8001fc2:	881b      	ldrh	r3, [r3, #0]
 8001fc4:	b2db      	uxtb	r3, r3
 8001fc6:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001fca:	b2db      	uxtb	r3, r3
 8001fcc:	43db      	mvns	r3, r3
 8001fce:	b2da      	uxtb	r2, r3
 8001fd0:	4b93      	ldr	r3, [pc, #588]	; (8002220 <DynamixelProtocal2+0x894>)
 8001fd2:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 8001fd4:	4b92      	ldr	r3, [pc, #584]	; (8002220 <DynamixelProtocal2+0x894>)
 8001fd6:	781a      	ldrb	r2, [r3, #0]
 8001fd8:	4b8d      	ldr	r3, [pc, #564]	; (8002210 <DynamixelProtocal2+0x884>)
 8001fda:	781b      	ldrb	r3, [r3, #0]
 8001fdc:	429a      	cmp	r2, r3
 8001fde:	f040 8081 	bne.w	80020e4 <DynamixelProtocal2+0x758>
		{
			switch (MODE)
 8001fe2:	4b8e      	ldr	r3, [pc, #568]	; (800221c <DynamixelProtocal2+0x890>)
 8001fe4:	881b      	ldrh	r3, [r3, #0]
 8001fe6:	3b02      	subs	r3, #2
 8001fe8:	2b0c      	cmp	r3, #12
 8001fea:	f200 8189 	bhi.w	8002300 <DynamixelProtocal2+0x974>
 8001fee:	a201      	add	r2, pc, #4	; (adr r2, 8001ff4 <DynamixelProtocal2+0x668>)
 8001ff0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001ff4:	08002029 	.word	0x08002029
 8001ff8:	08002047 	.word	0x08002047
 8001ffc:	08002301 	.word	0x08002301
 8002000:	08002301 	.word	0x08002301
 8002004:	08002301 	.word	0x08002301
 8002008:	08002301 	.word	0x08002301
 800200c:	08002065 	.word	0x08002065
 8002010:	08002301 	.word	0x08002301
 8002014:	08002301 	.word	0x08002301
 8002018:	08002301 	.word	0x08002301
 800201c:	08002091 	.word	0x08002091
 8002020:	080020ad 	.word	0x080020ad
 8002024:	080020c9 	.word	0x080020c9
			{
			case 0b0010: //2
			{
				uint8_t temp[] = {0x58,0x75};
 8002028:	f247 5358 	movw	r3, #30040	; 0x7558
 800202c:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				UARTTxWrite(uart, temp, 2);
 8002030:	f107 0348 	add.w	r3, r7, #72	; 0x48
 8002034:	2202      	movs	r2, #2
 8002036:	4619      	mov	r1, r3
 8002038:	6878      	ldr	r0, [r7, #4]
 800203a:	f7ff fc5f 	bl	80018fc <UARTTxWrite>
				State = S_idle ;
 800203e:	4b76      	ldr	r3, [pc, #472]	; (8002218 <DynamixelProtocal2+0x88c>)
 8002040:	2200      	movs	r2, #0
 8002042:	701a      	strb	r2, [r3, #0]
				break;
 8002044:	e065      	b.n	8002112 <DynamixelProtocal2+0x786>
			}
			case 0b0011: //3
			{
				uint8_t temp[] = {0x58,0x75};
 8002046:	f247 5358 	movw	r3, #30040	; 0x7558
 800204a:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				UARTTxWrite(uart, temp, 2);
 800204e:	f107 0344 	add.w	r3, r7, #68	; 0x44
 8002052:	2202      	movs	r2, #2
 8002054:	4619      	mov	r1, r3
 8002056:	6878      	ldr	r0, [r7, #4]
 8002058:	f7ff fc50 	bl	80018fc <UARTTxWrite>
				State = S_idle ;
 800205c:	4b6e      	ldr	r3, [pc, #440]	; (8002218 <DynamixelProtocal2+0x88c>)
 800205e:	2200      	movs	r2, #0
 8002060:	701a      	strb	r2, [r3, #0]
				break;
 8002062:	e056      	b.n	8002112 <DynamixelProtocal2+0x786>
			}
			case 0b1000: //8
			{
				uint8_t temp[] = {0x58,0x75};
 8002064:	f247 5358 	movw	r3, #30040	; 0x7558
 8002068:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				//				uint8_t count = 0;                 				//Endeffecter (on / off) : 1
				UARTTxWrite(uart, temp,2);
 800206c:	f107 0340 	add.w	r3, r7, #64	; 0x40
 8002070:	2202      	movs	r2, #2
 8002072:	4619      	mov	r1, r3
 8002074:	6878      	ldr	r0, [r7, #4]
 8002076:	f7ff fc41 	bl	80018fc <UARTTxWrite>
				HAL_Delay(5000);
 800207a:	f241 3088 	movw	r0, #5000	; 0x1388
 800207e:	f001 fd09 	bl	8003a94 <HAL_Delay>
				start = 1;
 8002082:	4b68      	ldr	r3, [pc, #416]	; (8002224 <DynamixelProtocal2+0x898>)
 8002084:	2201      	movs	r2, #1
 8002086:	701a      	strb	r2, [r3, #0]
				State = S_idle;
 8002088:	4b63      	ldr	r3, [pc, #396]	; (8002218 <DynamixelProtocal2+0x88c>)
 800208a:	2200      	movs	r2, #0
 800208c:	701a      	strb	r2, [r3, #0]
				break;
 800208e:	e040      	b.n	8002112 <DynamixelProtocal2+0x786>
			}
			case 0b1100: //12
			{
				uint8_t temp[] = {0x58,0x75};
 8002090:	f247 5358 	movw	r3, #30040	; 0x7558
 8002094:	87bb      	strh	r3, [r7, #60]	; 0x3c
				UARTTxWrite(uart, temp, 2);
 8002096:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 800209a:	2202      	movs	r2, #2
 800209c:	4619      	mov	r1, r3
 800209e:	6878      	ldr	r0, [r7, #4]
 80020a0:	f7ff fc2c 	bl	80018fc <UARTTxWrite>
				State = S_idle ;
 80020a4:	4b5c      	ldr	r3, [pc, #368]	; (8002218 <DynamixelProtocal2+0x88c>)
 80020a6:	2200      	movs	r2, #0
 80020a8:	701a      	strb	r2, [r3, #0]
				break;
 80020aa:	e032      	b.n	8002112 <DynamixelProtocal2+0x786>
			}
			case 0b1101: //13
			{
				uint8_t temp[] = {0x58,0x75};
 80020ac:	f247 5358 	movw	r3, #30040	; 0x7558
 80020b0:	873b      	strh	r3, [r7, #56]	; 0x38
				UARTTxWrite(uart, temp, 2);
 80020b2:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020b6:	2202      	movs	r2, #2
 80020b8:	4619      	mov	r1, r3
 80020ba:	6878      	ldr	r0, [r7, #4]
 80020bc:	f7ff fc1e 	bl	80018fc <UARTTxWrite>
				State = S_idle ;
 80020c0:	4b55      	ldr	r3, [pc, #340]	; (8002218 <DynamixelProtocal2+0x88c>)
 80020c2:	2200      	movs	r2, #0
 80020c4:	701a      	strb	r2, [r3, #0]
				break;
 80020c6:	e024      	b.n	8002112 <DynamixelProtocal2+0x786>
			}
			case 0b1110: //14
			{
				uint8_t temp[] = {0x58,0x75};
 80020c8:	f247 5358 	movw	r3, #30040	; 0x7558
 80020cc:	86bb      	strh	r3, [r7, #52]	; 0x34
				UARTTxWrite(uart, temp, 2);
 80020ce:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020d2:	2202      	movs	r2, #2
 80020d4:	4619      	mov	r1, r3
 80020d6:	6878      	ldr	r0, [r7, #4]
 80020d8:	f7ff fc10 	bl	80018fc <UARTTxWrite>
				State = S_idle ;
 80020dc:	4b4e      	ldr	r3, [pc, #312]	; (8002218 <DynamixelProtocal2+0x88c>)
 80020de:	2200      	movs	r2, #0
 80020e0:	701a      	strb	r2, [r3, #0]
				break;
 80020e2:	e016      	b.n	8002112 <DynamixelProtocal2+0x786>
			}

		}
		else
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
 80020e4:	4b49      	ldr	r3, [pc, #292]	; (800220c <DynamixelProtocal2+0x880>)
 80020e6:	881b      	ldrh	r3, [r3, #0]
 80020e8:	b2db      	uxtb	r3, r3
 80020ea:	f887 3030 	strb.w	r3, [r7, #48]	; 0x30
 80020ee:	2375      	movs	r3, #117	; 0x75
 80020f0:	f887 3031 	strb.w	r3, [r7, #49]	; 0x31
 80020f4:	4b46      	ldr	r3, [pc, #280]	; (8002210 <DynamixelProtocal2+0x884>)
 80020f6:	781b      	ldrb	r3, [r3, #0]
 80020f8:	f887 3032 	strb.w	r3, [r7, #50]	; 0x32
			UARTTxWrite(uart, temp, 3);
 80020fc:	f107 0330 	add.w	r3, r7, #48	; 0x30
 8002100:	2203      	movs	r2, #3
 8002102:	4619      	mov	r1, r3
 8002104:	6878      	ldr	r0, [r7, #4]
 8002106:	f7ff fbf9 	bl	80018fc <UARTTxWrite>
			State = S_idle ;
 800210a:	4b43      	ldr	r3, [pc, #268]	; (8002218 <DynamixelProtocal2+0x88c>)
 800210c:	2200      	movs	r2, #0
 800210e:	701a      	strb	r2, [r3, #0]
		}
		break;
 8002110:	e0f6      	b.n	8002300 <DynamixelProtocal2+0x974>
 8002112:	e0f5      	b.n	8002300 <DynamixelProtocal2+0x974>

	case S_Checksum2:
		CHECKSUM = dataIn & 0xff ;
 8002114:	893b      	ldrh	r3, [r7, #8]
 8002116:	b2da      	uxtb	r2, r3
 8002118:	4b3d      	ldr	r3, [pc, #244]	; (8002210 <DynamixelProtocal2+0x884>)
 800211a:	701a      	strb	r2, [r3, #0]
		CHECK_SUM3 = ~( ((0x9 << 4) | MODE) + STATION + DATA_N_SUM);
 800211c:	4b3f      	ldr	r3, [pc, #252]	; (800221c <DynamixelProtocal2+0x890>)
 800211e:	881b      	ldrh	r3, [r3, #0]
 8002120:	b2db      	uxtb	r3, r3
 8002122:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8002126:	b2da      	uxtb	r2, r3
 8002128:	4b3f      	ldr	r3, [pc, #252]	; (8002228 <DynamixelProtocal2+0x89c>)
 800212a:	781b      	ldrb	r3, [r3, #0]
 800212c:	4413      	add	r3, r2
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b3e      	ldr	r3, [pc, #248]	; (800222c <DynamixelProtocal2+0x8a0>)
 8002132:	781b      	ldrb	r3, [r3, #0]
 8002134:	4413      	add	r3, r2
 8002136:	b2db      	uxtb	r3, r3
 8002138:	43db      	mvns	r3, r3
 800213a:	b2da      	uxtb	r2, r3
 800213c:	4b3c      	ldr	r3, [pc, #240]	; (8002230 <DynamixelProtocal2+0x8a4>)
 800213e:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~( ((0x9 << 4) | MODE) + ((DATAFRAME[CollectedData-1]) + (DATAFRAME[CollectedData-2])) );
 8002140:	4b36      	ldr	r3, [pc, #216]	; (800221c <DynamixelProtocal2+0x890>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	b2db      	uxtb	r3, r3
 8002146:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800214a:	b2da      	uxtb	r2, r3
 800214c:	4b2c      	ldr	r3, [pc, #176]	; (8002200 <DynamixelProtocal2+0x874>)
 800214e:	881b      	ldrh	r3, [r3, #0]
 8002150:	3b01      	subs	r3, #1
 8002152:	492c      	ldr	r1, [pc, #176]	; (8002204 <DynamixelProtocal2+0x878>)
 8002154:	5cc9      	ldrb	r1, [r1, r3]
 8002156:	4b2a      	ldr	r3, [pc, #168]	; (8002200 <DynamixelProtocal2+0x874>)
 8002158:	881b      	ldrh	r3, [r3, #0]
 800215a:	3b02      	subs	r3, #2
 800215c:	4829      	ldr	r0, [pc, #164]	; (8002204 <DynamixelProtocal2+0x878>)
 800215e:	5cc3      	ldrb	r3, [r0, r3]
 8002160:	440b      	add	r3, r1
 8002162:	b2db      	uxtb	r3, r3
 8002164:	4413      	add	r3, r2
 8002166:	b2db      	uxtb	r3, r3
 8002168:	43db      	mvns	r3, r3
 800216a:	b2da      	uxtb	r2, r3
 800216c:	4b2c      	ldr	r3, [pc, #176]	; (8002220 <DynamixelProtocal2+0x894>)
 800216e:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 8002170:	4b2b      	ldr	r3, [pc, #172]	; (8002220 <DynamixelProtocal2+0x894>)
 8002172:	781a      	ldrb	r2, [r3, #0]
 8002174:	4b26      	ldr	r3, [pc, #152]	; (8002210 <DynamixelProtocal2+0x884>)
 8002176:	781b      	ldrb	r3, [r3, #0]
 8002178:	429a      	cmp	r2, r3
 800217a:	d166      	bne.n	800224a <DynamixelProtocal2+0x8be>
		{
			switch (MODE)
 800217c:	4b27      	ldr	r3, [pc, #156]	; (800221c <DynamixelProtocal2+0x890>)
 800217e:	881b      	ldrh	r3, [r3, #0]
 8002180:	3b01      	subs	r3, #1
 8002182:	2b06      	cmp	r3, #6
 8002184:	d871      	bhi.n	800226a <DynamixelProtocal2+0x8de>
 8002186:	a201      	add	r2, pc, #4	; (adr r2, 800218c <DynamixelProtocal2+0x800>)
 8002188:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800218c:	080021a9 	.word	0x080021a9
 8002190:	0800226b 	.word	0x0800226b
 8002194:	0800226b 	.word	0x0800226b
 8002198:	080021bf 	.word	0x080021bf
 800219c:	080021d5 	.word	0x080021d5
 80021a0:	080021eb 	.word	0x080021eb
 80021a4:	08002235 	.word	0x08002235
			{
			case 0b0001: //1
			{
				uint8_t temp[] = {0x58,0x75};
 80021a8:	f247 5358 	movw	r3, #30040	; 0x7558
 80021ac:	85bb      	strh	r3, [r7, #44]	; 0x2c
				UARTTxWrite(uart, temp, 2);
 80021ae:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021b2:	2202      	movs	r2, #2
 80021b4:	4619      	mov	r1, r3
 80021b6:	6878      	ldr	r0, [r7, #4]
 80021b8:	f7ff fba0 	bl	80018fc <UARTTxWrite>
				break;
 80021bc:	e055      	b.n	800226a <DynamixelProtocal2+0x8de>
			}
			case 0b0100: //4
			{
				uint8_t temp[] = {0x58,0x75};
 80021be:	f247 5358 	movw	r3, #30040	; 0x7558
 80021c2:	853b      	strh	r3, [r7, #40]	; 0x28
				UARTTxWrite(uart, temp, 2);
 80021c4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80021c8:	2202      	movs	r2, #2
 80021ca:	4619      	mov	r1, r3
 80021cc:	6878      	ldr	r0, [r7, #4]
 80021ce:	f7ff fb95 	bl	80018fc <UARTTxWrite>
				break;
 80021d2:	e04a      	b.n	800226a <DynamixelProtocal2+0x8de>
			}
			case 0b0101: //5
			{
				uint8_t temp[] = {0x58,0x75};
 80021d4:	f247 5358 	movw	r3, #30040	; 0x7558
 80021d8:	84bb      	strh	r3, [r7, #36]	; 0x24
				UARTTxWrite(uart, temp, 2);
 80021da:	f107 0324 	add.w	r3, r7, #36	; 0x24
 80021de:	2202      	movs	r2, #2
 80021e0:	4619      	mov	r1, r3
 80021e2:	6878      	ldr	r0, [r7, #4]
 80021e4:	f7ff fb8a 	bl	80018fc <UARTTxWrite>
				break;
 80021e8:	e03f      	b.n	800226a <DynamixelProtocal2+0x8de>
			}
			case 0b0110: //6
			{
				uint8_t temp[] = {0x58,0x75};
 80021ea:	f247 5358 	movw	r3, #30040	; 0x7558
 80021ee:	843b      	strh	r3, [r7, #32]
				UARTTxWrite(uart, temp, 2);
 80021f0:	f107 0320 	add.w	r3, r7, #32
 80021f4:	2202      	movs	r2, #2
 80021f6:	4619      	mov	r1, r3
 80021f8:	6878      	ldr	r0, [r7, #4]
 80021fa:	f7ff fb7f 	bl	80018fc <UARTTxWrite>
				break;
 80021fe:	e034      	b.n	800226a <DynamixelProtocal2+0x8de>
 8002200:	20000762 	.word	0x20000762
 8002204:	200001cc 	.word	0x200001cc
 8002208:	200001c6 	.word	0x200001c6
 800220c:	200001c8 	.word	0x200001c8
 8002210:	200001c3 	.word	0x200001c3
 8002214:	200006d6 	.word	0x200006d6
 8002218:	20000704 	.word	0x20000704
 800221c:	200001ca 	.word	0x200001ca
 8002220:	200001c4 	.word	0x200001c4
 8002224:	20000742 	.word	0x20000742
 8002228:	200006d0 	.word	0x200006d0
 800222c:	200006d1 	.word	0x200006d1
 8002230:	200001c5 	.word	0x200001c5
			}
			case 0b0111: //7
			{
				uint8_t temp[] = {0x58,0x75};
 8002234:	f247 5358 	movw	r3, #30040	; 0x7558
 8002238:	83bb      	strh	r3, [r7, #28]
				UARTTxWrite(uart, temp, 2);
 800223a:	f107 031c 	add.w	r3, r7, #28
 800223e:	2202      	movs	r2, #2
 8002240:	4619      	mov	r1, r3
 8002242:	6878      	ldr	r0, [r7, #4]
 8002244:	f7ff fb5a 	bl	80018fc <UARTTxWrite>
				break;
 8002248:	e00f      	b.n	800226a <DynamixelProtocal2+0x8de>
			}
			}
		}
		else
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
 800224a:	4b30      	ldr	r3, [pc, #192]	; (800230c <DynamixelProtocal2+0x980>)
 800224c:	881b      	ldrh	r3, [r3, #0]
 800224e:	b2db      	uxtb	r3, r3
 8002250:	763b      	strb	r3, [r7, #24]
 8002252:	2375      	movs	r3, #117	; 0x75
 8002254:	767b      	strb	r3, [r7, #25]
 8002256:	4b2e      	ldr	r3, [pc, #184]	; (8002310 <DynamixelProtocal2+0x984>)
 8002258:	781b      	ldrb	r3, [r3, #0]
 800225a:	76bb      	strb	r3, [r7, #26]
			UARTTxWrite(uart, temp, 3);
 800225c:	f107 0318 	add.w	r3, r7, #24
 8002260:	2203      	movs	r2, #3
 8002262:	4619      	mov	r1, r3
 8002264:	6878      	ldr	r0, [r7, #4]
 8002266:	f7ff fb49 	bl	80018fc <UARTTxWrite>
		}

		DATA_N_SUM = 0;
 800226a:	4b2a      	ldr	r3, [pc, #168]	; (8002314 <DynamixelProtocal2+0x988>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
		x=0;
 8002270:	4b29      	ldr	r3, [pc, #164]	; (8002318 <DynamixelProtocal2+0x98c>)
 8002272:	2200      	movs	r2, #0
 8002274:	701a      	strb	r2, [r3, #0]
		State = S_idle;
 8002276:	4b29      	ldr	r3, [pc, #164]	; (800231c <DynamixelProtocal2+0x990>)
 8002278:	2200      	movs	r2, #0
 800227a:	701a      	strb	r2, [r3, #0]
		break;
 800227c:	e041      	b.n	8002302 <DynamixelProtocal2+0x976>

	case S_Checksum3:
		x = 0;
 800227e:	4b26      	ldr	r3, [pc, #152]	; (8002318 <DynamixelProtocal2+0x98c>)
 8002280:	2200      	movs	r2, #0
 8002282:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~( ((0x9 << 4) | MODE) + STATION + DATA_N_SUM);
 8002284:	4b26      	ldr	r3, [pc, #152]	; (8002320 <DynamixelProtocal2+0x994>)
 8002286:	881b      	ldrh	r3, [r3, #0]
 8002288:	b2db      	uxtb	r3, r3
 800228a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800228e:	b2da      	uxtb	r2, r3
 8002290:	4b24      	ldr	r3, [pc, #144]	; (8002324 <DynamixelProtocal2+0x998>)
 8002292:	781b      	ldrb	r3, [r3, #0]
 8002294:	4413      	add	r3, r2
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b1e      	ldr	r3, [pc, #120]	; (8002314 <DynamixelProtocal2+0x988>)
 800229a:	781b      	ldrb	r3, [r3, #0]
 800229c:	4413      	add	r3, r2
 800229e:	b2db      	uxtb	r3, r3
 80022a0:	43db      	mvns	r3, r3
 80022a2:	b2da      	uxtb	r2, r3
 80022a4:	4b20      	ldr	r3, [pc, #128]	; (8002328 <DynamixelProtocal2+0x99c>)
 80022a6:	701a      	strb	r2, [r3, #0]
		CHECKSUM = dataIn & 0xff ;
 80022a8:	893b      	ldrh	r3, [r7, #8]
 80022aa:	b2da      	uxtb	r2, r3
 80022ac:	4b18      	ldr	r3, [pc, #96]	; (8002310 <DynamixelProtocal2+0x984>)
 80022ae:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 80022b0:	4b1d      	ldr	r3, [pc, #116]	; (8002328 <DynamixelProtocal2+0x99c>)
 80022b2:	781a      	ldrb	r2, [r3, #0]
 80022b4:	4b16      	ldr	r3, [pc, #88]	; (8002310 <DynamixelProtocal2+0x984>)
 80022b6:	781b      	ldrb	r3, [r3, #0]
 80022b8:	429a      	cmp	r2, r3
 80022ba:	d10d      	bne.n	80022d8 <DynamixelProtocal2+0x94c>
		{
			switch (MODE)
 80022bc:	4b18      	ldr	r3, [pc, #96]	; (8002320 <DynamixelProtocal2+0x994>)
 80022be:	881b      	ldrh	r3, [r3, #0]
 80022c0:	2b07      	cmp	r3, #7
 80022c2:	d119      	bne.n	80022f8 <DynamixelProtocal2+0x96c>
			{
			case 0b0111: //7
			{
				uint8_t temp[] = {0x75};
 80022c4:	2375      	movs	r3, #117	; 0x75
 80022c6:	753b      	strb	r3, [r7, #20]
				UARTTxWrite(uart, temp, 1);
 80022c8:	f107 0314 	add.w	r3, r7, #20
 80022cc:	2201      	movs	r2, #1
 80022ce:	4619      	mov	r1, r3
 80022d0:	6878      	ldr	r0, [r7, #4]
 80022d2:	f7ff fb13 	bl	80018fc <UARTTxWrite>
				break;
 80022d6:	e00f      	b.n	80022f8 <DynamixelProtocal2+0x96c>
			}
			}
		}
		else
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
 80022d8:	4b0c      	ldr	r3, [pc, #48]	; (800230c <DynamixelProtocal2+0x980>)
 80022da:	881b      	ldrh	r3, [r3, #0]
 80022dc:	b2db      	uxtb	r3, r3
 80022de:	743b      	strb	r3, [r7, #16]
 80022e0:	2375      	movs	r3, #117	; 0x75
 80022e2:	747b      	strb	r3, [r7, #17]
 80022e4:	4b0a      	ldr	r3, [pc, #40]	; (8002310 <DynamixelProtocal2+0x984>)
 80022e6:	781b      	ldrb	r3, [r3, #0]
 80022e8:	74bb      	strb	r3, [r7, #18]
			UARTTxWrite(uart, temp, 3);
 80022ea:	f107 0310 	add.w	r3, r7, #16
 80022ee:	2203      	movs	r2, #3
 80022f0:	4619      	mov	r1, r3
 80022f2:	6878      	ldr	r0, [r7, #4]
 80022f4:	f7ff fb02 	bl	80018fc <UARTTxWrite>
		}
		State = S_idle;
 80022f8:	4b08      	ldr	r3, [pc, #32]	; (800231c <DynamixelProtocal2+0x990>)
 80022fa:	2200      	movs	r2, #0
 80022fc:	701a      	strb	r2, [r3, #0]
		break;
 80022fe:	e000      	b.n	8002302 <DynamixelProtocal2+0x976>
		break;
 8002300:	bf00      	nop
	}
}
 8002302:	bf00      	nop
 8002304:	3768      	adds	r7, #104	; 0x68
 8002306:	46bd      	mov	sp, r7
 8002308:	bd80      	pop	{r7, pc}
 800230a:	bf00      	nop
 800230c:	200001c8 	.word	0x200001c8
 8002310:	200001c3 	.word	0x200001c3
 8002314:	200006d1 	.word	0x200006d1
 8002318:	200006d4 	.word	0x200006d4
 800231c:	20000704 	.word	0x20000704
 8002320:	200001ca 	.word	0x200001ca
 8002324:	200006d0 	.word	0x200006d0
 8002328:	200001c4 	.word	0x200001c4

0800232c <findingPosition>:

uint8_t findingPosition(){
 800232c:	b480      	push	{r7}
 800232e:	af00      	add	r7, sp, #0
	rawPosition[0] = (float)HTIM_ENCODER.Instance->CNT*90/2048;
 8002330:	4b2c      	ldr	r3, [pc, #176]	; (80023e4 <findingPosition+0xb8>)
 8002332:	681b      	ldr	r3, [r3, #0]
 8002334:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002336:	ee07 3a90 	vmov	s15, r3
 800233a:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800233e:	ed9f 7a2a 	vldr	s14, [pc, #168]	; 80023e8 <findingPosition+0xbc>
 8002342:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002346:	eddf 6a29 	vldr	s13, [pc, #164]	; 80023ec <findingPosition+0xc0>
 800234a:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800234e:	eefc 7ae7 	vcvt.u32.f32	s15, s15
 8002352:	ee17 3a90 	vmov	r3, s15
 8002356:	b29a      	uxth	r2, r3
 8002358:	4b25      	ldr	r3, [pc, #148]	; (80023f0 <findingPosition+0xc4>)
 800235a:	801a      	strh	r2, [r3, #0]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 80)){
 800235c:	4b24      	ldr	r3, [pc, #144]	; (80023f0 <findingPosition+0xc4>)
 800235e:	881b      	ldrh	r3, [r3, #0]
 8002360:	2b09      	cmp	r3, #9
 8002362:	d80a      	bhi.n	800237a <findingPosition+0x4e>
 8002364:	4b22      	ldr	r3, [pc, #136]	; (80023f0 <findingPosition+0xc4>)
 8002366:	885b      	ldrh	r3, [r3, #2]
 8002368:	2b50      	cmp	r3, #80	; 0x50
 800236a:	d906      	bls.n	800237a <findingPosition+0x4e>
		cP += 1;
 800236c:	4b21      	ldr	r3, [pc, #132]	; (80023f4 <findingPosition+0xc8>)
 800236e:	781b      	ldrb	r3, [r3, #0]
 8002370:	3301      	adds	r3, #1
 8002372:	b2da      	uxtb	r2, r3
 8002374:	4b1f      	ldr	r3, [pc, #124]	; (80023f4 <findingPosition+0xc8>)
 8002376:	701a      	strb	r2, [r3, #0]
 8002378:	e00d      	b.n	8002396 <findingPosition+0x6a>
	}
	else if ((rawPosition[0] > 80 )&& (rawPosition[1] < 10)){
 800237a:	4b1d      	ldr	r3, [pc, #116]	; (80023f0 <findingPosition+0xc4>)
 800237c:	881b      	ldrh	r3, [r3, #0]
 800237e:	2b50      	cmp	r3, #80	; 0x50
 8002380:	d909      	bls.n	8002396 <findingPosition+0x6a>
 8002382:	4b1b      	ldr	r3, [pc, #108]	; (80023f0 <findingPosition+0xc4>)
 8002384:	885b      	ldrh	r3, [r3, #2]
 8002386:	2b09      	cmp	r3, #9
 8002388:	d805      	bhi.n	8002396 <findingPosition+0x6a>
		cP -= 1;
 800238a:	4b1a      	ldr	r3, [pc, #104]	; (80023f4 <findingPosition+0xc8>)
 800238c:	781b      	ldrb	r3, [r3, #0]
 800238e:	3b01      	subs	r3, #1
 8002390:	b2da      	uxtb	r2, r3
 8002392:	4b18      	ldr	r3, [pc, #96]	; (80023f4 <findingPosition+0xc8>)
 8002394:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 8002396:	4b17      	ldr	r3, [pc, #92]	; (80023f4 <findingPosition+0xc8>)
 8002398:	781b      	ldrb	r3, [r3, #0]
 800239a:	2b03      	cmp	r3, #3
 800239c:	d902      	bls.n	80023a4 <findingPosition+0x78>
		cP = 0;
 800239e:	4b15      	ldr	r3, [pc, #84]	; (80023f4 <findingPosition+0xc8>)
 80023a0:	2200      	movs	r2, #0
 80023a2:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = (float)rawPosition[0] + cP*90;
 80023a4:	4b12      	ldr	r3, [pc, #72]	; (80023f0 <findingPosition+0xc4>)
 80023a6:	881b      	ldrh	r3, [r3, #0]
 80023a8:	ee07 3a90 	vmov	s15, r3
 80023ac:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 80023b0:	4b10      	ldr	r3, [pc, #64]	; (80023f4 <findingPosition+0xc8>)
 80023b2:	781b      	ldrb	r3, [r3, #0]
 80023b4:	461a      	mov	r2, r3
 80023b6:	235a      	movs	r3, #90	; 0x5a
 80023b8:	fb03 f302 	mul.w	r3, r3, r2
 80023bc:	ee07 3a90 	vmov	s15, r3
 80023c0:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80023c4:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023c8:	4b0b      	ldr	r3, [pc, #44]	; (80023f8 <findingPosition+0xcc>)
 80023ca:	edc3 7a00 	vstr	s15, [r3]
	rawPosition[1] = rawPosition[0];
 80023ce:	4b08      	ldr	r3, [pc, #32]	; (80023f0 <findingPosition+0xc4>)
 80023d0:	881a      	ldrh	r2, [r3, #0]
 80023d2:	4b07      	ldr	r3, [pc, #28]	; (80023f0 <findingPosition+0xc4>)
 80023d4:	805a      	strh	r2, [r3, #2]
}
 80023d6:	bf00      	nop
 80023d8:	4618      	mov	r0, r3
 80023da:	46bd      	mov	sp, r7
 80023dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80023e0:	4770      	bx	lr
 80023e2:	bf00      	nop
 80023e4:	20000934 	.word	0x20000934
 80023e8:	42b40000 	.word	0x42b40000
 80023ec:	45000000 	.word	0x45000000
 80023f0:	2000073c 	.word	0x2000073c
 80023f4:	20000710 	.word	0x20000710
 80023f8:	20000738 	.word	0x20000738

080023fc <HAL_GPIO_EXTI_Callback>:

#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80023fc:	b580      	push	{r7, lr}
 80023fe:	b082      	sub	sp, #8
 8002400:	af00      	add	r7, sp, #0
 8002402:	4603      	mov	r3, r0
 8002404:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){
 8002406:	88fb      	ldrh	r3, [r7, #6]
 8002408:	2b80      	cmp	r3, #128	; 0x80
 800240a:	d112      	bne.n	8002432 <HAL_GPIO_EXTI_Callback+0x36>
		check ++;
 800240c:	4b0b      	ldr	r3, [pc, #44]	; (800243c <HAL_GPIO_EXTI_Callback+0x40>)
 800240e:	781b      	ldrb	r3, [r3, #0]
 8002410:	3301      	adds	r3, #1
 8002412:	b2da      	uxtb	r2, r3
 8002414:	4b09      	ldr	r3, [pc, #36]	; (800243c <HAL_GPIO_EXTI_Callback+0x40>)
 8002416:	701a      	strb	r2, [r3, #0]
		cP = 0;
 8002418:	4b09      	ldr	r3, [pc, #36]	; (8002440 <HAL_GPIO_EXTI_Callback+0x44>)
 800241a:	2200      	movs	r2, #0
 800241c:	701a      	strb	r2, [r3, #0]
		velocity = 0;
 800241e:	4b09      	ldr	r3, [pc, #36]	; (8002444 <HAL_GPIO_EXTI_Callback+0x48>)
 8002420:	f04f 0200 	mov.w	r2, #0
 8002424:	601a      	str	r2, [r3, #0]
		SetHome = 0;
 8002426:	4b08      	ldr	r3, [pc, #32]	; (8002448 <HAL_GPIO_EXTI_Callback+0x4c>)
 8002428:	2200      	movs	r2, #0
 800242a:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800242c:	2017      	movs	r0, #23
 800242e:	f001 fc7e 	bl	8003d2e <HAL_NVIC_DisableIRQ>
	}
}
 8002432:	bf00      	nop
 8002434:	3708      	adds	r7, #8
 8002436:	46bd      	mov	sp, r7
 8002438:	bd80      	pop	{r7, pc}
 800243a:	bf00      	nop
 800243c:	20000728 	.word	0x20000728
 8002440:	20000710 	.word	0x20000710
 8002444:	20000718 	.word	0x20000718
 8002448:	20000729 	.word	0x20000729

0800244c <I2C>:

void I2C(){
 800244c:	b580      	push	{r7, lr}
 800244e:	b082      	sub	sp, #8
 8002450:	af00      	add	r7, sp, #0
	const uint8_t laserAddress = 0x23<<1;
 8002452:	2346      	movs	r3, #70	; 0x46
 8002454:	71fb      	strb	r3, [r7, #7]
	static uint8_t pdataStart[1] = {0x45};
	HAL_I2C_Master_Transmit_IT(&hi2c1, laserAddress, pdataStart, 1);
 8002456:	79fb      	ldrb	r3, [r7, #7]
 8002458:	b299      	uxth	r1, r3
 800245a:	2301      	movs	r3, #1
 800245c:	4a0a      	ldr	r2, [pc, #40]	; (8002488 <I2C+0x3c>)
 800245e:	480b      	ldr	r0, [pc, #44]	; (800248c <I2C+0x40>)
 8002460:	f002 fb8a 	bl	8004b78 <HAL_I2C_Master_Transmit_IT>
	HAL_Delay(10);
 8002464:	200a      	movs	r0, #10
 8002466:	f001 fb15 	bl	8003a94 <HAL_Delay>
	pdataStart[0] = 0x23;
 800246a:	4b07      	ldr	r3, [pc, #28]	; (8002488 <I2C+0x3c>)
 800246c:	2223      	movs	r2, #35	; 0x23
 800246e:	701a      	strb	r2, [r3, #0]
	HAL_I2C_Master_Transmit_IT(&hi2c1, laserAddress, pdataStart, 1);
 8002470:	79fb      	ldrb	r3, [r7, #7]
 8002472:	b299      	uxth	r1, r3
 8002474:	2301      	movs	r3, #1
 8002476:	4a04      	ldr	r2, [pc, #16]	; (8002488 <I2C+0x3c>)
 8002478:	4804      	ldr	r0, [pc, #16]	; (800248c <I2C+0x40>)
 800247a:	f002 fb7d 	bl	8004b78 <HAL_I2C_Master_Transmit_IT>
}
 800247e:	bf00      	nop
 8002480:	3708      	adds	r7, #8
 8002482:	46bd      	mov	sp, r7
 8002484:	bd80      	pop	{r7, pc}
 8002486:	bf00      	nop
 8002488:	20000018 	.word	0x20000018
 800248c:	20000838 	.word	0x20000838

08002490 <I2Creader>:

void I2Creader(){
 8002490:	b580      	push	{r7, lr}
 8002492:	af00      	add	r7, sp, #0
	HAL_I2C_Master_Receive_IT(&hi2c1,laserStatus,1,10);
 8002494:	4b04      	ldr	r3, [pc, #16]	; (80024a8 <I2Creader+0x18>)
 8002496:	b299      	uxth	r1, r3
 8002498:	230a      	movs	r3, #10
 800249a:	2201      	movs	r2, #1
 800249c:	4803      	ldr	r0, [pc, #12]	; (80024ac <I2Creader+0x1c>)
 800249e:	f002 fc11 	bl	8004cc4 <HAL_I2C_Master_Receive_IT>
}
 80024a2:	bf00      	nop
 80024a4:	bd80      	pop	{r7, pc}
 80024a6:	bf00      	nop
 80024a8:	20000760 	.word	0x20000760
 80024ac:	20000838 	.word	0x20000838

080024b0 <EncoderVelocity_Update>:
float EncoderVelocity_Update()
{
 80024b0:	b5b0      	push	{r4, r5, r7, lr}
 80024b2:	ed2d 8b02 	vpush	{d8}
 80024b6:	b086      	sub	sp, #24
 80024b8:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80024ba:	4b28      	ldr	r3, [pc, #160]	; (800255c <EncoderVelocity_Update+0xac>)
 80024bc:	681b      	ldr	r3, [r3, #0]
 80024be:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80024c0:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 80024c2:	f000 ff31 	bl	8003328 <micros>
 80024c6:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80024ca:	4b25      	ldr	r3, [pc, #148]	; (8002560 <EncoderVelocity_Update+0xb0>)
 80024cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80024d0:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80024d4:	1a84      	subs	r4, r0, r2
 80024d6:	eb61 0503 	sbc.w	r5, r1, r3
 80024da:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80024de:	4b21      	ldr	r3, [pc, #132]	; (8002564 <EncoderVelocity_Update+0xb4>)
 80024e0:	681b      	ldr	r3, [r3, #0]
 80024e2:	693a      	ldr	r2, [r7, #16]
 80024e4:	1ad3      	subs	r3, r2, r3
 80024e6:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80024e8:	697b      	ldr	r3, [r7, #20]
 80024ea:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80024ee:	db04      	blt.n	80024fa <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80024f0:	697b      	ldr	r3, [r7, #20]
 80024f2:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80024f6:	617b      	str	r3, [r7, #20]
 80024f8:	e007      	b.n	800250a <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80024fa:	697b      	ldr	r3, [r7, #20]
 80024fc:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 8002500:	dc03      	bgt.n	800250a <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 8002502:	697b      	ldr	r3, [r7, #20]
 8002504:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8002508:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 800250a:	4a16      	ldr	r2, [pc, #88]	; (8002564 <EncoderVelocity_Update+0xb4>)
 800250c:	693b      	ldr	r3, [r7, #16]
 800250e:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 8002510:	4913      	ldr	r1, [pc, #76]	; (8002560 <EncoderVelocity_Update+0xb0>)
 8002512:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8002516:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000*60) / (float) (EncoderTimeDiff *2048*4);
 800251a:	697b      	ldr	r3, [r7, #20]
 800251c:	4a12      	ldr	r2, [pc, #72]	; (8002568 <EncoderVelocity_Update+0xb8>)
 800251e:	fb02 f303 	mul.w	r3, r2, r3
 8002522:	ee07 3a90 	vmov	s15, r3
 8002526:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 800252a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800252e:	f04f 0200 	mov.w	r2, #0
 8002532:	f04f 0300 	mov.w	r3, #0
 8002536:	034b      	lsls	r3, r1, #13
 8002538:	ea43 43d0 	orr.w	r3, r3, r0, lsr #19
 800253c:	0342      	lsls	r2, r0, #13
 800253e:	4610      	mov	r0, r2
 8002540:	4619      	mov	r1, r3
 8002542:	f7fe fbcd 	bl	8000ce0 <__aeabi_ul2f>
 8002546:	ee07 0a10 	vmov	s14, r0
 800254a:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 800254e:	eeb0 0a67 	vmov.f32	s0, s15
 8002552:	3718      	adds	r7, #24
 8002554:	46bd      	mov	sp, r7
 8002556:	ecbd 8b02 	vpop	{d8}
 800255a:	bdb0      	pop	{r4, r5, r7, pc}
 800255c:	20000934 	.word	0x20000934
 8002560:	20000768 	.word	0x20000768
 8002564:	20000770 	.word	0x20000770
 8002568:	03938700 	.word	0x03938700
 800256c:	00000000 	.word	0x00000000

08002570 <trajectory>:

void trajectory(uint64_t Timestamp){
 8002570:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8002574:	b082      	sub	sp, #8
 8002576:	af00      	add	r7, sp, #0
 8002578:	e9c7 0100 	strd	r0, r1, [r7]
	static float a0 = 0;
	static float a1 = 0;
	static float a2 = 0;
	static float a3 = 0;
	static uint64_t setTime = 0;
	state[0] = start;
 800257c:	4b0e      	ldr	r3, [pc, #56]	; (80025b8 <trajectory+0x48>)
 800257e:	781b      	ldrb	r3, [r3, #0]
 8002580:	461a      	mov	r2, r3
 8002582:	4b0e      	ldr	r3, [pc, #56]	; (80025bc <trajectory+0x4c>)
 8002584:	701a      	strb	r2, [r3, #0]
	rawPosition[0] = HTIM_ENCODER.Instance->CNT*90/2048;
 8002586:	4b0e      	ldr	r3, [pc, #56]	; (80025c0 <trajectory+0x50>)
 8002588:	681b      	ldr	r3, [r3, #0]
 800258a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800258c:	225a      	movs	r2, #90	; 0x5a
 800258e:	fb02 f303 	mul.w	r3, r2, r3
 8002592:	0adb      	lsrs	r3, r3, #11
 8002594:	b29a      	uxth	r2, r3
 8002596:	4b0b      	ldr	r3, [pc, #44]	; (80025c4 <trajectory+0x54>)
 8002598:	801a      	strh	r2, [r3, #0]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 87)){
 800259a:	4b0a      	ldr	r3, [pc, #40]	; (80025c4 <trajectory+0x54>)
 800259c:	881b      	ldrh	r3, [r3, #0]
 800259e:	2b09      	cmp	r3, #9
 80025a0:	d814      	bhi.n	80025cc <trajectory+0x5c>
 80025a2:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <trajectory+0x54>)
 80025a4:	885b      	ldrh	r3, [r3, #2]
 80025a6:	2b57      	cmp	r3, #87	; 0x57
 80025a8:	d910      	bls.n	80025cc <trajectory+0x5c>
		cP += 1;
 80025aa:	4b07      	ldr	r3, [pc, #28]	; (80025c8 <trajectory+0x58>)
 80025ac:	781b      	ldrb	r3, [r3, #0]
 80025ae:	3301      	adds	r3, #1
 80025b0:	b2da      	uxtb	r2, r3
 80025b2:	4b05      	ldr	r3, [pc, #20]	; (80025c8 <trajectory+0x58>)
 80025b4:	701a      	strb	r2, [r3, #0]
 80025b6:	e017      	b.n	80025e8 <trajectory+0x78>
 80025b8:	20000742 	.word	0x20000742
 80025bc:	20000740 	.word	0x20000740
 80025c0:	20000934 	.word	0x20000934
 80025c4:	2000073c 	.word	0x2000073c
 80025c8:	20000710 	.word	0x20000710
	}
	else if ((rawPosition[0] >87 )&& (rawPosition[1] < 10)){
 80025cc:	4bd0      	ldr	r3, [pc, #832]	; (8002910 <trajectory+0x3a0>)
 80025ce:	881b      	ldrh	r3, [r3, #0]
 80025d0:	2b57      	cmp	r3, #87	; 0x57
 80025d2:	d909      	bls.n	80025e8 <trajectory+0x78>
 80025d4:	4bce      	ldr	r3, [pc, #824]	; (8002910 <trajectory+0x3a0>)
 80025d6:	885b      	ldrh	r3, [r3, #2]
 80025d8:	2b09      	cmp	r3, #9
 80025da:	d805      	bhi.n	80025e8 <trajectory+0x78>
		cP -= 1;
 80025dc:	4bcd      	ldr	r3, [pc, #820]	; (8002914 <trajectory+0x3a4>)
 80025de:	781b      	ldrb	r3, [r3, #0]
 80025e0:	3b01      	subs	r3, #1
 80025e2:	b2da      	uxtb	r2, r3
 80025e4:	4bcb      	ldr	r3, [pc, #812]	; (8002914 <trajectory+0x3a4>)
 80025e6:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 80025e8:	4bca      	ldr	r3, [pc, #808]	; (8002914 <trajectory+0x3a4>)
 80025ea:	781b      	ldrb	r3, [r3, #0]
 80025ec:	2b03      	cmp	r3, #3
 80025ee:	d902      	bls.n	80025f6 <trajectory+0x86>
		cP = 0;
 80025f0:	4bc8      	ldr	r3, [pc, #800]	; (8002914 <trajectory+0x3a4>)
 80025f2:	2200      	movs	r2, #0
 80025f4:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = rawPosition[0] + cP*90;
 80025f6:	4bc6      	ldr	r3, [pc, #792]	; (8002910 <trajectory+0x3a0>)
 80025f8:	881b      	ldrh	r3, [r3, #0]
 80025fa:	461a      	mov	r2, r3
 80025fc:	4bc5      	ldr	r3, [pc, #788]	; (8002914 <trajectory+0x3a4>)
 80025fe:	781b      	ldrb	r3, [r3, #0]
 8002600:	4619      	mov	r1, r3
 8002602:	235a      	movs	r3, #90	; 0x5a
 8002604:	fb03 f301 	mul.w	r3, r3, r1
 8002608:	4413      	add	r3, r2
 800260a:	ee07 3a90 	vmov	s15, r3
 800260e:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002612:	4bc1      	ldr	r3, [pc, #772]	; (8002918 <trajectory+0x3a8>)
 8002614:	edc3 7a00 	vstr	s15, [r3]
	if(state[0] == 1){
 8002618:	4bc0      	ldr	r3, [pc, #768]	; (800291c <trajectory+0x3ac>)
 800261a:	781b      	ldrb	r3, [r3, #0]
 800261c:	2b01      	cmp	r3, #1
 800261e:	f040 81f0 	bne.w	8002a02 <trajectory+0x492>
		if(state[0] != state[1]){
 8002622:	4bbe      	ldr	r3, [pc, #760]	; (800291c <trajectory+0x3ac>)
 8002624:	781a      	ldrb	r2, [r3, #0]
 8002626:	4bbd      	ldr	r3, [pc, #756]	; (800291c <trajectory+0x3ac>)
 8002628:	785b      	ldrb	r3, [r3, #1]
 800262a:	429a      	cmp	r2, r3
 800262c:	d008      	beq.n	8002640 <trajectory+0xd0>
			setTime = Timestamp;
 800262e:	49bc      	ldr	r1, [pc, #752]	; (8002920 <trajectory+0x3b0>)
 8002630:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002634:	e9c1 2300 	strd	r2, r3, [r1]
			startAngle = currentPosition;
 8002638:	4bb7      	ldr	r3, [pc, #732]	; (8002918 <trajectory+0x3a8>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4ab9      	ldr	r2, [pc, #740]	; (8002924 <trajectory+0x3b4>)
 800263e:	6013      	str	r3, [r2, #0]
		}
		tim = (float) (Timestamp-setTime)/1000000;
 8002640:	4bb7      	ldr	r3, [pc, #732]	; (8002920 <trajectory+0x3b0>)
 8002642:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002646:	e9d7 0100 	ldrd	r0, r1, [r7]
 800264a:	1a84      	subs	r4, r0, r2
 800264c:	eb61 0503 	sbc.w	r5, r1, r3
 8002650:	4620      	mov	r0, r4
 8002652:	4629      	mov	r1, r5
 8002654:	f7fe fb44 	bl	8000ce0 <__aeabi_ul2f>
 8002658:	ee06 0a90 	vmov	s13, r0
 800265c:	ed9f 7ab2 	vldr	s14, [pc, #712]	; 8002928 <trajectory+0x3b8>
 8002660:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002664:	4bb1      	ldr	r3, [pc, #708]	; (800292c <trajectory+0x3bc>)
 8002666:	edc3 7a00 	vstr	s15, [r3]
		tF = (float) (250*abs(finalAngle-startAngle-storeAngle)/(355*vMax));
 800266a:	4bb1      	ldr	r3, [pc, #708]	; (8002930 <trajectory+0x3c0>)
 800266c:	ed93 7a00 	vldr	s14, [r3]
 8002670:	4bac      	ldr	r3, [pc, #688]	; (8002924 <trajectory+0x3b4>)
 8002672:	edd3 7a00 	vldr	s15, [r3]
 8002676:	ee37 7a67 	vsub.f32	s14, s14, s15
 800267a:	4bae      	ldr	r3, [pc, #696]	; (8002934 <trajectory+0x3c4>)
 800267c:	781b      	ldrb	r3, [r3, #0]
 800267e:	ee07 3a90 	vmov	s15, r3
 8002682:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002686:	ee77 7a67 	vsub.f32	s15, s14, s15
 800268a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800268e:	ee17 3a90 	vmov	r3, s15
 8002692:	2b00      	cmp	r3, #0
 8002694:	bfb8      	it	lt
 8002696:	425b      	neglt	r3, r3
 8002698:	22fa      	movs	r2, #250	; 0xfa
 800269a:	fb02 f303 	mul.w	r3, r2, r3
 800269e:	ee07 3a90 	vmov	s15, r3
 80026a2:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 80026a6:	4ba4      	ldr	r3, [pc, #656]	; (8002938 <trajectory+0x3c8>)
 80026a8:	edd3 7a00 	vldr	s15, [r3]
 80026ac:	ed9f 7aa3 	vldr	s14, [pc, #652]	; 800293c <trajectory+0x3cc>
 80026b0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80026b4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80026b8:	4ba1      	ldr	r3, [pc, #644]	; (8002940 <trajectory+0x3d0>)
 80026ba:	edc3 7a00 	vstr	s15, [r3]
		a0 = startAngle;
 80026be:	4b99      	ldr	r3, [pc, #612]	; (8002924 <trajectory+0x3b4>)
 80026c0:	681b      	ldr	r3, [r3, #0]
 80026c2:	4aa0      	ldr	r2, [pc, #640]	; (8002944 <trajectory+0x3d4>)
 80026c4:	6013      	str	r3, [r2, #0]
		a1 = 0;
 80026c6:	4ba0      	ldr	r3, [pc, #640]	; (8002948 <trajectory+0x3d8>)
 80026c8:	f04f 0200 	mov.w	r2, #0
 80026cc:	601a      	str	r2, [r3, #0]
		a2 = (float) (3/pow(tF,2))*(finalAngle-startAngle);
 80026ce:	4b9c      	ldr	r3, [pc, #624]	; (8002940 <trajectory+0x3d0>)
 80026d0:	681b      	ldr	r3, [r3, #0]
 80026d2:	4618      	mov	r0, r3
 80026d4:	f7fd fee4 	bl	80004a0 <__aeabi_f2d>
 80026d8:	4602      	mov	r2, r0
 80026da:	460b      	mov	r3, r1
 80026dc:	ed9f 1b88 	vldr	d1, [pc, #544]	; 8002900 <trajectory+0x390>
 80026e0:	ec43 2b10 	vmov	d0, r2, r3
 80026e4:	f006 fe1e 	bl	8009324 <pow>
 80026e8:	ec53 2b10 	vmov	r2, r3, d0
 80026ec:	f04f 0000 	mov.w	r0, #0
 80026f0:	4996      	ldr	r1, [pc, #600]	; (800294c <trajectory+0x3dc>)
 80026f2:	f7fe f857 	bl	80007a4 <__aeabi_ddiv>
 80026f6:	4602      	mov	r2, r0
 80026f8:	460b      	mov	r3, r1
 80026fa:	4610      	mov	r0, r2
 80026fc:	4619      	mov	r1, r3
 80026fe:	f7fe f9d7 	bl	8000ab0 <__aeabi_d2f>
 8002702:	ee06 0a90 	vmov	s13, r0
 8002706:	4b8a      	ldr	r3, [pc, #552]	; (8002930 <trajectory+0x3c0>)
 8002708:	ed93 7a00 	vldr	s14, [r3]
 800270c:	4b85      	ldr	r3, [pc, #532]	; (8002924 <trajectory+0x3b4>)
 800270e:	edd3 7a00 	vldr	s15, [r3]
 8002712:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002716:	ee66 7aa7 	vmul.f32	s15, s13, s15
 800271a:	4b8d      	ldr	r3, [pc, #564]	; (8002950 <trajectory+0x3e0>)
 800271c:	edc3 7a00 	vstr	s15, [r3]
		a3 = (float) -(2/pow(tF,3))*(finalAngle-startAngle);
 8002720:	4b87      	ldr	r3, [pc, #540]	; (8002940 <trajectory+0x3d0>)
 8002722:	681b      	ldr	r3, [r3, #0]
 8002724:	4618      	mov	r0, r3
 8002726:	f7fd febb 	bl	80004a0 <__aeabi_f2d>
 800272a:	4602      	mov	r2, r0
 800272c:	460b      	mov	r3, r1
 800272e:	ed9f 1b76 	vldr	d1, [pc, #472]	; 8002908 <trajectory+0x398>
 8002732:	ec43 2b10 	vmov	d0, r2, r3
 8002736:	f006 fdf5 	bl	8009324 <pow>
 800273a:	ec53 2b10 	vmov	r2, r3, d0
 800273e:	f04f 0000 	mov.w	r0, #0
 8002742:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8002746:	f7fe f82d 	bl	80007a4 <__aeabi_ddiv>
 800274a:	4602      	mov	r2, r0
 800274c:	460b      	mov	r3, r1
 800274e:	4610      	mov	r0, r2
 8002750:	4619      	mov	r1, r3
 8002752:	f7fe f9ad 	bl	8000ab0 <__aeabi_d2f>
 8002756:	4603      	mov	r3, r0
 8002758:	ee07 3a90 	vmov	s15, r3
 800275c:	eeb1 7a67 	vneg.f32	s14, s15
 8002760:	4b73      	ldr	r3, [pc, #460]	; (8002930 <trajectory+0x3c0>)
 8002762:	edd3 6a00 	vldr	s13, [r3]
 8002766:	4b6f      	ldr	r3, [pc, #444]	; (8002924 <trajectory+0x3b4>)
 8002768:	edd3 7a00 	vldr	s15, [r3]
 800276c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002770:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002774:	4b77      	ldr	r3, [pc, #476]	; (8002954 <trajectory+0x3e4>)
 8002776:	edc3 7a00 	vstr	s15, [r3]
		position = (float) a0+ (a1*tim) +(a2*pow(tim,2)) +(a3*pow(tim,3));
 800277a:	4b73      	ldr	r3, [pc, #460]	; (8002948 <trajectory+0x3d8>)
 800277c:	ed93 7a00 	vldr	s14, [r3]
 8002780:	4b6a      	ldr	r3, [pc, #424]	; (800292c <trajectory+0x3bc>)
 8002782:	edd3 7a00 	vldr	s15, [r3]
 8002786:	ee27 7a27 	vmul.f32	s14, s14, s15
 800278a:	4b6e      	ldr	r3, [pc, #440]	; (8002944 <trajectory+0x3d4>)
 800278c:	edd3 7a00 	vldr	s15, [r3]
 8002790:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002794:	ee17 0a90 	vmov	r0, s15
 8002798:	f7fd fe82 	bl	80004a0 <__aeabi_f2d>
 800279c:	4604      	mov	r4, r0
 800279e:	460d      	mov	r5, r1
 80027a0:	4b6b      	ldr	r3, [pc, #428]	; (8002950 <trajectory+0x3e0>)
 80027a2:	681b      	ldr	r3, [r3, #0]
 80027a4:	4618      	mov	r0, r3
 80027a6:	f7fd fe7b 	bl	80004a0 <__aeabi_f2d>
 80027aa:	4680      	mov	r8, r0
 80027ac:	4689      	mov	r9, r1
 80027ae:	4b5f      	ldr	r3, [pc, #380]	; (800292c <trajectory+0x3bc>)
 80027b0:	681b      	ldr	r3, [r3, #0]
 80027b2:	4618      	mov	r0, r3
 80027b4:	f7fd fe74 	bl	80004a0 <__aeabi_f2d>
 80027b8:	4602      	mov	r2, r0
 80027ba:	460b      	mov	r3, r1
 80027bc:	ed9f 1b50 	vldr	d1, [pc, #320]	; 8002900 <trajectory+0x390>
 80027c0:	ec43 2b10 	vmov	d0, r2, r3
 80027c4:	f006 fdae 	bl	8009324 <pow>
 80027c8:	ec53 2b10 	vmov	r2, r3, d0
 80027cc:	4640      	mov	r0, r8
 80027ce:	4649      	mov	r1, r9
 80027d0:	f7fd febe 	bl	8000550 <__aeabi_dmul>
 80027d4:	4602      	mov	r2, r0
 80027d6:	460b      	mov	r3, r1
 80027d8:	4620      	mov	r0, r4
 80027da:	4629      	mov	r1, r5
 80027dc:	f7fd fd02 	bl	80001e4 <__adddf3>
 80027e0:	4602      	mov	r2, r0
 80027e2:	460b      	mov	r3, r1
 80027e4:	4690      	mov	r8, r2
 80027e6:	4699      	mov	r9, r3
 80027e8:	4b5a      	ldr	r3, [pc, #360]	; (8002954 <trajectory+0x3e4>)
 80027ea:	681b      	ldr	r3, [r3, #0]
 80027ec:	4618      	mov	r0, r3
 80027ee:	f7fd fe57 	bl	80004a0 <__aeabi_f2d>
 80027f2:	4604      	mov	r4, r0
 80027f4:	460d      	mov	r5, r1
 80027f6:	4b4d      	ldr	r3, [pc, #308]	; (800292c <trajectory+0x3bc>)
 80027f8:	681b      	ldr	r3, [r3, #0]
 80027fa:	4618      	mov	r0, r3
 80027fc:	f7fd fe50 	bl	80004a0 <__aeabi_f2d>
 8002800:	4602      	mov	r2, r0
 8002802:	460b      	mov	r3, r1
 8002804:	ed9f 1b40 	vldr	d1, [pc, #256]	; 8002908 <trajectory+0x398>
 8002808:	ec43 2b10 	vmov	d0, r2, r3
 800280c:	f006 fd8a 	bl	8009324 <pow>
 8002810:	ec53 2b10 	vmov	r2, r3, d0
 8002814:	4620      	mov	r0, r4
 8002816:	4629      	mov	r1, r5
 8002818:	f7fd fe9a 	bl	8000550 <__aeabi_dmul>
 800281c:	4602      	mov	r2, r0
 800281e:	460b      	mov	r3, r1
 8002820:	4640      	mov	r0, r8
 8002822:	4649      	mov	r1, r9
 8002824:	f7fd fcde 	bl	80001e4 <__adddf3>
 8002828:	4602      	mov	r2, r0
 800282a:	460b      	mov	r3, r1
 800282c:	4610      	mov	r0, r2
 800282e:	4619      	mov	r1, r3
 8002830:	f7fe f93e 	bl	8000ab0 <__aeabi_d2f>
 8002834:	4603      	mov	r3, r0
 8002836:	4a48      	ldr	r2, [pc, #288]	; (8002958 <trajectory+0x3e8>)
 8002838:	6013      	str	r3, [r2, #0]
		velocity = (float) (a1 +(2*a2*tim) +(3*a3*pow(tim,2)))/6;
 800283a:	4b45      	ldr	r3, [pc, #276]	; (8002950 <trajectory+0x3e0>)
 800283c:	edd3 7a00 	vldr	s15, [r3]
 8002840:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002844:	4b39      	ldr	r3, [pc, #228]	; (800292c <trajectory+0x3bc>)
 8002846:	edd3 7a00 	vldr	s15, [r3]
 800284a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800284e:	4b3e      	ldr	r3, [pc, #248]	; (8002948 <trajectory+0x3d8>)
 8002850:	edd3 7a00 	vldr	s15, [r3]
 8002854:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002858:	ee17 0a90 	vmov	r0, s15
 800285c:	f7fd fe20 	bl	80004a0 <__aeabi_f2d>
 8002860:	4604      	mov	r4, r0
 8002862:	460d      	mov	r5, r1
 8002864:	4b3b      	ldr	r3, [pc, #236]	; (8002954 <trajectory+0x3e4>)
 8002866:	edd3 7a00 	vldr	s15, [r3]
 800286a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 800286e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002872:	ee17 0a90 	vmov	r0, s15
 8002876:	f7fd fe13 	bl	80004a0 <__aeabi_f2d>
 800287a:	4680      	mov	r8, r0
 800287c:	4689      	mov	r9, r1
 800287e:	4b2b      	ldr	r3, [pc, #172]	; (800292c <trajectory+0x3bc>)
 8002880:	681b      	ldr	r3, [r3, #0]
 8002882:	4618      	mov	r0, r3
 8002884:	f7fd fe0c 	bl	80004a0 <__aeabi_f2d>
 8002888:	4602      	mov	r2, r0
 800288a:	460b      	mov	r3, r1
 800288c:	ed9f 1b1c 	vldr	d1, [pc, #112]	; 8002900 <trajectory+0x390>
 8002890:	ec43 2b10 	vmov	d0, r2, r3
 8002894:	f006 fd46 	bl	8009324 <pow>
 8002898:	ec53 2b10 	vmov	r2, r3, d0
 800289c:	4640      	mov	r0, r8
 800289e:	4649      	mov	r1, r9
 80028a0:	f7fd fe56 	bl	8000550 <__aeabi_dmul>
 80028a4:	4602      	mov	r2, r0
 80028a6:	460b      	mov	r3, r1
 80028a8:	4620      	mov	r0, r4
 80028aa:	4629      	mov	r1, r5
 80028ac:	f7fd fc9a 	bl	80001e4 <__adddf3>
 80028b0:	4602      	mov	r2, r0
 80028b2:	460b      	mov	r3, r1
 80028b4:	4610      	mov	r0, r2
 80028b6:	4619      	mov	r1, r3
 80028b8:	f7fe f8fa 	bl	8000ab0 <__aeabi_d2f>
 80028bc:	ee06 0a90 	vmov	s13, r0
 80028c0:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 80028c4:	eec6 7a87 	vdiv.f32	s15, s13, s14
 80028c8:	4b24      	ldr	r3, [pc, #144]	; (800295c <trajectory+0x3ec>)
 80028ca:	edc3 7a00 	vstr	s15, [r3]
		alpha = (float) ((2*a2) +(6*a3*tim))*2*3.14/360;
 80028ce:	4b20      	ldr	r3, [pc, #128]	; (8002950 <trajectory+0x3e0>)
 80028d0:	edd3 7a00 	vldr	s15, [r3]
 80028d4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80028d8:	4b1e      	ldr	r3, [pc, #120]	; (8002954 <trajectory+0x3e4>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 80028e2:	ee67 6aa6 	vmul.f32	s13, s15, s13
 80028e6:	4b11      	ldr	r3, [pc, #68]	; (800292c <trajectory+0x3bc>)
 80028e8:	edd3 7a00 	vldr	s15, [r3]
 80028ec:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80028f0:	ee77 7a27 	vadd.f32	s15, s14, s15
 80028f4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80028f8:	ee17 0a90 	vmov	r0, s15
 80028fc:	e030      	b.n	8002960 <trajectory+0x3f0>
 80028fe:	bf00      	nop
 8002900:	00000000 	.word	0x00000000
 8002904:	40000000 	.word	0x40000000
 8002908:	00000000 	.word	0x00000000
 800290c:	40080000 	.word	0x40080000
 8002910:	2000073c 	.word	0x2000073c
 8002914:	20000710 	.word	0x20000710
 8002918:	20000738 	.word	0x20000738
 800291c:	20000740 	.word	0x20000740
 8002920:	20000778 	.word	0x20000778
 8002924:	2000072c 	.word	0x2000072c
 8002928:	49742400 	.word	0x49742400
 800292c:	20000724 	.word	0x20000724
 8002930:	20000004 	.word	0x20000004
 8002934:	20000734 	.word	0x20000734
 8002938:	2000000c 	.word	0x2000000c
 800293c:	43b18000 	.word	0x43b18000
 8002940:	2000075c 	.word	0x2000075c
 8002944:	20000780 	.word	0x20000780
 8002948:	20000784 	.word	0x20000784
 800294c:	40080000 	.word	0x40080000
 8002950:	20000788 	.word	0x20000788
 8002954:	2000078c 	.word	0x2000078c
 8002958:	2000071c 	.word	0x2000071c
 800295c:	20000718 	.word	0x20000718
 8002960:	f7fd fd9e 	bl	80004a0 <__aeabi_f2d>
 8002964:	a336      	add	r3, pc, #216	; (adr r3, 8002a40 <trajectory+0x4d0>)
 8002966:	e9d3 2300 	ldrd	r2, r3, [r3]
 800296a:	f7fd fdf1 	bl	8000550 <__aeabi_dmul>
 800296e:	4602      	mov	r2, r0
 8002970:	460b      	mov	r3, r1
 8002972:	4610      	mov	r0, r2
 8002974:	4619      	mov	r1, r3
 8002976:	f04f 0200 	mov.w	r2, #0
 800297a:	4b27      	ldr	r3, [pc, #156]	; (8002a18 <trajectory+0x4a8>)
 800297c:	f7fd ff12 	bl	80007a4 <__aeabi_ddiv>
 8002980:	4602      	mov	r2, r0
 8002982:	460b      	mov	r3, r1
 8002984:	4610      	mov	r0, r2
 8002986:	4619      	mov	r1, r3
 8002988:	f7fe f892 	bl	8000ab0 <__aeabi_d2f>
 800298c:	4603      	mov	r3, r0
 800298e:	4a23      	ldr	r2, [pc, #140]	; (8002a1c <trajectory+0x4ac>)
 8002990:	6013      	str	r3, [r2, #0]
		if ((abs(currentPosition - finalAngle) < 2)||(tim >= tF)){
 8002992:	4b23      	ldr	r3, [pc, #140]	; (8002a20 <trajectory+0x4b0>)
 8002994:	ed93 7a00 	vldr	s14, [r3]
 8002998:	4b22      	ldr	r3, [pc, #136]	; (8002a24 <trajectory+0x4b4>)
 800299a:	edd3 7a00 	vldr	s15, [r3]
 800299e:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029a2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029a6:	ee17 3a90 	vmov	r3, s15
 80029aa:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 80029ae:	db0d      	blt.n	80029cc <trajectory+0x45c>
 80029b0:	4b1b      	ldr	r3, [pc, #108]	; (8002a20 <trajectory+0x4b0>)
 80029b2:	ed93 7a00 	vldr	s14, [r3]
 80029b6:	4b1b      	ldr	r3, [pc, #108]	; (8002a24 <trajectory+0x4b4>)
 80029b8:	edd3 7a00 	vldr	s15, [r3]
 80029bc:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029c0:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029c4:	ee17 3a90 	vmov	r3, s15
 80029c8:	2b01      	cmp	r3, #1
 80029ca:	dd0a      	ble.n	80029e2 <trajectory+0x472>
 80029cc:	4b16      	ldr	r3, [pc, #88]	; (8002a28 <trajectory+0x4b8>)
 80029ce:	ed93 7a00 	vldr	s14, [r3]
 80029d2:	4b16      	ldr	r3, [pc, #88]	; (8002a2c <trajectory+0x4bc>)
 80029d4:	edd3 7a00 	vldr	s15, [r3]
 80029d8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 80029dc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80029e0:	db0f      	blt.n	8002a02 <trajectory+0x492>
			start = 0;
 80029e2:	4b13      	ldr	r3, [pc, #76]	; (8002a30 <trajectory+0x4c0>)
 80029e4:	2200      	movs	r2, #0
 80029e6:	701a      	strb	r2, [r3, #0]
			velocity = 0;
 80029e8:	4b12      	ldr	r3, [pc, #72]	; (8002a34 <trajectory+0x4c4>)
 80029ea:	f04f 0200 	mov.w	r2, #0
 80029ee:	601a      	str	r2, [r3, #0]
			stopTime = Timestamp;
 80029f0:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029f4:	f7fe f974 	bl	8000ce0 <__aeabi_ul2f>
 80029f8:	4603      	mov	r3, r0
 80029fa:	4a0f      	ldr	r2, [pc, #60]	; (8002a38 <trajectory+0x4c8>)
 80029fc:	6013      	str	r3, [r2, #0]
			I2C();
 80029fe:	f7ff fd25 	bl	800244c <I2C>
		}
	}
	rawPosition[1] = rawPosition[0];
 8002a02:	4b0e      	ldr	r3, [pc, #56]	; (8002a3c <trajectory+0x4cc>)
 8002a04:	881a      	ldrh	r2, [r3, #0]
 8002a06:	4b0d      	ldr	r3, [pc, #52]	; (8002a3c <trajectory+0x4cc>)
 8002a08:	805a      	strh	r2, [r3, #2]
}
 8002a0a:	bf00      	nop
 8002a0c:	3708      	adds	r7, #8
 8002a0e:	46bd      	mov	sp, r7
 8002a10:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a14:	f3af 8000 	nop.w
 8002a18:	40768000 	.word	0x40768000
 8002a1c:	20000720 	.word	0x20000720
 8002a20:	20000738 	.word	0x20000738
 8002a24:	20000004 	.word	0x20000004
 8002a28:	20000724 	.word	0x20000724
 8002a2c:	2000075c 	.word	0x2000075c
 8002a30:	20000742 	.word	0x20000742
 8002a34:	20000718 	.word	0x20000718
 8002a38:	20000730 	.word	0x20000730
 8002a3c:	2000073c 	.word	0x2000073c
 8002a40:	51eb851f 	.word	0x51eb851f
 8002a44:	40091eb8 	.word	0x40091eb8

08002a48 <pidPosition>:

void pidPosition(){
 8002a48:	b480      	push	{r7}
 8002a4a:	af00      	add	r7, sp, #0
	static float error = 0;
	static float integral = 0;
	static float derivative = 0;
	error = abs(velocity) - abs(EncoderVel);
 8002a4c:	4b44      	ldr	r3, [pc, #272]	; (8002b60 <pidPosition+0x118>)
 8002a4e:	edd3 7a00 	vldr	s15, [r3]
 8002a52:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a56:	ee17 3a90 	vmov	r3, s15
 8002a5a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002a5e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002a62:	4b40      	ldr	r3, [pc, #256]	; (8002b64 <pidPosition+0x11c>)
 8002a64:	edd3 7a00 	vldr	s15, [r3]
 8002a68:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002a6c:	ee17 3a90 	vmov	r3, s15
 8002a70:	2b00      	cmp	r3, #0
 8002a72:	bfb8      	it	lt
 8002a74:	425b      	neglt	r3, r3
 8002a76:	1ad3      	subs	r3, r2, r3
 8002a78:	ee07 3a90 	vmov	s15, r3
 8002a7c:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002a80:	4b39      	ldr	r3, [pc, #228]	; (8002b68 <pidPosition+0x120>)
 8002a82:	edc3 7a00 	vstr	s15, [r3]
	integral = integral+error;
 8002a86:	4b39      	ldr	r3, [pc, #228]	; (8002b6c <pidPosition+0x124>)
 8002a88:	ed93 7a00 	vldr	s14, [r3]
 8002a8c:	4b36      	ldr	r3, [pc, #216]	; (8002b68 <pidPosition+0x120>)
 8002a8e:	edd3 7a00 	vldr	s15, [r3]
 8002a92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a96:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <pidPosition+0x124>)
 8002a98:	edc3 7a00 	vstr	s15, [r3]
	PWMOut = k + Kp_p*error + Ki_p*integral +Kd_p*(error-derivative);
 8002a9c:	4b34      	ldr	r3, [pc, #208]	; (8002b70 <pidPosition+0x128>)
 8002a9e:	881b      	ldrh	r3, [r3, #0]
 8002aa0:	ee07 3a90 	vmov	s15, r3
 8002aa4:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8002aa8:	4b32      	ldr	r3, [pc, #200]	; (8002b74 <pidPosition+0x12c>)
 8002aaa:	881b      	ldrh	r3, [r3, #0]
 8002aac:	ee07 3a90 	vmov	s15, r3
 8002ab0:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ab4:	4b2c      	ldr	r3, [pc, #176]	; (8002b68 <pidPosition+0x120>)
 8002ab6:	edd3 7a00 	vldr	s15, [r3]
 8002aba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002abe:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ac2:	4b2d      	ldr	r3, [pc, #180]	; (8002b78 <pidPosition+0x130>)
 8002ac4:	edd3 6a00 	vldr	s13, [r3]
 8002ac8:	4b28      	ldr	r3, [pc, #160]	; (8002b6c <pidPosition+0x124>)
 8002aca:	edd3 7a00 	vldr	s15, [r3]
 8002ace:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ad2:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002ad6:	4b29      	ldr	r3, [pc, #164]	; (8002b7c <pidPosition+0x134>)
 8002ad8:	881b      	ldrh	r3, [r3, #0]
 8002ada:	ee07 3a90 	vmov	s15, r3
 8002ade:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002ae2:	4b21      	ldr	r3, [pc, #132]	; (8002b68 <pidPosition+0x120>)
 8002ae4:	ed93 6a00 	vldr	s12, [r3]
 8002ae8:	4b25      	ldr	r3, [pc, #148]	; (8002b80 <pidPosition+0x138>)
 8002aea:	edd3 7a00 	vldr	s15, [r3]
 8002aee:	ee76 7a67 	vsub.f32	s15, s12, s15
 8002af2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002af6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002afa:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002afe:	ee17 2a90 	vmov	r2, s15
 8002b02:	4b20      	ldr	r3, [pc, #128]	; (8002b84 <pidPosition+0x13c>)
 8002b04:	601a      	str	r2, [r3, #0]
	derivative = error;
 8002b06:	4b18      	ldr	r3, [pc, #96]	; (8002b68 <pidPosition+0x120>)
 8002b08:	681b      	ldr	r3, [r3, #0]
 8002b0a:	4a1d      	ldr	r2, [pc, #116]	; (8002b80 <pidPosition+0x138>)
 8002b0c:	6013      	str	r3, [r2, #0]
	if (abs(PWMOut) > 10000){
 8002b0e:	4b1d      	ldr	r3, [pc, #116]	; (8002b84 <pidPosition+0x13c>)
 8002b10:	681b      	ldr	r3, [r3, #0]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	bfb8      	it	lt
 8002b16:	425b      	neglt	r3, r3
 8002b18:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b1c:	4293      	cmp	r3, r2
 8002b1e:	dd03      	ble.n	8002b28 <pidPosition+0xe0>
		PWMOut = 10000;
 8002b20:	4b18      	ldr	r3, [pc, #96]	; (8002b84 <pidPosition+0x13c>)
 8002b22:	f242 7210 	movw	r2, #10000	; 0x2710
 8002b26:	601a      	str	r2, [r3, #0]
	}

	if (velocity == 0){
 8002b28:	4b0d      	ldr	r3, [pc, #52]	; (8002b60 <pidPosition+0x118>)
 8002b2a:	edd3 7a00 	vldr	s15, [r3]
 8002b2e:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002b32:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b36:	d10e      	bne.n	8002b56 <pidPosition+0x10e>
		PWMOut = 0;
 8002b38:	4b12      	ldr	r3, [pc, #72]	; (8002b84 <pidPosition+0x13c>)
 8002b3a:	2200      	movs	r2, #0
 8002b3c:	601a      	str	r2, [r3, #0]
		error = 0;
 8002b3e:	4b0a      	ldr	r3, [pc, #40]	; (8002b68 <pidPosition+0x120>)
 8002b40:	f04f 0200 	mov.w	r2, #0
 8002b44:	601a      	str	r2, [r3, #0]
		integral = 0;
 8002b46:	4b09      	ldr	r3, [pc, #36]	; (8002b6c <pidPosition+0x124>)
 8002b48:	f04f 0200 	mov.w	r2, #0
 8002b4c:	601a      	str	r2, [r3, #0]
		derivative = 0;
 8002b4e:	4b0c      	ldr	r3, [pc, #48]	; (8002b80 <pidPosition+0x138>)
 8002b50:	f04f 0200 	mov.w	r2, #0
 8002b54:	601a      	str	r2, [r3, #0]
	}
}
 8002b56:	bf00      	nop
 8002b58:	46bd      	mov	sp, r7
 8002b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b5e:	4770      	bx	lr
 8002b60:	20000718 	.word	0x20000718
 8002b64:	20000714 	.word	0x20000714
 8002b68:	20000790 	.word	0x20000790
 8002b6c:	20000794 	.word	0x20000794
 8002b70:	2000075a 	.word	0x2000075a
 8002b74:	20000750 	.word	0x20000750
 8002b78:	20000754 	.word	0x20000754
 8002b7c:	20000758 	.word	0x20000758
 8002b80:	20000798 	.word	0x20000798
 8002b84:	20000000 	.word	0x20000000

08002b88 <gotoSethome>:
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
	}
	htim3.Instance->CCR1 = abs(PWMOut);
	state[1] = state[0];
}
void gotoSethome(){
 8002b88:	b580      	push	{r7, lr}
 8002b8a:	af00      	add	r7, sp, #0
	if (SetHome == 1){
 8002b8c:	4b05      	ldr	r3, [pc, #20]	; (8002ba4 <gotoSethome+0x1c>)
 8002b8e:	781b      	ldrb	r3, [r3, #0]
 8002b90:	2b00      	cmp	r3, #0
 8002b92:	d005      	beq.n	8002ba0 <gotoSethome+0x18>
		velocity = 3;
 8002b94:	4b04      	ldr	r3, [pc, #16]	; (8002ba8 <gotoSethome+0x20>)
 8002b96:	4a05      	ldr	r2, [pc, #20]	; (8002bac <gotoSethome+0x24>)
 8002b98:	601a      	str	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002b9a:	2017      	movs	r0, #23
 8002b9c:	f001 f8b9 	bl	8003d12 <HAL_NVIC_EnableIRQ>
	}
}
 8002ba0:	bf00      	nop
 8002ba2:	bd80      	pop	{r7, pc}
 8002ba4:	20000729 	.word	0x20000729
 8002ba8:	20000718 	.word	0x20000718
 8002bac:	40400000 	.word	0x40400000

08002bb0 <kalman>:
void kalman(){
 8002bb0:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002bb4:	af00      	add	r7, sp, #0
	static float P21predictPRE = 0;
	static float P22predictPRE = 0;
	static float errorVel = 0;
	static float delt = 0;

	delt = (float) dt/1000000;
 8002bb6:	4bda      	ldr	r3, [pc, #872]	; (8002f20 <kalman+0x370>)
 8002bb8:	881b      	ldrh	r3, [r3, #0]
 8002bba:	ee07 3a90 	vmov	s15, r3
 8002bbe:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002bc2:	eddf 6ad8 	vldr	s13, [pc, #864]	; 8002f24 <kalman+0x374>
 8002bc6:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002bca:	4bd7      	ldr	r3, [pc, #860]	; (8002f28 <kalman+0x378>)
 8002bcc:	edc3 7a00 	vstr	s15, [r3]
	omegaPredict =  (float) omegaPredictPre;
 8002bd0:	4bd6      	ldr	r3, [pc, #856]	; (8002f2c <kalman+0x37c>)
 8002bd2:	681b      	ldr	r3, [r3, #0]
 8002bd4:	4ad6      	ldr	r2, [pc, #856]	; (8002f30 <kalman+0x380>)
 8002bd6:	6013      	str	r3, [r2, #0]
	errorVel = (float) EncoderVelocity_Update() - omegaPredict;
 8002bd8:	f7ff fc6a 	bl	80024b0 <EncoderVelocity_Update>
 8002bdc:	eeb0 7a40 	vmov.f32	s14, s0
 8002be0:	4bd3      	ldr	r3, [pc, #844]	; (8002f30 <kalman+0x380>)
 8002be2:	edd3 7a00 	vldr	s15, [r3]
 8002be6:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002bea:	4bd2      	ldr	r3, [pc, #840]	; (8002f34 <kalman+0x384>)
 8002bec:	edc3 7a00 	vstr	s15, [r3]

	P11predict = (float) P11predictPRE+delt*P21predictPRE+(pow(Gl,2)*pow(delt,4))/4+(pow(delt,2)*(P12predictPRE+delt*P22predictPRE))/delt;
 8002bf0:	4bcd      	ldr	r3, [pc, #820]	; (8002f28 <kalman+0x378>)
 8002bf2:	ed93 7a00 	vldr	s14, [r3]
 8002bf6:	4bd0      	ldr	r3, [pc, #832]	; (8002f38 <kalman+0x388>)
 8002bf8:	edd3 7a00 	vldr	s15, [r3]
 8002bfc:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002c00:	4bce      	ldr	r3, [pc, #824]	; (8002f3c <kalman+0x38c>)
 8002c02:	edd3 7a00 	vldr	s15, [r3]
 8002c06:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c0a:	ee17 0a90 	vmov	r0, s15
 8002c0e:	f7fd fc47 	bl	80004a0 <__aeabi_f2d>
 8002c12:	4604      	mov	r4, r0
 8002c14:	460d      	mov	r5, r1
 8002c16:	4bca      	ldr	r3, [pc, #808]	; (8002f40 <kalman+0x390>)
 8002c18:	681b      	ldr	r3, [r3, #0]
 8002c1a:	4618      	mov	r0, r3
 8002c1c:	f7fd fc40 	bl	80004a0 <__aeabi_f2d>
 8002c20:	4602      	mov	r2, r0
 8002c22:	460b      	mov	r3, r1
 8002c24:	ed9f 1bba 	vldr	d1, [pc, #744]	; 8002f10 <kalman+0x360>
 8002c28:	ec43 2b10 	vmov	d0, r2, r3
 8002c2c:	f006 fb7a 	bl	8009324 <pow>
 8002c30:	ec59 8b10 	vmov	r8, r9, d0
 8002c34:	4bbc      	ldr	r3, [pc, #752]	; (8002f28 <kalman+0x378>)
 8002c36:	681b      	ldr	r3, [r3, #0]
 8002c38:	4618      	mov	r0, r3
 8002c3a:	f7fd fc31 	bl	80004a0 <__aeabi_f2d>
 8002c3e:	4602      	mov	r2, r0
 8002c40:	460b      	mov	r3, r1
 8002c42:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 8002f18 <kalman+0x368>
 8002c46:	ec43 2b10 	vmov	d0, r2, r3
 8002c4a:	f006 fb6b 	bl	8009324 <pow>
 8002c4e:	ec53 2b10 	vmov	r2, r3, d0
 8002c52:	4640      	mov	r0, r8
 8002c54:	4649      	mov	r1, r9
 8002c56:	f7fd fc7b 	bl	8000550 <__aeabi_dmul>
 8002c5a:	4602      	mov	r2, r0
 8002c5c:	460b      	mov	r3, r1
 8002c5e:	4610      	mov	r0, r2
 8002c60:	4619      	mov	r1, r3
 8002c62:	f04f 0200 	mov.w	r2, #0
 8002c66:	4bb7      	ldr	r3, [pc, #732]	; (8002f44 <kalman+0x394>)
 8002c68:	f7fd fd9c 	bl	80007a4 <__aeabi_ddiv>
 8002c6c:	4602      	mov	r2, r0
 8002c6e:	460b      	mov	r3, r1
 8002c70:	4620      	mov	r0, r4
 8002c72:	4629      	mov	r1, r5
 8002c74:	f7fd fab6 	bl	80001e4 <__adddf3>
 8002c78:	4602      	mov	r2, r0
 8002c7a:	460b      	mov	r3, r1
 8002c7c:	4614      	mov	r4, r2
 8002c7e:	461d      	mov	r5, r3
 8002c80:	4ba9      	ldr	r3, [pc, #676]	; (8002f28 <kalman+0x378>)
 8002c82:	681b      	ldr	r3, [r3, #0]
 8002c84:	4618      	mov	r0, r3
 8002c86:	f7fd fc0b 	bl	80004a0 <__aeabi_f2d>
 8002c8a:	4602      	mov	r2, r0
 8002c8c:	460b      	mov	r3, r1
 8002c8e:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 8002f10 <kalman+0x360>
 8002c92:	ec43 2b10 	vmov	d0, r2, r3
 8002c96:	f006 fb45 	bl	8009324 <pow>
 8002c9a:	ec59 8b10 	vmov	r8, r9, d0
 8002c9e:	4ba2      	ldr	r3, [pc, #648]	; (8002f28 <kalman+0x378>)
 8002ca0:	ed93 7a00 	vldr	s14, [r3]
 8002ca4:	4ba8      	ldr	r3, [pc, #672]	; (8002f48 <kalman+0x398>)
 8002ca6:	edd3 7a00 	vldr	s15, [r3]
 8002caa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002cae:	4ba7      	ldr	r3, [pc, #668]	; (8002f4c <kalman+0x39c>)
 8002cb0:	edd3 7a00 	vldr	s15, [r3]
 8002cb4:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002cb8:	ee17 0a90 	vmov	r0, s15
 8002cbc:	f7fd fbf0 	bl	80004a0 <__aeabi_f2d>
 8002cc0:	4602      	mov	r2, r0
 8002cc2:	460b      	mov	r3, r1
 8002cc4:	4640      	mov	r0, r8
 8002cc6:	4649      	mov	r1, r9
 8002cc8:	f7fd fc42 	bl	8000550 <__aeabi_dmul>
 8002ccc:	4602      	mov	r2, r0
 8002cce:	460b      	mov	r3, r1
 8002cd0:	4690      	mov	r8, r2
 8002cd2:	4699      	mov	r9, r3
 8002cd4:	4b94      	ldr	r3, [pc, #592]	; (8002f28 <kalman+0x378>)
 8002cd6:	681b      	ldr	r3, [r3, #0]
 8002cd8:	4618      	mov	r0, r3
 8002cda:	f7fd fbe1 	bl	80004a0 <__aeabi_f2d>
 8002cde:	4602      	mov	r2, r0
 8002ce0:	460b      	mov	r3, r1
 8002ce2:	4640      	mov	r0, r8
 8002ce4:	4649      	mov	r1, r9
 8002ce6:	f7fd fd5d 	bl	80007a4 <__aeabi_ddiv>
 8002cea:	4602      	mov	r2, r0
 8002cec:	460b      	mov	r3, r1
 8002cee:	4620      	mov	r0, r4
 8002cf0:	4629      	mov	r1, r5
 8002cf2:	f7fd fa77 	bl	80001e4 <__adddf3>
 8002cf6:	4602      	mov	r2, r0
 8002cf8:	460b      	mov	r3, r1
 8002cfa:	4610      	mov	r0, r2
 8002cfc:	4619      	mov	r1, r3
 8002cfe:	f7fd fed7 	bl	8000ab0 <__aeabi_d2f>
 8002d02:	4603      	mov	r3, r0
 8002d04:	4a92      	ldr	r2, [pc, #584]	; (8002f50 <kalman+0x3a0>)
 8002d06:	6013      	str	r3, [r2, #0]
	P12predict = (float) P12predictPRE+delt*P22predictPRE+(pow(Gl,2)*delt*pow(delt,2))/2;
 8002d08:	4b87      	ldr	r3, [pc, #540]	; (8002f28 <kalman+0x378>)
 8002d0a:	ed93 7a00 	vldr	s14, [r3]
 8002d0e:	4b8e      	ldr	r3, [pc, #568]	; (8002f48 <kalman+0x398>)
 8002d10:	edd3 7a00 	vldr	s15, [r3]
 8002d14:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002d18:	4b8c      	ldr	r3, [pc, #560]	; (8002f4c <kalman+0x39c>)
 8002d1a:	edd3 7a00 	vldr	s15, [r3]
 8002d1e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002d22:	ee17 0a90 	vmov	r0, s15
 8002d26:	f7fd fbbb 	bl	80004a0 <__aeabi_f2d>
 8002d2a:	4604      	mov	r4, r0
 8002d2c:	460d      	mov	r5, r1
 8002d2e:	4b84      	ldr	r3, [pc, #528]	; (8002f40 <kalman+0x390>)
 8002d30:	681b      	ldr	r3, [r3, #0]
 8002d32:	4618      	mov	r0, r3
 8002d34:	f7fd fbb4 	bl	80004a0 <__aeabi_f2d>
 8002d38:	4602      	mov	r2, r0
 8002d3a:	460b      	mov	r3, r1
 8002d3c:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002f10 <kalman+0x360>
 8002d40:	ec43 2b10 	vmov	d0, r2, r3
 8002d44:	f006 faee 	bl	8009324 <pow>
 8002d48:	ec59 8b10 	vmov	r8, r9, d0
 8002d4c:	4b76      	ldr	r3, [pc, #472]	; (8002f28 <kalman+0x378>)
 8002d4e:	681b      	ldr	r3, [r3, #0]
 8002d50:	4618      	mov	r0, r3
 8002d52:	f7fd fba5 	bl	80004a0 <__aeabi_f2d>
 8002d56:	4602      	mov	r2, r0
 8002d58:	460b      	mov	r3, r1
 8002d5a:	4640      	mov	r0, r8
 8002d5c:	4649      	mov	r1, r9
 8002d5e:	f7fd fbf7 	bl	8000550 <__aeabi_dmul>
 8002d62:	4602      	mov	r2, r0
 8002d64:	460b      	mov	r3, r1
 8002d66:	4690      	mov	r8, r2
 8002d68:	4699      	mov	r9, r3
 8002d6a:	4b6f      	ldr	r3, [pc, #444]	; (8002f28 <kalman+0x378>)
 8002d6c:	681b      	ldr	r3, [r3, #0]
 8002d6e:	4618      	mov	r0, r3
 8002d70:	f7fd fb96 	bl	80004a0 <__aeabi_f2d>
 8002d74:	4602      	mov	r2, r0
 8002d76:	460b      	mov	r3, r1
 8002d78:	ed9f 1b65 	vldr	d1, [pc, #404]	; 8002f10 <kalman+0x360>
 8002d7c:	ec43 2b10 	vmov	d0, r2, r3
 8002d80:	f006 fad0 	bl	8009324 <pow>
 8002d84:	ec53 2b10 	vmov	r2, r3, d0
 8002d88:	4640      	mov	r0, r8
 8002d8a:	4649      	mov	r1, r9
 8002d8c:	f7fd fbe0 	bl	8000550 <__aeabi_dmul>
 8002d90:	4602      	mov	r2, r0
 8002d92:	460b      	mov	r3, r1
 8002d94:	4610      	mov	r0, r2
 8002d96:	4619      	mov	r1, r3
 8002d98:	f04f 0200 	mov.w	r2, #0
 8002d9c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002da0:	f7fd fd00 	bl	80007a4 <__aeabi_ddiv>
 8002da4:	4602      	mov	r2, r0
 8002da6:	460b      	mov	r3, r1
 8002da8:	4620      	mov	r0, r4
 8002daa:	4629      	mov	r1, r5
 8002dac:	f7fd fa1a 	bl	80001e4 <__adddf3>
 8002db0:	4602      	mov	r2, r0
 8002db2:	460b      	mov	r3, r1
 8002db4:	4610      	mov	r0, r2
 8002db6:	4619      	mov	r1, r3
 8002db8:	f7fd fe7a 	bl	8000ab0 <__aeabi_d2f>
 8002dbc:	4603      	mov	r3, r0
 8002dbe:	4a65      	ldr	r2, [pc, #404]	; (8002f54 <kalman+0x3a4>)
 8002dc0:	6013      	str	r3, [r2, #0]
	P21predict = (float) (2*delt*P21predictPRE+pow(Gl,2)*pow(delt,4)+2*P22predictPRE*pow(delt,2))/(2*delt);
 8002dc2:	4b59      	ldr	r3, [pc, #356]	; (8002f28 <kalman+0x378>)
 8002dc4:	edd3 7a00 	vldr	s15, [r3]
 8002dc8:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002dcc:	4b5a      	ldr	r3, [pc, #360]	; (8002f38 <kalman+0x388>)
 8002dce:	edd3 7a00 	vldr	s15, [r3]
 8002dd2:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002dd6:	ee17 0a90 	vmov	r0, s15
 8002dda:	f7fd fb61 	bl	80004a0 <__aeabi_f2d>
 8002dde:	4604      	mov	r4, r0
 8002de0:	460d      	mov	r5, r1
 8002de2:	4b57      	ldr	r3, [pc, #348]	; (8002f40 <kalman+0x390>)
 8002de4:	681b      	ldr	r3, [r3, #0]
 8002de6:	4618      	mov	r0, r3
 8002de8:	f7fd fb5a 	bl	80004a0 <__aeabi_f2d>
 8002dec:	4602      	mov	r2, r0
 8002dee:	460b      	mov	r3, r1
 8002df0:	ed9f 1b47 	vldr	d1, [pc, #284]	; 8002f10 <kalman+0x360>
 8002df4:	ec43 2b10 	vmov	d0, r2, r3
 8002df8:	f006 fa94 	bl	8009324 <pow>
 8002dfc:	ec59 8b10 	vmov	r8, r9, d0
 8002e00:	4b49      	ldr	r3, [pc, #292]	; (8002f28 <kalman+0x378>)
 8002e02:	681b      	ldr	r3, [r3, #0]
 8002e04:	4618      	mov	r0, r3
 8002e06:	f7fd fb4b 	bl	80004a0 <__aeabi_f2d>
 8002e0a:	4602      	mov	r2, r0
 8002e0c:	460b      	mov	r3, r1
 8002e0e:	ed9f 1b42 	vldr	d1, [pc, #264]	; 8002f18 <kalman+0x368>
 8002e12:	ec43 2b10 	vmov	d0, r2, r3
 8002e16:	f006 fa85 	bl	8009324 <pow>
 8002e1a:	ec53 2b10 	vmov	r2, r3, d0
 8002e1e:	4640      	mov	r0, r8
 8002e20:	4649      	mov	r1, r9
 8002e22:	f7fd fb95 	bl	8000550 <__aeabi_dmul>
 8002e26:	4602      	mov	r2, r0
 8002e28:	460b      	mov	r3, r1
 8002e2a:	4620      	mov	r0, r4
 8002e2c:	4629      	mov	r1, r5
 8002e2e:	f7fd f9d9 	bl	80001e4 <__adddf3>
 8002e32:	4602      	mov	r2, r0
 8002e34:	460b      	mov	r3, r1
 8002e36:	4690      	mov	r8, r2
 8002e38:	4699      	mov	r9, r3
 8002e3a:	4b43      	ldr	r3, [pc, #268]	; (8002f48 <kalman+0x398>)
 8002e3c:	edd3 7a00 	vldr	s15, [r3]
 8002e40:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002e44:	ee17 0a90 	vmov	r0, s15
 8002e48:	f7fd fb2a 	bl	80004a0 <__aeabi_f2d>
 8002e4c:	4604      	mov	r4, r0
 8002e4e:	460d      	mov	r5, r1
 8002e50:	4b35      	ldr	r3, [pc, #212]	; (8002f28 <kalman+0x378>)
 8002e52:	681b      	ldr	r3, [r3, #0]
 8002e54:	4618      	mov	r0, r3
 8002e56:	f7fd fb23 	bl	80004a0 <__aeabi_f2d>
 8002e5a:	4602      	mov	r2, r0
 8002e5c:	460b      	mov	r3, r1
 8002e5e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 8002f10 <kalman+0x360>
 8002e62:	ec43 2b10 	vmov	d0, r2, r3
 8002e66:	f006 fa5d 	bl	8009324 <pow>
 8002e6a:	ec53 2b10 	vmov	r2, r3, d0
 8002e6e:	4620      	mov	r0, r4
 8002e70:	4629      	mov	r1, r5
 8002e72:	f7fd fb6d 	bl	8000550 <__aeabi_dmul>
 8002e76:	4602      	mov	r2, r0
 8002e78:	460b      	mov	r3, r1
 8002e7a:	4640      	mov	r0, r8
 8002e7c:	4649      	mov	r1, r9
 8002e7e:	f7fd f9b1 	bl	80001e4 <__adddf3>
 8002e82:	4602      	mov	r2, r0
 8002e84:	460b      	mov	r3, r1
 8002e86:	4610      	mov	r0, r2
 8002e88:	4619      	mov	r1, r3
 8002e8a:	f7fd fe11 	bl	8000ab0 <__aeabi_d2f>
 8002e8e:	ee06 0a90 	vmov	s13, r0
 8002e92:	4b25      	ldr	r3, [pc, #148]	; (8002f28 <kalman+0x378>)
 8002e94:	edd3 7a00 	vldr	s15, [r3]
 8002e98:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002e9c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002ea0:	4b2d      	ldr	r3, [pc, #180]	; (8002f58 <kalman+0x3a8>)
 8002ea2:	edc3 7a00 	vstr	s15, [r3]
	P22predict = (float) pow(Gl,2)*pow(delt,2) +P22predictPRE;
 8002ea6:	4b26      	ldr	r3, [pc, #152]	; (8002f40 <kalman+0x390>)
 8002ea8:	681b      	ldr	r3, [r3, #0]
 8002eaa:	4618      	mov	r0, r3
 8002eac:	f7fd faf8 	bl	80004a0 <__aeabi_f2d>
 8002eb0:	4602      	mov	r2, r0
 8002eb2:	460b      	mov	r3, r1
 8002eb4:	ed9f 1b16 	vldr	d1, [pc, #88]	; 8002f10 <kalman+0x360>
 8002eb8:	ec43 2b10 	vmov	d0, r2, r3
 8002ebc:	f006 fa32 	bl	8009324 <pow>
 8002ec0:	ec53 2b10 	vmov	r2, r3, d0
 8002ec4:	4610      	mov	r0, r2
 8002ec6:	4619      	mov	r1, r3
 8002ec8:	f7fd fdf2 	bl	8000ab0 <__aeabi_d2f>
 8002ecc:	4603      	mov	r3, r0
 8002ece:	4618      	mov	r0, r3
 8002ed0:	f7fd fae6 	bl	80004a0 <__aeabi_f2d>
 8002ed4:	4604      	mov	r4, r0
 8002ed6:	460d      	mov	r5, r1
 8002ed8:	4b13      	ldr	r3, [pc, #76]	; (8002f28 <kalman+0x378>)
 8002eda:	681b      	ldr	r3, [r3, #0]
 8002edc:	4618      	mov	r0, r3
 8002ede:	f7fd fadf 	bl	80004a0 <__aeabi_f2d>
 8002ee2:	4602      	mov	r2, r0
 8002ee4:	460b      	mov	r3, r1
 8002ee6:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 8002f10 <kalman+0x360>
 8002eea:	ec43 2b10 	vmov	d0, r2, r3
 8002eee:	f006 fa19 	bl	8009324 <pow>
 8002ef2:	ec53 2b10 	vmov	r2, r3, d0
 8002ef6:	4620      	mov	r0, r4
 8002ef8:	4629      	mov	r1, r5
 8002efa:	f7fd fb29 	bl	8000550 <__aeabi_dmul>
 8002efe:	4602      	mov	r2, r0
 8002f00:	460b      	mov	r3, r1
 8002f02:	4614      	mov	r4, r2
 8002f04:	461d      	mov	r5, r3
 8002f06:	4b10      	ldr	r3, [pc, #64]	; (8002f48 <kalman+0x398>)
 8002f08:	681b      	ldr	r3, [r3, #0]
 8002f0a:	4618      	mov	r0, r3
 8002f0c:	e026      	b.n	8002f5c <kalman+0x3ac>
 8002f0e:	bf00      	nop
 8002f10:	00000000 	.word	0x00000000
 8002f14:	40000000 	.word	0x40000000
 8002f18:	00000000 	.word	0x00000000
 8002f1c:	40100000 	.word	0x40100000
 8002f20:	20000008 	.word	0x20000008
 8002f24:	49742400 	.word	0x49742400
 8002f28:	2000079c 	.word	0x2000079c
 8002f2c:	200007a0 	.word	0x200007a0
 8002f30:	200007a4 	.word	0x200007a4
 8002f34:	200007a8 	.word	0x200007a8
 8002f38:	200007ac 	.word	0x200007ac
 8002f3c:	200007b0 	.word	0x200007b0
 8002f40:	20000014 	.word	0x20000014
 8002f44:	40100000 	.word	0x40100000
 8002f48:	200007b4 	.word	0x200007b4
 8002f4c:	200007b8 	.word	0x200007b8
 8002f50:	200007bc 	.word	0x200007bc
 8002f54:	200007c0 	.word	0x200007c0
 8002f58:	200007c4 	.word	0x200007c4
 8002f5c:	f7fd faa0 	bl	80004a0 <__aeabi_f2d>
 8002f60:	4602      	mov	r2, r0
 8002f62:	460b      	mov	r3, r1
 8002f64:	4620      	mov	r0, r4
 8002f66:	4629      	mov	r1, r5
 8002f68:	f7fd f93c 	bl	80001e4 <__adddf3>
 8002f6c:	4602      	mov	r2, r0
 8002f6e:	460b      	mov	r3, r1
 8002f70:	4610      	mov	r0, r2
 8002f72:	4619      	mov	r1, r3
 8002f74:	f7fd fd9c 	bl	8000ab0 <__aeabi_d2f>
 8002f78:	4603      	mov	r3, r0
 8002f7a:	4ac9      	ldr	r2, [pc, #804]	; (80032a0 <kalman+0x6f0>)
 8002f7c:	6013      	str	r3, [r2, #0]

	EncoderVel = (float) omegaPredict + (P22predict*errorVel)/(pow(R,2)+P22predict);
 8002f7e:	4bc9      	ldr	r3, [pc, #804]	; (80032a4 <kalman+0x6f4>)
 8002f80:	681b      	ldr	r3, [r3, #0]
 8002f82:	4618      	mov	r0, r3
 8002f84:	f7fd fa8c 	bl	80004a0 <__aeabi_f2d>
 8002f88:	4604      	mov	r4, r0
 8002f8a:	460d      	mov	r5, r1
 8002f8c:	4bc4      	ldr	r3, [pc, #784]	; (80032a0 <kalman+0x6f0>)
 8002f8e:	ed93 7a00 	vldr	s14, [r3]
 8002f92:	4bc5      	ldr	r3, [pc, #788]	; (80032a8 <kalman+0x6f8>)
 8002f94:	edd3 7a00 	vldr	s15, [r3]
 8002f98:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f9c:	ee17 0a90 	vmov	r0, s15
 8002fa0:	f7fd fa7e 	bl	80004a0 <__aeabi_f2d>
 8002fa4:	4680      	mov	r8, r0
 8002fa6:	4689      	mov	r9, r1
 8002fa8:	4bc0      	ldr	r3, [pc, #768]	; (80032ac <kalman+0x6fc>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	4618      	mov	r0, r3
 8002fae:	f7fd fa77 	bl	80004a0 <__aeabi_f2d>
 8002fb2:	4602      	mov	r2, r0
 8002fb4:	460b      	mov	r3, r1
 8002fb6:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 8003298 <kalman+0x6e8>
 8002fba:	ec43 2b10 	vmov	d0, r2, r3
 8002fbe:	f006 f9b1 	bl	8009324 <pow>
 8002fc2:	ec5b ab10 	vmov	sl, fp, d0
 8002fc6:	4bb6      	ldr	r3, [pc, #728]	; (80032a0 <kalman+0x6f0>)
 8002fc8:	681b      	ldr	r3, [r3, #0]
 8002fca:	4618      	mov	r0, r3
 8002fcc:	f7fd fa68 	bl	80004a0 <__aeabi_f2d>
 8002fd0:	4602      	mov	r2, r0
 8002fd2:	460b      	mov	r3, r1
 8002fd4:	4650      	mov	r0, sl
 8002fd6:	4659      	mov	r1, fp
 8002fd8:	f7fd f904 	bl	80001e4 <__adddf3>
 8002fdc:	4602      	mov	r2, r0
 8002fde:	460b      	mov	r3, r1
 8002fe0:	4640      	mov	r0, r8
 8002fe2:	4649      	mov	r1, r9
 8002fe4:	f7fd fbde 	bl	80007a4 <__aeabi_ddiv>
 8002fe8:	4602      	mov	r2, r0
 8002fea:	460b      	mov	r3, r1
 8002fec:	4620      	mov	r0, r4
 8002fee:	4629      	mov	r1, r5
 8002ff0:	f7fd f8f8 	bl	80001e4 <__adddf3>
 8002ff4:	4602      	mov	r2, r0
 8002ff6:	460b      	mov	r3, r1
 8002ff8:	4610      	mov	r0, r2
 8002ffa:	4619      	mov	r1, r3
 8002ffc:	f7fd fd58 	bl	8000ab0 <__aeabi_d2f>
 8003000:	4603      	mov	r3, r0
 8003002:	4aab      	ldr	r2, [pc, #684]	; (80032b0 <kalman+0x700>)
 8003004:	6013      	str	r3, [r2, #0]
	P11predictPRE = (float) P11predict - (P12predict*P21predict)/(pow(R,2)+P22predict);
 8003006:	4bab      	ldr	r3, [pc, #684]	; (80032b4 <kalman+0x704>)
 8003008:	681b      	ldr	r3, [r3, #0]
 800300a:	4618      	mov	r0, r3
 800300c:	f7fd fa48 	bl	80004a0 <__aeabi_f2d>
 8003010:	4604      	mov	r4, r0
 8003012:	460d      	mov	r5, r1
 8003014:	4ba8      	ldr	r3, [pc, #672]	; (80032b8 <kalman+0x708>)
 8003016:	ed93 7a00 	vldr	s14, [r3]
 800301a:	4ba8      	ldr	r3, [pc, #672]	; (80032bc <kalman+0x70c>)
 800301c:	edd3 7a00 	vldr	s15, [r3]
 8003020:	ee67 7a27 	vmul.f32	s15, s14, s15
 8003024:	ee17 0a90 	vmov	r0, s15
 8003028:	f7fd fa3a 	bl	80004a0 <__aeabi_f2d>
 800302c:	4680      	mov	r8, r0
 800302e:	4689      	mov	r9, r1
 8003030:	4b9e      	ldr	r3, [pc, #632]	; (80032ac <kalman+0x6fc>)
 8003032:	681b      	ldr	r3, [r3, #0]
 8003034:	4618      	mov	r0, r3
 8003036:	f7fd fa33 	bl	80004a0 <__aeabi_f2d>
 800303a:	4602      	mov	r2, r0
 800303c:	460b      	mov	r3, r1
 800303e:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8003298 <kalman+0x6e8>
 8003042:	ec43 2b10 	vmov	d0, r2, r3
 8003046:	f006 f96d 	bl	8009324 <pow>
 800304a:	ec5b ab10 	vmov	sl, fp, d0
 800304e:	4b94      	ldr	r3, [pc, #592]	; (80032a0 <kalman+0x6f0>)
 8003050:	681b      	ldr	r3, [r3, #0]
 8003052:	4618      	mov	r0, r3
 8003054:	f7fd fa24 	bl	80004a0 <__aeabi_f2d>
 8003058:	4602      	mov	r2, r0
 800305a:	460b      	mov	r3, r1
 800305c:	4650      	mov	r0, sl
 800305e:	4659      	mov	r1, fp
 8003060:	f7fd f8c0 	bl	80001e4 <__adddf3>
 8003064:	4602      	mov	r2, r0
 8003066:	460b      	mov	r3, r1
 8003068:	4640      	mov	r0, r8
 800306a:	4649      	mov	r1, r9
 800306c:	f7fd fb9a 	bl	80007a4 <__aeabi_ddiv>
 8003070:	4602      	mov	r2, r0
 8003072:	460b      	mov	r3, r1
 8003074:	4620      	mov	r0, r4
 8003076:	4629      	mov	r1, r5
 8003078:	f7fd f8b2 	bl	80001e0 <__aeabi_dsub>
 800307c:	4602      	mov	r2, r0
 800307e:	460b      	mov	r3, r1
 8003080:	4610      	mov	r0, r2
 8003082:	4619      	mov	r1, r3
 8003084:	f7fd fd14 	bl	8000ab0 <__aeabi_d2f>
 8003088:	4603      	mov	r3, r0
 800308a:	4a8d      	ldr	r2, [pc, #564]	; (80032c0 <kalman+0x710>)
 800308c:	6013      	str	r3, [r2, #0]
	P12predictPRE = (float) P12predict - (P12predict*P22predict)/(pow(R,2)+P22predict);
 800308e:	4b8a      	ldr	r3, [pc, #552]	; (80032b8 <kalman+0x708>)
 8003090:	681b      	ldr	r3, [r3, #0]
 8003092:	4618      	mov	r0, r3
 8003094:	f7fd fa04 	bl	80004a0 <__aeabi_f2d>
 8003098:	4604      	mov	r4, r0
 800309a:	460d      	mov	r5, r1
 800309c:	4b86      	ldr	r3, [pc, #536]	; (80032b8 <kalman+0x708>)
 800309e:	ed93 7a00 	vldr	s14, [r3]
 80030a2:	4b7f      	ldr	r3, [pc, #508]	; (80032a0 <kalman+0x6f0>)
 80030a4:	edd3 7a00 	vldr	s15, [r3]
 80030a8:	ee67 7a27 	vmul.f32	s15, s14, s15
 80030ac:	ee17 0a90 	vmov	r0, s15
 80030b0:	f7fd f9f6 	bl	80004a0 <__aeabi_f2d>
 80030b4:	4680      	mov	r8, r0
 80030b6:	4689      	mov	r9, r1
 80030b8:	4b7c      	ldr	r3, [pc, #496]	; (80032ac <kalman+0x6fc>)
 80030ba:	681b      	ldr	r3, [r3, #0]
 80030bc:	4618      	mov	r0, r3
 80030be:	f7fd f9ef 	bl	80004a0 <__aeabi_f2d>
 80030c2:	4602      	mov	r2, r0
 80030c4:	460b      	mov	r3, r1
 80030c6:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003298 <kalman+0x6e8>
 80030ca:	ec43 2b10 	vmov	d0, r2, r3
 80030ce:	f006 f929 	bl	8009324 <pow>
 80030d2:	ec5b ab10 	vmov	sl, fp, d0
 80030d6:	4b72      	ldr	r3, [pc, #456]	; (80032a0 <kalman+0x6f0>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4618      	mov	r0, r3
 80030dc:	f7fd f9e0 	bl	80004a0 <__aeabi_f2d>
 80030e0:	4602      	mov	r2, r0
 80030e2:	460b      	mov	r3, r1
 80030e4:	4650      	mov	r0, sl
 80030e6:	4659      	mov	r1, fp
 80030e8:	f7fd f87c 	bl	80001e4 <__adddf3>
 80030ec:	4602      	mov	r2, r0
 80030ee:	460b      	mov	r3, r1
 80030f0:	4640      	mov	r0, r8
 80030f2:	4649      	mov	r1, r9
 80030f4:	f7fd fb56 	bl	80007a4 <__aeabi_ddiv>
 80030f8:	4602      	mov	r2, r0
 80030fa:	460b      	mov	r3, r1
 80030fc:	4620      	mov	r0, r4
 80030fe:	4629      	mov	r1, r5
 8003100:	f7fd f86e 	bl	80001e0 <__aeabi_dsub>
 8003104:	4602      	mov	r2, r0
 8003106:	460b      	mov	r3, r1
 8003108:	4610      	mov	r0, r2
 800310a:	4619      	mov	r1, r3
 800310c:	f7fd fcd0 	bl	8000ab0 <__aeabi_d2f>
 8003110:	4603      	mov	r3, r0
 8003112:	4a6c      	ldr	r2, [pc, #432]	; (80032c4 <kalman+0x714>)
 8003114:	6013      	str	r3, [r2, #0]
	P21predictPRE = (float) P21predict*(P22predict/(pow(R,2)+P22predict)-1);
 8003116:	4b69      	ldr	r3, [pc, #420]	; (80032bc <kalman+0x70c>)
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	4618      	mov	r0, r3
 800311c:	f7fd f9c0 	bl	80004a0 <__aeabi_f2d>
 8003120:	4604      	mov	r4, r0
 8003122:	460d      	mov	r5, r1
 8003124:	4b5e      	ldr	r3, [pc, #376]	; (80032a0 <kalman+0x6f0>)
 8003126:	681b      	ldr	r3, [r3, #0]
 8003128:	4618      	mov	r0, r3
 800312a:	f7fd f9b9 	bl	80004a0 <__aeabi_f2d>
 800312e:	4680      	mov	r8, r0
 8003130:	4689      	mov	r9, r1
 8003132:	4b5e      	ldr	r3, [pc, #376]	; (80032ac <kalman+0x6fc>)
 8003134:	681b      	ldr	r3, [r3, #0]
 8003136:	4618      	mov	r0, r3
 8003138:	f7fd f9b2 	bl	80004a0 <__aeabi_f2d>
 800313c:	4602      	mov	r2, r0
 800313e:	460b      	mov	r3, r1
 8003140:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003298 <kalman+0x6e8>
 8003144:	ec43 2b10 	vmov	d0, r2, r3
 8003148:	f006 f8ec 	bl	8009324 <pow>
 800314c:	ec5b ab10 	vmov	sl, fp, d0
 8003150:	4b53      	ldr	r3, [pc, #332]	; (80032a0 <kalman+0x6f0>)
 8003152:	681b      	ldr	r3, [r3, #0]
 8003154:	4618      	mov	r0, r3
 8003156:	f7fd f9a3 	bl	80004a0 <__aeabi_f2d>
 800315a:	4602      	mov	r2, r0
 800315c:	460b      	mov	r3, r1
 800315e:	4650      	mov	r0, sl
 8003160:	4659      	mov	r1, fp
 8003162:	f7fd f83f 	bl	80001e4 <__adddf3>
 8003166:	4602      	mov	r2, r0
 8003168:	460b      	mov	r3, r1
 800316a:	4640      	mov	r0, r8
 800316c:	4649      	mov	r1, r9
 800316e:	f7fd fb19 	bl	80007a4 <__aeabi_ddiv>
 8003172:	4602      	mov	r2, r0
 8003174:	460b      	mov	r3, r1
 8003176:	4610      	mov	r0, r2
 8003178:	4619      	mov	r1, r3
 800317a:	f04f 0200 	mov.w	r2, #0
 800317e:	4b52      	ldr	r3, [pc, #328]	; (80032c8 <kalman+0x718>)
 8003180:	f7fd f82e 	bl	80001e0 <__aeabi_dsub>
 8003184:	4602      	mov	r2, r0
 8003186:	460b      	mov	r3, r1
 8003188:	4620      	mov	r0, r4
 800318a:	4629      	mov	r1, r5
 800318c:	f7fd f9e0 	bl	8000550 <__aeabi_dmul>
 8003190:	4602      	mov	r2, r0
 8003192:	460b      	mov	r3, r1
 8003194:	4610      	mov	r0, r2
 8003196:	4619      	mov	r1, r3
 8003198:	f7fd fc8a 	bl	8000ab0 <__aeabi_d2f>
 800319c:	4603      	mov	r3, r0
 800319e:	4a4b      	ldr	r2, [pc, #300]	; (80032cc <kalman+0x71c>)
 80031a0:	6013      	str	r3, [r2, #0]
	P22predictPRE = (float) P22predict*(P22predict/(pow(R,2)+P22predict)-1);
 80031a2:	4b3f      	ldr	r3, [pc, #252]	; (80032a0 <kalman+0x6f0>)
 80031a4:	681b      	ldr	r3, [r3, #0]
 80031a6:	4618      	mov	r0, r3
 80031a8:	f7fd f97a 	bl	80004a0 <__aeabi_f2d>
 80031ac:	4604      	mov	r4, r0
 80031ae:	460d      	mov	r5, r1
 80031b0:	4b3b      	ldr	r3, [pc, #236]	; (80032a0 <kalman+0x6f0>)
 80031b2:	681b      	ldr	r3, [r3, #0]
 80031b4:	4618      	mov	r0, r3
 80031b6:	f7fd f973 	bl	80004a0 <__aeabi_f2d>
 80031ba:	4680      	mov	r8, r0
 80031bc:	4689      	mov	r9, r1
 80031be:	4b3b      	ldr	r3, [pc, #236]	; (80032ac <kalman+0x6fc>)
 80031c0:	681b      	ldr	r3, [r3, #0]
 80031c2:	4618      	mov	r0, r3
 80031c4:	f7fd f96c 	bl	80004a0 <__aeabi_f2d>
 80031c8:	4602      	mov	r2, r0
 80031ca:	460b      	mov	r3, r1
 80031cc:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8003298 <kalman+0x6e8>
 80031d0:	ec43 2b10 	vmov	d0, r2, r3
 80031d4:	f006 f8a6 	bl	8009324 <pow>
 80031d8:	ec5b ab10 	vmov	sl, fp, d0
 80031dc:	4b30      	ldr	r3, [pc, #192]	; (80032a0 <kalman+0x6f0>)
 80031de:	681b      	ldr	r3, [r3, #0]
 80031e0:	4618      	mov	r0, r3
 80031e2:	f7fd f95d 	bl	80004a0 <__aeabi_f2d>
 80031e6:	4602      	mov	r2, r0
 80031e8:	460b      	mov	r3, r1
 80031ea:	4650      	mov	r0, sl
 80031ec:	4659      	mov	r1, fp
 80031ee:	f7fc fff9 	bl	80001e4 <__adddf3>
 80031f2:	4602      	mov	r2, r0
 80031f4:	460b      	mov	r3, r1
 80031f6:	4640      	mov	r0, r8
 80031f8:	4649      	mov	r1, r9
 80031fa:	f7fd fad3 	bl	80007a4 <__aeabi_ddiv>
 80031fe:	4602      	mov	r2, r0
 8003200:	460b      	mov	r3, r1
 8003202:	4610      	mov	r0, r2
 8003204:	4619      	mov	r1, r3
 8003206:	f04f 0200 	mov.w	r2, #0
 800320a:	4b2f      	ldr	r3, [pc, #188]	; (80032c8 <kalman+0x718>)
 800320c:	f7fc ffe8 	bl	80001e0 <__aeabi_dsub>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fd f99a 	bl	8000550 <__aeabi_dmul>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f7fd fc44 	bl	8000ab0 <__aeabi_d2f>
 8003228:	4603      	mov	r3, r0
 800322a:	4a29      	ldr	r2, [pc, #164]	; (80032d0 <kalman+0x720>)
 800322c:	6013      	str	r3, [r2, #0]
	omegaPredictPre = EncoderVel;
 800322e:	4b20      	ldr	r3, [pc, #128]	; (80032b0 <kalman+0x700>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4a28      	ldr	r2, [pc, #160]	; (80032d4 <kalman+0x724>)
 8003234:	6013      	str	r3, [r2, #0]
	if (velocity == 0){
 8003236:	4b28      	ldr	r3, [pc, #160]	; (80032d8 <kalman+0x728>)
 8003238:	edd3 7a00 	vldr	s15, [r3]
 800323c:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003240:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8003244:	d14e      	bne.n	80032e4 <kalman+0x734>
		P11predict = 0;
 8003246:	4b1b      	ldr	r3, [pc, #108]	; (80032b4 <kalman+0x704>)
 8003248:	f04f 0200 	mov.w	r2, #0
 800324c:	601a      	str	r2, [r3, #0]
		P12predict = 0;
 800324e:	4b1a      	ldr	r3, [pc, #104]	; (80032b8 <kalman+0x708>)
 8003250:	f04f 0200 	mov.w	r2, #0
 8003254:	601a      	str	r2, [r3, #0]
		P21predict = 0;
 8003256:	4b19      	ldr	r3, [pc, #100]	; (80032bc <kalman+0x70c>)
 8003258:	f04f 0200 	mov.w	r2, #0
 800325c:	601a      	str	r2, [r3, #0]
		P22predict = 0;
 800325e:	4b10      	ldr	r3, [pc, #64]	; (80032a0 <kalman+0x6f0>)
 8003260:	f04f 0200 	mov.w	r2, #0
 8003264:	601a      	str	r2, [r3, #0]
		P11predictPRE = 0;
 8003266:	4b16      	ldr	r3, [pc, #88]	; (80032c0 <kalman+0x710>)
 8003268:	f04f 0200 	mov.w	r2, #0
 800326c:	601a      	str	r2, [r3, #0]
		P12predictPRE = 0;
 800326e:	4b15      	ldr	r3, [pc, #84]	; (80032c4 <kalman+0x714>)
 8003270:	f04f 0200 	mov.w	r2, #0
 8003274:	601a      	str	r2, [r3, #0]
		P21predictPRE = 0;
 8003276:	4b15      	ldr	r3, [pc, #84]	; (80032cc <kalman+0x71c>)
 8003278:	f04f 0200 	mov.w	r2, #0
 800327c:	601a      	str	r2, [r3, #0]
		P22predictPRE = 0;
 800327e:	4b14      	ldr	r3, [pc, #80]	; (80032d0 <kalman+0x720>)
 8003280:	f04f 0200 	mov.w	r2, #0
 8003284:	601a      	str	r2, [r3, #0]
		omegaPredict = 0;
 8003286:	4b07      	ldr	r3, [pc, #28]	; (80032a4 <kalman+0x6f4>)
 8003288:	f04f 0200 	mov.w	r2, #0
 800328c:	601a      	str	r2, [r3, #0]
		omegaPredictPre = 0;
 800328e:	4b11      	ldr	r3, [pc, #68]	; (80032d4 <kalman+0x724>)
 8003290:	f04f 0200 	mov.w	r2, #0
 8003294:	601a      	str	r2, [r3, #0]
 8003296:	e021      	b.n	80032dc <kalman+0x72c>
 8003298:	00000000 	.word	0x00000000
 800329c:	40000000 	.word	0x40000000
 80032a0:	200007c8 	.word	0x200007c8
 80032a4:	200007a4 	.word	0x200007a4
 80032a8:	200007a8 	.word	0x200007a8
 80032ac:	20000010 	.word	0x20000010
 80032b0:	20000714 	.word	0x20000714
 80032b4:	200007bc 	.word	0x200007bc
 80032b8:	200007c0 	.word	0x200007c0
 80032bc:	200007c4 	.word	0x200007c4
 80032c0:	200007b0 	.word	0x200007b0
 80032c4:	200007b8 	.word	0x200007b8
 80032c8:	3ff00000 	.word	0x3ff00000
 80032cc:	200007ac 	.word	0x200007ac
 80032d0:	200007b4 	.word	0x200007b4
 80032d4:	200007a0 	.word	0x200007a0
 80032d8:	20000718 	.word	0x20000718
		errorVel = 0;
 80032dc:	4b03      	ldr	r3, [pc, #12]	; (80032ec <kalman+0x73c>)
 80032de:	f04f 0200 	mov.w	r2, #0
 80032e2:	601a      	str	r2, [r3, #0]
	}
}
 80032e4:	bf00      	nop
 80032e6:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80032ea:	bf00      	nop
 80032ec:	200007a8 	.word	0x200007a8

080032f0 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80032f0:	b4b0      	push	{r4, r5, r7}
 80032f2:	b083      	sub	sp, #12
 80032f4:	af00      	add	r7, sp, #0
 80032f6:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80032f8:	687b      	ldr	r3, [r7, #4]
 80032fa:	4a09      	ldr	r2, [pc, #36]	; (8003320 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80032fc:	4293      	cmp	r3, r2
 80032fe:	d109      	bne.n	8003314 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8003300:	4b08      	ldr	r3, [pc, #32]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003302:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003306:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
 800330a:	f143 0500 	adc.w	r5, r3, #0
 800330e:	4b05      	ldr	r3, [pc, #20]	; (8003324 <HAL_TIM_PeriodElapsedCallback+0x34>)
 8003310:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 8003314:	bf00      	nop
 8003316:	370c      	adds	r7, #12
 8003318:	46bd      	mov	sp, r7
 800331a:	bcb0      	pop	{r4, r5, r7}
 800331c:	4770      	bx	lr
 800331e:	bf00      	nop
 8003320:	200009c0 	.word	0x200009c0
 8003324:	20000708 	.word	0x20000708

08003328 <micros>:
uint64_t micros()
{
 8003328:	b4b0      	push	{r4, r5, r7}
 800332a:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 800332c:	4b09      	ldr	r3, [pc, #36]	; (8003354 <micros+0x2c>)
 800332e:	681b      	ldr	r3, [r3, #0]
 8003330:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003332:	4618      	mov	r0, r3
 8003334:	f04f 0100 	mov.w	r1, #0
 8003338:	4b07      	ldr	r3, [pc, #28]	; (8003358 <micros+0x30>)
 800333a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800333e:	1884      	adds	r4, r0, r2
 8003340:	eb41 0503 	adc.w	r5, r1, r3
 8003344:	4622      	mov	r2, r4
 8003346:	462b      	mov	r3, r5
}
 8003348:	4610      	mov	r0, r2
 800334a:	4619      	mov	r1, r3
 800334c:	46bd      	mov	sp, r7
 800334e:	bcb0      	pop	{r4, r5, r7}
 8003350:	4770      	bx	lr
 8003352:	bf00      	nop
 8003354:	200009c0 	.word	0x200009c0
 8003358:	20000708 	.word	0x20000708

0800335c <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 800335c:	b480      	push	{r7}
 800335e:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003360:	b672      	cpsid	i
}
 8003362:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8003364:	e7fe      	b.n	8003364 <Error_Handler+0x8>
	...

08003368 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003368:	b580      	push	{r7, lr}
 800336a:	b082      	sub	sp, #8
 800336c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800336e:	2300      	movs	r3, #0
 8003370:	607b      	str	r3, [r7, #4]
 8003372:	4b10      	ldr	r3, [pc, #64]	; (80033b4 <HAL_MspInit+0x4c>)
 8003374:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003376:	4a0f      	ldr	r2, [pc, #60]	; (80033b4 <HAL_MspInit+0x4c>)
 8003378:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800337c:	6453      	str	r3, [r2, #68]	; 0x44
 800337e:	4b0d      	ldr	r3, [pc, #52]	; (80033b4 <HAL_MspInit+0x4c>)
 8003380:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003382:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003386:	607b      	str	r3, [r7, #4]
 8003388:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800338a:	2300      	movs	r3, #0
 800338c:	603b      	str	r3, [r7, #0]
 800338e:	4b09      	ldr	r3, [pc, #36]	; (80033b4 <HAL_MspInit+0x4c>)
 8003390:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003392:	4a08      	ldr	r2, [pc, #32]	; (80033b4 <HAL_MspInit+0x4c>)
 8003394:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003398:	6413      	str	r3, [r2, #64]	; 0x40
 800339a:	4b06      	ldr	r3, [pc, #24]	; (80033b4 <HAL_MspInit+0x4c>)
 800339c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800339e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80033a2:	603b      	str	r3, [r7, #0]
 80033a4:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80033a6:	2007      	movs	r0, #7
 80033a8:	f000 fc8c 	bl	8003cc4 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80033ac:	bf00      	nop
 80033ae:	3708      	adds	r7, #8
 80033b0:	46bd      	mov	sp, r7
 80033b2:	bd80      	pop	{r7, pc}
 80033b4:	40023800 	.word	0x40023800

080033b8 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80033b8:	b580      	push	{r7, lr}
 80033ba:	b08a      	sub	sp, #40	; 0x28
 80033bc:	af00      	add	r7, sp, #0
 80033be:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80033c0:	f107 0314 	add.w	r3, r7, #20
 80033c4:	2200      	movs	r2, #0
 80033c6:	601a      	str	r2, [r3, #0]
 80033c8:	605a      	str	r2, [r3, #4]
 80033ca:	609a      	str	r2, [r3, #8]
 80033cc:	60da      	str	r2, [r3, #12]
 80033ce:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80033d0:	687b      	ldr	r3, [r7, #4]
 80033d2:	681b      	ldr	r3, [r3, #0]
 80033d4:	4a21      	ldr	r2, [pc, #132]	; (800345c <HAL_I2C_MspInit+0xa4>)
 80033d6:	4293      	cmp	r3, r2
 80033d8:	d13c      	bne.n	8003454 <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80033da:	2300      	movs	r3, #0
 80033dc:	613b      	str	r3, [r7, #16]
 80033de:	4b20      	ldr	r3, [pc, #128]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 80033e0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033e2:	4a1f      	ldr	r2, [pc, #124]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 80033e4:	f043 0302 	orr.w	r3, r3, #2
 80033e8:	6313      	str	r3, [r2, #48]	; 0x30
 80033ea:	4b1d      	ldr	r3, [pc, #116]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 80033ec:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80033ee:	f003 0302 	and.w	r3, r3, #2
 80033f2:	613b      	str	r3, [r7, #16]
 80033f4:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80033f6:	f44f 7340 	mov.w	r3, #768	; 0x300
 80033fa:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80033fc:	2312      	movs	r3, #18
 80033fe:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8003400:	2301      	movs	r3, #1
 8003402:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003404:	2303      	movs	r3, #3
 8003406:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8003408:	2304      	movs	r3, #4
 800340a:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 800340c:	f107 0314 	add.w	r3, r7, #20
 8003410:	4619      	mov	r1, r3
 8003412:	4814      	ldr	r0, [pc, #80]	; (8003464 <HAL_I2C_MspInit+0xac>)
 8003414:	f001 f8b6 	bl	8004584 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8003418:	2300      	movs	r3, #0
 800341a:	60fb      	str	r3, [r7, #12]
 800341c:	4b10      	ldr	r3, [pc, #64]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 800341e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003420:	4a0f      	ldr	r2, [pc, #60]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 8003422:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8003426:	6413      	str	r3, [r2, #64]	; 0x40
 8003428:	4b0d      	ldr	r3, [pc, #52]	; (8003460 <HAL_I2C_MspInit+0xa8>)
 800342a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800342c:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003430:	60fb      	str	r3, [r7, #12]
 8003432:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8003434:	2200      	movs	r2, #0
 8003436:	2100      	movs	r1, #0
 8003438:	201f      	movs	r0, #31
 800343a:	f000 fc4e 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 800343e:	201f      	movs	r0, #31
 8003440:	f000 fc67 	bl	8003d12 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8003444:	2200      	movs	r2, #0
 8003446:	2100      	movs	r1, #0
 8003448:	2020      	movs	r0, #32
 800344a:	f000 fc46 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 800344e:	2020      	movs	r0, #32
 8003450:	f000 fc5f 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8003454:	bf00      	nop
 8003456:	3728      	adds	r7, #40	; 0x28
 8003458:	46bd      	mov	sp, r7
 800345a:	bd80      	pop	{r7, pc}
 800345c:	40005400 	.word	0x40005400
 8003460:	40023800 	.word	0x40023800
 8003464:	40020400 	.word	0x40020400

08003468 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003468:	b580      	push	{r7, lr}
 800346a:	b08a      	sub	sp, #40	; 0x28
 800346c:	af00      	add	r7, sp, #0
 800346e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003470:	f107 0314 	add.w	r3, r7, #20
 8003474:	2200      	movs	r2, #0
 8003476:	601a      	str	r2, [r3, #0]
 8003478:	605a      	str	r2, [r3, #4]
 800347a:	609a      	str	r2, [r3, #8]
 800347c:	60da      	str	r2, [r3, #12]
 800347e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003480:	687b      	ldr	r3, [r7, #4]
 8003482:	681b      	ldr	r3, [r3, #0]
 8003484:	4a19      	ldr	r2, [pc, #100]	; (80034ec <HAL_TIM_Encoder_MspInit+0x84>)
 8003486:	4293      	cmp	r3, r2
 8003488:	d12c      	bne.n	80034e4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800348a:	2300      	movs	r3, #0
 800348c:	613b      	str	r3, [r7, #16]
 800348e:	4b18      	ldr	r3, [pc, #96]	; (80034f0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003490:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003492:	4a17      	ldr	r2, [pc, #92]	; (80034f0 <HAL_TIM_Encoder_MspInit+0x88>)
 8003494:	f043 0301 	orr.w	r3, r3, #1
 8003498:	6453      	str	r3, [r2, #68]	; 0x44
 800349a:	4b15      	ldr	r3, [pc, #84]	; (80034f0 <HAL_TIM_Encoder_MspInit+0x88>)
 800349c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800349e:	f003 0301 	and.w	r3, r3, #1
 80034a2:	613b      	str	r3, [r7, #16]
 80034a4:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80034a6:	2300      	movs	r3, #0
 80034a8:	60fb      	str	r3, [r7, #12]
 80034aa:	4b11      	ldr	r3, [pc, #68]	; (80034f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80034ac:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ae:	4a10      	ldr	r2, [pc, #64]	; (80034f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80034b0:	f043 0301 	orr.w	r3, r3, #1
 80034b4:	6313      	str	r3, [r2, #48]	; 0x30
 80034b6:	4b0e      	ldr	r3, [pc, #56]	; (80034f0 <HAL_TIM_Encoder_MspInit+0x88>)
 80034b8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034ba:	f003 0301 	and.w	r3, r3, #1
 80034be:	60fb      	str	r3, [r7, #12]
 80034c0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80034c2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80034c6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80034c8:	2302      	movs	r3, #2
 80034ca:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80034cc:	2300      	movs	r3, #0
 80034ce:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80034d0:	2300      	movs	r3, #0
 80034d2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80034d4:	2301      	movs	r3, #1
 80034d6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80034d8:	f107 0314 	add.w	r3, r7, #20
 80034dc:	4619      	mov	r1, r3
 80034de:	4805      	ldr	r0, [pc, #20]	; (80034f4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80034e0:	f001 f850 	bl	8004584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80034e4:	bf00      	nop
 80034e6:	3728      	adds	r7, #40	; 0x28
 80034e8:	46bd      	mov	sp, r7
 80034ea:	bd80      	pop	{r7, pc}
 80034ec:	40010000 	.word	0x40010000
 80034f0:	40023800 	.word	0x40023800
 80034f4:	40020000 	.word	0x40020000

080034f8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80034f8:	b580      	push	{r7, lr}
 80034fa:	b084      	sub	sp, #16
 80034fc:	af00      	add	r7, sp, #0
 80034fe:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8003500:	687b      	ldr	r3, [r7, #4]
 8003502:	681b      	ldr	r3, [r3, #0]
 8003504:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8003508:	d116      	bne.n	8003538 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 800350a:	2300      	movs	r3, #0
 800350c:	60fb      	str	r3, [r7, #12]
 800350e:	4b1a      	ldr	r3, [pc, #104]	; (8003578 <HAL_TIM_Base_MspInit+0x80>)
 8003510:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003512:	4a19      	ldr	r2, [pc, #100]	; (8003578 <HAL_TIM_Base_MspInit+0x80>)
 8003514:	f043 0301 	orr.w	r3, r3, #1
 8003518:	6413      	str	r3, [r2, #64]	; 0x40
 800351a:	4b17      	ldr	r3, [pc, #92]	; (8003578 <HAL_TIM_Base_MspInit+0x80>)
 800351c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800351e:	f003 0301 	and.w	r3, r3, #1
 8003522:	60fb      	str	r3, [r7, #12]
 8003524:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8003526:	2200      	movs	r2, #0
 8003528:	2100      	movs	r1, #0
 800352a:	201c      	movs	r0, #28
 800352c:	f000 fbd5 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003530:	201c      	movs	r0, #28
 8003532:	f000 fbee 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8003536:	e01a      	b.n	800356e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003538:	687b      	ldr	r3, [r7, #4]
 800353a:	681b      	ldr	r3, [r3, #0]
 800353c:	4a0f      	ldr	r2, [pc, #60]	; (800357c <HAL_TIM_Base_MspInit+0x84>)
 800353e:	4293      	cmp	r3, r2
 8003540:	d115      	bne.n	800356e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8003542:	2300      	movs	r3, #0
 8003544:	60bb      	str	r3, [r7, #8]
 8003546:	4b0c      	ldr	r3, [pc, #48]	; (8003578 <HAL_TIM_Base_MspInit+0x80>)
 8003548:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800354a:	4a0b      	ldr	r2, [pc, #44]	; (8003578 <HAL_TIM_Base_MspInit+0x80>)
 800354c:	f043 0302 	orr.w	r3, r3, #2
 8003550:	6413      	str	r3, [r2, #64]	; 0x40
 8003552:	4b09      	ldr	r3, [pc, #36]	; (8003578 <HAL_TIM_Base_MspInit+0x80>)
 8003554:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003556:	f003 0302 	and.w	r3, r3, #2
 800355a:	60bb      	str	r3, [r7, #8]
 800355c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800355e:	2200      	movs	r2, #0
 8003560:	2100      	movs	r1, #0
 8003562:	201d      	movs	r0, #29
 8003564:	f000 fbb9 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003568:	201d      	movs	r0, #29
 800356a:	f000 fbd2 	bl	8003d12 <HAL_NVIC_EnableIRQ>
}
 800356e:	bf00      	nop
 8003570:	3710      	adds	r7, #16
 8003572:	46bd      	mov	sp, r7
 8003574:	bd80      	pop	{r7, pc}
 8003576:	bf00      	nop
 8003578:	40023800 	.word	0x40023800
 800357c:	40000400 	.word	0x40000400

08003580 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003580:	b580      	push	{r7, lr}
 8003582:	b088      	sub	sp, #32
 8003584:	af00      	add	r7, sp, #0
 8003586:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003588:	f107 030c 	add.w	r3, r7, #12
 800358c:	2200      	movs	r2, #0
 800358e:	601a      	str	r2, [r3, #0]
 8003590:	605a      	str	r2, [r3, #4]
 8003592:	609a      	str	r2, [r3, #8]
 8003594:	60da      	str	r2, [r3, #12]
 8003596:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	4a12      	ldr	r2, [pc, #72]	; (80035e8 <HAL_TIM_MspPostInit+0x68>)
 800359e:	4293      	cmp	r3, r2
 80035a0:	d11d      	bne.n	80035de <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80035a2:	2300      	movs	r3, #0
 80035a4:	60bb      	str	r3, [r7, #8]
 80035a6:	4b11      	ldr	r3, [pc, #68]	; (80035ec <HAL_TIM_MspPostInit+0x6c>)
 80035a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035aa:	4a10      	ldr	r2, [pc, #64]	; (80035ec <HAL_TIM_MspPostInit+0x6c>)
 80035ac:	f043 0301 	orr.w	r3, r3, #1
 80035b0:	6313      	str	r3, [r2, #48]	; 0x30
 80035b2:	4b0e      	ldr	r3, [pc, #56]	; (80035ec <HAL_TIM_MspPostInit+0x6c>)
 80035b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035b6:	f003 0301 	and.w	r3, r3, #1
 80035ba:	60bb      	str	r3, [r7, #8]
 80035bc:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80035be:	2340      	movs	r3, #64	; 0x40
 80035c0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80035c2:	2302      	movs	r3, #2
 80035c4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80035c6:	2300      	movs	r3, #0
 80035c8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80035ca:	2300      	movs	r3, #0
 80035cc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80035ce:	2302      	movs	r3, #2
 80035d0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80035d2:	f107 030c 	add.w	r3, r7, #12
 80035d6:	4619      	mov	r1, r3
 80035d8:	4805      	ldr	r0, [pc, #20]	; (80035f0 <HAL_TIM_MspPostInit+0x70>)
 80035da:	f000 ffd3 	bl	8004584 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80035de:	bf00      	nop
 80035e0:	3720      	adds	r7, #32
 80035e2:	46bd      	mov	sp, r7
 80035e4:	bd80      	pop	{r7, pc}
 80035e6:	bf00      	nop
 80035e8:	40000400 	.word	0x40000400
 80035ec:	40023800 	.word	0x40023800
 80035f0:	40020000 	.word	0x40020000

080035f4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80035f4:	b580      	push	{r7, lr}
 80035f6:	b08c      	sub	sp, #48	; 0x30
 80035f8:	af00      	add	r7, sp, #0
 80035fa:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035fc:	f107 031c 	add.w	r3, r7, #28
 8003600:	2200      	movs	r2, #0
 8003602:	601a      	str	r2, [r3, #0]
 8003604:	605a      	str	r2, [r3, #4]
 8003606:	609a      	str	r2, [r3, #8]
 8003608:	60da      	str	r2, [r3, #12]
 800360a:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 800360c:	687b      	ldr	r3, [r7, #4]
 800360e:	681b      	ldr	r3, [r3, #0]
 8003610:	4a65      	ldr	r2, [pc, #404]	; (80037a8 <HAL_UART_MspInit+0x1b4>)
 8003612:	4293      	cmp	r3, r2
 8003614:	f040 8092 	bne.w	800373c <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003618:	2300      	movs	r3, #0
 800361a:	61bb      	str	r3, [r7, #24]
 800361c:	4b63      	ldr	r3, [pc, #396]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 800361e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003620:	4a62      	ldr	r2, [pc, #392]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 8003622:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003626:	6413      	str	r3, [r2, #64]	; 0x40
 8003628:	4b60      	ldr	r3, [pc, #384]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 800362a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800362c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003630:	61bb      	str	r3, [r7, #24]
 8003632:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8003634:	2300      	movs	r3, #0
 8003636:	617b      	str	r3, [r7, #20]
 8003638:	4b5c      	ldr	r3, [pc, #368]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 800363a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800363c:	4a5b      	ldr	r2, [pc, #364]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 800363e:	f043 0301 	orr.w	r3, r3, #1
 8003642:	6313      	str	r3, [r2, #48]	; 0x30
 8003644:	4b59      	ldr	r3, [pc, #356]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 8003646:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003648:	f003 0301 	and.w	r3, r3, #1
 800364c:	617b      	str	r3, [r7, #20]
 800364e:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003650:	230c      	movs	r3, #12
 8003652:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003654:	2302      	movs	r3, #2
 8003656:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003658:	2300      	movs	r3, #0
 800365a:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800365c:	2303      	movs	r3, #3
 800365e:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003660:	2307      	movs	r3, #7
 8003662:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8003664:	f107 031c 	add.w	r3, r7, #28
 8003668:	4619      	mov	r1, r3
 800366a:	4851      	ldr	r0, [pc, #324]	; (80037b0 <HAL_UART_MspInit+0x1bc>)
 800366c:	f000 ff8a 	bl	8004584 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003670:	4b50      	ldr	r3, [pc, #320]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 8003672:	4a51      	ldr	r2, [pc, #324]	; (80037b8 <HAL_UART_MspInit+0x1c4>)
 8003674:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8003676:	4b4f      	ldr	r3, [pc, #316]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 8003678:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800367c:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 800367e:	4b4d      	ldr	r3, [pc, #308]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 8003680:	2200      	movs	r2, #0
 8003682:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8003684:	4b4b      	ldr	r3, [pc, #300]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 8003686:	2200      	movs	r2, #0
 8003688:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 800368a:	4b4a      	ldr	r3, [pc, #296]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 800368c:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003690:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8003692:	4b48      	ldr	r3, [pc, #288]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 8003694:	2200      	movs	r2, #0
 8003696:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003698:	4b46      	ldr	r3, [pc, #280]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 800369a:	2200      	movs	r2, #0
 800369c:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 800369e:	4b45      	ldr	r3, [pc, #276]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 80036a0:	f44f 7280 	mov.w	r2, #256	; 0x100
 80036a4:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 80036a6:	4b43      	ldr	r3, [pc, #268]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 80036a8:	2200      	movs	r2, #0
 80036aa:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80036ac:	4b41      	ldr	r3, [pc, #260]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 80036ae:	2200      	movs	r2, #0
 80036b0:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 80036b2:	4840      	ldr	r0, [pc, #256]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 80036b4:	f000 fb56 	bl	8003d64 <HAL_DMA_Init>
 80036b8:	4603      	mov	r3, r0
 80036ba:	2b00      	cmp	r3, #0
 80036bc:	d001      	beq.n	80036c2 <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80036be:	f7ff fe4d 	bl	800335c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80036c2:	687b      	ldr	r3, [r7, #4]
 80036c4:	4a3b      	ldr	r2, [pc, #236]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 80036c6:	639a      	str	r2, [r3, #56]	; 0x38
 80036c8:	4a3a      	ldr	r2, [pc, #232]	; (80037b4 <HAL_UART_MspInit+0x1c0>)
 80036ca:	687b      	ldr	r3, [r7, #4]
 80036cc:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80036ce:	4b3b      	ldr	r3, [pc, #236]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036d0:	4a3b      	ldr	r2, [pc, #236]	; (80037c0 <HAL_UART_MspInit+0x1cc>)
 80036d2:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80036d4:	4b39      	ldr	r3, [pc, #228]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036d6:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80036da:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80036dc:	4b37      	ldr	r3, [pc, #220]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036de:	2240      	movs	r2, #64	; 0x40
 80036e0:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80036e2:	4b36      	ldr	r3, [pc, #216]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036e4:	2200      	movs	r2, #0
 80036e6:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80036e8:	4b34      	ldr	r3, [pc, #208]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036ea:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80036ee:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80036f0:	4b32      	ldr	r3, [pc, #200]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036f2:	2200      	movs	r2, #0
 80036f4:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80036f6:	4b31      	ldr	r3, [pc, #196]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036f8:	2200      	movs	r2, #0
 80036fa:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80036fc:	4b2f      	ldr	r3, [pc, #188]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 80036fe:	2200      	movs	r2, #0
 8003700:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8003702:	4b2e      	ldr	r3, [pc, #184]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 8003704:	2200      	movs	r2, #0
 8003706:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003708:	4b2c      	ldr	r3, [pc, #176]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 800370a:	2200      	movs	r2, #0
 800370c:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 800370e:	482b      	ldr	r0, [pc, #172]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 8003710:	f000 fb28 	bl	8003d64 <HAL_DMA_Init>
 8003714:	4603      	mov	r3, r0
 8003716:	2b00      	cmp	r3, #0
 8003718:	d001      	beq.n	800371e <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 800371a:	f7ff fe1f 	bl	800335c <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 800371e:	687b      	ldr	r3, [r7, #4]
 8003720:	4a26      	ldr	r2, [pc, #152]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 8003722:	635a      	str	r2, [r3, #52]	; 0x34
 8003724:	4a25      	ldr	r2, [pc, #148]	; (80037bc <HAL_UART_MspInit+0x1c8>)
 8003726:	687b      	ldr	r3, [r7, #4]
 8003728:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 800372a:	2200      	movs	r2, #0
 800372c:	2100      	movs	r1, #0
 800372e:	2026      	movs	r0, #38	; 0x26
 8003730:	f000 fad3 	bl	8003cda <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8003734:	2026      	movs	r0, #38	; 0x26
 8003736:	f000 faec 	bl	8003d12 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 800373a:	e030      	b.n	800379e <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 800373c:	687b      	ldr	r3, [r7, #4]
 800373e:	681b      	ldr	r3, [r3, #0]
 8003740:	4a20      	ldr	r2, [pc, #128]	; (80037c4 <HAL_UART_MspInit+0x1d0>)
 8003742:	4293      	cmp	r3, r2
 8003744:	d12b      	bne.n	800379e <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8003746:	2300      	movs	r3, #0
 8003748:	613b      	str	r3, [r7, #16]
 800374a:	4b18      	ldr	r3, [pc, #96]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 800374c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800374e:	4a17      	ldr	r2, [pc, #92]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 8003750:	f043 0320 	orr.w	r3, r3, #32
 8003754:	6453      	str	r3, [r2, #68]	; 0x44
 8003756:	4b15      	ldr	r3, [pc, #84]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 8003758:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800375a:	f003 0320 	and.w	r3, r3, #32
 800375e:	613b      	str	r3, [r7, #16]
 8003760:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8003762:	2300      	movs	r3, #0
 8003764:	60fb      	str	r3, [r7, #12]
 8003766:	4b11      	ldr	r3, [pc, #68]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 8003768:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800376a:	4a10      	ldr	r2, [pc, #64]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 800376c:	f043 0304 	orr.w	r3, r3, #4
 8003770:	6313      	str	r3, [r2, #48]	; 0x30
 8003772:	4b0e      	ldr	r3, [pc, #56]	; (80037ac <HAL_UART_MspInit+0x1b8>)
 8003774:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003776:	f003 0304 	and.w	r3, r3, #4
 800377a:	60fb      	str	r3, [r7, #12]
 800377c:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 800377e:	23c0      	movs	r3, #192	; 0xc0
 8003780:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8003782:	2302      	movs	r3, #2
 8003784:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003786:	2300      	movs	r3, #0
 8003788:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800378a:	2303      	movs	r3, #3
 800378c:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 800378e:	2308      	movs	r3, #8
 8003790:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8003792:	f107 031c 	add.w	r3, r7, #28
 8003796:	4619      	mov	r1, r3
 8003798:	480b      	ldr	r0, [pc, #44]	; (80037c8 <HAL_UART_MspInit+0x1d4>)
 800379a:	f000 fef3 	bl	8004584 <HAL_GPIO_Init>
}
 800379e:	bf00      	nop
 80037a0:	3730      	adds	r7, #48	; 0x30
 80037a2:	46bd      	mov	sp, r7
 80037a4:	bd80      	pop	{r7, pc}
 80037a6:	bf00      	nop
 80037a8:	40004400 	.word	0x40004400
 80037ac:	40023800 	.word	0x40023800
 80037b0:	40020000 	.word	0x40020000
 80037b4:	200007d8 	.word	0x200007d8
 80037b8:	40026088 	.word	0x40026088
 80037bc:	200008d4 	.word	0x200008d4
 80037c0:	400260a0 	.word	0x400260a0
 80037c4:	40011400 	.word	0x40011400
 80037c8:	40020800 	.word	0x40020800

080037cc <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80037cc:	b480      	push	{r7}
 80037ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80037d0:	e7fe      	b.n	80037d0 <NMI_Handler+0x4>

080037d2 <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80037d2:	b480      	push	{r7}
 80037d4:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80037d6:	e7fe      	b.n	80037d6 <HardFault_Handler+0x4>

080037d8 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80037d8:	b480      	push	{r7}
 80037da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80037dc:	e7fe      	b.n	80037dc <MemManage_Handler+0x4>

080037de <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80037de:	b480      	push	{r7}
 80037e0:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80037e2:	e7fe      	b.n	80037e2 <BusFault_Handler+0x4>

080037e4 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80037e4:	b480      	push	{r7}
 80037e6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80037e8:	e7fe      	b.n	80037e8 <UsageFault_Handler+0x4>

080037ea <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80037ea:	b480      	push	{r7}
 80037ec:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80037ee:	bf00      	nop
 80037f0:	46bd      	mov	sp, r7
 80037f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80037f6:	4770      	bx	lr

080037f8 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80037f8:	b480      	push	{r7}
 80037fa:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80037fc:	bf00      	nop
 80037fe:	46bd      	mov	sp, r7
 8003800:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003804:	4770      	bx	lr

08003806 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8003806:	b480      	push	{r7}
 8003808:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 800380a:	bf00      	nop
 800380c:	46bd      	mov	sp, r7
 800380e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003812:	4770      	bx	lr

08003814 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8003814:	b580      	push	{r7, lr}
 8003816:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003818:	f000 f91c 	bl	8003a54 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 800381c:	bf00      	nop
 800381e:	bd80      	pop	{r7, pc}

08003820 <EXTI3_IRQHandler>:

/**
  * @brief This function handles EXTI line3 interrupt.
  */
void EXTI3_IRQHandler(void)
{
 8003820:	b580      	push	{r7, lr}
 8003822:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI3_IRQn 0 */

  /* USER CODE END EXTI3_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_3);
 8003824:	2008      	movs	r0, #8
 8003826:	f001 f84b 	bl	80048c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI3_IRQn 1 */

  /* USER CODE END EXTI3_IRQn 1 */
}
 800382a:	bf00      	nop
 800382c:	bd80      	pop	{r7, pc}
	...

08003830 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003830:	b580      	push	{r7, lr}
 8003832:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003834:	4802      	ldr	r0, [pc, #8]	; (8003840 <DMA1_Stream5_IRQHandler+0x10>)
 8003836:	f000 fc2d 	bl	8004094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 800383a:	bf00      	nop
 800383c:	bd80      	pop	{r7, pc}
 800383e:	bf00      	nop
 8003840:	200007d8 	.word	0x200007d8

08003844 <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003844:	b580      	push	{r7, lr}
 8003846:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003848:	4802      	ldr	r0, [pc, #8]	; (8003854 <DMA1_Stream6_IRQHandler+0x10>)
 800384a:	f000 fc23 	bl	8004094 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 800384e:	bf00      	nop
 8003850:	bd80      	pop	{r7, pc}
 8003852:	bf00      	nop
 8003854:	200008d4 	.word	0x200008d4

08003858 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003858:	b580      	push	{r7, lr}
 800385a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 800385c:	2080      	movs	r0, #128	; 0x80
 800385e:	f001 f82f 	bl	80048c0 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003862:	bf00      	nop
 8003864:	bd80      	pop	{r7, pc}
	...

08003868 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003868:	b580      	push	{r7, lr}
 800386a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 800386c:	4802      	ldr	r0, [pc, #8]	; (8003878 <TIM2_IRQHandler+0x10>)
 800386e:	f003 ff4b 	bl	8007708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003872:	bf00      	nop
 8003874:	bd80      	pop	{r7, pc}
 8003876:	bf00      	nop
 8003878:	200009c0 	.word	0x200009c0

0800387c <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 800387c:	b580      	push	{r7, lr}
 800387e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003880:	4802      	ldr	r0, [pc, #8]	; (800388c <TIM3_IRQHandler+0x10>)
 8003882:	f003 ff41 	bl	8007708 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003886:	bf00      	nop
 8003888:	bd80      	pop	{r7, pc}
 800388a:	bf00      	nop
 800388c:	2000088c 	.word	0x2000088c

08003890 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003890:	b580      	push	{r7, lr}
 8003892:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003894:	4802      	ldr	r0, [pc, #8]	; (80038a0 <I2C1_EV_IRQHandler+0x10>)
 8003896:	f001 fac3 	bl	8004e20 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 800389a:	bf00      	nop
 800389c:	bd80      	pop	{r7, pc}
 800389e:	bf00      	nop
 80038a0:	20000838 	.word	0x20000838

080038a4 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 80038a4:	b580      	push	{r7, lr}
 80038a6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 80038a8:	4802      	ldr	r0, [pc, #8]	; (80038b4 <I2C1_ER_IRQHandler+0x10>)
 80038aa:	f001 fc26 	bl	80050fa <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 80038ae:	bf00      	nop
 80038b0:	bd80      	pop	{r7, pc}
 80038b2:	bf00      	nop
 80038b4:	20000838 	.word	0x20000838

080038b8 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 80038b8:	b580      	push	{r7, lr}
 80038ba:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 80038bc:	4802      	ldr	r0, [pc, #8]	; (80038c8 <USART2_IRQHandler+0x10>)
 80038be:	f004 fe0d 	bl	80084dc <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 80038c2:	bf00      	nop
 80038c4:	bd80      	pop	{r7, pc}
 80038c6:	bf00      	nop
 80038c8:	20000a08 	.word	0x20000a08

080038cc <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 80038cc:	b580      	push	{r7, lr}
 80038ce:	b086      	sub	sp, #24
 80038d0:	af00      	add	r7, sp, #0
 80038d2:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 80038d4:	4a14      	ldr	r2, [pc, #80]	; (8003928 <_sbrk+0x5c>)
 80038d6:	4b15      	ldr	r3, [pc, #84]	; (800392c <_sbrk+0x60>)
 80038d8:	1ad3      	subs	r3, r2, r3
 80038da:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 80038dc:	697b      	ldr	r3, [r7, #20]
 80038de:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 80038e0:	4b13      	ldr	r3, [pc, #76]	; (8003930 <_sbrk+0x64>)
 80038e2:	681b      	ldr	r3, [r3, #0]
 80038e4:	2b00      	cmp	r3, #0
 80038e6:	d102      	bne.n	80038ee <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 80038e8:	4b11      	ldr	r3, [pc, #68]	; (8003930 <_sbrk+0x64>)
 80038ea:	4a12      	ldr	r2, [pc, #72]	; (8003934 <_sbrk+0x68>)
 80038ec:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 80038ee:	4b10      	ldr	r3, [pc, #64]	; (8003930 <_sbrk+0x64>)
 80038f0:	681a      	ldr	r2, [r3, #0]
 80038f2:	687b      	ldr	r3, [r7, #4]
 80038f4:	4413      	add	r3, r2
 80038f6:	693a      	ldr	r2, [r7, #16]
 80038f8:	429a      	cmp	r2, r3
 80038fa:	d207      	bcs.n	800390c <_sbrk+0x40>
  {
    errno = ENOMEM;
 80038fc:	f005 fc4a 	bl	8009194 <__errno>
 8003900:	4603      	mov	r3, r0
 8003902:	220c      	movs	r2, #12
 8003904:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003906:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 800390a:	e009      	b.n	8003920 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 800390c:	4b08      	ldr	r3, [pc, #32]	; (8003930 <_sbrk+0x64>)
 800390e:	681b      	ldr	r3, [r3, #0]
 8003910:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003912:	4b07      	ldr	r3, [pc, #28]	; (8003930 <_sbrk+0x64>)
 8003914:	681a      	ldr	r2, [r3, #0]
 8003916:	687b      	ldr	r3, [r7, #4]
 8003918:	4413      	add	r3, r2
 800391a:	4a05      	ldr	r2, [pc, #20]	; (8003930 <_sbrk+0x64>)
 800391c:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 800391e:	68fb      	ldr	r3, [r7, #12]
}
 8003920:	4618      	mov	r0, r3
 8003922:	3718      	adds	r7, #24
 8003924:	46bd      	mov	sp, r7
 8003926:	bd80      	pop	{r7, pc}
 8003928:	20020000 	.word	0x20020000
 800392c:	00000400 	.word	0x00000400
 8003930:	200007cc 	.word	0x200007cc
 8003934:	20000a60 	.word	0x20000a60

08003938 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003938:	b480      	push	{r7}
 800393a:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 800393c:	4b06      	ldr	r3, [pc, #24]	; (8003958 <SystemInit+0x20>)
 800393e:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003942:	4a05      	ldr	r2, [pc, #20]	; (8003958 <SystemInit+0x20>)
 8003944:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003948:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 800394c:	bf00      	nop
 800394e:	46bd      	mov	sp, r7
 8003950:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003954:	4770      	bx	lr
 8003956:	bf00      	nop
 8003958:	e000ed00 	.word	0xe000ed00

0800395c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 800395c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003994 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003960:	480d      	ldr	r0, [pc, #52]	; (8003998 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003962:	490e      	ldr	r1, [pc, #56]	; (800399c <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003964:	4a0e      	ldr	r2, [pc, #56]	; (80039a0 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003966:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003968:	e002      	b.n	8003970 <LoopCopyDataInit>

0800396a <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 800396a:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 800396c:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 800396e:	3304      	adds	r3, #4

08003970 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003970:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003972:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003974:	d3f9      	bcc.n	800396a <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003976:	4a0b      	ldr	r2, [pc, #44]	; (80039a4 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003978:	4c0b      	ldr	r4, [pc, #44]	; (80039a8 <LoopFillZerobss+0x26>)
  movs r3, #0
 800397a:	2300      	movs	r3, #0
  b LoopFillZerobss
 800397c:	e001      	b.n	8003982 <LoopFillZerobss>

0800397e <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 800397e:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003980:	3204      	adds	r2, #4

08003982 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003982:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003984:	d3fb      	bcc.n	800397e <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003986:	f7ff ffd7 	bl	8003938 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800398a:	f005 fc09 	bl	80091a0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800398e:	f7fd fb69 	bl	8001064 <main>
  bx  lr    
 8003992:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003994:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003998:	20000000 	.word	0x20000000
  ldr r1, =_edata
 800399c:	20000090 	.word	0x20000090
  ldr r2, =_sidata
 80039a0:	0800a320 	.word	0x0800a320
  ldr r2, =_sbss
 80039a4:	20000090 	.word	0x20000090
  ldr r4, =_ebss
 80039a8:	20000a60 	.word	0x20000a60

080039ac <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 80039ac:	e7fe      	b.n	80039ac <ADC_IRQHandler>
	...

080039b0 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 80039b0:	b580      	push	{r7, lr}
 80039b2:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 80039b4:	4b0e      	ldr	r3, [pc, #56]	; (80039f0 <HAL_Init+0x40>)
 80039b6:	681b      	ldr	r3, [r3, #0]
 80039b8:	4a0d      	ldr	r2, [pc, #52]	; (80039f0 <HAL_Init+0x40>)
 80039ba:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 80039be:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 80039c0:	4b0b      	ldr	r3, [pc, #44]	; (80039f0 <HAL_Init+0x40>)
 80039c2:	681b      	ldr	r3, [r3, #0]
 80039c4:	4a0a      	ldr	r2, [pc, #40]	; (80039f0 <HAL_Init+0x40>)
 80039c6:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 80039ca:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 80039cc:	4b08      	ldr	r3, [pc, #32]	; (80039f0 <HAL_Init+0x40>)
 80039ce:	681b      	ldr	r3, [r3, #0]
 80039d0:	4a07      	ldr	r2, [pc, #28]	; (80039f0 <HAL_Init+0x40>)
 80039d2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80039d6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80039d8:	2003      	movs	r0, #3
 80039da:	f000 f973 	bl	8003cc4 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80039de:	2000      	movs	r0, #0
 80039e0:	f000 f808 	bl	80039f4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80039e4:	f7ff fcc0 	bl	8003368 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80039e8:	2300      	movs	r3, #0
}
 80039ea:	4618      	mov	r0, r3
 80039ec:	bd80      	pop	{r7, pc}
 80039ee:	bf00      	nop
 80039f0:	40023c00 	.word	0x40023c00

080039f4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80039f4:	b580      	push	{r7, lr}
 80039f6:	b082      	sub	sp, #8
 80039f8:	af00      	add	r7, sp, #0
 80039fa:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80039fc:	4b12      	ldr	r3, [pc, #72]	; (8003a48 <HAL_InitTick+0x54>)
 80039fe:	681a      	ldr	r2, [r3, #0]
 8003a00:	4b12      	ldr	r3, [pc, #72]	; (8003a4c <HAL_InitTick+0x58>)
 8003a02:	781b      	ldrb	r3, [r3, #0]
 8003a04:	4619      	mov	r1, r3
 8003a06:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003a0a:	fbb3 f3f1 	udiv	r3, r3, r1
 8003a0e:	fbb2 f3f3 	udiv	r3, r2, r3
 8003a12:	4618      	mov	r0, r3
 8003a14:	f000 f999 	bl	8003d4a <HAL_SYSTICK_Config>
 8003a18:	4603      	mov	r3, r0
 8003a1a:	2b00      	cmp	r3, #0
 8003a1c:	d001      	beq.n	8003a22 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003a1e:	2301      	movs	r3, #1
 8003a20:	e00e      	b.n	8003a40 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003a22:	687b      	ldr	r3, [r7, #4]
 8003a24:	2b0f      	cmp	r3, #15
 8003a26:	d80a      	bhi.n	8003a3e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003a28:	2200      	movs	r2, #0
 8003a2a:	6879      	ldr	r1, [r7, #4]
 8003a2c:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003a30:	f000 f953 	bl	8003cda <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003a34:	4a06      	ldr	r2, [pc, #24]	; (8003a50 <HAL_InitTick+0x5c>)
 8003a36:	687b      	ldr	r3, [r7, #4]
 8003a38:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003a3a:	2300      	movs	r3, #0
 8003a3c:	e000      	b.n	8003a40 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003a3e:	2301      	movs	r3, #1
}
 8003a40:	4618      	mov	r0, r3
 8003a42:	3708      	adds	r7, #8
 8003a44:	46bd      	mov	sp, r7
 8003a46:	bd80      	pop	{r7, pc}
 8003a48:	2000001c 	.word	0x2000001c
 8003a4c:	20000024 	.word	0x20000024
 8003a50:	20000020 	.word	0x20000020

08003a54 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003a54:	b480      	push	{r7}
 8003a56:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003a58:	4b06      	ldr	r3, [pc, #24]	; (8003a74 <HAL_IncTick+0x20>)
 8003a5a:	781b      	ldrb	r3, [r3, #0]
 8003a5c:	461a      	mov	r2, r3
 8003a5e:	4b06      	ldr	r3, [pc, #24]	; (8003a78 <HAL_IncTick+0x24>)
 8003a60:	681b      	ldr	r3, [r3, #0]
 8003a62:	4413      	add	r3, r2
 8003a64:	4a04      	ldr	r2, [pc, #16]	; (8003a78 <HAL_IncTick+0x24>)
 8003a66:	6013      	str	r3, [r2, #0]
}
 8003a68:	bf00      	nop
 8003a6a:	46bd      	mov	sp, r7
 8003a6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a70:	4770      	bx	lr
 8003a72:	bf00      	nop
 8003a74:	20000024 	.word	0x20000024
 8003a78:	20000a4c 	.word	0x20000a4c

08003a7c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003a7c:	b480      	push	{r7}
 8003a7e:	af00      	add	r7, sp, #0
  return uwTick;
 8003a80:	4b03      	ldr	r3, [pc, #12]	; (8003a90 <HAL_GetTick+0x14>)
 8003a82:	681b      	ldr	r3, [r3, #0]
}
 8003a84:	4618      	mov	r0, r3
 8003a86:	46bd      	mov	sp, r7
 8003a88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a8c:	4770      	bx	lr
 8003a8e:	bf00      	nop
 8003a90:	20000a4c 	.word	0x20000a4c

08003a94 <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003a94:	b580      	push	{r7, lr}
 8003a96:	b084      	sub	sp, #16
 8003a98:	af00      	add	r7, sp, #0
 8003a9a:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003a9c:	f7ff ffee 	bl	8003a7c <HAL_GetTick>
 8003aa0:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003aa6:	68fb      	ldr	r3, [r7, #12]
 8003aa8:	f1b3 3fff 	cmp.w	r3, #4294967295	; 0xffffffff
 8003aac:	d005      	beq.n	8003aba <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003aae:	4b0a      	ldr	r3, [pc, #40]	; (8003ad8 <HAL_Delay+0x44>)
 8003ab0:	781b      	ldrb	r3, [r3, #0]
 8003ab2:	461a      	mov	r2, r3
 8003ab4:	68fb      	ldr	r3, [r7, #12]
 8003ab6:	4413      	add	r3, r2
 8003ab8:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003aba:	bf00      	nop
 8003abc:	f7ff ffde 	bl	8003a7c <HAL_GetTick>
 8003ac0:	4602      	mov	r2, r0
 8003ac2:	68bb      	ldr	r3, [r7, #8]
 8003ac4:	1ad3      	subs	r3, r2, r3
 8003ac6:	68fa      	ldr	r2, [r7, #12]
 8003ac8:	429a      	cmp	r2, r3
 8003aca:	d8f7      	bhi.n	8003abc <HAL_Delay+0x28>
  {
  }
}
 8003acc:	bf00      	nop
 8003ace:	bf00      	nop
 8003ad0:	3710      	adds	r7, #16
 8003ad2:	46bd      	mov	sp, r7
 8003ad4:	bd80      	pop	{r7, pc}
 8003ad6:	bf00      	nop
 8003ad8:	20000024 	.word	0x20000024

08003adc <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003adc:	b480      	push	{r7}
 8003ade:	b085      	sub	sp, #20
 8003ae0:	af00      	add	r7, sp, #0
 8003ae2:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003ae4:	687b      	ldr	r3, [r7, #4]
 8003ae6:	f003 0307 	and.w	r3, r3, #7
 8003aea:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003aec:	4b0c      	ldr	r3, [pc, #48]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003aee:	68db      	ldr	r3, [r3, #12]
 8003af0:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003af2:	68ba      	ldr	r2, [r7, #8]
 8003af4:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003af8:	4013      	ands	r3, r2
 8003afa:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003afc:	68fb      	ldr	r3, [r7, #12]
 8003afe:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003b00:	68bb      	ldr	r3, [r7, #8]
 8003b02:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003b04:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003b08:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003b0c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003b0e:	4a04      	ldr	r2, [pc, #16]	; (8003b20 <__NVIC_SetPriorityGrouping+0x44>)
 8003b10:	68bb      	ldr	r3, [r7, #8]
 8003b12:	60d3      	str	r3, [r2, #12]
}
 8003b14:	bf00      	nop
 8003b16:	3714      	adds	r7, #20
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr
 8003b20:	e000ed00 	.word	0xe000ed00

08003b24 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003b24:	b480      	push	{r7}
 8003b26:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003b28:	4b04      	ldr	r3, [pc, #16]	; (8003b3c <__NVIC_GetPriorityGrouping+0x18>)
 8003b2a:	68db      	ldr	r3, [r3, #12]
 8003b2c:	0a1b      	lsrs	r3, r3, #8
 8003b2e:	f003 0307 	and.w	r3, r3, #7
}
 8003b32:	4618      	mov	r0, r3
 8003b34:	46bd      	mov	sp, r7
 8003b36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b3a:	4770      	bx	lr
 8003b3c:	e000ed00 	.word	0xe000ed00

08003b40 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003b40:	b480      	push	{r7}
 8003b42:	b083      	sub	sp, #12
 8003b44:	af00      	add	r7, sp, #0
 8003b46:	4603      	mov	r3, r0
 8003b48:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b4a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b4e:	2b00      	cmp	r3, #0
 8003b50:	db0b      	blt.n	8003b6a <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b52:	79fb      	ldrb	r3, [r7, #7]
 8003b54:	f003 021f 	and.w	r2, r3, #31
 8003b58:	4907      	ldr	r1, [pc, #28]	; (8003b78 <__NVIC_EnableIRQ+0x38>)
 8003b5a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b5e:	095b      	lsrs	r3, r3, #5
 8003b60:	2001      	movs	r0, #1
 8003b62:	fa00 f202 	lsl.w	r2, r0, r2
 8003b66:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003b6a:	bf00      	nop
 8003b6c:	370c      	adds	r7, #12
 8003b6e:	46bd      	mov	sp, r7
 8003b70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b74:	4770      	bx	lr
 8003b76:	bf00      	nop
 8003b78:	e000e100 	.word	0xe000e100

08003b7c <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003b7c:	b480      	push	{r7}
 8003b7e:	b083      	sub	sp, #12
 8003b80:	af00      	add	r7, sp, #0
 8003b82:	4603      	mov	r3, r0
 8003b84:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003b86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b8a:	2b00      	cmp	r3, #0
 8003b8c:	db12      	blt.n	8003bb4 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003b8e:	79fb      	ldrb	r3, [r7, #7]
 8003b90:	f003 021f 	and.w	r2, r3, #31
 8003b94:	490a      	ldr	r1, [pc, #40]	; (8003bc0 <__NVIC_DisableIRQ+0x44>)
 8003b96:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003b9a:	095b      	lsrs	r3, r3, #5
 8003b9c:	2001      	movs	r0, #1
 8003b9e:	fa00 f202 	lsl.w	r2, r0, r2
 8003ba2:	3320      	adds	r3, #32
 8003ba4:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003ba8:	f3bf 8f4f 	dsb	sy
}
 8003bac:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003bae:	f3bf 8f6f 	isb	sy
}
 8003bb2:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003bb4:	bf00      	nop
 8003bb6:	370c      	adds	r7, #12
 8003bb8:	46bd      	mov	sp, r7
 8003bba:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bbe:	4770      	bx	lr
 8003bc0:	e000e100 	.word	0xe000e100

08003bc4 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003bc4:	b480      	push	{r7}
 8003bc6:	b083      	sub	sp, #12
 8003bc8:	af00      	add	r7, sp, #0
 8003bca:	4603      	mov	r3, r0
 8003bcc:	6039      	str	r1, [r7, #0]
 8003bce:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003bd0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003bd4:	2b00      	cmp	r3, #0
 8003bd6:	db0a      	blt.n	8003bee <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bd8:	683b      	ldr	r3, [r7, #0]
 8003bda:	b2da      	uxtb	r2, r3
 8003bdc:	490c      	ldr	r1, [pc, #48]	; (8003c10 <__NVIC_SetPriority+0x4c>)
 8003bde:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003be2:	0112      	lsls	r2, r2, #4
 8003be4:	b2d2      	uxtb	r2, r2
 8003be6:	440b      	add	r3, r1
 8003be8:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003bec:	e00a      	b.n	8003c04 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003bee:	683b      	ldr	r3, [r7, #0]
 8003bf0:	b2da      	uxtb	r2, r3
 8003bf2:	4908      	ldr	r1, [pc, #32]	; (8003c14 <__NVIC_SetPriority+0x50>)
 8003bf4:	79fb      	ldrb	r3, [r7, #7]
 8003bf6:	f003 030f 	and.w	r3, r3, #15
 8003bfa:	3b04      	subs	r3, #4
 8003bfc:	0112      	lsls	r2, r2, #4
 8003bfe:	b2d2      	uxtb	r2, r2
 8003c00:	440b      	add	r3, r1
 8003c02:	761a      	strb	r2, [r3, #24]
}
 8003c04:	bf00      	nop
 8003c06:	370c      	adds	r7, #12
 8003c08:	46bd      	mov	sp, r7
 8003c0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c0e:	4770      	bx	lr
 8003c10:	e000e100 	.word	0xe000e100
 8003c14:	e000ed00 	.word	0xe000ed00

08003c18 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003c18:	b480      	push	{r7}
 8003c1a:	b089      	sub	sp, #36	; 0x24
 8003c1c:	af00      	add	r7, sp, #0
 8003c1e:	60f8      	str	r0, [r7, #12]
 8003c20:	60b9      	str	r1, [r7, #8]
 8003c22:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003c24:	68fb      	ldr	r3, [r7, #12]
 8003c26:	f003 0307 	and.w	r3, r3, #7
 8003c2a:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003c2c:	69fb      	ldr	r3, [r7, #28]
 8003c2e:	f1c3 0307 	rsb	r3, r3, #7
 8003c32:	2b04      	cmp	r3, #4
 8003c34:	bf28      	it	cs
 8003c36:	2304      	movcs	r3, #4
 8003c38:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003c3a:	69fb      	ldr	r3, [r7, #28]
 8003c3c:	3304      	adds	r3, #4
 8003c3e:	2b06      	cmp	r3, #6
 8003c40:	d902      	bls.n	8003c48 <NVIC_EncodePriority+0x30>
 8003c42:	69fb      	ldr	r3, [r7, #28]
 8003c44:	3b03      	subs	r3, #3
 8003c46:	e000      	b.n	8003c4a <NVIC_EncodePriority+0x32>
 8003c48:	2300      	movs	r3, #0
 8003c4a:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c4c:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8003c50:	69bb      	ldr	r3, [r7, #24]
 8003c52:	fa02 f303 	lsl.w	r3, r2, r3
 8003c56:	43da      	mvns	r2, r3
 8003c58:	68bb      	ldr	r3, [r7, #8]
 8003c5a:	401a      	ands	r2, r3
 8003c5c:	697b      	ldr	r3, [r7, #20]
 8003c5e:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003c60:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8003c64:	697b      	ldr	r3, [r7, #20]
 8003c66:	fa01 f303 	lsl.w	r3, r1, r3
 8003c6a:	43d9      	mvns	r1, r3
 8003c6c:	687b      	ldr	r3, [r7, #4]
 8003c6e:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003c70:	4313      	orrs	r3, r2
         );
}
 8003c72:	4618      	mov	r0, r3
 8003c74:	3724      	adds	r7, #36	; 0x24
 8003c76:	46bd      	mov	sp, r7
 8003c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c7c:	4770      	bx	lr
	...

08003c80 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003c80:	b580      	push	{r7, lr}
 8003c82:	b082      	sub	sp, #8
 8003c84:	af00      	add	r7, sp, #0
 8003c86:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003c88:	687b      	ldr	r3, [r7, #4]
 8003c8a:	3b01      	subs	r3, #1
 8003c8c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003c90:	d301      	bcc.n	8003c96 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003c92:	2301      	movs	r3, #1
 8003c94:	e00f      	b.n	8003cb6 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003c96:	4a0a      	ldr	r2, [pc, #40]	; (8003cc0 <SysTick_Config+0x40>)
 8003c98:	687b      	ldr	r3, [r7, #4]
 8003c9a:	3b01      	subs	r3, #1
 8003c9c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003c9e:	210f      	movs	r1, #15
 8003ca0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003ca4:	f7ff ff8e 	bl	8003bc4 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003ca8:	4b05      	ldr	r3, [pc, #20]	; (8003cc0 <SysTick_Config+0x40>)
 8003caa:	2200      	movs	r2, #0
 8003cac:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003cae:	4b04      	ldr	r3, [pc, #16]	; (8003cc0 <SysTick_Config+0x40>)
 8003cb0:	2207      	movs	r2, #7
 8003cb2:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003cb4:	2300      	movs	r3, #0
}
 8003cb6:	4618      	mov	r0, r3
 8003cb8:	3708      	adds	r7, #8
 8003cba:	46bd      	mov	sp, r7
 8003cbc:	bd80      	pop	{r7, pc}
 8003cbe:	bf00      	nop
 8003cc0:	e000e010 	.word	0xe000e010

08003cc4 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cc4:	b580      	push	{r7, lr}
 8003cc6:	b082      	sub	sp, #8
 8003cc8:	af00      	add	r7, sp, #0
 8003cca:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ccc:	6878      	ldr	r0, [r7, #4]
 8003cce:	f7ff ff05 	bl	8003adc <__NVIC_SetPriorityGrouping>
}
 8003cd2:	bf00      	nop
 8003cd4:	3708      	adds	r7, #8
 8003cd6:	46bd      	mov	sp, r7
 8003cd8:	bd80      	pop	{r7, pc}

08003cda <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003cda:	b580      	push	{r7, lr}
 8003cdc:	b086      	sub	sp, #24
 8003cde:	af00      	add	r7, sp, #0
 8003ce0:	4603      	mov	r3, r0
 8003ce2:	60b9      	str	r1, [r7, #8]
 8003ce4:	607a      	str	r2, [r7, #4]
 8003ce6:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ce8:	2300      	movs	r3, #0
 8003cea:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003cec:	f7ff ff1a 	bl	8003b24 <__NVIC_GetPriorityGrouping>
 8003cf0:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003cf2:	687a      	ldr	r2, [r7, #4]
 8003cf4:	68b9      	ldr	r1, [r7, #8]
 8003cf6:	6978      	ldr	r0, [r7, #20]
 8003cf8:	f7ff ff8e 	bl	8003c18 <NVIC_EncodePriority>
 8003cfc:	4602      	mov	r2, r0
 8003cfe:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003d02:	4611      	mov	r1, r2
 8003d04:	4618      	mov	r0, r3
 8003d06:	f7ff ff5d 	bl	8003bc4 <__NVIC_SetPriority>
}
 8003d0a:	bf00      	nop
 8003d0c:	3718      	adds	r7, #24
 8003d0e:	46bd      	mov	sp, r7
 8003d10:	bd80      	pop	{r7, pc}

08003d12 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d12:	b580      	push	{r7, lr}
 8003d14:	b082      	sub	sp, #8
 8003d16:	af00      	add	r7, sp, #0
 8003d18:	4603      	mov	r3, r0
 8003d1a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003d1c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d20:	4618      	mov	r0, r3
 8003d22:	f7ff ff0d 	bl	8003b40 <__NVIC_EnableIRQ>
}
 8003d26:	bf00      	nop
 8003d28:	3708      	adds	r7, #8
 8003d2a:	46bd      	mov	sp, r7
 8003d2c:	bd80      	pop	{r7, pc}

08003d2e <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d2e:	b580      	push	{r7, lr}
 8003d30:	b082      	sub	sp, #8
 8003d32:	af00      	add	r7, sp, #0
 8003d34:	4603      	mov	r3, r0
 8003d36:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003d38:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d3c:	4618      	mov	r0, r3
 8003d3e:	f7ff ff1d 	bl	8003b7c <__NVIC_DisableIRQ>
}
 8003d42:	bf00      	nop
 8003d44:	3708      	adds	r7, #8
 8003d46:	46bd      	mov	sp, r7
 8003d48:	bd80      	pop	{r7, pc}

08003d4a <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003d4a:	b580      	push	{r7, lr}
 8003d4c:	b082      	sub	sp, #8
 8003d4e:	af00      	add	r7, sp, #0
 8003d50:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003d52:	6878      	ldr	r0, [r7, #4]
 8003d54:	f7ff ff94 	bl	8003c80 <SysTick_Config>
 8003d58:	4603      	mov	r3, r0
}
 8003d5a:	4618      	mov	r0, r3
 8003d5c:	3708      	adds	r7, #8
 8003d5e:	46bd      	mov	sp, r7
 8003d60:	bd80      	pop	{r7, pc}
	...

08003d64 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003d64:	b580      	push	{r7, lr}
 8003d66:	b086      	sub	sp, #24
 8003d68:	af00      	add	r7, sp, #0
 8003d6a:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003d6c:	2300      	movs	r3, #0
 8003d6e:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003d70:	f7ff fe84 	bl	8003a7c <HAL_GetTick>
 8003d74:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2b00      	cmp	r3, #0
 8003d7a:	d101      	bne.n	8003d80 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003d7c:	2301      	movs	r3, #1
 8003d7e:	e099      	b.n	8003eb4 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003d80:	687b      	ldr	r3, [r7, #4]
 8003d82:	2200      	movs	r2, #0
 8003d84:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2202      	movs	r2, #2
 8003d8c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	681b      	ldr	r3, [r3, #0]
 8003d94:	681a      	ldr	r2, [r3, #0]
 8003d96:	687b      	ldr	r3, [r7, #4]
 8003d98:	681b      	ldr	r3, [r3, #0]
 8003d9a:	f022 0201 	bic.w	r2, r2, #1
 8003d9e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003da0:	e00f      	b.n	8003dc2 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003da2:	f7ff fe6b 	bl	8003a7c <HAL_GetTick>
 8003da6:	4602      	mov	r2, r0
 8003da8:	693b      	ldr	r3, [r7, #16]
 8003daa:	1ad3      	subs	r3, r2, r3
 8003dac:	2b05      	cmp	r3, #5
 8003dae:	d908      	bls.n	8003dc2 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	2220      	movs	r2, #32
 8003db4:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	2203      	movs	r2, #3
 8003dba:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003dbe:	2303      	movs	r3, #3
 8003dc0:	e078      	b.n	8003eb4 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003dc2:	687b      	ldr	r3, [r7, #4]
 8003dc4:	681b      	ldr	r3, [r3, #0]
 8003dc6:	681b      	ldr	r3, [r3, #0]
 8003dc8:	f003 0301 	and.w	r3, r3, #1
 8003dcc:	2b00      	cmp	r3, #0
 8003dce:	d1e8      	bne.n	8003da2 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	681b      	ldr	r3, [r3, #0]
 8003dd6:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003dd8:	697a      	ldr	r2, [r7, #20]
 8003dda:	4b38      	ldr	r3, [pc, #224]	; (8003ebc <HAL_DMA_Init+0x158>)
 8003ddc:	4013      	ands	r3, r2
 8003dde:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003de0:	687b      	ldr	r3, [r7, #4]
 8003de2:	685a      	ldr	r2, [r3, #4]
 8003de4:	687b      	ldr	r3, [r7, #4]
 8003de6:	689b      	ldr	r3, [r3, #8]
 8003de8:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003dee:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003df0:	687b      	ldr	r3, [r7, #4]
 8003df2:	691b      	ldr	r3, [r3, #16]
 8003df4:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003df6:	687b      	ldr	r3, [r7, #4]
 8003df8:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003dfa:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	699b      	ldr	r3, [r3, #24]
 8003e00:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e02:	687b      	ldr	r3, [r7, #4]
 8003e04:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003e06:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003e08:	687b      	ldr	r3, [r7, #4]
 8003e0a:	6a1b      	ldr	r3, [r3, #32]
 8003e0c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003e0e:	697a      	ldr	r2, [r7, #20]
 8003e10:	4313      	orrs	r3, r2
 8003e12:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e14:	687b      	ldr	r3, [r7, #4]
 8003e16:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e18:	2b04      	cmp	r3, #4
 8003e1a:	d107      	bne.n	8003e2c <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003e20:	687b      	ldr	r3, [r7, #4]
 8003e22:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003e24:	4313      	orrs	r3, r2
 8003e26:	697a      	ldr	r2, [r7, #20]
 8003e28:	4313      	orrs	r3, r2
 8003e2a:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	681b      	ldr	r3, [r3, #0]
 8003e30:	697a      	ldr	r2, [r7, #20]
 8003e32:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 8003e34:	687b      	ldr	r3, [r7, #4]
 8003e36:	681b      	ldr	r3, [r3, #0]
 8003e38:	695b      	ldr	r3, [r3, #20]
 8003e3a:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	f023 0307 	bic.w	r3, r3, #7
 8003e42:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e48:	697a      	ldr	r2, [r7, #20]
 8003e4a:	4313      	orrs	r3, r2
 8003e4c:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003e4e:	687b      	ldr	r3, [r7, #4]
 8003e50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e52:	2b04      	cmp	r3, #4
 8003e54:	d117      	bne.n	8003e86 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 8003e56:	687b      	ldr	r3, [r7, #4]
 8003e58:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003e5a:	697a      	ldr	r2, [r7, #20]
 8003e5c:	4313      	orrs	r3, r2
 8003e5e:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003e64:	2b00      	cmp	r3, #0
 8003e66:	d00e      	beq.n	8003e86 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8003e68:	6878      	ldr	r0, [r7, #4]
 8003e6a:	f000 fb0f 	bl	800448c <DMA_CheckFifoParam>
 8003e6e:	4603      	mov	r3, r0
 8003e70:	2b00      	cmp	r3, #0
 8003e72:	d008      	beq.n	8003e86 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 8003e74:	687b      	ldr	r3, [r7, #4]
 8003e76:	2240      	movs	r2, #64	; 0x40
 8003e78:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003e7a:	687b      	ldr	r3, [r7, #4]
 8003e7c:	2201      	movs	r2, #1
 8003e7e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003e82:	2301      	movs	r3, #1
 8003e84:	e016      	b.n	8003eb4 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003e86:	687b      	ldr	r3, [r7, #4]
 8003e88:	681b      	ldr	r3, [r3, #0]
 8003e8a:	697a      	ldr	r2, [r7, #20]
 8003e8c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8003e8e:	6878      	ldr	r0, [r7, #4]
 8003e90:	f000 fac6 	bl	8004420 <DMA_CalcBaseAndBitshift>
 8003e94:	4603      	mov	r3, r0
 8003e96:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003e98:	687b      	ldr	r3, [r7, #4]
 8003e9a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003e9c:	223f      	movs	r2, #63	; 0x3f
 8003e9e:	409a      	lsls	r2, r3
 8003ea0:	68fb      	ldr	r3, [r7, #12]
 8003ea2:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003ea4:	687b      	ldr	r3, [r7, #4]
 8003ea6:	2200      	movs	r2, #0
 8003ea8:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8003eaa:	687b      	ldr	r3, [r7, #4]
 8003eac:	2201      	movs	r2, #1
 8003eae:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003eb2:	2300      	movs	r3, #0
}
 8003eb4:	4618      	mov	r0, r3
 8003eb6:	3718      	adds	r7, #24
 8003eb8:	46bd      	mov	sp, r7
 8003eba:	bd80      	pop	{r7, pc}
 8003ebc:	f010803f 	.word	0xf010803f

08003ec0 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003ec0:	b580      	push	{r7, lr}
 8003ec2:	b086      	sub	sp, #24
 8003ec4:	af00      	add	r7, sp, #0
 8003ec6:	60f8      	str	r0, [r7, #12]
 8003ec8:	60b9      	str	r1, [r7, #8]
 8003eca:	607a      	str	r2, [r7, #4]
 8003ecc:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 8003ece:	2300      	movs	r3, #0
 8003ed0:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003ed2:	68fb      	ldr	r3, [r7, #12]
 8003ed4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003ed6:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003ed8:	68fb      	ldr	r3, [r7, #12]
 8003eda:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 8003ede:	2b01      	cmp	r3, #1
 8003ee0:	d101      	bne.n	8003ee6 <HAL_DMA_Start_IT+0x26>
 8003ee2:	2302      	movs	r3, #2
 8003ee4:	e040      	b.n	8003f68 <HAL_DMA_Start_IT+0xa8>
 8003ee6:	68fb      	ldr	r3, [r7, #12]
 8003ee8:	2201      	movs	r2, #1
 8003eea:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 8003eee:	68fb      	ldr	r3, [r7, #12]
 8003ef0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003ef4:	b2db      	uxtb	r3, r3
 8003ef6:	2b01      	cmp	r3, #1
 8003ef8:	d12f      	bne.n	8003f5a <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 8003efa:	68fb      	ldr	r3, [r7, #12]
 8003efc:	2202      	movs	r2, #2
 8003efe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003f02:	68fb      	ldr	r3, [r7, #12]
 8003f04:	2200      	movs	r2, #0
 8003f06:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003f08:	683b      	ldr	r3, [r7, #0]
 8003f0a:	687a      	ldr	r2, [r7, #4]
 8003f0c:	68b9      	ldr	r1, [r7, #8]
 8003f0e:	68f8      	ldr	r0, [r7, #12]
 8003f10:	f000 fa58 	bl	80043c4 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003f14:	68fb      	ldr	r3, [r7, #12]
 8003f16:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003f18:	223f      	movs	r2, #63	; 0x3f
 8003f1a:	409a      	lsls	r2, r3
 8003f1c:	693b      	ldr	r3, [r7, #16]
 8003f1e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	681a      	ldr	r2, [r3, #0]
 8003f26:	68fb      	ldr	r3, [r7, #12]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	f042 0216 	orr.w	r2, r2, #22
 8003f2e:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8003f30:	68fb      	ldr	r3, [r7, #12]
 8003f32:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003f34:	2b00      	cmp	r3, #0
 8003f36:	d007      	beq.n	8003f48 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8003f38:	68fb      	ldr	r3, [r7, #12]
 8003f3a:	681b      	ldr	r3, [r3, #0]
 8003f3c:	681a      	ldr	r2, [r3, #0]
 8003f3e:	68fb      	ldr	r3, [r7, #12]
 8003f40:	681b      	ldr	r3, [r3, #0]
 8003f42:	f042 0208 	orr.w	r2, r2, #8
 8003f46:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8003f48:	68fb      	ldr	r3, [r7, #12]
 8003f4a:	681b      	ldr	r3, [r3, #0]
 8003f4c:	681a      	ldr	r2, [r3, #0]
 8003f4e:	68fb      	ldr	r3, [r7, #12]
 8003f50:	681b      	ldr	r3, [r3, #0]
 8003f52:	f042 0201 	orr.w	r2, r2, #1
 8003f56:	601a      	str	r2, [r3, #0]
 8003f58:	e005      	b.n	8003f66 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8003f5a:	68fb      	ldr	r3, [r7, #12]
 8003f5c:	2200      	movs	r2, #0
 8003f5e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 8003f62:	2302      	movs	r3, #2
 8003f64:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 8003f66:	7dfb      	ldrb	r3, [r7, #23]
}
 8003f68:	4618      	mov	r0, r3
 8003f6a:	3718      	adds	r7, #24
 8003f6c:	46bd      	mov	sp, r7
 8003f6e:	bd80      	pop	{r7, pc}

08003f70 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003f7c:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8003f7e:	f7ff fd7d 	bl	8003a7c <HAL_GetTick>
 8003f82:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003f84:	687b      	ldr	r3, [r7, #4]
 8003f86:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003f8a:	b2db      	uxtb	r3, r3
 8003f8c:	2b02      	cmp	r3, #2
 8003f8e:	d008      	beq.n	8003fa2 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	2280      	movs	r2, #128	; 0x80
 8003f94:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003f96:	687b      	ldr	r3, [r7, #4]
 8003f98:	2200      	movs	r2, #0
 8003f9a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8003f9e:	2301      	movs	r3, #1
 8003fa0:	e052      	b.n	8004048 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003fa2:	687b      	ldr	r3, [r7, #4]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	681a      	ldr	r2, [r3, #0]
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	f022 0216 	bic.w	r2, r2, #22
 8003fb0:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003fb2:	687b      	ldr	r3, [r7, #4]
 8003fb4:	681b      	ldr	r3, [r3, #0]
 8003fb6:	695a      	ldr	r2, [r3, #20]
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	681b      	ldr	r3, [r3, #0]
 8003fbc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003fc0:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003fc6:	2b00      	cmp	r3, #0
 8003fc8:	d103      	bne.n	8003fd2 <HAL_DMA_Abort+0x62>
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003fce:	2b00      	cmp	r3, #0
 8003fd0:	d007      	beq.n	8003fe2 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003fd2:	687b      	ldr	r3, [r7, #4]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	681a      	ldr	r2, [r3, #0]
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f022 0208 	bic.w	r2, r2, #8
 8003fe0:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003fe2:	687b      	ldr	r3, [r7, #4]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	681a      	ldr	r2, [r3, #0]
 8003fe8:	687b      	ldr	r3, [r7, #4]
 8003fea:	681b      	ldr	r3, [r3, #0]
 8003fec:	f022 0201 	bic.w	r2, r2, #1
 8003ff0:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003ff2:	e013      	b.n	800401c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003ff4:	f7ff fd42 	bl	8003a7c <HAL_GetTick>
 8003ff8:	4602      	mov	r2, r0
 8003ffa:	68bb      	ldr	r3, [r7, #8]
 8003ffc:	1ad3      	subs	r3, r2, r3
 8003ffe:	2b05      	cmp	r3, #5
 8004000:	d90c      	bls.n	800401c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2220      	movs	r2, #32
 8004006:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004008:	687b      	ldr	r3, [r7, #4]
 800400a:	2200      	movs	r2, #0
 800400c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	2203      	movs	r2, #3
 8004014:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8004018:	2303      	movs	r3, #3
 800401a:	e015      	b.n	8004048 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	681b      	ldr	r3, [r3, #0]
 8004020:	681b      	ldr	r3, [r3, #0]
 8004022:	f003 0301 	and.w	r3, r3, #1
 8004026:	2b00      	cmp	r3, #0
 8004028:	d1e4      	bne.n	8003ff4 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800402e:	223f      	movs	r2, #63	; 0x3f
 8004030:	409a      	lsls	r2, r3
 8004032:	68fb      	ldr	r3, [r7, #12]
 8004034:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8004036:	687b      	ldr	r3, [r7, #4]
 8004038:	2200      	movs	r2, #0
 800403a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 800403e:	687b      	ldr	r3, [r7, #4]
 8004040:	2201      	movs	r2, #1
 8004042:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 8004046:	2300      	movs	r3, #0
}
 8004048:	4618      	mov	r0, r3
 800404a:	3710      	adds	r7, #16
 800404c:	46bd      	mov	sp, r7
 800404e:	bd80      	pop	{r7, pc}

08004050 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004050:	b480      	push	{r7}
 8004052:	b083      	sub	sp, #12
 8004054:	af00      	add	r7, sp, #0
 8004056:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004058:	687b      	ldr	r3, [r7, #4]
 800405a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800405e:	b2db      	uxtb	r3, r3
 8004060:	2b02      	cmp	r3, #2
 8004062:	d004      	beq.n	800406e <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004064:	687b      	ldr	r3, [r7, #4]
 8004066:	2280      	movs	r2, #128	; 0x80
 8004068:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 800406a:	2301      	movs	r3, #1
 800406c:	e00c      	b.n	8004088 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	2205      	movs	r2, #5
 8004072:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8004076:	687b      	ldr	r3, [r7, #4]
 8004078:	681b      	ldr	r3, [r3, #0]
 800407a:	681a      	ldr	r2, [r3, #0]
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	f022 0201 	bic.w	r2, r2, #1
 8004084:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8004086:	2300      	movs	r3, #0
}
 8004088:	4618      	mov	r0, r3
 800408a:	370c      	adds	r7, #12
 800408c:	46bd      	mov	sp, r7
 800408e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004092:	4770      	bx	lr

08004094 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8004094:	b580      	push	{r7, lr}
 8004096:	b086      	sub	sp, #24
 8004098:	af00      	add	r7, sp, #0
 800409a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800409c:	2300      	movs	r3, #0
 800409e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 80040a0:	4b92      	ldr	r3, [pc, #584]	; (80042ec <HAL_DMA_IRQHandler+0x258>)
 80040a2:	681b      	ldr	r3, [r3, #0]
 80040a4:	4a92      	ldr	r2, [pc, #584]	; (80042f0 <HAL_DMA_IRQHandler+0x25c>)
 80040a6:	fba2 2303 	umull	r2, r3, r2, r3
 80040aa:	0a9b      	lsrs	r3, r3, #10
 80040ac:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040b2:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 80040b4:	693b      	ldr	r3, [r7, #16]
 80040b6:	681b      	ldr	r3, [r3, #0]
 80040b8:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 80040ba:	687b      	ldr	r3, [r7, #4]
 80040bc:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040be:	2208      	movs	r2, #8
 80040c0:	409a      	lsls	r2, r3
 80040c2:	68fb      	ldr	r3, [r7, #12]
 80040c4:	4013      	ands	r3, r2
 80040c6:	2b00      	cmp	r3, #0
 80040c8:	d01a      	beq.n	8004100 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	681b      	ldr	r3, [r3, #0]
 80040d0:	f003 0304 	and.w	r3, r3, #4
 80040d4:	2b00      	cmp	r3, #0
 80040d6:	d013      	beq.n	8004100 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80040d8:	687b      	ldr	r3, [r7, #4]
 80040da:	681b      	ldr	r3, [r3, #0]
 80040dc:	681a      	ldr	r2, [r3, #0]
 80040de:	687b      	ldr	r3, [r7, #4]
 80040e0:	681b      	ldr	r3, [r3, #0]
 80040e2:	f022 0204 	bic.w	r2, r2, #4
 80040e6:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80040e8:	687b      	ldr	r3, [r7, #4]
 80040ea:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040ec:	2208      	movs	r2, #8
 80040ee:	409a      	lsls	r2, r3
 80040f0:	693b      	ldr	r3, [r7, #16]
 80040f2:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80040f4:	687b      	ldr	r3, [r7, #4]
 80040f6:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80040f8:	f043 0201 	orr.w	r2, r3, #1
 80040fc:	687b      	ldr	r3, [r7, #4]
 80040fe:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8004100:	687b      	ldr	r3, [r7, #4]
 8004102:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004104:	2201      	movs	r2, #1
 8004106:	409a      	lsls	r2, r3
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	4013      	ands	r3, r2
 800410c:	2b00      	cmp	r3, #0
 800410e:	d012      	beq.n	8004136 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8004110:	687b      	ldr	r3, [r7, #4]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	695b      	ldr	r3, [r3, #20]
 8004116:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800411a:	2b00      	cmp	r3, #0
 800411c:	d00b      	beq.n	8004136 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800411e:	687b      	ldr	r3, [r7, #4]
 8004120:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004122:	2201      	movs	r2, #1
 8004124:	409a      	lsls	r2, r3
 8004126:	693b      	ldr	r3, [r7, #16]
 8004128:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800412e:	f043 0202 	orr.w	r2, r3, #2
 8004132:	687b      	ldr	r3, [r7, #4]
 8004134:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 8004136:	687b      	ldr	r3, [r7, #4]
 8004138:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800413a:	2204      	movs	r2, #4
 800413c:	409a      	lsls	r2, r3
 800413e:	68fb      	ldr	r3, [r7, #12]
 8004140:	4013      	ands	r3, r2
 8004142:	2b00      	cmp	r3, #0
 8004144:	d012      	beq.n	800416c <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681b      	ldr	r3, [r3, #0]
 800414c:	f003 0302 	and.w	r3, r3, #2
 8004150:	2b00      	cmp	r3, #0
 8004152:	d00b      	beq.n	800416c <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004158:	2204      	movs	r2, #4
 800415a:	409a      	lsls	r2, r3
 800415c:	693b      	ldr	r3, [r7, #16]
 800415e:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004160:	687b      	ldr	r3, [r7, #4]
 8004162:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004164:	f043 0204 	orr.w	r2, r3, #4
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 800416c:	687b      	ldr	r3, [r7, #4]
 800416e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004170:	2210      	movs	r2, #16
 8004172:	409a      	lsls	r2, r3
 8004174:	68fb      	ldr	r3, [r7, #12]
 8004176:	4013      	ands	r3, r2
 8004178:	2b00      	cmp	r3, #0
 800417a:	d043      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	681b      	ldr	r3, [r3, #0]
 8004180:	681b      	ldr	r3, [r3, #0]
 8004182:	f003 0308 	and.w	r3, r3, #8
 8004186:	2b00      	cmp	r3, #0
 8004188:	d03c      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800418e:	2210      	movs	r2, #16
 8004190:	409a      	lsls	r2, r3
 8004192:	693b      	ldr	r3, [r7, #16]
 8004194:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004196:	687b      	ldr	r3, [r7, #4]
 8004198:	681b      	ldr	r3, [r3, #0]
 800419a:	681b      	ldr	r3, [r3, #0]
 800419c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80041a0:	2b00      	cmp	r3, #0
 80041a2:	d018      	beq.n	80041d6 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	681b      	ldr	r3, [r3, #0]
 80041aa:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80041ae:	2b00      	cmp	r3, #0
 80041b0:	d108      	bne.n	80041c4 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041b6:	2b00      	cmp	r3, #0
 80041b8:	d024      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041be:	6878      	ldr	r0, [r7, #4]
 80041c0:	4798      	blx	r3
 80041c2:	e01f      	b.n	8004204 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 80041c4:	687b      	ldr	r3, [r7, #4]
 80041c6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041c8:	2b00      	cmp	r3, #0
 80041ca:	d01b      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80041cc:	687b      	ldr	r3, [r7, #4]
 80041ce:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041d0:	6878      	ldr	r0, [r7, #4]
 80041d2:	4798      	blx	r3
 80041d4:	e016      	b.n	8004204 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80041d6:	687b      	ldr	r3, [r7, #4]
 80041d8:	681b      	ldr	r3, [r3, #0]
 80041da:	681b      	ldr	r3, [r3, #0]
 80041dc:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80041e0:	2b00      	cmp	r3, #0
 80041e2:	d107      	bne.n	80041f4 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041e4:	687b      	ldr	r3, [r7, #4]
 80041e6:	681b      	ldr	r3, [r3, #0]
 80041e8:	681a      	ldr	r2, [r3, #0]
 80041ea:	687b      	ldr	r3, [r7, #4]
 80041ec:	681b      	ldr	r3, [r3, #0]
 80041ee:	f022 0208 	bic.w	r2, r2, #8
 80041f2:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80041f8:	2b00      	cmp	r3, #0
 80041fa:	d003      	beq.n	8004204 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004200:	6878      	ldr	r0, [r7, #4]
 8004202:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004208:	2220      	movs	r2, #32
 800420a:	409a      	lsls	r2, r3
 800420c:	68fb      	ldr	r3, [r7, #12]
 800420e:	4013      	ands	r3, r2
 8004210:	2b00      	cmp	r3, #0
 8004212:	f000 808e 	beq.w	8004332 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	681b      	ldr	r3, [r3, #0]
 800421a:	681b      	ldr	r3, [r3, #0]
 800421c:	f003 0310 	and.w	r3, r3, #16
 8004220:	2b00      	cmp	r3, #0
 8004222:	f000 8086 	beq.w	8004332 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 8004226:	687b      	ldr	r3, [r7, #4]
 8004228:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800422a:	2220      	movs	r2, #32
 800422c:	409a      	lsls	r2, r3
 800422e:	693b      	ldr	r3, [r7, #16]
 8004230:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 8004232:	687b      	ldr	r3, [r7, #4]
 8004234:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004238:	b2db      	uxtb	r3, r3
 800423a:	2b05      	cmp	r3, #5
 800423c:	d136      	bne.n	80042ac <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	681b      	ldr	r3, [r3, #0]
 8004242:	681a      	ldr	r2, [r3, #0]
 8004244:	687b      	ldr	r3, [r7, #4]
 8004246:	681b      	ldr	r3, [r3, #0]
 8004248:	f022 0216 	bic.w	r2, r2, #22
 800424c:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	695a      	ldr	r2, [r3, #20]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 800425c:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004262:	2b00      	cmp	r3, #0
 8004264:	d103      	bne.n	800426e <HAL_DMA_IRQHandler+0x1da>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800426a:	2b00      	cmp	r3, #0
 800426c:	d007      	beq.n	800427e <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	681b      	ldr	r3, [r3, #0]
 8004272:	681a      	ldr	r2, [r3, #0]
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	f022 0208 	bic.w	r2, r2, #8
 800427c:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 800427e:	687b      	ldr	r3, [r7, #4]
 8004280:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004282:	223f      	movs	r2, #63	; 0x3f
 8004284:	409a      	lsls	r2, r3
 8004286:	693b      	ldr	r3, [r7, #16]
 8004288:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800428a:	687b      	ldr	r3, [r7, #4]
 800428c:	2200      	movs	r2, #0
 800428e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	2201      	movs	r2, #1
 8004296:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d07d      	beq.n	800439e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042a6:	6878      	ldr	r0, [r7, #4]
 80042a8:	4798      	blx	r3
        }
        return;
 80042aa:	e078      	b.n	800439e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	681b      	ldr	r3, [r3, #0]
 80042b0:	681b      	ldr	r3, [r3, #0]
 80042b2:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 80042b6:	2b00      	cmp	r3, #0
 80042b8:	d01c      	beq.n	80042f4 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 80042ba:	687b      	ldr	r3, [r7, #4]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	681b      	ldr	r3, [r3, #0]
 80042c0:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 80042c4:	2b00      	cmp	r3, #0
 80042c6:	d108      	bne.n	80042da <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80042c8:	687b      	ldr	r3, [r7, #4]
 80042ca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042cc:	2b00      	cmp	r3, #0
 80042ce:	d030      	beq.n	8004332 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80042d0:	687b      	ldr	r3, [r7, #4]
 80042d2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042d4:	6878      	ldr	r0, [r7, #4]
 80042d6:	4798      	blx	r3
 80042d8:	e02b      	b.n	8004332 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80042da:	687b      	ldr	r3, [r7, #4]
 80042dc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042de:	2b00      	cmp	r3, #0
 80042e0:	d027      	beq.n	8004332 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042e6:	6878      	ldr	r0, [r7, #4]
 80042e8:	4798      	blx	r3
 80042ea:	e022      	b.n	8004332 <HAL_DMA_IRQHandler+0x29e>
 80042ec:	2000001c 	.word	0x2000001c
 80042f0:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80042f4:	687b      	ldr	r3, [r7, #4]
 80042f6:	681b      	ldr	r3, [r3, #0]
 80042f8:	681b      	ldr	r3, [r3, #0]
 80042fa:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80042fe:	2b00      	cmp	r3, #0
 8004300:	d10f      	bne.n	8004322 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	681a      	ldr	r2, [r3, #0]
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	681b      	ldr	r3, [r3, #0]
 800430c:	f022 0210 	bic.w	r2, r2, #16
 8004310:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8004312:	687b      	ldr	r3, [r7, #4]
 8004314:	2200      	movs	r2, #0
 8004316:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800431a:	687b      	ldr	r3, [r7, #4]
 800431c:	2201      	movs	r2, #1
 800431e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 8004322:	687b      	ldr	r3, [r7, #4]
 8004324:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004326:	2b00      	cmp	r3, #0
 8004328:	d003      	beq.n	8004332 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 800432a:	687b      	ldr	r3, [r7, #4]
 800432c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800432e:	6878      	ldr	r0, [r7, #4]
 8004330:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004336:	2b00      	cmp	r3, #0
 8004338:	d032      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 800433a:	687b      	ldr	r3, [r7, #4]
 800433c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433e:	f003 0301 	and.w	r3, r3, #1
 8004342:	2b00      	cmp	r3, #0
 8004344:	d022      	beq.n	800438c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 8004346:	687b      	ldr	r3, [r7, #4]
 8004348:	2205      	movs	r2, #5
 800434a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 800434e:	687b      	ldr	r3, [r7, #4]
 8004350:	681b      	ldr	r3, [r3, #0]
 8004352:	681a      	ldr	r2, [r3, #0]
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	f022 0201 	bic.w	r2, r2, #1
 800435c:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 800435e:	68bb      	ldr	r3, [r7, #8]
 8004360:	3301      	adds	r3, #1
 8004362:	60bb      	str	r3, [r7, #8]
 8004364:	697a      	ldr	r2, [r7, #20]
 8004366:	429a      	cmp	r2, r3
 8004368:	d307      	bcc.n	800437a <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	681b      	ldr	r3, [r3, #0]
 800436e:	681b      	ldr	r3, [r3, #0]
 8004370:	f003 0301 	and.w	r3, r3, #1
 8004374:	2b00      	cmp	r3, #0
 8004376:	d1f2      	bne.n	800435e <HAL_DMA_IRQHandler+0x2ca>
 8004378:	e000      	b.n	800437c <HAL_DMA_IRQHandler+0x2e8>
          break;
 800437a:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	2200      	movs	r2, #0
 8004380:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	2201      	movs	r2, #1
 8004388:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 800438c:	687b      	ldr	r3, [r7, #4]
 800438e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004390:	2b00      	cmp	r3, #0
 8004392:	d005      	beq.n	80043a0 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004398:	6878      	ldr	r0, [r7, #4]
 800439a:	4798      	blx	r3
 800439c:	e000      	b.n	80043a0 <HAL_DMA_IRQHandler+0x30c>
        return;
 800439e:	bf00      	nop
    }
  }
}
 80043a0:	3718      	adds	r7, #24
 80043a2:	46bd      	mov	sp, r7
 80043a4:	bd80      	pop	{r7, pc}
 80043a6:	bf00      	nop

080043a8 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80043a8:	b480      	push	{r7}
 80043aa:	b083      	sub	sp, #12
 80043ac:	af00      	add	r7, sp, #0
 80043ae:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80043b6:	b2db      	uxtb	r3, r3
}
 80043b8:	4618      	mov	r0, r3
 80043ba:	370c      	adds	r7, #12
 80043bc:	46bd      	mov	sp, r7
 80043be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043c2:	4770      	bx	lr

080043c4 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 80043c4:	b480      	push	{r7}
 80043c6:	b085      	sub	sp, #20
 80043c8:	af00      	add	r7, sp, #0
 80043ca:	60f8      	str	r0, [r7, #12]
 80043cc:	60b9      	str	r1, [r7, #8]
 80043ce:	607a      	str	r2, [r7, #4]
 80043d0:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80043d2:	68fb      	ldr	r3, [r7, #12]
 80043d4:	681b      	ldr	r3, [r3, #0]
 80043d6:	681a      	ldr	r2, [r3, #0]
 80043d8:	68fb      	ldr	r3, [r7, #12]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80043e0:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80043e2:	68fb      	ldr	r3, [r7, #12]
 80043e4:	681b      	ldr	r3, [r3, #0]
 80043e6:	683a      	ldr	r2, [r7, #0]
 80043e8:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80043ea:	68fb      	ldr	r3, [r7, #12]
 80043ec:	689b      	ldr	r3, [r3, #8]
 80043ee:	2b40      	cmp	r3, #64	; 0x40
 80043f0:	d108      	bne.n	8004404 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80043f2:	68fb      	ldr	r3, [r7, #12]
 80043f4:	681b      	ldr	r3, [r3, #0]
 80043f6:	687a      	ldr	r2, [r7, #4]
 80043f8:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80043fa:	68fb      	ldr	r3, [r7, #12]
 80043fc:	681b      	ldr	r3, [r3, #0]
 80043fe:	68ba      	ldr	r2, [r7, #8]
 8004400:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8004402:	e007      	b.n	8004414 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8004404:	68fb      	ldr	r3, [r7, #12]
 8004406:	681b      	ldr	r3, [r3, #0]
 8004408:	68ba      	ldr	r2, [r7, #8]
 800440a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 800440c:	68fb      	ldr	r3, [r7, #12]
 800440e:	681b      	ldr	r3, [r3, #0]
 8004410:	687a      	ldr	r2, [r7, #4]
 8004412:	60da      	str	r2, [r3, #12]
}
 8004414:	bf00      	nop
 8004416:	3714      	adds	r7, #20
 8004418:	46bd      	mov	sp, r7
 800441a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800441e:	4770      	bx	lr

08004420 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8004420:	b480      	push	{r7}
 8004422:	b085      	sub	sp, #20
 8004424:	af00      	add	r7, sp, #0
 8004426:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004428:	687b      	ldr	r3, [r7, #4]
 800442a:	681b      	ldr	r3, [r3, #0]
 800442c:	b2db      	uxtb	r3, r3
 800442e:	3b10      	subs	r3, #16
 8004430:	4a14      	ldr	r2, [pc, #80]	; (8004484 <DMA_CalcBaseAndBitshift+0x64>)
 8004432:	fba2 2303 	umull	r2, r3, r2, r3
 8004436:	091b      	lsrs	r3, r3, #4
 8004438:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 800443a:	4a13      	ldr	r2, [pc, #76]	; (8004488 <DMA_CalcBaseAndBitshift+0x68>)
 800443c:	68fb      	ldr	r3, [r7, #12]
 800443e:	4413      	add	r3, r2
 8004440:	781b      	ldrb	r3, [r3, #0]
 8004442:	461a      	mov	r2, r3
 8004444:	687b      	ldr	r3, [r7, #4]
 8004446:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004448:	68fb      	ldr	r3, [r7, #12]
 800444a:	2b03      	cmp	r3, #3
 800444c:	d909      	bls.n	8004462 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 800444e:	687b      	ldr	r3, [r7, #4]
 8004450:	681b      	ldr	r3, [r3, #0]
 8004452:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004456:	f023 0303 	bic.w	r3, r3, #3
 800445a:	1d1a      	adds	r2, r3, #4
 800445c:	687b      	ldr	r3, [r7, #4]
 800445e:	659a      	str	r2, [r3, #88]	; 0x58
 8004460:	e007      	b.n	8004472 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	681b      	ldr	r3, [r3, #0]
 8004466:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800446a:	f023 0303 	bic.w	r3, r3, #3
 800446e:	687a      	ldr	r2, [r7, #4]
 8004470:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8004476:	4618      	mov	r0, r3
 8004478:	3714      	adds	r7, #20
 800447a:	46bd      	mov	sp, r7
 800447c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004480:	4770      	bx	lr
 8004482:	bf00      	nop
 8004484:	aaaaaaab 	.word	0xaaaaaaab
 8004488:	0800a2c0 	.word	0x0800a2c0

0800448c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 800448c:	b480      	push	{r7}
 800448e:	b085      	sub	sp, #20
 8004490:	af00      	add	r7, sp, #0
 8004492:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8004494:	2300      	movs	r3, #0
 8004496:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004498:	687b      	ldr	r3, [r7, #4]
 800449a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800449c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 800449e:	687b      	ldr	r3, [r7, #4]
 80044a0:	699b      	ldr	r3, [r3, #24]
 80044a2:	2b00      	cmp	r3, #0
 80044a4:	d11f      	bne.n	80044e6 <DMA_CheckFifoParam+0x5a>
 80044a6:	68bb      	ldr	r3, [r7, #8]
 80044a8:	2b03      	cmp	r3, #3
 80044aa:	d856      	bhi.n	800455a <DMA_CheckFifoParam+0xce>
 80044ac:	a201      	add	r2, pc, #4	; (adr r2, 80044b4 <DMA_CheckFifoParam+0x28>)
 80044ae:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044b2:	bf00      	nop
 80044b4:	080044c5 	.word	0x080044c5
 80044b8:	080044d7 	.word	0x080044d7
 80044bc:	080044c5 	.word	0x080044c5
 80044c0:	0800455b 	.word	0x0800455b
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80044c4:	687b      	ldr	r3, [r7, #4]
 80044c6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044c8:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80044cc:	2b00      	cmp	r3, #0
 80044ce:	d046      	beq.n	800455e <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80044d0:	2301      	movs	r3, #1
 80044d2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044d4:	e043      	b.n	800455e <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80044d6:	687b      	ldr	r3, [r7, #4]
 80044d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80044da:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80044de:	d140      	bne.n	8004562 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80044e0:	2301      	movs	r3, #1
 80044e2:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80044e4:	e03d      	b.n	8004562 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	699b      	ldr	r3, [r3, #24]
 80044ea:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80044ee:	d121      	bne.n	8004534 <DMA_CheckFifoParam+0xa8>
 80044f0:	68bb      	ldr	r3, [r7, #8]
 80044f2:	2b03      	cmp	r3, #3
 80044f4:	d837      	bhi.n	8004566 <DMA_CheckFifoParam+0xda>
 80044f6:	a201      	add	r2, pc, #4	; (adr r2, 80044fc <DMA_CheckFifoParam+0x70>)
 80044f8:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80044fc:	0800450d 	.word	0x0800450d
 8004500:	08004513 	.word	0x08004513
 8004504:	0800450d 	.word	0x0800450d
 8004508:	08004525 	.word	0x08004525
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 800450c:	2301      	movs	r3, #1
 800450e:	73fb      	strb	r3, [r7, #15]
      break;
 8004510:	e030      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004516:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 800451a:	2b00      	cmp	r3, #0
 800451c:	d025      	beq.n	800456a <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 800451e:	2301      	movs	r3, #1
 8004520:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8004522:	e022      	b.n	800456a <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8004524:	687b      	ldr	r3, [r7, #4]
 8004526:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004528:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 800452c:	d11f      	bne.n	800456e <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 800452e:	2301      	movs	r3, #1
 8004530:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8004532:	e01c      	b.n	800456e <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8004534:	68bb      	ldr	r3, [r7, #8]
 8004536:	2b02      	cmp	r3, #2
 8004538:	d903      	bls.n	8004542 <DMA_CheckFifoParam+0xb6>
 800453a:	68bb      	ldr	r3, [r7, #8]
 800453c:	2b03      	cmp	r3, #3
 800453e:	d003      	beq.n	8004548 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004540:	e018      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8004542:	2301      	movs	r3, #1
 8004544:	73fb      	strb	r3, [r7, #15]
      break;
 8004546:	e015      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004548:	687b      	ldr	r3, [r7, #4]
 800454a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800454c:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004550:	2b00      	cmp	r3, #0
 8004552:	d00e      	beq.n	8004572 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8004554:	2301      	movs	r3, #1
 8004556:	73fb      	strb	r3, [r7, #15]
      break;
 8004558:	e00b      	b.n	8004572 <DMA_CheckFifoParam+0xe6>
      break;
 800455a:	bf00      	nop
 800455c:	e00a      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 800455e:	bf00      	nop
 8004560:	e008      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004562:	bf00      	nop
 8004564:	e006      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004566:	bf00      	nop
 8004568:	e004      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 800456a:	bf00      	nop
 800456c:	e002      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;   
 800456e:	bf00      	nop
 8004570:	e000      	b.n	8004574 <DMA_CheckFifoParam+0xe8>
      break;
 8004572:	bf00      	nop
    }
  } 
  
  return status; 
 8004574:	7bfb      	ldrb	r3, [r7, #15]
}
 8004576:	4618      	mov	r0, r3
 8004578:	3714      	adds	r7, #20
 800457a:	46bd      	mov	sp, r7
 800457c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004580:	4770      	bx	lr
 8004582:	bf00      	nop

08004584 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8004584:	b480      	push	{r7}
 8004586:	b089      	sub	sp, #36	; 0x24
 8004588:	af00      	add	r7, sp, #0
 800458a:	6078      	str	r0, [r7, #4]
 800458c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 800458e:	2300      	movs	r3, #0
 8004590:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8004592:	2300      	movs	r3, #0
 8004594:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8004596:	2300      	movs	r3, #0
 8004598:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 800459a:	2300      	movs	r3, #0
 800459c:	61fb      	str	r3, [r7, #28]
 800459e:	e159      	b.n	8004854 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 80045a0:	2201      	movs	r2, #1
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	fa02 f303 	lsl.w	r3, r2, r3
 80045a8:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 80045aa:	683b      	ldr	r3, [r7, #0]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	697a      	ldr	r2, [r7, #20]
 80045b0:	4013      	ands	r3, r2
 80045b2:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 80045b4:	693a      	ldr	r2, [r7, #16]
 80045b6:	697b      	ldr	r3, [r7, #20]
 80045b8:	429a      	cmp	r2, r3
 80045ba:	f040 8148 	bne.w	800484e <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045be:	683b      	ldr	r3, [r7, #0]
 80045c0:	685b      	ldr	r3, [r3, #4]
 80045c2:	f003 0303 	and.w	r3, r3, #3
 80045c6:	2b01      	cmp	r3, #1
 80045c8:	d005      	beq.n	80045d6 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80045ca:	683b      	ldr	r3, [r7, #0]
 80045cc:	685b      	ldr	r3, [r3, #4]
 80045ce:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80045d2:	2b02      	cmp	r3, #2
 80045d4:	d130      	bne.n	8004638 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80045d6:	687b      	ldr	r3, [r7, #4]
 80045d8:	689b      	ldr	r3, [r3, #8]
 80045da:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80045dc:	69fb      	ldr	r3, [r7, #28]
 80045de:	005b      	lsls	r3, r3, #1
 80045e0:	2203      	movs	r2, #3
 80045e2:	fa02 f303 	lsl.w	r3, r2, r3
 80045e6:	43db      	mvns	r3, r3
 80045e8:	69ba      	ldr	r2, [r7, #24]
 80045ea:	4013      	ands	r3, r2
 80045ec:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80045ee:	683b      	ldr	r3, [r7, #0]
 80045f0:	68da      	ldr	r2, [r3, #12]
 80045f2:	69fb      	ldr	r3, [r7, #28]
 80045f4:	005b      	lsls	r3, r3, #1
 80045f6:	fa02 f303 	lsl.w	r3, r2, r3
 80045fa:	69ba      	ldr	r2, [r7, #24]
 80045fc:	4313      	orrs	r3, r2
 80045fe:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	69ba      	ldr	r2, [r7, #24]
 8004604:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	685b      	ldr	r3, [r3, #4]
 800460a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 800460c:	2201      	movs	r2, #1
 800460e:	69fb      	ldr	r3, [r7, #28]
 8004610:	fa02 f303 	lsl.w	r3, r2, r3
 8004614:	43db      	mvns	r3, r3
 8004616:	69ba      	ldr	r2, [r7, #24]
 8004618:	4013      	ands	r3, r2
 800461a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 800461c:	683b      	ldr	r3, [r7, #0]
 800461e:	685b      	ldr	r3, [r3, #4]
 8004620:	091b      	lsrs	r3, r3, #4
 8004622:	f003 0201 	and.w	r2, r3, #1
 8004626:	69fb      	ldr	r3, [r7, #28]
 8004628:	fa02 f303 	lsl.w	r3, r2, r3
 800462c:	69ba      	ldr	r2, [r7, #24]
 800462e:	4313      	orrs	r3, r2
 8004630:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8004632:	687b      	ldr	r3, [r7, #4]
 8004634:	69ba      	ldr	r2, [r7, #24]
 8004636:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004638:	683b      	ldr	r3, [r7, #0]
 800463a:	685b      	ldr	r3, [r3, #4]
 800463c:	f003 0303 	and.w	r3, r3, #3
 8004640:	2b03      	cmp	r3, #3
 8004642:	d017      	beq.n	8004674 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8004644:	687b      	ldr	r3, [r7, #4]
 8004646:	68db      	ldr	r3, [r3, #12]
 8004648:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 800464a:	69fb      	ldr	r3, [r7, #28]
 800464c:	005b      	lsls	r3, r3, #1
 800464e:	2203      	movs	r2, #3
 8004650:	fa02 f303 	lsl.w	r3, r2, r3
 8004654:	43db      	mvns	r3, r3
 8004656:	69ba      	ldr	r2, [r7, #24]
 8004658:	4013      	ands	r3, r2
 800465a:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 800465c:	683b      	ldr	r3, [r7, #0]
 800465e:	689a      	ldr	r2, [r3, #8]
 8004660:	69fb      	ldr	r3, [r7, #28]
 8004662:	005b      	lsls	r3, r3, #1
 8004664:	fa02 f303 	lsl.w	r3, r2, r3
 8004668:	69ba      	ldr	r2, [r7, #24]
 800466a:	4313      	orrs	r3, r2
 800466c:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	69ba      	ldr	r2, [r7, #24]
 8004672:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8004674:	683b      	ldr	r3, [r7, #0]
 8004676:	685b      	ldr	r3, [r3, #4]
 8004678:	f003 0303 	and.w	r3, r3, #3
 800467c:	2b02      	cmp	r3, #2
 800467e:	d123      	bne.n	80046c8 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004680:	69fb      	ldr	r3, [r7, #28]
 8004682:	08da      	lsrs	r2, r3, #3
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	3208      	adds	r2, #8
 8004688:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 800468c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 800468e:	69fb      	ldr	r3, [r7, #28]
 8004690:	f003 0307 	and.w	r3, r3, #7
 8004694:	009b      	lsls	r3, r3, #2
 8004696:	220f      	movs	r2, #15
 8004698:	fa02 f303 	lsl.w	r3, r2, r3
 800469c:	43db      	mvns	r3, r3
 800469e:	69ba      	ldr	r2, [r7, #24]
 80046a0:	4013      	ands	r3, r2
 80046a2:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 80046a4:	683b      	ldr	r3, [r7, #0]
 80046a6:	691a      	ldr	r2, [r3, #16]
 80046a8:	69fb      	ldr	r3, [r7, #28]
 80046aa:	f003 0307 	and.w	r3, r3, #7
 80046ae:	009b      	lsls	r3, r3, #2
 80046b0:	fa02 f303 	lsl.w	r3, r2, r3
 80046b4:	69ba      	ldr	r2, [r7, #24]
 80046b6:	4313      	orrs	r3, r2
 80046b8:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 80046ba:	69fb      	ldr	r3, [r7, #28]
 80046bc:	08da      	lsrs	r2, r3, #3
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	3208      	adds	r2, #8
 80046c2:	69b9      	ldr	r1, [r7, #24]
 80046c4:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80046c8:	687b      	ldr	r3, [r7, #4]
 80046ca:	681b      	ldr	r3, [r3, #0]
 80046cc:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80046ce:	69fb      	ldr	r3, [r7, #28]
 80046d0:	005b      	lsls	r3, r3, #1
 80046d2:	2203      	movs	r2, #3
 80046d4:	fa02 f303 	lsl.w	r3, r2, r3
 80046d8:	43db      	mvns	r3, r3
 80046da:	69ba      	ldr	r2, [r7, #24]
 80046dc:	4013      	ands	r3, r2
 80046de:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80046e0:	683b      	ldr	r3, [r7, #0]
 80046e2:	685b      	ldr	r3, [r3, #4]
 80046e4:	f003 0203 	and.w	r2, r3, #3
 80046e8:	69fb      	ldr	r3, [r7, #28]
 80046ea:	005b      	lsls	r3, r3, #1
 80046ec:	fa02 f303 	lsl.w	r3, r2, r3
 80046f0:	69ba      	ldr	r2, [r7, #24]
 80046f2:	4313      	orrs	r3, r2
 80046f4:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80046f6:	687b      	ldr	r3, [r7, #4]
 80046f8:	69ba      	ldr	r2, [r7, #24]
 80046fa:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80046fc:	683b      	ldr	r3, [r7, #0]
 80046fe:	685b      	ldr	r3, [r3, #4]
 8004700:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8004704:	2b00      	cmp	r3, #0
 8004706:	f000 80a2 	beq.w	800484e <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 800470a:	2300      	movs	r3, #0
 800470c:	60fb      	str	r3, [r7, #12]
 800470e:	4b57      	ldr	r3, [pc, #348]	; (800486c <HAL_GPIO_Init+0x2e8>)
 8004710:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004712:	4a56      	ldr	r2, [pc, #344]	; (800486c <HAL_GPIO_Init+0x2e8>)
 8004714:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8004718:	6453      	str	r3, [r2, #68]	; 0x44
 800471a:	4b54      	ldr	r3, [pc, #336]	; (800486c <HAL_GPIO_Init+0x2e8>)
 800471c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800471e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8004722:	60fb      	str	r3, [r7, #12]
 8004724:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8004726:	4a52      	ldr	r2, [pc, #328]	; (8004870 <HAL_GPIO_Init+0x2ec>)
 8004728:	69fb      	ldr	r3, [r7, #28]
 800472a:	089b      	lsrs	r3, r3, #2
 800472c:	3302      	adds	r3, #2
 800472e:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8004732:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8004734:	69fb      	ldr	r3, [r7, #28]
 8004736:	f003 0303 	and.w	r3, r3, #3
 800473a:	009b      	lsls	r3, r3, #2
 800473c:	220f      	movs	r2, #15
 800473e:	fa02 f303 	lsl.w	r3, r2, r3
 8004742:	43db      	mvns	r3, r3
 8004744:	69ba      	ldr	r2, [r7, #24]
 8004746:	4013      	ands	r3, r2
 8004748:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 800474a:	687b      	ldr	r3, [r7, #4]
 800474c:	4a49      	ldr	r2, [pc, #292]	; (8004874 <HAL_GPIO_Init+0x2f0>)
 800474e:	4293      	cmp	r3, r2
 8004750:	d019      	beq.n	8004786 <HAL_GPIO_Init+0x202>
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	4a48      	ldr	r2, [pc, #288]	; (8004878 <HAL_GPIO_Init+0x2f4>)
 8004756:	4293      	cmp	r3, r2
 8004758:	d013      	beq.n	8004782 <HAL_GPIO_Init+0x1fe>
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	4a47      	ldr	r2, [pc, #284]	; (800487c <HAL_GPIO_Init+0x2f8>)
 800475e:	4293      	cmp	r3, r2
 8004760:	d00d      	beq.n	800477e <HAL_GPIO_Init+0x1fa>
 8004762:	687b      	ldr	r3, [r7, #4]
 8004764:	4a46      	ldr	r2, [pc, #280]	; (8004880 <HAL_GPIO_Init+0x2fc>)
 8004766:	4293      	cmp	r3, r2
 8004768:	d007      	beq.n	800477a <HAL_GPIO_Init+0x1f6>
 800476a:	687b      	ldr	r3, [r7, #4]
 800476c:	4a45      	ldr	r2, [pc, #276]	; (8004884 <HAL_GPIO_Init+0x300>)
 800476e:	4293      	cmp	r3, r2
 8004770:	d101      	bne.n	8004776 <HAL_GPIO_Init+0x1f2>
 8004772:	2304      	movs	r3, #4
 8004774:	e008      	b.n	8004788 <HAL_GPIO_Init+0x204>
 8004776:	2307      	movs	r3, #7
 8004778:	e006      	b.n	8004788 <HAL_GPIO_Init+0x204>
 800477a:	2303      	movs	r3, #3
 800477c:	e004      	b.n	8004788 <HAL_GPIO_Init+0x204>
 800477e:	2302      	movs	r3, #2
 8004780:	e002      	b.n	8004788 <HAL_GPIO_Init+0x204>
 8004782:	2301      	movs	r3, #1
 8004784:	e000      	b.n	8004788 <HAL_GPIO_Init+0x204>
 8004786:	2300      	movs	r3, #0
 8004788:	69fa      	ldr	r2, [r7, #28]
 800478a:	f002 0203 	and.w	r2, r2, #3
 800478e:	0092      	lsls	r2, r2, #2
 8004790:	4093      	lsls	r3, r2
 8004792:	69ba      	ldr	r2, [r7, #24]
 8004794:	4313      	orrs	r3, r2
 8004796:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004798:	4935      	ldr	r1, [pc, #212]	; (8004870 <HAL_GPIO_Init+0x2ec>)
 800479a:	69fb      	ldr	r3, [r7, #28]
 800479c:	089b      	lsrs	r3, r3, #2
 800479e:	3302      	adds	r3, #2
 80047a0:	69ba      	ldr	r2, [r7, #24]
 80047a2:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 80047a6:	4b38      	ldr	r3, [pc, #224]	; (8004888 <HAL_GPIO_Init+0x304>)
 80047a8:	681b      	ldr	r3, [r3, #0]
 80047aa:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047ac:	693b      	ldr	r3, [r7, #16]
 80047ae:	43db      	mvns	r3, r3
 80047b0:	69ba      	ldr	r2, [r7, #24]
 80047b2:	4013      	ands	r3, r2
 80047b4:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 80047b6:	683b      	ldr	r3, [r7, #0]
 80047b8:	685b      	ldr	r3, [r3, #4]
 80047ba:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 80047be:	2b00      	cmp	r3, #0
 80047c0:	d003      	beq.n	80047ca <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 80047c2:	69ba      	ldr	r2, [r7, #24]
 80047c4:	693b      	ldr	r3, [r7, #16]
 80047c6:	4313      	orrs	r3, r2
 80047c8:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80047ca:	4a2f      	ldr	r2, [pc, #188]	; (8004888 <HAL_GPIO_Init+0x304>)
 80047cc:	69bb      	ldr	r3, [r7, #24]
 80047ce:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80047d0:	4b2d      	ldr	r3, [pc, #180]	; (8004888 <HAL_GPIO_Init+0x304>)
 80047d2:	685b      	ldr	r3, [r3, #4]
 80047d4:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80047d6:	693b      	ldr	r3, [r7, #16]
 80047d8:	43db      	mvns	r3, r3
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	4013      	ands	r3, r2
 80047de:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80047e0:	683b      	ldr	r3, [r7, #0]
 80047e2:	685b      	ldr	r3, [r3, #4]
 80047e4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80047e8:	2b00      	cmp	r3, #0
 80047ea:	d003      	beq.n	80047f4 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80047ec:	69ba      	ldr	r2, [r7, #24]
 80047ee:	693b      	ldr	r3, [r7, #16]
 80047f0:	4313      	orrs	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80047f4:	4a24      	ldr	r2, [pc, #144]	; (8004888 <HAL_GPIO_Init+0x304>)
 80047f6:	69bb      	ldr	r3, [r7, #24]
 80047f8:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80047fa:	4b23      	ldr	r3, [pc, #140]	; (8004888 <HAL_GPIO_Init+0x304>)
 80047fc:	689b      	ldr	r3, [r3, #8]
 80047fe:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004800:	693b      	ldr	r3, [r7, #16]
 8004802:	43db      	mvns	r3, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4013      	ands	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 800480a:	683b      	ldr	r3, [r7, #0]
 800480c:	685b      	ldr	r3, [r3, #4]
 800480e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8004812:	2b00      	cmp	r3, #0
 8004814:	d003      	beq.n	800481e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8004816:	69ba      	ldr	r2, [r7, #24]
 8004818:	693b      	ldr	r3, [r7, #16]
 800481a:	4313      	orrs	r3, r2
 800481c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800481e:	4a1a      	ldr	r2, [pc, #104]	; (8004888 <HAL_GPIO_Init+0x304>)
 8004820:	69bb      	ldr	r3, [r7, #24]
 8004822:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8004824:	4b18      	ldr	r3, [pc, #96]	; (8004888 <HAL_GPIO_Init+0x304>)
 8004826:	68db      	ldr	r3, [r3, #12]
 8004828:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800482a:	693b      	ldr	r3, [r7, #16]
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	685b      	ldr	r3, [r3, #4]
 8004838:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800483c:	2b00      	cmp	r3, #0
 800483e:	d003      	beq.n	8004848 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	693b      	ldr	r3, [r7, #16]
 8004844:	4313      	orrs	r3, r2
 8004846:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004848:	4a0f      	ldr	r2, [pc, #60]	; (8004888 <HAL_GPIO_Init+0x304>)
 800484a:	69bb      	ldr	r3, [r7, #24]
 800484c:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 800484e:	69fb      	ldr	r3, [r7, #28]
 8004850:	3301      	adds	r3, #1
 8004852:	61fb      	str	r3, [r7, #28]
 8004854:	69fb      	ldr	r3, [r7, #28]
 8004856:	2b0f      	cmp	r3, #15
 8004858:	f67f aea2 	bls.w	80045a0 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 800485c:	bf00      	nop
 800485e:	bf00      	nop
 8004860:	3724      	adds	r7, #36	; 0x24
 8004862:	46bd      	mov	sp, r7
 8004864:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004868:	4770      	bx	lr
 800486a:	bf00      	nop
 800486c:	40023800 	.word	0x40023800
 8004870:	40013800 	.word	0x40013800
 8004874:	40020000 	.word	0x40020000
 8004878:	40020400 	.word	0x40020400
 800487c:	40020800 	.word	0x40020800
 8004880:	40020c00 	.word	0x40020c00
 8004884:	40021000 	.word	0x40021000
 8004888:	40013c00 	.word	0x40013c00

0800488c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 800488c:	b480      	push	{r7}
 800488e:	b083      	sub	sp, #12
 8004890:	af00      	add	r7, sp, #0
 8004892:	6078      	str	r0, [r7, #4]
 8004894:	460b      	mov	r3, r1
 8004896:	807b      	strh	r3, [r7, #2]
 8004898:	4613      	mov	r3, r2
 800489a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 800489c:	787b      	ldrb	r3, [r7, #1]
 800489e:	2b00      	cmp	r3, #0
 80048a0:	d003      	beq.n	80048aa <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 80048a2:	887a      	ldrh	r2, [r7, #2]
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 80048a8:	e003      	b.n	80048b2 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 80048aa:	887b      	ldrh	r3, [r7, #2]
 80048ac:	041a      	lsls	r2, r3, #16
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	619a      	str	r2, [r3, #24]
}
 80048b2:	bf00      	nop
 80048b4:	370c      	adds	r7, #12
 80048b6:	46bd      	mov	sp, r7
 80048b8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80048bc:	4770      	bx	lr
	...

080048c0 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b082      	sub	sp, #8
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	4603      	mov	r3, r0
 80048c8:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 80048ca:	4b08      	ldr	r3, [pc, #32]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048cc:	695a      	ldr	r2, [r3, #20]
 80048ce:	88fb      	ldrh	r3, [r7, #6]
 80048d0:	4013      	ands	r3, r2
 80048d2:	2b00      	cmp	r3, #0
 80048d4:	d006      	beq.n	80048e4 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 80048d6:	4a05      	ldr	r2, [pc, #20]	; (80048ec <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 80048d8:	88fb      	ldrh	r3, [r7, #6]
 80048da:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 80048dc:	88fb      	ldrh	r3, [r7, #6]
 80048de:	4618      	mov	r0, r3
 80048e0:	f7fd fd8c 	bl	80023fc <HAL_GPIO_EXTI_Callback>
  }
}
 80048e4:	bf00      	nop
 80048e6:	3708      	adds	r7, #8
 80048e8:	46bd      	mov	sp, r7
 80048ea:	bd80      	pop	{r7, pc}
 80048ec:	40013c00 	.word	0x40013c00

080048f0 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 80048f0:	b580      	push	{r7, lr}
 80048f2:	b084      	sub	sp, #16
 80048f4:	af00      	add	r7, sp, #0
 80048f6:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	2b00      	cmp	r3, #0
 80048fc:	d101      	bne.n	8004902 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 80048fe:	2301      	movs	r3, #1
 8004900:	e12b      	b.n	8004b5a <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004908:	b2db      	uxtb	r3, r3
 800490a:	2b00      	cmp	r3, #0
 800490c:	d106      	bne.n	800491c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	2200      	movs	r2, #0
 8004912:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004916:	6878      	ldr	r0, [r7, #4]
 8004918:	f7fe fd4e 	bl	80033b8 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 800491c:	687b      	ldr	r3, [r7, #4]
 800491e:	2224      	movs	r2, #36	; 0x24
 8004920:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004924:	687b      	ldr	r3, [r7, #4]
 8004926:	681b      	ldr	r3, [r3, #0]
 8004928:	681a      	ldr	r2, [r3, #0]
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	681b      	ldr	r3, [r3, #0]
 800492e:	f022 0201 	bic.w	r2, r2, #1
 8004932:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	681b      	ldr	r3, [r3, #0]
 8004938:	681a      	ldr	r2, [r3, #0]
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	681b      	ldr	r3, [r3, #0]
 800493e:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004942:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004944:	687b      	ldr	r3, [r7, #4]
 8004946:	681b      	ldr	r3, [r3, #0]
 8004948:	681a      	ldr	r2, [r3, #0]
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	681b      	ldr	r3, [r3, #0]
 800494e:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004952:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004954:	f002 fb66 	bl	8007024 <HAL_RCC_GetPCLK1Freq>
 8004958:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 800495a:	687b      	ldr	r3, [r7, #4]
 800495c:	685b      	ldr	r3, [r3, #4]
 800495e:	4a81      	ldr	r2, [pc, #516]	; (8004b64 <HAL_I2C_Init+0x274>)
 8004960:	4293      	cmp	r3, r2
 8004962:	d807      	bhi.n	8004974 <HAL_I2C_Init+0x84>
 8004964:	68fb      	ldr	r3, [r7, #12]
 8004966:	4a80      	ldr	r2, [pc, #512]	; (8004b68 <HAL_I2C_Init+0x278>)
 8004968:	4293      	cmp	r3, r2
 800496a:	bf94      	ite	ls
 800496c:	2301      	movls	r3, #1
 800496e:	2300      	movhi	r3, #0
 8004970:	b2db      	uxtb	r3, r3
 8004972:	e006      	b.n	8004982 <HAL_I2C_Init+0x92>
 8004974:	68fb      	ldr	r3, [r7, #12]
 8004976:	4a7d      	ldr	r2, [pc, #500]	; (8004b6c <HAL_I2C_Init+0x27c>)
 8004978:	4293      	cmp	r3, r2
 800497a:	bf94      	ite	ls
 800497c:	2301      	movls	r3, #1
 800497e:	2300      	movhi	r3, #0
 8004980:	b2db      	uxtb	r3, r3
 8004982:	2b00      	cmp	r3, #0
 8004984:	d001      	beq.n	800498a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004986:	2301      	movs	r3, #1
 8004988:	e0e7      	b.n	8004b5a <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800498a:	68fb      	ldr	r3, [r7, #12]
 800498c:	4a78      	ldr	r2, [pc, #480]	; (8004b70 <HAL_I2C_Init+0x280>)
 800498e:	fba2 2303 	umull	r2, r3, r2, r3
 8004992:	0c9b      	lsrs	r3, r3, #18
 8004994:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	681b      	ldr	r3, [r3, #0]
 800499a:	685b      	ldr	r3, [r3, #4]
 800499c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	681b      	ldr	r3, [r3, #0]
 80049a4:	68ba      	ldr	r2, [r7, #8]
 80049a6:	430a      	orrs	r2, r1
 80049a8:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	681b      	ldr	r3, [r3, #0]
 80049ae:	6a1b      	ldr	r3, [r3, #32]
 80049b0:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 80049b4:	687b      	ldr	r3, [r7, #4]
 80049b6:	685b      	ldr	r3, [r3, #4]
 80049b8:	4a6a      	ldr	r2, [pc, #424]	; (8004b64 <HAL_I2C_Init+0x274>)
 80049ba:	4293      	cmp	r3, r2
 80049bc:	d802      	bhi.n	80049c4 <HAL_I2C_Init+0xd4>
 80049be:	68bb      	ldr	r3, [r7, #8]
 80049c0:	3301      	adds	r3, #1
 80049c2:	e009      	b.n	80049d8 <HAL_I2C_Init+0xe8>
 80049c4:	68bb      	ldr	r3, [r7, #8]
 80049c6:	f44f 7296 	mov.w	r2, #300	; 0x12c
 80049ca:	fb02 f303 	mul.w	r3, r2, r3
 80049ce:	4a69      	ldr	r2, [pc, #420]	; (8004b74 <HAL_I2C_Init+0x284>)
 80049d0:	fba2 2303 	umull	r2, r3, r2, r3
 80049d4:	099b      	lsrs	r3, r3, #6
 80049d6:	3301      	adds	r3, #1
 80049d8:	687a      	ldr	r2, [r7, #4]
 80049da:	6812      	ldr	r2, [r2, #0]
 80049dc:	430b      	orrs	r3, r1
 80049de:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 80049e0:	687b      	ldr	r3, [r7, #4]
 80049e2:	681b      	ldr	r3, [r3, #0]
 80049e4:	69db      	ldr	r3, [r3, #28]
 80049e6:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 80049ea:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 80049ee:	687b      	ldr	r3, [r7, #4]
 80049f0:	685b      	ldr	r3, [r3, #4]
 80049f2:	495c      	ldr	r1, [pc, #368]	; (8004b64 <HAL_I2C_Init+0x274>)
 80049f4:	428b      	cmp	r3, r1
 80049f6:	d819      	bhi.n	8004a2c <HAL_I2C_Init+0x13c>
 80049f8:	68fb      	ldr	r3, [r7, #12]
 80049fa:	1e59      	subs	r1, r3, #1
 80049fc:	687b      	ldr	r3, [r7, #4]
 80049fe:	685b      	ldr	r3, [r3, #4]
 8004a00:	005b      	lsls	r3, r3, #1
 8004a02:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a06:	1c59      	adds	r1, r3, #1
 8004a08:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004a0c:	400b      	ands	r3, r1
 8004a0e:	2b00      	cmp	r3, #0
 8004a10:	d00a      	beq.n	8004a28 <HAL_I2C_Init+0x138>
 8004a12:	68fb      	ldr	r3, [r7, #12]
 8004a14:	1e59      	subs	r1, r3, #1
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	685b      	ldr	r3, [r3, #4]
 8004a1a:	005b      	lsls	r3, r3, #1
 8004a1c:	fbb1 f3f3 	udiv	r3, r1, r3
 8004a20:	3301      	adds	r3, #1
 8004a22:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a26:	e051      	b.n	8004acc <HAL_I2C_Init+0x1dc>
 8004a28:	2304      	movs	r3, #4
 8004a2a:	e04f      	b.n	8004acc <HAL_I2C_Init+0x1dc>
 8004a2c:	687b      	ldr	r3, [r7, #4]
 8004a2e:	689b      	ldr	r3, [r3, #8]
 8004a30:	2b00      	cmp	r3, #0
 8004a32:	d111      	bne.n	8004a58 <HAL_I2C_Init+0x168>
 8004a34:	68fb      	ldr	r3, [r7, #12]
 8004a36:	1e58      	subs	r0, r3, #1
 8004a38:	687b      	ldr	r3, [r7, #4]
 8004a3a:	6859      	ldr	r1, [r3, #4]
 8004a3c:	460b      	mov	r3, r1
 8004a3e:	005b      	lsls	r3, r3, #1
 8004a40:	440b      	add	r3, r1
 8004a42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a46:	3301      	adds	r3, #1
 8004a48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a4c:	2b00      	cmp	r3, #0
 8004a4e:	bf0c      	ite	eq
 8004a50:	2301      	moveq	r3, #1
 8004a52:	2300      	movne	r3, #0
 8004a54:	b2db      	uxtb	r3, r3
 8004a56:	e012      	b.n	8004a7e <HAL_I2C_Init+0x18e>
 8004a58:	68fb      	ldr	r3, [r7, #12]
 8004a5a:	1e58      	subs	r0, r3, #1
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6859      	ldr	r1, [r3, #4]
 8004a60:	460b      	mov	r3, r1
 8004a62:	009b      	lsls	r3, r3, #2
 8004a64:	440b      	add	r3, r1
 8004a66:	0099      	lsls	r1, r3, #2
 8004a68:	440b      	add	r3, r1
 8004a6a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004a6e:	3301      	adds	r3, #1
 8004a70:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004a74:	2b00      	cmp	r3, #0
 8004a76:	bf0c      	ite	eq
 8004a78:	2301      	moveq	r3, #1
 8004a7a:	2300      	movne	r3, #0
 8004a7c:	b2db      	uxtb	r3, r3
 8004a7e:	2b00      	cmp	r3, #0
 8004a80:	d001      	beq.n	8004a86 <HAL_I2C_Init+0x196>
 8004a82:	2301      	movs	r3, #1
 8004a84:	e022      	b.n	8004acc <HAL_I2C_Init+0x1dc>
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	689b      	ldr	r3, [r3, #8]
 8004a8a:	2b00      	cmp	r3, #0
 8004a8c:	d10e      	bne.n	8004aac <HAL_I2C_Init+0x1bc>
 8004a8e:	68fb      	ldr	r3, [r7, #12]
 8004a90:	1e58      	subs	r0, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	6859      	ldr	r1, [r3, #4]
 8004a96:	460b      	mov	r3, r1
 8004a98:	005b      	lsls	r3, r3, #1
 8004a9a:	440b      	add	r3, r1
 8004a9c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004aa0:	3301      	adds	r3, #1
 8004aa2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004aa6:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004aaa:	e00f      	b.n	8004acc <HAL_I2C_Init+0x1dc>
 8004aac:	68fb      	ldr	r3, [r7, #12]
 8004aae:	1e58      	subs	r0, r3, #1
 8004ab0:	687b      	ldr	r3, [r7, #4]
 8004ab2:	6859      	ldr	r1, [r3, #4]
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	009b      	lsls	r3, r3, #2
 8004ab8:	440b      	add	r3, r1
 8004aba:	0099      	lsls	r1, r3, #2
 8004abc:	440b      	add	r3, r1
 8004abe:	fbb0 f3f3 	udiv	r3, r0, r3
 8004ac2:	3301      	adds	r3, #1
 8004ac4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ac8:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004acc:	6879      	ldr	r1, [r7, #4]
 8004ace:	6809      	ldr	r1, [r1, #0]
 8004ad0:	4313      	orrs	r3, r2
 8004ad2:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004ad4:	687b      	ldr	r3, [r7, #4]
 8004ad6:	681b      	ldr	r3, [r3, #0]
 8004ad8:	681b      	ldr	r3, [r3, #0]
 8004ada:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004ade:	687b      	ldr	r3, [r7, #4]
 8004ae0:	69da      	ldr	r2, [r3, #28]
 8004ae2:	687b      	ldr	r3, [r7, #4]
 8004ae4:	6a1b      	ldr	r3, [r3, #32]
 8004ae6:	431a      	orrs	r2, r3
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	681b      	ldr	r3, [r3, #0]
 8004aec:	430a      	orrs	r2, r1
 8004aee:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004af0:	687b      	ldr	r3, [r7, #4]
 8004af2:	681b      	ldr	r3, [r3, #0]
 8004af4:	689b      	ldr	r3, [r3, #8]
 8004af6:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004afa:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004afe:	687a      	ldr	r2, [r7, #4]
 8004b00:	6911      	ldr	r1, [r2, #16]
 8004b02:	687a      	ldr	r2, [r7, #4]
 8004b04:	68d2      	ldr	r2, [r2, #12]
 8004b06:	4311      	orrs	r1, r2
 8004b08:	687a      	ldr	r2, [r7, #4]
 8004b0a:	6812      	ldr	r2, [r2, #0]
 8004b0c:	430b      	orrs	r3, r1
 8004b0e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004b10:	687b      	ldr	r3, [r7, #4]
 8004b12:	681b      	ldr	r3, [r3, #0]
 8004b14:	68db      	ldr	r3, [r3, #12]
 8004b16:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004b1a:	687b      	ldr	r3, [r7, #4]
 8004b1c:	695a      	ldr	r2, [r3, #20]
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	699b      	ldr	r3, [r3, #24]
 8004b22:	431a      	orrs	r2, r3
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	430a      	orrs	r2, r1
 8004b2a:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004b2c:	687b      	ldr	r3, [r7, #4]
 8004b2e:	681b      	ldr	r3, [r3, #0]
 8004b30:	681a      	ldr	r2, [r3, #0]
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	681b      	ldr	r3, [r3, #0]
 8004b36:	f042 0201 	orr.w	r2, r2, #1
 8004b3a:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004b3c:	687b      	ldr	r3, [r7, #4]
 8004b3e:	2200      	movs	r2, #0
 8004b40:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004b42:	687b      	ldr	r3, [r7, #4]
 8004b44:	2220      	movs	r2, #32
 8004b46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004b4a:	687b      	ldr	r3, [r7, #4]
 8004b4c:	2200      	movs	r2, #0
 8004b4e:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b50:	687b      	ldr	r3, [r7, #4]
 8004b52:	2200      	movs	r2, #0
 8004b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004b58:	2300      	movs	r3, #0
}
 8004b5a:	4618      	mov	r0, r3
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}
 8004b62:	bf00      	nop
 8004b64:	000186a0 	.word	0x000186a0
 8004b68:	001e847f 	.word	0x001e847f
 8004b6c:	003d08ff 	.word	0x003d08ff
 8004b70:	431bde83 	.word	0x431bde83
 8004b74:	10624dd3 	.word	0x10624dd3

08004b78 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004b78:	b480      	push	{r7}
 8004b7a:	b087      	sub	sp, #28
 8004b7c:	af00      	add	r7, sp, #0
 8004b7e:	60f8      	str	r0, [r7, #12]
 8004b80:	607a      	str	r2, [r7, #4]
 8004b82:	461a      	mov	r2, r3
 8004b84:	460b      	mov	r3, r1
 8004b86:	817b      	strh	r3, [r7, #10]
 8004b88:	4613      	mov	r3, r2
 8004b8a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004b8c:	2300      	movs	r3, #0
 8004b8e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004b90:	68fb      	ldr	r3, [r7, #12]
 8004b92:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b96:	b2db      	uxtb	r3, r3
 8004b98:	2b20      	cmp	r3, #32
 8004b9a:	f040 8085 	bne.w	8004ca8 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004b9e:	4b46      	ldr	r3, [pc, #280]	; (8004cb8 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004ba0:	681b      	ldr	r3, [r3, #0]
 8004ba2:	08db      	lsrs	r3, r3, #3
 8004ba4:	4a45      	ldr	r2, [pc, #276]	; (8004cbc <HAL_I2C_Master_Transmit_IT+0x144>)
 8004ba6:	fba2 2303 	umull	r2, r3, r2, r3
 8004baa:	0a1a      	lsrs	r2, r3, #8
 8004bac:	4613      	mov	r3, r2
 8004bae:	009b      	lsls	r3, r3, #2
 8004bb0:	4413      	add	r3, r2
 8004bb2:	009a      	lsls	r2, r3, #2
 8004bb4:	4413      	add	r3, r2
 8004bb6:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004bb8:	697b      	ldr	r3, [r7, #20]
 8004bba:	3b01      	subs	r3, #1
 8004bbc:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004bbe:	697b      	ldr	r3, [r7, #20]
 8004bc0:	2b00      	cmp	r3, #0
 8004bc2:	d116      	bne.n	8004bf2 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004bc4:	68fb      	ldr	r3, [r7, #12]
 8004bc6:	2200      	movs	r2, #0
 8004bc8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004bca:	68fb      	ldr	r3, [r7, #12]
 8004bcc:	2220      	movs	r2, #32
 8004bce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2200      	movs	r2, #0
 8004bd6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004bda:	68fb      	ldr	r3, [r7, #12]
 8004bdc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004bde:	f043 0220 	orr.w	r2, r3, #32
 8004be2:	68fb      	ldr	r3, [r7, #12]
 8004be4:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004be6:	68fb      	ldr	r3, [r7, #12]
 8004be8:	2200      	movs	r2, #0
 8004bea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004bee:	2301      	movs	r3, #1
 8004bf0:	e05b      	b.n	8004caa <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004bf2:	68fb      	ldr	r3, [r7, #12]
 8004bf4:	681b      	ldr	r3, [r3, #0]
 8004bf6:	699b      	ldr	r3, [r3, #24]
 8004bf8:	f003 0302 	and.w	r3, r3, #2
 8004bfc:	2b02      	cmp	r3, #2
 8004bfe:	d0db      	beq.n	8004bb8 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004c00:	68fb      	ldr	r3, [r7, #12]
 8004c02:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004c06:	2b01      	cmp	r3, #1
 8004c08:	d101      	bne.n	8004c0e <HAL_I2C_Master_Transmit_IT+0x96>
 8004c0a:	2302      	movs	r3, #2
 8004c0c:	e04d      	b.n	8004caa <HAL_I2C_Master_Transmit_IT+0x132>
 8004c0e:	68fb      	ldr	r3, [r7, #12]
 8004c10:	2201      	movs	r2, #1
 8004c12:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004c16:	68fb      	ldr	r3, [r7, #12]
 8004c18:	681b      	ldr	r3, [r3, #0]
 8004c1a:	681b      	ldr	r3, [r3, #0]
 8004c1c:	f003 0301 	and.w	r3, r3, #1
 8004c20:	2b01      	cmp	r3, #1
 8004c22:	d007      	beq.n	8004c34 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004c24:	68fb      	ldr	r3, [r7, #12]
 8004c26:	681b      	ldr	r3, [r3, #0]
 8004c28:	681a      	ldr	r2, [r3, #0]
 8004c2a:	68fb      	ldr	r3, [r7, #12]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	f042 0201 	orr.w	r2, r2, #1
 8004c32:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004c34:	68fb      	ldr	r3, [r7, #12]
 8004c36:	681b      	ldr	r3, [r3, #0]
 8004c38:	681a      	ldr	r2, [r3, #0]
 8004c3a:	68fb      	ldr	r3, [r7, #12]
 8004c3c:	681b      	ldr	r3, [r3, #0]
 8004c3e:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c42:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 8004c44:	68fb      	ldr	r3, [r7, #12]
 8004c46:	2221      	movs	r2, #33	; 0x21
 8004c48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004c4c:	68fb      	ldr	r3, [r7, #12]
 8004c4e:	2210      	movs	r2, #16
 8004c50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004c54:	68fb      	ldr	r3, [r7, #12]
 8004c56:	2200      	movs	r2, #0
 8004c58:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004c5a:	68fb      	ldr	r3, [r7, #12]
 8004c5c:	687a      	ldr	r2, [r7, #4]
 8004c5e:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004c60:	68fb      	ldr	r3, [r7, #12]
 8004c62:	893a      	ldrh	r2, [r7, #8]
 8004c64:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c6a:	b29a      	uxth	r2, r3
 8004c6c:	68fb      	ldr	r3, [r7, #12]
 8004c6e:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004c70:	68fb      	ldr	r3, [r7, #12]
 8004c72:	4a13      	ldr	r2, [pc, #76]	; (8004cc0 <HAL_I2C_Master_Transmit_IT+0x148>)
 8004c74:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004c76:	897a      	ldrh	r2, [r7, #10]
 8004c78:	68fb      	ldr	r3, [r7, #12]
 8004c7a:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004c7c:	68fb      	ldr	r3, [r7, #12]
 8004c7e:	681b      	ldr	r3, [r3, #0]
 8004c80:	681a      	ldr	r2, [r3, #0]
 8004c82:	68fb      	ldr	r3, [r7, #12]
 8004c84:	681b      	ldr	r3, [r3, #0]
 8004c86:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004c8a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004c8c:	68fb      	ldr	r3, [r7, #12]
 8004c8e:	2200      	movs	r2, #0
 8004c90:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c94:	68fb      	ldr	r3, [r7, #12]
 8004c96:	681b      	ldr	r3, [r3, #0]
 8004c98:	685a      	ldr	r2, [r3, #4]
 8004c9a:	68fb      	ldr	r3, [r7, #12]
 8004c9c:	681b      	ldr	r3, [r3, #0]
 8004c9e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004ca2:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004ca4:	2300      	movs	r3, #0
 8004ca6:	e000      	b.n	8004caa <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004ca8:	2302      	movs	r3, #2
  }
}
 8004caa:	4618      	mov	r0, r3
 8004cac:	371c      	adds	r7, #28
 8004cae:	46bd      	mov	sp, r7
 8004cb0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004cb4:	4770      	bx	lr
 8004cb6:	bf00      	nop
 8004cb8:	2000001c 	.word	0x2000001c
 8004cbc:	14f8b589 	.word	0x14f8b589
 8004cc0:	ffff0000 	.word	0xffff0000

08004cc4 <HAL_I2C_Master_Receive_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Receive_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 8004cc4:	b480      	push	{r7}
 8004cc6:	b087      	sub	sp, #28
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	60f8      	str	r0, [r7, #12]
 8004ccc:	607a      	str	r2, [r7, #4]
 8004cce:	461a      	mov	r2, r3
 8004cd0:	460b      	mov	r3, r1
 8004cd2:	817b      	strh	r3, [r7, #10]
 8004cd4:	4613      	mov	r3, r2
 8004cd6:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 8004cd8:	2300      	movs	r3, #0
 8004cda:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004cdc:	68fb      	ldr	r3, [r7, #12]
 8004cde:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ce2:	b2db      	uxtb	r3, r3
 8004ce4:	2b20      	cmp	r3, #32
 8004ce6:	f040 808d 	bne.w	8004e04 <HAL_I2C_Master_Receive_IT+0x140>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 8004cea:	4b4a      	ldr	r3, [pc, #296]	; (8004e14 <HAL_I2C_Master_Receive_IT+0x150>)
 8004cec:	681b      	ldr	r3, [r3, #0]
 8004cee:	08db      	lsrs	r3, r3, #3
 8004cf0:	4a49      	ldr	r2, [pc, #292]	; (8004e18 <HAL_I2C_Master_Receive_IT+0x154>)
 8004cf2:	fba2 2303 	umull	r2, r3, r2, r3
 8004cf6:	0a1a      	lsrs	r2, r3, #8
 8004cf8:	4613      	mov	r3, r2
 8004cfa:	009b      	lsls	r3, r3, #2
 8004cfc:	4413      	add	r3, r2
 8004cfe:	009a      	lsls	r2, r3, #2
 8004d00:	4413      	add	r3, r2
 8004d02:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004d04:	697b      	ldr	r3, [r7, #20]
 8004d06:	3b01      	subs	r3, #1
 8004d08:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 8004d0a:	697b      	ldr	r3, [r7, #20]
 8004d0c:	2b00      	cmp	r3, #0
 8004d0e:	d116      	bne.n	8004d3e <HAL_I2C_Master_Receive_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004d10:	68fb      	ldr	r3, [r7, #12]
 8004d12:	2200      	movs	r2, #0
 8004d14:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 8004d16:	68fb      	ldr	r3, [r7, #12]
 8004d18:	2220      	movs	r2, #32
 8004d1a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004d1e:	68fb      	ldr	r3, [r7, #12]
 8004d20:	2200      	movs	r2, #0
 8004d22:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004d26:	68fb      	ldr	r3, [r7, #12]
 8004d28:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004d2a:	f043 0220 	orr.w	r2, r3, #32
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004d32:	68fb      	ldr	r3, [r7, #12]
 8004d34:	2200      	movs	r2, #0
 8004d36:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 8004d3a:	2301      	movs	r3, #1
 8004d3c:	e063      	b.n	8004e06 <HAL_I2C_Master_Receive_IT+0x142>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004d3e:	68fb      	ldr	r3, [r7, #12]
 8004d40:	681b      	ldr	r3, [r3, #0]
 8004d42:	699b      	ldr	r3, [r3, #24]
 8004d44:	f003 0302 	and.w	r3, r3, #2
 8004d48:	2b02      	cmp	r3, #2
 8004d4a:	d0db      	beq.n	8004d04 <HAL_I2C_Master_Receive_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004d4c:	68fb      	ldr	r3, [r7, #12]
 8004d4e:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004d52:	2b01      	cmp	r3, #1
 8004d54:	d101      	bne.n	8004d5a <HAL_I2C_Master_Receive_IT+0x96>
 8004d56:	2302      	movs	r3, #2
 8004d58:	e055      	b.n	8004e06 <HAL_I2C_Master_Receive_IT+0x142>
 8004d5a:	68fb      	ldr	r3, [r7, #12]
 8004d5c:	2201      	movs	r2, #1
 8004d5e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004d62:	68fb      	ldr	r3, [r7, #12]
 8004d64:	681b      	ldr	r3, [r3, #0]
 8004d66:	681b      	ldr	r3, [r3, #0]
 8004d68:	f003 0301 	and.w	r3, r3, #1
 8004d6c:	2b01      	cmp	r3, #1
 8004d6e:	d007      	beq.n	8004d80 <HAL_I2C_Master_Receive_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 8004d70:	68fb      	ldr	r3, [r7, #12]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	681a      	ldr	r2, [r3, #0]
 8004d76:	68fb      	ldr	r3, [r7, #12]
 8004d78:	681b      	ldr	r3, [r3, #0]
 8004d7a:	f042 0201 	orr.w	r2, r2, #1
 8004d7e:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8004d80:	68fb      	ldr	r3, [r7, #12]
 8004d82:	681b      	ldr	r3, [r3, #0]
 8004d84:	681a      	ldr	r2, [r3, #0]
 8004d86:	68fb      	ldr	r3, [r7, #12]
 8004d88:	681b      	ldr	r3, [r3, #0]
 8004d8a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004d8e:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_RX;
 8004d90:	68fb      	ldr	r3, [r7, #12]
 8004d92:	2222      	movs	r2, #34	; 0x22
 8004d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 8004d98:	68fb      	ldr	r3, [r7, #12]
 8004d9a:	2210      	movs	r2, #16
 8004d9c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2200      	movs	r2, #0
 8004da4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 8004da6:	68fb      	ldr	r3, [r7, #12]
 8004da8:	687a      	ldr	r2, [r7, #4]
 8004daa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 8004dac:	68fb      	ldr	r3, [r7, #12]
 8004dae:	893a      	ldrh	r2, [r7, #8]
 8004db0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 8004db2:	68fb      	ldr	r3, [r7, #12]
 8004db4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004db6:	b29a      	uxth	r2, r3
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004dbc:	68fb      	ldr	r3, [r7, #12]
 8004dbe:	4a17      	ldr	r2, [pc, #92]	; (8004e1c <HAL_I2C_Master_Receive_IT+0x158>)
 8004dc0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 8004dc2:	897a      	ldrh	r2, [r7, #10]
 8004dc4:	68fb      	ldr	r3, [r7, #12]
 8004dc6:	645a      	str	r2, [r3, #68]	; 0x44

    /* Enable Acknowledge */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004dc8:	68fb      	ldr	r3, [r7, #12]
 8004dca:	681b      	ldr	r3, [r3, #0]
 8004dcc:	681a      	ldr	r2, [r3, #0]
 8004dce:	68fb      	ldr	r3, [r7, #12]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004dd6:	601a      	str	r2, [r3, #0]

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004dd8:	68fb      	ldr	r3, [r7, #12]
 8004dda:	681b      	ldr	r3, [r3, #0]
 8004ddc:	681a      	ldr	r2, [r3, #0]
 8004dde:	68fb      	ldr	r3, [r7, #12]
 8004de0:	681b      	ldr	r3, [r3, #0]
 8004de2:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004de6:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8004de8:	68fb      	ldr	r3, [r7, #12]
 8004dea:	2200      	movs	r2, #0
 8004dec:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    /* Note : The I2C interrupts must be enabled after unlocking current process
    to avoid the risk of I2C interrupt handle execution before current
    process unlock */

    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004df0:	68fb      	ldr	r3, [r7, #12]
 8004df2:	681b      	ldr	r3, [r3, #0]
 8004df4:	685a      	ldr	r2, [r3, #4]
 8004df6:	68fb      	ldr	r3, [r7, #12]
 8004df8:	681b      	ldr	r3, [r3, #0]
 8004dfa:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004dfe:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004e00:	2300      	movs	r3, #0
 8004e02:	e000      	b.n	8004e06 <HAL_I2C_Master_Receive_IT+0x142>
  }
  else
  {
    return HAL_BUSY;
 8004e04:	2302      	movs	r3, #2
  }
}
 8004e06:	4618      	mov	r0, r3
 8004e08:	371c      	adds	r7, #28
 8004e0a:	46bd      	mov	sp, r7
 8004e0c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004e10:	4770      	bx	lr
 8004e12:	bf00      	nop
 8004e14:	2000001c 	.word	0x2000001c
 8004e18:	14f8b589 	.word	0x14f8b589
 8004e1c:	ffff0000 	.word	0xffff0000

08004e20 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004e20:	b580      	push	{r7, lr}
 8004e22:	b088      	sub	sp, #32
 8004e24:	af00      	add	r7, sp, #0
 8004e26:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004e28:	2300      	movs	r3, #0
 8004e2a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004e2c:	687b      	ldr	r3, [r7, #4]
 8004e2e:	681b      	ldr	r3, [r3, #0]
 8004e30:	685b      	ldr	r3, [r3, #4]
 8004e32:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004e34:	687b      	ldr	r3, [r7, #4]
 8004e36:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004e38:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004e3a:	687b      	ldr	r3, [r7, #4]
 8004e3c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e40:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e42:	687b      	ldr	r3, [r7, #4]
 8004e44:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e48:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004e4a:	7bfb      	ldrb	r3, [r7, #15]
 8004e4c:	2b10      	cmp	r3, #16
 8004e4e:	d003      	beq.n	8004e58 <HAL_I2C_EV_IRQHandler+0x38>
 8004e50:	7bfb      	ldrb	r3, [r7, #15]
 8004e52:	2b40      	cmp	r3, #64	; 0x40
 8004e54:	f040 80bd 	bne.w	8004fd2 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004e58:	687b      	ldr	r3, [r7, #4]
 8004e5a:	681b      	ldr	r3, [r3, #0]
 8004e5c:	699b      	ldr	r3, [r3, #24]
 8004e5e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004e60:	687b      	ldr	r3, [r7, #4]
 8004e62:	681b      	ldr	r3, [r3, #0]
 8004e64:	695b      	ldr	r3, [r3, #20]
 8004e66:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004e68:	69fb      	ldr	r3, [r7, #28]
 8004e6a:	f003 0301 	and.w	r3, r3, #1
 8004e6e:	2b00      	cmp	r3, #0
 8004e70:	d10d      	bne.n	8004e8e <HAL_I2C_EV_IRQHandler+0x6e>
 8004e72:	693b      	ldr	r3, [r7, #16]
 8004e74:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004e78:	d003      	beq.n	8004e82 <HAL_I2C_EV_IRQHandler+0x62>
 8004e7a:	693b      	ldr	r3, [r7, #16]
 8004e7c:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004e80:	d101      	bne.n	8004e86 <HAL_I2C_EV_IRQHandler+0x66>
 8004e82:	2301      	movs	r3, #1
 8004e84:	e000      	b.n	8004e88 <HAL_I2C_EV_IRQHandler+0x68>
 8004e86:	2300      	movs	r3, #0
 8004e88:	2b01      	cmp	r3, #1
 8004e8a:	f000 812e 	beq.w	80050ea <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e8e:	69fb      	ldr	r3, [r7, #28]
 8004e90:	f003 0301 	and.w	r3, r3, #1
 8004e94:	2b00      	cmp	r3, #0
 8004e96:	d00c      	beq.n	8004eb2 <HAL_I2C_EV_IRQHandler+0x92>
 8004e98:	697b      	ldr	r3, [r7, #20]
 8004e9a:	0a5b      	lsrs	r3, r3, #9
 8004e9c:	f003 0301 	and.w	r3, r3, #1
 8004ea0:	2b00      	cmp	r3, #0
 8004ea2:	d006      	beq.n	8004eb2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004ea4:	6878      	ldr	r0, [r7, #4]
 8004ea6:	f001 fc55 	bl	8006754 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004eaa:	6878      	ldr	r0, [r7, #4]
 8004eac:	f000 fd62 	bl	8005974 <I2C_Master_SB>
 8004eb0:	e08e      	b.n	8004fd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004eb2:	69fb      	ldr	r3, [r7, #28]
 8004eb4:	08db      	lsrs	r3, r3, #3
 8004eb6:	f003 0301 	and.w	r3, r3, #1
 8004eba:	2b00      	cmp	r3, #0
 8004ebc:	d009      	beq.n	8004ed2 <HAL_I2C_EV_IRQHandler+0xb2>
 8004ebe:	697b      	ldr	r3, [r7, #20]
 8004ec0:	0a5b      	lsrs	r3, r3, #9
 8004ec2:	f003 0301 	and.w	r3, r3, #1
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004eca:	6878      	ldr	r0, [r7, #4]
 8004ecc:	f000 fdd8 	bl	8005a80 <I2C_Master_ADD10>
 8004ed0:	e07e      	b.n	8004fd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ed2:	69fb      	ldr	r3, [r7, #28]
 8004ed4:	085b      	lsrs	r3, r3, #1
 8004ed6:	f003 0301 	and.w	r3, r3, #1
 8004eda:	2b00      	cmp	r3, #0
 8004edc:	d009      	beq.n	8004ef2 <HAL_I2C_EV_IRQHandler+0xd2>
 8004ede:	697b      	ldr	r3, [r7, #20]
 8004ee0:	0a5b      	lsrs	r3, r3, #9
 8004ee2:	f003 0301 	and.w	r3, r3, #1
 8004ee6:	2b00      	cmp	r3, #0
 8004ee8:	d003      	beq.n	8004ef2 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004eea:	6878      	ldr	r0, [r7, #4]
 8004eec:	f000 fdf2 	bl	8005ad4 <I2C_Master_ADDR>
 8004ef0:	e06e      	b.n	8004fd0 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004ef2:	69bb      	ldr	r3, [r7, #24]
 8004ef4:	089b      	lsrs	r3, r3, #2
 8004ef6:	f003 0301 	and.w	r3, r3, #1
 8004efa:	2b00      	cmp	r3, #0
 8004efc:	d037      	beq.n	8004f6e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004efe:	687b      	ldr	r3, [r7, #4]
 8004f00:	681b      	ldr	r3, [r3, #0]
 8004f02:	685b      	ldr	r3, [r3, #4]
 8004f04:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f08:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f0c:	f000 80ef 	beq.w	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f10:	69fb      	ldr	r3, [r7, #28]
 8004f12:	09db      	lsrs	r3, r3, #7
 8004f14:	f003 0301 	and.w	r3, r3, #1
 8004f18:	2b00      	cmp	r3, #0
 8004f1a:	d00f      	beq.n	8004f3c <HAL_I2C_EV_IRQHandler+0x11c>
 8004f1c:	697b      	ldr	r3, [r7, #20]
 8004f1e:	0a9b      	lsrs	r3, r3, #10
 8004f20:	f003 0301 	and.w	r3, r3, #1
 8004f24:	2b00      	cmp	r3, #0
 8004f26:	d009      	beq.n	8004f3c <HAL_I2C_EV_IRQHandler+0x11c>
 8004f28:	69fb      	ldr	r3, [r7, #28]
 8004f2a:	089b      	lsrs	r3, r3, #2
 8004f2c:	f003 0301 	and.w	r3, r3, #1
 8004f30:	2b00      	cmp	r3, #0
 8004f32:	d103      	bne.n	8004f3c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004f34:	6878      	ldr	r0, [r7, #4]
 8004f36:	f000 f9ef 	bl	8005318 <I2C_MasterTransmit_TXE>
 8004f3a:	e049      	b.n	8004fd0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f3c:	69fb      	ldr	r3, [r7, #28]
 8004f3e:	089b      	lsrs	r3, r3, #2
 8004f40:	f003 0301 	and.w	r3, r3, #1
 8004f44:	2b00      	cmp	r3, #0
 8004f46:	f000 80d2 	beq.w	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
 8004f4a:	697b      	ldr	r3, [r7, #20]
 8004f4c:	0a5b      	lsrs	r3, r3, #9
 8004f4e:	f003 0301 	and.w	r3, r3, #1
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	f000 80cb 	beq.w	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004f58:	7bfb      	ldrb	r3, [r7, #15]
 8004f5a:	2b10      	cmp	r3, #16
 8004f5c:	d103      	bne.n	8004f66 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004f5e:	6878      	ldr	r0, [r7, #4]
 8004f60:	f000 fa76 	bl	8005450 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f64:	e0c3      	b.n	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004f66:	6878      	ldr	r0, [r7, #4]
 8004f68:	f000 fada 	bl	8005520 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f6c:	e0bf      	b.n	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004f6e:	687b      	ldr	r3, [r7, #4]
 8004f70:	681b      	ldr	r3, [r3, #0]
 8004f72:	685b      	ldr	r3, [r3, #4]
 8004f74:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004f78:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004f7c:	f000 80b7 	beq.w	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f80:	69fb      	ldr	r3, [r7, #28]
 8004f82:	099b      	lsrs	r3, r3, #6
 8004f84:	f003 0301 	and.w	r3, r3, #1
 8004f88:	2b00      	cmp	r3, #0
 8004f8a:	d00f      	beq.n	8004fac <HAL_I2C_EV_IRQHandler+0x18c>
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	0a9b      	lsrs	r3, r3, #10
 8004f90:	f003 0301 	and.w	r3, r3, #1
 8004f94:	2b00      	cmp	r3, #0
 8004f96:	d009      	beq.n	8004fac <HAL_I2C_EV_IRQHandler+0x18c>
 8004f98:	69fb      	ldr	r3, [r7, #28]
 8004f9a:	089b      	lsrs	r3, r3, #2
 8004f9c:	f003 0301 	and.w	r3, r3, #1
 8004fa0:	2b00      	cmp	r3, #0
 8004fa2:	d103      	bne.n	8004fac <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004fa4:	6878      	ldr	r0, [r7, #4]
 8004fa6:	f000 fb4a 	bl	800563e <I2C_MasterReceive_RXNE>
 8004faa:	e011      	b.n	8004fd0 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fac:	69fb      	ldr	r3, [r7, #28]
 8004fae:	089b      	lsrs	r3, r3, #2
 8004fb0:	f003 0301 	and.w	r3, r3, #1
 8004fb4:	2b00      	cmp	r3, #0
 8004fb6:	f000 809a 	beq.w	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	0a5b      	lsrs	r3, r3, #9
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	f000 8093 	beq.w	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004fc8:	6878      	ldr	r0, [r7, #4]
 8004fca:	f000 fbe9 	bl	80057a0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fce:	e08e      	b.n	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
 8004fd0:	e08d      	b.n	80050ee <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d004      	beq.n	8004fe4 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fda:	687b      	ldr	r3, [r7, #4]
 8004fdc:	681b      	ldr	r3, [r3, #0]
 8004fde:	695b      	ldr	r3, [r3, #20]
 8004fe0:	61fb      	str	r3, [r7, #28]
 8004fe2:	e007      	b.n	8004ff4 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004fe4:	687b      	ldr	r3, [r7, #4]
 8004fe6:	681b      	ldr	r3, [r3, #0]
 8004fe8:	699b      	ldr	r3, [r3, #24]
 8004fea:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004fec:	687b      	ldr	r3, [r7, #4]
 8004fee:	681b      	ldr	r3, [r3, #0]
 8004ff0:	695b      	ldr	r3, [r3, #20]
 8004ff2:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ff4:	69fb      	ldr	r3, [r7, #28]
 8004ff6:	085b      	lsrs	r3, r3, #1
 8004ff8:	f003 0301 	and.w	r3, r3, #1
 8004ffc:	2b00      	cmp	r3, #0
 8004ffe:	d012      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x206>
 8005000:	697b      	ldr	r3, [r7, #20]
 8005002:	0a5b      	lsrs	r3, r3, #9
 8005004:	f003 0301 	and.w	r3, r3, #1
 8005008:	2b00      	cmp	r3, #0
 800500a:	d00c      	beq.n	8005026 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 800500c:	687b      	ldr	r3, [r7, #4]
 800500e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005010:	2b00      	cmp	r3, #0
 8005012:	d003      	beq.n	800501c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8005014:	687b      	ldr	r3, [r7, #4]
 8005016:	681b      	ldr	r3, [r3, #0]
 8005018:	699b      	ldr	r3, [r3, #24]
 800501a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 800501c:	69b9      	ldr	r1, [r7, #24]
 800501e:	6878      	ldr	r0, [r7, #4]
 8005020:	f000 ffa7 	bl	8005f72 <I2C_Slave_ADDR>
 8005024:	e066      	b.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8005026:	69fb      	ldr	r3, [r7, #28]
 8005028:	091b      	lsrs	r3, r3, #4
 800502a:	f003 0301 	and.w	r3, r3, #1
 800502e:	2b00      	cmp	r3, #0
 8005030:	d009      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0x226>
 8005032:	697b      	ldr	r3, [r7, #20]
 8005034:	0a5b      	lsrs	r3, r3, #9
 8005036:	f003 0301 	and.w	r3, r3, #1
 800503a:	2b00      	cmp	r3, #0
 800503c:	d003      	beq.n	8005046 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 800503e:	6878      	ldr	r0, [r7, #4]
 8005040:	f000 ffdc 	bl	8005ffc <I2C_Slave_STOPF>
 8005044:	e056      	b.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005046:	7bbb      	ldrb	r3, [r7, #14]
 8005048:	2b21      	cmp	r3, #33	; 0x21
 800504a:	d002      	beq.n	8005052 <HAL_I2C_EV_IRQHandler+0x232>
 800504c:	7bbb      	ldrb	r3, [r7, #14]
 800504e:	2b29      	cmp	r3, #41	; 0x29
 8005050:	d125      	bne.n	800509e <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005052:	69fb      	ldr	r3, [r7, #28]
 8005054:	09db      	lsrs	r3, r3, #7
 8005056:	f003 0301 	and.w	r3, r3, #1
 800505a:	2b00      	cmp	r3, #0
 800505c:	d00f      	beq.n	800507e <HAL_I2C_EV_IRQHandler+0x25e>
 800505e:	697b      	ldr	r3, [r7, #20]
 8005060:	0a9b      	lsrs	r3, r3, #10
 8005062:	f003 0301 	and.w	r3, r3, #1
 8005066:	2b00      	cmp	r3, #0
 8005068:	d009      	beq.n	800507e <HAL_I2C_EV_IRQHandler+0x25e>
 800506a:	69fb      	ldr	r3, [r7, #28]
 800506c:	089b      	lsrs	r3, r3, #2
 800506e:	f003 0301 	and.w	r3, r3, #1
 8005072:	2b00      	cmp	r3, #0
 8005074:	d103      	bne.n	800507e <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8005076:	6878      	ldr	r0, [r7, #4]
 8005078:	f000 febd 	bl	8005df6 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800507c:	e039      	b.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800507e:	69fb      	ldr	r3, [r7, #28]
 8005080:	089b      	lsrs	r3, r3, #2
 8005082:	f003 0301 	and.w	r3, r3, #1
 8005086:	2b00      	cmp	r3, #0
 8005088:	d033      	beq.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d2>
 800508a:	697b      	ldr	r3, [r7, #20]
 800508c:	0a5b      	lsrs	r3, r3, #9
 800508e:	f003 0301 	and.w	r3, r3, #1
 8005092:	2b00      	cmp	r3, #0
 8005094:	d02d      	beq.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8005096:	6878      	ldr	r0, [r7, #4]
 8005098:	f000 feea 	bl	8005e70 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800509c:	e029      	b.n	80050f2 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 800509e:	69fb      	ldr	r3, [r7, #28]
 80050a0:	099b      	lsrs	r3, r3, #6
 80050a2:	f003 0301 	and.w	r3, r3, #1
 80050a6:	2b00      	cmp	r3, #0
 80050a8:	d00f      	beq.n	80050ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80050aa:	697b      	ldr	r3, [r7, #20]
 80050ac:	0a9b      	lsrs	r3, r3, #10
 80050ae:	f003 0301 	and.w	r3, r3, #1
 80050b2:	2b00      	cmp	r3, #0
 80050b4:	d009      	beq.n	80050ca <HAL_I2C_EV_IRQHandler+0x2aa>
 80050b6:	69fb      	ldr	r3, [r7, #28]
 80050b8:	089b      	lsrs	r3, r3, #2
 80050ba:	f003 0301 	and.w	r3, r3, #1
 80050be:	2b00      	cmp	r3, #0
 80050c0:	d103      	bne.n	80050ca <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80050c2:	6878      	ldr	r0, [r7, #4]
 80050c4:	f000 fef5 	bl	8005eb2 <I2C_SlaveReceive_RXNE>
 80050c8:	e014      	b.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050ca:	69fb      	ldr	r3, [r7, #28]
 80050cc:	089b      	lsrs	r3, r3, #2
 80050ce:	f003 0301 	and.w	r3, r3, #1
 80050d2:	2b00      	cmp	r3, #0
 80050d4:	d00e      	beq.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
 80050d6:	697b      	ldr	r3, [r7, #20]
 80050d8:	0a5b      	lsrs	r3, r3, #9
 80050da:	f003 0301 	and.w	r3, r3, #1
 80050de:	2b00      	cmp	r3, #0
 80050e0:	d008      	beq.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80050e2:	6878      	ldr	r0, [r7, #4]
 80050e4:	f000 ff23 	bl	8005f2e <I2C_SlaveReceive_BTF>
 80050e8:	e004      	b.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80050ea:	bf00      	nop
 80050ec:	e002      	b.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80050ee:	bf00      	nop
 80050f0:	e000      	b.n	80050f4 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80050f2:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80050f4:	3720      	adds	r7, #32
 80050f6:	46bd      	mov	sp, r7
 80050f8:	bd80      	pop	{r7, pc}

080050fa <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80050fa:	b580      	push	{r7, lr}
 80050fc:	b08a      	sub	sp, #40	; 0x28
 80050fe:	af00      	add	r7, sp, #0
 8005100:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005102:	687b      	ldr	r3, [r7, #4]
 8005104:	681b      	ldr	r3, [r3, #0]
 8005106:	695b      	ldr	r3, [r3, #20]
 8005108:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	685b      	ldr	r3, [r3, #4]
 8005110:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005112:	2300      	movs	r3, #0
 8005114:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005116:	687b      	ldr	r3, [r7, #4]
 8005118:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800511c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800511e:	6a3b      	ldr	r3, [r7, #32]
 8005120:	0a1b      	lsrs	r3, r3, #8
 8005122:	f003 0301 	and.w	r3, r3, #1
 8005126:	2b00      	cmp	r3, #0
 8005128:	d00e      	beq.n	8005148 <HAL_I2C_ER_IRQHandler+0x4e>
 800512a:	69fb      	ldr	r3, [r7, #28]
 800512c:	0a1b      	lsrs	r3, r3, #8
 800512e:	f003 0301 	and.w	r3, r3, #1
 8005132:	2b00      	cmp	r3, #0
 8005134:	d008      	beq.n	8005148 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005136:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005138:	f043 0301 	orr.w	r3, r3, #1
 800513c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800513e:	687b      	ldr	r3, [r7, #4]
 8005140:	681b      	ldr	r3, [r3, #0]
 8005142:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005146:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005148:	6a3b      	ldr	r3, [r7, #32]
 800514a:	0a5b      	lsrs	r3, r3, #9
 800514c:	f003 0301 	and.w	r3, r3, #1
 8005150:	2b00      	cmp	r3, #0
 8005152:	d00e      	beq.n	8005172 <HAL_I2C_ER_IRQHandler+0x78>
 8005154:	69fb      	ldr	r3, [r7, #28]
 8005156:	0a1b      	lsrs	r3, r3, #8
 8005158:	f003 0301 	and.w	r3, r3, #1
 800515c:	2b00      	cmp	r3, #0
 800515e:	d008      	beq.n	8005172 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005160:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005162:	f043 0302 	orr.w	r3, r3, #2
 8005166:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005168:	687b      	ldr	r3, [r7, #4]
 800516a:	681b      	ldr	r3, [r3, #0]
 800516c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8005170:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005172:	6a3b      	ldr	r3, [r7, #32]
 8005174:	0a9b      	lsrs	r3, r3, #10
 8005176:	f003 0301 	and.w	r3, r3, #1
 800517a:	2b00      	cmp	r3, #0
 800517c:	d03f      	beq.n	80051fe <HAL_I2C_ER_IRQHandler+0x104>
 800517e:	69fb      	ldr	r3, [r7, #28]
 8005180:	0a1b      	lsrs	r3, r3, #8
 8005182:	f003 0301 	and.w	r3, r3, #1
 8005186:	2b00      	cmp	r3, #0
 8005188:	d039      	beq.n	80051fe <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 800518a:	7efb      	ldrb	r3, [r7, #27]
 800518c:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 800518e:	687b      	ldr	r3, [r7, #4]
 8005190:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005192:	b29b      	uxth	r3, r3
 8005194:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800519c:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80051a2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80051a4:	7ebb      	ldrb	r3, [r7, #26]
 80051a6:	2b20      	cmp	r3, #32
 80051a8:	d112      	bne.n	80051d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80051aa:	697b      	ldr	r3, [r7, #20]
 80051ac:	2b00      	cmp	r3, #0
 80051ae:	d10f      	bne.n	80051d0 <HAL_I2C_ER_IRQHandler+0xd6>
 80051b0:	7cfb      	ldrb	r3, [r7, #19]
 80051b2:	2b21      	cmp	r3, #33	; 0x21
 80051b4:	d008      	beq.n	80051c8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80051b6:	7cfb      	ldrb	r3, [r7, #19]
 80051b8:	2b29      	cmp	r3, #41	; 0x29
 80051ba:	d005      	beq.n	80051c8 <HAL_I2C_ER_IRQHandler+0xce>
 80051bc:	7cfb      	ldrb	r3, [r7, #19]
 80051be:	2b28      	cmp	r3, #40	; 0x28
 80051c0:	d106      	bne.n	80051d0 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80051c2:	68fb      	ldr	r3, [r7, #12]
 80051c4:	2b21      	cmp	r3, #33	; 0x21
 80051c6:	d103      	bne.n	80051d0 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80051c8:	6878      	ldr	r0, [r7, #4]
 80051ca:	f001 f847 	bl	800625c <I2C_Slave_AF>
 80051ce:	e016      	b.n	80051fe <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80051d8:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80051da:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80051dc:	f043 0304 	orr.w	r3, r3, #4
 80051e0:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 80051e2:	7efb      	ldrb	r3, [r7, #27]
 80051e4:	2b10      	cmp	r3, #16
 80051e6:	d002      	beq.n	80051ee <HAL_I2C_ER_IRQHandler+0xf4>
 80051e8:	7efb      	ldrb	r3, [r7, #27]
 80051ea:	2b40      	cmp	r3, #64	; 0x40
 80051ec:	d107      	bne.n	80051fe <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051ee:	687b      	ldr	r3, [r7, #4]
 80051f0:	681b      	ldr	r3, [r3, #0]
 80051f2:	681a      	ldr	r2, [r3, #0]
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	681b      	ldr	r3, [r3, #0]
 80051f8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051fc:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80051fe:	6a3b      	ldr	r3, [r7, #32]
 8005200:	0adb      	lsrs	r3, r3, #11
 8005202:	f003 0301 	and.w	r3, r3, #1
 8005206:	2b00      	cmp	r3, #0
 8005208:	d00e      	beq.n	8005228 <HAL_I2C_ER_IRQHandler+0x12e>
 800520a:	69fb      	ldr	r3, [r7, #28]
 800520c:	0a1b      	lsrs	r3, r3, #8
 800520e:	f003 0301 	and.w	r3, r3, #1
 8005212:	2b00      	cmp	r3, #0
 8005214:	d008      	beq.n	8005228 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005216:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005218:	f043 0308 	orr.w	r3, r3, #8
 800521c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800521e:	687b      	ldr	r3, [r7, #4]
 8005220:	681b      	ldr	r3, [r3, #0]
 8005222:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005226:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005228:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800522a:	2b00      	cmp	r3, #0
 800522c:	d008      	beq.n	8005240 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005232:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005234:	431a      	orrs	r2, r3
 8005236:	687b      	ldr	r3, [r7, #4]
 8005238:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800523a:	6878      	ldr	r0, [r7, #4]
 800523c:	f001 f87e 	bl	800633c <I2C_ITError>
  }
}
 8005240:	bf00      	nop
 8005242:	3728      	adds	r7, #40	; 0x28
 8005244:	46bd      	mov	sp, r7
 8005246:	bd80      	pop	{r7, pc}

08005248 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005248:	b480      	push	{r7}
 800524a:	b083      	sub	sp, #12
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005250:	bf00      	nop
 8005252:	370c      	adds	r7, #12
 8005254:	46bd      	mov	sp, r7
 8005256:	f85d 7b04 	ldr.w	r7, [sp], #4
 800525a:	4770      	bx	lr

0800525c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800525c:	b480      	push	{r7}
 800525e:	b083      	sub	sp, #12
 8005260:	af00      	add	r7, sp, #0
 8005262:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005264:	bf00      	nop
 8005266:	370c      	adds	r7, #12
 8005268:	46bd      	mov	sp, r7
 800526a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800526e:	4770      	bx	lr

08005270 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005270:	b480      	push	{r7}
 8005272:	b083      	sub	sp, #12
 8005274:	af00      	add	r7, sp, #0
 8005276:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8005278:	bf00      	nop
 800527a:	370c      	adds	r7, #12
 800527c:	46bd      	mov	sp, r7
 800527e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005282:	4770      	bx	lr

08005284 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005284:	b480      	push	{r7}
 8005286:	b083      	sub	sp, #12
 8005288:	af00      	add	r7, sp, #0
 800528a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 800528c:	bf00      	nop
 800528e:	370c      	adds	r7, #12
 8005290:	46bd      	mov	sp, r7
 8005292:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005296:	4770      	bx	lr

08005298 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8005298:	b480      	push	{r7}
 800529a:	b083      	sub	sp, #12
 800529c:	af00      	add	r7, sp, #0
 800529e:	6078      	str	r0, [r7, #4]
 80052a0:	460b      	mov	r3, r1
 80052a2:	70fb      	strb	r3, [r7, #3]
 80052a4:	4613      	mov	r3, r2
 80052a6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80052a8:	bf00      	nop
 80052aa:	370c      	adds	r7, #12
 80052ac:	46bd      	mov	sp, r7
 80052ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052b2:	4770      	bx	lr

080052b4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052b4:	b480      	push	{r7}
 80052b6:	b083      	sub	sp, #12
 80052b8:	af00      	add	r7, sp, #0
 80052ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80052bc:	bf00      	nop
 80052be:	370c      	adds	r7, #12
 80052c0:	46bd      	mov	sp, r7
 80052c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052c6:	4770      	bx	lr

080052c8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052c8:	b480      	push	{r7}
 80052ca:	b083      	sub	sp, #12
 80052cc:	af00      	add	r7, sp, #0
 80052ce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80052d0:	bf00      	nop
 80052d2:	370c      	adds	r7, #12
 80052d4:	46bd      	mov	sp, r7
 80052d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052da:	4770      	bx	lr

080052dc <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80052dc:	b480      	push	{r7}
 80052de:	b083      	sub	sp, #12
 80052e0:	af00      	add	r7, sp, #0
 80052e2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 80052e4:	bf00      	nop
 80052e6:	370c      	adds	r7, #12
 80052e8:	46bd      	mov	sp, r7
 80052ea:	f85d 7b04 	ldr.w	r7, [sp], #4
 80052ee:	4770      	bx	lr

080052f0 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 80052f0:	b480      	push	{r7}
 80052f2:	b083      	sub	sp, #12
 80052f4:	af00      	add	r7, sp, #0
 80052f6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 80052f8:	bf00      	nop
 80052fa:	370c      	adds	r7, #12
 80052fc:	46bd      	mov	sp, r7
 80052fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005302:	4770      	bx	lr

08005304 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005304:	b480      	push	{r7}
 8005306:	b083      	sub	sp, #12
 8005308:	af00      	add	r7, sp, #0
 800530a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800530c:	bf00      	nop
 800530e:	370c      	adds	r7, #12
 8005310:	46bd      	mov	sp, r7
 8005312:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005316:	4770      	bx	lr

08005318 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005318:	b580      	push	{r7, lr}
 800531a:	b084      	sub	sp, #16
 800531c:	af00      	add	r7, sp, #0
 800531e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005320:	687b      	ldr	r3, [r7, #4]
 8005322:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005326:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005328:	687b      	ldr	r3, [r7, #4]
 800532a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800532e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005330:	687b      	ldr	r3, [r7, #4]
 8005332:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005334:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005336:	687b      	ldr	r3, [r7, #4]
 8005338:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800533a:	2b00      	cmp	r3, #0
 800533c:	d150      	bne.n	80053e0 <I2C_MasterTransmit_TXE+0xc8>
 800533e:	7bfb      	ldrb	r3, [r7, #15]
 8005340:	2b21      	cmp	r3, #33	; 0x21
 8005342:	d14d      	bne.n	80053e0 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005344:	68bb      	ldr	r3, [r7, #8]
 8005346:	2b08      	cmp	r3, #8
 8005348:	d01d      	beq.n	8005386 <I2C_MasterTransmit_TXE+0x6e>
 800534a:	68bb      	ldr	r3, [r7, #8]
 800534c:	2b20      	cmp	r3, #32
 800534e:	d01a      	beq.n	8005386 <I2C_MasterTransmit_TXE+0x6e>
 8005350:	68bb      	ldr	r3, [r7, #8]
 8005352:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005356:	d016      	beq.n	8005386 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	685a      	ldr	r2, [r3, #4]
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	681b      	ldr	r3, [r3, #0]
 8005362:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005366:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	2211      	movs	r2, #17
 800536c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	2200      	movs	r2, #0
 8005372:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8005376:	687b      	ldr	r3, [r7, #4]
 8005378:	2220      	movs	r2, #32
 800537a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 800537e:	6878      	ldr	r0, [r7, #4]
 8005380:	f7ff ff62 	bl	8005248 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005384:	e060      	b.n	8005448 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005386:	687b      	ldr	r3, [r7, #4]
 8005388:	681b      	ldr	r3, [r3, #0]
 800538a:	685a      	ldr	r2, [r3, #4]
 800538c:	687b      	ldr	r3, [r7, #4]
 800538e:	681b      	ldr	r3, [r3, #0]
 8005390:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005394:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005396:	687b      	ldr	r3, [r7, #4]
 8005398:	681b      	ldr	r3, [r3, #0]
 800539a:	681a      	ldr	r2, [r3, #0]
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	681b      	ldr	r3, [r3, #0]
 80053a0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80053a4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	2200      	movs	r2, #0
 80053aa:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	2220      	movs	r2, #32
 80053b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80053b4:	687b      	ldr	r3, [r7, #4]
 80053b6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80053ba:	b2db      	uxtb	r3, r3
 80053bc:	2b40      	cmp	r3, #64	; 0x40
 80053be:	d107      	bne.n	80053d0 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053c0:	687b      	ldr	r3, [r7, #4]
 80053c2:	2200      	movs	r2, #0
 80053c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80053c8:	6878      	ldr	r0, [r7, #4]
 80053ca:	f7ff ff7d 	bl	80052c8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ce:	e03b      	b.n	8005448 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053d0:	687b      	ldr	r3, [r7, #4]
 80053d2:	2200      	movs	r2, #0
 80053d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80053d8:	6878      	ldr	r0, [r7, #4]
 80053da:	f7ff ff35 	bl	8005248 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053de:	e033      	b.n	8005448 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 80053e0:	7bfb      	ldrb	r3, [r7, #15]
 80053e2:	2b21      	cmp	r3, #33	; 0x21
 80053e4:	d005      	beq.n	80053f2 <I2C_MasterTransmit_TXE+0xda>
 80053e6:	7bbb      	ldrb	r3, [r7, #14]
 80053e8:	2b40      	cmp	r3, #64	; 0x40
 80053ea:	d12d      	bne.n	8005448 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 80053ec:	7bfb      	ldrb	r3, [r7, #15]
 80053ee:	2b22      	cmp	r3, #34	; 0x22
 80053f0:	d12a      	bne.n	8005448 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 80053f2:	687b      	ldr	r3, [r7, #4]
 80053f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053f6:	b29b      	uxth	r3, r3
 80053f8:	2b00      	cmp	r3, #0
 80053fa:	d108      	bne.n	800540e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	681b      	ldr	r3, [r3, #0]
 8005400:	685a      	ldr	r2, [r3, #4]
 8005402:	687b      	ldr	r3, [r7, #4]
 8005404:	681b      	ldr	r3, [r3, #0]
 8005406:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800540a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800540c:	e01c      	b.n	8005448 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800540e:	687b      	ldr	r3, [r7, #4]
 8005410:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005414:	b2db      	uxtb	r3, r3
 8005416:	2b40      	cmp	r3, #64	; 0x40
 8005418:	d103      	bne.n	8005422 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800541a:	6878      	ldr	r0, [r7, #4]
 800541c:	f000 f880 	bl	8005520 <I2C_MemoryTransmit_TXE_BTF>
}
 8005420:	e012      	b.n	8005448 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005426:	781a      	ldrb	r2, [r3, #0]
 8005428:	687b      	ldr	r3, [r7, #4]
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800542e:	687b      	ldr	r3, [r7, #4]
 8005430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005432:	1c5a      	adds	r2, r3, #1
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800543c:	b29b      	uxth	r3, r3
 800543e:	3b01      	subs	r3, #1
 8005440:	b29a      	uxth	r2, r3
 8005442:	687b      	ldr	r3, [r7, #4]
 8005444:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005446:	e7ff      	b.n	8005448 <I2C_MasterTransmit_TXE+0x130>
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800545c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800545e:	687b      	ldr	r3, [r7, #4]
 8005460:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005464:	b2db      	uxtb	r3, r3
 8005466:	2b21      	cmp	r3, #33	; 0x21
 8005468:	d156      	bne.n	8005518 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800546e:	b29b      	uxth	r3, r3
 8005470:	2b00      	cmp	r3, #0
 8005472:	d012      	beq.n	800549a <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005474:	687b      	ldr	r3, [r7, #4]
 8005476:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005478:	781a      	ldrb	r2, [r3, #0]
 800547a:	687b      	ldr	r3, [r7, #4]
 800547c:	681b      	ldr	r3, [r3, #0]
 800547e:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005480:	687b      	ldr	r3, [r7, #4]
 8005482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005484:	1c5a      	adds	r2, r3, #1
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800548a:	687b      	ldr	r3, [r7, #4]
 800548c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800548e:	b29b      	uxth	r3, r3
 8005490:	3b01      	subs	r3, #1
 8005492:	b29a      	uxth	r2, r3
 8005494:	687b      	ldr	r3, [r7, #4]
 8005496:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8005498:	e03e      	b.n	8005518 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800549a:	68fb      	ldr	r3, [r7, #12]
 800549c:	2b08      	cmp	r3, #8
 800549e:	d01d      	beq.n	80054dc <I2C_MasterTransmit_BTF+0x8c>
 80054a0:	68fb      	ldr	r3, [r7, #12]
 80054a2:	2b20      	cmp	r3, #32
 80054a4:	d01a      	beq.n	80054dc <I2C_MasterTransmit_BTF+0x8c>
 80054a6:	68fb      	ldr	r3, [r7, #12]
 80054a8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80054ac:	d016      	beq.n	80054dc <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054ae:	687b      	ldr	r3, [r7, #4]
 80054b0:	681b      	ldr	r3, [r3, #0]
 80054b2:	685a      	ldr	r2, [r3, #4]
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054bc:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	2211      	movs	r2, #17
 80054c2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	2200      	movs	r2, #0
 80054c8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	2220      	movs	r2, #32
 80054d0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80054d4:	6878      	ldr	r0, [r7, #4]
 80054d6:	f7ff feb7 	bl	8005248 <HAL_I2C_MasterTxCpltCallback>
}
 80054da:	e01d      	b.n	8005518 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80054dc:	687b      	ldr	r3, [r7, #4]
 80054de:	681b      	ldr	r3, [r3, #0]
 80054e0:	685a      	ldr	r2, [r3, #4]
 80054e2:	687b      	ldr	r3, [r7, #4]
 80054e4:	681b      	ldr	r3, [r3, #0]
 80054e6:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80054ea:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80054ec:	687b      	ldr	r3, [r7, #4]
 80054ee:	681b      	ldr	r3, [r3, #0]
 80054f0:	681a      	ldr	r2, [r3, #0]
 80054f2:	687b      	ldr	r3, [r7, #4]
 80054f4:	681b      	ldr	r3, [r3, #0]
 80054f6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80054fa:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 80054fc:	687b      	ldr	r3, [r7, #4]
 80054fe:	2200      	movs	r2, #0
 8005500:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005502:	687b      	ldr	r3, [r7, #4]
 8005504:	2220      	movs	r2, #32
 8005506:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	2200      	movs	r2, #0
 800550e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005512:	6878      	ldr	r0, [r7, #4]
 8005514:	f7ff fe98 	bl	8005248 <HAL_I2C_MasterTxCpltCallback>
}
 8005518:	bf00      	nop
 800551a:	3710      	adds	r7, #16
 800551c:	46bd      	mov	sp, r7
 800551e:	bd80      	pop	{r7, pc}

08005520 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005534:	2b00      	cmp	r3, #0
 8005536:	d11d      	bne.n	8005574 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005538:	687b      	ldr	r3, [r7, #4]
 800553a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800553c:	2b01      	cmp	r3, #1
 800553e:	d10b      	bne.n	8005558 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005544:	b2da      	uxtb	r2, r3
 8005546:	687b      	ldr	r3, [r7, #4]
 8005548:	681b      	ldr	r3, [r3, #0]
 800554a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005550:	1c9a      	adds	r2, r3, #2
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005556:	e06e      	b.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800555c:	b29b      	uxth	r3, r3
 800555e:	121b      	asrs	r3, r3, #8
 8005560:	b2da      	uxtb	r2, r3
 8005562:	687b      	ldr	r3, [r7, #4]
 8005564:	681b      	ldr	r3, [r3, #0]
 8005566:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005568:	687b      	ldr	r3, [r7, #4]
 800556a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800556c:	1c5a      	adds	r2, r3, #1
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005572:	e060      	b.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8005574:	687b      	ldr	r3, [r7, #4]
 8005576:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005578:	2b01      	cmp	r3, #1
 800557a:	d10b      	bne.n	8005594 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005580:	b2da      	uxtb	r2, r3
 8005582:	687b      	ldr	r3, [r7, #4]
 8005584:	681b      	ldr	r3, [r3, #0]
 8005586:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800558c:	1c5a      	adds	r2, r3, #1
 800558e:	687b      	ldr	r3, [r7, #4]
 8005590:	651a      	str	r2, [r3, #80]	; 0x50
}
 8005592:	e050      	b.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005598:	2b02      	cmp	r3, #2
 800559a:	d14c      	bne.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 800559c:	7bfb      	ldrb	r3, [r7, #15]
 800559e:	2b22      	cmp	r3, #34	; 0x22
 80055a0:	d108      	bne.n	80055b4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	681b      	ldr	r3, [r3, #0]
 80055a6:	681a      	ldr	r2, [r3, #0]
 80055a8:	687b      	ldr	r3, [r7, #4]
 80055aa:	681b      	ldr	r3, [r3, #0]
 80055ac:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80055b0:	601a      	str	r2, [r3, #0]
}
 80055b2:	e040      	b.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055b8:	b29b      	uxth	r3, r3
 80055ba:	2b00      	cmp	r3, #0
 80055bc:	d015      	beq.n	80055ea <I2C_MemoryTransmit_TXE_BTF+0xca>
 80055be:	7bfb      	ldrb	r3, [r7, #15]
 80055c0:	2b21      	cmp	r3, #33	; 0x21
 80055c2:	d112      	bne.n	80055ea <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055c8:	781a      	ldrb	r2, [r3, #0]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 80055d0:	687b      	ldr	r3, [r7, #4]
 80055d2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055d4:	1c5a      	adds	r2, r3, #1
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 80055da:	687b      	ldr	r3, [r7, #4]
 80055dc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055de:	b29b      	uxth	r3, r3
 80055e0:	3b01      	subs	r3, #1
 80055e2:	b29a      	uxth	r2, r3
 80055e4:	687b      	ldr	r3, [r7, #4]
 80055e6:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 80055e8:	e025      	b.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80055ea:	687b      	ldr	r3, [r7, #4]
 80055ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ee:	b29b      	uxth	r3, r3
 80055f0:	2b00      	cmp	r3, #0
 80055f2:	d120      	bne.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
 80055f4:	7bfb      	ldrb	r3, [r7, #15]
 80055f6:	2b21      	cmp	r3, #33	; 0x21
 80055f8:	d11d      	bne.n	8005636 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80055fa:	687b      	ldr	r3, [r7, #4]
 80055fc:	681b      	ldr	r3, [r3, #0]
 80055fe:	685a      	ldr	r2, [r3, #4]
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	681b      	ldr	r3, [r3, #0]
 8005604:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005608:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800560a:	687b      	ldr	r3, [r7, #4]
 800560c:	681b      	ldr	r3, [r3, #0]
 800560e:	681a      	ldr	r2, [r3, #0]
 8005610:	687b      	ldr	r3, [r7, #4]
 8005612:	681b      	ldr	r3, [r3, #0]
 8005614:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005618:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	2200      	movs	r2, #0
 800561e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	2220      	movs	r2, #32
 8005624:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005628:	687b      	ldr	r3, [r7, #4]
 800562a:	2200      	movs	r2, #0
 800562c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005630:	6878      	ldr	r0, [r7, #4]
 8005632:	f7ff fe49 	bl	80052c8 <HAL_I2C_MemTxCpltCallback>
}
 8005636:	bf00      	nop
 8005638:	3710      	adds	r7, #16
 800563a:	46bd      	mov	sp, r7
 800563c:	bd80      	pop	{r7, pc}

0800563e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800563e:	b580      	push	{r7, lr}
 8005640:	b084      	sub	sp, #16
 8005642:	af00      	add	r7, sp, #0
 8005644:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005646:	687b      	ldr	r3, [r7, #4]
 8005648:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800564c:	b2db      	uxtb	r3, r3
 800564e:	2b22      	cmp	r3, #34	; 0x22
 8005650:	f040 80a2 	bne.w	8005798 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005654:	687b      	ldr	r3, [r7, #4]
 8005656:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005658:	b29b      	uxth	r3, r3
 800565a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800565c:	68fb      	ldr	r3, [r7, #12]
 800565e:	2b03      	cmp	r3, #3
 8005660:	d921      	bls.n	80056a6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005662:	687b      	ldr	r3, [r7, #4]
 8005664:	681b      	ldr	r3, [r3, #0]
 8005666:	691a      	ldr	r2, [r3, #16]
 8005668:	687b      	ldr	r3, [r7, #4]
 800566a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800566c:	b2d2      	uxtb	r2, r2
 800566e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005670:	687b      	ldr	r3, [r7, #4]
 8005672:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005674:	1c5a      	adds	r2, r3, #1
 8005676:	687b      	ldr	r3, [r7, #4]
 8005678:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 800567a:	687b      	ldr	r3, [r7, #4]
 800567c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800567e:	b29b      	uxth	r3, r3
 8005680:	3b01      	subs	r3, #1
 8005682:	b29a      	uxth	r2, r3
 8005684:	687b      	ldr	r3, [r7, #4]
 8005686:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800568c:	b29b      	uxth	r3, r3
 800568e:	2b03      	cmp	r3, #3
 8005690:	f040 8082 	bne.w	8005798 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	681b      	ldr	r3, [r3, #0]
 8005698:	685a      	ldr	r2, [r3, #4]
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	681b      	ldr	r3, [r3, #0]
 800569e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056a2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80056a4:	e078      	b.n	8005798 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056aa:	2b02      	cmp	r3, #2
 80056ac:	d074      	beq.n	8005798 <I2C_MasterReceive_RXNE+0x15a>
 80056ae:	68fb      	ldr	r3, [r7, #12]
 80056b0:	2b01      	cmp	r3, #1
 80056b2:	d002      	beq.n	80056ba <I2C_MasterReceive_RXNE+0x7c>
 80056b4:	68fb      	ldr	r3, [r7, #12]
 80056b6:	2b00      	cmp	r3, #0
 80056b8:	d16e      	bne.n	8005798 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80056ba:	6878      	ldr	r0, [r7, #4]
 80056bc:	f001 f818 	bl	80066f0 <I2C_WaitOnSTOPRequestThroughIT>
 80056c0:	4603      	mov	r3, r0
 80056c2:	2b00      	cmp	r3, #0
 80056c4:	d142      	bne.n	800574c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80056c6:	687b      	ldr	r3, [r7, #4]
 80056c8:	681b      	ldr	r3, [r3, #0]
 80056ca:	681a      	ldr	r2, [r3, #0]
 80056cc:	687b      	ldr	r3, [r7, #4]
 80056ce:	681b      	ldr	r3, [r3, #0]
 80056d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056d4:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	681b      	ldr	r3, [r3, #0]
 80056da:	685a      	ldr	r2, [r3, #4]
 80056dc:	687b      	ldr	r3, [r7, #4]
 80056de:	681b      	ldr	r3, [r3, #0]
 80056e0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80056e4:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056e6:	687b      	ldr	r3, [r7, #4]
 80056e8:	681b      	ldr	r3, [r3, #0]
 80056ea:	691a      	ldr	r2, [r3, #16]
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f0:	b2d2      	uxtb	r2, r2
 80056f2:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 80056f4:	687b      	ldr	r3, [r7, #4]
 80056f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056f8:	1c5a      	adds	r2, r3, #1
 80056fa:	687b      	ldr	r3, [r7, #4]
 80056fc:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005702:	b29b      	uxth	r3, r3
 8005704:	3b01      	subs	r3, #1
 8005706:	b29a      	uxth	r2, r3
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	2220      	movs	r2, #32
 8005710:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005714:	687b      	ldr	r3, [r7, #4]
 8005716:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800571a:	b2db      	uxtb	r3, r3
 800571c:	2b40      	cmp	r3, #64	; 0x40
 800571e:	d10a      	bne.n	8005736 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	2200      	movs	r2, #0
 8005724:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800572e:	6878      	ldr	r0, [r7, #4]
 8005730:	f7ff fdd4 	bl	80052dc <HAL_I2C_MemRxCpltCallback>
}
 8005734:	e030      	b.n	8005798 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800573e:	687b      	ldr	r3, [r7, #4]
 8005740:	2212      	movs	r2, #18
 8005742:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005744:	6878      	ldr	r0, [r7, #4]
 8005746:	f7ff fd89 	bl	800525c <HAL_I2C_MasterRxCpltCallback>
}
 800574a:	e025      	b.n	8005798 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	685a      	ldr	r2, [r3, #4]
 8005752:	687b      	ldr	r3, [r7, #4]
 8005754:	681b      	ldr	r3, [r3, #0]
 8005756:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800575a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	681b      	ldr	r3, [r3, #0]
 8005760:	691a      	ldr	r2, [r3, #16]
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005766:	b2d2      	uxtb	r2, r2
 8005768:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800576e:	1c5a      	adds	r2, r3, #1
 8005770:	687b      	ldr	r3, [r7, #4]
 8005772:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005774:	687b      	ldr	r3, [r7, #4]
 8005776:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005778:	b29b      	uxth	r3, r3
 800577a:	3b01      	subs	r3, #1
 800577c:	b29a      	uxth	r2, r3
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8005782:	687b      	ldr	r3, [r7, #4]
 8005784:	2220      	movs	r2, #32
 8005786:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800578a:	687b      	ldr	r3, [r7, #4]
 800578c:	2200      	movs	r2, #0
 800578e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8005792:	6878      	ldr	r0, [r7, #4]
 8005794:	f7ff fdac 	bl	80052f0 <HAL_I2C_ErrorCallback>
}
 8005798:	bf00      	nop
 800579a:	3710      	adds	r7, #16
 800579c:	46bd      	mov	sp, r7
 800579e:	bd80      	pop	{r7, pc}

080057a0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80057a0:	b580      	push	{r7, lr}
 80057a2:	b084      	sub	sp, #16
 80057a4:	af00      	add	r7, sp, #0
 80057a6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80057ac:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057b2:	b29b      	uxth	r3, r3
 80057b4:	2b04      	cmp	r3, #4
 80057b6:	d11b      	bne.n	80057f0 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	685a      	ldr	r2, [r3, #4]
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057c6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	691a      	ldr	r2, [r3, #16]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057d2:	b2d2      	uxtb	r2, r2
 80057d4:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80057d6:	687b      	ldr	r3, [r7, #4]
 80057d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057da:	1c5a      	adds	r2, r3, #1
 80057dc:	687b      	ldr	r3, [r7, #4]
 80057de:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057e4:	b29b      	uxth	r3, r3
 80057e6:	3b01      	subs	r3, #1
 80057e8:	b29a      	uxth	r2, r3
 80057ea:	687b      	ldr	r3, [r7, #4]
 80057ec:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80057ee:	e0bd      	b.n	800596c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80057f0:	687b      	ldr	r3, [r7, #4]
 80057f2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f4:	b29b      	uxth	r3, r3
 80057f6:	2b03      	cmp	r3, #3
 80057f8:	d129      	bne.n	800584e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80057fa:	687b      	ldr	r3, [r7, #4]
 80057fc:	681b      	ldr	r3, [r3, #0]
 80057fe:	685a      	ldr	r2, [r3, #4]
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005808:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800580a:	68fb      	ldr	r3, [r7, #12]
 800580c:	2b04      	cmp	r3, #4
 800580e:	d00a      	beq.n	8005826 <I2C_MasterReceive_BTF+0x86>
 8005810:	68fb      	ldr	r3, [r7, #12]
 8005812:	2b02      	cmp	r3, #2
 8005814:	d007      	beq.n	8005826 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005816:	687b      	ldr	r3, [r7, #4]
 8005818:	681b      	ldr	r3, [r3, #0]
 800581a:	681a      	ldr	r2, [r3, #0]
 800581c:	687b      	ldr	r3, [r7, #4]
 800581e:	681b      	ldr	r3, [r3, #0]
 8005820:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005824:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	691a      	ldr	r2, [r3, #16]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005830:	b2d2      	uxtb	r2, r2
 8005832:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005834:	687b      	ldr	r3, [r7, #4]
 8005836:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005838:	1c5a      	adds	r2, r3, #1
 800583a:	687b      	ldr	r3, [r7, #4]
 800583c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005842:	b29b      	uxth	r3, r3
 8005844:	3b01      	subs	r3, #1
 8005846:	b29a      	uxth	r2, r3
 8005848:	687b      	ldr	r3, [r7, #4]
 800584a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800584c:	e08e      	b.n	800596c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800584e:	687b      	ldr	r3, [r7, #4]
 8005850:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005852:	b29b      	uxth	r3, r3
 8005854:	2b02      	cmp	r3, #2
 8005856:	d176      	bne.n	8005946 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005858:	68fb      	ldr	r3, [r7, #12]
 800585a:	2b01      	cmp	r3, #1
 800585c:	d002      	beq.n	8005864 <I2C_MasterReceive_BTF+0xc4>
 800585e:	68fb      	ldr	r3, [r7, #12]
 8005860:	2b10      	cmp	r3, #16
 8005862:	d108      	bne.n	8005876 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005864:	687b      	ldr	r3, [r7, #4]
 8005866:	681b      	ldr	r3, [r3, #0]
 8005868:	681a      	ldr	r2, [r3, #0]
 800586a:	687b      	ldr	r3, [r7, #4]
 800586c:	681b      	ldr	r3, [r3, #0]
 800586e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005872:	601a      	str	r2, [r3, #0]
 8005874:	e019      	b.n	80058aa <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8005876:	68fb      	ldr	r3, [r7, #12]
 8005878:	2b04      	cmp	r3, #4
 800587a:	d002      	beq.n	8005882 <I2C_MasterReceive_BTF+0xe2>
 800587c:	68fb      	ldr	r3, [r7, #12]
 800587e:	2b02      	cmp	r3, #2
 8005880:	d108      	bne.n	8005894 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005882:	687b      	ldr	r3, [r7, #4]
 8005884:	681b      	ldr	r3, [r3, #0]
 8005886:	681a      	ldr	r2, [r3, #0]
 8005888:	687b      	ldr	r3, [r7, #4]
 800588a:	681b      	ldr	r3, [r3, #0]
 800588c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005890:	601a      	str	r2, [r3, #0]
 8005892:	e00a      	b.n	80058aa <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8005894:	68fb      	ldr	r3, [r7, #12]
 8005896:	2b10      	cmp	r3, #16
 8005898:	d007      	beq.n	80058aa <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800589a:	687b      	ldr	r3, [r7, #4]
 800589c:	681b      	ldr	r3, [r3, #0]
 800589e:	681a      	ldr	r2, [r3, #0]
 80058a0:	687b      	ldr	r3, [r7, #4]
 80058a2:	681b      	ldr	r3, [r3, #0]
 80058a4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80058a8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	681b      	ldr	r3, [r3, #0]
 80058ae:	691a      	ldr	r2, [r3, #16]
 80058b0:	687b      	ldr	r3, [r7, #4]
 80058b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058b4:	b2d2      	uxtb	r2, r2
 80058b6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058bc:	1c5a      	adds	r2, r3, #1
 80058be:	687b      	ldr	r3, [r7, #4]
 80058c0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058c2:	687b      	ldr	r3, [r7, #4]
 80058c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058c6:	b29b      	uxth	r3, r3
 80058c8:	3b01      	subs	r3, #1
 80058ca:	b29a      	uxth	r2, r3
 80058cc:	687b      	ldr	r3, [r7, #4]
 80058ce:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80058d0:	687b      	ldr	r3, [r7, #4]
 80058d2:	681b      	ldr	r3, [r3, #0]
 80058d4:	691a      	ldr	r2, [r3, #16]
 80058d6:	687b      	ldr	r3, [r7, #4]
 80058d8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058da:	b2d2      	uxtb	r2, r2
 80058dc:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80058de:	687b      	ldr	r3, [r7, #4]
 80058e0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80058e2:	1c5a      	adds	r2, r3, #1
 80058e4:	687b      	ldr	r3, [r7, #4]
 80058e6:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80058ec:	b29b      	uxth	r3, r3
 80058ee:	3b01      	subs	r3, #1
 80058f0:	b29a      	uxth	r2, r3
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	685a      	ldr	r2, [r3, #4]
 80058fc:	687b      	ldr	r3, [r7, #4]
 80058fe:	681b      	ldr	r3, [r3, #0]
 8005900:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005904:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	2220      	movs	r2, #32
 800590a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005914:	b2db      	uxtb	r3, r3
 8005916:	2b40      	cmp	r3, #64	; 0x40
 8005918:	d10a      	bne.n	8005930 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800591a:	687b      	ldr	r3, [r7, #4]
 800591c:	2200      	movs	r2, #0
 800591e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005922:	687b      	ldr	r3, [r7, #4]
 8005924:	2200      	movs	r2, #0
 8005926:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005928:	6878      	ldr	r0, [r7, #4]
 800592a:	f7ff fcd7 	bl	80052dc <HAL_I2C_MemRxCpltCallback>
}
 800592e:	e01d      	b.n	800596c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005930:	687b      	ldr	r3, [r7, #4]
 8005932:	2200      	movs	r2, #0
 8005934:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2212      	movs	r2, #18
 800593c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800593e:	6878      	ldr	r0, [r7, #4]
 8005940:	f7ff fc8c 	bl	800525c <HAL_I2C_MasterRxCpltCallback>
}
 8005944:	e012      	b.n	800596c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005946:	687b      	ldr	r3, [r7, #4]
 8005948:	681b      	ldr	r3, [r3, #0]
 800594a:	691a      	ldr	r2, [r3, #16]
 800594c:	687b      	ldr	r3, [r7, #4]
 800594e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005950:	b2d2      	uxtb	r2, r2
 8005952:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005954:	687b      	ldr	r3, [r7, #4]
 8005956:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005958:	1c5a      	adds	r2, r3, #1
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800595e:	687b      	ldr	r3, [r7, #4]
 8005960:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005962:	b29b      	uxth	r3, r3
 8005964:	3b01      	subs	r3, #1
 8005966:	b29a      	uxth	r2, r3
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800596c:	bf00      	nop
 800596e:	3710      	adds	r7, #16
 8005970:	46bd      	mov	sp, r7
 8005972:	bd80      	pop	{r7, pc}

08005974 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8005974:	b480      	push	{r7}
 8005976:	b083      	sub	sp, #12
 8005978:	af00      	add	r7, sp, #0
 800597a:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005982:	b2db      	uxtb	r3, r3
 8005984:	2b40      	cmp	r3, #64	; 0x40
 8005986:	d117      	bne.n	80059b8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800598c:	2b00      	cmp	r3, #0
 800598e:	d109      	bne.n	80059a4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8005990:	687b      	ldr	r3, [r7, #4]
 8005992:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005994:	b2db      	uxtb	r3, r3
 8005996:	461a      	mov	r2, r3
 8005998:	687b      	ldr	r3, [r7, #4]
 800599a:	681b      	ldr	r3, [r3, #0]
 800599c:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059a0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80059a2:	e067      	b.n	8005a74 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059a8:	b2db      	uxtb	r3, r3
 80059aa:	f043 0301 	orr.w	r3, r3, #1
 80059ae:	b2da      	uxtb	r2, r3
 80059b0:	687b      	ldr	r3, [r7, #4]
 80059b2:	681b      	ldr	r3, [r3, #0]
 80059b4:	611a      	str	r2, [r3, #16]
}
 80059b6:	e05d      	b.n	8005a74 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	691b      	ldr	r3, [r3, #16]
 80059bc:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80059c0:	d133      	bne.n	8005a2a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059c8:	b2db      	uxtb	r3, r3
 80059ca:	2b21      	cmp	r3, #33	; 0x21
 80059cc:	d109      	bne.n	80059e2 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80059ce:	687b      	ldr	r3, [r7, #4]
 80059d0:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059d2:	b2db      	uxtb	r3, r3
 80059d4:	461a      	mov	r2, r3
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	681b      	ldr	r3, [r3, #0]
 80059da:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80059de:	611a      	str	r2, [r3, #16]
 80059e0:	e008      	b.n	80059f4 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80059e2:	687b      	ldr	r3, [r7, #4]
 80059e4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	f043 0301 	orr.w	r3, r3, #1
 80059ec:	b2da      	uxtb	r2, r3
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80059f4:	687b      	ldr	r3, [r7, #4]
 80059f6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059f8:	2b00      	cmp	r3, #0
 80059fa:	d004      	beq.n	8005a06 <I2C_Master_SB+0x92>
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a00:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a02:	2b00      	cmp	r3, #0
 8005a04:	d108      	bne.n	8005a18 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005a06:	687b      	ldr	r3, [r7, #4]
 8005a08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a0a:	2b00      	cmp	r3, #0
 8005a0c:	d032      	beq.n	8005a74 <I2C_Master_SB+0x100>
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005a12:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005a14:	2b00      	cmp	r3, #0
 8005a16:	d02d      	beq.n	8005a74 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005a18:	687b      	ldr	r3, [r7, #4]
 8005a1a:	681b      	ldr	r3, [r3, #0]
 8005a1c:	685a      	ldr	r2, [r3, #4]
 8005a1e:	687b      	ldr	r3, [r7, #4]
 8005a20:	681b      	ldr	r3, [r3, #0]
 8005a22:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005a26:	605a      	str	r2, [r3, #4]
}
 8005a28:	e024      	b.n	8005a74 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a2e:	2b00      	cmp	r3, #0
 8005a30:	d10e      	bne.n	8005a50 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005a32:	687b      	ldr	r3, [r7, #4]
 8005a34:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a36:	b29b      	uxth	r3, r3
 8005a38:	11db      	asrs	r3, r3, #7
 8005a3a:	b2db      	uxtb	r3, r3
 8005a3c:	f003 0306 	and.w	r3, r3, #6
 8005a40:	b2db      	uxtb	r3, r3
 8005a42:	f063 030f 	orn	r3, r3, #15
 8005a46:	b2da      	uxtb	r2, r3
 8005a48:	687b      	ldr	r3, [r7, #4]
 8005a4a:	681b      	ldr	r3, [r3, #0]
 8005a4c:	611a      	str	r2, [r3, #16]
}
 8005a4e:	e011      	b.n	8005a74 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005a50:	687b      	ldr	r3, [r7, #4]
 8005a52:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a54:	2b01      	cmp	r3, #1
 8005a56:	d10d      	bne.n	8005a74 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a5c:	b29b      	uxth	r3, r3
 8005a5e:	11db      	asrs	r3, r3, #7
 8005a60:	b2db      	uxtb	r3, r3
 8005a62:	f003 0306 	and.w	r3, r3, #6
 8005a66:	b2db      	uxtb	r3, r3
 8005a68:	f063 030e 	orn	r3, r3, #14
 8005a6c:	b2da      	uxtb	r2, r3
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	611a      	str	r2, [r3, #16]
}
 8005a74:	bf00      	nop
 8005a76:	370c      	adds	r7, #12
 8005a78:	46bd      	mov	sp, r7
 8005a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a7e:	4770      	bx	lr

08005a80 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8005a80:	b480      	push	{r7}
 8005a82:	b083      	sub	sp, #12
 8005a84:	af00      	add	r7, sp, #0
 8005a86:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8005a88:	687b      	ldr	r3, [r7, #4]
 8005a8a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005a8c:	b2da      	uxtb	r2, r3
 8005a8e:	687b      	ldr	r3, [r7, #4]
 8005a90:	681b      	ldr	r3, [r3, #0]
 8005a92:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005a98:	2b00      	cmp	r3, #0
 8005a9a:	d004      	beq.n	8005aa6 <I2C_Master_ADD10+0x26>
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005aa0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d108      	bne.n	8005ab8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005aaa:	2b00      	cmp	r3, #0
 8005aac:	d00c      	beq.n	8005ac8 <I2C_Master_ADD10+0x48>
 8005aae:	687b      	ldr	r3, [r7, #4]
 8005ab0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ab2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005ab4:	2b00      	cmp	r3, #0
 8005ab6:	d007      	beq.n	8005ac8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005ab8:	687b      	ldr	r3, [r7, #4]
 8005aba:	681b      	ldr	r3, [r3, #0]
 8005abc:	685a      	ldr	r2, [r3, #4]
 8005abe:	687b      	ldr	r3, [r7, #4]
 8005ac0:	681b      	ldr	r3, [r3, #0]
 8005ac2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005ac6:	605a      	str	r2, [r3, #4]
  }
}
 8005ac8:	bf00      	nop
 8005aca:	370c      	adds	r7, #12
 8005acc:	46bd      	mov	sp, r7
 8005ace:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ad2:	4770      	bx	lr

08005ad4 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005ad4:	b480      	push	{r7}
 8005ad6:	b091      	sub	sp, #68	; 0x44
 8005ad8:	af00      	add	r7, sp, #0
 8005ada:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005adc:	687b      	ldr	r3, [r7, #4]
 8005ade:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ae2:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005ae6:	687b      	ldr	r3, [r7, #4]
 8005ae8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005aea:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005aec:	687b      	ldr	r3, [r7, #4]
 8005aee:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005af0:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005af8:	b2db      	uxtb	r3, r3
 8005afa:	2b22      	cmp	r3, #34	; 0x22
 8005afc:	f040 8169 	bne.w	8005dd2 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005b00:	687b      	ldr	r3, [r7, #4]
 8005b02:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b04:	2b00      	cmp	r3, #0
 8005b06:	d10f      	bne.n	8005b28 <I2C_Master_ADDR+0x54>
 8005b08:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005b0c:	2b40      	cmp	r3, #64	; 0x40
 8005b0e:	d10b      	bne.n	8005b28 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b10:	2300      	movs	r3, #0
 8005b12:	633b      	str	r3, [r7, #48]	; 0x30
 8005b14:	687b      	ldr	r3, [r7, #4]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	695b      	ldr	r3, [r3, #20]
 8005b1a:	633b      	str	r3, [r7, #48]	; 0x30
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	699b      	ldr	r3, [r3, #24]
 8005b22:	633b      	str	r3, [r7, #48]	; 0x30
 8005b24:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005b26:	e160      	b.n	8005dea <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005b28:	687b      	ldr	r3, [r7, #4]
 8005b2a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b2c:	2b00      	cmp	r3, #0
 8005b2e:	d11d      	bne.n	8005b6c <I2C_Master_ADDR+0x98>
 8005b30:	687b      	ldr	r3, [r7, #4]
 8005b32:	691b      	ldr	r3, [r3, #16]
 8005b34:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005b38:	d118      	bne.n	8005b6c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b3a:	2300      	movs	r3, #0
 8005b3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b3e:	687b      	ldr	r3, [r7, #4]
 8005b40:	681b      	ldr	r3, [r3, #0]
 8005b42:	695b      	ldr	r3, [r3, #20]
 8005b44:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	699b      	ldr	r3, [r3, #24]
 8005b4c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005b4e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005b50:	687b      	ldr	r3, [r7, #4]
 8005b52:	681b      	ldr	r3, [r3, #0]
 8005b54:	681a      	ldr	r2, [r3, #0]
 8005b56:	687b      	ldr	r3, [r7, #4]
 8005b58:	681b      	ldr	r3, [r3, #0]
 8005b5a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005b5e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005b60:	687b      	ldr	r3, [r7, #4]
 8005b62:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005b64:	1c5a      	adds	r2, r3, #1
 8005b66:	687b      	ldr	r3, [r7, #4]
 8005b68:	651a      	str	r2, [r3, #80]	; 0x50
 8005b6a:	e13e      	b.n	8005dea <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005b6c:	687b      	ldr	r3, [r7, #4]
 8005b6e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005b70:	b29b      	uxth	r3, r3
 8005b72:	2b00      	cmp	r3, #0
 8005b74:	d113      	bne.n	8005b9e <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b76:	2300      	movs	r3, #0
 8005b78:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b7a:	687b      	ldr	r3, [r7, #4]
 8005b7c:	681b      	ldr	r3, [r3, #0]
 8005b7e:	695b      	ldr	r3, [r3, #20]
 8005b80:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	699b      	ldr	r3, [r3, #24]
 8005b88:	62bb      	str	r3, [r7, #40]	; 0x28
 8005b8a:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b8c:	687b      	ldr	r3, [r7, #4]
 8005b8e:	681b      	ldr	r3, [r3, #0]
 8005b90:	681a      	ldr	r2, [r3, #0]
 8005b92:	687b      	ldr	r3, [r7, #4]
 8005b94:	681b      	ldr	r3, [r3, #0]
 8005b96:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b9a:	601a      	str	r2, [r3, #0]
 8005b9c:	e115      	b.n	8005dca <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005b9e:	687b      	ldr	r3, [r7, #4]
 8005ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ba2:	b29b      	uxth	r3, r3
 8005ba4:	2b01      	cmp	r3, #1
 8005ba6:	f040 808a 	bne.w	8005cbe <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005baa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bac:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005bb0:	d137      	bne.n	8005c22 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb2:	687b      	ldr	r3, [r7, #4]
 8005bb4:	681b      	ldr	r3, [r3, #0]
 8005bb6:	681a      	ldr	r2, [r3, #0]
 8005bb8:	687b      	ldr	r3, [r7, #4]
 8005bba:	681b      	ldr	r3, [r3, #0]
 8005bbc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005bc2:	687b      	ldr	r3, [r7, #4]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	685b      	ldr	r3, [r3, #4]
 8005bc8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005bcc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005bd0:	d113      	bne.n	8005bfa <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	681a      	ldr	r2, [r3, #0]
 8005bd8:	687b      	ldr	r3, [r7, #4]
 8005bda:	681b      	ldr	r3, [r3, #0]
 8005bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005be0:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005be2:	2300      	movs	r3, #0
 8005be4:	627b      	str	r3, [r7, #36]	; 0x24
 8005be6:	687b      	ldr	r3, [r7, #4]
 8005be8:	681b      	ldr	r3, [r3, #0]
 8005bea:	695b      	ldr	r3, [r3, #20]
 8005bec:	627b      	str	r3, [r7, #36]	; 0x24
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	681b      	ldr	r3, [r3, #0]
 8005bf2:	699b      	ldr	r3, [r3, #24]
 8005bf4:	627b      	str	r3, [r7, #36]	; 0x24
 8005bf6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005bf8:	e0e7      	b.n	8005dca <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bfa:	2300      	movs	r3, #0
 8005bfc:	623b      	str	r3, [r7, #32]
 8005bfe:	687b      	ldr	r3, [r7, #4]
 8005c00:	681b      	ldr	r3, [r3, #0]
 8005c02:	695b      	ldr	r3, [r3, #20]
 8005c04:	623b      	str	r3, [r7, #32]
 8005c06:	687b      	ldr	r3, [r7, #4]
 8005c08:	681b      	ldr	r3, [r3, #0]
 8005c0a:	699b      	ldr	r3, [r3, #24]
 8005c0c:	623b      	str	r3, [r7, #32]
 8005c0e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	681a      	ldr	r2, [r3, #0]
 8005c16:	687b      	ldr	r3, [r7, #4]
 8005c18:	681b      	ldr	r3, [r3, #0]
 8005c1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005c1e:	601a      	str	r2, [r3, #0]
 8005c20:	e0d3      	b.n	8005dca <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005c22:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c24:	2b08      	cmp	r3, #8
 8005c26:	d02e      	beq.n	8005c86 <I2C_Master_ADDR+0x1b2>
 8005c28:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c2a:	2b20      	cmp	r3, #32
 8005c2c:	d02b      	beq.n	8005c86 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005c2e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005c30:	2b12      	cmp	r3, #18
 8005c32:	d102      	bne.n	8005c3a <I2C_Master_ADDR+0x166>
 8005c34:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	d125      	bne.n	8005c86 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005c3a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c3c:	2b04      	cmp	r3, #4
 8005c3e:	d00e      	beq.n	8005c5e <I2C_Master_ADDR+0x18a>
 8005c40:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c42:	2b02      	cmp	r3, #2
 8005c44:	d00b      	beq.n	8005c5e <I2C_Master_ADDR+0x18a>
 8005c46:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c48:	2b10      	cmp	r3, #16
 8005c4a:	d008      	beq.n	8005c5e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c4c:	687b      	ldr	r3, [r7, #4]
 8005c4e:	681b      	ldr	r3, [r3, #0]
 8005c50:	681a      	ldr	r2, [r3, #0]
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c5a:	601a      	str	r2, [r3, #0]
 8005c5c:	e007      	b.n	8005c6e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c5e:	687b      	ldr	r3, [r7, #4]
 8005c60:	681b      	ldr	r3, [r3, #0]
 8005c62:	681a      	ldr	r2, [r3, #0]
 8005c64:	687b      	ldr	r3, [r7, #4]
 8005c66:	681b      	ldr	r3, [r3, #0]
 8005c68:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c6c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c6e:	2300      	movs	r3, #0
 8005c70:	61fb      	str	r3, [r7, #28]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	695b      	ldr	r3, [r3, #20]
 8005c78:	61fb      	str	r3, [r7, #28]
 8005c7a:	687b      	ldr	r3, [r7, #4]
 8005c7c:	681b      	ldr	r3, [r3, #0]
 8005c7e:	699b      	ldr	r3, [r3, #24]
 8005c80:	61fb      	str	r3, [r7, #28]
 8005c82:	69fb      	ldr	r3, [r7, #28]
 8005c84:	e0a1      	b.n	8005dca <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c86:	687b      	ldr	r3, [r7, #4]
 8005c88:	681b      	ldr	r3, [r3, #0]
 8005c8a:	681a      	ldr	r2, [r3, #0]
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	681b      	ldr	r3, [r3, #0]
 8005c90:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c94:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c96:	2300      	movs	r3, #0
 8005c98:	61bb      	str	r3, [r7, #24]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	695b      	ldr	r3, [r3, #20]
 8005ca0:	61bb      	str	r3, [r7, #24]
 8005ca2:	687b      	ldr	r3, [r7, #4]
 8005ca4:	681b      	ldr	r3, [r3, #0]
 8005ca6:	699b      	ldr	r3, [r3, #24]
 8005ca8:	61bb      	str	r3, [r7, #24]
 8005caa:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005cac:	687b      	ldr	r3, [r7, #4]
 8005cae:	681b      	ldr	r3, [r3, #0]
 8005cb0:	681a      	ldr	r2, [r3, #0]
 8005cb2:	687b      	ldr	r3, [r7, #4]
 8005cb4:	681b      	ldr	r3, [r3, #0]
 8005cb6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005cba:	601a      	str	r2, [r3, #0]
 8005cbc:	e085      	b.n	8005dca <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005cbe:	687b      	ldr	r3, [r7, #4]
 8005cc0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005cc2:	b29b      	uxth	r3, r3
 8005cc4:	2b02      	cmp	r3, #2
 8005cc6:	d14d      	bne.n	8005d64 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	2b04      	cmp	r3, #4
 8005ccc:	d016      	beq.n	8005cfc <I2C_Master_ADDR+0x228>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	2b02      	cmp	r3, #2
 8005cd2:	d013      	beq.n	8005cfc <I2C_Master_ADDR+0x228>
 8005cd4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd6:	2b10      	cmp	r3, #16
 8005cd8:	d010      	beq.n	8005cfc <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	681a      	ldr	r2, [r3, #0]
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ce8:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	681a      	ldr	r2, [r3, #0]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005cf8:	601a      	str	r2, [r3, #0]
 8005cfa:	e007      	b.n	8005d0c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005cfc:	687b      	ldr	r3, [r7, #4]
 8005cfe:	681b      	ldr	r3, [r3, #0]
 8005d00:	681a      	ldr	r2, [r3, #0]
 8005d02:	687b      	ldr	r3, [r7, #4]
 8005d04:	681b      	ldr	r3, [r3, #0]
 8005d06:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d0a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	681b      	ldr	r3, [r3, #0]
 8005d10:	685b      	ldr	r3, [r3, #4]
 8005d12:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d16:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d1a:	d117      	bne.n	8005d4c <I2C_Master_ADDR+0x278>
 8005d1c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d1e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d22:	d00b      	beq.n	8005d3c <I2C_Master_ADDR+0x268>
 8005d24:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d26:	2b01      	cmp	r3, #1
 8005d28:	d008      	beq.n	8005d3c <I2C_Master_ADDR+0x268>
 8005d2a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d2c:	2b08      	cmp	r3, #8
 8005d2e:	d005      	beq.n	8005d3c <I2C_Master_ADDR+0x268>
 8005d30:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d32:	2b10      	cmp	r3, #16
 8005d34:	d002      	beq.n	8005d3c <I2C_Master_ADDR+0x268>
 8005d36:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d38:	2b20      	cmp	r3, #32
 8005d3a:	d107      	bne.n	8005d4c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	685a      	ldr	r2, [r3, #4]
 8005d42:	687b      	ldr	r3, [r7, #4]
 8005d44:	681b      	ldr	r3, [r3, #0]
 8005d46:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005d4a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d4c:	2300      	movs	r3, #0
 8005d4e:	617b      	str	r3, [r7, #20]
 8005d50:	687b      	ldr	r3, [r7, #4]
 8005d52:	681b      	ldr	r3, [r3, #0]
 8005d54:	695b      	ldr	r3, [r3, #20]
 8005d56:	617b      	str	r3, [r7, #20]
 8005d58:	687b      	ldr	r3, [r7, #4]
 8005d5a:	681b      	ldr	r3, [r3, #0]
 8005d5c:	699b      	ldr	r3, [r3, #24]
 8005d5e:	617b      	str	r3, [r7, #20]
 8005d60:	697b      	ldr	r3, [r7, #20]
 8005d62:	e032      	b.n	8005dca <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	681b      	ldr	r3, [r3, #0]
 8005d68:	681a      	ldr	r2, [r3, #0]
 8005d6a:	687b      	ldr	r3, [r7, #4]
 8005d6c:	681b      	ldr	r3, [r3, #0]
 8005d6e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005d72:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685b      	ldr	r3, [r3, #4]
 8005d7a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005d7e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005d82:	d117      	bne.n	8005db4 <I2C_Master_ADDR+0x2e0>
 8005d84:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d86:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005d8a:	d00b      	beq.n	8005da4 <I2C_Master_ADDR+0x2d0>
 8005d8c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d8e:	2b01      	cmp	r3, #1
 8005d90:	d008      	beq.n	8005da4 <I2C_Master_ADDR+0x2d0>
 8005d92:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d94:	2b08      	cmp	r3, #8
 8005d96:	d005      	beq.n	8005da4 <I2C_Master_ADDR+0x2d0>
 8005d98:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005d9a:	2b10      	cmp	r3, #16
 8005d9c:	d002      	beq.n	8005da4 <I2C_Master_ADDR+0x2d0>
 8005d9e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005da0:	2b20      	cmp	r3, #32
 8005da2:	d107      	bne.n	8005db4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005da4:	687b      	ldr	r3, [r7, #4]
 8005da6:	681b      	ldr	r3, [r3, #0]
 8005da8:	685a      	ldr	r2, [r3, #4]
 8005daa:	687b      	ldr	r3, [r7, #4]
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005db2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005db4:	2300      	movs	r3, #0
 8005db6:	613b      	str	r3, [r7, #16]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	695b      	ldr	r3, [r3, #20]
 8005dbe:	613b      	str	r3, [r7, #16]
 8005dc0:	687b      	ldr	r3, [r7, #4]
 8005dc2:	681b      	ldr	r3, [r3, #0]
 8005dc4:	699b      	ldr	r3, [r3, #24]
 8005dc6:	613b      	str	r3, [r7, #16]
 8005dc8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005dca:	687b      	ldr	r3, [r7, #4]
 8005dcc:	2200      	movs	r2, #0
 8005dce:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005dd0:	e00b      	b.n	8005dea <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005dd2:	2300      	movs	r3, #0
 8005dd4:	60fb      	str	r3, [r7, #12]
 8005dd6:	687b      	ldr	r3, [r7, #4]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	695b      	ldr	r3, [r3, #20]
 8005ddc:	60fb      	str	r3, [r7, #12]
 8005dde:	687b      	ldr	r3, [r7, #4]
 8005de0:	681b      	ldr	r3, [r3, #0]
 8005de2:	699b      	ldr	r3, [r3, #24]
 8005de4:	60fb      	str	r3, [r7, #12]
 8005de6:	68fb      	ldr	r3, [r7, #12]
}
 8005de8:	e7ff      	b.n	8005dea <I2C_Master_ADDR+0x316>
 8005dea:	bf00      	nop
 8005dec:	3744      	adds	r7, #68	; 0x44
 8005dee:	46bd      	mov	sp, r7
 8005df0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005df4:	4770      	bx	lr

08005df6 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005df6:	b580      	push	{r7, lr}
 8005df8:	b084      	sub	sp, #16
 8005dfa:	af00      	add	r7, sp, #0
 8005dfc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dfe:	687b      	ldr	r3, [r7, #4]
 8005e00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005e04:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005e06:	687b      	ldr	r3, [r7, #4]
 8005e08:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e0a:	b29b      	uxth	r3, r3
 8005e0c:	2b00      	cmp	r3, #0
 8005e0e:	d02b      	beq.n	8005e68 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e14:	781a      	ldrb	r2, [r3, #0]
 8005e16:	687b      	ldr	r3, [r7, #4]
 8005e18:	681b      	ldr	r3, [r3, #0]
 8005e1a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e1c:	687b      	ldr	r3, [r7, #4]
 8005e1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e20:	1c5a      	adds	r2, r3, #1
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e26:	687b      	ldr	r3, [r7, #4]
 8005e28:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e2a:	b29b      	uxth	r3, r3
 8005e2c:	3b01      	subs	r3, #1
 8005e2e:	b29a      	uxth	r2, r3
 8005e30:	687b      	ldr	r3, [r7, #4]
 8005e32:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005e34:	687b      	ldr	r3, [r7, #4]
 8005e36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e38:	b29b      	uxth	r3, r3
 8005e3a:	2b00      	cmp	r3, #0
 8005e3c:	d114      	bne.n	8005e68 <I2C_SlaveTransmit_TXE+0x72>
 8005e3e:	7bfb      	ldrb	r3, [r7, #15]
 8005e40:	2b29      	cmp	r3, #41	; 0x29
 8005e42:	d111      	bne.n	8005e68 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e44:	687b      	ldr	r3, [r7, #4]
 8005e46:	681b      	ldr	r3, [r3, #0]
 8005e48:	685a      	ldr	r2, [r3, #4]
 8005e4a:	687b      	ldr	r3, [r7, #4]
 8005e4c:	681b      	ldr	r3, [r3, #0]
 8005e4e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e52:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	2221      	movs	r2, #33	; 0x21
 8005e58:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e5a:	687b      	ldr	r3, [r7, #4]
 8005e5c:	2228      	movs	r2, #40	; 0x28
 8005e5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005e62:	6878      	ldr	r0, [r7, #4]
 8005e64:	f7ff fa04 	bl	8005270 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e68:	bf00      	nop
 8005e6a:	3710      	adds	r7, #16
 8005e6c:	46bd      	mov	sp, r7
 8005e6e:	bd80      	pop	{r7, pc}

08005e70 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e70:	b480      	push	{r7}
 8005e72:	b083      	sub	sp, #12
 8005e74:	af00      	add	r7, sp, #0
 8005e76:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e78:	687b      	ldr	r3, [r7, #4]
 8005e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e7c:	b29b      	uxth	r3, r3
 8005e7e:	2b00      	cmp	r3, #0
 8005e80:	d011      	beq.n	8005ea6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005e82:	687b      	ldr	r3, [r7, #4]
 8005e84:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e86:	781a      	ldrb	r2, [r3, #0]
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	681b      	ldr	r3, [r3, #0]
 8005e8c:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e92:	1c5a      	adds	r2, r3, #1
 8005e94:	687b      	ldr	r3, [r7, #4]
 8005e96:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e98:	687b      	ldr	r3, [r7, #4]
 8005e9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e9c:	b29b      	uxth	r3, r3
 8005e9e:	3b01      	subs	r3, #1
 8005ea0:	b29a      	uxth	r2, r3
 8005ea2:	687b      	ldr	r3, [r7, #4]
 8005ea4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005ea6:	bf00      	nop
 8005ea8:	370c      	adds	r7, #12
 8005eaa:	46bd      	mov	sp, r7
 8005eac:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005eb0:	4770      	bx	lr

08005eb2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005eb2:	b580      	push	{r7, lr}
 8005eb4:	b084      	sub	sp, #16
 8005eb6:	af00      	add	r7, sp, #0
 8005eb8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005ec0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ec6:	b29b      	uxth	r3, r3
 8005ec8:	2b00      	cmp	r3, #0
 8005eca:	d02c      	beq.n	8005f26 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005ecc:	687b      	ldr	r3, [r7, #4]
 8005ece:	681b      	ldr	r3, [r3, #0]
 8005ed0:	691a      	ldr	r2, [r3, #16]
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ed6:	b2d2      	uxtb	r2, r2
 8005ed8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005eda:	687b      	ldr	r3, [r7, #4]
 8005edc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005ede:	1c5a      	adds	r2, r3, #1
 8005ee0:	687b      	ldr	r3, [r7, #4]
 8005ee2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005ee4:	687b      	ldr	r3, [r7, #4]
 8005ee6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ee8:	b29b      	uxth	r3, r3
 8005eea:	3b01      	subs	r3, #1
 8005eec:	b29a      	uxth	r2, r3
 8005eee:	687b      	ldr	r3, [r7, #4]
 8005ef0:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005ef2:	687b      	ldr	r3, [r7, #4]
 8005ef4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ef6:	b29b      	uxth	r3, r3
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d114      	bne.n	8005f26 <I2C_SlaveReceive_RXNE+0x74>
 8005efc:	7bfb      	ldrb	r3, [r7, #15]
 8005efe:	2b2a      	cmp	r3, #42	; 0x2a
 8005f00:	d111      	bne.n	8005f26 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005f02:	687b      	ldr	r3, [r7, #4]
 8005f04:	681b      	ldr	r3, [r3, #0]
 8005f06:	685a      	ldr	r2, [r3, #4]
 8005f08:	687b      	ldr	r3, [r7, #4]
 8005f0a:	681b      	ldr	r3, [r3, #0]
 8005f0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f10:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005f12:	687b      	ldr	r3, [r7, #4]
 8005f14:	2222      	movs	r2, #34	; 0x22
 8005f16:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2228      	movs	r2, #40	; 0x28
 8005f1c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005f20:	6878      	ldr	r0, [r7, #4]
 8005f22:	f7ff f9af 	bl	8005284 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005f26:	bf00      	nop
 8005f28:	3710      	adds	r7, #16
 8005f2a:	46bd      	mov	sp, r7
 8005f2c:	bd80      	pop	{r7, pc}

08005f2e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005f2e:	b480      	push	{r7}
 8005f30:	b083      	sub	sp, #12
 8005f32:	af00      	add	r7, sp, #0
 8005f34:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005f36:	687b      	ldr	r3, [r7, #4]
 8005f38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f3a:	b29b      	uxth	r3, r3
 8005f3c:	2b00      	cmp	r3, #0
 8005f3e:	d012      	beq.n	8005f66 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005f40:	687b      	ldr	r3, [r7, #4]
 8005f42:	681b      	ldr	r3, [r3, #0]
 8005f44:	691a      	ldr	r2, [r3, #16]
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f4a:	b2d2      	uxtb	r2, r2
 8005f4c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005f52:	1c5a      	adds	r2, r3, #1
 8005f54:	687b      	ldr	r3, [r7, #4]
 8005f56:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005f5c:	b29b      	uxth	r3, r3
 8005f5e:	3b01      	subs	r3, #1
 8005f60:	b29a      	uxth	r2, r3
 8005f62:	687b      	ldr	r3, [r7, #4]
 8005f64:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005f66:	bf00      	nop
 8005f68:	370c      	adds	r7, #12
 8005f6a:	46bd      	mov	sp, r7
 8005f6c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005f70:	4770      	bx	lr

08005f72 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005f72:	b580      	push	{r7, lr}
 8005f74:	b084      	sub	sp, #16
 8005f76:	af00      	add	r7, sp, #0
 8005f78:	6078      	str	r0, [r7, #4]
 8005f7a:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005f7c:	2300      	movs	r3, #0
 8005f7e:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005f80:	687b      	ldr	r3, [r7, #4]
 8005f82:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f86:	b2db      	uxtb	r3, r3
 8005f88:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005f8c:	2b28      	cmp	r3, #40	; 0x28
 8005f8e:	d127      	bne.n	8005fe0 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005f90:	687b      	ldr	r3, [r7, #4]
 8005f92:	681b      	ldr	r3, [r3, #0]
 8005f94:	685a      	ldr	r2, [r3, #4]
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	681b      	ldr	r3, [r3, #0]
 8005f9a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f9e:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005fa0:	683b      	ldr	r3, [r7, #0]
 8005fa2:	089b      	lsrs	r3, r3, #2
 8005fa4:	f003 0301 	and.w	r3, r3, #1
 8005fa8:	2b00      	cmp	r3, #0
 8005faa:	d101      	bne.n	8005fb0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005fac:	2301      	movs	r3, #1
 8005fae:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005fb0:	683b      	ldr	r3, [r7, #0]
 8005fb2:	09db      	lsrs	r3, r3, #7
 8005fb4:	f003 0301 	and.w	r3, r3, #1
 8005fb8:	2b00      	cmp	r3, #0
 8005fba:	d103      	bne.n	8005fc4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005fbc:	687b      	ldr	r3, [r7, #4]
 8005fbe:	68db      	ldr	r3, [r3, #12]
 8005fc0:	81bb      	strh	r3, [r7, #12]
 8005fc2:	e002      	b.n	8005fca <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005fc4:	687b      	ldr	r3, [r7, #4]
 8005fc6:	699b      	ldr	r3, [r3, #24]
 8005fc8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	2200      	movs	r2, #0
 8005fce:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005fd2:	89ba      	ldrh	r2, [r7, #12]
 8005fd4:	7bfb      	ldrb	r3, [r7, #15]
 8005fd6:	4619      	mov	r1, r3
 8005fd8:	6878      	ldr	r0, [r7, #4]
 8005fda:	f7ff f95d 	bl	8005298 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005fde:	e008      	b.n	8005ff2 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005fe0:	687b      	ldr	r3, [r7, #4]
 8005fe2:	681b      	ldr	r3, [r3, #0]
 8005fe4:	f06f 0202 	mvn.w	r2, #2
 8005fe8:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005fea:	687b      	ldr	r3, [r7, #4]
 8005fec:	2200      	movs	r2, #0
 8005fee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005ff2:	bf00      	nop
 8005ff4:	3710      	adds	r7, #16
 8005ff6:	46bd      	mov	sp, r7
 8005ff8:	bd80      	pop	{r7, pc}
	...

08005ffc <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005ffc:	b580      	push	{r7, lr}
 8005ffe:	b084      	sub	sp, #16
 8006000:	af00      	add	r7, sp, #0
 8006002:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006004:	687b      	ldr	r3, [r7, #4]
 8006006:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800600a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	681b      	ldr	r3, [r3, #0]
 8006010:	685a      	ldr	r2, [r3, #4]
 8006012:	687b      	ldr	r3, [r7, #4]
 8006014:	681b      	ldr	r3, [r3, #0]
 8006016:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800601a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 800601c:	2300      	movs	r3, #0
 800601e:	60bb      	str	r3, [r7, #8]
 8006020:	687b      	ldr	r3, [r7, #4]
 8006022:	681b      	ldr	r3, [r3, #0]
 8006024:	695b      	ldr	r3, [r3, #20]
 8006026:	60bb      	str	r3, [r7, #8]
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	681a      	ldr	r2, [r3, #0]
 800602e:	687b      	ldr	r3, [r7, #4]
 8006030:	681b      	ldr	r3, [r3, #0]
 8006032:	f042 0201 	orr.w	r2, r2, #1
 8006036:	601a      	str	r2, [r3, #0]
 8006038:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800603a:	687b      	ldr	r3, [r7, #4]
 800603c:	681b      	ldr	r3, [r3, #0]
 800603e:	681a      	ldr	r2, [r3, #0]
 8006040:	687b      	ldr	r3, [r7, #4]
 8006042:	681b      	ldr	r3, [r3, #0]
 8006044:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006048:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	681b      	ldr	r3, [r3, #0]
 800604e:	685b      	ldr	r3, [r3, #4]
 8006050:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8006054:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8006058:	d172      	bne.n	8006140 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800605a:	7bfb      	ldrb	r3, [r7, #15]
 800605c:	2b22      	cmp	r3, #34	; 0x22
 800605e:	d002      	beq.n	8006066 <I2C_Slave_STOPF+0x6a>
 8006060:	7bfb      	ldrb	r3, [r7, #15]
 8006062:	2b2a      	cmp	r3, #42	; 0x2a
 8006064:	d135      	bne.n	80060d2 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8006066:	687b      	ldr	r3, [r7, #4]
 8006068:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800606a:	681b      	ldr	r3, [r3, #0]
 800606c:	685b      	ldr	r3, [r3, #4]
 800606e:	b29a      	uxth	r2, r3
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006074:	687b      	ldr	r3, [r7, #4]
 8006076:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006078:	b29b      	uxth	r3, r3
 800607a:	2b00      	cmp	r3, #0
 800607c:	d005      	beq.n	800608a <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800607e:	687b      	ldr	r3, [r7, #4]
 8006080:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006082:	f043 0204 	orr.w	r2, r3, #4
 8006086:	687b      	ldr	r3, [r7, #4]
 8006088:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	685a      	ldr	r2, [r3, #4]
 8006090:	687b      	ldr	r3, [r7, #4]
 8006092:	681b      	ldr	r3, [r3, #0]
 8006094:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006098:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800609a:	687b      	ldr	r3, [r7, #4]
 800609c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800609e:	4618      	mov	r0, r3
 80060a0:	f7fe f982 	bl	80043a8 <HAL_DMA_GetState>
 80060a4:	4603      	mov	r3, r0
 80060a6:	2b01      	cmp	r3, #1
 80060a8:	d049      	beq.n	800613e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060ae:	4a69      	ldr	r2, [pc, #420]	; (8006254 <I2C_Slave_STOPF+0x258>)
 80060b0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060b6:	4618      	mov	r0, r3
 80060b8:	f7fd ffca 	bl	8004050 <HAL_DMA_Abort_IT>
 80060bc:	4603      	mov	r3, r0
 80060be:	2b00      	cmp	r3, #0
 80060c0:	d03d      	beq.n	800613e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80060c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80060c8:	687a      	ldr	r2, [r7, #4]
 80060ca:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80060cc:	4610      	mov	r0, r2
 80060ce:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80060d0:	e035      	b.n	800613e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80060d2:	687b      	ldr	r3, [r7, #4]
 80060d4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80060d6:	681b      	ldr	r3, [r3, #0]
 80060d8:	685b      	ldr	r3, [r3, #4]
 80060da:	b29a      	uxth	r2, r3
 80060dc:	687b      	ldr	r3, [r7, #4]
 80060de:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80060e0:	687b      	ldr	r3, [r7, #4]
 80060e2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e4:	b29b      	uxth	r3, r3
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d005      	beq.n	80060f6 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ea:	687b      	ldr	r3, [r7, #4]
 80060ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060ee:	f043 0204 	orr.w	r2, r3, #4
 80060f2:	687b      	ldr	r3, [r7, #4]
 80060f4:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	681b      	ldr	r3, [r3, #0]
 80060fa:	685a      	ldr	r2, [r3, #4]
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006104:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006106:	687b      	ldr	r3, [r7, #4]
 8006108:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800610a:	4618      	mov	r0, r3
 800610c:	f7fe f94c 	bl	80043a8 <HAL_DMA_GetState>
 8006110:	4603      	mov	r3, r0
 8006112:	2b01      	cmp	r3, #1
 8006114:	d014      	beq.n	8006140 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006116:	687b      	ldr	r3, [r7, #4]
 8006118:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800611a:	4a4e      	ldr	r2, [pc, #312]	; (8006254 <I2C_Slave_STOPF+0x258>)
 800611c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006122:	4618      	mov	r0, r3
 8006124:	f7fd ff94 	bl	8004050 <HAL_DMA_Abort_IT>
 8006128:	4603      	mov	r3, r0
 800612a:	2b00      	cmp	r3, #0
 800612c:	d008      	beq.n	8006140 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006132:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006134:	687a      	ldr	r2, [r7, #4]
 8006136:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006138:	4610      	mov	r0, r2
 800613a:	4798      	blx	r3
 800613c:	e000      	b.n	8006140 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800613e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006144:	b29b      	uxth	r3, r3
 8006146:	2b00      	cmp	r3, #0
 8006148:	d03e      	beq.n	80061c8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800614a:	687b      	ldr	r3, [r7, #4]
 800614c:	681b      	ldr	r3, [r3, #0]
 800614e:	695b      	ldr	r3, [r3, #20]
 8006150:	f003 0304 	and.w	r3, r3, #4
 8006154:	2b04      	cmp	r3, #4
 8006156:	d112      	bne.n	800617e <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006158:	687b      	ldr	r3, [r7, #4]
 800615a:	681b      	ldr	r3, [r3, #0]
 800615c:	691a      	ldr	r2, [r3, #16]
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006162:	b2d2      	uxtb	r2, r2
 8006164:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800616a:	1c5a      	adds	r2, r3, #1
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8006170:	687b      	ldr	r3, [r7, #4]
 8006172:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006174:	b29b      	uxth	r3, r3
 8006176:	3b01      	subs	r3, #1
 8006178:	b29a      	uxth	r2, r3
 800617a:	687b      	ldr	r3, [r7, #4]
 800617c:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800617e:	687b      	ldr	r3, [r7, #4]
 8006180:	681b      	ldr	r3, [r3, #0]
 8006182:	695b      	ldr	r3, [r3, #20]
 8006184:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006188:	2b40      	cmp	r3, #64	; 0x40
 800618a:	d112      	bne.n	80061b2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800618c:	687b      	ldr	r3, [r7, #4]
 800618e:	681b      	ldr	r3, [r3, #0]
 8006190:	691a      	ldr	r2, [r3, #16]
 8006192:	687b      	ldr	r3, [r7, #4]
 8006194:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006196:	b2d2      	uxtb	r2, r2
 8006198:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800619a:	687b      	ldr	r3, [r7, #4]
 800619c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800619e:	1c5a      	adds	r2, r3, #1
 80061a0:	687b      	ldr	r3, [r7, #4]
 80061a2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80061a4:	687b      	ldr	r3, [r7, #4]
 80061a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061a8:	b29b      	uxth	r3, r3
 80061aa:	3b01      	subs	r3, #1
 80061ac:	b29a      	uxth	r2, r3
 80061ae:	687b      	ldr	r3, [r7, #4]
 80061b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80061b2:	687b      	ldr	r3, [r7, #4]
 80061b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80061b6:	b29b      	uxth	r3, r3
 80061b8:	2b00      	cmp	r3, #0
 80061ba:	d005      	beq.n	80061c8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80061bc:	687b      	ldr	r3, [r7, #4]
 80061be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061c0:	f043 0204 	orr.w	r2, r3, #4
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80061c8:	687b      	ldr	r3, [r7, #4]
 80061ca:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80061cc:	2b00      	cmp	r3, #0
 80061ce:	d003      	beq.n	80061d8 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80061d0:	6878      	ldr	r0, [r7, #4]
 80061d2:	f000 f8b3 	bl	800633c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80061d6:	e039      	b.n	800624c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80061d8:	7bfb      	ldrb	r3, [r7, #15]
 80061da:	2b2a      	cmp	r3, #42	; 0x2a
 80061dc:	d109      	bne.n	80061f2 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 80061de:	687b      	ldr	r3, [r7, #4]
 80061e0:	2200      	movs	r2, #0
 80061e2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2228      	movs	r2, #40	; 0x28
 80061e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80061ec:	6878      	ldr	r0, [r7, #4]
 80061ee:	f7ff f849 	bl	8005284 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80061f8:	b2db      	uxtb	r3, r3
 80061fa:	2b28      	cmp	r3, #40	; 0x28
 80061fc:	d111      	bne.n	8006222 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	4a15      	ldr	r2, [pc, #84]	; (8006258 <I2C_Slave_STOPF+0x25c>)
 8006202:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006204:	687b      	ldr	r3, [r7, #4]
 8006206:	2200      	movs	r2, #0
 8006208:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800620a:	687b      	ldr	r3, [r7, #4]
 800620c:	2220      	movs	r2, #32
 800620e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006212:	687b      	ldr	r3, [r7, #4]
 8006214:	2200      	movs	r2, #0
 8006216:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800621a:	6878      	ldr	r0, [r7, #4]
 800621c:	f7ff f84a 	bl	80052b4 <HAL_I2C_ListenCpltCallback>
}
 8006220:	e014      	b.n	800624c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006222:	687b      	ldr	r3, [r7, #4]
 8006224:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006226:	2b22      	cmp	r3, #34	; 0x22
 8006228:	d002      	beq.n	8006230 <I2C_Slave_STOPF+0x234>
 800622a:	7bfb      	ldrb	r3, [r7, #15]
 800622c:	2b22      	cmp	r3, #34	; 0x22
 800622e:	d10d      	bne.n	800624c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006230:	687b      	ldr	r3, [r7, #4]
 8006232:	2200      	movs	r2, #0
 8006234:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	2220      	movs	r2, #32
 800623a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	2200      	movs	r2, #0
 8006242:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006246:	6878      	ldr	r0, [r7, #4]
 8006248:	f7ff f81c 	bl	8005284 <HAL_I2C_SlaveRxCpltCallback>
}
 800624c:	bf00      	nop
 800624e:	3710      	adds	r7, #16
 8006250:	46bd      	mov	sp, r7
 8006252:	bd80      	pop	{r7, pc}
 8006254:	080065a1 	.word	0x080065a1
 8006258:	ffff0000 	.word	0xffff0000

0800625c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800625c:	b580      	push	{r7, lr}
 800625e:	b084      	sub	sp, #16
 8006260:	af00      	add	r7, sp, #0
 8006262:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006264:	687b      	ldr	r3, [r7, #4]
 8006266:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800626a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800626c:	687b      	ldr	r3, [r7, #4]
 800626e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006270:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	2b08      	cmp	r3, #8
 8006276:	d002      	beq.n	800627e <I2C_Slave_AF+0x22>
 8006278:	68bb      	ldr	r3, [r7, #8]
 800627a:	2b20      	cmp	r3, #32
 800627c:	d129      	bne.n	80062d2 <I2C_Slave_AF+0x76>
 800627e:	7bfb      	ldrb	r3, [r7, #15]
 8006280:	2b28      	cmp	r3, #40	; 0x28
 8006282:	d126      	bne.n	80062d2 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8006284:	687b      	ldr	r3, [r7, #4]
 8006286:	4a2c      	ldr	r2, [pc, #176]	; (8006338 <I2C_Slave_AF+0xdc>)
 8006288:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800628a:	687b      	ldr	r3, [r7, #4]
 800628c:	681b      	ldr	r3, [r3, #0]
 800628e:	685a      	ldr	r2, [r3, #4]
 8006290:	687b      	ldr	r3, [r7, #4]
 8006292:	681b      	ldr	r3, [r3, #0]
 8006294:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006298:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800629a:	687b      	ldr	r3, [r7, #4]
 800629c:	681b      	ldr	r3, [r3, #0]
 800629e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80062a2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80062a4:	687b      	ldr	r3, [r7, #4]
 80062a6:	681b      	ldr	r3, [r3, #0]
 80062a8:	681a      	ldr	r2, [r3, #0]
 80062aa:	687b      	ldr	r3, [r7, #4]
 80062ac:	681b      	ldr	r3, [r3, #0]
 80062ae:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062b2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80062b4:	687b      	ldr	r3, [r7, #4]
 80062b6:	2200      	movs	r2, #0
 80062b8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062ba:	687b      	ldr	r3, [r7, #4]
 80062bc:	2220      	movs	r2, #32
 80062be:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062c2:	687b      	ldr	r3, [r7, #4]
 80062c4:	2200      	movs	r2, #0
 80062c6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80062ca:	6878      	ldr	r0, [r7, #4]
 80062cc:	f7fe fff2 	bl	80052b4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80062d0:	e02e      	b.n	8006330 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80062d2:	7bfb      	ldrb	r3, [r7, #15]
 80062d4:	2b21      	cmp	r3, #33	; 0x21
 80062d6:	d126      	bne.n	8006326 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80062d8:	687b      	ldr	r3, [r7, #4]
 80062da:	4a17      	ldr	r2, [pc, #92]	; (8006338 <I2C_Slave_AF+0xdc>)
 80062dc:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2221      	movs	r2, #33	; 0x21
 80062e2:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80062e4:	687b      	ldr	r3, [r7, #4]
 80062e6:	2220      	movs	r2, #32
 80062e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	2200      	movs	r2, #0
 80062f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80062f4:	687b      	ldr	r3, [r7, #4]
 80062f6:	681b      	ldr	r3, [r3, #0]
 80062f8:	685a      	ldr	r2, [r3, #4]
 80062fa:	687b      	ldr	r3, [r7, #4]
 80062fc:	681b      	ldr	r3, [r3, #0]
 80062fe:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006302:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006304:	687b      	ldr	r3, [r7, #4]
 8006306:	681b      	ldr	r3, [r3, #0]
 8006308:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800630c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800630e:	687b      	ldr	r3, [r7, #4]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	681a      	ldr	r2, [r3, #0]
 8006314:	687b      	ldr	r3, [r7, #4]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800631c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800631e:	6878      	ldr	r0, [r7, #4]
 8006320:	f7fe ffa6 	bl	8005270 <HAL_I2C_SlaveTxCpltCallback>
}
 8006324:	e004      	b.n	8006330 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006326:	687b      	ldr	r3, [r7, #4]
 8006328:	681b      	ldr	r3, [r3, #0]
 800632a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800632e:	615a      	str	r2, [r3, #20]
}
 8006330:	bf00      	nop
 8006332:	3710      	adds	r7, #16
 8006334:	46bd      	mov	sp, r7
 8006336:	bd80      	pop	{r7, pc}
 8006338:	ffff0000 	.word	0xffff0000

0800633c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800633c:	b580      	push	{r7, lr}
 800633e:	b084      	sub	sp, #16
 8006340:	af00      	add	r7, sp, #0
 8006342:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800634a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006352:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006354:	7bbb      	ldrb	r3, [r7, #14]
 8006356:	2b10      	cmp	r3, #16
 8006358:	d002      	beq.n	8006360 <I2C_ITError+0x24>
 800635a:	7bbb      	ldrb	r3, [r7, #14]
 800635c:	2b40      	cmp	r3, #64	; 0x40
 800635e:	d10a      	bne.n	8006376 <I2C_ITError+0x3a>
 8006360:	7bfb      	ldrb	r3, [r7, #15]
 8006362:	2b22      	cmp	r3, #34	; 0x22
 8006364:	d107      	bne.n	8006376 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006366:	687b      	ldr	r3, [r7, #4]
 8006368:	681b      	ldr	r3, [r3, #0]
 800636a:	681a      	ldr	r2, [r3, #0]
 800636c:	687b      	ldr	r3, [r7, #4]
 800636e:	681b      	ldr	r3, [r3, #0]
 8006370:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006374:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8006376:	7bfb      	ldrb	r3, [r7, #15]
 8006378:	f003 0328 	and.w	r3, r3, #40	; 0x28
 800637c:	2b28      	cmp	r3, #40	; 0x28
 800637e:	d107      	bne.n	8006390 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	2200      	movs	r2, #0
 8006384:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8006386:	687b      	ldr	r3, [r7, #4]
 8006388:	2228      	movs	r2, #40	; 0x28
 800638a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 800638e:	e015      	b.n	80063bc <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	681b      	ldr	r3, [r3, #0]
 8006394:	685b      	ldr	r3, [r3, #4]
 8006396:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800639a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800639e:	d00a      	beq.n	80063b6 <I2C_ITError+0x7a>
 80063a0:	7bfb      	ldrb	r3, [r7, #15]
 80063a2:	2b60      	cmp	r3, #96	; 0x60
 80063a4:	d007      	beq.n	80063b6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80063a6:	687b      	ldr	r3, [r7, #4]
 80063a8:	2220      	movs	r2, #32
 80063aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80063ae:	687b      	ldr	r3, [r7, #4]
 80063b0:	2200      	movs	r2, #0
 80063b2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80063b6:	687b      	ldr	r3, [r7, #4]
 80063b8:	2200      	movs	r2, #0
 80063ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80063bc:	687b      	ldr	r3, [r7, #4]
 80063be:	681b      	ldr	r3, [r3, #0]
 80063c0:	685b      	ldr	r3, [r3, #4]
 80063c2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80063c6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80063ca:	d162      	bne.n	8006492 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80063cc:	687b      	ldr	r3, [r7, #4]
 80063ce:	681b      	ldr	r3, [r3, #0]
 80063d0:	685a      	ldr	r2, [r3, #4]
 80063d2:	687b      	ldr	r3, [r7, #4]
 80063d4:	681b      	ldr	r3, [r3, #0]
 80063d6:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80063da:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063e0:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80063e4:	b2db      	uxtb	r3, r3
 80063e6:	2b01      	cmp	r3, #1
 80063e8:	d020      	beq.n	800642c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063ee:	4a6a      	ldr	r2, [pc, #424]	; (8006598 <I2C_ITError+0x25c>)
 80063f0:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80063f2:	687b      	ldr	r3, [r7, #4]
 80063f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80063f6:	4618      	mov	r0, r3
 80063f8:	f7fd fe2a 	bl	8004050 <HAL_DMA_Abort_IT>
 80063fc:	4603      	mov	r3, r0
 80063fe:	2b00      	cmp	r3, #0
 8006400:	f000 8089 	beq.w	8006516 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006404:	687b      	ldr	r3, [r7, #4]
 8006406:	681b      	ldr	r3, [r3, #0]
 8006408:	681a      	ldr	r2, [r3, #0]
 800640a:	687b      	ldr	r3, [r7, #4]
 800640c:	681b      	ldr	r3, [r3, #0]
 800640e:	f022 0201 	bic.w	r2, r2, #1
 8006412:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006414:	687b      	ldr	r3, [r7, #4]
 8006416:	2220      	movs	r2, #32
 8006418:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800641c:	687b      	ldr	r3, [r7, #4]
 800641e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006420:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006422:	687a      	ldr	r2, [r7, #4]
 8006424:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006426:	4610      	mov	r0, r2
 8006428:	4798      	blx	r3
 800642a:	e074      	b.n	8006516 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800642c:	687b      	ldr	r3, [r7, #4]
 800642e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006430:	4a59      	ldr	r2, [pc, #356]	; (8006598 <I2C_ITError+0x25c>)
 8006432:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006434:	687b      	ldr	r3, [r7, #4]
 8006436:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006438:	4618      	mov	r0, r3
 800643a:	f7fd fe09 	bl	8004050 <HAL_DMA_Abort_IT>
 800643e:	4603      	mov	r3, r0
 8006440:	2b00      	cmp	r3, #0
 8006442:	d068      	beq.n	8006516 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006444:	687b      	ldr	r3, [r7, #4]
 8006446:	681b      	ldr	r3, [r3, #0]
 8006448:	695b      	ldr	r3, [r3, #20]
 800644a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800644e:	2b40      	cmp	r3, #64	; 0x40
 8006450:	d10b      	bne.n	800646a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006452:	687b      	ldr	r3, [r7, #4]
 8006454:	681b      	ldr	r3, [r3, #0]
 8006456:	691a      	ldr	r2, [r3, #16]
 8006458:	687b      	ldr	r3, [r7, #4]
 800645a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800645c:	b2d2      	uxtb	r2, r2
 800645e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006464:	1c5a      	adds	r2, r3, #1
 8006466:	687b      	ldr	r3, [r7, #4]
 8006468:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800646a:	687b      	ldr	r3, [r7, #4]
 800646c:	681b      	ldr	r3, [r3, #0]
 800646e:	681a      	ldr	r2, [r3, #0]
 8006470:	687b      	ldr	r3, [r7, #4]
 8006472:	681b      	ldr	r3, [r3, #0]
 8006474:	f022 0201 	bic.w	r2, r2, #1
 8006478:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	2220      	movs	r2, #32
 800647e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8006482:	687b      	ldr	r3, [r7, #4]
 8006484:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006486:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006488:	687a      	ldr	r2, [r7, #4]
 800648a:	6b92      	ldr	r2, [r2, #56]	; 0x38
 800648c:	4610      	mov	r0, r2
 800648e:	4798      	blx	r3
 8006490:	e041      	b.n	8006516 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006492:	687b      	ldr	r3, [r7, #4]
 8006494:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006498:	b2db      	uxtb	r3, r3
 800649a:	2b60      	cmp	r3, #96	; 0x60
 800649c:	d125      	bne.n	80064ea <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	2220      	movs	r2, #32
 80064a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80064a6:	687b      	ldr	r3, [r7, #4]
 80064a8:	2200      	movs	r2, #0
 80064aa:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064ac:	687b      	ldr	r3, [r7, #4]
 80064ae:	681b      	ldr	r3, [r3, #0]
 80064b0:	695b      	ldr	r3, [r3, #20]
 80064b2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064b6:	2b40      	cmp	r3, #64	; 0x40
 80064b8:	d10b      	bne.n	80064d2 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064ba:	687b      	ldr	r3, [r7, #4]
 80064bc:	681b      	ldr	r3, [r3, #0]
 80064be:	691a      	ldr	r2, [r3, #16]
 80064c0:	687b      	ldr	r3, [r7, #4]
 80064c2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064c4:	b2d2      	uxtb	r2, r2
 80064c6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80064c8:	687b      	ldr	r3, [r7, #4]
 80064ca:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80064cc:	1c5a      	adds	r2, r3, #1
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80064d2:	687b      	ldr	r3, [r7, #4]
 80064d4:	681b      	ldr	r3, [r3, #0]
 80064d6:	681a      	ldr	r2, [r3, #0]
 80064d8:	687b      	ldr	r3, [r7, #4]
 80064da:	681b      	ldr	r3, [r3, #0]
 80064dc:	f022 0201 	bic.w	r2, r2, #1
 80064e0:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80064e2:	6878      	ldr	r0, [r7, #4]
 80064e4:	f7fe ff0e 	bl	8005304 <HAL_I2C_AbortCpltCallback>
 80064e8:	e015      	b.n	8006516 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80064ea:	687b      	ldr	r3, [r7, #4]
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	695b      	ldr	r3, [r3, #20]
 80064f0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80064f4:	2b40      	cmp	r3, #64	; 0x40
 80064f6:	d10b      	bne.n	8006510 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80064f8:	687b      	ldr	r3, [r7, #4]
 80064fa:	681b      	ldr	r3, [r3, #0]
 80064fc:	691a      	ldr	r2, [r3, #16]
 80064fe:	687b      	ldr	r3, [r7, #4]
 8006500:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006502:	b2d2      	uxtb	r2, r2
 8006504:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006506:	687b      	ldr	r3, [r7, #4]
 8006508:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800650a:	1c5a      	adds	r2, r3, #1
 800650c:	687b      	ldr	r3, [r7, #4]
 800650e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006510:	6878      	ldr	r0, [r7, #4]
 8006512:	f7fe feed 	bl	80052f0 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006516:	687b      	ldr	r3, [r7, #4]
 8006518:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800651a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800651c:	68bb      	ldr	r3, [r7, #8]
 800651e:	f003 0301 	and.w	r3, r3, #1
 8006522:	2b00      	cmp	r3, #0
 8006524:	d10e      	bne.n	8006544 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006526:	68bb      	ldr	r3, [r7, #8]
 8006528:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800652c:	2b00      	cmp	r3, #0
 800652e:	d109      	bne.n	8006544 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006530:	68bb      	ldr	r3, [r7, #8]
 8006532:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006536:	2b00      	cmp	r3, #0
 8006538:	d104      	bne.n	8006544 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800653a:	68bb      	ldr	r3, [r7, #8]
 800653c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006540:	2b00      	cmp	r3, #0
 8006542:	d007      	beq.n	8006554 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006544:	687b      	ldr	r3, [r7, #4]
 8006546:	681b      	ldr	r3, [r3, #0]
 8006548:	685a      	ldr	r2, [r3, #4]
 800654a:	687b      	ldr	r3, [r7, #4]
 800654c:	681b      	ldr	r3, [r3, #0]
 800654e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006552:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006554:	687b      	ldr	r3, [r7, #4]
 8006556:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800655a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800655c:	687b      	ldr	r3, [r7, #4]
 800655e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006560:	f003 0304 	and.w	r3, r3, #4
 8006564:	2b04      	cmp	r3, #4
 8006566:	d113      	bne.n	8006590 <I2C_ITError+0x254>
 8006568:	7bfb      	ldrb	r3, [r7, #15]
 800656a:	2b28      	cmp	r3, #40	; 0x28
 800656c:	d110      	bne.n	8006590 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800656e:	687b      	ldr	r3, [r7, #4]
 8006570:	4a0a      	ldr	r2, [pc, #40]	; (800659c <I2C_ITError+0x260>)
 8006572:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8006574:	687b      	ldr	r3, [r7, #4]
 8006576:	2200      	movs	r2, #0
 8006578:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	2220      	movs	r2, #32
 800657e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	2200      	movs	r2, #0
 8006586:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 800658a:	6878      	ldr	r0, [r7, #4]
 800658c:	f7fe fe92 	bl	80052b4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8006590:	bf00      	nop
 8006592:	3710      	adds	r7, #16
 8006594:	46bd      	mov	sp, r7
 8006596:	bd80      	pop	{r7, pc}
 8006598:	080065a1 	.word	0x080065a1
 800659c:	ffff0000 	.word	0xffff0000

080065a0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80065a0:	b580      	push	{r7, lr}
 80065a2:	b086      	sub	sp, #24
 80065a4:	af00      	add	r7, sp, #0
 80065a6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80065a8:	2300      	movs	r3, #0
 80065aa:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80065ac:	687b      	ldr	r3, [r7, #4]
 80065ae:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80065b0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80065b2:	697b      	ldr	r3, [r7, #20]
 80065b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80065ba:	4b4b      	ldr	r3, [pc, #300]	; (80066e8 <I2C_DMAAbort+0x148>)
 80065bc:	681b      	ldr	r3, [r3, #0]
 80065be:	08db      	lsrs	r3, r3, #3
 80065c0:	4a4a      	ldr	r2, [pc, #296]	; (80066ec <I2C_DMAAbort+0x14c>)
 80065c2:	fba2 2303 	umull	r2, r3, r2, r3
 80065c6:	0a1a      	lsrs	r2, r3, #8
 80065c8:	4613      	mov	r3, r2
 80065ca:	009b      	lsls	r3, r3, #2
 80065cc:	4413      	add	r3, r2
 80065ce:	00da      	lsls	r2, r3, #3
 80065d0:	1ad3      	subs	r3, r2, r3
 80065d2:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 80065d4:	68fb      	ldr	r3, [r7, #12]
 80065d6:	2b00      	cmp	r3, #0
 80065d8:	d106      	bne.n	80065e8 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 80065da:	697b      	ldr	r3, [r7, #20]
 80065dc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80065de:	f043 0220 	orr.w	r2, r3, #32
 80065e2:	697b      	ldr	r3, [r7, #20]
 80065e4:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 80065e6:	e00a      	b.n	80065fe <I2C_DMAAbort+0x5e>
    }
    count--;
 80065e8:	68fb      	ldr	r3, [r7, #12]
 80065ea:	3b01      	subs	r3, #1
 80065ec:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	681b      	ldr	r3, [r3, #0]
 80065f2:	681b      	ldr	r3, [r3, #0]
 80065f4:	f403 7300 	and.w	r3, r3, #512	; 0x200
 80065f8:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 80065fc:	d0ea      	beq.n	80065d4 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 80065fe:	697b      	ldr	r3, [r7, #20]
 8006600:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006602:	2b00      	cmp	r3, #0
 8006604:	d003      	beq.n	800660e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006606:	697b      	ldr	r3, [r7, #20]
 8006608:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800660a:	2200      	movs	r2, #0
 800660c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800660e:	697b      	ldr	r3, [r7, #20]
 8006610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006612:	2b00      	cmp	r3, #0
 8006614:	d003      	beq.n	800661e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006616:	697b      	ldr	r3, [r7, #20]
 8006618:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800661a:	2200      	movs	r2, #0
 800661c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800661e:	697b      	ldr	r3, [r7, #20]
 8006620:	681b      	ldr	r3, [r3, #0]
 8006622:	681a      	ldr	r2, [r3, #0]
 8006624:	697b      	ldr	r3, [r7, #20]
 8006626:	681b      	ldr	r3, [r3, #0]
 8006628:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800662c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800662e:	697b      	ldr	r3, [r7, #20]
 8006630:	2200      	movs	r2, #0
 8006632:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006634:	697b      	ldr	r3, [r7, #20]
 8006636:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006638:	2b00      	cmp	r3, #0
 800663a:	d003      	beq.n	8006644 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800663c:	697b      	ldr	r3, [r7, #20]
 800663e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006640:	2200      	movs	r2, #0
 8006642:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006644:	697b      	ldr	r3, [r7, #20]
 8006646:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006648:	2b00      	cmp	r3, #0
 800664a:	d003      	beq.n	8006654 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800664c:	697b      	ldr	r3, [r7, #20]
 800664e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006650:	2200      	movs	r2, #0
 8006652:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006654:	697b      	ldr	r3, [r7, #20]
 8006656:	681b      	ldr	r3, [r3, #0]
 8006658:	681a      	ldr	r2, [r3, #0]
 800665a:	697b      	ldr	r3, [r7, #20]
 800665c:	681b      	ldr	r3, [r3, #0]
 800665e:	f022 0201 	bic.w	r2, r2, #1
 8006662:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006664:	697b      	ldr	r3, [r7, #20]
 8006666:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800666a:	b2db      	uxtb	r3, r3
 800666c:	2b60      	cmp	r3, #96	; 0x60
 800666e:	d10e      	bne.n	800668e <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8006670:	697b      	ldr	r3, [r7, #20]
 8006672:	2220      	movs	r2, #32
 8006674:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8006678:	697b      	ldr	r3, [r7, #20]
 800667a:	2200      	movs	r2, #0
 800667c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8006680:	697b      	ldr	r3, [r7, #20]
 8006682:	2200      	movs	r2, #0
 8006684:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006686:	6978      	ldr	r0, [r7, #20]
 8006688:	f7fe fe3c 	bl	8005304 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 800668c:	e027      	b.n	80066de <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800668e:	7cfb      	ldrb	r3, [r7, #19]
 8006690:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8006694:	2b28      	cmp	r3, #40	; 0x28
 8006696:	d117      	bne.n	80066c8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8006698:	697b      	ldr	r3, [r7, #20]
 800669a:	681b      	ldr	r3, [r3, #0]
 800669c:	681a      	ldr	r2, [r3, #0]
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	681b      	ldr	r3, [r3, #0]
 80066a2:	f042 0201 	orr.w	r2, r2, #1
 80066a6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80066a8:	697b      	ldr	r3, [r7, #20]
 80066aa:	681b      	ldr	r3, [r3, #0]
 80066ac:	681a      	ldr	r2, [r3, #0]
 80066ae:	697b      	ldr	r3, [r7, #20]
 80066b0:	681b      	ldr	r3, [r3, #0]
 80066b2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80066b6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80066b8:	697b      	ldr	r3, [r7, #20]
 80066ba:	2200      	movs	r2, #0
 80066bc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80066be:	697b      	ldr	r3, [r7, #20]
 80066c0:	2228      	movs	r2, #40	; 0x28
 80066c2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80066c6:	e007      	b.n	80066d8 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80066c8:	697b      	ldr	r3, [r7, #20]
 80066ca:	2220      	movs	r2, #32
 80066cc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80066d0:	697b      	ldr	r3, [r7, #20]
 80066d2:	2200      	movs	r2, #0
 80066d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 80066d8:	6978      	ldr	r0, [r7, #20]
 80066da:	f7fe fe09 	bl	80052f0 <HAL_I2C_ErrorCallback>
}
 80066de:	bf00      	nop
 80066e0:	3718      	adds	r7, #24
 80066e2:	46bd      	mov	sp, r7
 80066e4:	bd80      	pop	{r7, pc}
 80066e6:	bf00      	nop
 80066e8:	2000001c 	.word	0x2000001c
 80066ec:	14f8b589 	.word	0x14f8b589

080066f0 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 80066f0:	b480      	push	{r7}
 80066f2:	b085      	sub	sp, #20
 80066f4:	af00      	add	r7, sp, #0
 80066f6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80066f8:	2300      	movs	r3, #0
 80066fa:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 80066fc:	4b13      	ldr	r3, [pc, #76]	; (800674c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 80066fe:	681b      	ldr	r3, [r3, #0]
 8006700:	08db      	lsrs	r3, r3, #3
 8006702:	4a13      	ldr	r2, [pc, #76]	; (8006750 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006704:	fba2 2303 	umull	r2, r3, r2, r3
 8006708:	0a1a      	lsrs	r2, r3, #8
 800670a:	4613      	mov	r3, r2
 800670c:	009b      	lsls	r3, r3, #2
 800670e:	4413      	add	r3, r2
 8006710:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006712:	68fb      	ldr	r3, [r7, #12]
 8006714:	3b01      	subs	r3, #1
 8006716:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006718:	68fb      	ldr	r3, [r7, #12]
 800671a:	2b00      	cmp	r3, #0
 800671c:	d107      	bne.n	800672e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006722:	f043 0220 	orr.w	r2, r3, #32
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800672a:	2301      	movs	r3, #1
 800672c:	e008      	b.n	8006740 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800672e:	687b      	ldr	r3, [r7, #4]
 8006730:	681b      	ldr	r3, [r3, #0]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006738:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800673c:	d0e9      	beq.n	8006712 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800673e:	2300      	movs	r3, #0
}
 8006740:	4618      	mov	r0, r3
 8006742:	3714      	adds	r7, #20
 8006744:	46bd      	mov	sp, r7
 8006746:	f85d 7b04 	ldr.w	r7, [sp], #4
 800674a:	4770      	bx	lr
 800674c:	2000001c 	.word	0x2000001c
 8006750:	14f8b589 	.word	0x14f8b589

08006754 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006754:	b480      	push	{r7}
 8006756:	b083      	sub	sp, #12
 8006758:	af00      	add	r7, sp, #0
 800675a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800675c:	687b      	ldr	r3, [r7, #4]
 800675e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006760:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006764:	d103      	bne.n	800676e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006766:	687b      	ldr	r3, [r7, #4]
 8006768:	2201      	movs	r2, #1
 800676a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800676c:	e007      	b.n	800677e <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800676e:	687b      	ldr	r3, [r7, #4]
 8006770:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006772:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8006776:	d102      	bne.n	800677e <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	2208      	movs	r2, #8
 800677c:	62da      	str	r2, [r3, #44]	; 0x2c
}
 800677e:	bf00      	nop
 8006780:	370c      	adds	r7, #12
 8006782:	46bd      	mov	sp, r7
 8006784:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006788:	4770      	bx	lr
	...

0800678c <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 800678c:	b580      	push	{r7, lr}
 800678e:	b086      	sub	sp, #24
 8006790:	af00      	add	r7, sp, #0
 8006792:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8006794:	687b      	ldr	r3, [r7, #4]
 8006796:	2b00      	cmp	r3, #0
 8006798:	d101      	bne.n	800679e <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800679a:	2301      	movs	r3, #1
 800679c:	e264      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800679e:	687b      	ldr	r3, [r7, #4]
 80067a0:	681b      	ldr	r3, [r3, #0]
 80067a2:	f003 0301 	and.w	r3, r3, #1
 80067a6:	2b00      	cmp	r3, #0
 80067a8:	d075      	beq.n	8006896 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067aa:	4ba3      	ldr	r3, [pc, #652]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80067ac:	689b      	ldr	r3, [r3, #8]
 80067ae:	f003 030c 	and.w	r3, r3, #12
 80067b2:	2b04      	cmp	r3, #4
 80067b4:	d00c      	beq.n	80067d0 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067b6:	4ba0      	ldr	r3, [pc, #640]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80067b8:	689b      	ldr	r3, [r3, #8]
 80067ba:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80067be:	2b08      	cmp	r3, #8
 80067c0:	d112      	bne.n	80067e8 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80067c2:	4b9d      	ldr	r3, [pc, #628]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80067c4:	685b      	ldr	r3, [r3, #4]
 80067c6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067ca:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80067ce:	d10b      	bne.n	80067e8 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067d0:	4b99      	ldr	r3, [pc, #612]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80067d2:	681b      	ldr	r3, [r3, #0]
 80067d4:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067d8:	2b00      	cmp	r3, #0
 80067da:	d05b      	beq.n	8006894 <HAL_RCC_OscConfig+0x108>
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	685b      	ldr	r3, [r3, #4]
 80067e0:	2b00      	cmp	r3, #0
 80067e2:	d157      	bne.n	8006894 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80067e4:	2301      	movs	r3, #1
 80067e6:	e23f      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	685b      	ldr	r3, [r3, #4]
 80067ec:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80067f0:	d106      	bne.n	8006800 <HAL_RCC_OscConfig+0x74>
 80067f2:	4b91      	ldr	r3, [pc, #580]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80067f4:	681b      	ldr	r3, [r3, #0]
 80067f6:	4a90      	ldr	r2, [pc, #576]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80067fc:	6013      	str	r3, [r2, #0]
 80067fe:	e01d      	b.n	800683c <HAL_RCC_OscConfig+0xb0>
 8006800:	687b      	ldr	r3, [r7, #4]
 8006802:	685b      	ldr	r3, [r3, #4]
 8006804:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006808:	d10c      	bne.n	8006824 <HAL_RCC_OscConfig+0x98>
 800680a:	4b8b      	ldr	r3, [pc, #556]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 800680c:	681b      	ldr	r3, [r3, #0]
 800680e:	4a8a      	ldr	r2, [pc, #552]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006810:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006814:	6013      	str	r3, [r2, #0]
 8006816:	4b88      	ldr	r3, [pc, #544]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006818:	681b      	ldr	r3, [r3, #0]
 800681a:	4a87      	ldr	r2, [pc, #540]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 800681c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006820:	6013      	str	r3, [r2, #0]
 8006822:	e00b      	b.n	800683c <HAL_RCC_OscConfig+0xb0>
 8006824:	4b84      	ldr	r3, [pc, #528]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006826:	681b      	ldr	r3, [r3, #0]
 8006828:	4a83      	ldr	r2, [pc, #524]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 800682a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800682e:	6013      	str	r3, [r2, #0]
 8006830:	4b81      	ldr	r3, [pc, #516]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006832:	681b      	ldr	r3, [r3, #0]
 8006834:	4a80      	ldr	r2, [pc, #512]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006836:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800683a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	685b      	ldr	r3, [r3, #4]
 8006840:	2b00      	cmp	r3, #0
 8006842:	d013      	beq.n	800686c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006844:	f7fd f91a 	bl	8003a7c <HAL_GetTick>
 8006848:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800684a:	e008      	b.n	800685e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800684c:	f7fd f916 	bl	8003a7c <HAL_GetTick>
 8006850:	4602      	mov	r2, r0
 8006852:	693b      	ldr	r3, [r7, #16]
 8006854:	1ad3      	subs	r3, r2, r3
 8006856:	2b64      	cmp	r3, #100	; 0x64
 8006858:	d901      	bls.n	800685e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800685a:	2303      	movs	r3, #3
 800685c:	e204      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800685e:	4b76      	ldr	r3, [pc, #472]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006860:	681b      	ldr	r3, [r3, #0]
 8006862:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006866:	2b00      	cmp	r3, #0
 8006868:	d0f0      	beq.n	800684c <HAL_RCC_OscConfig+0xc0>
 800686a:	e014      	b.n	8006896 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800686c:	f7fd f906 	bl	8003a7c <HAL_GetTick>
 8006870:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006872:	e008      	b.n	8006886 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8006874:	f7fd f902 	bl	8003a7c <HAL_GetTick>
 8006878:	4602      	mov	r2, r0
 800687a:	693b      	ldr	r3, [r7, #16]
 800687c:	1ad3      	subs	r3, r2, r3
 800687e:	2b64      	cmp	r3, #100	; 0x64
 8006880:	d901      	bls.n	8006886 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8006882:	2303      	movs	r3, #3
 8006884:	e1f0      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8006886:	4b6c      	ldr	r3, [pc, #432]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006888:	681b      	ldr	r3, [r3, #0]
 800688a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800688e:	2b00      	cmp	r3, #0
 8006890:	d1f0      	bne.n	8006874 <HAL_RCC_OscConfig+0xe8>
 8006892:	e000      	b.n	8006896 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006894:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8006896:	687b      	ldr	r3, [r7, #4]
 8006898:	681b      	ldr	r3, [r3, #0]
 800689a:	f003 0302 	and.w	r3, r3, #2
 800689e:	2b00      	cmp	r3, #0
 80068a0:	d063      	beq.n	800696a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068a2:	4b65      	ldr	r3, [pc, #404]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80068a4:	689b      	ldr	r3, [r3, #8]
 80068a6:	f003 030c 	and.w	r3, r3, #12
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d00b      	beq.n	80068c6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ae:	4b62      	ldr	r3, [pc, #392]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80068b0:	689b      	ldr	r3, [r3, #8]
 80068b2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80068b6:	2b08      	cmp	r3, #8
 80068b8:	d11c      	bne.n	80068f4 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80068ba:	4b5f      	ldr	r3, [pc, #380]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80068bc:	685b      	ldr	r3, [r3, #4]
 80068be:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80068c2:	2b00      	cmp	r3, #0
 80068c4:	d116      	bne.n	80068f4 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068c6:	4b5c      	ldr	r3, [pc, #368]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80068c8:	681b      	ldr	r3, [r3, #0]
 80068ca:	f003 0302 	and.w	r3, r3, #2
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d005      	beq.n	80068de <HAL_RCC_OscConfig+0x152>
 80068d2:	687b      	ldr	r3, [r7, #4]
 80068d4:	68db      	ldr	r3, [r3, #12]
 80068d6:	2b01      	cmp	r3, #1
 80068d8:	d001      	beq.n	80068de <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80068da:	2301      	movs	r3, #1
 80068dc:	e1c4      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80068de:	4b56      	ldr	r3, [pc, #344]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80068e0:	681b      	ldr	r3, [r3, #0]
 80068e2:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80068e6:	687b      	ldr	r3, [r7, #4]
 80068e8:	691b      	ldr	r3, [r3, #16]
 80068ea:	00db      	lsls	r3, r3, #3
 80068ec:	4952      	ldr	r1, [pc, #328]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80068ee:	4313      	orrs	r3, r2
 80068f0:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80068f2:	e03a      	b.n	800696a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80068f4:	687b      	ldr	r3, [r7, #4]
 80068f6:	68db      	ldr	r3, [r3, #12]
 80068f8:	2b00      	cmp	r3, #0
 80068fa:	d020      	beq.n	800693e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80068fc:	4b4f      	ldr	r3, [pc, #316]	; (8006a3c <HAL_RCC_OscConfig+0x2b0>)
 80068fe:	2201      	movs	r2, #1
 8006900:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006902:	f7fd f8bb 	bl	8003a7c <HAL_GetTick>
 8006906:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006908:	e008      	b.n	800691c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800690a:	f7fd f8b7 	bl	8003a7c <HAL_GetTick>
 800690e:	4602      	mov	r2, r0
 8006910:	693b      	ldr	r3, [r7, #16]
 8006912:	1ad3      	subs	r3, r2, r3
 8006914:	2b02      	cmp	r3, #2
 8006916:	d901      	bls.n	800691c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006918:	2303      	movs	r3, #3
 800691a:	e1a5      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800691c:	4b46      	ldr	r3, [pc, #280]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	f003 0302 	and.w	r3, r3, #2
 8006924:	2b00      	cmp	r3, #0
 8006926:	d0f0      	beq.n	800690a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006928:	4b43      	ldr	r3, [pc, #268]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 800692a:	681b      	ldr	r3, [r3, #0]
 800692c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	691b      	ldr	r3, [r3, #16]
 8006934:	00db      	lsls	r3, r3, #3
 8006936:	4940      	ldr	r1, [pc, #256]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006938:	4313      	orrs	r3, r2
 800693a:	600b      	str	r3, [r1, #0]
 800693c:	e015      	b.n	800696a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800693e:	4b3f      	ldr	r3, [pc, #252]	; (8006a3c <HAL_RCC_OscConfig+0x2b0>)
 8006940:	2200      	movs	r2, #0
 8006942:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006944:	f7fd f89a 	bl	8003a7c <HAL_GetTick>
 8006948:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800694a:	e008      	b.n	800695e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800694c:	f7fd f896 	bl	8003a7c <HAL_GetTick>
 8006950:	4602      	mov	r2, r0
 8006952:	693b      	ldr	r3, [r7, #16]
 8006954:	1ad3      	subs	r3, r2, r3
 8006956:	2b02      	cmp	r3, #2
 8006958:	d901      	bls.n	800695e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800695a:	2303      	movs	r3, #3
 800695c:	e184      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800695e:	4b36      	ldr	r3, [pc, #216]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	f003 0302 	and.w	r3, r3, #2
 8006966:	2b00      	cmp	r3, #0
 8006968:	d1f0      	bne.n	800694c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800696a:	687b      	ldr	r3, [r7, #4]
 800696c:	681b      	ldr	r3, [r3, #0]
 800696e:	f003 0308 	and.w	r3, r3, #8
 8006972:	2b00      	cmp	r3, #0
 8006974:	d030      	beq.n	80069d8 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8006976:	687b      	ldr	r3, [r7, #4]
 8006978:	695b      	ldr	r3, [r3, #20]
 800697a:	2b00      	cmp	r3, #0
 800697c:	d016      	beq.n	80069ac <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800697e:	4b30      	ldr	r3, [pc, #192]	; (8006a40 <HAL_RCC_OscConfig+0x2b4>)
 8006980:	2201      	movs	r2, #1
 8006982:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006984:	f7fd f87a 	bl	8003a7c <HAL_GetTick>
 8006988:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800698a:	e008      	b.n	800699e <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800698c:	f7fd f876 	bl	8003a7c <HAL_GetTick>
 8006990:	4602      	mov	r2, r0
 8006992:	693b      	ldr	r3, [r7, #16]
 8006994:	1ad3      	subs	r3, r2, r3
 8006996:	2b02      	cmp	r3, #2
 8006998:	d901      	bls.n	800699e <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800699a:	2303      	movs	r3, #3
 800699c:	e164      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800699e:	4b26      	ldr	r3, [pc, #152]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80069a0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069a2:	f003 0302 	and.w	r3, r3, #2
 80069a6:	2b00      	cmp	r3, #0
 80069a8:	d0f0      	beq.n	800698c <HAL_RCC_OscConfig+0x200>
 80069aa:	e015      	b.n	80069d8 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80069ac:	4b24      	ldr	r3, [pc, #144]	; (8006a40 <HAL_RCC_OscConfig+0x2b4>)
 80069ae:	2200      	movs	r2, #0
 80069b0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80069b2:	f7fd f863 	bl	8003a7c <HAL_GetTick>
 80069b6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069b8:	e008      	b.n	80069cc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80069ba:	f7fd f85f 	bl	8003a7c <HAL_GetTick>
 80069be:	4602      	mov	r2, r0
 80069c0:	693b      	ldr	r3, [r7, #16]
 80069c2:	1ad3      	subs	r3, r2, r3
 80069c4:	2b02      	cmp	r3, #2
 80069c6:	d901      	bls.n	80069cc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80069c8:	2303      	movs	r3, #3
 80069ca:	e14d      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80069cc:	4b1a      	ldr	r3, [pc, #104]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80069ce:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80069d0:	f003 0302 	and.w	r3, r3, #2
 80069d4:	2b00      	cmp	r3, #0
 80069d6:	d1f0      	bne.n	80069ba <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	681b      	ldr	r3, [r3, #0]
 80069dc:	f003 0304 	and.w	r3, r3, #4
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	f000 80a0 	beq.w	8006b26 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80069e6:	2300      	movs	r3, #0
 80069e8:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80069ea:	4b13      	ldr	r3, [pc, #76]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80069ec:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069ee:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80069f2:	2b00      	cmp	r3, #0
 80069f4:	d10f      	bne.n	8006a16 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80069f6:	2300      	movs	r3, #0
 80069f8:	60bb      	str	r3, [r7, #8]
 80069fa:	4b0f      	ldr	r3, [pc, #60]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 80069fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80069fe:	4a0e      	ldr	r2, [pc, #56]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006a00:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006a04:	6413      	str	r3, [r2, #64]	; 0x40
 8006a06:	4b0c      	ldr	r3, [pc, #48]	; (8006a38 <HAL_RCC_OscConfig+0x2ac>)
 8006a08:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a0a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006a0e:	60bb      	str	r3, [r7, #8]
 8006a10:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006a12:	2301      	movs	r3, #1
 8006a14:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a16:	4b0b      	ldr	r3, [pc, #44]	; (8006a44 <HAL_RCC_OscConfig+0x2b8>)
 8006a18:	681b      	ldr	r3, [r3, #0]
 8006a1a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a1e:	2b00      	cmp	r3, #0
 8006a20:	d121      	bne.n	8006a66 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006a22:	4b08      	ldr	r3, [pc, #32]	; (8006a44 <HAL_RCC_OscConfig+0x2b8>)
 8006a24:	681b      	ldr	r3, [r3, #0]
 8006a26:	4a07      	ldr	r2, [pc, #28]	; (8006a44 <HAL_RCC_OscConfig+0x2b8>)
 8006a28:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8006a2c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8006a2e:	f7fd f825 	bl	8003a7c <HAL_GetTick>
 8006a32:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a34:	e011      	b.n	8006a5a <HAL_RCC_OscConfig+0x2ce>
 8006a36:	bf00      	nop
 8006a38:	40023800 	.word	0x40023800
 8006a3c:	42470000 	.word	0x42470000
 8006a40:	42470e80 	.word	0x42470e80
 8006a44:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006a48:	f7fd f818 	bl	8003a7c <HAL_GetTick>
 8006a4c:	4602      	mov	r2, r0
 8006a4e:	693b      	ldr	r3, [r7, #16]
 8006a50:	1ad3      	subs	r3, r2, r3
 8006a52:	2b02      	cmp	r3, #2
 8006a54:	d901      	bls.n	8006a5a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006a56:	2303      	movs	r3, #3
 8006a58:	e106      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006a5a:	4b85      	ldr	r3, [pc, #532]	; (8006c70 <HAL_RCC_OscConfig+0x4e4>)
 8006a5c:	681b      	ldr	r3, [r3, #0]
 8006a5e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006a62:	2b00      	cmp	r3, #0
 8006a64:	d0f0      	beq.n	8006a48 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006a66:	687b      	ldr	r3, [r7, #4]
 8006a68:	689b      	ldr	r3, [r3, #8]
 8006a6a:	2b01      	cmp	r3, #1
 8006a6c:	d106      	bne.n	8006a7c <HAL_RCC_OscConfig+0x2f0>
 8006a6e:	4b81      	ldr	r3, [pc, #516]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006a70:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a72:	4a80      	ldr	r2, [pc, #512]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006a74:	f043 0301 	orr.w	r3, r3, #1
 8006a78:	6713      	str	r3, [r2, #112]	; 0x70
 8006a7a:	e01c      	b.n	8006ab6 <HAL_RCC_OscConfig+0x32a>
 8006a7c:	687b      	ldr	r3, [r7, #4]
 8006a7e:	689b      	ldr	r3, [r3, #8]
 8006a80:	2b05      	cmp	r3, #5
 8006a82:	d10c      	bne.n	8006a9e <HAL_RCC_OscConfig+0x312>
 8006a84:	4b7b      	ldr	r3, [pc, #492]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006a86:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a88:	4a7a      	ldr	r2, [pc, #488]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006a8a:	f043 0304 	orr.w	r3, r3, #4
 8006a8e:	6713      	str	r3, [r2, #112]	; 0x70
 8006a90:	4b78      	ldr	r3, [pc, #480]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006a92:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a94:	4a77      	ldr	r2, [pc, #476]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006a96:	f043 0301 	orr.w	r3, r3, #1
 8006a9a:	6713      	str	r3, [r2, #112]	; 0x70
 8006a9c:	e00b      	b.n	8006ab6 <HAL_RCC_OscConfig+0x32a>
 8006a9e:	4b75      	ldr	r3, [pc, #468]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006aa0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aa2:	4a74      	ldr	r2, [pc, #464]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006aa4:	f023 0301 	bic.w	r3, r3, #1
 8006aa8:	6713      	str	r3, [r2, #112]	; 0x70
 8006aaa:	4b72      	ldr	r3, [pc, #456]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006aac:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006aae:	4a71      	ldr	r2, [pc, #452]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006ab0:	f023 0304 	bic.w	r3, r3, #4
 8006ab4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8006ab6:	687b      	ldr	r3, [r7, #4]
 8006ab8:	689b      	ldr	r3, [r3, #8]
 8006aba:	2b00      	cmp	r3, #0
 8006abc:	d015      	beq.n	8006aea <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8006abe:	f7fc ffdd 	bl	8003a7c <HAL_GetTick>
 8006ac2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006ac4:	e00a      	b.n	8006adc <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006ac6:	f7fc ffd9 	bl	8003a7c <HAL_GetTick>
 8006aca:	4602      	mov	r2, r0
 8006acc:	693b      	ldr	r3, [r7, #16]
 8006ace:	1ad3      	subs	r3, r2, r3
 8006ad0:	f241 3288 	movw	r2, #5000	; 0x1388
 8006ad4:	4293      	cmp	r3, r2
 8006ad6:	d901      	bls.n	8006adc <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006ad8:	2303      	movs	r3, #3
 8006ada:	e0c5      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006adc:	4b65      	ldr	r3, [pc, #404]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006ade:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006ae0:	f003 0302 	and.w	r3, r3, #2
 8006ae4:	2b00      	cmp	r3, #0
 8006ae6:	d0ee      	beq.n	8006ac6 <HAL_RCC_OscConfig+0x33a>
 8006ae8:	e014      	b.n	8006b14 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006aea:	f7fc ffc7 	bl	8003a7c <HAL_GetTick>
 8006aee:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006af0:	e00a      	b.n	8006b08 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006af2:	f7fc ffc3 	bl	8003a7c <HAL_GetTick>
 8006af6:	4602      	mov	r2, r0
 8006af8:	693b      	ldr	r3, [r7, #16]
 8006afa:	1ad3      	subs	r3, r2, r3
 8006afc:	f241 3288 	movw	r2, #5000	; 0x1388
 8006b00:	4293      	cmp	r3, r2
 8006b02:	d901      	bls.n	8006b08 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006b04:	2303      	movs	r3, #3
 8006b06:	e0af      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006b08:	4b5a      	ldr	r3, [pc, #360]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006b0a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006b0c:	f003 0302 	and.w	r3, r3, #2
 8006b10:	2b00      	cmp	r3, #0
 8006b12:	d1ee      	bne.n	8006af2 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006b14:	7dfb      	ldrb	r3, [r7, #23]
 8006b16:	2b01      	cmp	r3, #1
 8006b18:	d105      	bne.n	8006b26 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006b1a:	4b56      	ldr	r3, [pc, #344]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006b1c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006b1e:	4a55      	ldr	r2, [pc, #340]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006b20:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006b24:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b00      	cmp	r3, #0
 8006b2c:	f000 809b 	beq.w	8006c66 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006b30:	4b50      	ldr	r3, [pc, #320]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006b32:	689b      	ldr	r3, [r3, #8]
 8006b34:	f003 030c 	and.w	r3, r3, #12
 8006b38:	2b08      	cmp	r3, #8
 8006b3a:	d05c      	beq.n	8006bf6 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006b3c:	687b      	ldr	r3, [r7, #4]
 8006b3e:	699b      	ldr	r3, [r3, #24]
 8006b40:	2b02      	cmp	r3, #2
 8006b42:	d141      	bne.n	8006bc8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006b44:	4b4c      	ldr	r3, [pc, #304]	; (8006c78 <HAL_RCC_OscConfig+0x4ec>)
 8006b46:	2200      	movs	r2, #0
 8006b48:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006b4a:	f7fc ff97 	bl	8003a7c <HAL_GetTick>
 8006b4e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b50:	e008      	b.n	8006b64 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b52:	f7fc ff93 	bl	8003a7c <HAL_GetTick>
 8006b56:	4602      	mov	r2, r0
 8006b58:	693b      	ldr	r3, [r7, #16]
 8006b5a:	1ad3      	subs	r3, r2, r3
 8006b5c:	2b02      	cmp	r3, #2
 8006b5e:	d901      	bls.n	8006b64 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006b60:	2303      	movs	r3, #3
 8006b62:	e081      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b64:	4b43      	ldr	r3, [pc, #268]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006b66:	681b      	ldr	r3, [r3, #0]
 8006b68:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b6c:	2b00      	cmp	r3, #0
 8006b6e:	d1f0      	bne.n	8006b52 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	69da      	ldr	r2, [r3, #28]
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a1b      	ldr	r3, [r3, #32]
 8006b78:	431a      	orrs	r2, r3
 8006b7a:	687b      	ldr	r3, [r7, #4]
 8006b7c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006b7e:	019b      	lsls	r3, r3, #6
 8006b80:	431a      	orrs	r2, r3
 8006b82:	687b      	ldr	r3, [r7, #4]
 8006b84:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b86:	085b      	lsrs	r3, r3, #1
 8006b88:	3b01      	subs	r3, #1
 8006b8a:	041b      	lsls	r3, r3, #16
 8006b8c:	431a      	orrs	r2, r3
 8006b8e:	687b      	ldr	r3, [r7, #4]
 8006b90:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b92:	061b      	lsls	r3, r3, #24
 8006b94:	4937      	ldr	r1, [pc, #220]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006b96:	4313      	orrs	r3, r2
 8006b98:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006b9a:	4b37      	ldr	r3, [pc, #220]	; (8006c78 <HAL_RCC_OscConfig+0x4ec>)
 8006b9c:	2201      	movs	r2, #1
 8006b9e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ba0:	f7fc ff6c 	bl	8003a7c <HAL_GetTick>
 8006ba4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ba6:	e008      	b.n	8006bba <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ba8:	f7fc ff68 	bl	8003a7c <HAL_GetTick>
 8006bac:	4602      	mov	r2, r0
 8006bae:	693b      	ldr	r3, [r7, #16]
 8006bb0:	1ad3      	subs	r3, r2, r3
 8006bb2:	2b02      	cmp	r3, #2
 8006bb4:	d901      	bls.n	8006bba <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006bb6:	2303      	movs	r3, #3
 8006bb8:	e056      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006bba:	4b2e      	ldr	r3, [pc, #184]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006bbc:	681b      	ldr	r3, [r3, #0]
 8006bbe:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bc2:	2b00      	cmp	r3, #0
 8006bc4:	d0f0      	beq.n	8006ba8 <HAL_RCC_OscConfig+0x41c>
 8006bc6:	e04e      	b.n	8006c66 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006bc8:	4b2b      	ldr	r3, [pc, #172]	; (8006c78 <HAL_RCC_OscConfig+0x4ec>)
 8006bca:	2200      	movs	r2, #0
 8006bcc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006bce:	f7fc ff55 	bl	8003a7c <HAL_GetTick>
 8006bd2:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006bd4:	e008      	b.n	8006be8 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006bd6:	f7fc ff51 	bl	8003a7c <HAL_GetTick>
 8006bda:	4602      	mov	r2, r0
 8006bdc:	693b      	ldr	r3, [r7, #16]
 8006bde:	1ad3      	subs	r3, r2, r3
 8006be0:	2b02      	cmp	r3, #2
 8006be2:	d901      	bls.n	8006be8 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006be4:	2303      	movs	r3, #3
 8006be6:	e03f      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006be8:	4b22      	ldr	r3, [pc, #136]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d1f0      	bne.n	8006bd6 <HAL_RCC_OscConfig+0x44a>
 8006bf4:	e037      	b.n	8006c66 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006bf6:	687b      	ldr	r3, [r7, #4]
 8006bf8:	699b      	ldr	r3, [r3, #24]
 8006bfa:	2b01      	cmp	r3, #1
 8006bfc:	d101      	bne.n	8006c02 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006bfe:	2301      	movs	r3, #1
 8006c00:	e032      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006c02:	4b1c      	ldr	r3, [pc, #112]	; (8006c74 <HAL_RCC_OscConfig+0x4e8>)
 8006c04:	685b      	ldr	r3, [r3, #4]
 8006c06:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c08:	687b      	ldr	r3, [r7, #4]
 8006c0a:	699b      	ldr	r3, [r3, #24]
 8006c0c:	2b01      	cmp	r3, #1
 8006c0e:	d028      	beq.n	8006c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c10:	68fb      	ldr	r3, [r7, #12]
 8006c12:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006c1a:	429a      	cmp	r2, r3
 8006c1c:	d121      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c1e:	68fb      	ldr	r3, [r7, #12]
 8006c20:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006c24:	687b      	ldr	r3, [r7, #4]
 8006c26:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006c28:	429a      	cmp	r2, r3
 8006c2a:	d11a      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c2c:	68fa      	ldr	r2, [r7, #12]
 8006c2e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006c32:	4013      	ands	r3, r2
 8006c34:	687a      	ldr	r2, [r7, #4]
 8006c36:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006c38:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006c3a:	4293      	cmp	r3, r2
 8006c3c:	d111      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c3e:	68fb      	ldr	r3, [r7, #12]
 8006c40:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006c44:	687b      	ldr	r3, [r7, #4]
 8006c46:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006c48:	085b      	lsrs	r3, r3, #1
 8006c4a:	3b01      	subs	r3, #1
 8006c4c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006c4e:	429a      	cmp	r2, r3
 8006c50:	d107      	bne.n	8006c62 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006c52:	68fb      	ldr	r3, [r7, #12]
 8006c54:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006c58:	687b      	ldr	r3, [r7, #4]
 8006c5a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006c5c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006c5e:	429a      	cmp	r2, r3
 8006c60:	d001      	beq.n	8006c66 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006c62:	2301      	movs	r3, #1
 8006c64:	e000      	b.n	8006c68 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006c66:	2300      	movs	r3, #0
}
 8006c68:	4618      	mov	r0, r3
 8006c6a:	3718      	adds	r7, #24
 8006c6c:	46bd      	mov	sp, r7
 8006c6e:	bd80      	pop	{r7, pc}
 8006c70:	40007000 	.word	0x40007000
 8006c74:	40023800 	.word	0x40023800
 8006c78:	42470060 	.word	0x42470060

08006c7c <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006c7c:	b580      	push	{r7, lr}
 8006c7e:	b084      	sub	sp, #16
 8006c80:	af00      	add	r7, sp, #0
 8006c82:	6078      	str	r0, [r7, #4]
 8006c84:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006c86:	687b      	ldr	r3, [r7, #4]
 8006c88:	2b00      	cmp	r3, #0
 8006c8a:	d101      	bne.n	8006c90 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006c8c:	2301      	movs	r3, #1
 8006c8e:	e0cc      	b.n	8006e2a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006c90:	4b68      	ldr	r3, [pc, #416]	; (8006e34 <HAL_RCC_ClockConfig+0x1b8>)
 8006c92:	681b      	ldr	r3, [r3, #0]
 8006c94:	f003 0307 	and.w	r3, r3, #7
 8006c98:	683a      	ldr	r2, [r7, #0]
 8006c9a:	429a      	cmp	r2, r3
 8006c9c:	d90c      	bls.n	8006cb8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006c9e:	4b65      	ldr	r3, [pc, #404]	; (8006e34 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca0:	683a      	ldr	r2, [r7, #0]
 8006ca2:	b2d2      	uxtb	r2, r2
 8006ca4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ca6:	4b63      	ldr	r3, [pc, #396]	; (8006e34 <HAL_RCC_ClockConfig+0x1b8>)
 8006ca8:	681b      	ldr	r3, [r3, #0]
 8006caa:	f003 0307 	and.w	r3, r3, #7
 8006cae:	683a      	ldr	r2, [r7, #0]
 8006cb0:	429a      	cmp	r2, r3
 8006cb2:	d001      	beq.n	8006cb8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006cb4:	2301      	movs	r3, #1
 8006cb6:	e0b8      	b.n	8006e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006cb8:	687b      	ldr	r3, [r7, #4]
 8006cba:	681b      	ldr	r3, [r3, #0]
 8006cbc:	f003 0302 	and.w	r3, r3, #2
 8006cc0:	2b00      	cmp	r3, #0
 8006cc2:	d020      	beq.n	8006d06 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cc4:	687b      	ldr	r3, [r7, #4]
 8006cc6:	681b      	ldr	r3, [r3, #0]
 8006cc8:	f003 0304 	and.w	r3, r3, #4
 8006ccc:	2b00      	cmp	r3, #0
 8006cce:	d005      	beq.n	8006cdc <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006cd0:	4b59      	ldr	r3, [pc, #356]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd2:	689b      	ldr	r3, [r3, #8]
 8006cd4:	4a58      	ldr	r2, [pc, #352]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006cd6:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006cda:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	f003 0308 	and.w	r3, r3, #8
 8006ce4:	2b00      	cmp	r3, #0
 8006ce6:	d005      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006ce8:	4b53      	ldr	r3, [pc, #332]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006cea:	689b      	ldr	r3, [r3, #8]
 8006cec:	4a52      	ldr	r2, [pc, #328]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006cee:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006cf2:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006cf4:	4b50      	ldr	r3, [pc, #320]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006cf6:	689b      	ldr	r3, [r3, #8]
 8006cf8:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006cfc:	687b      	ldr	r3, [r7, #4]
 8006cfe:	689b      	ldr	r3, [r3, #8]
 8006d00:	494d      	ldr	r1, [pc, #308]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006d02:	4313      	orrs	r3, r2
 8006d04:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006d06:	687b      	ldr	r3, [r7, #4]
 8006d08:	681b      	ldr	r3, [r3, #0]
 8006d0a:	f003 0301 	and.w	r3, r3, #1
 8006d0e:	2b00      	cmp	r3, #0
 8006d10:	d044      	beq.n	8006d9c <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	685b      	ldr	r3, [r3, #4]
 8006d16:	2b01      	cmp	r3, #1
 8006d18:	d107      	bne.n	8006d2a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006d1a:	4b47      	ldr	r3, [pc, #284]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006d1c:	681b      	ldr	r3, [r3, #0]
 8006d1e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006d22:	2b00      	cmp	r3, #0
 8006d24:	d119      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d26:	2301      	movs	r3, #1
 8006d28:	e07f      	b.n	8006e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	685b      	ldr	r3, [r3, #4]
 8006d2e:	2b02      	cmp	r3, #2
 8006d30:	d003      	beq.n	8006d3a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006d32:	687b      	ldr	r3, [r7, #4]
 8006d34:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006d36:	2b03      	cmp	r3, #3
 8006d38:	d107      	bne.n	8006d4a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006d3a:	4b3f      	ldr	r3, [pc, #252]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3c:	681b      	ldr	r3, [r3, #0]
 8006d3e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006d42:	2b00      	cmp	r3, #0
 8006d44:	d109      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d46:	2301      	movs	r3, #1
 8006d48:	e06f      	b.n	8006e2a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006d4a:	4b3b      	ldr	r3, [pc, #236]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006d4c:	681b      	ldr	r3, [r3, #0]
 8006d4e:	f003 0302 	and.w	r3, r3, #2
 8006d52:	2b00      	cmp	r3, #0
 8006d54:	d101      	bne.n	8006d5a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006d56:	2301      	movs	r3, #1
 8006d58:	e067      	b.n	8006e2a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006d5a:	4b37      	ldr	r3, [pc, #220]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006d5c:	689b      	ldr	r3, [r3, #8]
 8006d5e:	f023 0203 	bic.w	r2, r3, #3
 8006d62:	687b      	ldr	r3, [r7, #4]
 8006d64:	685b      	ldr	r3, [r3, #4]
 8006d66:	4934      	ldr	r1, [pc, #208]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006d68:	4313      	orrs	r3, r2
 8006d6a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006d6c:	f7fc fe86 	bl	8003a7c <HAL_GetTick>
 8006d70:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d72:	e00a      	b.n	8006d8a <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006d74:	f7fc fe82 	bl	8003a7c <HAL_GetTick>
 8006d78:	4602      	mov	r2, r0
 8006d7a:	68fb      	ldr	r3, [r7, #12]
 8006d7c:	1ad3      	subs	r3, r2, r3
 8006d7e:	f241 3288 	movw	r2, #5000	; 0x1388
 8006d82:	4293      	cmp	r3, r2
 8006d84:	d901      	bls.n	8006d8a <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006d86:	2303      	movs	r3, #3
 8006d88:	e04f      	b.n	8006e2a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006d8a:	4b2b      	ldr	r3, [pc, #172]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006d8c:	689b      	ldr	r3, [r3, #8]
 8006d8e:	f003 020c 	and.w	r2, r3, #12
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	685b      	ldr	r3, [r3, #4]
 8006d96:	009b      	lsls	r3, r3, #2
 8006d98:	429a      	cmp	r2, r3
 8006d9a:	d1eb      	bne.n	8006d74 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006d9c:	4b25      	ldr	r3, [pc, #148]	; (8006e34 <HAL_RCC_ClockConfig+0x1b8>)
 8006d9e:	681b      	ldr	r3, [r3, #0]
 8006da0:	f003 0307 	and.w	r3, r3, #7
 8006da4:	683a      	ldr	r2, [r7, #0]
 8006da6:	429a      	cmp	r2, r3
 8006da8:	d20c      	bcs.n	8006dc4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006daa:	4b22      	ldr	r3, [pc, #136]	; (8006e34 <HAL_RCC_ClockConfig+0x1b8>)
 8006dac:	683a      	ldr	r2, [r7, #0]
 8006dae:	b2d2      	uxtb	r2, r2
 8006db0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006db2:	4b20      	ldr	r3, [pc, #128]	; (8006e34 <HAL_RCC_ClockConfig+0x1b8>)
 8006db4:	681b      	ldr	r3, [r3, #0]
 8006db6:	f003 0307 	and.w	r3, r3, #7
 8006dba:	683a      	ldr	r2, [r7, #0]
 8006dbc:	429a      	cmp	r2, r3
 8006dbe:	d001      	beq.n	8006dc4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006dc0:	2301      	movs	r3, #1
 8006dc2:	e032      	b.n	8006e2a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006dc4:	687b      	ldr	r3, [r7, #4]
 8006dc6:	681b      	ldr	r3, [r3, #0]
 8006dc8:	f003 0304 	and.w	r3, r3, #4
 8006dcc:	2b00      	cmp	r3, #0
 8006dce:	d008      	beq.n	8006de2 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006dd0:	4b19      	ldr	r3, [pc, #100]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dd2:	689b      	ldr	r3, [r3, #8]
 8006dd4:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006dd8:	687b      	ldr	r3, [r7, #4]
 8006dda:	68db      	ldr	r3, [r3, #12]
 8006ddc:	4916      	ldr	r1, [pc, #88]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dde:	4313      	orrs	r3, r2
 8006de0:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006de2:	687b      	ldr	r3, [r7, #4]
 8006de4:	681b      	ldr	r3, [r3, #0]
 8006de6:	f003 0308 	and.w	r3, r3, #8
 8006dea:	2b00      	cmp	r3, #0
 8006dec:	d009      	beq.n	8006e02 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006dee:	4b12      	ldr	r3, [pc, #72]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006df0:	689b      	ldr	r3, [r3, #8]
 8006df2:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006df6:	687b      	ldr	r3, [r7, #4]
 8006df8:	691b      	ldr	r3, [r3, #16]
 8006dfa:	00db      	lsls	r3, r3, #3
 8006dfc:	490e      	ldr	r1, [pc, #56]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006dfe:	4313      	orrs	r3, r2
 8006e00:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006e02:	f000 f821 	bl	8006e48 <HAL_RCC_GetSysClockFreq>
 8006e06:	4602      	mov	r2, r0
 8006e08:	4b0b      	ldr	r3, [pc, #44]	; (8006e38 <HAL_RCC_ClockConfig+0x1bc>)
 8006e0a:	689b      	ldr	r3, [r3, #8]
 8006e0c:	091b      	lsrs	r3, r3, #4
 8006e0e:	f003 030f 	and.w	r3, r3, #15
 8006e12:	490a      	ldr	r1, [pc, #40]	; (8006e3c <HAL_RCC_ClockConfig+0x1c0>)
 8006e14:	5ccb      	ldrb	r3, [r1, r3]
 8006e16:	fa22 f303 	lsr.w	r3, r2, r3
 8006e1a:	4a09      	ldr	r2, [pc, #36]	; (8006e40 <HAL_RCC_ClockConfig+0x1c4>)
 8006e1c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006e1e:	4b09      	ldr	r3, [pc, #36]	; (8006e44 <HAL_RCC_ClockConfig+0x1c8>)
 8006e20:	681b      	ldr	r3, [r3, #0]
 8006e22:	4618      	mov	r0, r3
 8006e24:	f7fc fde6 	bl	80039f4 <HAL_InitTick>

  return HAL_OK;
 8006e28:	2300      	movs	r3, #0
}
 8006e2a:	4618      	mov	r0, r3
 8006e2c:	3710      	adds	r7, #16
 8006e2e:	46bd      	mov	sp, r7
 8006e30:	bd80      	pop	{r7, pc}
 8006e32:	bf00      	nop
 8006e34:	40023c00 	.word	0x40023c00
 8006e38:	40023800 	.word	0x40023800
 8006e3c:	0800a2a8 	.word	0x0800a2a8
 8006e40:	2000001c 	.word	0x2000001c
 8006e44:	20000020 	.word	0x20000020

08006e48 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006e48:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006e4c:	b084      	sub	sp, #16
 8006e4e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006e50:	2300      	movs	r3, #0
 8006e52:	607b      	str	r3, [r7, #4]
 8006e54:	2300      	movs	r3, #0
 8006e56:	60fb      	str	r3, [r7, #12]
 8006e58:	2300      	movs	r3, #0
 8006e5a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006e5c:	2300      	movs	r3, #0
 8006e5e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006e60:	4b67      	ldr	r3, [pc, #412]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e62:	689b      	ldr	r3, [r3, #8]
 8006e64:	f003 030c 	and.w	r3, r3, #12
 8006e68:	2b08      	cmp	r3, #8
 8006e6a:	d00d      	beq.n	8006e88 <HAL_RCC_GetSysClockFreq+0x40>
 8006e6c:	2b08      	cmp	r3, #8
 8006e6e:	f200 80bd 	bhi.w	8006fec <HAL_RCC_GetSysClockFreq+0x1a4>
 8006e72:	2b00      	cmp	r3, #0
 8006e74:	d002      	beq.n	8006e7c <HAL_RCC_GetSysClockFreq+0x34>
 8006e76:	2b04      	cmp	r3, #4
 8006e78:	d003      	beq.n	8006e82 <HAL_RCC_GetSysClockFreq+0x3a>
 8006e7a:	e0b7      	b.n	8006fec <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006e7c:	4b61      	ldr	r3, [pc, #388]	; (8007004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006e7e:	60bb      	str	r3, [r7, #8]
       break;
 8006e80:	e0b7      	b.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006e82:	4b61      	ldr	r3, [pc, #388]	; (8007008 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006e84:	60bb      	str	r3, [r7, #8]
      break;
 8006e86:	e0b4      	b.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006e88:	4b5d      	ldr	r3, [pc, #372]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e8a:	685b      	ldr	r3, [r3, #4]
 8006e8c:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006e90:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006e92:	4b5b      	ldr	r3, [pc, #364]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e94:	685b      	ldr	r3, [r3, #4]
 8006e96:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006e9a:	2b00      	cmp	r3, #0
 8006e9c:	d04d      	beq.n	8006f3a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e9e:	4b58      	ldr	r3, [pc, #352]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006ea0:	685b      	ldr	r3, [r3, #4]
 8006ea2:	099b      	lsrs	r3, r3, #6
 8006ea4:	461a      	mov	r2, r3
 8006ea6:	f04f 0300 	mov.w	r3, #0
 8006eaa:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006eae:	f04f 0100 	mov.w	r1, #0
 8006eb2:	ea02 0800 	and.w	r8, r2, r0
 8006eb6:	ea03 0901 	and.w	r9, r3, r1
 8006eba:	4640      	mov	r0, r8
 8006ebc:	4649      	mov	r1, r9
 8006ebe:	f04f 0200 	mov.w	r2, #0
 8006ec2:	f04f 0300 	mov.w	r3, #0
 8006ec6:	014b      	lsls	r3, r1, #5
 8006ec8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006ecc:	0142      	lsls	r2, r0, #5
 8006ece:	4610      	mov	r0, r2
 8006ed0:	4619      	mov	r1, r3
 8006ed2:	ebb0 0008 	subs.w	r0, r0, r8
 8006ed6:	eb61 0109 	sbc.w	r1, r1, r9
 8006eda:	f04f 0200 	mov.w	r2, #0
 8006ede:	f04f 0300 	mov.w	r3, #0
 8006ee2:	018b      	lsls	r3, r1, #6
 8006ee4:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006ee8:	0182      	lsls	r2, r0, #6
 8006eea:	1a12      	subs	r2, r2, r0
 8006eec:	eb63 0301 	sbc.w	r3, r3, r1
 8006ef0:	f04f 0000 	mov.w	r0, #0
 8006ef4:	f04f 0100 	mov.w	r1, #0
 8006ef8:	00d9      	lsls	r1, r3, #3
 8006efa:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006efe:	00d0      	lsls	r0, r2, #3
 8006f00:	4602      	mov	r2, r0
 8006f02:	460b      	mov	r3, r1
 8006f04:	eb12 0208 	adds.w	r2, r2, r8
 8006f08:	eb43 0309 	adc.w	r3, r3, r9
 8006f0c:	f04f 0000 	mov.w	r0, #0
 8006f10:	f04f 0100 	mov.w	r1, #0
 8006f14:	0259      	lsls	r1, r3, #9
 8006f16:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006f1a:	0250      	lsls	r0, r2, #9
 8006f1c:	4602      	mov	r2, r0
 8006f1e:	460b      	mov	r3, r1
 8006f20:	4610      	mov	r0, r2
 8006f22:	4619      	mov	r1, r3
 8006f24:	687b      	ldr	r3, [r7, #4]
 8006f26:	461a      	mov	r2, r3
 8006f28:	f04f 0300 	mov.w	r3, #0
 8006f2c:	f7f9 ff1e 	bl	8000d6c <__aeabi_uldivmod>
 8006f30:	4602      	mov	r2, r0
 8006f32:	460b      	mov	r3, r1
 8006f34:	4613      	mov	r3, r2
 8006f36:	60fb      	str	r3, [r7, #12]
 8006f38:	e04a      	b.n	8006fd0 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006f3a:	4b31      	ldr	r3, [pc, #196]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f3c:	685b      	ldr	r3, [r3, #4]
 8006f3e:	099b      	lsrs	r3, r3, #6
 8006f40:	461a      	mov	r2, r3
 8006f42:	f04f 0300 	mov.w	r3, #0
 8006f46:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006f4a:	f04f 0100 	mov.w	r1, #0
 8006f4e:	ea02 0400 	and.w	r4, r2, r0
 8006f52:	ea03 0501 	and.w	r5, r3, r1
 8006f56:	4620      	mov	r0, r4
 8006f58:	4629      	mov	r1, r5
 8006f5a:	f04f 0200 	mov.w	r2, #0
 8006f5e:	f04f 0300 	mov.w	r3, #0
 8006f62:	014b      	lsls	r3, r1, #5
 8006f64:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006f68:	0142      	lsls	r2, r0, #5
 8006f6a:	4610      	mov	r0, r2
 8006f6c:	4619      	mov	r1, r3
 8006f6e:	1b00      	subs	r0, r0, r4
 8006f70:	eb61 0105 	sbc.w	r1, r1, r5
 8006f74:	f04f 0200 	mov.w	r2, #0
 8006f78:	f04f 0300 	mov.w	r3, #0
 8006f7c:	018b      	lsls	r3, r1, #6
 8006f7e:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006f82:	0182      	lsls	r2, r0, #6
 8006f84:	1a12      	subs	r2, r2, r0
 8006f86:	eb63 0301 	sbc.w	r3, r3, r1
 8006f8a:	f04f 0000 	mov.w	r0, #0
 8006f8e:	f04f 0100 	mov.w	r1, #0
 8006f92:	00d9      	lsls	r1, r3, #3
 8006f94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006f98:	00d0      	lsls	r0, r2, #3
 8006f9a:	4602      	mov	r2, r0
 8006f9c:	460b      	mov	r3, r1
 8006f9e:	1912      	adds	r2, r2, r4
 8006fa0:	eb45 0303 	adc.w	r3, r5, r3
 8006fa4:	f04f 0000 	mov.w	r0, #0
 8006fa8:	f04f 0100 	mov.w	r1, #0
 8006fac:	0299      	lsls	r1, r3, #10
 8006fae:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006fb2:	0290      	lsls	r0, r2, #10
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4610      	mov	r0, r2
 8006fba:	4619      	mov	r1, r3
 8006fbc:	687b      	ldr	r3, [r7, #4]
 8006fbe:	461a      	mov	r2, r3
 8006fc0:	f04f 0300 	mov.w	r3, #0
 8006fc4:	f7f9 fed2 	bl	8000d6c <__aeabi_uldivmod>
 8006fc8:	4602      	mov	r2, r0
 8006fca:	460b      	mov	r3, r1
 8006fcc:	4613      	mov	r3, r2
 8006fce:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006fd0:	4b0b      	ldr	r3, [pc, #44]	; (8007000 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006fd2:	685b      	ldr	r3, [r3, #4]
 8006fd4:	0c1b      	lsrs	r3, r3, #16
 8006fd6:	f003 0303 	and.w	r3, r3, #3
 8006fda:	3301      	adds	r3, #1
 8006fdc:	005b      	lsls	r3, r3, #1
 8006fde:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006fe0:	68fa      	ldr	r2, [r7, #12]
 8006fe2:	683b      	ldr	r3, [r7, #0]
 8006fe4:	fbb2 f3f3 	udiv	r3, r2, r3
 8006fe8:	60bb      	str	r3, [r7, #8]
      break;
 8006fea:	e002      	b.n	8006ff2 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006fec:	4b05      	ldr	r3, [pc, #20]	; (8007004 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006fee:	60bb      	str	r3, [r7, #8]
      break;
 8006ff0:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006ff2:	68bb      	ldr	r3, [r7, #8]
}
 8006ff4:	4618      	mov	r0, r3
 8006ff6:	3710      	adds	r7, #16
 8006ff8:	46bd      	mov	sp, r7
 8006ffa:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006ffe:	bf00      	nop
 8007000:	40023800 	.word	0x40023800
 8007004:	00f42400 	.word	0x00f42400
 8007008:	007a1200 	.word	0x007a1200

0800700c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 800700c:	b480      	push	{r7}
 800700e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8007010:	4b03      	ldr	r3, [pc, #12]	; (8007020 <HAL_RCC_GetHCLKFreq+0x14>)
 8007012:	681b      	ldr	r3, [r3, #0]
}
 8007014:	4618      	mov	r0, r3
 8007016:	46bd      	mov	sp, r7
 8007018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800701c:	4770      	bx	lr
 800701e:	bf00      	nop
 8007020:	2000001c 	.word	0x2000001c

08007024 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8007024:	b580      	push	{r7, lr}
 8007026:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8007028:	f7ff fff0 	bl	800700c <HAL_RCC_GetHCLKFreq>
 800702c:	4602      	mov	r2, r0
 800702e:	4b05      	ldr	r3, [pc, #20]	; (8007044 <HAL_RCC_GetPCLK1Freq+0x20>)
 8007030:	689b      	ldr	r3, [r3, #8]
 8007032:	0a9b      	lsrs	r3, r3, #10
 8007034:	f003 0307 	and.w	r3, r3, #7
 8007038:	4903      	ldr	r1, [pc, #12]	; (8007048 <HAL_RCC_GetPCLK1Freq+0x24>)
 800703a:	5ccb      	ldrb	r3, [r1, r3]
 800703c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007040:	4618      	mov	r0, r3
 8007042:	bd80      	pop	{r7, pc}
 8007044:	40023800 	.word	0x40023800
 8007048:	0800a2b8 	.word	0x0800a2b8

0800704c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 800704c:	b580      	push	{r7, lr}
 800704e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8007050:	f7ff ffdc 	bl	800700c <HAL_RCC_GetHCLKFreq>
 8007054:	4602      	mov	r2, r0
 8007056:	4b05      	ldr	r3, [pc, #20]	; (800706c <HAL_RCC_GetPCLK2Freq+0x20>)
 8007058:	689b      	ldr	r3, [r3, #8]
 800705a:	0b5b      	lsrs	r3, r3, #13
 800705c:	f003 0307 	and.w	r3, r3, #7
 8007060:	4903      	ldr	r1, [pc, #12]	; (8007070 <HAL_RCC_GetPCLK2Freq+0x24>)
 8007062:	5ccb      	ldrb	r3, [r1, r3]
 8007064:	fa22 f303 	lsr.w	r3, r2, r3
}
 8007068:	4618      	mov	r0, r3
 800706a:	bd80      	pop	{r7, pc}
 800706c:	40023800 	.word	0x40023800
 8007070:	0800a2b8 	.word	0x0800a2b8

08007074 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8007074:	b580      	push	{r7, lr}
 8007076:	b082      	sub	sp, #8
 8007078:	af00      	add	r7, sp, #0
 800707a:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 800707c:	687b      	ldr	r3, [r7, #4]
 800707e:	2b00      	cmp	r3, #0
 8007080:	d101      	bne.n	8007086 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8007082:	2301      	movs	r3, #1
 8007084:	e041      	b.n	800710a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8007086:	687b      	ldr	r3, [r7, #4]
 8007088:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800708c:	b2db      	uxtb	r3, r3
 800708e:	2b00      	cmp	r3, #0
 8007090:	d106      	bne.n	80070a0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8007092:	687b      	ldr	r3, [r7, #4]
 8007094:	2200      	movs	r2, #0
 8007096:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800709a:	6878      	ldr	r0, [r7, #4]
 800709c:	f7fc fa2c 	bl	80034f8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	2202      	movs	r2, #2
 80070a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80070a8:	687b      	ldr	r3, [r7, #4]
 80070aa:	681a      	ldr	r2, [r3, #0]
 80070ac:	687b      	ldr	r3, [r7, #4]
 80070ae:	3304      	adds	r3, #4
 80070b0:	4619      	mov	r1, r3
 80070b2:	4610      	mov	r0, r2
 80070b4:	f000 fdda 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	2201      	movs	r2, #1
 80070bc:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	2201      	movs	r2, #1
 80070c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80070c8:	687b      	ldr	r3, [r7, #4]
 80070ca:	2201      	movs	r2, #1
 80070cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80070d0:	687b      	ldr	r3, [r7, #4]
 80070d2:	2201      	movs	r2, #1
 80070d4:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80070d8:	687b      	ldr	r3, [r7, #4]
 80070da:	2201      	movs	r2, #1
 80070dc:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	2201      	movs	r2, #1
 80070e4:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80070e8:	687b      	ldr	r3, [r7, #4]
 80070ea:	2201      	movs	r2, #1
 80070ec:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80070f0:	687b      	ldr	r3, [r7, #4]
 80070f2:	2201      	movs	r2, #1
 80070f4:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80070f8:	687b      	ldr	r3, [r7, #4]
 80070fa:	2201      	movs	r2, #1
 80070fc:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	2201      	movs	r2, #1
 8007104:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007108:	2300      	movs	r3, #0
}
 800710a:	4618      	mov	r0, r3
 800710c:	3708      	adds	r7, #8
 800710e:	46bd      	mov	sp, r7
 8007110:	bd80      	pop	{r7, pc}
	...

08007114 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007114:	b480      	push	{r7}
 8007116:	b085      	sub	sp, #20
 8007118:	af00      	add	r7, sp, #0
 800711a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800711c:	687b      	ldr	r3, [r7, #4]
 800711e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007122:	b2db      	uxtb	r3, r3
 8007124:	2b01      	cmp	r3, #1
 8007126:	d001      	beq.n	800712c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007128:	2301      	movs	r3, #1
 800712a:	e03c      	b.n	80071a6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800712c:	687b      	ldr	r3, [r7, #4]
 800712e:	2202      	movs	r2, #2
 8007130:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007134:	687b      	ldr	r3, [r7, #4]
 8007136:	681b      	ldr	r3, [r3, #0]
 8007138:	4a1e      	ldr	r2, [pc, #120]	; (80071b4 <HAL_TIM_Base_Start+0xa0>)
 800713a:	4293      	cmp	r3, r2
 800713c:	d018      	beq.n	8007170 <HAL_TIM_Base_Start+0x5c>
 800713e:	687b      	ldr	r3, [r7, #4]
 8007140:	681b      	ldr	r3, [r3, #0]
 8007142:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007146:	d013      	beq.n	8007170 <HAL_TIM_Base_Start+0x5c>
 8007148:	687b      	ldr	r3, [r7, #4]
 800714a:	681b      	ldr	r3, [r3, #0]
 800714c:	4a1a      	ldr	r2, [pc, #104]	; (80071b8 <HAL_TIM_Base_Start+0xa4>)
 800714e:	4293      	cmp	r3, r2
 8007150:	d00e      	beq.n	8007170 <HAL_TIM_Base_Start+0x5c>
 8007152:	687b      	ldr	r3, [r7, #4]
 8007154:	681b      	ldr	r3, [r3, #0]
 8007156:	4a19      	ldr	r2, [pc, #100]	; (80071bc <HAL_TIM_Base_Start+0xa8>)
 8007158:	4293      	cmp	r3, r2
 800715a:	d009      	beq.n	8007170 <HAL_TIM_Base_Start+0x5c>
 800715c:	687b      	ldr	r3, [r7, #4]
 800715e:	681b      	ldr	r3, [r3, #0]
 8007160:	4a17      	ldr	r2, [pc, #92]	; (80071c0 <HAL_TIM_Base_Start+0xac>)
 8007162:	4293      	cmp	r3, r2
 8007164:	d004      	beq.n	8007170 <HAL_TIM_Base_Start+0x5c>
 8007166:	687b      	ldr	r3, [r7, #4]
 8007168:	681b      	ldr	r3, [r3, #0]
 800716a:	4a16      	ldr	r2, [pc, #88]	; (80071c4 <HAL_TIM_Base_Start+0xb0>)
 800716c:	4293      	cmp	r3, r2
 800716e:	d111      	bne.n	8007194 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007170:	687b      	ldr	r3, [r7, #4]
 8007172:	681b      	ldr	r3, [r3, #0]
 8007174:	689b      	ldr	r3, [r3, #8]
 8007176:	f003 0307 	and.w	r3, r3, #7
 800717a:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800717c:	68fb      	ldr	r3, [r7, #12]
 800717e:	2b06      	cmp	r3, #6
 8007180:	d010      	beq.n	80071a4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8007182:	687b      	ldr	r3, [r7, #4]
 8007184:	681b      	ldr	r3, [r3, #0]
 8007186:	681a      	ldr	r2, [r3, #0]
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	f042 0201 	orr.w	r2, r2, #1
 8007190:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007192:	e007      	b.n	80071a4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007194:	687b      	ldr	r3, [r7, #4]
 8007196:	681b      	ldr	r3, [r3, #0]
 8007198:	681a      	ldr	r2, [r3, #0]
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	f042 0201 	orr.w	r2, r2, #1
 80071a2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80071a4:	2300      	movs	r3, #0
}
 80071a6:	4618      	mov	r0, r3
 80071a8:	3714      	adds	r7, #20
 80071aa:	46bd      	mov	sp, r7
 80071ac:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071b0:	4770      	bx	lr
 80071b2:	bf00      	nop
 80071b4:	40010000 	.word	0x40010000
 80071b8:	40000400 	.word	0x40000400
 80071bc:	40000800 	.word	0x40000800
 80071c0:	40000c00 	.word	0x40000c00
 80071c4:	40014000 	.word	0x40014000

080071c8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80071c8:	b480      	push	{r7}
 80071ca:	b085      	sub	sp, #20
 80071cc:	af00      	add	r7, sp, #0
 80071ce:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80071d0:	687b      	ldr	r3, [r7, #4]
 80071d2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d6:	b2db      	uxtb	r3, r3
 80071d8:	2b01      	cmp	r3, #1
 80071da:	d001      	beq.n	80071e0 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 80071dc:	2301      	movs	r3, #1
 80071de:	e044      	b.n	800726a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e0:	687b      	ldr	r3, [r7, #4]
 80071e2:	2202      	movs	r2, #2
 80071e4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	681b      	ldr	r3, [r3, #0]
 80071ec:	68da      	ldr	r2, [r3, #12]
 80071ee:	687b      	ldr	r3, [r7, #4]
 80071f0:	681b      	ldr	r3, [r3, #0]
 80071f2:	f042 0201 	orr.w	r2, r2, #1
 80071f6:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80071f8:	687b      	ldr	r3, [r7, #4]
 80071fa:	681b      	ldr	r3, [r3, #0]
 80071fc:	4a1e      	ldr	r2, [pc, #120]	; (8007278 <HAL_TIM_Base_Start_IT+0xb0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d018      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x6c>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	681b      	ldr	r3, [r3, #0]
 8007206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800720a:	d013      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x6c>
 800720c:	687b      	ldr	r3, [r7, #4]
 800720e:	681b      	ldr	r3, [r3, #0]
 8007210:	4a1a      	ldr	r2, [pc, #104]	; (800727c <HAL_TIM_Base_Start_IT+0xb4>)
 8007212:	4293      	cmp	r3, r2
 8007214:	d00e      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x6c>
 8007216:	687b      	ldr	r3, [r7, #4]
 8007218:	681b      	ldr	r3, [r3, #0]
 800721a:	4a19      	ldr	r2, [pc, #100]	; (8007280 <HAL_TIM_Base_Start_IT+0xb8>)
 800721c:	4293      	cmp	r3, r2
 800721e:	d009      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x6c>
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	681b      	ldr	r3, [r3, #0]
 8007224:	4a17      	ldr	r2, [pc, #92]	; (8007284 <HAL_TIM_Base_Start_IT+0xbc>)
 8007226:	4293      	cmp	r3, r2
 8007228:	d004      	beq.n	8007234 <HAL_TIM_Base_Start_IT+0x6c>
 800722a:	687b      	ldr	r3, [r7, #4]
 800722c:	681b      	ldr	r3, [r3, #0]
 800722e:	4a16      	ldr	r2, [pc, #88]	; (8007288 <HAL_TIM_Base_Start_IT+0xc0>)
 8007230:	4293      	cmp	r3, r2
 8007232:	d111      	bne.n	8007258 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007234:	687b      	ldr	r3, [r7, #4]
 8007236:	681b      	ldr	r3, [r3, #0]
 8007238:	689b      	ldr	r3, [r3, #8]
 800723a:	f003 0307 	and.w	r3, r3, #7
 800723e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007240:	68fb      	ldr	r3, [r7, #12]
 8007242:	2b06      	cmp	r3, #6
 8007244:	d010      	beq.n	8007268 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007246:	687b      	ldr	r3, [r7, #4]
 8007248:	681b      	ldr	r3, [r3, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	681b      	ldr	r3, [r3, #0]
 8007250:	f042 0201 	orr.w	r2, r2, #1
 8007254:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007256:	e007      	b.n	8007268 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007258:	687b      	ldr	r3, [r7, #4]
 800725a:	681b      	ldr	r3, [r3, #0]
 800725c:	681a      	ldr	r2, [r3, #0]
 800725e:	687b      	ldr	r3, [r7, #4]
 8007260:	681b      	ldr	r3, [r3, #0]
 8007262:	f042 0201 	orr.w	r2, r2, #1
 8007266:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007268:	2300      	movs	r3, #0
}
 800726a:	4618      	mov	r0, r3
 800726c:	3714      	adds	r7, #20
 800726e:	46bd      	mov	sp, r7
 8007270:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007274:	4770      	bx	lr
 8007276:	bf00      	nop
 8007278:	40010000 	.word	0x40010000
 800727c:	40000400 	.word	0x40000400
 8007280:	40000800 	.word	0x40000800
 8007284:	40000c00 	.word	0x40000c00
 8007288:	40014000 	.word	0x40014000

0800728c <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 800728c:	b580      	push	{r7, lr}
 800728e:	b082      	sub	sp, #8
 8007290:	af00      	add	r7, sp, #0
 8007292:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8007294:	687b      	ldr	r3, [r7, #4]
 8007296:	2b00      	cmp	r3, #0
 8007298:	d101      	bne.n	800729e <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 800729a:	2301      	movs	r3, #1
 800729c:	e041      	b.n	8007322 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800729e:	687b      	ldr	r3, [r7, #4]
 80072a0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80072a4:	b2db      	uxtb	r3, r3
 80072a6:	2b00      	cmp	r3, #0
 80072a8:	d106      	bne.n	80072b8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80072aa:	687b      	ldr	r3, [r7, #4]
 80072ac:	2200      	movs	r2, #0
 80072ae:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80072b2:	6878      	ldr	r0, [r7, #4]
 80072b4:	f000 f839 	bl	800732a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80072b8:	687b      	ldr	r3, [r7, #4]
 80072ba:	2202      	movs	r2, #2
 80072bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80072c0:	687b      	ldr	r3, [r7, #4]
 80072c2:	681a      	ldr	r2, [r3, #0]
 80072c4:	687b      	ldr	r3, [r7, #4]
 80072c6:	3304      	adds	r3, #4
 80072c8:	4619      	mov	r1, r3
 80072ca:	4610      	mov	r0, r2
 80072cc:	f000 fcce 	bl	8007c6c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80072d0:	687b      	ldr	r3, [r7, #4]
 80072d2:	2201      	movs	r2, #1
 80072d4:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072d8:	687b      	ldr	r3, [r7, #4]
 80072da:	2201      	movs	r2, #1
 80072dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072e0:	687b      	ldr	r3, [r7, #4]
 80072e2:	2201      	movs	r2, #1
 80072e4:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2201      	movs	r2, #1
 80072ec:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80072f0:	687b      	ldr	r3, [r7, #4]
 80072f2:	2201      	movs	r2, #1
 80072f4:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2201      	movs	r2, #1
 80072fc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007300:	687b      	ldr	r3, [r7, #4]
 8007302:	2201      	movs	r2, #1
 8007304:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2201      	movs	r2, #1
 800730c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007310:	687b      	ldr	r3, [r7, #4]
 8007312:	2201      	movs	r2, #1
 8007314:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007318:	687b      	ldr	r3, [r7, #4]
 800731a:	2201      	movs	r2, #1
 800731c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007320:	2300      	movs	r3, #0
}
 8007322:	4618      	mov	r0, r3
 8007324:	3708      	adds	r7, #8
 8007326:	46bd      	mov	sp, r7
 8007328:	bd80      	pop	{r7, pc}

0800732a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800732a:	b480      	push	{r7}
 800732c:	b083      	sub	sp, #12
 800732e:	af00      	add	r7, sp, #0
 8007330:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007332:	bf00      	nop
 8007334:	370c      	adds	r7, #12
 8007336:	46bd      	mov	sp, r7
 8007338:	f85d 7b04 	ldr.w	r7, [sp], #4
 800733c:	4770      	bx	lr
	...

08007340 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007340:	b580      	push	{r7, lr}
 8007342:	b084      	sub	sp, #16
 8007344:	af00      	add	r7, sp, #0
 8007346:	6078      	str	r0, [r7, #4]
 8007348:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800734a:	683b      	ldr	r3, [r7, #0]
 800734c:	2b00      	cmp	r3, #0
 800734e:	d109      	bne.n	8007364 <HAL_TIM_PWM_Start+0x24>
 8007350:	687b      	ldr	r3, [r7, #4]
 8007352:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007356:	b2db      	uxtb	r3, r3
 8007358:	2b01      	cmp	r3, #1
 800735a:	bf14      	ite	ne
 800735c:	2301      	movne	r3, #1
 800735e:	2300      	moveq	r3, #0
 8007360:	b2db      	uxtb	r3, r3
 8007362:	e022      	b.n	80073aa <HAL_TIM_PWM_Start+0x6a>
 8007364:	683b      	ldr	r3, [r7, #0]
 8007366:	2b04      	cmp	r3, #4
 8007368:	d109      	bne.n	800737e <HAL_TIM_PWM_Start+0x3e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007370:	b2db      	uxtb	r3, r3
 8007372:	2b01      	cmp	r3, #1
 8007374:	bf14      	ite	ne
 8007376:	2301      	movne	r3, #1
 8007378:	2300      	moveq	r3, #0
 800737a:	b2db      	uxtb	r3, r3
 800737c:	e015      	b.n	80073aa <HAL_TIM_PWM_Start+0x6a>
 800737e:	683b      	ldr	r3, [r7, #0]
 8007380:	2b08      	cmp	r3, #8
 8007382:	d109      	bne.n	8007398 <HAL_TIM_PWM_Start+0x58>
 8007384:	687b      	ldr	r3, [r7, #4]
 8007386:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 800738a:	b2db      	uxtb	r3, r3
 800738c:	2b01      	cmp	r3, #1
 800738e:	bf14      	ite	ne
 8007390:	2301      	movne	r3, #1
 8007392:	2300      	moveq	r3, #0
 8007394:	b2db      	uxtb	r3, r3
 8007396:	e008      	b.n	80073aa <HAL_TIM_PWM_Start+0x6a>
 8007398:	687b      	ldr	r3, [r7, #4]
 800739a:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 800739e:	b2db      	uxtb	r3, r3
 80073a0:	2b01      	cmp	r3, #1
 80073a2:	bf14      	ite	ne
 80073a4:	2301      	movne	r3, #1
 80073a6:	2300      	moveq	r3, #0
 80073a8:	b2db      	uxtb	r3, r3
 80073aa:	2b00      	cmp	r3, #0
 80073ac:	d001      	beq.n	80073b2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80073ae:	2301      	movs	r3, #1
 80073b0:	e068      	b.n	8007484 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80073b2:	683b      	ldr	r3, [r7, #0]
 80073b4:	2b00      	cmp	r3, #0
 80073b6:	d104      	bne.n	80073c2 <HAL_TIM_PWM_Start+0x82>
 80073b8:	687b      	ldr	r3, [r7, #4]
 80073ba:	2202      	movs	r2, #2
 80073bc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80073c0:	e013      	b.n	80073ea <HAL_TIM_PWM_Start+0xaa>
 80073c2:	683b      	ldr	r3, [r7, #0]
 80073c4:	2b04      	cmp	r3, #4
 80073c6:	d104      	bne.n	80073d2 <HAL_TIM_PWM_Start+0x92>
 80073c8:	687b      	ldr	r3, [r7, #4]
 80073ca:	2202      	movs	r2, #2
 80073cc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80073d0:	e00b      	b.n	80073ea <HAL_TIM_PWM_Start+0xaa>
 80073d2:	683b      	ldr	r3, [r7, #0]
 80073d4:	2b08      	cmp	r3, #8
 80073d6:	d104      	bne.n	80073e2 <HAL_TIM_PWM_Start+0xa2>
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	2202      	movs	r2, #2
 80073dc:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80073e0:	e003      	b.n	80073ea <HAL_TIM_PWM_Start+0xaa>
 80073e2:	687b      	ldr	r3, [r7, #4]
 80073e4:	2202      	movs	r2, #2
 80073e6:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 80073ea:	687b      	ldr	r3, [r7, #4]
 80073ec:	681b      	ldr	r3, [r3, #0]
 80073ee:	2201      	movs	r2, #1
 80073f0:	6839      	ldr	r1, [r7, #0]
 80073f2:	4618      	mov	r0, r3
 80073f4:	f000 fee0 	bl	80081b8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 80073f8:	687b      	ldr	r3, [r7, #4]
 80073fa:	681b      	ldr	r3, [r3, #0]
 80073fc:	4a23      	ldr	r2, [pc, #140]	; (800748c <HAL_TIM_PWM_Start+0x14c>)
 80073fe:	4293      	cmp	r3, r2
 8007400:	d107      	bne.n	8007412 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007402:	687b      	ldr	r3, [r7, #4]
 8007404:	681b      	ldr	r3, [r3, #0]
 8007406:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	681b      	ldr	r3, [r3, #0]
 800740c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007410:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007412:	687b      	ldr	r3, [r7, #4]
 8007414:	681b      	ldr	r3, [r3, #0]
 8007416:	4a1d      	ldr	r2, [pc, #116]	; (800748c <HAL_TIM_PWM_Start+0x14c>)
 8007418:	4293      	cmp	r3, r2
 800741a:	d018      	beq.n	800744e <HAL_TIM_PWM_Start+0x10e>
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	681b      	ldr	r3, [r3, #0]
 8007420:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007424:	d013      	beq.n	800744e <HAL_TIM_PWM_Start+0x10e>
 8007426:	687b      	ldr	r3, [r7, #4]
 8007428:	681b      	ldr	r3, [r3, #0]
 800742a:	4a19      	ldr	r2, [pc, #100]	; (8007490 <HAL_TIM_PWM_Start+0x150>)
 800742c:	4293      	cmp	r3, r2
 800742e:	d00e      	beq.n	800744e <HAL_TIM_PWM_Start+0x10e>
 8007430:	687b      	ldr	r3, [r7, #4]
 8007432:	681b      	ldr	r3, [r3, #0]
 8007434:	4a17      	ldr	r2, [pc, #92]	; (8007494 <HAL_TIM_PWM_Start+0x154>)
 8007436:	4293      	cmp	r3, r2
 8007438:	d009      	beq.n	800744e <HAL_TIM_PWM_Start+0x10e>
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	4a16      	ldr	r2, [pc, #88]	; (8007498 <HAL_TIM_PWM_Start+0x158>)
 8007440:	4293      	cmp	r3, r2
 8007442:	d004      	beq.n	800744e <HAL_TIM_PWM_Start+0x10e>
 8007444:	687b      	ldr	r3, [r7, #4]
 8007446:	681b      	ldr	r3, [r3, #0]
 8007448:	4a14      	ldr	r2, [pc, #80]	; (800749c <HAL_TIM_PWM_Start+0x15c>)
 800744a:	4293      	cmp	r3, r2
 800744c:	d111      	bne.n	8007472 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800744e:	687b      	ldr	r3, [r7, #4]
 8007450:	681b      	ldr	r3, [r3, #0]
 8007452:	689b      	ldr	r3, [r3, #8]
 8007454:	f003 0307 	and.w	r3, r3, #7
 8007458:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800745a:	68fb      	ldr	r3, [r7, #12]
 800745c:	2b06      	cmp	r3, #6
 800745e:	d010      	beq.n	8007482 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007460:	687b      	ldr	r3, [r7, #4]
 8007462:	681b      	ldr	r3, [r3, #0]
 8007464:	681a      	ldr	r2, [r3, #0]
 8007466:	687b      	ldr	r3, [r7, #4]
 8007468:	681b      	ldr	r3, [r3, #0]
 800746a:	f042 0201 	orr.w	r2, r2, #1
 800746e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007470:	e007      	b.n	8007482 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007472:	687b      	ldr	r3, [r7, #4]
 8007474:	681b      	ldr	r3, [r3, #0]
 8007476:	681a      	ldr	r2, [r3, #0]
 8007478:	687b      	ldr	r3, [r7, #4]
 800747a:	681b      	ldr	r3, [r3, #0]
 800747c:	f042 0201 	orr.w	r2, r2, #1
 8007480:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007482:	2300      	movs	r3, #0
}
 8007484:	4618      	mov	r0, r3
 8007486:	3710      	adds	r7, #16
 8007488:	46bd      	mov	sp, r7
 800748a:	bd80      	pop	{r7, pc}
 800748c:	40010000 	.word	0x40010000
 8007490:	40000400 	.word	0x40000400
 8007494:	40000800 	.word	0x40000800
 8007498:	40000c00 	.word	0x40000c00
 800749c:	40014000 	.word	0x40014000

080074a0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80074a0:	b580      	push	{r7, lr}
 80074a2:	b086      	sub	sp, #24
 80074a4:	af00      	add	r7, sp, #0
 80074a6:	6078      	str	r0, [r7, #4]
 80074a8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80074aa:	687b      	ldr	r3, [r7, #4]
 80074ac:	2b00      	cmp	r3, #0
 80074ae:	d101      	bne.n	80074b4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80074b0:	2301      	movs	r3, #1
 80074b2:	e097      	b.n	80075e4 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80074b4:	687b      	ldr	r3, [r7, #4]
 80074b6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80074ba:	b2db      	uxtb	r3, r3
 80074bc:	2b00      	cmp	r3, #0
 80074be:	d106      	bne.n	80074ce <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80074c0:	687b      	ldr	r3, [r7, #4]
 80074c2:	2200      	movs	r2, #0
 80074c4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80074c8:	6878      	ldr	r0, [r7, #4]
 80074ca:	f7fb ffcd 	bl	8003468 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80074ce:	687b      	ldr	r3, [r7, #4]
 80074d0:	2202      	movs	r2, #2
 80074d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80074d6:	687b      	ldr	r3, [r7, #4]
 80074d8:	681b      	ldr	r3, [r3, #0]
 80074da:	689b      	ldr	r3, [r3, #8]
 80074dc:	687a      	ldr	r2, [r7, #4]
 80074de:	6812      	ldr	r2, [r2, #0]
 80074e0:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80074e4:	f023 0307 	bic.w	r3, r3, #7
 80074e8:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	681a      	ldr	r2, [r3, #0]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	3304      	adds	r3, #4
 80074f2:	4619      	mov	r1, r3
 80074f4:	4610      	mov	r0, r2
 80074f6:	f000 fbb9 	bl	8007c6c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	681b      	ldr	r3, [r3, #0]
 80074fe:	689b      	ldr	r3, [r3, #8]
 8007500:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	681b      	ldr	r3, [r3, #0]
 8007506:	699b      	ldr	r3, [r3, #24]
 8007508:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	681b      	ldr	r3, [r3, #0]
 800750e:	6a1b      	ldr	r3, [r3, #32]
 8007510:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007512:	683b      	ldr	r3, [r7, #0]
 8007514:	681b      	ldr	r3, [r3, #0]
 8007516:	697a      	ldr	r2, [r7, #20]
 8007518:	4313      	orrs	r3, r2
 800751a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800751c:	693b      	ldr	r3, [r7, #16]
 800751e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007522:	f023 0303 	bic.w	r3, r3, #3
 8007526:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007528:	683b      	ldr	r3, [r7, #0]
 800752a:	689a      	ldr	r2, [r3, #8]
 800752c:	683b      	ldr	r3, [r7, #0]
 800752e:	699b      	ldr	r3, [r3, #24]
 8007530:	021b      	lsls	r3, r3, #8
 8007532:	4313      	orrs	r3, r2
 8007534:	693a      	ldr	r2, [r7, #16]
 8007536:	4313      	orrs	r3, r2
 8007538:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800753a:	693b      	ldr	r3, [r7, #16]
 800753c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007540:	f023 030c 	bic.w	r3, r3, #12
 8007544:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007546:	693b      	ldr	r3, [r7, #16]
 8007548:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800754c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007550:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007552:	683b      	ldr	r3, [r7, #0]
 8007554:	68da      	ldr	r2, [r3, #12]
 8007556:	683b      	ldr	r3, [r7, #0]
 8007558:	69db      	ldr	r3, [r3, #28]
 800755a:	021b      	lsls	r3, r3, #8
 800755c:	4313      	orrs	r3, r2
 800755e:	693a      	ldr	r2, [r7, #16]
 8007560:	4313      	orrs	r3, r2
 8007562:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007564:	683b      	ldr	r3, [r7, #0]
 8007566:	691b      	ldr	r3, [r3, #16]
 8007568:	011a      	lsls	r2, r3, #4
 800756a:	683b      	ldr	r3, [r7, #0]
 800756c:	6a1b      	ldr	r3, [r3, #32]
 800756e:	031b      	lsls	r3, r3, #12
 8007570:	4313      	orrs	r3, r2
 8007572:	693a      	ldr	r2, [r7, #16]
 8007574:	4313      	orrs	r3, r2
 8007576:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8007578:	68fb      	ldr	r3, [r7, #12]
 800757a:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 800757e:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8007580:	68fb      	ldr	r3, [r7, #12]
 8007582:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8007586:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	683b      	ldr	r3, [r7, #0]
 800758e:	695b      	ldr	r3, [r3, #20]
 8007590:	011b      	lsls	r3, r3, #4
 8007592:	4313      	orrs	r3, r2
 8007594:	68fa      	ldr	r2, [r7, #12]
 8007596:	4313      	orrs	r3, r2
 8007598:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 800759a:	687b      	ldr	r3, [r7, #4]
 800759c:	681b      	ldr	r3, [r3, #0]
 800759e:	697a      	ldr	r2, [r7, #20]
 80075a0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80075a2:	687b      	ldr	r3, [r7, #4]
 80075a4:	681b      	ldr	r3, [r3, #0]
 80075a6:	693a      	ldr	r2, [r7, #16]
 80075a8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80075aa:	687b      	ldr	r3, [r7, #4]
 80075ac:	681b      	ldr	r3, [r3, #0]
 80075ae:	68fa      	ldr	r2, [r7, #12]
 80075b0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2201      	movs	r2, #1
 80075b6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2201      	movs	r2, #1
 80075be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2201      	movs	r2, #1
 80075c6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2201      	movs	r2, #1
 80075ce:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80075d2:	687b      	ldr	r3, [r7, #4]
 80075d4:	2201      	movs	r2, #1
 80075d6:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80075da:	687b      	ldr	r3, [r7, #4]
 80075dc:	2201      	movs	r2, #1
 80075de:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80075e2:	2300      	movs	r3, #0
}
 80075e4:	4618      	mov	r0, r3
 80075e6:	3718      	adds	r7, #24
 80075e8:	46bd      	mov	sp, r7
 80075ea:	bd80      	pop	{r7, pc}

080075ec <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 80075ec:	b580      	push	{r7, lr}
 80075ee:	b084      	sub	sp, #16
 80075f0:	af00      	add	r7, sp, #0
 80075f2:	6078      	str	r0, [r7, #4]
 80075f4:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 80075f6:	687b      	ldr	r3, [r7, #4]
 80075f8:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80075fc:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 80075fe:	687b      	ldr	r3, [r7, #4]
 8007600:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007604:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007606:	687b      	ldr	r3, [r7, #4]
 8007608:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800760c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007614:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007616:	683b      	ldr	r3, [r7, #0]
 8007618:	2b00      	cmp	r3, #0
 800761a:	d110      	bne.n	800763e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800761c:	7bfb      	ldrb	r3, [r7, #15]
 800761e:	2b01      	cmp	r3, #1
 8007620:	d102      	bne.n	8007628 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007622:	7b7b      	ldrb	r3, [r7, #13]
 8007624:	2b01      	cmp	r3, #1
 8007626:	d001      	beq.n	800762c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007628:	2301      	movs	r3, #1
 800762a:	e069      	b.n	8007700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800762c:	687b      	ldr	r3, [r7, #4]
 800762e:	2202      	movs	r2, #2
 8007630:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007634:	687b      	ldr	r3, [r7, #4]
 8007636:	2202      	movs	r2, #2
 8007638:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800763c:	e031      	b.n	80076a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800763e:	683b      	ldr	r3, [r7, #0]
 8007640:	2b04      	cmp	r3, #4
 8007642:	d110      	bne.n	8007666 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007644:	7bbb      	ldrb	r3, [r7, #14]
 8007646:	2b01      	cmp	r3, #1
 8007648:	d102      	bne.n	8007650 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800764a:	7b3b      	ldrb	r3, [r7, #12]
 800764c:	2b01      	cmp	r3, #1
 800764e:	d001      	beq.n	8007654 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007650:	2301      	movs	r3, #1
 8007652:	e055      	b.n	8007700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007654:	687b      	ldr	r3, [r7, #4]
 8007656:	2202      	movs	r2, #2
 8007658:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	2202      	movs	r2, #2
 8007660:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007664:	e01d      	b.n	80076a2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007666:	7bfb      	ldrb	r3, [r7, #15]
 8007668:	2b01      	cmp	r3, #1
 800766a:	d108      	bne.n	800767e <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800766c:	7bbb      	ldrb	r3, [r7, #14]
 800766e:	2b01      	cmp	r3, #1
 8007670:	d105      	bne.n	800767e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007672:	7b7b      	ldrb	r3, [r7, #13]
 8007674:	2b01      	cmp	r3, #1
 8007676:	d102      	bne.n	800767e <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8007678:	7b3b      	ldrb	r3, [r7, #12]
 800767a:	2b01      	cmp	r3, #1
 800767c:	d001      	beq.n	8007682 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 800767e:	2301      	movs	r3, #1
 8007680:	e03e      	b.n	8007700 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007682:	687b      	ldr	r3, [r7, #4]
 8007684:	2202      	movs	r2, #2
 8007686:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	2202      	movs	r2, #2
 800768e:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007692:	687b      	ldr	r3, [r7, #4]
 8007694:	2202      	movs	r2, #2
 8007696:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800769a:	687b      	ldr	r3, [r7, #4]
 800769c:	2202      	movs	r2, #2
 800769e:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80076a2:	683b      	ldr	r3, [r7, #0]
 80076a4:	2b00      	cmp	r3, #0
 80076a6:	d003      	beq.n	80076b0 <HAL_TIM_Encoder_Start+0xc4>
 80076a8:	683b      	ldr	r3, [r7, #0]
 80076aa:	2b04      	cmp	r3, #4
 80076ac:	d008      	beq.n	80076c0 <HAL_TIM_Encoder_Start+0xd4>
 80076ae:	e00f      	b.n	80076d0 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	2201      	movs	r2, #1
 80076b6:	2100      	movs	r1, #0
 80076b8:	4618      	mov	r0, r3
 80076ba:	f000 fd7d 	bl	80081b8 <TIM_CCxChannelCmd>
      break;
 80076be:	e016      	b.n	80076ee <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	2201      	movs	r2, #1
 80076c6:	2104      	movs	r1, #4
 80076c8:	4618      	mov	r0, r3
 80076ca:	f000 fd75 	bl	80081b8 <TIM_CCxChannelCmd>
      break;
 80076ce:	e00e      	b.n	80076ee <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80076d0:	687b      	ldr	r3, [r7, #4]
 80076d2:	681b      	ldr	r3, [r3, #0]
 80076d4:	2201      	movs	r2, #1
 80076d6:	2100      	movs	r1, #0
 80076d8:	4618      	mov	r0, r3
 80076da:	f000 fd6d 	bl	80081b8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80076de:	687b      	ldr	r3, [r7, #4]
 80076e0:	681b      	ldr	r3, [r3, #0]
 80076e2:	2201      	movs	r2, #1
 80076e4:	2104      	movs	r1, #4
 80076e6:	4618      	mov	r0, r3
 80076e8:	f000 fd66 	bl	80081b8 <TIM_CCxChannelCmd>
      break;
 80076ec:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 80076ee:	687b      	ldr	r3, [r7, #4]
 80076f0:	681b      	ldr	r3, [r3, #0]
 80076f2:	681a      	ldr	r2, [r3, #0]
 80076f4:	687b      	ldr	r3, [r7, #4]
 80076f6:	681b      	ldr	r3, [r3, #0]
 80076f8:	f042 0201 	orr.w	r2, r2, #1
 80076fc:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 80076fe:	2300      	movs	r3, #0
}
 8007700:	4618      	mov	r0, r3
 8007702:	3710      	adds	r7, #16
 8007704:	46bd      	mov	sp, r7
 8007706:	bd80      	pop	{r7, pc}

08007708 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007708:	b580      	push	{r7, lr}
 800770a:	b082      	sub	sp, #8
 800770c:	af00      	add	r7, sp, #0
 800770e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007710:	687b      	ldr	r3, [r7, #4]
 8007712:	681b      	ldr	r3, [r3, #0]
 8007714:	691b      	ldr	r3, [r3, #16]
 8007716:	f003 0302 	and.w	r3, r3, #2
 800771a:	2b02      	cmp	r3, #2
 800771c:	d122      	bne.n	8007764 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800771e:	687b      	ldr	r3, [r7, #4]
 8007720:	681b      	ldr	r3, [r3, #0]
 8007722:	68db      	ldr	r3, [r3, #12]
 8007724:	f003 0302 	and.w	r3, r3, #2
 8007728:	2b02      	cmp	r3, #2
 800772a:	d11b      	bne.n	8007764 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800772c:	687b      	ldr	r3, [r7, #4]
 800772e:	681b      	ldr	r3, [r3, #0]
 8007730:	f06f 0202 	mvn.w	r2, #2
 8007734:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2201      	movs	r2, #1
 800773a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	699b      	ldr	r3, [r3, #24]
 8007742:	f003 0303 	and.w	r3, r3, #3
 8007746:	2b00      	cmp	r3, #0
 8007748:	d003      	beq.n	8007752 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800774a:	6878      	ldr	r0, [r7, #4]
 800774c:	f000 fa70 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 8007750:	e005      	b.n	800775e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007752:	6878      	ldr	r0, [r7, #4]
 8007754:	f000 fa62 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007758:	6878      	ldr	r0, [r7, #4]
 800775a:	f000 fa73 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800775e:	687b      	ldr	r3, [r7, #4]
 8007760:	2200      	movs	r2, #0
 8007762:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007764:	687b      	ldr	r3, [r7, #4]
 8007766:	681b      	ldr	r3, [r3, #0]
 8007768:	691b      	ldr	r3, [r3, #16]
 800776a:	f003 0304 	and.w	r3, r3, #4
 800776e:	2b04      	cmp	r3, #4
 8007770:	d122      	bne.n	80077b8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68db      	ldr	r3, [r3, #12]
 8007778:	f003 0304 	and.w	r3, r3, #4
 800777c:	2b04      	cmp	r3, #4
 800777e:	d11b      	bne.n	80077b8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8007780:	687b      	ldr	r3, [r7, #4]
 8007782:	681b      	ldr	r3, [r3, #0]
 8007784:	f06f 0204 	mvn.w	r2, #4
 8007788:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2202      	movs	r2, #2
 800778e:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	699b      	ldr	r3, [r3, #24]
 8007796:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800779a:	2b00      	cmp	r3, #0
 800779c:	d003      	beq.n	80077a6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800779e:	6878      	ldr	r0, [r7, #4]
 80077a0:	f000 fa46 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 80077a4:	e005      	b.n	80077b2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077a6:	6878      	ldr	r0, [r7, #4]
 80077a8:	f000 fa38 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80077ac:	6878      	ldr	r0, [r7, #4]
 80077ae:	f000 fa49 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80077b2:	687b      	ldr	r3, [r7, #4]
 80077b4:	2200      	movs	r2, #0
 80077b6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80077b8:	687b      	ldr	r3, [r7, #4]
 80077ba:	681b      	ldr	r3, [r3, #0]
 80077bc:	691b      	ldr	r3, [r3, #16]
 80077be:	f003 0308 	and.w	r3, r3, #8
 80077c2:	2b08      	cmp	r3, #8
 80077c4:	d122      	bne.n	800780c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80077c6:	687b      	ldr	r3, [r7, #4]
 80077c8:	681b      	ldr	r3, [r3, #0]
 80077ca:	68db      	ldr	r3, [r3, #12]
 80077cc:	f003 0308 	and.w	r3, r3, #8
 80077d0:	2b08      	cmp	r3, #8
 80077d2:	d11b      	bne.n	800780c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 80077d4:	687b      	ldr	r3, [r7, #4]
 80077d6:	681b      	ldr	r3, [r3, #0]
 80077d8:	f06f 0208 	mvn.w	r2, #8
 80077dc:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80077de:	687b      	ldr	r3, [r7, #4]
 80077e0:	2204      	movs	r2, #4
 80077e2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80077e4:	687b      	ldr	r3, [r7, #4]
 80077e6:	681b      	ldr	r3, [r3, #0]
 80077e8:	69db      	ldr	r3, [r3, #28]
 80077ea:	f003 0303 	and.w	r3, r3, #3
 80077ee:	2b00      	cmp	r3, #0
 80077f0:	d003      	beq.n	80077fa <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80077f2:	6878      	ldr	r0, [r7, #4]
 80077f4:	f000 fa1c 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 80077f8:	e005      	b.n	8007806 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80077fa:	6878      	ldr	r0, [r7, #4]
 80077fc:	f000 fa0e 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007800:	6878      	ldr	r0, [r7, #4]
 8007802:	f000 fa1f 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007806:	687b      	ldr	r3, [r7, #4]
 8007808:	2200      	movs	r2, #0
 800780a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800780c:	687b      	ldr	r3, [r7, #4]
 800780e:	681b      	ldr	r3, [r3, #0]
 8007810:	691b      	ldr	r3, [r3, #16]
 8007812:	f003 0310 	and.w	r3, r3, #16
 8007816:	2b10      	cmp	r3, #16
 8007818:	d122      	bne.n	8007860 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800781a:	687b      	ldr	r3, [r7, #4]
 800781c:	681b      	ldr	r3, [r3, #0]
 800781e:	68db      	ldr	r3, [r3, #12]
 8007820:	f003 0310 	and.w	r3, r3, #16
 8007824:	2b10      	cmp	r3, #16
 8007826:	d11b      	bne.n	8007860 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007828:	687b      	ldr	r3, [r7, #4]
 800782a:	681b      	ldr	r3, [r3, #0]
 800782c:	f06f 0210 	mvn.w	r2, #16
 8007830:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007832:	687b      	ldr	r3, [r7, #4]
 8007834:	2208      	movs	r2, #8
 8007836:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007838:	687b      	ldr	r3, [r7, #4]
 800783a:	681b      	ldr	r3, [r3, #0]
 800783c:	69db      	ldr	r3, [r3, #28]
 800783e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007842:	2b00      	cmp	r3, #0
 8007844:	d003      	beq.n	800784e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007846:	6878      	ldr	r0, [r7, #4]
 8007848:	f000 f9f2 	bl	8007c30 <HAL_TIM_IC_CaptureCallback>
 800784c:	e005      	b.n	800785a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800784e:	6878      	ldr	r0, [r7, #4]
 8007850:	f000 f9e4 	bl	8007c1c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007854:	6878      	ldr	r0, [r7, #4]
 8007856:	f000 f9f5 	bl	8007c44 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800785a:	687b      	ldr	r3, [r7, #4]
 800785c:	2200      	movs	r2, #0
 800785e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	691b      	ldr	r3, [r3, #16]
 8007866:	f003 0301 	and.w	r3, r3, #1
 800786a:	2b01      	cmp	r3, #1
 800786c:	d10e      	bne.n	800788c <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800786e:	687b      	ldr	r3, [r7, #4]
 8007870:	681b      	ldr	r3, [r3, #0]
 8007872:	68db      	ldr	r3, [r3, #12]
 8007874:	f003 0301 	and.w	r3, r3, #1
 8007878:	2b01      	cmp	r3, #1
 800787a:	d107      	bne.n	800788c <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f06f 0201 	mvn.w	r2, #1
 8007884:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8007886:	6878      	ldr	r0, [r7, #4]
 8007888:	f7fb fd32 	bl	80032f0 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	691b      	ldr	r3, [r3, #16]
 8007892:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007896:	2b80      	cmp	r3, #128	; 0x80
 8007898:	d10e      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800789a:	687b      	ldr	r3, [r7, #4]
 800789c:	681b      	ldr	r3, [r3, #0]
 800789e:	68db      	ldr	r3, [r3, #12]
 80078a0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80078a4:	2b80      	cmp	r3, #128	; 0x80
 80078a6:	d107      	bne.n	80078b8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80078a8:	687b      	ldr	r3, [r7, #4]
 80078aa:	681b      	ldr	r3, [r3, #0]
 80078ac:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80078b0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80078b2:	6878      	ldr	r0, [r7, #4]
 80078b4:	f000 fd1e 	bl	80082f4 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80078b8:	687b      	ldr	r3, [r7, #4]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	691b      	ldr	r3, [r3, #16]
 80078be:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078c2:	2b40      	cmp	r3, #64	; 0x40
 80078c4:	d10e      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80078c6:	687b      	ldr	r3, [r7, #4]
 80078c8:	681b      	ldr	r3, [r3, #0]
 80078ca:	68db      	ldr	r3, [r3, #12]
 80078cc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80078d0:	2b40      	cmp	r3, #64	; 0x40
 80078d2:	d107      	bne.n	80078e4 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 80078d4:	687b      	ldr	r3, [r7, #4]
 80078d6:	681b      	ldr	r3, [r3, #0]
 80078d8:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80078dc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80078de:	6878      	ldr	r0, [r7, #4]
 80078e0:	f000 f9ba 	bl	8007c58 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80078e4:	687b      	ldr	r3, [r7, #4]
 80078e6:	681b      	ldr	r3, [r3, #0]
 80078e8:	691b      	ldr	r3, [r3, #16]
 80078ea:	f003 0320 	and.w	r3, r3, #32
 80078ee:	2b20      	cmp	r3, #32
 80078f0:	d10e      	bne.n	8007910 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80078f2:	687b      	ldr	r3, [r7, #4]
 80078f4:	681b      	ldr	r3, [r3, #0]
 80078f6:	68db      	ldr	r3, [r3, #12]
 80078f8:	f003 0320 	and.w	r3, r3, #32
 80078fc:	2b20      	cmp	r3, #32
 80078fe:	d107      	bne.n	8007910 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007900:	687b      	ldr	r3, [r7, #4]
 8007902:	681b      	ldr	r3, [r3, #0]
 8007904:	f06f 0220 	mvn.w	r2, #32
 8007908:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800790a:	6878      	ldr	r0, [r7, #4]
 800790c:	f000 fce8 	bl	80082e0 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007910:	bf00      	nop
 8007912:	3708      	adds	r7, #8
 8007914:	46bd      	mov	sp, r7
 8007916:	bd80      	pop	{r7, pc}

08007918 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007918:	b580      	push	{r7, lr}
 800791a:	b084      	sub	sp, #16
 800791c:	af00      	add	r7, sp, #0
 800791e:	60f8      	str	r0, [r7, #12]
 8007920:	60b9      	str	r1, [r7, #8]
 8007922:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800792a:	2b01      	cmp	r3, #1
 800792c:	d101      	bne.n	8007932 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800792e:	2302      	movs	r3, #2
 8007930:	e0ac      	b.n	8007a8c <HAL_TIM_PWM_ConfigChannel+0x174>
 8007932:	68fb      	ldr	r3, [r7, #12]
 8007934:	2201      	movs	r2, #1
 8007936:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800793a:	687b      	ldr	r3, [r7, #4]
 800793c:	2b0c      	cmp	r3, #12
 800793e:	f200 809f 	bhi.w	8007a80 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007942:	a201      	add	r2, pc, #4	; (adr r2, 8007948 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007944:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007948:	0800797d 	.word	0x0800797d
 800794c:	08007a81 	.word	0x08007a81
 8007950:	08007a81 	.word	0x08007a81
 8007954:	08007a81 	.word	0x08007a81
 8007958:	080079bd 	.word	0x080079bd
 800795c:	08007a81 	.word	0x08007a81
 8007960:	08007a81 	.word	0x08007a81
 8007964:	08007a81 	.word	0x08007a81
 8007968:	080079ff 	.word	0x080079ff
 800796c:	08007a81 	.word	0x08007a81
 8007970:	08007a81 	.word	0x08007a81
 8007974:	08007a81 	.word	0x08007a81
 8007978:	08007a3f 	.word	0x08007a3f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	68b9      	ldr	r1, [r7, #8]
 8007982:	4618      	mov	r0, r3
 8007984:	f000 f9f2 	bl	8007d6c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8007988:	68fb      	ldr	r3, [r7, #12]
 800798a:	681b      	ldr	r3, [r3, #0]
 800798c:	699a      	ldr	r2, [r3, #24]
 800798e:	68fb      	ldr	r3, [r7, #12]
 8007990:	681b      	ldr	r3, [r3, #0]
 8007992:	f042 0208 	orr.w	r2, r2, #8
 8007996:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8007998:	68fb      	ldr	r3, [r7, #12]
 800799a:	681b      	ldr	r3, [r3, #0]
 800799c:	699a      	ldr	r2, [r3, #24]
 800799e:	68fb      	ldr	r3, [r7, #12]
 80079a0:	681b      	ldr	r3, [r3, #0]
 80079a2:	f022 0204 	bic.w	r2, r2, #4
 80079a6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80079a8:	68fb      	ldr	r3, [r7, #12]
 80079aa:	681b      	ldr	r3, [r3, #0]
 80079ac:	6999      	ldr	r1, [r3, #24]
 80079ae:	68bb      	ldr	r3, [r7, #8]
 80079b0:	691a      	ldr	r2, [r3, #16]
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	681b      	ldr	r3, [r3, #0]
 80079b6:	430a      	orrs	r2, r1
 80079b8:	619a      	str	r2, [r3, #24]
      break;
 80079ba:	e062      	b.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80079bc:	68fb      	ldr	r3, [r7, #12]
 80079be:	681b      	ldr	r3, [r3, #0]
 80079c0:	68b9      	ldr	r1, [r7, #8]
 80079c2:	4618      	mov	r0, r3
 80079c4:	f000 fa38 	bl	8007e38 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80079c8:	68fb      	ldr	r3, [r7, #12]
 80079ca:	681b      	ldr	r3, [r3, #0]
 80079cc:	699a      	ldr	r2, [r3, #24]
 80079ce:	68fb      	ldr	r3, [r7, #12]
 80079d0:	681b      	ldr	r3, [r3, #0]
 80079d2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80079d6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	681b      	ldr	r3, [r3, #0]
 80079dc:	699a      	ldr	r2, [r3, #24]
 80079de:	68fb      	ldr	r3, [r7, #12]
 80079e0:	681b      	ldr	r3, [r3, #0]
 80079e2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80079e6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80079e8:	68fb      	ldr	r3, [r7, #12]
 80079ea:	681b      	ldr	r3, [r3, #0]
 80079ec:	6999      	ldr	r1, [r3, #24]
 80079ee:	68bb      	ldr	r3, [r7, #8]
 80079f0:	691b      	ldr	r3, [r3, #16]
 80079f2:	021a      	lsls	r2, r3, #8
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	681b      	ldr	r3, [r3, #0]
 80079f8:	430a      	orrs	r2, r1
 80079fa:	619a      	str	r2, [r3, #24]
      break;
 80079fc:	e041      	b.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80079fe:	68fb      	ldr	r3, [r7, #12]
 8007a00:	681b      	ldr	r3, [r3, #0]
 8007a02:	68b9      	ldr	r1, [r7, #8]
 8007a04:	4618      	mov	r0, r3
 8007a06:	f000 fa83 	bl	8007f10 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8007a0a:	68fb      	ldr	r3, [r7, #12]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	69da      	ldr	r2, [r3, #28]
 8007a10:	68fb      	ldr	r3, [r7, #12]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	f042 0208 	orr.w	r2, r2, #8
 8007a18:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8007a1a:	68fb      	ldr	r3, [r7, #12]
 8007a1c:	681b      	ldr	r3, [r3, #0]
 8007a1e:	69da      	ldr	r2, [r3, #28]
 8007a20:	68fb      	ldr	r3, [r7, #12]
 8007a22:	681b      	ldr	r3, [r3, #0]
 8007a24:	f022 0204 	bic.w	r2, r2, #4
 8007a28:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8007a2a:	68fb      	ldr	r3, [r7, #12]
 8007a2c:	681b      	ldr	r3, [r3, #0]
 8007a2e:	69d9      	ldr	r1, [r3, #28]
 8007a30:	68bb      	ldr	r3, [r7, #8]
 8007a32:	691a      	ldr	r2, [r3, #16]
 8007a34:	68fb      	ldr	r3, [r7, #12]
 8007a36:	681b      	ldr	r3, [r3, #0]
 8007a38:	430a      	orrs	r2, r1
 8007a3a:	61da      	str	r2, [r3, #28]
      break;
 8007a3c:	e021      	b.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8007a3e:	68fb      	ldr	r3, [r7, #12]
 8007a40:	681b      	ldr	r3, [r3, #0]
 8007a42:	68b9      	ldr	r1, [r7, #8]
 8007a44:	4618      	mov	r0, r3
 8007a46:	f000 facd 	bl	8007fe4 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8007a4a:	68fb      	ldr	r3, [r7, #12]
 8007a4c:	681b      	ldr	r3, [r3, #0]
 8007a4e:	69da      	ldr	r2, [r3, #28]
 8007a50:	68fb      	ldr	r3, [r7, #12]
 8007a52:	681b      	ldr	r3, [r3, #0]
 8007a54:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007a58:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8007a5a:	68fb      	ldr	r3, [r7, #12]
 8007a5c:	681b      	ldr	r3, [r3, #0]
 8007a5e:	69da      	ldr	r2, [r3, #28]
 8007a60:	68fb      	ldr	r3, [r7, #12]
 8007a62:	681b      	ldr	r3, [r3, #0]
 8007a64:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007a68:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8007a6a:	68fb      	ldr	r3, [r7, #12]
 8007a6c:	681b      	ldr	r3, [r3, #0]
 8007a6e:	69d9      	ldr	r1, [r3, #28]
 8007a70:	68bb      	ldr	r3, [r7, #8]
 8007a72:	691b      	ldr	r3, [r3, #16]
 8007a74:	021a      	lsls	r2, r3, #8
 8007a76:	68fb      	ldr	r3, [r7, #12]
 8007a78:	681b      	ldr	r3, [r3, #0]
 8007a7a:	430a      	orrs	r2, r1
 8007a7c:	61da      	str	r2, [r3, #28]
      break;
 8007a7e:	e000      	b.n	8007a82 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8007a80:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	2200      	movs	r2, #0
 8007a86:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007a8a:	2300      	movs	r3, #0
}
 8007a8c:	4618      	mov	r0, r3
 8007a8e:	3710      	adds	r7, #16
 8007a90:	46bd      	mov	sp, r7
 8007a92:	bd80      	pop	{r7, pc}

08007a94 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8007a94:	b580      	push	{r7, lr}
 8007a96:	b084      	sub	sp, #16
 8007a98:	af00      	add	r7, sp, #0
 8007a9a:	6078      	str	r0, [r7, #4]
 8007a9c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8007a9e:	687b      	ldr	r3, [r7, #4]
 8007aa0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007aa4:	2b01      	cmp	r3, #1
 8007aa6:	d101      	bne.n	8007aac <HAL_TIM_ConfigClockSource+0x18>
 8007aa8:	2302      	movs	r3, #2
 8007aaa:	e0b3      	b.n	8007c14 <HAL_TIM_ConfigClockSource+0x180>
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	2201      	movs	r2, #1
 8007ab0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8007ab4:	687b      	ldr	r3, [r7, #4]
 8007ab6:	2202      	movs	r2, #2
 8007ab8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8007abc:	687b      	ldr	r3, [r7, #4]
 8007abe:	681b      	ldr	r3, [r3, #0]
 8007ac0:	689b      	ldr	r3, [r3, #8]
 8007ac2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8007ac4:	68fb      	ldr	r3, [r7, #12]
 8007ac6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8007aca:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8007acc:	68fb      	ldr	r3, [r7, #12]
 8007ace:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007ad2:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007ad4:	687b      	ldr	r3, [r7, #4]
 8007ad6:	681b      	ldr	r3, [r3, #0]
 8007ad8:	68fa      	ldr	r2, [r7, #12]
 8007ada:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007adc:	683b      	ldr	r3, [r7, #0]
 8007ade:	681b      	ldr	r3, [r3, #0]
 8007ae0:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007ae4:	d03e      	beq.n	8007b64 <HAL_TIM_ConfigClockSource+0xd0>
 8007ae6:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007aea:	f200 8087 	bhi.w	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007aee:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007af2:	f000 8085 	beq.w	8007c00 <HAL_TIM_ConfigClockSource+0x16c>
 8007af6:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007afa:	d87f      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007afc:	2b70      	cmp	r3, #112	; 0x70
 8007afe:	d01a      	beq.n	8007b36 <HAL_TIM_ConfigClockSource+0xa2>
 8007b00:	2b70      	cmp	r3, #112	; 0x70
 8007b02:	d87b      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007b04:	2b60      	cmp	r3, #96	; 0x60
 8007b06:	d050      	beq.n	8007baa <HAL_TIM_ConfigClockSource+0x116>
 8007b08:	2b60      	cmp	r3, #96	; 0x60
 8007b0a:	d877      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007b0c:	2b50      	cmp	r3, #80	; 0x50
 8007b0e:	d03c      	beq.n	8007b8a <HAL_TIM_ConfigClockSource+0xf6>
 8007b10:	2b50      	cmp	r3, #80	; 0x50
 8007b12:	d873      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007b14:	2b40      	cmp	r3, #64	; 0x40
 8007b16:	d058      	beq.n	8007bca <HAL_TIM_ConfigClockSource+0x136>
 8007b18:	2b40      	cmp	r3, #64	; 0x40
 8007b1a:	d86f      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007b1c:	2b30      	cmp	r3, #48	; 0x30
 8007b1e:	d064      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x156>
 8007b20:	2b30      	cmp	r3, #48	; 0x30
 8007b22:	d86b      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007b24:	2b20      	cmp	r3, #32
 8007b26:	d060      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x156>
 8007b28:	2b20      	cmp	r3, #32
 8007b2a:	d867      	bhi.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
 8007b2c:	2b00      	cmp	r3, #0
 8007b2e:	d05c      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x156>
 8007b30:	2b10      	cmp	r3, #16
 8007b32:	d05a      	beq.n	8007bea <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007b34:	e062      	b.n	8007bfc <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007b36:	687b      	ldr	r3, [r7, #4]
 8007b38:	6818      	ldr	r0, [r3, #0]
 8007b3a:	683b      	ldr	r3, [r7, #0]
 8007b3c:	6899      	ldr	r1, [r3, #8]
 8007b3e:	683b      	ldr	r3, [r7, #0]
 8007b40:	685a      	ldr	r2, [r3, #4]
 8007b42:	683b      	ldr	r3, [r7, #0]
 8007b44:	68db      	ldr	r3, [r3, #12]
 8007b46:	f000 fb17 	bl	8008178 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007b4a:	687b      	ldr	r3, [r7, #4]
 8007b4c:	681b      	ldr	r3, [r3, #0]
 8007b4e:	689b      	ldr	r3, [r3, #8]
 8007b50:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007b52:	68fb      	ldr	r3, [r7, #12]
 8007b54:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007b58:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	68fa      	ldr	r2, [r7, #12]
 8007b60:	609a      	str	r2, [r3, #8]
      break;
 8007b62:	e04e      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007b64:	687b      	ldr	r3, [r7, #4]
 8007b66:	6818      	ldr	r0, [r3, #0]
 8007b68:	683b      	ldr	r3, [r7, #0]
 8007b6a:	6899      	ldr	r1, [r3, #8]
 8007b6c:	683b      	ldr	r3, [r7, #0]
 8007b6e:	685a      	ldr	r2, [r3, #4]
 8007b70:	683b      	ldr	r3, [r7, #0]
 8007b72:	68db      	ldr	r3, [r3, #12]
 8007b74:	f000 fb00 	bl	8008178 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007b78:	687b      	ldr	r3, [r7, #4]
 8007b7a:	681b      	ldr	r3, [r3, #0]
 8007b7c:	689a      	ldr	r2, [r3, #8]
 8007b7e:	687b      	ldr	r3, [r7, #4]
 8007b80:	681b      	ldr	r3, [r3, #0]
 8007b82:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007b86:	609a      	str	r2, [r3, #8]
      break;
 8007b88:	e03b      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6818      	ldr	r0, [r3, #0]
 8007b8e:	683b      	ldr	r3, [r7, #0]
 8007b90:	6859      	ldr	r1, [r3, #4]
 8007b92:	683b      	ldr	r3, [r7, #0]
 8007b94:	68db      	ldr	r3, [r3, #12]
 8007b96:	461a      	mov	r2, r3
 8007b98:	f000 fa74 	bl	8008084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007b9c:	687b      	ldr	r3, [r7, #4]
 8007b9e:	681b      	ldr	r3, [r3, #0]
 8007ba0:	2150      	movs	r1, #80	; 0x50
 8007ba2:	4618      	mov	r0, r3
 8007ba4:	f000 facd 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007ba8:	e02b      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007baa:	687b      	ldr	r3, [r7, #4]
 8007bac:	6818      	ldr	r0, [r3, #0]
 8007bae:	683b      	ldr	r3, [r7, #0]
 8007bb0:	6859      	ldr	r1, [r3, #4]
 8007bb2:	683b      	ldr	r3, [r7, #0]
 8007bb4:	68db      	ldr	r3, [r3, #12]
 8007bb6:	461a      	mov	r2, r3
 8007bb8:	f000 fa93 	bl	80080e2 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	681b      	ldr	r3, [r3, #0]
 8007bc0:	2160      	movs	r1, #96	; 0x60
 8007bc2:	4618      	mov	r0, r3
 8007bc4:	f000 fabd 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007bc8:	e01b      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007bca:	687b      	ldr	r3, [r7, #4]
 8007bcc:	6818      	ldr	r0, [r3, #0]
 8007bce:	683b      	ldr	r3, [r7, #0]
 8007bd0:	6859      	ldr	r1, [r3, #4]
 8007bd2:	683b      	ldr	r3, [r7, #0]
 8007bd4:	68db      	ldr	r3, [r3, #12]
 8007bd6:	461a      	mov	r2, r3
 8007bd8:	f000 fa54 	bl	8008084 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007bdc:	687b      	ldr	r3, [r7, #4]
 8007bde:	681b      	ldr	r3, [r3, #0]
 8007be0:	2140      	movs	r1, #64	; 0x40
 8007be2:	4618      	mov	r0, r3
 8007be4:	f000 faad 	bl	8008142 <TIM_ITRx_SetConfig>
      break;
 8007be8:	e00b      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681a      	ldr	r2, [r3, #0]
 8007bee:	683b      	ldr	r3, [r7, #0]
 8007bf0:	681b      	ldr	r3, [r3, #0]
 8007bf2:	4619      	mov	r1, r3
 8007bf4:	4610      	mov	r0, r2
 8007bf6:	f000 faa4 	bl	8008142 <TIM_ITRx_SetConfig>
        break;
 8007bfa:	e002      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007bfc:	bf00      	nop
 8007bfe:	e000      	b.n	8007c02 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007c00:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	2201      	movs	r2, #1
 8007c06:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007c0a:	687b      	ldr	r3, [r7, #4]
 8007c0c:	2200      	movs	r2, #0
 8007c0e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007c12:	2300      	movs	r3, #0
}
 8007c14:	4618      	mov	r0, r3
 8007c16:	3710      	adds	r7, #16
 8007c18:	46bd      	mov	sp, r7
 8007c1a:	bd80      	pop	{r7, pc}

08007c1c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007c1c:	b480      	push	{r7}
 8007c1e:	b083      	sub	sp, #12
 8007c20:	af00      	add	r7, sp, #0
 8007c22:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007c24:	bf00      	nop
 8007c26:	370c      	adds	r7, #12
 8007c28:	46bd      	mov	sp, r7
 8007c2a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c2e:	4770      	bx	lr

08007c30 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007c30:	b480      	push	{r7}
 8007c32:	b083      	sub	sp, #12
 8007c34:	af00      	add	r7, sp, #0
 8007c36:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007c38:	bf00      	nop
 8007c3a:	370c      	adds	r7, #12
 8007c3c:	46bd      	mov	sp, r7
 8007c3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c42:	4770      	bx	lr

08007c44 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007c44:	b480      	push	{r7}
 8007c46:	b083      	sub	sp, #12
 8007c48:	af00      	add	r7, sp, #0
 8007c4a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007c4c:	bf00      	nop
 8007c4e:	370c      	adds	r7, #12
 8007c50:	46bd      	mov	sp, r7
 8007c52:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c56:	4770      	bx	lr

08007c58 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007c58:	b480      	push	{r7}
 8007c5a:	b083      	sub	sp, #12
 8007c5c:	af00      	add	r7, sp, #0
 8007c5e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007c60:	bf00      	nop
 8007c62:	370c      	adds	r7, #12
 8007c64:	46bd      	mov	sp, r7
 8007c66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c6a:	4770      	bx	lr

08007c6c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007c6c:	b480      	push	{r7}
 8007c6e:	b085      	sub	sp, #20
 8007c70:	af00      	add	r7, sp, #0
 8007c72:	6078      	str	r0, [r7, #4]
 8007c74:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007c7c:	687b      	ldr	r3, [r7, #4]
 8007c7e:	4a34      	ldr	r2, [pc, #208]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007c80:	4293      	cmp	r3, r2
 8007c82:	d00f      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c84:	687b      	ldr	r3, [r7, #4]
 8007c86:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007c8a:	d00b      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c8c:	687b      	ldr	r3, [r7, #4]
 8007c8e:	4a31      	ldr	r2, [pc, #196]	; (8007d54 <TIM_Base_SetConfig+0xe8>)
 8007c90:	4293      	cmp	r3, r2
 8007c92:	d007      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c94:	687b      	ldr	r3, [r7, #4]
 8007c96:	4a30      	ldr	r2, [pc, #192]	; (8007d58 <TIM_Base_SetConfig+0xec>)
 8007c98:	4293      	cmp	r3, r2
 8007c9a:	d003      	beq.n	8007ca4 <TIM_Base_SetConfig+0x38>
 8007c9c:	687b      	ldr	r3, [r7, #4]
 8007c9e:	4a2f      	ldr	r2, [pc, #188]	; (8007d5c <TIM_Base_SetConfig+0xf0>)
 8007ca0:	4293      	cmp	r3, r2
 8007ca2:	d108      	bne.n	8007cb6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007ca4:	68fb      	ldr	r3, [r7, #12]
 8007ca6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007caa:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007cac:	683b      	ldr	r3, [r7, #0]
 8007cae:	685b      	ldr	r3, [r3, #4]
 8007cb0:	68fa      	ldr	r2, [r7, #12]
 8007cb2:	4313      	orrs	r3, r2
 8007cb4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007cb6:	687b      	ldr	r3, [r7, #4]
 8007cb8:	4a25      	ldr	r2, [pc, #148]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007cba:	4293      	cmp	r3, r2
 8007cbc:	d01b      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007cc4:	d017      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	4a22      	ldr	r2, [pc, #136]	; (8007d54 <TIM_Base_SetConfig+0xe8>)
 8007cca:	4293      	cmp	r3, r2
 8007ccc:	d013      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cce:	687b      	ldr	r3, [r7, #4]
 8007cd0:	4a21      	ldr	r2, [pc, #132]	; (8007d58 <TIM_Base_SetConfig+0xec>)
 8007cd2:	4293      	cmp	r3, r2
 8007cd4:	d00f      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	4a20      	ldr	r2, [pc, #128]	; (8007d5c <TIM_Base_SetConfig+0xf0>)
 8007cda:	4293      	cmp	r3, r2
 8007cdc:	d00b      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cde:	687b      	ldr	r3, [r7, #4]
 8007ce0:	4a1f      	ldr	r2, [pc, #124]	; (8007d60 <TIM_Base_SetConfig+0xf4>)
 8007ce2:	4293      	cmp	r3, r2
 8007ce4:	d007      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007ce6:	687b      	ldr	r3, [r7, #4]
 8007ce8:	4a1e      	ldr	r2, [pc, #120]	; (8007d64 <TIM_Base_SetConfig+0xf8>)
 8007cea:	4293      	cmp	r3, r2
 8007cec:	d003      	beq.n	8007cf6 <TIM_Base_SetConfig+0x8a>
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	4a1d      	ldr	r2, [pc, #116]	; (8007d68 <TIM_Base_SetConfig+0xfc>)
 8007cf2:	4293      	cmp	r3, r2
 8007cf4:	d108      	bne.n	8007d08 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007cf6:	68fb      	ldr	r3, [r7, #12]
 8007cf8:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007cfc:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007cfe:	683b      	ldr	r3, [r7, #0]
 8007d00:	68db      	ldr	r3, [r3, #12]
 8007d02:	68fa      	ldr	r2, [r7, #12]
 8007d04:	4313      	orrs	r3, r2
 8007d06:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007d08:	68fb      	ldr	r3, [r7, #12]
 8007d0a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007d0e:	683b      	ldr	r3, [r7, #0]
 8007d10:	695b      	ldr	r3, [r3, #20]
 8007d12:	4313      	orrs	r3, r2
 8007d14:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007d16:	687b      	ldr	r3, [r7, #4]
 8007d18:	68fa      	ldr	r2, [r7, #12]
 8007d1a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007d1c:	683b      	ldr	r3, [r7, #0]
 8007d1e:	689a      	ldr	r2, [r3, #8]
 8007d20:	687b      	ldr	r3, [r7, #4]
 8007d22:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007d24:	683b      	ldr	r3, [r7, #0]
 8007d26:	681a      	ldr	r2, [r3, #0]
 8007d28:	687b      	ldr	r3, [r7, #4]
 8007d2a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007d2c:	687b      	ldr	r3, [r7, #4]
 8007d2e:	4a08      	ldr	r2, [pc, #32]	; (8007d50 <TIM_Base_SetConfig+0xe4>)
 8007d30:	4293      	cmp	r3, r2
 8007d32:	d103      	bne.n	8007d3c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	691a      	ldr	r2, [r3, #16]
 8007d38:	687b      	ldr	r3, [r7, #4]
 8007d3a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007d3c:	687b      	ldr	r3, [r7, #4]
 8007d3e:	2201      	movs	r2, #1
 8007d40:	615a      	str	r2, [r3, #20]
}
 8007d42:	bf00      	nop
 8007d44:	3714      	adds	r7, #20
 8007d46:	46bd      	mov	sp, r7
 8007d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d4c:	4770      	bx	lr
 8007d4e:	bf00      	nop
 8007d50:	40010000 	.word	0x40010000
 8007d54:	40000400 	.word	0x40000400
 8007d58:	40000800 	.word	0x40000800
 8007d5c:	40000c00 	.word	0x40000c00
 8007d60:	40014000 	.word	0x40014000
 8007d64:	40014400 	.word	0x40014400
 8007d68:	40014800 	.word	0x40014800

08007d6c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b087      	sub	sp, #28
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
 8007d74:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007d76:	687b      	ldr	r3, [r7, #4]
 8007d78:	6a1b      	ldr	r3, [r3, #32]
 8007d7a:	f023 0201 	bic.w	r2, r3, #1
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d82:	687b      	ldr	r3, [r7, #4]
 8007d84:	6a1b      	ldr	r3, [r3, #32]
 8007d86:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d88:	687b      	ldr	r3, [r7, #4]
 8007d8a:	685b      	ldr	r3, [r3, #4]
 8007d8c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d8e:	687b      	ldr	r3, [r7, #4]
 8007d90:	699b      	ldr	r3, [r3, #24]
 8007d92:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007d94:	68fb      	ldr	r3, [r7, #12]
 8007d96:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007d9a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007d9c:	68fb      	ldr	r3, [r7, #12]
 8007d9e:	f023 0303 	bic.w	r3, r3, #3
 8007da2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007da4:	683b      	ldr	r3, [r7, #0]
 8007da6:	681b      	ldr	r3, [r3, #0]
 8007da8:	68fa      	ldr	r2, [r7, #12]
 8007daa:	4313      	orrs	r3, r2
 8007dac:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007dae:	697b      	ldr	r3, [r7, #20]
 8007db0:	f023 0302 	bic.w	r3, r3, #2
 8007db4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007db6:	683b      	ldr	r3, [r7, #0]
 8007db8:	689b      	ldr	r3, [r3, #8]
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1c      	ldr	r2, [pc, #112]	; (8007e34 <TIM_OC1_SetConfig+0xc8>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d10c      	bne.n	8007de2 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 0308 	bic.w	r3, r3, #8
 8007dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	697a      	ldr	r2, [r7, #20]
 8007dd6:	4313      	orrs	r3, r2
 8007dd8:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007dda:	697b      	ldr	r3, [r7, #20]
 8007ddc:	f023 0304 	bic.w	r3, r3, #4
 8007de0:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	4a13      	ldr	r2, [pc, #76]	; (8007e34 <TIM_OC1_SetConfig+0xc8>)
 8007de6:	4293      	cmp	r3, r2
 8007de8:	d111      	bne.n	8007e0e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007dea:	693b      	ldr	r3, [r7, #16]
 8007dec:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007df0:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007df2:	693b      	ldr	r3, [r7, #16]
 8007df4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007df8:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007dfa:	683b      	ldr	r3, [r7, #0]
 8007dfc:	695b      	ldr	r3, [r3, #20]
 8007dfe:	693a      	ldr	r2, [r7, #16]
 8007e00:	4313      	orrs	r3, r2
 8007e02:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007e04:	683b      	ldr	r3, [r7, #0]
 8007e06:	699b      	ldr	r3, [r3, #24]
 8007e08:	693a      	ldr	r2, [r7, #16]
 8007e0a:	4313      	orrs	r3, r2
 8007e0c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e0e:	687b      	ldr	r3, [r7, #4]
 8007e10:	693a      	ldr	r2, [r7, #16]
 8007e12:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	68fa      	ldr	r2, [r7, #12]
 8007e18:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007e1a:	683b      	ldr	r3, [r7, #0]
 8007e1c:	685a      	ldr	r2, [r3, #4]
 8007e1e:	687b      	ldr	r3, [r7, #4]
 8007e20:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e22:	687b      	ldr	r3, [r7, #4]
 8007e24:	697a      	ldr	r2, [r7, #20]
 8007e26:	621a      	str	r2, [r3, #32]
}
 8007e28:	bf00      	nop
 8007e2a:	371c      	adds	r7, #28
 8007e2c:	46bd      	mov	sp, r7
 8007e2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e32:	4770      	bx	lr
 8007e34:	40010000 	.word	0x40010000

08007e38 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e38:	b480      	push	{r7}
 8007e3a:	b087      	sub	sp, #28
 8007e3c:	af00      	add	r7, sp, #0
 8007e3e:	6078      	str	r0, [r7, #4]
 8007e40:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007e42:	687b      	ldr	r3, [r7, #4]
 8007e44:	6a1b      	ldr	r3, [r3, #32]
 8007e46:	f023 0210 	bic.w	r2, r3, #16
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e4e:	687b      	ldr	r3, [r7, #4]
 8007e50:	6a1b      	ldr	r3, [r3, #32]
 8007e52:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e54:	687b      	ldr	r3, [r7, #4]
 8007e56:	685b      	ldr	r3, [r3, #4]
 8007e58:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007e5a:	687b      	ldr	r3, [r7, #4]
 8007e5c:	699b      	ldr	r3, [r3, #24]
 8007e5e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007e60:	68fb      	ldr	r3, [r7, #12]
 8007e62:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007e66:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007e6e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007e70:	683b      	ldr	r3, [r7, #0]
 8007e72:	681b      	ldr	r3, [r3, #0]
 8007e74:	021b      	lsls	r3, r3, #8
 8007e76:	68fa      	ldr	r2, [r7, #12]
 8007e78:	4313      	orrs	r3, r2
 8007e7a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007e7c:	697b      	ldr	r3, [r7, #20]
 8007e7e:	f023 0320 	bic.w	r3, r3, #32
 8007e82:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007e84:	683b      	ldr	r3, [r7, #0]
 8007e86:	689b      	ldr	r3, [r3, #8]
 8007e88:	011b      	lsls	r3, r3, #4
 8007e8a:	697a      	ldr	r2, [r7, #20]
 8007e8c:	4313      	orrs	r3, r2
 8007e8e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007e90:	687b      	ldr	r3, [r7, #4]
 8007e92:	4a1e      	ldr	r2, [pc, #120]	; (8007f0c <TIM_OC2_SetConfig+0xd4>)
 8007e94:	4293      	cmp	r3, r2
 8007e96:	d10d      	bne.n	8007eb4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007e98:	697b      	ldr	r3, [r7, #20]
 8007e9a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007e9e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007ea0:	683b      	ldr	r3, [r7, #0]
 8007ea2:	68db      	ldr	r3, [r3, #12]
 8007ea4:	011b      	lsls	r3, r3, #4
 8007ea6:	697a      	ldr	r2, [r7, #20]
 8007ea8:	4313      	orrs	r3, r2
 8007eaa:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007eac:	697b      	ldr	r3, [r7, #20]
 8007eae:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007eb2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eb4:	687b      	ldr	r3, [r7, #4]
 8007eb6:	4a15      	ldr	r2, [pc, #84]	; (8007f0c <TIM_OC2_SetConfig+0xd4>)
 8007eb8:	4293      	cmp	r3, r2
 8007eba:	d113      	bne.n	8007ee4 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007ebc:	693b      	ldr	r3, [r7, #16]
 8007ebe:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007ec2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007ec4:	693b      	ldr	r3, [r7, #16]
 8007ec6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007eca:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007ecc:	683b      	ldr	r3, [r7, #0]
 8007ece:	695b      	ldr	r3, [r3, #20]
 8007ed0:	009b      	lsls	r3, r3, #2
 8007ed2:	693a      	ldr	r2, [r7, #16]
 8007ed4:	4313      	orrs	r3, r2
 8007ed6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007ed8:	683b      	ldr	r3, [r7, #0]
 8007eda:	699b      	ldr	r3, [r3, #24]
 8007edc:	009b      	lsls	r3, r3, #2
 8007ede:	693a      	ldr	r2, [r7, #16]
 8007ee0:	4313      	orrs	r3, r2
 8007ee2:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007ee4:	687b      	ldr	r3, [r7, #4]
 8007ee6:	693a      	ldr	r2, [r7, #16]
 8007ee8:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	68fa      	ldr	r2, [r7, #12]
 8007eee:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007ef0:	683b      	ldr	r3, [r7, #0]
 8007ef2:	685a      	ldr	r2, [r3, #4]
 8007ef4:	687b      	ldr	r3, [r7, #4]
 8007ef6:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007ef8:	687b      	ldr	r3, [r7, #4]
 8007efa:	697a      	ldr	r2, [r7, #20]
 8007efc:	621a      	str	r2, [r3, #32]
}
 8007efe:	bf00      	nop
 8007f00:	371c      	adds	r7, #28
 8007f02:	46bd      	mov	sp, r7
 8007f04:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f08:	4770      	bx	lr
 8007f0a:	bf00      	nop
 8007f0c:	40010000 	.word	0x40010000

08007f10 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f10:	b480      	push	{r7}
 8007f12:	b087      	sub	sp, #28
 8007f14:	af00      	add	r7, sp, #0
 8007f16:	6078      	str	r0, [r7, #4]
 8007f18:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6a1b      	ldr	r3, [r3, #32]
 8007f1e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007f22:	687b      	ldr	r3, [r7, #4]
 8007f24:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	6a1b      	ldr	r3, [r3, #32]
 8007f2a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f2c:	687b      	ldr	r3, [r7, #4]
 8007f2e:	685b      	ldr	r3, [r3, #4]
 8007f30:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f32:	687b      	ldr	r3, [r7, #4]
 8007f34:	69db      	ldr	r3, [r3, #28]
 8007f36:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007f38:	68fb      	ldr	r3, [r7, #12]
 8007f3a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007f3e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007f40:	68fb      	ldr	r3, [r7, #12]
 8007f42:	f023 0303 	bic.w	r3, r3, #3
 8007f46:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007f48:	683b      	ldr	r3, [r7, #0]
 8007f4a:	681b      	ldr	r3, [r3, #0]
 8007f4c:	68fa      	ldr	r2, [r7, #12]
 8007f4e:	4313      	orrs	r3, r2
 8007f50:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007f52:	697b      	ldr	r3, [r7, #20]
 8007f54:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007f58:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007f5a:	683b      	ldr	r3, [r7, #0]
 8007f5c:	689b      	ldr	r3, [r3, #8]
 8007f5e:	021b      	lsls	r3, r3, #8
 8007f60:	697a      	ldr	r2, [r7, #20]
 8007f62:	4313      	orrs	r3, r2
 8007f64:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007f66:	687b      	ldr	r3, [r7, #4]
 8007f68:	4a1d      	ldr	r2, [pc, #116]	; (8007fe0 <TIM_OC3_SetConfig+0xd0>)
 8007f6a:	4293      	cmp	r3, r2
 8007f6c:	d10d      	bne.n	8007f8a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007f6e:	697b      	ldr	r3, [r7, #20]
 8007f70:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007f74:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007f76:	683b      	ldr	r3, [r7, #0]
 8007f78:	68db      	ldr	r3, [r3, #12]
 8007f7a:	021b      	lsls	r3, r3, #8
 8007f7c:	697a      	ldr	r2, [r7, #20]
 8007f7e:	4313      	orrs	r3, r2
 8007f80:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007f82:	697b      	ldr	r3, [r7, #20]
 8007f84:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007f88:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f8a:	687b      	ldr	r3, [r7, #4]
 8007f8c:	4a14      	ldr	r2, [pc, #80]	; (8007fe0 <TIM_OC3_SetConfig+0xd0>)
 8007f8e:	4293      	cmp	r3, r2
 8007f90:	d113      	bne.n	8007fba <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007f92:	693b      	ldr	r3, [r7, #16]
 8007f94:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007f98:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007f9a:	693b      	ldr	r3, [r7, #16]
 8007f9c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007fa0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007fa2:	683b      	ldr	r3, [r7, #0]
 8007fa4:	695b      	ldr	r3, [r3, #20]
 8007fa6:	011b      	lsls	r3, r3, #4
 8007fa8:	693a      	ldr	r2, [r7, #16]
 8007faa:	4313      	orrs	r3, r2
 8007fac:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007fae:	683b      	ldr	r3, [r7, #0]
 8007fb0:	699b      	ldr	r3, [r3, #24]
 8007fb2:	011b      	lsls	r3, r3, #4
 8007fb4:	693a      	ldr	r2, [r7, #16]
 8007fb6:	4313      	orrs	r3, r2
 8007fb8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007fba:	687b      	ldr	r3, [r7, #4]
 8007fbc:	693a      	ldr	r2, [r7, #16]
 8007fbe:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007fc0:	687b      	ldr	r3, [r7, #4]
 8007fc2:	68fa      	ldr	r2, [r7, #12]
 8007fc4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007fc6:	683b      	ldr	r3, [r7, #0]
 8007fc8:	685a      	ldr	r2, [r3, #4]
 8007fca:	687b      	ldr	r3, [r7, #4]
 8007fcc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007fce:	687b      	ldr	r3, [r7, #4]
 8007fd0:	697a      	ldr	r2, [r7, #20]
 8007fd2:	621a      	str	r2, [r3, #32]
}
 8007fd4:	bf00      	nop
 8007fd6:	371c      	adds	r7, #28
 8007fd8:	46bd      	mov	sp, r7
 8007fda:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fde:	4770      	bx	lr
 8007fe0:	40010000 	.word	0x40010000

08007fe4 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007fe4:	b480      	push	{r7}
 8007fe6:	b087      	sub	sp, #28
 8007fe8:	af00      	add	r7, sp, #0
 8007fea:	6078      	str	r0, [r7, #4]
 8007fec:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007fee:	687b      	ldr	r3, [r7, #4]
 8007ff0:	6a1b      	ldr	r3, [r3, #32]
 8007ff2:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007ff6:	687b      	ldr	r3, [r7, #4]
 8007ff8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007ffa:	687b      	ldr	r3, [r7, #4]
 8007ffc:	6a1b      	ldr	r3, [r3, #32]
 8007ffe:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8008000:	687b      	ldr	r3, [r7, #4]
 8008002:	685b      	ldr	r3, [r3, #4]
 8008004:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8008006:	687b      	ldr	r3, [r7, #4]
 8008008:	69db      	ldr	r3, [r3, #28]
 800800a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8008012:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800801a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800801c:	683b      	ldr	r3, [r7, #0]
 800801e:	681b      	ldr	r3, [r3, #0]
 8008020:	021b      	lsls	r3, r3, #8
 8008022:	68fa      	ldr	r2, [r7, #12]
 8008024:	4313      	orrs	r3, r2
 8008026:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8008028:	693b      	ldr	r3, [r7, #16]
 800802a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 800802e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8008030:	683b      	ldr	r3, [r7, #0]
 8008032:	689b      	ldr	r3, [r3, #8]
 8008034:	031b      	lsls	r3, r3, #12
 8008036:	693a      	ldr	r2, [r7, #16]
 8008038:	4313      	orrs	r3, r2
 800803a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800803c:	687b      	ldr	r3, [r7, #4]
 800803e:	4a10      	ldr	r2, [pc, #64]	; (8008080 <TIM_OC4_SetConfig+0x9c>)
 8008040:	4293      	cmp	r3, r2
 8008042:	d109      	bne.n	8008058 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8008044:	697b      	ldr	r3, [r7, #20]
 8008046:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800804a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 800804c:	683b      	ldr	r3, [r7, #0]
 800804e:	695b      	ldr	r3, [r3, #20]
 8008050:	019b      	lsls	r3, r3, #6
 8008052:	697a      	ldr	r2, [r7, #20]
 8008054:	4313      	orrs	r3, r2
 8008056:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8008058:	687b      	ldr	r3, [r7, #4]
 800805a:	697a      	ldr	r2, [r7, #20]
 800805c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 800805e:	687b      	ldr	r3, [r7, #4]
 8008060:	68fa      	ldr	r2, [r7, #12]
 8008062:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8008064:	683b      	ldr	r3, [r7, #0]
 8008066:	685a      	ldr	r2, [r3, #4]
 8008068:	687b      	ldr	r3, [r7, #4]
 800806a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800806c:	687b      	ldr	r3, [r7, #4]
 800806e:	693a      	ldr	r2, [r7, #16]
 8008070:	621a      	str	r2, [r3, #32]
}
 8008072:	bf00      	nop
 8008074:	371c      	adds	r7, #28
 8008076:	46bd      	mov	sp, r7
 8008078:	f85d 7b04 	ldr.w	r7, [sp], #4
 800807c:	4770      	bx	lr
 800807e:	bf00      	nop
 8008080:	40010000 	.word	0x40010000

08008084 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008084:	b480      	push	{r7}
 8008086:	b087      	sub	sp, #28
 8008088:	af00      	add	r7, sp, #0
 800808a:	60f8      	str	r0, [r7, #12]
 800808c:	60b9      	str	r1, [r7, #8]
 800808e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8008090:	68fb      	ldr	r3, [r7, #12]
 8008092:	6a1b      	ldr	r3, [r3, #32]
 8008094:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8008096:	68fb      	ldr	r3, [r7, #12]
 8008098:	6a1b      	ldr	r3, [r3, #32]
 800809a:	f023 0201 	bic.w	r2, r3, #1
 800809e:	68fb      	ldr	r3, [r7, #12]
 80080a0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080a2:	68fb      	ldr	r3, [r7, #12]
 80080a4:	699b      	ldr	r3, [r3, #24]
 80080a6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80080a8:	693b      	ldr	r3, [r7, #16]
 80080aa:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80080ae:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	011b      	lsls	r3, r3, #4
 80080b4:	693a      	ldr	r2, [r7, #16]
 80080b6:	4313      	orrs	r3, r2
 80080b8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80080ba:	697b      	ldr	r3, [r7, #20]
 80080bc:	f023 030a 	bic.w	r3, r3, #10
 80080c0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80080c2:	697a      	ldr	r2, [r7, #20]
 80080c4:	68bb      	ldr	r3, [r7, #8]
 80080c6:	4313      	orrs	r3, r2
 80080c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80080ca:	68fb      	ldr	r3, [r7, #12]
 80080cc:	693a      	ldr	r2, [r7, #16]
 80080ce:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80080d0:	68fb      	ldr	r3, [r7, #12]
 80080d2:	697a      	ldr	r2, [r7, #20]
 80080d4:	621a      	str	r2, [r3, #32]
}
 80080d6:	bf00      	nop
 80080d8:	371c      	adds	r7, #28
 80080da:	46bd      	mov	sp, r7
 80080dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e0:	4770      	bx	lr

080080e2 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80080e2:	b480      	push	{r7}
 80080e4:	b087      	sub	sp, #28
 80080e6:	af00      	add	r7, sp, #0
 80080e8:	60f8      	str	r0, [r7, #12]
 80080ea:	60b9      	str	r1, [r7, #8]
 80080ec:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80080ee:	68fb      	ldr	r3, [r7, #12]
 80080f0:	6a1b      	ldr	r3, [r3, #32]
 80080f2:	f023 0210 	bic.w	r2, r3, #16
 80080f6:	68fb      	ldr	r3, [r7, #12]
 80080f8:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80080fa:	68fb      	ldr	r3, [r7, #12]
 80080fc:	699b      	ldr	r3, [r3, #24]
 80080fe:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	6a1b      	ldr	r3, [r3, #32]
 8008104:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800810c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800810e:	687b      	ldr	r3, [r7, #4]
 8008110:	031b      	lsls	r3, r3, #12
 8008112:	697a      	ldr	r2, [r7, #20]
 8008114:	4313      	orrs	r3, r2
 8008116:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008118:	693b      	ldr	r3, [r7, #16]
 800811a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800811e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008120:	68bb      	ldr	r3, [r7, #8]
 8008122:	011b      	lsls	r3, r3, #4
 8008124:	693a      	ldr	r2, [r7, #16]
 8008126:	4313      	orrs	r3, r2
 8008128:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800812a:	68fb      	ldr	r3, [r7, #12]
 800812c:	697a      	ldr	r2, [r7, #20]
 800812e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008130:	68fb      	ldr	r3, [r7, #12]
 8008132:	693a      	ldr	r2, [r7, #16]
 8008134:	621a      	str	r2, [r3, #32]
}
 8008136:	bf00      	nop
 8008138:	371c      	adds	r7, #28
 800813a:	46bd      	mov	sp, r7
 800813c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008140:	4770      	bx	lr

08008142 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008142:	b480      	push	{r7}
 8008144:	b085      	sub	sp, #20
 8008146:	af00      	add	r7, sp, #0
 8008148:	6078      	str	r0, [r7, #4]
 800814a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	689b      	ldr	r3, [r3, #8]
 8008150:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008152:	68fb      	ldr	r3, [r7, #12]
 8008154:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008158:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800815a:	683a      	ldr	r2, [r7, #0]
 800815c:	68fb      	ldr	r3, [r7, #12]
 800815e:	4313      	orrs	r3, r2
 8008160:	f043 0307 	orr.w	r3, r3, #7
 8008164:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008166:	687b      	ldr	r3, [r7, #4]
 8008168:	68fa      	ldr	r2, [r7, #12]
 800816a:	609a      	str	r2, [r3, #8]
}
 800816c:	bf00      	nop
 800816e:	3714      	adds	r7, #20
 8008170:	46bd      	mov	sp, r7
 8008172:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008176:	4770      	bx	lr

08008178 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8008178:	b480      	push	{r7}
 800817a:	b087      	sub	sp, #28
 800817c:	af00      	add	r7, sp, #0
 800817e:	60f8      	str	r0, [r7, #12]
 8008180:	60b9      	str	r1, [r7, #8]
 8008182:	607a      	str	r2, [r7, #4]
 8008184:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8008186:	68fb      	ldr	r3, [r7, #12]
 8008188:	689b      	ldr	r3, [r3, #8]
 800818a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800818c:	697b      	ldr	r3, [r7, #20]
 800818e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8008192:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8008194:	683b      	ldr	r3, [r7, #0]
 8008196:	021a      	lsls	r2, r3, #8
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	431a      	orrs	r2, r3
 800819c:	68bb      	ldr	r3, [r7, #8]
 800819e:	4313      	orrs	r3, r2
 80081a0:	697a      	ldr	r2, [r7, #20]
 80081a2:	4313      	orrs	r3, r2
 80081a4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80081a6:	68fb      	ldr	r3, [r7, #12]
 80081a8:	697a      	ldr	r2, [r7, #20]
 80081aa:	609a      	str	r2, [r3, #8]
}
 80081ac:	bf00      	nop
 80081ae:	371c      	adds	r7, #28
 80081b0:	46bd      	mov	sp, r7
 80081b2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b6:	4770      	bx	lr

080081b8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80081b8:	b480      	push	{r7}
 80081ba:	b087      	sub	sp, #28
 80081bc:	af00      	add	r7, sp, #0
 80081be:	60f8      	str	r0, [r7, #12]
 80081c0:	60b9      	str	r1, [r7, #8]
 80081c2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80081c4:	68bb      	ldr	r3, [r7, #8]
 80081c6:	f003 031f 	and.w	r3, r3, #31
 80081ca:	2201      	movs	r2, #1
 80081cc:	fa02 f303 	lsl.w	r3, r2, r3
 80081d0:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80081d2:	68fb      	ldr	r3, [r7, #12]
 80081d4:	6a1a      	ldr	r2, [r3, #32]
 80081d6:	697b      	ldr	r3, [r7, #20]
 80081d8:	43db      	mvns	r3, r3
 80081da:	401a      	ands	r2, r3
 80081dc:	68fb      	ldr	r3, [r7, #12]
 80081de:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 80081e0:	68fb      	ldr	r3, [r7, #12]
 80081e2:	6a1a      	ldr	r2, [r3, #32]
 80081e4:	68bb      	ldr	r3, [r7, #8]
 80081e6:	f003 031f 	and.w	r3, r3, #31
 80081ea:	6879      	ldr	r1, [r7, #4]
 80081ec:	fa01 f303 	lsl.w	r3, r1, r3
 80081f0:	431a      	orrs	r2, r3
 80081f2:	68fb      	ldr	r3, [r7, #12]
 80081f4:	621a      	str	r2, [r3, #32]
}
 80081f6:	bf00      	nop
 80081f8:	371c      	adds	r7, #28
 80081fa:	46bd      	mov	sp, r7
 80081fc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008200:	4770      	bx	lr
	...

08008204 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008204:	b480      	push	{r7}
 8008206:	b085      	sub	sp, #20
 8008208:	af00      	add	r7, sp, #0
 800820a:	6078      	str	r0, [r7, #4]
 800820c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800820e:	687b      	ldr	r3, [r7, #4]
 8008210:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008214:	2b01      	cmp	r3, #1
 8008216:	d101      	bne.n	800821c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008218:	2302      	movs	r3, #2
 800821a:	e050      	b.n	80082be <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	2201      	movs	r2, #1
 8008220:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008224:	687b      	ldr	r3, [r7, #4]
 8008226:	2202      	movs	r2, #2
 8008228:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800822c:	687b      	ldr	r3, [r7, #4]
 800822e:	681b      	ldr	r3, [r3, #0]
 8008230:	685b      	ldr	r3, [r3, #4]
 8008232:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	681b      	ldr	r3, [r3, #0]
 8008238:	689b      	ldr	r3, [r3, #8]
 800823a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800823c:	68fb      	ldr	r3, [r7, #12]
 800823e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008242:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008244:	683b      	ldr	r3, [r7, #0]
 8008246:	681b      	ldr	r3, [r3, #0]
 8008248:	68fa      	ldr	r2, [r7, #12]
 800824a:	4313      	orrs	r3, r2
 800824c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	681b      	ldr	r3, [r3, #0]
 8008252:	68fa      	ldr	r2, [r7, #12]
 8008254:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	681b      	ldr	r3, [r3, #0]
 800825a:	4a1c      	ldr	r2, [pc, #112]	; (80082cc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800825c:	4293      	cmp	r3, r2
 800825e:	d018      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008260:	687b      	ldr	r3, [r7, #4]
 8008262:	681b      	ldr	r3, [r3, #0]
 8008264:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008268:	d013      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800826a:	687b      	ldr	r3, [r7, #4]
 800826c:	681b      	ldr	r3, [r3, #0]
 800826e:	4a18      	ldr	r2, [pc, #96]	; (80082d0 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8008270:	4293      	cmp	r3, r2
 8008272:	d00e      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008274:	687b      	ldr	r3, [r7, #4]
 8008276:	681b      	ldr	r3, [r3, #0]
 8008278:	4a16      	ldr	r2, [pc, #88]	; (80082d4 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800827a:	4293      	cmp	r3, r2
 800827c:	d009      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	681b      	ldr	r3, [r3, #0]
 8008282:	4a15      	ldr	r2, [pc, #84]	; (80082d8 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8008284:	4293      	cmp	r3, r2
 8008286:	d004      	beq.n	8008292 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	4a13      	ldr	r2, [pc, #76]	; (80082dc <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800828e:	4293      	cmp	r3, r2
 8008290:	d10c      	bne.n	80082ac <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8008292:	68bb      	ldr	r3, [r7, #8]
 8008294:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8008298:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800829a:	683b      	ldr	r3, [r7, #0]
 800829c:	685b      	ldr	r3, [r3, #4]
 800829e:	68ba      	ldr	r2, [r7, #8]
 80082a0:	4313      	orrs	r3, r2
 80082a2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80082a4:	687b      	ldr	r3, [r7, #4]
 80082a6:	681b      	ldr	r3, [r3, #0]
 80082a8:	68ba      	ldr	r2, [r7, #8]
 80082aa:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	2201      	movs	r2, #1
 80082b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80082b4:	687b      	ldr	r3, [r7, #4]
 80082b6:	2200      	movs	r2, #0
 80082b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80082bc:	2300      	movs	r3, #0
}
 80082be:	4618      	mov	r0, r3
 80082c0:	3714      	adds	r7, #20
 80082c2:	46bd      	mov	sp, r7
 80082c4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082c8:	4770      	bx	lr
 80082ca:	bf00      	nop
 80082cc:	40010000 	.word	0x40010000
 80082d0:	40000400 	.word	0x40000400
 80082d4:	40000800 	.word	0x40000800
 80082d8:	40000c00 	.word	0x40000c00
 80082dc:	40014000 	.word	0x40014000

080082e0 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 80082e0:	b480      	push	{r7}
 80082e2:	b083      	sub	sp, #12
 80082e4:	af00      	add	r7, sp, #0
 80082e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 80082e8:	bf00      	nop
 80082ea:	370c      	adds	r7, #12
 80082ec:	46bd      	mov	sp, r7
 80082ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80082f2:	4770      	bx	lr

080082f4 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 80082f4:	b480      	push	{r7}
 80082f6:	b083      	sub	sp, #12
 80082f8:	af00      	add	r7, sp, #0
 80082fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 80082fc:	bf00      	nop
 80082fe:	370c      	adds	r7, #12
 8008300:	46bd      	mov	sp, r7
 8008302:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008306:	4770      	bx	lr

08008308 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008308:	b580      	push	{r7, lr}
 800830a:	b082      	sub	sp, #8
 800830c:	af00      	add	r7, sp, #0
 800830e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008310:	687b      	ldr	r3, [r7, #4]
 8008312:	2b00      	cmp	r3, #0
 8008314:	d101      	bne.n	800831a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008316:	2301      	movs	r3, #1
 8008318:	e03f      	b.n	800839a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800831a:	687b      	ldr	r3, [r7, #4]
 800831c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008320:	b2db      	uxtb	r3, r3
 8008322:	2b00      	cmp	r3, #0
 8008324:	d106      	bne.n	8008334 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008326:	687b      	ldr	r3, [r7, #4]
 8008328:	2200      	movs	r2, #0
 800832a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800832e:	6878      	ldr	r0, [r7, #4]
 8008330:	f7fb f960 	bl	80035f4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008334:	687b      	ldr	r3, [r7, #4]
 8008336:	2224      	movs	r2, #36	; 0x24
 8008338:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800833c:	687b      	ldr	r3, [r7, #4]
 800833e:	681b      	ldr	r3, [r3, #0]
 8008340:	68da      	ldr	r2, [r3, #12]
 8008342:	687b      	ldr	r3, [r7, #4]
 8008344:	681b      	ldr	r3, [r3, #0]
 8008346:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800834a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800834c:	6878      	ldr	r0, [r7, #4]
 800834e:	f000 fd51 	bl	8008df4 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008352:	687b      	ldr	r3, [r7, #4]
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	691a      	ldr	r2, [r3, #16]
 8008358:	687b      	ldr	r3, [r7, #4]
 800835a:	681b      	ldr	r3, [r3, #0]
 800835c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008360:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008362:	687b      	ldr	r3, [r7, #4]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	695a      	ldr	r2, [r3, #20]
 8008368:	687b      	ldr	r3, [r7, #4]
 800836a:	681b      	ldr	r3, [r3, #0]
 800836c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8008370:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8008372:	687b      	ldr	r3, [r7, #4]
 8008374:	681b      	ldr	r3, [r3, #0]
 8008376:	68da      	ldr	r2, [r3, #12]
 8008378:	687b      	ldr	r3, [r7, #4]
 800837a:	681b      	ldr	r3, [r3, #0]
 800837c:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8008380:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008382:	687b      	ldr	r3, [r7, #4]
 8008384:	2200      	movs	r2, #0
 8008386:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8008388:	687b      	ldr	r3, [r7, #4]
 800838a:	2220      	movs	r2, #32
 800838c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8008390:	687b      	ldr	r3, [r7, #4]
 8008392:	2220      	movs	r2, #32
 8008394:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8008398:	2300      	movs	r3, #0
}
 800839a:	4618      	mov	r0, r3
 800839c:	3708      	adds	r7, #8
 800839e:	46bd      	mov	sp, r7
 80083a0:	bd80      	pop	{r7, pc}
	...

080083a4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083a4:	b580      	push	{r7, lr}
 80083a6:	b086      	sub	sp, #24
 80083a8:	af00      	add	r7, sp, #0
 80083aa:	60f8      	str	r0, [r7, #12]
 80083ac:	60b9      	str	r1, [r7, #8]
 80083ae:	4613      	mov	r3, r2
 80083b0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80083b2:	68fb      	ldr	r3, [r7, #12]
 80083b4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80083b8:	b2db      	uxtb	r3, r3
 80083ba:	2b20      	cmp	r3, #32
 80083bc:	d153      	bne.n	8008466 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80083be:	68bb      	ldr	r3, [r7, #8]
 80083c0:	2b00      	cmp	r3, #0
 80083c2:	d002      	beq.n	80083ca <HAL_UART_Transmit_DMA+0x26>
 80083c4:	88fb      	ldrh	r3, [r7, #6]
 80083c6:	2b00      	cmp	r3, #0
 80083c8:	d101      	bne.n	80083ce <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80083ca:	2301      	movs	r3, #1
 80083cc:	e04c      	b.n	8008468 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083ce:	68fb      	ldr	r3, [r7, #12]
 80083d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083d4:	2b01      	cmp	r3, #1
 80083d6:	d101      	bne.n	80083dc <HAL_UART_Transmit_DMA+0x38>
 80083d8:	2302      	movs	r3, #2
 80083da:	e045      	b.n	8008468 <HAL_UART_Transmit_DMA+0xc4>
 80083dc:	68fb      	ldr	r3, [r7, #12]
 80083de:	2201      	movs	r2, #1
 80083e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 80083e4:	68ba      	ldr	r2, [r7, #8]
 80083e6:	68fb      	ldr	r3, [r7, #12]
 80083e8:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 80083ea:	68fb      	ldr	r3, [r7, #12]
 80083ec:	88fa      	ldrh	r2, [r7, #6]
 80083ee:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 80083f0:	68fb      	ldr	r3, [r7, #12]
 80083f2:	88fa      	ldrh	r2, [r7, #6]
 80083f4:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 80083f6:	68fb      	ldr	r3, [r7, #12]
 80083f8:	2200      	movs	r2, #0
 80083fa:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 80083fc:	68fb      	ldr	r3, [r7, #12]
 80083fe:	2221      	movs	r2, #33	; 0x21
 8008400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008404:	68fb      	ldr	r3, [r7, #12]
 8008406:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008408:	4a19      	ldr	r2, [pc, #100]	; (8008470 <HAL_UART_Transmit_DMA+0xcc>)
 800840a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800840c:	68fb      	ldr	r3, [r7, #12]
 800840e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008410:	4a18      	ldr	r2, [pc, #96]	; (8008474 <HAL_UART_Transmit_DMA+0xd0>)
 8008412:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008414:	68fb      	ldr	r3, [r7, #12]
 8008416:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008418:	4a17      	ldr	r2, [pc, #92]	; (8008478 <HAL_UART_Transmit_DMA+0xd4>)
 800841a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800841c:	68fb      	ldr	r3, [r7, #12]
 800841e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008420:	2200      	movs	r2, #0
 8008422:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008424:	f107 0308 	add.w	r3, r7, #8
 8008428:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800842a:	68fb      	ldr	r3, [r7, #12]
 800842c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800842e:	697b      	ldr	r3, [r7, #20]
 8008430:	6819      	ldr	r1, [r3, #0]
 8008432:	68fb      	ldr	r3, [r7, #12]
 8008434:	681b      	ldr	r3, [r3, #0]
 8008436:	3304      	adds	r3, #4
 8008438:	461a      	mov	r2, r3
 800843a:	88fb      	ldrh	r3, [r7, #6]
 800843c:	f7fb fd40 	bl	8003ec0 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008440:	68fb      	ldr	r3, [r7, #12]
 8008442:	681b      	ldr	r3, [r3, #0]
 8008444:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008448:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800844a:	68fb      	ldr	r3, [r7, #12]
 800844c:	2200      	movs	r2, #0
 800844e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008452:	68fb      	ldr	r3, [r7, #12]
 8008454:	681b      	ldr	r3, [r3, #0]
 8008456:	695a      	ldr	r2, [r3, #20]
 8008458:	68fb      	ldr	r3, [r7, #12]
 800845a:	681b      	ldr	r3, [r3, #0]
 800845c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008460:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008462:	2300      	movs	r3, #0
 8008464:	e000      	b.n	8008468 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008466:	2302      	movs	r3, #2
  }
}
 8008468:	4618      	mov	r0, r3
 800846a:	3718      	adds	r7, #24
 800846c:	46bd      	mov	sp, r7
 800846e:	bd80      	pop	{r7, pc}
 8008470:	080088b1 	.word	0x080088b1
 8008474:	08008903 	.word	0x08008903
 8008478:	080089eb 	.word	0x080089eb

0800847c <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 800847c:	b580      	push	{r7, lr}
 800847e:	b084      	sub	sp, #16
 8008480:	af00      	add	r7, sp, #0
 8008482:	60f8      	str	r0, [r7, #12]
 8008484:	60b9      	str	r1, [r7, #8]
 8008486:	4613      	mov	r3, r2
 8008488:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 800848a:	68fb      	ldr	r3, [r7, #12]
 800848c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008490:	b2db      	uxtb	r3, r3
 8008492:	2b20      	cmp	r3, #32
 8008494:	d11d      	bne.n	80084d2 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 8008496:	68bb      	ldr	r3, [r7, #8]
 8008498:	2b00      	cmp	r3, #0
 800849a:	d002      	beq.n	80084a2 <HAL_UART_Receive_DMA+0x26>
 800849c:	88fb      	ldrh	r3, [r7, #6]
 800849e:	2b00      	cmp	r3, #0
 80084a0:	d101      	bne.n	80084a6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80084a2:	2301      	movs	r3, #1
 80084a4:	e016      	b.n	80084d4 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80084a6:	68fb      	ldr	r3, [r7, #12]
 80084a8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80084ac:	2b01      	cmp	r3, #1
 80084ae:	d101      	bne.n	80084b4 <HAL_UART_Receive_DMA+0x38>
 80084b0:	2302      	movs	r3, #2
 80084b2:	e00f      	b.n	80084d4 <HAL_UART_Receive_DMA+0x58>
 80084b4:	68fb      	ldr	r3, [r7, #12]
 80084b6:	2201      	movs	r2, #1
 80084b8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80084bc:	68fb      	ldr	r3, [r7, #12]
 80084be:	2200      	movs	r2, #0
 80084c0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80084c2:	88fb      	ldrh	r3, [r7, #6]
 80084c4:	461a      	mov	r2, r3
 80084c6:	68b9      	ldr	r1, [r7, #8]
 80084c8:	68f8      	ldr	r0, [r7, #12]
 80084ca:	f000 fad9 	bl	8008a80 <UART_Start_Receive_DMA>
 80084ce:	4603      	mov	r3, r0
 80084d0:	e000      	b.n	80084d4 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80084d2:	2302      	movs	r3, #2
  }
}
 80084d4:	4618      	mov	r0, r3
 80084d6:	3710      	adds	r7, #16
 80084d8:	46bd      	mov	sp, r7
 80084da:	bd80      	pop	{r7, pc}

080084dc <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 80084dc:	b580      	push	{r7, lr}
 80084de:	b08a      	sub	sp, #40	; 0x28
 80084e0:	af00      	add	r7, sp, #0
 80084e2:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 80084e4:	687b      	ldr	r3, [r7, #4]
 80084e6:	681b      	ldr	r3, [r3, #0]
 80084e8:	681b      	ldr	r3, [r3, #0]
 80084ea:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 80084ec:	687b      	ldr	r3, [r7, #4]
 80084ee:	681b      	ldr	r3, [r3, #0]
 80084f0:	68db      	ldr	r3, [r3, #12]
 80084f2:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 80084f4:	687b      	ldr	r3, [r7, #4]
 80084f6:	681b      	ldr	r3, [r3, #0]
 80084f8:	695b      	ldr	r3, [r3, #20]
 80084fa:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 80084fc:	2300      	movs	r3, #0
 80084fe:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008500:	2300      	movs	r3, #0
 8008502:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008504:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008506:	f003 030f 	and.w	r3, r3, #15
 800850a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800850c:	69bb      	ldr	r3, [r7, #24]
 800850e:	2b00      	cmp	r3, #0
 8008510:	d10d      	bne.n	800852e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008512:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008514:	f003 0320 	and.w	r3, r3, #32
 8008518:	2b00      	cmp	r3, #0
 800851a:	d008      	beq.n	800852e <HAL_UART_IRQHandler+0x52>
 800851c:	6a3b      	ldr	r3, [r7, #32]
 800851e:	f003 0320 	and.w	r3, r3, #32
 8008522:	2b00      	cmp	r3, #0
 8008524:	d003      	beq.n	800852e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008526:	6878      	ldr	r0, [r7, #4]
 8008528:	f000 fbcd 	bl	8008cc6 <UART_Receive_IT>
      return;
 800852c:	e17c      	b.n	8008828 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800852e:	69bb      	ldr	r3, [r7, #24]
 8008530:	2b00      	cmp	r3, #0
 8008532:	f000 80b1 	beq.w	8008698 <HAL_UART_IRQHandler+0x1bc>
 8008536:	69fb      	ldr	r3, [r7, #28]
 8008538:	f003 0301 	and.w	r3, r3, #1
 800853c:	2b00      	cmp	r3, #0
 800853e:	d105      	bne.n	800854c <HAL_UART_IRQHandler+0x70>
 8008540:	6a3b      	ldr	r3, [r7, #32]
 8008542:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008546:	2b00      	cmp	r3, #0
 8008548:	f000 80a6 	beq.w	8008698 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800854c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800854e:	f003 0301 	and.w	r3, r3, #1
 8008552:	2b00      	cmp	r3, #0
 8008554:	d00a      	beq.n	800856c <HAL_UART_IRQHandler+0x90>
 8008556:	6a3b      	ldr	r3, [r7, #32]
 8008558:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800855c:	2b00      	cmp	r3, #0
 800855e:	d005      	beq.n	800856c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008560:	687b      	ldr	r3, [r7, #4]
 8008562:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008564:	f043 0201 	orr.w	r2, r3, #1
 8008568:	687b      	ldr	r3, [r7, #4]
 800856a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800856c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800856e:	f003 0304 	and.w	r3, r3, #4
 8008572:	2b00      	cmp	r3, #0
 8008574:	d00a      	beq.n	800858c <HAL_UART_IRQHandler+0xb0>
 8008576:	69fb      	ldr	r3, [r7, #28]
 8008578:	f003 0301 	and.w	r3, r3, #1
 800857c:	2b00      	cmp	r3, #0
 800857e:	d005      	beq.n	800858c <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8008580:	687b      	ldr	r3, [r7, #4]
 8008582:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008584:	f043 0202 	orr.w	r2, r3, #2
 8008588:	687b      	ldr	r3, [r7, #4]
 800858a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800858c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800858e:	f003 0302 	and.w	r3, r3, #2
 8008592:	2b00      	cmp	r3, #0
 8008594:	d00a      	beq.n	80085ac <HAL_UART_IRQHandler+0xd0>
 8008596:	69fb      	ldr	r3, [r7, #28]
 8008598:	f003 0301 	and.w	r3, r3, #1
 800859c:	2b00      	cmp	r3, #0
 800859e:	d005      	beq.n	80085ac <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80085a0:	687b      	ldr	r3, [r7, #4]
 80085a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085a4:	f043 0204 	orr.w	r2, r3, #4
 80085a8:	687b      	ldr	r3, [r7, #4]
 80085aa:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80085ac:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085ae:	f003 0308 	and.w	r3, r3, #8
 80085b2:	2b00      	cmp	r3, #0
 80085b4:	d00f      	beq.n	80085d6 <HAL_UART_IRQHandler+0xfa>
 80085b6:	6a3b      	ldr	r3, [r7, #32]
 80085b8:	f003 0320 	and.w	r3, r3, #32
 80085bc:	2b00      	cmp	r3, #0
 80085be:	d104      	bne.n	80085ca <HAL_UART_IRQHandler+0xee>
 80085c0:	69fb      	ldr	r3, [r7, #28]
 80085c2:	f003 0301 	and.w	r3, r3, #1
 80085c6:	2b00      	cmp	r3, #0
 80085c8:	d005      	beq.n	80085d6 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80085ca:	687b      	ldr	r3, [r7, #4]
 80085cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085ce:	f043 0208 	orr.w	r2, r3, #8
 80085d2:	687b      	ldr	r3, [r7, #4]
 80085d4:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 80085d6:	687b      	ldr	r3, [r7, #4]
 80085d8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80085da:	2b00      	cmp	r3, #0
 80085dc:	f000 811f 	beq.w	800881e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 80085e0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085e2:	f003 0320 	and.w	r3, r3, #32
 80085e6:	2b00      	cmp	r3, #0
 80085e8:	d007      	beq.n	80085fa <HAL_UART_IRQHandler+0x11e>
 80085ea:	6a3b      	ldr	r3, [r7, #32]
 80085ec:	f003 0320 	and.w	r3, r3, #32
 80085f0:	2b00      	cmp	r3, #0
 80085f2:	d002      	beq.n	80085fa <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 80085f4:	6878      	ldr	r0, [r7, #4]
 80085f6:	f000 fb66 	bl	8008cc6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 80085fa:	687b      	ldr	r3, [r7, #4]
 80085fc:	681b      	ldr	r3, [r3, #0]
 80085fe:	695b      	ldr	r3, [r3, #20]
 8008600:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008604:	2b40      	cmp	r3, #64	; 0x40
 8008606:	bf0c      	ite	eq
 8008608:	2301      	moveq	r3, #1
 800860a:	2300      	movne	r3, #0
 800860c:	b2db      	uxtb	r3, r3
 800860e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008610:	687b      	ldr	r3, [r7, #4]
 8008612:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008614:	f003 0308 	and.w	r3, r3, #8
 8008618:	2b00      	cmp	r3, #0
 800861a:	d102      	bne.n	8008622 <HAL_UART_IRQHandler+0x146>
 800861c:	697b      	ldr	r3, [r7, #20]
 800861e:	2b00      	cmp	r3, #0
 8008620:	d031      	beq.n	8008686 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008622:	6878      	ldr	r0, [r7, #4]
 8008624:	f000 faa6 	bl	8008b74 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008628:	687b      	ldr	r3, [r7, #4]
 800862a:	681b      	ldr	r3, [r3, #0]
 800862c:	695b      	ldr	r3, [r3, #20]
 800862e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008632:	2b40      	cmp	r3, #64	; 0x40
 8008634:	d123      	bne.n	800867e <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008636:	687b      	ldr	r3, [r7, #4]
 8008638:	681b      	ldr	r3, [r3, #0]
 800863a:	695a      	ldr	r2, [r3, #20]
 800863c:	687b      	ldr	r3, [r7, #4]
 800863e:	681b      	ldr	r3, [r3, #0]
 8008640:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008644:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008646:	687b      	ldr	r3, [r7, #4]
 8008648:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800864a:	2b00      	cmp	r3, #0
 800864c:	d013      	beq.n	8008676 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008652:	4a77      	ldr	r2, [pc, #476]	; (8008830 <HAL_UART_IRQHandler+0x354>)
 8008654:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008656:	687b      	ldr	r3, [r7, #4]
 8008658:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800865a:	4618      	mov	r0, r3
 800865c:	f7fb fcf8 	bl	8004050 <HAL_DMA_Abort_IT>
 8008660:	4603      	mov	r3, r0
 8008662:	2b00      	cmp	r3, #0
 8008664:	d016      	beq.n	8008694 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008666:	687b      	ldr	r3, [r7, #4]
 8008668:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800866a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800866c:	687a      	ldr	r2, [r7, #4]
 800866e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8008670:	4610      	mov	r0, r2
 8008672:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008674:	e00e      	b.n	8008694 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8008676:	6878      	ldr	r0, [r7, #4]
 8008678:	f000 f904 	bl	8008884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 800867c:	e00a      	b.n	8008694 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 800867e:	6878      	ldr	r0, [r7, #4]
 8008680:	f000 f900 	bl	8008884 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008684:	e006      	b.n	8008694 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8008686:	6878      	ldr	r0, [r7, #4]
 8008688:	f000 f8fc 	bl	8008884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	2200      	movs	r2, #0
 8008690:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8008692:	e0c4      	b.n	800881e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008694:	bf00      	nop
    return;
 8008696:	e0c2      	b.n	800881e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008698:	687b      	ldr	r3, [r7, #4]
 800869a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800869c:	2b01      	cmp	r3, #1
 800869e:	f040 80a2 	bne.w	80087e6 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80086a2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80086a4:	f003 0310 	and.w	r3, r3, #16
 80086a8:	2b00      	cmp	r3, #0
 80086aa:	f000 809c 	beq.w	80087e6 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80086ae:	6a3b      	ldr	r3, [r7, #32]
 80086b0:	f003 0310 	and.w	r3, r3, #16
 80086b4:	2b00      	cmp	r3, #0
 80086b6:	f000 8096 	beq.w	80087e6 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80086ba:	2300      	movs	r3, #0
 80086bc:	60fb      	str	r3, [r7, #12]
 80086be:	687b      	ldr	r3, [r7, #4]
 80086c0:	681b      	ldr	r3, [r3, #0]
 80086c2:	681b      	ldr	r3, [r3, #0]
 80086c4:	60fb      	str	r3, [r7, #12]
 80086c6:	687b      	ldr	r3, [r7, #4]
 80086c8:	681b      	ldr	r3, [r3, #0]
 80086ca:	685b      	ldr	r3, [r3, #4]
 80086cc:	60fb      	str	r3, [r7, #12]
 80086ce:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80086d0:	687b      	ldr	r3, [r7, #4]
 80086d2:	681b      	ldr	r3, [r3, #0]
 80086d4:	695b      	ldr	r3, [r3, #20]
 80086d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80086da:	2b40      	cmp	r3, #64	; 0x40
 80086dc:	d14f      	bne.n	800877e <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 80086de:	687b      	ldr	r3, [r7, #4]
 80086e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80086e2:	681b      	ldr	r3, [r3, #0]
 80086e4:	685b      	ldr	r3, [r3, #4]
 80086e6:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 80086e8:	8a3b      	ldrh	r3, [r7, #16]
 80086ea:	2b00      	cmp	r3, #0
 80086ec:	f000 8099 	beq.w	8008822 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 80086f0:	687b      	ldr	r3, [r7, #4]
 80086f2:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80086f4:	8a3a      	ldrh	r2, [r7, #16]
 80086f6:	429a      	cmp	r2, r3
 80086f8:	f080 8093 	bcs.w	8008822 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 80086fc:	687b      	ldr	r3, [r7, #4]
 80086fe:	8a3a      	ldrh	r2, [r7, #16]
 8008700:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008702:	687b      	ldr	r3, [r7, #4]
 8008704:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008706:	69db      	ldr	r3, [r3, #28]
 8008708:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800870c:	d02b      	beq.n	8008766 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800870e:	687b      	ldr	r3, [r7, #4]
 8008710:	681b      	ldr	r3, [r3, #0]
 8008712:	68da      	ldr	r2, [r3, #12]
 8008714:	687b      	ldr	r3, [r7, #4]
 8008716:	681b      	ldr	r3, [r3, #0]
 8008718:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800871c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800871e:	687b      	ldr	r3, [r7, #4]
 8008720:	681b      	ldr	r3, [r3, #0]
 8008722:	695a      	ldr	r2, [r3, #20]
 8008724:	687b      	ldr	r3, [r7, #4]
 8008726:	681b      	ldr	r3, [r3, #0]
 8008728:	f022 0201 	bic.w	r2, r2, #1
 800872c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800872e:	687b      	ldr	r3, [r7, #4]
 8008730:	681b      	ldr	r3, [r3, #0]
 8008732:	695a      	ldr	r2, [r3, #20]
 8008734:	687b      	ldr	r3, [r7, #4]
 8008736:	681b      	ldr	r3, [r3, #0]
 8008738:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800873c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800873e:	687b      	ldr	r3, [r7, #4]
 8008740:	2220      	movs	r2, #32
 8008742:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008746:	687b      	ldr	r3, [r7, #4]
 8008748:	2200      	movs	r2, #0
 800874a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800874c:	687b      	ldr	r3, [r7, #4]
 800874e:	681b      	ldr	r3, [r3, #0]
 8008750:	68da      	ldr	r2, [r3, #12]
 8008752:	687b      	ldr	r3, [r7, #4]
 8008754:	681b      	ldr	r3, [r3, #0]
 8008756:	f022 0210 	bic.w	r2, r2, #16
 800875a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800875c:	687b      	ldr	r3, [r7, #4]
 800875e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008760:	4618      	mov	r0, r3
 8008762:	f7fb fc05 	bl	8003f70 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008766:	687b      	ldr	r3, [r7, #4]
 8008768:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800876a:	687b      	ldr	r3, [r7, #4]
 800876c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800876e:	b29b      	uxth	r3, r3
 8008770:	1ad3      	subs	r3, r2, r3
 8008772:	b29b      	uxth	r3, r3
 8008774:	4619      	mov	r1, r3
 8008776:	6878      	ldr	r0, [r7, #4]
 8008778:	f000 f88e 	bl	8008898 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 800877c:	e051      	b.n	8008822 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 800877e:	687b      	ldr	r3, [r7, #4]
 8008780:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8008782:	687b      	ldr	r3, [r7, #4]
 8008784:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008786:	b29b      	uxth	r3, r3
 8008788:	1ad3      	subs	r3, r2, r3
 800878a:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 800878c:	687b      	ldr	r3, [r7, #4]
 800878e:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008790:	b29b      	uxth	r3, r3
 8008792:	2b00      	cmp	r3, #0
 8008794:	d047      	beq.n	8008826 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8008796:	8a7b      	ldrh	r3, [r7, #18]
 8008798:	2b00      	cmp	r3, #0
 800879a:	d044      	beq.n	8008826 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 800879c:	687b      	ldr	r3, [r7, #4]
 800879e:	681b      	ldr	r3, [r3, #0]
 80087a0:	68da      	ldr	r2, [r3, #12]
 80087a2:	687b      	ldr	r3, [r7, #4]
 80087a4:	681b      	ldr	r3, [r3, #0]
 80087a6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80087aa:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80087ac:	687b      	ldr	r3, [r7, #4]
 80087ae:	681b      	ldr	r3, [r3, #0]
 80087b0:	695a      	ldr	r2, [r3, #20]
 80087b2:	687b      	ldr	r3, [r7, #4]
 80087b4:	681b      	ldr	r3, [r3, #0]
 80087b6:	f022 0201 	bic.w	r2, r2, #1
 80087ba:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80087bc:	687b      	ldr	r3, [r7, #4]
 80087be:	2220      	movs	r2, #32
 80087c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80087c4:	687b      	ldr	r3, [r7, #4]
 80087c6:	2200      	movs	r2, #0
 80087c8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80087ca:	687b      	ldr	r3, [r7, #4]
 80087cc:	681b      	ldr	r3, [r3, #0]
 80087ce:	68da      	ldr	r2, [r3, #12]
 80087d0:	687b      	ldr	r3, [r7, #4]
 80087d2:	681b      	ldr	r3, [r3, #0]
 80087d4:	f022 0210 	bic.w	r2, r2, #16
 80087d8:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 80087da:	8a7b      	ldrh	r3, [r7, #18]
 80087dc:	4619      	mov	r1, r3
 80087de:	6878      	ldr	r0, [r7, #4]
 80087e0:	f000 f85a 	bl	8008898 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80087e4:	e01f      	b.n	8008826 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 80087e6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80087e8:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087ec:	2b00      	cmp	r3, #0
 80087ee:	d008      	beq.n	8008802 <HAL_UART_IRQHandler+0x326>
 80087f0:	6a3b      	ldr	r3, [r7, #32]
 80087f2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80087f6:	2b00      	cmp	r3, #0
 80087f8:	d003      	beq.n	8008802 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 80087fa:	6878      	ldr	r0, [r7, #4]
 80087fc:	f000 f9fb 	bl	8008bf6 <UART_Transmit_IT>
    return;
 8008800:	e012      	b.n	8008828 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008802:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008804:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008808:	2b00      	cmp	r3, #0
 800880a:	d00d      	beq.n	8008828 <HAL_UART_IRQHandler+0x34c>
 800880c:	6a3b      	ldr	r3, [r7, #32]
 800880e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008812:	2b00      	cmp	r3, #0
 8008814:	d008      	beq.n	8008828 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008816:	6878      	ldr	r0, [r7, #4]
 8008818:	f000 fa3d 	bl	8008c96 <UART_EndTransmit_IT>
    return;
 800881c:	e004      	b.n	8008828 <HAL_UART_IRQHandler+0x34c>
    return;
 800881e:	bf00      	nop
 8008820:	e002      	b.n	8008828 <HAL_UART_IRQHandler+0x34c>
      return;
 8008822:	bf00      	nop
 8008824:	e000      	b.n	8008828 <HAL_UART_IRQHandler+0x34c>
      return;
 8008826:	bf00      	nop
  }
}
 8008828:	3728      	adds	r7, #40	; 0x28
 800882a:	46bd      	mov	sp, r7
 800882c:	bd80      	pop	{r7, pc}
 800882e:	bf00      	nop
 8008830:	08008bcf 	.word	0x08008bcf

08008834 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008834:	b480      	push	{r7}
 8008836:	b083      	sub	sp, #12
 8008838:	af00      	add	r7, sp, #0
 800883a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800883c:	bf00      	nop
 800883e:	370c      	adds	r7, #12
 8008840:	46bd      	mov	sp, r7
 8008842:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008846:	4770      	bx	lr

08008848 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008848:	b480      	push	{r7}
 800884a:	b083      	sub	sp, #12
 800884c:	af00      	add	r7, sp, #0
 800884e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008850:	bf00      	nop
 8008852:	370c      	adds	r7, #12
 8008854:	46bd      	mov	sp, r7
 8008856:	f85d 7b04 	ldr.w	r7, [sp], #4
 800885a:	4770      	bx	lr

0800885c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800885c:	b480      	push	{r7}
 800885e:	b083      	sub	sp, #12
 8008860:	af00      	add	r7, sp, #0
 8008862:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008864:	bf00      	nop
 8008866:	370c      	adds	r7, #12
 8008868:	46bd      	mov	sp, r7
 800886a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800886e:	4770      	bx	lr

08008870 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008870:	b480      	push	{r7}
 8008872:	b083      	sub	sp, #12
 8008874:	af00      	add	r7, sp, #0
 8008876:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8008878:	bf00      	nop
 800887a:	370c      	adds	r7, #12
 800887c:	46bd      	mov	sp, r7
 800887e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008882:	4770      	bx	lr

08008884 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8008884:	b480      	push	{r7}
 8008886:	b083      	sub	sp, #12
 8008888:	af00      	add	r7, sp, #0
 800888a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 800888c:	bf00      	nop
 800888e:	370c      	adds	r7, #12
 8008890:	46bd      	mov	sp, r7
 8008892:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008896:	4770      	bx	lr

08008898 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8008898:	b480      	push	{r7}
 800889a:	b083      	sub	sp, #12
 800889c:	af00      	add	r7, sp, #0
 800889e:	6078      	str	r0, [r7, #4]
 80088a0:	460b      	mov	r3, r1
 80088a2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80088a4:	bf00      	nop
 80088a6:	370c      	adds	r7, #12
 80088a8:	46bd      	mov	sp, r7
 80088aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80088ae:	4770      	bx	lr

080088b0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80088b0:	b580      	push	{r7, lr}
 80088b2:	b084      	sub	sp, #16
 80088b4:	af00      	add	r7, sp, #0
 80088b6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088b8:	687b      	ldr	r3, [r7, #4]
 80088ba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088bc:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80088be:	687b      	ldr	r3, [r7, #4]
 80088c0:	681b      	ldr	r3, [r3, #0]
 80088c2:	681b      	ldr	r3, [r3, #0]
 80088c4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80088c8:	2b00      	cmp	r3, #0
 80088ca:	d113      	bne.n	80088f4 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80088cc:	68fb      	ldr	r3, [r7, #12]
 80088ce:	2200      	movs	r2, #0
 80088d0:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 80088d2:	68fb      	ldr	r3, [r7, #12]
 80088d4:	681b      	ldr	r3, [r3, #0]
 80088d6:	695a      	ldr	r2, [r3, #20]
 80088d8:	68fb      	ldr	r3, [r7, #12]
 80088da:	681b      	ldr	r3, [r3, #0]
 80088dc:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80088e0:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 80088e2:	68fb      	ldr	r3, [r7, #12]
 80088e4:	681b      	ldr	r3, [r3, #0]
 80088e6:	68da      	ldr	r2, [r3, #12]
 80088e8:	68fb      	ldr	r3, [r7, #12]
 80088ea:	681b      	ldr	r3, [r3, #0]
 80088ec:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80088f0:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088f2:	e002      	b.n	80088fa <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 80088f4:	68f8      	ldr	r0, [r7, #12]
 80088f6:	f7ff ff9d 	bl	8008834 <HAL_UART_TxCpltCallback>
}
 80088fa:	bf00      	nop
 80088fc:	3710      	adds	r7, #16
 80088fe:	46bd      	mov	sp, r7
 8008900:	bd80      	pop	{r7, pc}

08008902 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008902:	b580      	push	{r7, lr}
 8008904:	b084      	sub	sp, #16
 8008906:	af00      	add	r7, sp, #0
 8008908:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800890a:	687b      	ldr	r3, [r7, #4]
 800890c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800890e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008910:	68f8      	ldr	r0, [r7, #12]
 8008912:	f7ff ff99 	bl	8008848 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008916:	bf00      	nop
 8008918:	3710      	adds	r7, #16
 800891a:	46bd      	mov	sp, r7
 800891c:	bd80      	pop	{r7, pc}

0800891e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800891e:	b580      	push	{r7, lr}
 8008920:	b084      	sub	sp, #16
 8008922:	af00      	add	r7, sp, #0
 8008924:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800892c:	687b      	ldr	r3, [r7, #4]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	681b      	ldr	r3, [r3, #0]
 8008932:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008936:	2b00      	cmp	r3, #0
 8008938:	d12a      	bne.n	8008990 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800893a:	68fb      	ldr	r3, [r7, #12]
 800893c:	2200      	movs	r2, #0
 800893e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008940:	68fb      	ldr	r3, [r7, #12]
 8008942:	681b      	ldr	r3, [r3, #0]
 8008944:	68da      	ldr	r2, [r3, #12]
 8008946:	68fb      	ldr	r3, [r7, #12]
 8008948:	681b      	ldr	r3, [r3, #0]
 800894a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800894e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008950:	68fb      	ldr	r3, [r7, #12]
 8008952:	681b      	ldr	r3, [r3, #0]
 8008954:	695a      	ldr	r2, [r3, #20]
 8008956:	68fb      	ldr	r3, [r7, #12]
 8008958:	681b      	ldr	r3, [r3, #0]
 800895a:	f022 0201 	bic.w	r2, r2, #1
 800895e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008960:	68fb      	ldr	r3, [r7, #12]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695a      	ldr	r2, [r3, #20]
 8008966:	68fb      	ldr	r3, [r7, #12]
 8008968:	681b      	ldr	r3, [r3, #0]
 800896a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800896e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8008970:	68fb      	ldr	r3, [r7, #12]
 8008972:	2220      	movs	r2, #32
 8008974:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008978:	68fb      	ldr	r3, [r7, #12]
 800897a:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800897c:	2b01      	cmp	r3, #1
 800897e:	d107      	bne.n	8008990 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008980:	68fb      	ldr	r3, [r7, #12]
 8008982:	681b      	ldr	r3, [r3, #0]
 8008984:	68da      	ldr	r2, [r3, #12]
 8008986:	68fb      	ldr	r3, [r7, #12]
 8008988:	681b      	ldr	r3, [r3, #0]
 800898a:	f022 0210 	bic.w	r2, r2, #16
 800898e:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008990:	68fb      	ldr	r3, [r7, #12]
 8008992:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008994:	2b01      	cmp	r3, #1
 8008996:	d106      	bne.n	80089a6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008998:	68fb      	ldr	r3, [r7, #12]
 800899a:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 800899c:	4619      	mov	r1, r3
 800899e:	68f8      	ldr	r0, [r7, #12]
 80089a0:	f7ff ff7a 	bl	8008898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089a4:	e002      	b.n	80089ac <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80089a6:	68f8      	ldr	r0, [r7, #12]
 80089a8:	f7ff ff58 	bl	800885c <HAL_UART_RxCpltCallback>
}
 80089ac:	bf00      	nop
 80089ae:	3710      	adds	r7, #16
 80089b0:	46bd      	mov	sp, r7
 80089b2:	bd80      	pop	{r7, pc}

080089b4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80089b4:	b580      	push	{r7, lr}
 80089b6:	b084      	sub	sp, #16
 80089b8:	af00      	add	r7, sp, #0
 80089ba:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089bc:	687b      	ldr	r3, [r7, #4]
 80089be:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089c0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80089c2:	68fb      	ldr	r3, [r7, #12]
 80089c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80089c6:	2b01      	cmp	r3, #1
 80089c8:	d108      	bne.n	80089dc <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80089ce:	085b      	lsrs	r3, r3, #1
 80089d0:	b29b      	uxth	r3, r3
 80089d2:	4619      	mov	r1, r3
 80089d4:	68f8      	ldr	r0, [r7, #12]
 80089d6:	f7ff ff5f 	bl	8008898 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80089da:	e002      	b.n	80089e2 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 80089dc:	68f8      	ldr	r0, [r7, #12]
 80089de:	f7ff ff47 	bl	8008870 <HAL_UART_RxHalfCpltCallback>
}
 80089e2:	bf00      	nop
 80089e4:	3710      	adds	r7, #16
 80089e6:	46bd      	mov	sp, r7
 80089e8:	bd80      	pop	{r7, pc}

080089ea <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 80089ea:	b580      	push	{r7, lr}
 80089ec:	b084      	sub	sp, #16
 80089ee:	af00      	add	r7, sp, #0
 80089f0:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 80089f2:	2300      	movs	r3, #0
 80089f4:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80089f6:	687b      	ldr	r3, [r7, #4]
 80089f8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089fa:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 80089fc:	68bb      	ldr	r3, [r7, #8]
 80089fe:	681b      	ldr	r3, [r3, #0]
 8008a00:	695b      	ldr	r3, [r3, #20]
 8008a02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008a06:	2b80      	cmp	r3, #128	; 0x80
 8008a08:	bf0c      	ite	eq
 8008a0a:	2301      	moveq	r3, #1
 8008a0c:	2300      	movne	r3, #0
 8008a0e:	b2db      	uxtb	r3, r3
 8008a10:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008a12:	68bb      	ldr	r3, [r7, #8]
 8008a14:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008a18:	b2db      	uxtb	r3, r3
 8008a1a:	2b21      	cmp	r3, #33	; 0x21
 8008a1c:	d108      	bne.n	8008a30 <UART_DMAError+0x46>
 8008a1e:	68fb      	ldr	r3, [r7, #12]
 8008a20:	2b00      	cmp	r3, #0
 8008a22:	d005      	beq.n	8008a30 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008a24:	68bb      	ldr	r3, [r7, #8]
 8008a26:	2200      	movs	r2, #0
 8008a28:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8008a2a:	68b8      	ldr	r0, [r7, #8]
 8008a2c:	f000 f88c 	bl	8008b48 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008a30:	68bb      	ldr	r3, [r7, #8]
 8008a32:	681b      	ldr	r3, [r3, #0]
 8008a34:	695b      	ldr	r3, [r3, #20]
 8008a36:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008a3a:	2b40      	cmp	r3, #64	; 0x40
 8008a3c:	bf0c      	ite	eq
 8008a3e:	2301      	moveq	r3, #1
 8008a40:	2300      	movne	r3, #0
 8008a42:	b2db      	uxtb	r3, r3
 8008a44:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008a46:	68bb      	ldr	r3, [r7, #8]
 8008a48:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008a4c:	b2db      	uxtb	r3, r3
 8008a4e:	2b22      	cmp	r3, #34	; 0x22
 8008a50:	d108      	bne.n	8008a64 <UART_DMAError+0x7a>
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	2b00      	cmp	r3, #0
 8008a56:	d005      	beq.n	8008a64 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008a58:	68bb      	ldr	r3, [r7, #8]
 8008a5a:	2200      	movs	r2, #0
 8008a5c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8008a5e:	68b8      	ldr	r0, [r7, #8]
 8008a60:	f000 f888 	bl	8008b74 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008a64:	68bb      	ldr	r3, [r7, #8]
 8008a66:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008a68:	f043 0210 	orr.w	r2, r3, #16
 8008a6c:	68bb      	ldr	r3, [r7, #8]
 8008a6e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008a70:	68b8      	ldr	r0, [r7, #8]
 8008a72:	f7ff ff07 	bl	8008884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008a76:	bf00      	nop
 8008a78:	3710      	adds	r7, #16
 8008a7a:	46bd      	mov	sp, r7
 8008a7c:	bd80      	pop	{r7, pc}
	...

08008a80 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8008a80:	b580      	push	{r7, lr}
 8008a82:	b086      	sub	sp, #24
 8008a84:	af00      	add	r7, sp, #0
 8008a86:	60f8      	str	r0, [r7, #12]
 8008a88:	60b9      	str	r1, [r7, #8]
 8008a8a:	4613      	mov	r3, r2
 8008a8c:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8008a8e:	68ba      	ldr	r2, [r7, #8]
 8008a90:	68fb      	ldr	r3, [r7, #12]
 8008a92:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8008a94:	68fb      	ldr	r3, [r7, #12]
 8008a96:	88fa      	ldrh	r2, [r7, #6]
 8008a98:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008a9a:	68fb      	ldr	r3, [r7, #12]
 8008a9c:	2200      	movs	r2, #0
 8008a9e:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8008aa0:	68fb      	ldr	r3, [r7, #12]
 8008aa2:	2222      	movs	r2, #34	; 0x22
 8008aa4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8008aa8:	68fb      	ldr	r3, [r7, #12]
 8008aaa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008aac:	4a23      	ldr	r2, [pc, #140]	; (8008b3c <UART_Start_Receive_DMA+0xbc>)
 8008aae:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8008ab0:	68fb      	ldr	r3, [r7, #12]
 8008ab2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ab4:	4a22      	ldr	r2, [pc, #136]	; (8008b40 <UART_Start_Receive_DMA+0xc0>)
 8008ab6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8008ab8:	68fb      	ldr	r3, [r7, #12]
 8008aba:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008abc:	4a21      	ldr	r2, [pc, #132]	; (8008b44 <UART_Start_Receive_DMA+0xc4>)
 8008abe:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8008ac0:	68fb      	ldr	r3, [r7, #12]
 8008ac2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008ac4:	2200      	movs	r2, #0
 8008ac6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8008ac8:	f107 0308 	add.w	r3, r7, #8
 8008acc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8008ace:	68fb      	ldr	r3, [r7, #12]
 8008ad0:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008ad2:	68fb      	ldr	r3, [r7, #12]
 8008ad4:	681b      	ldr	r3, [r3, #0]
 8008ad6:	3304      	adds	r3, #4
 8008ad8:	4619      	mov	r1, r3
 8008ada:	697b      	ldr	r3, [r7, #20]
 8008adc:	681a      	ldr	r2, [r3, #0]
 8008ade:	88fb      	ldrh	r3, [r7, #6]
 8008ae0:	f7fb f9ee 	bl	8003ec0 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008ae4:	2300      	movs	r3, #0
 8008ae6:	613b      	str	r3, [r7, #16]
 8008ae8:	68fb      	ldr	r3, [r7, #12]
 8008aea:	681b      	ldr	r3, [r3, #0]
 8008aec:	681b      	ldr	r3, [r3, #0]
 8008aee:	613b      	str	r3, [r7, #16]
 8008af0:	68fb      	ldr	r3, [r7, #12]
 8008af2:	681b      	ldr	r3, [r3, #0]
 8008af4:	685b      	ldr	r3, [r3, #4]
 8008af6:	613b      	str	r3, [r7, #16]
 8008af8:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008afa:	68fb      	ldr	r3, [r7, #12]
 8008afc:	2200      	movs	r2, #0
 8008afe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008b02:	68fb      	ldr	r3, [r7, #12]
 8008b04:	681b      	ldr	r3, [r3, #0]
 8008b06:	68da      	ldr	r2, [r3, #12]
 8008b08:	68fb      	ldr	r3, [r7, #12]
 8008b0a:	681b      	ldr	r3, [r3, #0]
 8008b0c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008b10:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	681b      	ldr	r3, [r3, #0]
 8008b16:	695a      	ldr	r2, [r3, #20]
 8008b18:	68fb      	ldr	r3, [r7, #12]
 8008b1a:	681b      	ldr	r3, [r3, #0]
 8008b1c:	f042 0201 	orr.w	r2, r2, #1
 8008b20:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008b22:	68fb      	ldr	r3, [r7, #12]
 8008b24:	681b      	ldr	r3, [r3, #0]
 8008b26:	695a      	ldr	r2, [r3, #20]
 8008b28:	68fb      	ldr	r3, [r7, #12]
 8008b2a:	681b      	ldr	r3, [r3, #0]
 8008b2c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008b30:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008b32:	2300      	movs	r3, #0
}
 8008b34:	4618      	mov	r0, r3
 8008b36:	3718      	adds	r7, #24
 8008b38:	46bd      	mov	sp, r7
 8008b3a:	bd80      	pop	{r7, pc}
 8008b3c:	0800891f 	.word	0x0800891f
 8008b40:	080089b5 	.word	0x080089b5
 8008b44:	080089eb 	.word	0x080089eb

08008b48 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008b48:	b480      	push	{r7}
 8008b4a:	b083      	sub	sp, #12
 8008b4c:	af00      	add	r7, sp, #0
 8008b4e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008b50:	687b      	ldr	r3, [r7, #4]
 8008b52:	681b      	ldr	r3, [r3, #0]
 8008b54:	68da      	ldr	r2, [r3, #12]
 8008b56:	687b      	ldr	r3, [r7, #4]
 8008b58:	681b      	ldr	r3, [r3, #0]
 8008b5a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008b5e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008b60:	687b      	ldr	r3, [r7, #4]
 8008b62:	2220      	movs	r2, #32
 8008b64:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008b68:	bf00      	nop
 8008b6a:	370c      	adds	r7, #12
 8008b6c:	46bd      	mov	sp, r7
 8008b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008b72:	4770      	bx	lr

08008b74 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008b74:	b480      	push	{r7}
 8008b76:	b083      	sub	sp, #12
 8008b78:	af00      	add	r7, sp, #0
 8008b7a:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008b7c:	687b      	ldr	r3, [r7, #4]
 8008b7e:	681b      	ldr	r3, [r3, #0]
 8008b80:	68da      	ldr	r2, [r3, #12]
 8008b82:	687b      	ldr	r3, [r7, #4]
 8008b84:	681b      	ldr	r3, [r3, #0]
 8008b86:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008b8a:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008b8c:	687b      	ldr	r3, [r7, #4]
 8008b8e:	681b      	ldr	r3, [r3, #0]
 8008b90:	695a      	ldr	r2, [r3, #20]
 8008b92:	687b      	ldr	r3, [r7, #4]
 8008b94:	681b      	ldr	r3, [r3, #0]
 8008b96:	f022 0201 	bic.w	r2, r2, #1
 8008b9a:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008b9c:	687b      	ldr	r3, [r7, #4]
 8008b9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ba0:	2b01      	cmp	r3, #1
 8008ba2:	d107      	bne.n	8008bb4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f022 0210 	bic.w	r2, r2, #16
 8008bb2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008bb4:	687b      	ldr	r3, [r7, #4]
 8008bb6:	2220      	movs	r2, #32
 8008bb8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008bbc:	687b      	ldr	r3, [r7, #4]
 8008bbe:	2200      	movs	r2, #0
 8008bc0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008bc2:	bf00      	nop
 8008bc4:	370c      	adds	r7, #12
 8008bc6:	46bd      	mov	sp, r7
 8008bc8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bcc:	4770      	bx	lr

08008bce <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008bce:	b580      	push	{r7, lr}
 8008bd0:	b084      	sub	sp, #16
 8008bd2:	af00      	add	r7, sp, #0
 8008bd4:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008bd6:	687b      	ldr	r3, [r7, #4]
 8008bd8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008bda:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008bdc:	68fb      	ldr	r3, [r7, #12]
 8008bde:	2200      	movs	r2, #0
 8008be0:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008be2:	68fb      	ldr	r3, [r7, #12]
 8008be4:	2200      	movs	r2, #0
 8008be6:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008be8:	68f8      	ldr	r0, [r7, #12]
 8008bea:	f7ff fe4b 	bl	8008884 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008bee:	bf00      	nop
 8008bf0:	3710      	adds	r7, #16
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008bf6:	b480      	push	{r7}
 8008bf8:	b085      	sub	sp, #20
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b21      	cmp	r3, #33	; 0x21
 8008c08:	d13e      	bne.n	8008c88 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0a:	687b      	ldr	r3, [r7, #4]
 8008c0c:	689b      	ldr	r3, [r3, #8]
 8008c0e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c12:	d114      	bne.n	8008c3e <UART_Transmit_IT+0x48>
 8008c14:	687b      	ldr	r3, [r7, #4]
 8008c16:	691b      	ldr	r3, [r3, #16]
 8008c18:	2b00      	cmp	r3, #0
 8008c1a:	d110      	bne.n	8008c3e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008c1c:	687b      	ldr	r3, [r7, #4]
 8008c1e:	6a1b      	ldr	r3, [r3, #32]
 8008c20:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008c22:	68fb      	ldr	r3, [r7, #12]
 8008c24:	881b      	ldrh	r3, [r3, #0]
 8008c26:	461a      	mov	r2, r3
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008c30:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008c32:	687b      	ldr	r3, [r7, #4]
 8008c34:	6a1b      	ldr	r3, [r3, #32]
 8008c36:	1c9a      	adds	r2, r3, #2
 8008c38:	687b      	ldr	r3, [r7, #4]
 8008c3a:	621a      	str	r2, [r3, #32]
 8008c3c:	e008      	b.n	8008c50 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008c3e:	687b      	ldr	r3, [r7, #4]
 8008c40:	6a1b      	ldr	r3, [r3, #32]
 8008c42:	1c59      	adds	r1, r3, #1
 8008c44:	687a      	ldr	r2, [r7, #4]
 8008c46:	6211      	str	r1, [r2, #32]
 8008c48:	781a      	ldrb	r2, [r3, #0]
 8008c4a:	687b      	ldr	r3, [r7, #4]
 8008c4c:	681b      	ldr	r3, [r3, #0]
 8008c4e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008c54:	b29b      	uxth	r3, r3
 8008c56:	3b01      	subs	r3, #1
 8008c58:	b29b      	uxth	r3, r3
 8008c5a:	687a      	ldr	r2, [r7, #4]
 8008c5c:	4619      	mov	r1, r3
 8008c5e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008c60:	2b00      	cmp	r3, #0
 8008c62:	d10f      	bne.n	8008c84 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008c64:	687b      	ldr	r3, [r7, #4]
 8008c66:	681b      	ldr	r3, [r3, #0]
 8008c68:	68da      	ldr	r2, [r3, #12]
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008c72:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008c74:	687b      	ldr	r3, [r7, #4]
 8008c76:	681b      	ldr	r3, [r3, #0]
 8008c78:	68da      	ldr	r2, [r3, #12]
 8008c7a:	687b      	ldr	r3, [r7, #4]
 8008c7c:	681b      	ldr	r3, [r3, #0]
 8008c7e:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008c82:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008c84:	2300      	movs	r3, #0
 8008c86:	e000      	b.n	8008c8a <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008c88:	2302      	movs	r3, #2
  }
}
 8008c8a:	4618      	mov	r0, r3
 8008c8c:	3714      	adds	r7, #20
 8008c8e:	46bd      	mov	sp, r7
 8008c90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008c94:	4770      	bx	lr

08008c96 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008c96:	b580      	push	{r7, lr}
 8008c98:	b082      	sub	sp, #8
 8008c9a:	af00      	add	r7, sp, #0
 8008c9c:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008c9e:	687b      	ldr	r3, [r7, #4]
 8008ca0:	681b      	ldr	r3, [r3, #0]
 8008ca2:	68da      	ldr	r2, [r3, #12]
 8008ca4:	687b      	ldr	r3, [r7, #4]
 8008ca6:	681b      	ldr	r3, [r3, #0]
 8008ca8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008cac:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	2220      	movs	r2, #32
 8008cb2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008cb6:	6878      	ldr	r0, [r7, #4]
 8008cb8:	f7ff fdbc 	bl	8008834 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008cbc:	2300      	movs	r3, #0
}
 8008cbe:	4618      	mov	r0, r3
 8008cc0:	3708      	adds	r7, #8
 8008cc2:	46bd      	mov	sp, r7
 8008cc4:	bd80      	pop	{r7, pc}

08008cc6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008cc6:	b580      	push	{r7, lr}
 8008cc8:	b084      	sub	sp, #16
 8008cca:	af00      	add	r7, sp, #0
 8008ccc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008cd4:	b2db      	uxtb	r3, r3
 8008cd6:	2b22      	cmp	r3, #34	; 0x22
 8008cd8:	f040 8087 	bne.w	8008dea <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008cdc:	687b      	ldr	r3, [r7, #4]
 8008cde:	689b      	ldr	r3, [r3, #8]
 8008ce0:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008ce4:	d117      	bne.n	8008d16 <UART_Receive_IT+0x50>
 8008ce6:	687b      	ldr	r3, [r7, #4]
 8008ce8:	691b      	ldr	r3, [r3, #16]
 8008cea:	2b00      	cmp	r3, #0
 8008cec:	d113      	bne.n	8008d16 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008cee:	2300      	movs	r3, #0
 8008cf0:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008cf2:	687b      	ldr	r3, [r7, #4]
 8008cf4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008cf6:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	681b      	ldr	r3, [r3, #0]
 8008cfc:	685b      	ldr	r3, [r3, #4]
 8008cfe:	b29b      	uxth	r3, r3
 8008d00:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008d04:	b29a      	uxth	r2, r3
 8008d06:	68bb      	ldr	r3, [r7, #8]
 8008d08:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008d0a:	687b      	ldr	r3, [r7, #4]
 8008d0c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d0e:	1c9a      	adds	r2, r3, #2
 8008d10:	687b      	ldr	r3, [r7, #4]
 8008d12:	629a      	str	r2, [r3, #40]	; 0x28
 8008d14:	e026      	b.n	8008d64 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008d16:	687b      	ldr	r3, [r7, #4]
 8008d18:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d1a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008d1c:	2300      	movs	r3, #0
 8008d1e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008d20:	687b      	ldr	r3, [r7, #4]
 8008d22:	689b      	ldr	r3, [r3, #8]
 8008d24:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008d28:	d007      	beq.n	8008d3a <UART_Receive_IT+0x74>
 8008d2a:	687b      	ldr	r3, [r7, #4]
 8008d2c:	689b      	ldr	r3, [r3, #8]
 8008d2e:	2b00      	cmp	r3, #0
 8008d30:	d10a      	bne.n	8008d48 <UART_Receive_IT+0x82>
 8008d32:	687b      	ldr	r3, [r7, #4]
 8008d34:	691b      	ldr	r3, [r3, #16]
 8008d36:	2b00      	cmp	r3, #0
 8008d38:	d106      	bne.n	8008d48 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008d3a:	687b      	ldr	r3, [r7, #4]
 8008d3c:	681b      	ldr	r3, [r3, #0]
 8008d3e:	685b      	ldr	r3, [r3, #4]
 8008d40:	b2da      	uxtb	r2, r3
 8008d42:	68fb      	ldr	r3, [r7, #12]
 8008d44:	701a      	strb	r2, [r3, #0]
 8008d46:	e008      	b.n	8008d5a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008d48:	687b      	ldr	r3, [r7, #4]
 8008d4a:	681b      	ldr	r3, [r3, #0]
 8008d4c:	685b      	ldr	r3, [r3, #4]
 8008d4e:	b2db      	uxtb	r3, r3
 8008d50:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008d54:	b2da      	uxtb	r2, r3
 8008d56:	68fb      	ldr	r3, [r7, #12]
 8008d58:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008d5a:	687b      	ldr	r3, [r7, #4]
 8008d5c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008d5e:	1c5a      	adds	r2, r3, #1
 8008d60:	687b      	ldr	r3, [r7, #4]
 8008d62:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008d64:	687b      	ldr	r3, [r7, #4]
 8008d66:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008d68:	b29b      	uxth	r3, r3
 8008d6a:	3b01      	subs	r3, #1
 8008d6c:	b29b      	uxth	r3, r3
 8008d6e:	687a      	ldr	r2, [r7, #4]
 8008d70:	4619      	mov	r1, r3
 8008d72:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008d74:	2b00      	cmp	r3, #0
 8008d76:	d136      	bne.n	8008de6 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008d78:	687b      	ldr	r3, [r7, #4]
 8008d7a:	681b      	ldr	r3, [r3, #0]
 8008d7c:	68da      	ldr	r2, [r3, #12]
 8008d7e:	687b      	ldr	r3, [r7, #4]
 8008d80:	681b      	ldr	r3, [r3, #0]
 8008d82:	f022 0220 	bic.w	r2, r2, #32
 8008d86:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008d88:	687b      	ldr	r3, [r7, #4]
 8008d8a:	681b      	ldr	r3, [r3, #0]
 8008d8c:	68da      	ldr	r2, [r3, #12]
 8008d8e:	687b      	ldr	r3, [r7, #4]
 8008d90:	681b      	ldr	r3, [r3, #0]
 8008d92:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008d96:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008d98:	687b      	ldr	r3, [r7, #4]
 8008d9a:	681b      	ldr	r3, [r3, #0]
 8008d9c:	695a      	ldr	r2, [r3, #20]
 8008d9e:	687b      	ldr	r3, [r7, #4]
 8008da0:	681b      	ldr	r3, [r3, #0]
 8008da2:	f022 0201 	bic.w	r2, r2, #1
 8008da6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008da8:	687b      	ldr	r3, [r7, #4]
 8008daa:	2220      	movs	r2, #32
 8008dac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008db0:	687b      	ldr	r3, [r7, #4]
 8008db2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008db4:	2b01      	cmp	r3, #1
 8008db6:	d10e      	bne.n	8008dd6 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008db8:	687b      	ldr	r3, [r7, #4]
 8008dba:	681b      	ldr	r3, [r3, #0]
 8008dbc:	68da      	ldr	r2, [r3, #12]
 8008dbe:	687b      	ldr	r3, [r7, #4]
 8008dc0:	681b      	ldr	r3, [r3, #0]
 8008dc2:	f022 0210 	bic.w	r2, r2, #16
 8008dc6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008dc8:	687b      	ldr	r3, [r7, #4]
 8008dca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008dcc:	4619      	mov	r1, r3
 8008dce:	6878      	ldr	r0, [r7, #4]
 8008dd0:	f7ff fd62 	bl	8008898 <HAL_UARTEx_RxEventCallback>
 8008dd4:	e002      	b.n	8008ddc <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008dd6:	6878      	ldr	r0, [r7, #4]
 8008dd8:	f7ff fd40 	bl	800885c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008ddc:	687b      	ldr	r3, [r7, #4]
 8008dde:	2200      	movs	r2, #0
 8008de0:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008de2:	2300      	movs	r3, #0
 8008de4:	e002      	b.n	8008dec <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008de6:	2300      	movs	r3, #0
 8008de8:	e000      	b.n	8008dec <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008dea:	2302      	movs	r3, #2
  }
}
 8008dec:	4618      	mov	r0, r3
 8008dee:	3710      	adds	r7, #16
 8008df0:	46bd      	mov	sp, r7
 8008df2:	bd80      	pop	{r7, pc}

08008df4 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008df4:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008df8:	b09f      	sub	sp, #124	; 0x7c
 8008dfa:	af00      	add	r7, sp, #0
 8008dfc:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008dfe:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e00:	681b      	ldr	r3, [r3, #0]
 8008e02:	691b      	ldr	r3, [r3, #16]
 8008e04:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008e08:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0a:	68d9      	ldr	r1, [r3, #12]
 8008e0c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e0e:	681a      	ldr	r2, [r3, #0]
 8008e10:	ea40 0301 	orr.w	r3, r0, r1
 8008e14:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008e16:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e18:	689a      	ldr	r2, [r3, #8]
 8008e1a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e1c:	691b      	ldr	r3, [r3, #16]
 8008e1e:	431a      	orrs	r2, r3
 8008e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e22:	695b      	ldr	r3, [r3, #20]
 8008e24:	431a      	orrs	r2, r3
 8008e26:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e28:	69db      	ldr	r3, [r3, #28]
 8008e2a:	4313      	orrs	r3, r2
 8008e2c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008e2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e30:	681b      	ldr	r3, [r3, #0]
 8008e32:	68db      	ldr	r3, [r3, #12]
 8008e34:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008e38:	f021 010c 	bic.w	r1, r1, #12
 8008e3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e3e:	681a      	ldr	r2, [r3, #0]
 8008e40:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008e42:	430b      	orrs	r3, r1
 8008e44:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008e46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e48:	681b      	ldr	r3, [r3, #0]
 8008e4a:	695b      	ldr	r3, [r3, #20]
 8008e4c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008e50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e52:	6999      	ldr	r1, [r3, #24]
 8008e54:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e56:	681a      	ldr	r2, [r3, #0]
 8008e58:	ea40 0301 	orr.w	r3, r0, r1
 8008e5c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008e5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e60:	681a      	ldr	r2, [r3, #0]
 8008e62:	4bc5      	ldr	r3, [pc, #788]	; (8009178 <UART_SetConfig+0x384>)
 8008e64:	429a      	cmp	r2, r3
 8008e66:	d004      	beq.n	8008e72 <UART_SetConfig+0x7e>
 8008e68:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e6a:	681a      	ldr	r2, [r3, #0]
 8008e6c:	4bc3      	ldr	r3, [pc, #780]	; (800917c <UART_SetConfig+0x388>)
 8008e6e:	429a      	cmp	r2, r3
 8008e70:	d103      	bne.n	8008e7a <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008e72:	f7fe f8eb 	bl	800704c <HAL_RCC_GetPCLK2Freq>
 8008e76:	6778      	str	r0, [r7, #116]	; 0x74
 8008e78:	e002      	b.n	8008e80 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008e7a:	f7fe f8d3 	bl	8007024 <HAL_RCC_GetPCLK1Freq>
 8008e7e:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008e80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e82:	69db      	ldr	r3, [r3, #28]
 8008e84:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008e88:	f040 80b6 	bne.w	8008ff8 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008e8c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e8e:	461c      	mov	r4, r3
 8008e90:	f04f 0500 	mov.w	r5, #0
 8008e94:	4622      	mov	r2, r4
 8008e96:	462b      	mov	r3, r5
 8008e98:	1891      	adds	r1, r2, r2
 8008e9a:	6439      	str	r1, [r7, #64]	; 0x40
 8008e9c:	415b      	adcs	r3, r3
 8008e9e:	647b      	str	r3, [r7, #68]	; 0x44
 8008ea0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008ea4:	1912      	adds	r2, r2, r4
 8008ea6:	eb45 0303 	adc.w	r3, r5, r3
 8008eaa:	f04f 0000 	mov.w	r0, #0
 8008eae:	f04f 0100 	mov.w	r1, #0
 8008eb2:	00d9      	lsls	r1, r3, #3
 8008eb4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008eb8:	00d0      	lsls	r0, r2, #3
 8008eba:	4602      	mov	r2, r0
 8008ebc:	460b      	mov	r3, r1
 8008ebe:	1911      	adds	r1, r2, r4
 8008ec0:	6639      	str	r1, [r7, #96]	; 0x60
 8008ec2:	416b      	adcs	r3, r5
 8008ec4:	667b      	str	r3, [r7, #100]	; 0x64
 8008ec6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ec8:	685b      	ldr	r3, [r3, #4]
 8008eca:	461a      	mov	r2, r3
 8008ecc:	f04f 0300 	mov.w	r3, #0
 8008ed0:	1891      	adds	r1, r2, r2
 8008ed2:	63b9      	str	r1, [r7, #56]	; 0x38
 8008ed4:	415b      	adcs	r3, r3
 8008ed6:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008ed8:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008edc:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008ee0:	f7f7 ff44 	bl	8000d6c <__aeabi_uldivmod>
 8008ee4:	4602      	mov	r2, r0
 8008ee6:	460b      	mov	r3, r1
 8008ee8:	4ba5      	ldr	r3, [pc, #660]	; (8009180 <UART_SetConfig+0x38c>)
 8008eea:	fba3 2302 	umull	r2, r3, r3, r2
 8008eee:	095b      	lsrs	r3, r3, #5
 8008ef0:	011e      	lsls	r6, r3, #4
 8008ef2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ef4:	461c      	mov	r4, r3
 8008ef6:	f04f 0500 	mov.w	r5, #0
 8008efa:	4622      	mov	r2, r4
 8008efc:	462b      	mov	r3, r5
 8008efe:	1891      	adds	r1, r2, r2
 8008f00:	6339      	str	r1, [r7, #48]	; 0x30
 8008f02:	415b      	adcs	r3, r3
 8008f04:	637b      	str	r3, [r7, #52]	; 0x34
 8008f06:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008f0a:	1912      	adds	r2, r2, r4
 8008f0c:	eb45 0303 	adc.w	r3, r5, r3
 8008f10:	f04f 0000 	mov.w	r0, #0
 8008f14:	f04f 0100 	mov.w	r1, #0
 8008f18:	00d9      	lsls	r1, r3, #3
 8008f1a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f1e:	00d0      	lsls	r0, r2, #3
 8008f20:	4602      	mov	r2, r0
 8008f22:	460b      	mov	r3, r1
 8008f24:	1911      	adds	r1, r2, r4
 8008f26:	65b9      	str	r1, [r7, #88]	; 0x58
 8008f28:	416b      	adcs	r3, r5
 8008f2a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008f2c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f2e:	685b      	ldr	r3, [r3, #4]
 8008f30:	461a      	mov	r2, r3
 8008f32:	f04f 0300 	mov.w	r3, #0
 8008f36:	1891      	adds	r1, r2, r2
 8008f38:	62b9      	str	r1, [r7, #40]	; 0x28
 8008f3a:	415b      	adcs	r3, r3
 8008f3c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008f3e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008f42:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008f46:	f7f7 ff11 	bl	8000d6c <__aeabi_uldivmod>
 8008f4a:	4602      	mov	r2, r0
 8008f4c:	460b      	mov	r3, r1
 8008f4e:	4b8c      	ldr	r3, [pc, #560]	; (8009180 <UART_SetConfig+0x38c>)
 8008f50:	fba3 1302 	umull	r1, r3, r3, r2
 8008f54:	095b      	lsrs	r3, r3, #5
 8008f56:	2164      	movs	r1, #100	; 0x64
 8008f58:	fb01 f303 	mul.w	r3, r1, r3
 8008f5c:	1ad3      	subs	r3, r2, r3
 8008f5e:	00db      	lsls	r3, r3, #3
 8008f60:	3332      	adds	r3, #50	; 0x32
 8008f62:	4a87      	ldr	r2, [pc, #540]	; (8009180 <UART_SetConfig+0x38c>)
 8008f64:	fba2 2303 	umull	r2, r3, r2, r3
 8008f68:	095b      	lsrs	r3, r3, #5
 8008f6a:	005b      	lsls	r3, r3, #1
 8008f6c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008f70:	441e      	add	r6, r3
 8008f72:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f74:	4618      	mov	r0, r3
 8008f76:	f04f 0100 	mov.w	r1, #0
 8008f7a:	4602      	mov	r2, r0
 8008f7c:	460b      	mov	r3, r1
 8008f7e:	1894      	adds	r4, r2, r2
 8008f80:	623c      	str	r4, [r7, #32]
 8008f82:	415b      	adcs	r3, r3
 8008f84:	627b      	str	r3, [r7, #36]	; 0x24
 8008f86:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008f8a:	1812      	adds	r2, r2, r0
 8008f8c:	eb41 0303 	adc.w	r3, r1, r3
 8008f90:	f04f 0400 	mov.w	r4, #0
 8008f94:	f04f 0500 	mov.w	r5, #0
 8008f98:	00dd      	lsls	r5, r3, #3
 8008f9a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008f9e:	00d4      	lsls	r4, r2, #3
 8008fa0:	4622      	mov	r2, r4
 8008fa2:	462b      	mov	r3, r5
 8008fa4:	1814      	adds	r4, r2, r0
 8008fa6:	653c      	str	r4, [r7, #80]	; 0x50
 8008fa8:	414b      	adcs	r3, r1
 8008faa:	657b      	str	r3, [r7, #84]	; 0x54
 8008fac:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fae:	685b      	ldr	r3, [r3, #4]
 8008fb0:	461a      	mov	r2, r3
 8008fb2:	f04f 0300 	mov.w	r3, #0
 8008fb6:	1891      	adds	r1, r2, r2
 8008fb8:	61b9      	str	r1, [r7, #24]
 8008fba:	415b      	adcs	r3, r3
 8008fbc:	61fb      	str	r3, [r7, #28]
 8008fbe:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008fc2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008fc6:	f7f7 fed1 	bl	8000d6c <__aeabi_uldivmod>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4b6c      	ldr	r3, [pc, #432]	; (8009180 <UART_SetConfig+0x38c>)
 8008fd0:	fba3 1302 	umull	r1, r3, r3, r2
 8008fd4:	095b      	lsrs	r3, r3, #5
 8008fd6:	2164      	movs	r1, #100	; 0x64
 8008fd8:	fb01 f303 	mul.w	r3, r1, r3
 8008fdc:	1ad3      	subs	r3, r2, r3
 8008fde:	00db      	lsls	r3, r3, #3
 8008fe0:	3332      	adds	r3, #50	; 0x32
 8008fe2:	4a67      	ldr	r2, [pc, #412]	; (8009180 <UART_SetConfig+0x38c>)
 8008fe4:	fba2 2303 	umull	r2, r3, r2, r3
 8008fe8:	095b      	lsrs	r3, r3, #5
 8008fea:	f003 0207 	and.w	r2, r3, #7
 8008fee:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ff0:	681b      	ldr	r3, [r3, #0]
 8008ff2:	4432      	add	r2, r6
 8008ff4:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008ff6:	e0b9      	b.n	800916c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008ff8:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ffa:	461c      	mov	r4, r3
 8008ffc:	f04f 0500 	mov.w	r5, #0
 8009000:	4622      	mov	r2, r4
 8009002:	462b      	mov	r3, r5
 8009004:	1891      	adds	r1, r2, r2
 8009006:	6139      	str	r1, [r7, #16]
 8009008:	415b      	adcs	r3, r3
 800900a:	617b      	str	r3, [r7, #20]
 800900c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8009010:	1912      	adds	r2, r2, r4
 8009012:	eb45 0303 	adc.w	r3, r5, r3
 8009016:	f04f 0000 	mov.w	r0, #0
 800901a:	f04f 0100 	mov.w	r1, #0
 800901e:	00d9      	lsls	r1, r3, #3
 8009020:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8009024:	00d0      	lsls	r0, r2, #3
 8009026:	4602      	mov	r2, r0
 8009028:	460b      	mov	r3, r1
 800902a:	eb12 0804 	adds.w	r8, r2, r4
 800902e:	eb43 0905 	adc.w	r9, r3, r5
 8009032:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009034:	685b      	ldr	r3, [r3, #4]
 8009036:	4618      	mov	r0, r3
 8009038:	f04f 0100 	mov.w	r1, #0
 800903c:	f04f 0200 	mov.w	r2, #0
 8009040:	f04f 0300 	mov.w	r3, #0
 8009044:	008b      	lsls	r3, r1, #2
 8009046:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800904a:	0082      	lsls	r2, r0, #2
 800904c:	4640      	mov	r0, r8
 800904e:	4649      	mov	r1, r9
 8009050:	f7f7 fe8c 	bl	8000d6c <__aeabi_uldivmod>
 8009054:	4602      	mov	r2, r0
 8009056:	460b      	mov	r3, r1
 8009058:	4b49      	ldr	r3, [pc, #292]	; (8009180 <UART_SetConfig+0x38c>)
 800905a:	fba3 2302 	umull	r2, r3, r3, r2
 800905e:	095b      	lsrs	r3, r3, #5
 8009060:	011e      	lsls	r6, r3, #4
 8009062:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009064:	4618      	mov	r0, r3
 8009066:	f04f 0100 	mov.w	r1, #0
 800906a:	4602      	mov	r2, r0
 800906c:	460b      	mov	r3, r1
 800906e:	1894      	adds	r4, r2, r2
 8009070:	60bc      	str	r4, [r7, #8]
 8009072:	415b      	adcs	r3, r3
 8009074:	60fb      	str	r3, [r7, #12]
 8009076:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800907a:	1812      	adds	r2, r2, r0
 800907c:	eb41 0303 	adc.w	r3, r1, r3
 8009080:	f04f 0400 	mov.w	r4, #0
 8009084:	f04f 0500 	mov.w	r5, #0
 8009088:	00dd      	lsls	r5, r3, #3
 800908a:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 800908e:	00d4      	lsls	r4, r2, #3
 8009090:	4622      	mov	r2, r4
 8009092:	462b      	mov	r3, r5
 8009094:	1814      	adds	r4, r2, r0
 8009096:	64bc      	str	r4, [r7, #72]	; 0x48
 8009098:	414b      	adcs	r3, r1
 800909a:	64fb      	str	r3, [r7, #76]	; 0x4c
 800909c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800909e:	685b      	ldr	r3, [r3, #4]
 80090a0:	4618      	mov	r0, r3
 80090a2:	f04f 0100 	mov.w	r1, #0
 80090a6:	f04f 0200 	mov.w	r2, #0
 80090aa:	f04f 0300 	mov.w	r3, #0
 80090ae:	008b      	lsls	r3, r1, #2
 80090b0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80090b4:	0082      	lsls	r2, r0, #2
 80090b6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80090ba:	f7f7 fe57 	bl	8000d6c <__aeabi_uldivmod>
 80090be:	4602      	mov	r2, r0
 80090c0:	460b      	mov	r3, r1
 80090c2:	4b2f      	ldr	r3, [pc, #188]	; (8009180 <UART_SetConfig+0x38c>)
 80090c4:	fba3 1302 	umull	r1, r3, r3, r2
 80090c8:	095b      	lsrs	r3, r3, #5
 80090ca:	2164      	movs	r1, #100	; 0x64
 80090cc:	fb01 f303 	mul.w	r3, r1, r3
 80090d0:	1ad3      	subs	r3, r2, r3
 80090d2:	011b      	lsls	r3, r3, #4
 80090d4:	3332      	adds	r3, #50	; 0x32
 80090d6:	4a2a      	ldr	r2, [pc, #168]	; (8009180 <UART_SetConfig+0x38c>)
 80090d8:	fba2 2303 	umull	r2, r3, r2, r3
 80090dc:	095b      	lsrs	r3, r3, #5
 80090de:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 80090e2:	441e      	add	r6, r3
 80090e4:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80090e6:	4618      	mov	r0, r3
 80090e8:	f04f 0100 	mov.w	r1, #0
 80090ec:	4602      	mov	r2, r0
 80090ee:	460b      	mov	r3, r1
 80090f0:	1894      	adds	r4, r2, r2
 80090f2:	603c      	str	r4, [r7, #0]
 80090f4:	415b      	adcs	r3, r3
 80090f6:	607b      	str	r3, [r7, #4]
 80090f8:	e9d7 2300 	ldrd	r2, r3, [r7]
 80090fc:	1812      	adds	r2, r2, r0
 80090fe:	eb41 0303 	adc.w	r3, r1, r3
 8009102:	f04f 0400 	mov.w	r4, #0
 8009106:	f04f 0500 	mov.w	r5, #0
 800910a:	00dd      	lsls	r5, r3, #3
 800910c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009110:	00d4      	lsls	r4, r2, #3
 8009112:	4622      	mov	r2, r4
 8009114:	462b      	mov	r3, r5
 8009116:	eb12 0a00 	adds.w	sl, r2, r0
 800911a:	eb43 0b01 	adc.w	fp, r3, r1
 800911e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009120:	685b      	ldr	r3, [r3, #4]
 8009122:	4618      	mov	r0, r3
 8009124:	f04f 0100 	mov.w	r1, #0
 8009128:	f04f 0200 	mov.w	r2, #0
 800912c:	f04f 0300 	mov.w	r3, #0
 8009130:	008b      	lsls	r3, r1, #2
 8009132:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009136:	0082      	lsls	r2, r0, #2
 8009138:	4650      	mov	r0, sl
 800913a:	4659      	mov	r1, fp
 800913c:	f7f7 fe16 	bl	8000d6c <__aeabi_uldivmod>
 8009140:	4602      	mov	r2, r0
 8009142:	460b      	mov	r3, r1
 8009144:	4b0e      	ldr	r3, [pc, #56]	; (8009180 <UART_SetConfig+0x38c>)
 8009146:	fba3 1302 	umull	r1, r3, r3, r2
 800914a:	095b      	lsrs	r3, r3, #5
 800914c:	2164      	movs	r1, #100	; 0x64
 800914e:	fb01 f303 	mul.w	r3, r1, r3
 8009152:	1ad3      	subs	r3, r2, r3
 8009154:	011b      	lsls	r3, r3, #4
 8009156:	3332      	adds	r3, #50	; 0x32
 8009158:	4a09      	ldr	r2, [pc, #36]	; (8009180 <UART_SetConfig+0x38c>)
 800915a:	fba2 2303 	umull	r2, r3, r2, r3
 800915e:	095b      	lsrs	r3, r3, #5
 8009160:	f003 020f 	and.w	r2, r3, #15
 8009164:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009166:	681b      	ldr	r3, [r3, #0]
 8009168:	4432      	add	r2, r6
 800916a:	609a      	str	r2, [r3, #8]
}
 800916c:	bf00      	nop
 800916e:	377c      	adds	r7, #124	; 0x7c
 8009170:	46bd      	mov	sp, r7
 8009172:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009176:	bf00      	nop
 8009178:	40011000 	.word	0x40011000
 800917c:	40011400 	.word	0x40011400
 8009180:	51eb851f 	.word	0x51eb851f

08009184 <calloc>:
 8009184:	4b02      	ldr	r3, [pc, #8]	; (8009190 <calloc+0xc>)
 8009186:	460a      	mov	r2, r1
 8009188:	4601      	mov	r1, r0
 800918a:	6818      	ldr	r0, [r3, #0]
 800918c:	f000 b842 	b.w	8009214 <_calloc_r>
 8009190:	20000028 	.word	0x20000028

08009194 <__errno>:
 8009194:	4b01      	ldr	r3, [pc, #4]	; (800919c <__errno+0x8>)
 8009196:	6818      	ldr	r0, [r3, #0]
 8009198:	4770      	bx	lr
 800919a:	bf00      	nop
 800919c:	20000028 	.word	0x20000028

080091a0 <__libc_init_array>:
 80091a0:	b570      	push	{r4, r5, r6, lr}
 80091a2:	4d0d      	ldr	r5, [pc, #52]	; (80091d8 <__libc_init_array+0x38>)
 80091a4:	4c0d      	ldr	r4, [pc, #52]	; (80091dc <__libc_init_array+0x3c>)
 80091a6:	1b64      	subs	r4, r4, r5
 80091a8:	10a4      	asrs	r4, r4, #2
 80091aa:	2600      	movs	r6, #0
 80091ac:	42a6      	cmp	r6, r4
 80091ae:	d109      	bne.n	80091c4 <__libc_init_array+0x24>
 80091b0:	4d0b      	ldr	r5, [pc, #44]	; (80091e0 <__libc_init_array+0x40>)
 80091b2:	4c0c      	ldr	r4, [pc, #48]	; (80091e4 <__libc_init_array+0x44>)
 80091b4:	f001 f86a 	bl	800a28c <_init>
 80091b8:	1b64      	subs	r4, r4, r5
 80091ba:	10a4      	asrs	r4, r4, #2
 80091bc:	2600      	movs	r6, #0
 80091be:	42a6      	cmp	r6, r4
 80091c0:	d105      	bne.n	80091ce <__libc_init_array+0x2e>
 80091c2:	bd70      	pop	{r4, r5, r6, pc}
 80091c4:	f855 3b04 	ldr.w	r3, [r5], #4
 80091c8:	4798      	blx	r3
 80091ca:	3601      	adds	r6, #1
 80091cc:	e7ee      	b.n	80091ac <__libc_init_array+0xc>
 80091ce:	f855 3b04 	ldr.w	r3, [r5], #4
 80091d2:	4798      	blx	r3
 80091d4:	3601      	adds	r6, #1
 80091d6:	e7f2      	b.n	80091be <__libc_init_array+0x1e>
 80091d8:	0800a318 	.word	0x0800a318
 80091dc:	0800a318 	.word	0x0800a318
 80091e0:	0800a318 	.word	0x0800a318
 80091e4:	0800a31c 	.word	0x0800a31c

080091e8 <memcpy>:
 80091e8:	440a      	add	r2, r1
 80091ea:	4291      	cmp	r1, r2
 80091ec:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 80091f0:	d100      	bne.n	80091f4 <memcpy+0xc>
 80091f2:	4770      	bx	lr
 80091f4:	b510      	push	{r4, lr}
 80091f6:	f811 4b01 	ldrb.w	r4, [r1], #1
 80091fa:	f803 4f01 	strb.w	r4, [r3, #1]!
 80091fe:	4291      	cmp	r1, r2
 8009200:	d1f9      	bne.n	80091f6 <memcpy+0xe>
 8009202:	bd10      	pop	{r4, pc}

08009204 <memset>:
 8009204:	4402      	add	r2, r0
 8009206:	4603      	mov	r3, r0
 8009208:	4293      	cmp	r3, r2
 800920a:	d100      	bne.n	800920e <memset+0xa>
 800920c:	4770      	bx	lr
 800920e:	f803 1b01 	strb.w	r1, [r3], #1
 8009212:	e7f9      	b.n	8009208 <memset+0x4>

08009214 <_calloc_r>:
 8009214:	b513      	push	{r0, r1, r4, lr}
 8009216:	434a      	muls	r2, r1
 8009218:	4611      	mov	r1, r2
 800921a:	9201      	str	r2, [sp, #4]
 800921c:	f000 f80a 	bl	8009234 <_malloc_r>
 8009220:	4604      	mov	r4, r0
 8009222:	b118      	cbz	r0, 800922c <_calloc_r+0x18>
 8009224:	9a01      	ldr	r2, [sp, #4]
 8009226:	2100      	movs	r1, #0
 8009228:	f7ff ffec 	bl	8009204 <memset>
 800922c:	4620      	mov	r0, r4
 800922e:	b002      	add	sp, #8
 8009230:	bd10      	pop	{r4, pc}
	...

08009234 <_malloc_r>:
 8009234:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009236:	1ccd      	adds	r5, r1, #3
 8009238:	f025 0503 	bic.w	r5, r5, #3
 800923c:	3508      	adds	r5, #8
 800923e:	2d0c      	cmp	r5, #12
 8009240:	bf38      	it	cc
 8009242:	250c      	movcc	r5, #12
 8009244:	2d00      	cmp	r5, #0
 8009246:	4606      	mov	r6, r0
 8009248:	db01      	blt.n	800924e <_malloc_r+0x1a>
 800924a:	42a9      	cmp	r1, r5
 800924c:	d903      	bls.n	8009256 <_malloc_r+0x22>
 800924e:	230c      	movs	r3, #12
 8009250:	6033      	str	r3, [r6, #0]
 8009252:	2000      	movs	r0, #0
 8009254:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009256:	f000 f857 	bl	8009308 <__malloc_lock>
 800925a:	4921      	ldr	r1, [pc, #132]	; (80092e0 <_malloc_r+0xac>)
 800925c:	680a      	ldr	r2, [r1, #0]
 800925e:	4614      	mov	r4, r2
 8009260:	b99c      	cbnz	r4, 800928a <_malloc_r+0x56>
 8009262:	4f20      	ldr	r7, [pc, #128]	; (80092e4 <_malloc_r+0xb0>)
 8009264:	683b      	ldr	r3, [r7, #0]
 8009266:	b923      	cbnz	r3, 8009272 <_malloc_r+0x3e>
 8009268:	4621      	mov	r1, r4
 800926a:	4630      	mov	r0, r6
 800926c:	f000 f83c 	bl	80092e8 <_sbrk_r>
 8009270:	6038      	str	r0, [r7, #0]
 8009272:	4629      	mov	r1, r5
 8009274:	4630      	mov	r0, r6
 8009276:	f000 f837 	bl	80092e8 <_sbrk_r>
 800927a:	1c43      	adds	r3, r0, #1
 800927c:	d123      	bne.n	80092c6 <_malloc_r+0x92>
 800927e:	230c      	movs	r3, #12
 8009280:	6033      	str	r3, [r6, #0]
 8009282:	4630      	mov	r0, r6
 8009284:	f000 f846 	bl	8009314 <__malloc_unlock>
 8009288:	e7e3      	b.n	8009252 <_malloc_r+0x1e>
 800928a:	6823      	ldr	r3, [r4, #0]
 800928c:	1b5b      	subs	r3, r3, r5
 800928e:	d417      	bmi.n	80092c0 <_malloc_r+0x8c>
 8009290:	2b0b      	cmp	r3, #11
 8009292:	d903      	bls.n	800929c <_malloc_r+0x68>
 8009294:	6023      	str	r3, [r4, #0]
 8009296:	441c      	add	r4, r3
 8009298:	6025      	str	r5, [r4, #0]
 800929a:	e004      	b.n	80092a6 <_malloc_r+0x72>
 800929c:	6863      	ldr	r3, [r4, #4]
 800929e:	42a2      	cmp	r2, r4
 80092a0:	bf0c      	ite	eq
 80092a2:	600b      	streq	r3, [r1, #0]
 80092a4:	6053      	strne	r3, [r2, #4]
 80092a6:	4630      	mov	r0, r6
 80092a8:	f000 f834 	bl	8009314 <__malloc_unlock>
 80092ac:	f104 000b 	add.w	r0, r4, #11
 80092b0:	1d23      	adds	r3, r4, #4
 80092b2:	f020 0007 	bic.w	r0, r0, #7
 80092b6:	1ac2      	subs	r2, r0, r3
 80092b8:	d0cc      	beq.n	8009254 <_malloc_r+0x20>
 80092ba:	1a1b      	subs	r3, r3, r0
 80092bc:	50a3      	str	r3, [r4, r2]
 80092be:	e7c9      	b.n	8009254 <_malloc_r+0x20>
 80092c0:	4622      	mov	r2, r4
 80092c2:	6864      	ldr	r4, [r4, #4]
 80092c4:	e7cc      	b.n	8009260 <_malloc_r+0x2c>
 80092c6:	1cc4      	adds	r4, r0, #3
 80092c8:	f024 0403 	bic.w	r4, r4, #3
 80092cc:	42a0      	cmp	r0, r4
 80092ce:	d0e3      	beq.n	8009298 <_malloc_r+0x64>
 80092d0:	1a21      	subs	r1, r4, r0
 80092d2:	4630      	mov	r0, r6
 80092d4:	f000 f808 	bl	80092e8 <_sbrk_r>
 80092d8:	3001      	adds	r0, #1
 80092da:	d1dd      	bne.n	8009298 <_malloc_r+0x64>
 80092dc:	e7cf      	b.n	800927e <_malloc_r+0x4a>
 80092de:	bf00      	nop
 80092e0:	200007d0 	.word	0x200007d0
 80092e4:	200007d4 	.word	0x200007d4

080092e8 <_sbrk_r>:
 80092e8:	b538      	push	{r3, r4, r5, lr}
 80092ea:	4d06      	ldr	r5, [pc, #24]	; (8009304 <_sbrk_r+0x1c>)
 80092ec:	2300      	movs	r3, #0
 80092ee:	4604      	mov	r4, r0
 80092f0:	4608      	mov	r0, r1
 80092f2:	602b      	str	r3, [r5, #0]
 80092f4:	f7fa faea 	bl	80038cc <_sbrk>
 80092f8:	1c43      	adds	r3, r0, #1
 80092fa:	d102      	bne.n	8009302 <_sbrk_r+0x1a>
 80092fc:	682b      	ldr	r3, [r5, #0]
 80092fe:	b103      	cbz	r3, 8009302 <_sbrk_r+0x1a>
 8009300:	6023      	str	r3, [r4, #0]
 8009302:	bd38      	pop	{r3, r4, r5, pc}
 8009304:	20000a50 	.word	0x20000a50

08009308 <__malloc_lock>:
 8009308:	4801      	ldr	r0, [pc, #4]	; (8009310 <__malloc_lock+0x8>)
 800930a:	f000 b809 	b.w	8009320 <__retarget_lock_acquire_recursive>
 800930e:	bf00      	nop
 8009310:	20000a58 	.word	0x20000a58

08009314 <__malloc_unlock>:
 8009314:	4801      	ldr	r0, [pc, #4]	; (800931c <__malloc_unlock+0x8>)
 8009316:	f000 b804 	b.w	8009322 <__retarget_lock_release_recursive>
 800931a:	bf00      	nop
 800931c:	20000a58 	.word	0x20000a58

08009320 <__retarget_lock_acquire_recursive>:
 8009320:	4770      	bx	lr

08009322 <__retarget_lock_release_recursive>:
 8009322:	4770      	bx	lr

08009324 <pow>:
 8009324:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009328:	ec59 8b10 	vmov	r8, r9, d0
 800932c:	ec57 6b11 	vmov	r6, r7, d1
 8009330:	f000 f8a6 	bl	8009480 <__ieee754_pow>
 8009334:	4b4e      	ldr	r3, [pc, #312]	; (8009470 <pow+0x14c>)
 8009336:	f993 3000 	ldrsb.w	r3, [r3]
 800933a:	3301      	adds	r3, #1
 800933c:	ec55 4b10 	vmov	r4, r5, d0
 8009340:	d015      	beq.n	800936e <pow+0x4a>
 8009342:	4632      	mov	r2, r6
 8009344:	463b      	mov	r3, r7
 8009346:	4630      	mov	r0, r6
 8009348:	4639      	mov	r1, r7
 800934a:	f7f7 fb9b 	bl	8000a84 <__aeabi_dcmpun>
 800934e:	b970      	cbnz	r0, 800936e <pow+0x4a>
 8009350:	4642      	mov	r2, r8
 8009352:	464b      	mov	r3, r9
 8009354:	4640      	mov	r0, r8
 8009356:	4649      	mov	r1, r9
 8009358:	f7f7 fb94 	bl	8000a84 <__aeabi_dcmpun>
 800935c:	2200      	movs	r2, #0
 800935e:	2300      	movs	r3, #0
 8009360:	b148      	cbz	r0, 8009376 <pow+0x52>
 8009362:	4630      	mov	r0, r6
 8009364:	4639      	mov	r1, r7
 8009366:	f7f7 fb5b 	bl	8000a20 <__aeabi_dcmpeq>
 800936a:	2800      	cmp	r0, #0
 800936c:	d17d      	bne.n	800946a <pow+0x146>
 800936e:	ec45 4b10 	vmov	d0, r4, r5
 8009372:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8009376:	4640      	mov	r0, r8
 8009378:	4649      	mov	r1, r9
 800937a:	f7f7 fb51 	bl	8000a20 <__aeabi_dcmpeq>
 800937e:	b1e0      	cbz	r0, 80093ba <pow+0x96>
 8009380:	2200      	movs	r2, #0
 8009382:	2300      	movs	r3, #0
 8009384:	4630      	mov	r0, r6
 8009386:	4639      	mov	r1, r7
 8009388:	f7f7 fb4a 	bl	8000a20 <__aeabi_dcmpeq>
 800938c:	2800      	cmp	r0, #0
 800938e:	d16c      	bne.n	800946a <pow+0x146>
 8009390:	ec47 6b10 	vmov	d0, r6, r7
 8009394:	f000 fe53 	bl	800a03e <finite>
 8009398:	2800      	cmp	r0, #0
 800939a:	d0e8      	beq.n	800936e <pow+0x4a>
 800939c:	2200      	movs	r2, #0
 800939e:	2300      	movs	r3, #0
 80093a0:	4630      	mov	r0, r6
 80093a2:	4639      	mov	r1, r7
 80093a4:	f7f7 fb46 	bl	8000a34 <__aeabi_dcmplt>
 80093a8:	2800      	cmp	r0, #0
 80093aa:	d0e0      	beq.n	800936e <pow+0x4a>
 80093ac:	f7ff fef2 	bl	8009194 <__errno>
 80093b0:	2321      	movs	r3, #33	; 0x21
 80093b2:	6003      	str	r3, [r0, #0]
 80093b4:	2400      	movs	r4, #0
 80093b6:	4d2f      	ldr	r5, [pc, #188]	; (8009474 <pow+0x150>)
 80093b8:	e7d9      	b.n	800936e <pow+0x4a>
 80093ba:	ec45 4b10 	vmov	d0, r4, r5
 80093be:	f000 fe3e 	bl	800a03e <finite>
 80093c2:	bbb8      	cbnz	r0, 8009434 <pow+0x110>
 80093c4:	ec49 8b10 	vmov	d0, r8, r9
 80093c8:	f000 fe39 	bl	800a03e <finite>
 80093cc:	b390      	cbz	r0, 8009434 <pow+0x110>
 80093ce:	ec47 6b10 	vmov	d0, r6, r7
 80093d2:	f000 fe34 	bl	800a03e <finite>
 80093d6:	b368      	cbz	r0, 8009434 <pow+0x110>
 80093d8:	4622      	mov	r2, r4
 80093da:	462b      	mov	r3, r5
 80093dc:	4620      	mov	r0, r4
 80093de:	4629      	mov	r1, r5
 80093e0:	f7f7 fb50 	bl	8000a84 <__aeabi_dcmpun>
 80093e4:	b160      	cbz	r0, 8009400 <pow+0xdc>
 80093e6:	f7ff fed5 	bl	8009194 <__errno>
 80093ea:	2321      	movs	r3, #33	; 0x21
 80093ec:	6003      	str	r3, [r0, #0]
 80093ee:	2200      	movs	r2, #0
 80093f0:	2300      	movs	r3, #0
 80093f2:	4610      	mov	r0, r2
 80093f4:	4619      	mov	r1, r3
 80093f6:	f7f7 f9d5 	bl	80007a4 <__aeabi_ddiv>
 80093fa:	4604      	mov	r4, r0
 80093fc:	460d      	mov	r5, r1
 80093fe:	e7b6      	b.n	800936e <pow+0x4a>
 8009400:	f7ff fec8 	bl	8009194 <__errno>
 8009404:	2322      	movs	r3, #34	; 0x22
 8009406:	6003      	str	r3, [r0, #0]
 8009408:	2200      	movs	r2, #0
 800940a:	2300      	movs	r3, #0
 800940c:	4640      	mov	r0, r8
 800940e:	4649      	mov	r1, r9
 8009410:	f7f7 fb10 	bl	8000a34 <__aeabi_dcmplt>
 8009414:	2400      	movs	r4, #0
 8009416:	b158      	cbz	r0, 8009430 <pow+0x10c>
 8009418:	ec47 6b10 	vmov	d0, r6, r7
 800941c:	f000 fe24 	bl	800a068 <rint>
 8009420:	4632      	mov	r2, r6
 8009422:	ec51 0b10 	vmov	r0, r1, d0
 8009426:	463b      	mov	r3, r7
 8009428:	f7f7 fafa 	bl	8000a20 <__aeabi_dcmpeq>
 800942c:	2800      	cmp	r0, #0
 800942e:	d0c2      	beq.n	80093b6 <pow+0x92>
 8009430:	4d11      	ldr	r5, [pc, #68]	; (8009478 <pow+0x154>)
 8009432:	e79c      	b.n	800936e <pow+0x4a>
 8009434:	2200      	movs	r2, #0
 8009436:	2300      	movs	r3, #0
 8009438:	4620      	mov	r0, r4
 800943a:	4629      	mov	r1, r5
 800943c:	f7f7 faf0 	bl	8000a20 <__aeabi_dcmpeq>
 8009440:	2800      	cmp	r0, #0
 8009442:	d094      	beq.n	800936e <pow+0x4a>
 8009444:	ec49 8b10 	vmov	d0, r8, r9
 8009448:	f000 fdf9 	bl	800a03e <finite>
 800944c:	2800      	cmp	r0, #0
 800944e:	d08e      	beq.n	800936e <pow+0x4a>
 8009450:	ec47 6b10 	vmov	d0, r6, r7
 8009454:	f000 fdf3 	bl	800a03e <finite>
 8009458:	2800      	cmp	r0, #0
 800945a:	d088      	beq.n	800936e <pow+0x4a>
 800945c:	f7ff fe9a 	bl	8009194 <__errno>
 8009460:	2322      	movs	r3, #34	; 0x22
 8009462:	6003      	str	r3, [r0, #0]
 8009464:	2400      	movs	r4, #0
 8009466:	2500      	movs	r5, #0
 8009468:	e781      	b.n	800936e <pow+0x4a>
 800946a:	4d04      	ldr	r5, [pc, #16]	; (800947c <pow+0x158>)
 800946c:	2400      	movs	r4, #0
 800946e:	e77e      	b.n	800936e <pow+0x4a>
 8009470:	2000008c 	.word	0x2000008c
 8009474:	fff00000 	.word	0xfff00000
 8009478:	7ff00000 	.word	0x7ff00000
 800947c:	3ff00000 	.word	0x3ff00000

08009480 <__ieee754_pow>:
 8009480:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009484:	ed2d 8b06 	vpush	{d8-d10}
 8009488:	b08d      	sub	sp, #52	; 0x34
 800948a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800948e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8009492:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8009496:	ea56 0100 	orrs.w	r1, r6, r0
 800949a:	ec53 2b10 	vmov	r2, r3, d0
 800949e:	f000 84d1 	beq.w	8009e44 <__ieee754_pow+0x9c4>
 80094a2:	497f      	ldr	r1, [pc, #508]	; (80096a0 <__ieee754_pow+0x220>)
 80094a4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80094a8:	428c      	cmp	r4, r1
 80094aa:	ee10 8a10 	vmov	r8, s0
 80094ae:	4699      	mov	r9, r3
 80094b0:	dc09      	bgt.n	80094c6 <__ieee754_pow+0x46>
 80094b2:	d103      	bne.n	80094bc <__ieee754_pow+0x3c>
 80094b4:	b97a      	cbnz	r2, 80094d6 <__ieee754_pow+0x56>
 80094b6:	42a6      	cmp	r6, r4
 80094b8:	dd02      	ble.n	80094c0 <__ieee754_pow+0x40>
 80094ba:	e00c      	b.n	80094d6 <__ieee754_pow+0x56>
 80094bc:	428e      	cmp	r6, r1
 80094be:	dc02      	bgt.n	80094c6 <__ieee754_pow+0x46>
 80094c0:	428e      	cmp	r6, r1
 80094c2:	d110      	bne.n	80094e6 <__ieee754_pow+0x66>
 80094c4:	b178      	cbz	r0, 80094e6 <__ieee754_pow+0x66>
 80094c6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80094ca:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80094ce:	ea54 0308 	orrs.w	r3, r4, r8
 80094d2:	f000 84b7 	beq.w	8009e44 <__ieee754_pow+0x9c4>
 80094d6:	4873      	ldr	r0, [pc, #460]	; (80096a4 <__ieee754_pow+0x224>)
 80094d8:	b00d      	add	sp, #52	; 0x34
 80094da:	ecbd 8b06 	vpop	{d8-d10}
 80094de:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80094e2:	f000 bdb9 	b.w	800a058 <nan>
 80094e6:	f1b9 0f00 	cmp.w	r9, #0
 80094ea:	da36      	bge.n	800955a <__ieee754_pow+0xda>
 80094ec:	496e      	ldr	r1, [pc, #440]	; (80096a8 <__ieee754_pow+0x228>)
 80094ee:	428e      	cmp	r6, r1
 80094f0:	dc51      	bgt.n	8009596 <__ieee754_pow+0x116>
 80094f2:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80094f6:	428e      	cmp	r6, r1
 80094f8:	f340 84af 	ble.w	8009e5a <__ieee754_pow+0x9da>
 80094fc:	1531      	asrs	r1, r6, #20
 80094fe:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009502:	2914      	cmp	r1, #20
 8009504:	dd0f      	ble.n	8009526 <__ieee754_pow+0xa6>
 8009506:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800950a:	fa20 fc01 	lsr.w	ip, r0, r1
 800950e:	fa0c f101 	lsl.w	r1, ip, r1
 8009512:	4281      	cmp	r1, r0
 8009514:	f040 84a1 	bne.w	8009e5a <__ieee754_pow+0x9da>
 8009518:	f00c 0c01 	and.w	ip, ip, #1
 800951c:	f1cc 0102 	rsb	r1, ip, #2
 8009520:	9100      	str	r1, [sp, #0]
 8009522:	b180      	cbz	r0, 8009546 <__ieee754_pow+0xc6>
 8009524:	e059      	b.n	80095da <__ieee754_pow+0x15a>
 8009526:	2800      	cmp	r0, #0
 8009528:	d155      	bne.n	80095d6 <__ieee754_pow+0x156>
 800952a:	f1c1 0114 	rsb	r1, r1, #20
 800952e:	fa46 fc01 	asr.w	ip, r6, r1
 8009532:	fa0c f101 	lsl.w	r1, ip, r1
 8009536:	42b1      	cmp	r1, r6
 8009538:	f040 848c 	bne.w	8009e54 <__ieee754_pow+0x9d4>
 800953c:	f00c 0c01 	and.w	ip, ip, #1
 8009540:	f1cc 0102 	rsb	r1, ip, #2
 8009544:	9100      	str	r1, [sp, #0]
 8009546:	4959      	ldr	r1, [pc, #356]	; (80096ac <__ieee754_pow+0x22c>)
 8009548:	428e      	cmp	r6, r1
 800954a:	d12d      	bne.n	80095a8 <__ieee754_pow+0x128>
 800954c:	2f00      	cmp	r7, #0
 800954e:	da79      	bge.n	8009644 <__ieee754_pow+0x1c4>
 8009550:	4956      	ldr	r1, [pc, #344]	; (80096ac <__ieee754_pow+0x22c>)
 8009552:	2000      	movs	r0, #0
 8009554:	f7f7 f926 	bl	80007a4 <__aeabi_ddiv>
 8009558:	e016      	b.n	8009588 <__ieee754_pow+0x108>
 800955a:	2100      	movs	r1, #0
 800955c:	9100      	str	r1, [sp, #0]
 800955e:	2800      	cmp	r0, #0
 8009560:	d13b      	bne.n	80095da <__ieee754_pow+0x15a>
 8009562:	494f      	ldr	r1, [pc, #316]	; (80096a0 <__ieee754_pow+0x220>)
 8009564:	428e      	cmp	r6, r1
 8009566:	d1ee      	bne.n	8009546 <__ieee754_pow+0xc6>
 8009568:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800956c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8009570:	ea53 0308 	orrs.w	r3, r3, r8
 8009574:	f000 8466 	beq.w	8009e44 <__ieee754_pow+0x9c4>
 8009578:	4b4d      	ldr	r3, [pc, #308]	; (80096b0 <__ieee754_pow+0x230>)
 800957a:	429c      	cmp	r4, r3
 800957c:	dd0d      	ble.n	800959a <__ieee754_pow+0x11a>
 800957e:	2f00      	cmp	r7, #0
 8009580:	f280 8464 	bge.w	8009e4c <__ieee754_pow+0x9cc>
 8009584:	2000      	movs	r0, #0
 8009586:	2100      	movs	r1, #0
 8009588:	ec41 0b10 	vmov	d0, r0, r1
 800958c:	b00d      	add	sp, #52	; 0x34
 800958e:	ecbd 8b06 	vpop	{d8-d10}
 8009592:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8009596:	2102      	movs	r1, #2
 8009598:	e7e0      	b.n	800955c <__ieee754_pow+0xdc>
 800959a:	2f00      	cmp	r7, #0
 800959c:	daf2      	bge.n	8009584 <__ieee754_pow+0x104>
 800959e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80095a2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80095a6:	e7ef      	b.n	8009588 <__ieee754_pow+0x108>
 80095a8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80095ac:	d104      	bne.n	80095b8 <__ieee754_pow+0x138>
 80095ae:	4610      	mov	r0, r2
 80095b0:	4619      	mov	r1, r3
 80095b2:	f7f6 ffcd 	bl	8000550 <__aeabi_dmul>
 80095b6:	e7e7      	b.n	8009588 <__ieee754_pow+0x108>
 80095b8:	493e      	ldr	r1, [pc, #248]	; (80096b4 <__ieee754_pow+0x234>)
 80095ba:	428f      	cmp	r7, r1
 80095bc:	d10d      	bne.n	80095da <__ieee754_pow+0x15a>
 80095be:	f1b9 0f00 	cmp.w	r9, #0
 80095c2:	db0a      	blt.n	80095da <__ieee754_pow+0x15a>
 80095c4:	ec43 2b10 	vmov	d0, r2, r3
 80095c8:	b00d      	add	sp, #52	; 0x34
 80095ca:	ecbd 8b06 	vpop	{d8-d10}
 80095ce:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80095d2:	f000 bc77 	b.w	8009ec4 <__ieee754_sqrt>
 80095d6:	2100      	movs	r1, #0
 80095d8:	9100      	str	r1, [sp, #0]
 80095da:	ec43 2b10 	vmov	d0, r2, r3
 80095de:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80095e2:	f000 fd23 	bl	800a02c <fabs>
 80095e6:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 80095ea:	ec51 0b10 	vmov	r0, r1, d0
 80095ee:	f1b8 0f00 	cmp.w	r8, #0
 80095f2:	d12a      	bne.n	800964a <__ieee754_pow+0x1ca>
 80095f4:	b12c      	cbz	r4, 8009602 <__ieee754_pow+0x182>
 80095f6:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80096ac <__ieee754_pow+0x22c>
 80095fa:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 80095fe:	45e6      	cmp	lr, ip
 8009600:	d123      	bne.n	800964a <__ieee754_pow+0x1ca>
 8009602:	2f00      	cmp	r7, #0
 8009604:	da05      	bge.n	8009612 <__ieee754_pow+0x192>
 8009606:	4602      	mov	r2, r0
 8009608:	460b      	mov	r3, r1
 800960a:	2000      	movs	r0, #0
 800960c:	4927      	ldr	r1, [pc, #156]	; (80096ac <__ieee754_pow+0x22c>)
 800960e:	f7f7 f8c9 	bl	80007a4 <__aeabi_ddiv>
 8009612:	f1b9 0f00 	cmp.w	r9, #0
 8009616:	dab7      	bge.n	8009588 <__ieee754_pow+0x108>
 8009618:	9b00      	ldr	r3, [sp, #0]
 800961a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800961e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009622:	4323      	orrs	r3, r4
 8009624:	d108      	bne.n	8009638 <__ieee754_pow+0x1b8>
 8009626:	4602      	mov	r2, r0
 8009628:	460b      	mov	r3, r1
 800962a:	4610      	mov	r0, r2
 800962c:	4619      	mov	r1, r3
 800962e:	f7f6 fdd7 	bl	80001e0 <__aeabi_dsub>
 8009632:	4602      	mov	r2, r0
 8009634:	460b      	mov	r3, r1
 8009636:	e78d      	b.n	8009554 <__ieee754_pow+0xd4>
 8009638:	9b00      	ldr	r3, [sp, #0]
 800963a:	2b01      	cmp	r3, #1
 800963c:	d1a4      	bne.n	8009588 <__ieee754_pow+0x108>
 800963e:	4602      	mov	r2, r0
 8009640:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009644:	4610      	mov	r0, r2
 8009646:	4619      	mov	r1, r3
 8009648:	e79e      	b.n	8009588 <__ieee754_pow+0x108>
 800964a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800964e:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8009652:	950a      	str	r5, [sp, #40]	; 0x28
 8009654:	9d00      	ldr	r5, [sp, #0]
 8009656:	46ac      	mov	ip, r5
 8009658:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800965a:	ea5c 0505 	orrs.w	r5, ip, r5
 800965e:	d0e4      	beq.n	800962a <__ieee754_pow+0x1aa>
 8009660:	4b15      	ldr	r3, [pc, #84]	; (80096b8 <__ieee754_pow+0x238>)
 8009662:	429e      	cmp	r6, r3
 8009664:	f340 80fc 	ble.w	8009860 <__ieee754_pow+0x3e0>
 8009668:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800966c:	429e      	cmp	r6, r3
 800966e:	4b10      	ldr	r3, [pc, #64]	; (80096b0 <__ieee754_pow+0x230>)
 8009670:	dd07      	ble.n	8009682 <__ieee754_pow+0x202>
 8009672:	429c      	cmp	r4, r3
 8009674:	dc0a      	bgt.n	800968c <__ieee754_pow+0x20c>
 8009676:	2f00      	cmp	r7, #0
 8009678:	da84      	bge.n	8009584 <__ieee754_pow+0x104>
 800967a:	a307      	add	r3, pc, #28	; (adr r3, 8009698 <__ieee754_pow+0x218>)
 800967c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009680:	e795      	b.n	80095ae <__ieee754_pow+0x12e>
 8009682:	429c      	cmp	r4, r3
 8009684:	dbf7      	blt.n	8009676 <__ieee754_pow+0x1f6>
 8009686:	4b09      	ldr	r3, [pc, #36]	; (80096ac <__ieee754_pow+0x22c>)
 8009688:	429c      	cmp	r4, r3
 800968a:	dd17      	ble.n	80096bc <__ieee754_pow+0x23c>
 800968c:	2f00      	cmp	r7, #0
 800968e:	dcf4      	bgt.n	800967a <__ieee754_pow+0x1fa>
 8009690:	e778      	b.n	8009584 <__ieee754_pow+0x104>
 8009692:	bf00      	nop
 8009694:	f3af 8000 	nop.w
 8009698:	8800759c 	.word	0x8800759c
 800969c:	7e37e43c 	.word	0x7e37e43c
 80096a0:	7ff00000 	.word	0x7ff00000
 80096a4:	0800a2c8 	.word	0x0800a2c8
 80096a8:	433fffff 	.word	0x433fffff
 80096ac:	3ff00000 	.word	0x3ff00000
 80096b0:	3fefffff 	.word	0x3fefffff
 80096b4:	3fe00000 	.word	0x3fe00000
 80096b8:	41e00000 	.word	0x41e00000
 80096bc:	4b64      	ldr	r3, [pc, #400]	; (8009850 <__ieee754_pow+0x3d0>)
 80096be:	2200      	movs	r2, #0
 80096c0:	f7f6 fd8e 	bl	80001e0 <__aeabi_dsub>
 80096c4:	a356      	add	r3, pc, #344	; (adr r3, 8009820 <__ieee754_pow+0x3a0>)
 80096c6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096ca:	4604      	mov	r4, r0
 80096cc:	460d      	mov	r5, r1
 80096ce:	f7f6 ff3f 	bl	8000550 <__aeabi_dmul>
 80096d2:	a355      	add	r3, pc, #340	; (adr r3, 8009828 <__ieee754_pow+0x3a8>)
 80096d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096d8:	4606      	mov	r6, r0
 80096da:	460f      	mov	r7, r1
 80096dc:	4620      	mov	r0, r4
 80096de:	4629      	mov	r1, r5
 80096e0:	f7f6 ff36 	bl	8000550 <__aeabi_dmul>
 80096e4:	4b5b      	ldr	r3, [pc, #364]	; (8009854 <__ieee754_pow+0x3d4>)
 80096e6:	4682      	mov	sl, r0
 80096e8:	468b      	mov	fp, r1
 80096ea:	2200      	movs	r2, #0
 80096ec:	4620      	mov	r0, r4
 80096ee:	4629      	mov	r1, r5
 80096f0:	f7f6 ff2e 	bl	8000550 <__aeabi_dmul>
 80096f4:	4602      	mov	r2, r0
 80096f6:	460b      	mov	r3, r1
 80096f8:	a14d      	add	r1, pc, #308	; (adr r1, 8009830 <__ieee754_pow+0x3b0>)
 80096fa:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fe:	f7f6 fd6f 	bl	80001e0 <__aeabi_dsub>
 8009702:	4622      	mov	r2, r4
 8009704:	462b      	mov	r3, r5
 8009706:	f7f6 ff23 	bl	8000550 <__aeabi_dmul>
 800970a:	4602      	mov	r2, r0
 800970c:	460b      	mov	r3, r1
 800970e:	2000      	movs	r0, #0
 8009710:	4951      	ldr	r1, [pc, #324]	; (8009858 <__ieee754_pow+0x3d8>)
 8009712:	f7f6 fd65 	bl	80001e0 <__aeabi_dsub>
 8009716:	4622      	mov	r2, r4
 8009718:	4680      	mov	r8, r0
 800971a:	4689      	mov	r9, r1
 800971c:	462b      	mov	r3, r5
 800971e:	4620      	mov	r0, r4
 8009720:	4629      	mov	r1, r5
 8009722:	f7f6 ff15 	bl	8000550 <__aeabi_dmul>
 8009726:	4602      	mov	r2, r0
 8009728:	460b      	mov	r3, r1
 800972a:	4640      	mov	r0, r8
 800972c:	4649      	mov	r1, r9
 800972e:	f7f6 ff0f 	bl	8000550 <__aeabi_dmul>
 8009732:	a341      	add	r3, pc, #260	; (adr r3, 8009838 <__ieee754_pow+0x3b8>)
 8009734:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009738:	f7f6 ff0a 	bl	8000550 <__aeabi_dmul>
 800973c:	4602      	mov	r2, r0
 800973e:	460b      	mov	r3, r1
 8009740:	4650      	mov	r0, sl
 8009742:	4659      	mov	r1, fp
 8009744:	f7f6 fd4c 	bl	80001e0 <__aeabi_dsub>
 8009748:	4602      	mov	r2, r0
 800974a:	460b      	mov	r3, r1
 800974c:	4680      	mov	r8, r0
 800974e:	4689      	mov	r9, r1
 8009750:	4630      	mov	r0, r6
 8009752:	4639      	mov	r1, r7
 8009754:	f7f6 fd46 	bl	80001e4 <__adddf3>
 8009758:	2400      	movs	r4, #0
 800975a:	4632      	mov	r2, r6
 800975c:	463b      	mov	r3, r7
 800975e:	4620      	mov	r0, r4
 8009760:	460d      	mov	r5, r1
 8009762:	f7f6 fd3d 	bl	80001e0 <__aeabi_dsub>
 8009766:	4602      	mov	r2, r0
 8009768:	460b      	mov	r3, r1
 800976a:	4640      	mov	r0, r8
 800976c:	4649      	mov	r1, r9
 800976e:	f7f6 fd37 	bl	80001e0 <__aeabi_dsub>
 8009772:	9b00      	ldr	r3, [sp, #0]
 8009774:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8009776:	3b01      	subs	r3, #1
 8009778:	4313      	orrs	r3, r2
 800977a:	4682      	mov	sl, r0
 800977c:	468b      	mov	fp, r1
 800977e:	f040 81f1 	bne.w	8009b64 <__ieee754_pow+0x6e4>
 8009782:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009840 <__ieee754_pow+0x3c0>
 8009786:	eeb0 8a47 	vmov.f32	s16, s14
 800978a:	eef0 8a67 	vmov.f32	s17, s15
 800978e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8009792:	2600      	movs	r6, #0
 8009794:	4632      	mov	r2, r6
 8009796:	463b      	mov	r3, r7
 8009798:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800979c:	f7f6 fd20 	bl	80001e0 <__aeabi_dsub>
 80097a0:	4622      	mov	r2, r4
 80097a2:	462b      	mov	r3, r5
 80097a4:	f7f6 fed4 	bl	8000550 <__aeabi_dmul>
 80097a8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80097ac:	4680      	mov	r8, r0
 80097ae:	4689      	mov	r9, r1
 80097b0:	4650      	mov	r0, sl
 80097b2:	4659      	mov	r1, fp
 80097b4:	f7f6 fecc 	bl	8000550 <__aeabi_dmul>
 80097b8:	4602      	mov	r2, r0
 80097ba:	460b      	mov	r3, r1
 80097bc:	4640      	mov	r0, r8
 80097be:	4649      	mov	r1, r9
 80097c0:	f7f6 fd10 	bl	80001e4 <__adddf3>
 80097c4:	4632      	mov	r2, r6
 80097c6:	463b      	mov	r3, r7
 80097c8:	4680      	mov	r8, r0
 80097ca:	4689      	mov	r9, r1
 80097cc:	4620      	mov	r0, r4
 80097ce:	4629      	mov	r1, r5
 80097d0:	f7f6 febe 	bl	8000550 <__aeabi_dmul>
 80097d4:	460b      	mov	r3, r1
 80097d6:	4604      	mov	r4, r0
 80097d8:	460d      	mov	r5, r1
 80097da:	4602      	mov	r2, r0
 80097dc:	4649      	mov	r1, r9
 80097de:	4640      	mov	r0, r8
 80097e0:	f7f6 fd00 	bl	80001e4 <__adddf3>
 80097e4:	4b1d      	ldr	r3, [pc, #116]	; (800985c <__ieee754_pow+0x3dc>)
 80097e6:	4299      	cmp	r1, r3
 80097e8:	ec45 4b19 	vmov	d9, r4, r5
 80097ec:	4606      	mov	r6, r0
 80097ee:	460f      	mov	r7, r1
 80097f0:	468b      	mov	fp, r1
 80097f2:	f340 82fe 	ble.w	8009df2 <__ieee754_pow+0x972>
 80097f6:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 80097fa:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 80097fe:	4303      	orrs	r3, r0
 8009800:	f000 81f0 	beq.w	8009be4 <__ieee754_pow+0x764>
 8009804:	a310      	add	r3, pc, #64	; (adr r3, 8009848 <__ieee754_pow+0x3c8>)
 8009806:	e9d3 2300 	ldrd	r2, r3, [r3]
 800980a:	ec51 0b18 	vmov	r0, r1, d8
 800980e:	f7f6 fe9f 	bl	8000550 <__aeabi_dmul>
 8009812:	a30d      	add	r3, pc, #52	; (adr r3, 8009848 <__ieee754_pow+0x3c8>)
 8009814:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009818:	e6cb      	b.n	80095b2 <__ieee754_pow+0x132>
 800981a:	bf00      	nop
 800981c:	f3af 8000 	nop.w
 8009820:	60000000 	.word	0x60000000
 8009824:	3ff71547 	.word	0x3ff71547
 8009828:	f85ddf44 	.word	0xf85ddf44
 800982c:	3e54ae0b 	.word	0x3e54ae0b
 8009830:	55555555 	.word	0x55555555
 8009834:	3fd55555 	.word	0x3fd55555
 8009838:	652b82fe 	.word	0x652b82fe
 800983c:	3ff71547 	.word	0x3ff71547
 8009840:	00000000 	.word	0x00000000
 8009844:	bff00000 	.word	0xbff00000
 8009848:	8800759c 	.word	0x8800759c
 800984c:	7e37e43c 	.word	0x7e37e43c
 8009850:	3ff00000 	.word	0x3ff00000
 8009854:	3fd00000 	.word	0x3fd00000
 8009858:	3fe00000 	.word	0x3fe00000
 800985c:	408fffff 	.word	0x408fffff
 8009860:	4bd7      	ldr	r3, [pc, #860]	; (8009bc0 <__ieee754_pow+0x740>)
 8009862:	ea03 0309 	and.w	r3, r3, r9
 8009866:	2200      	movs	r2, #0
 8009868:	b92b      	cbnz	r3, 8009876 <__ieee754_pow+0x3f6>
 800986a:	4bd6      	ldr	r3, [pc, #856]	; (8009bc4 <__ieee754_pow+0x744>)
 800986c:	f7f6 fe70 	bl	8000550 <__aeabi_dmul>
 8009870:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8009874:	460c      	mov	r4, r1
 8009876:	1523      	asrs	r3, r4, #20
 8009878:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800987c:	4413      	add	r3, r2
 800987e:	9309      	str	r3, [sp, #36]	; 0x24
 8009880:	4bd1      	ldr	r3, [pc, #836]	; (8009bc8 <__ieee754_pow+0x748>)
 8009882:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8009886:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800988a:	429c      	cmp	r4, r3
 800988c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8009890:	dd08      	ble.n	80098a4 <__ieee754_pow+0x424>
 8009892:	4bce      	ldr	r3, [pc, #824]	; (8009bcc <__ieee754_pow+0x74c>)
 8009894:	429c      	cmp	r4, r3
 8009896:	f340 8163 	ble.w	8009b60 <__ieee754_pow+0x6e0>
 800989a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800989c:	3301      	adds	r3, #1
 800989e:	9309      	str	r3, [sp, #36]	; 0x24
 80098a0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80098a4:	2400      	movs	r4, #0
 80098a6:	00e3      	lsls	r3, r4, #3
 80098a8:	930b      	str	r3, [sp, #44]	; 0x2c
 80098aa:	4bc9      	ldr	r3, [pc, #804]	; (8009bd0 <__ieee754_pow+0x750>)
 80098ac:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80098b0:	ed93 7b00 	vldr	d7, [r3]
 80098b4:	4629      	mov	r1, r5
 80098b6:	ec53 2b17 	vmov	r2, r3, d7
 80098ba:	eeb0 8a47 	vmov.f32	s16, s14
 80098be:	eef0 8a67 	vmov.f32	s17, s15
 80098c2:	4682      	mov	sl, r0
 80098c4:	f7f6 fc8c 	bl	80001e0 <__aeabi_dsub>
 80098c8:	4652      	mov	r2, sl
 80098ca:	4606      	mov	r6, r0
 80098cc:	460f      	mov	r7, r1
 80098ce:	462b      	mov	r3, r5
 80098d0:	ec51 0b18 	vmov	r0, r1, d8
 80098d4:	f7f6 fc86 	bl	80001e4 <__adddf3>
 80098d8:	4602      	mov	r2, r0
 80098da:	460b      	mov	r3, r1
 80098dc:	2000      	movs	r0, #0
 80098de:	49bd      	ldr	r1, [pc, #756]	; (8009bd4 <__ieee754_pow+0x754>)
 80098e0:	f7f6 ff60 	bl	80007a4 <__aeabi_ddiv>
 80098e4:	ec41 0b19 	vmov	d9, r0, r1
 80098e8:	4602      	mov	r2, r0
 80098ea:	460b      	mov	r3, r1
 80098ec:	4630      	mov	r0, r6
 80098ee:	4639      	mov	r1, r7
 80098f0:	f7f6 fe2e 	bl	8000550 <__aeabi_dmul>
 80098f4:	e9cd 0106 	strd	r0, r1, [sp, #24]
 80098f8:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80098fc:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009900:	2300      	movs	r3, #0
 8009902:	9304      	str	r3, [sp, #16]
 8009904:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009908:	46ab      	mov	fp, r5
 800990a:	106d      	asrs	r5, r5, #1
 800990c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009910:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009914:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009918:	2200      	movs	r2, #0
 800991a:	4640      	mov	r0, r8
 800991c:	4649      	mov	r1, r9
 800991e:	4614      	mov	r4, r2
 8009920:	461d      	mov	r5, r3
 8009922:	f7f6 fe15 	bl	8000550 <__aeabi_dmul>
 8009926:	4602      	mov	r2, r0
 8009928:	460b      	mov	r3, r1
 800992a:	4630      	mov	r0, r6
 800992c:	4639      	mov	r1, r7
 800992e:	f7f6 fc57 	bl	80001e0 <__aeabi_dsub>
 8009932:	ec53 2b18 	vmov	r2, r3, d8
 8009936:	4606      	mov	r6, r0
 8009938:	460f      	mov	r7, r1
 800993a:	4620      	mov	r0, r4
 800993c:	4629      	mov	r1, r5
 800993e:	f7f6 fc4f 	bl	80001e0 <__aeabi_dsub>
 8009942:	4602      	mov	r2, r0
 8009944:	460b      	mov	r3, r1
 8009946:	4650      	mov	r0, sl
 8009948:	4659      	mov	r1, fp
 800994a:	f7f6 fc49 	bl	80001e0 <__aeabi_dsub>
 800994e:	4642      	mov	r2, r8
 8009950:	464b      	mov	r3, r9
 8009952:	f7f6 fdfd 	bl	8000550 <__aeabi_dmul>
 8009956:	4602      	mov	r2, r0
 8009958:	460b      	mov	r3, r1
 800995a:	4630      	mov	r0, r6
 800995c:	4639      	mov	r1, r7
 800995e:	f7f6 fc3f 	bl	80001e0 <__aeabi_dsub>
 8009962:	ec53 2b19 	vmov	r2, r3, d9
 8009966:	f7f6 fdf3 	bl	8000550 <__aeabi_dmul>
 800996a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800996e:	ec41 0b18 	vmov	d8, r0, r1
 8009972:	4610      	mov	r0, r2
 8009974:	4619      	mov	r1, r3
 8009976:	f7f6 fdeb 	bl	8000550 <__aeabi_dmul>
 800997a:	a37d      	add	r3, pc, #500	; (adr r3, 8009b70 <__ieee754_pow+0x6f0>)
 800997c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009980:	4604      	mov	r4, r0
 8009982:	460d      	mov	r5, r1
 8009984:	f7f6 fde4 	bl	8000550 <__aeabi_dmul>
 8009988:	a37b      	add	r3, pc, #492	; (adr r3, 8009b78 <__ieee754_pow+0x6f8>)
 800998a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800998e:	f7f6 fc29 	bl	80001e4 <__adddf3>
 8009992:	4622      	mov	r2, r4
 8009994:	462b      	mov	r3, r5
 8009996:	f7f6 fddb 	bl	8000550 <__aeabi_dmul>
 800999a:	a379      	add	r3, pc, #484	; (adr r3, 8009b80 <__ieee754_pow+0x700>)
 800999c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099a0:	f7f6 fc20 	bl	80001e4 <__adddf3>
 80099a4:	4622      	mov	r2, r4
 80099a6:	462b      	mov	r3, r5
 80099a8:	f7f6 fdd2 	bl	8000550 <__aeabi_dmul>
 80099ac:	a376      	add	r3, pc, #472	; (adr r3, 8009b88 <__ieee754_pow+0x708>)
 80099ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099b2:	f7f6 fc17 	bl	80001e4 <__adddf3>
 80099b6:	4622      	mov	r2, r4
 80099b8:	462b      	mov	r3, r5
 80099ba:	f7f6 fdc9 	bl	8000550 <__aeabi_dmul>
 80099be:	a374      	add	r3, pc, #464	; (adr r3, 8009b90 <__ieee754_pow+0x710>)
 80099c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099c4:	f7f6 fc0e 	bl	80001e4 <__adddf3>
 80099c8:	4622      	mov	r2, r4
 80099ca:	462b      	mov	r3, r5
 80099cc:	f7f6 fdc0 	bl	8000550 <__aeabi_dmul>
 80099d0:	a371      	add	r3, pc, #452	; (adr r3, 8009b98 <__ieee754_pow+0x718>)
 80099d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099d6:	f7f6 fc05 	bl	80001e4 <__adddf3>
 80099da:	4622      	mov	r2, r4
 80099dc:	4606      	mov	r6, r0
 80099de:	460f      	mov	r7, r1
 80099e0:	462b      	mov	r3, r5
 80099e2:	4620      	mov	r0, r4
 80099e4:	4629      	mov	r1, r5
 80099e6:	f7f6 fdb3 	bl	8000550 <__aeabi_dmul>
 80099ea:	4602      	mov	r2, r0
 80099ec:	460b      	mov	r3, r1
 80099ee:	4630      	mov	r0, r6
 80099f0:	4639      	mov	r1, r7
 80099f2:	f7f6 fdad 	bl	8000550 <__aeabi_dmul>
 80099f6:	4642      	mov	r2, r8
 80099f8:	4604      	mov	r4, r0
 80099fa:	460d      	mov	r5, r1
 80099fc:	464b      	mov	r3, r9
 80099fe:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009a02:	f7f6 fbef 	bl	80001e4 <__adddf3>
 8009a06:	ec53 2b18 	vmov	r2, r3, d8
 8009a0a:	f7f6 fda1 	bl	8000550 <__aeabi_dmul>
 8009a0e:	4622      	mov	r2, r4
 8009a10:	462b      	mov	r3, r5
 8009a12:	f7f6 fbe7 	bl	80001e4 <__adddf3>
 8009a16:	4642      	mov	r2, r8
 8009a18:	4682      	mov	sl, r0
 8009a1a:	468b      	mov	fp, r1
 8009a1c:	464b      	mov	r3, r9
 8009a1e:	4640      	mov	r0, r8
 8009a20:	4649      	mov	r1, r9
 8009a22:	f7f6 fd95 	bl	8000550 <__aeabi_dmul>
 8009a26:	4b6c      	ldr	r3, [pc, #432]	; (8009bd8 <__ieee754_pow+0x758>)
 8009a28:	2200      	movs	r2, #0
 8009a2a:	4606      	mov	r6, r0
 8009a2c:	460f      	mov	r7, r1
 8009a2e:	f7f6 fbd9 	bl	80001e4 <__adddf3>
 8009a32:	4652      	mov	r2, sl
 8009a34:	465b      	mov	r3, fp
 8009a36:	f7f6 fbd5 	bl	80001e4 <__adddf3>
 8009a3a:	9c04      	ldr	r4, [sp, #16]
 8009a3c:	460d      	mov	r5, r1
 8009a3e:	4622      	mov	r2, r4
 8009a40:	460b      	mov	r3, r1
 8009a42:	4640      	mov	r0, r8
 8009a44:	4649      	mov	r1, r9
 8009a46:	f7f6 fd83 	bl	8000550 <__aeabi_dmul>
 8009a4a:	4b63      	ldr	r3, [pc, #396]	; (8009bd8 <__ieee754_pow+0x758>)
 8009a4c:	4680      	mov	r8, r0
 8009a4e:	4689      	mov	r9, r1
 8009a50:	2200      	movs	r2, #0
 8009a52:	4620      	mov	r0, r4
 8009a54:	4629      	mov	r1, r5
 8009a56:	f7f6 fbc3 	bl	80001e0 <__aeabi_dsub>
 8009a5a:	4632      	mov	r2, r6
 8009a5c:	463b      	mov	r3, r7
 8009a5e:	f7f6 fbbf 	bl	80001e0 <__aeabi_dsub>
 8009a62:	4602      	mov	r2, r0
 8009a64:	460b      	mov	r3, r1
 8009a66:	4650      	mov	r0, sl
 8009a68:	4659      	mov	r1, fp
 8009a6a:	f7f6 fbb9 	bl	80001e0 <__aeabi_dsub>
 8009a6e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8009a72:	f7f6 fd6d 	bl	8000550 <__aeabi_dmul>
 8009a76:	4622      	mov	r2, r4
 8009a78:	4606      	mov	r6, r0
 8009a7a:	460f      	mov	r7, r1
 8009a7c:	462b      	mov	r3, r5
 8009a7e:	ec51 0b18 	vmov	r0, r1, d8
 8009a82:	f7f6 fd65 	bl	8000550 <__aeabi_dmul>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4630      	mov	r0, r6
 8009a8c:	4639      	mov	r1, r7
 8009a8e:	f7f6 fba9 	bl	80001e4 <__adddf3>
 8009a92:	4606      	mov	r6, r0
 8009a94:	460f      	mov	r7, r1
 8009a96:	4602      	mov	r2, r0
 8009a98:	460b      	mov	r3, r1
 8009a9a:	4640      	mov	r0, r8
 8009a9c:	4649      	mov	r1, r9
 8009a9e:	f7f6 fba1 	bl	80001e4 <__adddf3>
 8009aa2:	9c04      	ldr	r4, [sp, #16]
 8009aa4:	a33e      	add	r3, pc, #248	; (adr r3, 8009ba0 <__ieee754_pow+0x720>)
 8009aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009aaa:	4620      	mov	r0, r4
 8009aac:	460d      	mov	r5, r1
 8009aae:	f7f6 fd4f 	bl	8000550 <__aeabi_dmul>
 8009ab2:	4642      	mov	r2, r8
 8009ab4:	ec41 0b18 	vmov	d8, r0, r1
 8009ab8:	464b      	mov	r3, r9
 8009aba:	4620      	mov	r0, r4
 8009abc:	4629      	mov	r1, r5
 8009abe:	f7f6 fb8f 	bl	80001e0 <__aeabi_dsub>
 8009ac2:	4602      	mov	r2, r0
 8009ac4:	460b      	mov	r3, r1
 8009ac6:	4630      	mov	r0, r6
 8009ac8:	4639      	mov	r1, r7
 8009aca:	f7f6 fb89 	bl	80001e0 <__aeabi_dsub>
 8009ace:	a336      	add	r3, pc, #216	; (adr r3, 8009ba8 <__ieee754_pow+0x728>)
 8009ad0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ad4:	f7f6 fd3c 	bl	8000550 <__aeabi_dmul>
 8009ad8:	a335      	add	r3, pc, #212	; (adr r3, 8009bb0 <__ieee754_pow+0x730>)
 8009ada:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009ade:	4606      	mov	r6, r0
 8009ae0:	460f      	mov	r7, r1
 8009ae2:	4620      	mov	r0, r4
 8009ae4:	4629      	mov	r1, r5
 8009ae6:	f7f6 fd33 	bl	8000550 <__aeabi_dmul>
 8009aea:	4602      	mov	r2, r0
 8009aec:	460b      	mov	r3, r1
 8009aee:	4630      	mov	r0, r6
 8009af0:	4639      	mov	r1, r7
 8009af2:	f7f6 fb77 	bl	80001e4 <__adddf3>
 8009af6:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009af8:	4b38      	ldr	r3, [pc, #224]	; (8009bdc <__ieee754_pow+0x75c>)
 8009afa:	4413      	add	r3, r2
 8009afc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b00:	f7f6 fb70 	bl	80001e4 <__adddf3>
 8009b04:	4682      	mov	sl, r0
 8009b06:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009b08:	468b      	mov	fp, r1
 8009b0a:	f7f6 fcb7 	bl	800047c <__aeabi_i2d>
 8009b0e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009b10:	4b33      	ldr	r3, [pc, #204]	; (8009be0 <__ieee754_pow+0x760>)
 8009b12:	4413      	add	r3, r2
 8009b14:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009b18:	4606      	mov	r6, r0
 8009b1a:	460f      	mov	r7, r1
 8009b1c:	4652      	mov	r2, sl
 8009b1e:	465b      	mov	r3, fp
 8009b20:	ec51 0b18 	vmov	r0, r1, d8
 8009b24:	f7f6 fb5e 	bl	80001e4 <__adddf3>
 8009b28:	4642      	mov	r2, r8
 8009b2a:	464b      	mov	r3, r9
 8009b2c:	f7f6 fb5a 	bl	80001e4 <__adddf3>
 8009b30:	4632      	mov	r2, r6
 8009b32:	463b      	mov	r3, r7
 8009b34:	f7f6 fb56 	bl	80001e4 <__adddf3>
 8009b38:	9c04      	ldr	r4, [sp, #16]
 8009b3a:	4632      	mov	r2, r6
 8009b3c:	463b      	mov	r3, r7
 8009b3e:	4620      	mov	r0, r4
 8009b40:	460d      	mov	r5, r1
 8009b42:	f7f6 fb4d 	bl	80001e0 <__aeabi_dsub>
 8009b46:	4642      	mov	r2, r8
 8009b48:	464b      	mov	r3, r9
 8009b4a:	f7f6 fb49 	bl	80001e0 <__aeabi_dsub>
 8009b4e:	ec53 2b18 	vmov	r2, r3, d8
 8009b52:	f7f6 fb45 	bl	80001e0 <__aeabi_dsub>
 8009b56:	4602      	mov	r2, r0
 8009b58:	460b      	mov	r3, r1
 8009b5a:	4650      	mov	r0, sl
 8009b5c:	4659      	mov	r1, fp
 8009b5e:	e606      	b.n	800976e <__ieee754_pow+0x2ee>
 8009b60:	2401      	movs	r4, #1
 8009b62:	e6a0      	b.n	80098a6 <__ieee754_pow+0x426>
 8009b64:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009bb8 <__ieee754_pow+0x738>
 8009b68:	e60d      	b.n	8009786 <__ieee754_pow+0x306>
 8009b6a:	bf00      	nop
 8009b6c:	f3af 8000 	nop.w
 8009b70:	4a454eef 	.word	0x4a454eef
 8009b74:	3fca7e28 	.word	0x3fca7e28
 8009b78:	93c9db65 	.word	0x93c9db65
 8009b7c:	3fcd864a 	.word	0x3fcd864a
 8009b80:	a91d4101 	.word	0xa91d4101
 8009b84:	3fd17460 	.word	0x3fd17460
 8009b88:	518f264d 	.word	0x518f264d
 8009b8c:	3fd55555 	.word	0x3fd55555
 8009b90:	db6fabff 	.word	0xdb6fabff
 8009b94:	3fdb6db6 	.word	0x3fdb6db6
 8009b98:	33333303 	.word	0x33333303
 8009b9c:	3fe33333 	.word	0x3fe33333
 8009ba0:	e0000000 	.word	0xe0000000
 8009ba4:	3feec709 	.word	0x3feec709
 8009ba8:	dc3a03fd 	.word	0xdc3a03fd
 8009bac:	3feec709 	.word	0x3feec709
 8009bb0:	145b01f5 	.word	0x145b01f5
 8009bb4:	be3e2fe0 	.word	0xbe3e2fe0
 8009bb8:	00000000 	.word	0x00000000
 8009bbc:	3ff00000 	.word	0x3ff00000
 8009bc0:	7ff00000 	.word	0x7ff00000
 8009bc4:	43400000 	.word	0x43400000
 8009bc8:	0003988e 	.word	0x0003988e
 8009bcc:	000bb679 	.word	0x000bb679
 8009bd0:	0800a2d0 	.word	0x0800a2d0
 8009bd4:	3ff00000 	.word	0x3ff00000
 8009bd8:	40080000 	.word	0x40080000
 8009bdc:	0800a2f0 	.word	0x0800a2f0
 8009be0:	0800a2e0 	.word	0x0800a2e0
 8009be4:	a3b5      	add	r3, pc, #724	; (adr r3, 8009ebc <__ieee754_pow+0xa3c>)
 8009be6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bea:	4640      	mov	r0, r8
 8009bec:	4649      	mov	r1, r9
 8009bee:	f7f6 faf9 	bl	80001e4 <__adddf3>
 8009bf2:	4622      	mov	r2, r4
 8009bf4:	ec41 0b1a 	vmov	d10, r0, r1
 8009bf8:	462b      	mov	r3, r5
 8009bfa:	4630      	mov	r0, r6
 8009bfc:	4639      	mov	r1, r7
 8009bfe:	f7f6 faef 	bl	80001e0 <__aeabi_dsub>
 8009c02:	4602      	mov	r2, r0
 8009c04:	460b      	mov	r3, r1
 8009c06:	ec51 0b1a 	vmov	r0, r1, d10
 8009c0a:	f7f6 ff31 	bl	8000a70 <__aeabi_dcmpgt>
 8009c0e:	2800      	cmp	r0, #0
 8009c10:	f47f adf8 	bne.w	8009804 <__ieee754_pow+0x384>
 8009c14:	4aa4      	ldr	r2, [pc, #656]	; (8009ea8 <__ieee754_pow+0xa28>)
 8009c16:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009c1a:	4293      	cmp	r3, r2
 8009c1c:	f340 810b 	ble.w	8009e36 <__ieee754_pow+0x9b6>
 8009c20:	151b      	asrs	r3, r3, #20
 8009c22:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009c26:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009c2a:	fa4a f303 	asr.w	r3, sl, r3
 8009c2e:	445b      	add	r3, fp
 8009c30:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009c34:	4e9d      	ldr	r6, [pc, #628]	; (8009eac <__ieee754_pow+0xa2c>)
 8009c36:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009c3a:	4116      	asrs	r6, r2
 8009c3c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009c40:	2000      	movs	r0, #0
 8009c42:	ea23 0106 	bic.w	r1, r3, r6
 8009c46:	f1c2 0214 	rsb	r2, r2, #20
 8009c4a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009c4e:	fa4a fa02 	asr.w	sl, sl, r2
 8009c52:	f1bb 0f00 	cmp.w	fp, #0
 8009c56:	4602      	mov	r2, r0
 8009c58:	460b      	mov	r3, r1
 8009c5a:	4620      	mov	r0, r4
 8009c5c:	4629      	mov	r1, r5
 8009c5e:	bfb8      	it	lt
 8009c60:	f1ca 0a00 	rsblt	sl, sl, #0
 8009c64:	f7f6 fabc 	bl	80001e0 <__aeabi_dsub>
 8009c68:	ec41 0b19 	vmov	d9, r0, r1
 8009c6c:	4642      	mov	r2, r8
 8009c6e:	464b      	mov	r3, r9
 8009c70:	ec51 0b19 	vmov	r0, r1, d9
 8009c74:	f7f6 fab6 	bl	80001e4 <__adddf3>
 8009c78:	2400      	movs	r4, #0
 8009c7a:	a379      	add	r3, pc, #484	; (adr r3, 8009e60 <__ieee754_pow+0x9e0>)
 8009c7c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c80:	4620      	mov	r0, r4
 8009c82:	460d      	mov	r5, r1
 8009c84:	f7f6 fc64 	bl	8000550 <__aeabi_dmul>
 8009c88:	ec53 2b19 	vmov	r2, r3, d9
 8009c8c:	4606      	mov	r6, r0
 8009c8e:	460f      	mov	r7, r1
 8009c90:	4620      	mov	r0, r4
 8009c92:	4629      	mov	r1, r5
 8009c94:	f7f6 faa4 	bl	80001e0 <__aeabi_dsub>
 8009c98:	4602      	mov	r2, r0
 8009c9a:	460b      	mov	r3, r1
 8009c9c:	4640      	mov	r0, r8
 8009c9e:	4649      	mov	r1, r9
 8009ca0:	f7f6 fa9e 	bl	80001e0 <__aeabi_dsub>
 8009ca4:	a370      	add	r3, pc, #448	; (adr r3, 8009e68 <__ieee754_pow+0x9e8>)
 8009ca6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009caa:	f7f6 fc51 	bl	8000550 <__aeabi_dmul>
 8009cae:	a370      	add	r3, pc, #448	; (adr r3, 8009e70 <__ieee754_pow+0x9f0>)
 8009cb0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009cb4:	4680      	mov	r8, r0
 8009cb6:	4689      	mov	r9, r1
 8009cb8:	4620      	mov	r0, r4
 8009cba:	4629      	mov	r1, r5
 8009cbc:	f7f6 fc48 	bl	8000550 <__aeabi_dmul>
 8009cc0:	4602      	mov	r2, r0
 8009cc2:	460b      	mov	r3, r1
 8009cc4:	4640      	mov	r0, r8
 8009cc6:	4649      	mov	r1, r9
 8009cc8:	f7f6 fa8c 	bl	80001e4 <__adddf3>
 8009ccc:	4604      	mov	r4, r0
 8009cce:	460d      	mov	r5, r1
 8009cd0:	4602      	mov	r2, r0
 8009cd2:	460b      	mov	r3, r1
 8009cd4:	4630      	mov	r0, r6
 8009cd6:	4639      	mov	r1, r7
 8009cd8:	f7f6 fa84 	bl	80001e4 <__adddf3>
 8009cdc:	4632      	mov	r2, r6
 8009cde:	463b      	mov	r3, r7
 8009ce0:	4680      	mov	r8, r0
 8009ce2:	4689      	mov	r9, r1
 8009ce4:	f7f6 fa7c 	bl	80001e0 <__aeabi_dsub>
 8009ce8:	4602      	mov	r2, r0
 8009cea:	460b      	mov	r3, r1
 8009cec:	4620      	mov	r0, r4
 8009cee:	4629      	mov	r1, r5
 8009cf0:	f7f6 fa76 	bl	80001e0 <__aeabi_dsub>
 8009cf4:	4642      	mov	r2, r8
 8009cf6:	4606      	mov	r6, r0
 8009cf8:	460f      	mov	r7, r1
 8009cfa:	464b      	mov	r3, r9
 8009cfc:	4640      	mov	r0, r8
 8009cfe:	4649      	mov	r1, r9
 8009d00:	f7f6 fc26 	bl	8000550 <__aeabi_dmul>
 8009d04:	a35c      	add	r3, pc, #368	; (adr r3, 8009e78 <__ieee754_pow+0x9f8>)
 8009d06:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d0a:	4604      	mov	r4, r0
 8009d0c:	460d      	mov	r5, r1
 8009d0e:	f7f6 fc1f 	bl	8000550 <__aeabi_dmul>
 8009d12:	a35b      	add	r3, pc, #364	; (adr r3, 8009e80 <__ieee754_pow+0xa00>)
 8009d14:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d18:	f7f6 fa62 	bl	80001e0 <__aeabi_dsub>
 8009d1c:	4622      	mov	r2, r4
 8009d1e:	462b      	mov	r3, r5
 8009d20:	f7f6 fc16 	bl	8000550 <__aeabi_dmul>
 8009d24:	a358      	add	r3, pc, #352	; (adr r3, 8009e88 <__ieee754_pow+0xa08>)
 8009d26:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d2a:	f7f6 fa5b 	bl	80001e4 <__adddf3>
 8009d2e:	4622      	mov	r2, r4
 8009d30:	462b      	mov	r3, r5
 8009d32:	f7f6 fc0d 	bl	8000550 <__aeabi_dmul>
 8009d36:	a356      	add	r3, pc, #344	; (adr r3, 8009e90 <__ieee754_pow+0xa10>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	f7f6 fa50 	bl	80001e0 <__aeabi_dsub>
 8009d40:	4622      	mov	r2, r4
 8009d42:	462b      	mov	r3, r5
 8009d44:	f7f6 fc04 	bl	8000550 <__aeabi_dmul>
 8009d48:	a353      	add	r3, pc, #332	; (adr r3, 8009e98 <__ieee754_pow+0xa18>)
 8009d4a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4e:	f7f6 fa49 	bl	80001e4 <__adddf3>
 8009d52:	4622      	mov	r2, r4
 8009d54:	462b      	mov	r3, r5
 8009d56:	f7f6 fbfb 	bl	8000550 <__aeabi_dmul>
 8009d5a:	4602      	mov	r2, r0
 8009d5c:	460b      	mov	r3, r1
 8009d5e:	4640      	mov	r0, r8
 8009d60:	4649      	mov	r1, r9
 8009d62:	f7f6 fa3d 	bl	80001e0 <__aeabi_dsub>
 8009d66:	4604      	mov	r4, r0
 8009d68:	460d      	mov	r5, r1
 8009d6a:	4602      	mov	r2, r0
 8009d6c:	460b      	mov	r3, r1
 8009d6e:	4640      	mov	r0, r8
 8009d70:	4649      	mov	r1, r9
 8009d72:	f7f6 fbed 	bl	8000550 <__aeabi_dmul>
 8009d76:	2200      	movs	r2, #0
 8009d78:	ec41 0b19 	vmov	d9, r0, r1
 8009d7c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009d80:	4620      	mov	r0, r4
 8009d82:	4629      	mov	r1, r5
 8009d84:	f7f6 fa2c 	bl	80001e0 <__aeabi_dsub>
 8009d88:	4602      	mov	r2, r0
 8009d8a:	460b      	mov	r3, r1
 8009d8c:	ec51 0b19 	vmov	r0, r1, d9
 8009d90:	f7f6 fd08 	bl	80007a4 <__aeabi_ddiv>
 8009d94:	4632      	mov	r2, r6
 8009d96:	4604      	mov	r4, r0
 8009d98:	460d      	mov	r5, r1
 8009d9a:	463b      	mov	r3, r7
 8009d9c:	4640      	mov	r0, r8
 8009d9e:	4649      	mov	r1, r9
 8009da0:	f7f6 fbd6 	bl	8000550 <__aeabi_dmul>
 8009da4:	4632      	mov	r2, r6
 8009da6:	463b      	mov	r3, r7
 8009da8:	f7f6 fa1c 	bl	80001e4 <__adddf3>
 8009dac:	4602      	mov	r2, r0
 8009dae:	460b      	mov	r3, r1
 8009db0:	4620      	mov	r0, r4
 8009db2:	4629      	mov	r1, r5
 8009db4:	f7f6 fa14 	bl	80001e0 <__aeabi_dsub>
 8009db8:	4642      	mov	r2, r8
 8009dba:	464b      	mov	r3, r9
 8009dbc:	f7f6 fa10 	bl	80001e0 <__aeabi_dsub>
 8009dc0:	460b      	mov	r3, r1
 8009dc2:	4602      	mov	r2, r0
 8009dc4:	493a      	ldr	r1, [pc, #232]	; (8009eb0 <__ieee754_pow+0xa30>)
 8009dc6:	2000      	movs	r0, #0
 8009dc8:	f7f6 fa0a 	bl	80001e0 <__aeabi_dsub>
 8009dcc:	e9cd 0100 	strd	r0, r1, [sp]
 8009dd0:	9b01      	ldr	r3, [sp, #4]
 8009dd2:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009dd6:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009dda:	da2f      	bge.n	8009e3c <__ieee754_pow+0x9bc>
 8009ddc:	4650      	mov	r0, sl
 8009dde:	ed9d 0b00 	vldr	d0, [sp]
 8009de2:	f000 f9cd 	bl	800a180 <scalbn>
 8009de6:	ec51 0b10 	vmov	r0, r1, d0
 8009dea:	ec53 2b18 	vmov	r2, r3, d8
 8009dee:	f7ff bbe0 	b.w	80095b2 <__ieee754_pow+0x132>
 8009df2:	4b30      	ldr	r3, [pc, #192]	; (8009eb4 <__ieee754_pow+0xa34>)
 8009df4:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009df8:	429e      	cmp	r6, r3
 8009dfa:	f77f af0b 	ble.w	8009c14 <__ieee754_pow+0x794>
 8009dfe:	4b2e      	ldr	r3, [pc, #184]	; (8009eb8 <__ieee754_pow+0xa38>)
 8009e00:	440b      	add	r3, r1
 8009e02:	4303      	orrs	r3, r0
 8009e04:	d00b      	beq.n	8009e1e <__ieee754_pow+0x99e>
 8009e06:	a326      	add	r3, pc, #152	; (adr r3, 8009ea0 <__ieee754_pow+0xa20>)
 8009e08:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e0c:	ec51 0b18 	vmov	r0, r1, d8
 8009e10:	f7f6 fb9e 	bl	8000550 <__aeabi_dmul>
 8009e14:	a322      	add	r3, pc, #136	; (adr r3, 8009ea0 <__ieee754_pow+0xa20>)
 8009e16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009e1a:	f7ff bbca 	b.w	80095b2 <__ieee754_pow+0x132>
 8009e1e:	4622      	mov	r2, r4
 8009e20:	462b      	mov	r3, r5
 8009e22:	f7f6 f9dd 	bl	80001e0 <__aeabi_dsub>
 8009e26:	4642      	mov	r2, r8
 8009e28:	464b      	mov	r3, r9
 8009e2a:	f7f6 fe17 	bl	8000a5c <__aeabi_dcmpge>
 8009e2e:	2800      	cmp	r0, #0
 8009e30:	f43f aef0 	beq.w	8009c14 <__ieee754_pow+0x794>
 8009e34:	e7e7      	b.n	8009e06 <__ieee754_pow+0x986>
 8009e36:	f04f 0a00 	mov.w	sl, #0
 8009e3a:	e717      	b.n	8009c6c <__ieee754_pow+0x7ec>
 8009e3c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009e40:	4619      	mov	r1, r3
 8009e42:	e7d2      	b.n	8009dea <__ieee754_pow+0x96a>
 8009e44:	491a      	ldr	r1, [pc, #104]	; (8009eb0 <__ieee754_pow+0xa30>)
 8009e46:	2000      	movs	r0, #0
 8009e48:	f7ff bb9e 	b.w	8009588 <__ieee754_pow+0x108>
 8009e4c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009e50:	f7ff bb9a 	b.w	8009588 <__ieee754_pow+0x108>
 8009e54:	9000      	str	r0, [sp, #0]
 8009e56:	f7ff bb76 	b.w	8009546 <__ieee754_pow+0xc6>
 8009e5a:	2100      	movs	r1, #0
 8009e5c:	f7ff bb60 	b.w	8009520 <__ieee754_pow+0xa0>
 8009e60:	00000000 	.word	0x00000000
 8009e64:	3fe62e43 	.word	0x3fe62e43
 8009e68:	fefa39ef 	.word	0xfefa39ef
 8009e6c:	3fe62e42 	.word	0x3fe62e42
 8009e70:	0ca86c39 	.word	0x0ca86c39
 8009e74:	be205c61 	.word	0xbe205c61
 8009e78:	72bea4d0 	.word	0x72bea4d0
 8009e7c:	3e663769 	.word	0x3e663769
 8009e80:	c5d26bf1 	.word	0xc5d26bf1
 8009e84:	3ebbbd41 	.word	0x3ebbbd41
 8009e88:	af25de2c 	.word	0xaf25de2c
 8009e8c:	3f11566a 	.word	0x3f11566a
 8009e90:	16bebd93 	.word	0x16bebd93
 8009e94:	3f66c16c 	.word	0x3f66c16c
 8009e98:	5555553e 	.word	0x5555553e
 8009e9c:	3fc55555 	.word	0x3fc55555
 8009ea0:	c2f8f359 	.word	0xc2f8f359
 8009ea4:	01a56e1f 	.word	0x01a56e1f
 8009ea8:	3fe00000 	.word	0x3fe00000
 8009eac:	000fffff 	.word	0x000fffff
 8009eb0:	3ff00000 	.word	0x3ff00000
 8009eb4:	4090cbff 	.word	0x4090cbff
 8009eb8:	3f6f3400 	.word	0x3f6f3400
 8009ebc:	652b82fe 	.word	0x652b82fe
 8009ec0:	3c971547 	.word	0x3c971547

08009ec4 <__ieee754_sqrt>:
 8009ec4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009ec8:	ec55 4b10 	vmov	r4, r5, d0
 8009ecc:	4e56      	ldr	r6, [pc, #344]	; (800a028 <__ieee754_sqrt+0x164>)
 8009ece:	43ae      	bics	r6, r5
 8009ed0:	ee10 0a10 	vmov	r0, s0
 8009ed4:	ee10 3a10 	vmov	r3, s0
 8009ed8:	4629      	mov	r1, r5
 8009eda:	462a      	mov	r2, r5
 8009edc:	d110      	bne.n	8009f00 <__ieee754_sqrt+0x3c>
 8009ede:	ee10 2a10 	vmov	r2, s0
 8009ee2:	462b      	mov	r3, r5
 8009ee4:	f7f6 fb34 	bl	8000550 <__aeabi_dmul>
 8009ee8:	4602      	mov	r2, r0
 8009eea:	460b      	mov	r3, r1
 8009eec:	4620      	mov	r0, r4
 8009eee:	4629      	mov	r1, r5
 8009ef0:	f7f6 f978 	bl	80001e4 <__adddf3>
 8009ef4:	4604      	mov	r4, r0
 8009ef6:	460d      	mov	r5, r1
 8009ef8:	ec45 4b10 	vmov	d0, r4, r5
 8009efc:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009f00:	2d00      	cmp	r5, #0
 8009f02:	dc10      	bgt.n	8009f26 <__ieee754_sqrt+0x62>
 8009f04:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009f08:	4330      	orrs	r0, r6
 8009f0a:	d0f5      	beq.n	8009ef8 <__ieee754_sqrt+0x34>
 8009f0c:	b15d      	cbz	r5, 8009f26 <__ieee754_sqrt+0x62>
 8009f0e:	ee10 2a10 	vmov	r2, s0
 8009f12:	462b      	mov	r3, r5
 8009f14:	ee10 0a10 	vmov	r0, s0
 8009f18:	f7f6 f962 	bl	80001e0 <__aeabi_dsub>
 8009f1c:	4602      	mov	r2, r0
 8009f1e:	460b      	mov	r3, r1
 8009f20:	f7f6 fc40 	bl	80007a4 <__aeabi_ddiv>
 8009f24:	e7e6      	b.n	8009ef4 <__ieee754_sqrt+0x30>
 8009f26:	1509      	asrs	r1, r1, #20
 8009f28:	d076      	beq.n	800a018 <__ieee754_sqrt+0x154>
 8009f2a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009f2e:	07ce      	lsls	r6, r1, #31
 8009f30:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009f34:	bf5e      	ittt	pl
 8009f36:	0fda      	lsrpl	r2, r3, #31
 8009f38:	005b      	lslpl	r3, r3, #1
 8009f3a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009f3e:	0fda      	lsrs	r2, r3, #31
 8009f40:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009f44:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009f48:	2000      	movs	r0, #0
 8009f4a:	106d      	asrs	r5, r5, #1
 8009f4c:	005b      	lsls	r3, r3, #1
 8009f4e:	f04f 0e16 	mov.w	lr, #22
 8009f52:	4684      	mov	ip, r0
 8009f54:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009f58:	eb0c 0401 	add.w	r4, ip, r1
 8009f5c:	4294      	cmp	r4, r2
 8009f5e:	bfde      	ittt	le
 8009f60:	1b12      	suble	r2, r2, r4
 8009f62:	eb04 0c01 	addle.w	ip, r4, r1
 8009f66:	1840      	addle	r0, r0, r1
 8009f68:	0052      	lsls	r2, r2, #1
 8009f6a:	f1be 0e01 	subs.w	lr, lr, #1
 8009f6e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009f72:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009f76:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009f7a:	d1ed      	bne.n	8009f58 <__ieee754_sqrt+0x94>
 8009f7c:	4671      	mov	r1, lr
 8009f7e:	2720      	movs	r7, #32
 8009f80:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009f84:	4562      	cmp	r2, ip
 8009f86:	eb04 060e 	add.w	r6, r4, lr
 8009f8a:	dc02      	bgt.n	8009f92 <__ieee754_sqrt+0xce>
 8009f8c:	d113      	bne.n	8009fb6 <__ieee754_sqrt+0xf2>
 8009f8e:	429e      	cmp	r6, r3
 8009f90:	d811      	bhi.n	8009fb6 <__ieee754_sqrt+0xf2>
 8009f92:	2e00      	cmp	r6, #0
 8009f94:	eb06 0e04 	add.w	lr, r6, r4
 8009f98:	da43      	bge.n	800a022 <__ieee754_sqrt+0x15e>
 8009f9a:	f1be 0f00 	cmp.w	lr, #0
 8009f9e:	db40      	blt.n	800a022 <__ieee754_sqrt+0x15e>
 8009fa0:	f10c 0801 	add.w	r8, ip, #1
 8009fa4:	eba2 020c 	sub.w	r2, r2, ip
 8009fa8:	429e      	cmp	r6, r3
 8009faa:	bf88      	it	hi
 8009fac:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8009fb0:	1b9b      	subs	r3, r3, r6
 8009fb2:	4421      	add	r1, r4
 8009fb4:	46c4      	mov	ip, r8
 8009fb6:	0052      	lsls	r2, r2, #1
 8009fb8:	3f01      	subs	r7, #1
 8009fba:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009fbe:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009fc2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009fc6:	d1dd      	bne.n	8009f84 <__ieee754_sqrt+0xc0>
 8009fc8:	4313      	orrs	r3, r2
 8009fca:	d006      	beq.n	8009fda <__ieee754_sqrt+0x116>
 8009fcc:	1c4c      	adds	r4, r1, #1
 8009fce:	bf13      	iteet	ne
 8009fd0:	3101      	addne	r1, #1
 8009fd2:	3001      	addeq	r0, #1
 8009fd4:	4639      	moveq	r1, r7
 8009fd6:	f021 0101 	bicne.w	r1, r1, #1
 8009fda:	1043      	asrs	r3, r0, #1
 8009fdc:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009fe0:	0849      	lsrs	r1, r1, #1
 8009fe2:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009fe6:	07c2      	lsls	r2, r0, #31
 8009fe8:	bf48      	it	mi
 8009fea:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009fee:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009ff2:	460c      	mov	r4, r1
 8009ff4:	463d      	mov	r5, r7
 8009ff6:	e77f      	b.n	8009ef8 <__ieee754_sqrt+0x34>
 8009ff8:	0ada      	lsrs	r2, r3, #11
 8009ffa:	3815      	subs	r0, #21
 8009ffc:	055b      	lsls	r3, r3, #21
 8009ffe:	2a00      	cmp	r2, #0
 800a000:	d0fa      	beq.n	8009ff8 <__ieee754_sqrt+0x134>
 800a002:	02d7      	lsls	r7, r2, #11
 800a004:	d50a      	bpl.n	800a01c <__ieee754_sqrt+0x158>
 800a006:	f1c1 0420 	rsb	r4, r1, #32
 800a00a:	fa23 f404 	lsr.w	r4, r3, r4
 800a00e:	1e4d      	subs	r5, r1, #1
 800a010:	408b      	lsls	r3, r1
 800a012:	4322      	orrs	r2, r4
 800a014:	1b41      	subs	r1, r0, r5
 800a016:	e788      	b.n	8009f2a <__ieee754_sqrt+0x66>
 800a018:	4608      	mov	r0, r1
 800a01a:	e7f0      	b.n	8009ffe <__ieee754_sqrt+0x13a>
 800a01c:	0052      	lsls	r2, r2, #1
 800a01e:	3101      	adds	r1, #1
 800a020:	e7ef      	b.n	800a002 <__ieee754_sqrt+0x13e>
 800a022:	46e0      	mov	r8, ip
 800a024:	e7be      	b.n	8009fa4 <__ieee754_sqrt+0xe0>
 800a026:	bf00      	nop
 800a028:	7ff00000 	.word	0x7ff00000

0800a02c <fabs>:
 800a02c:	ec51 0b10 	vmov	r0, r1, d0
 800a030:	ee10 2a10 	vmov	r2, s0
 800a034:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a038:	ec43 2b10 	vmov	d0, r2, r3
 800a03c:	4770      	bx	lr

0800a03e <finite>:
 800a03e:	b082      	sub	sp, #8
 800a040:	ed8d 0b00 	vstr	d0, [sp]
 800a044:	9801      	ldr	r0, [sp, #4]
 800a046:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 800a04a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 800a04e:	0fc0      	lsrs	r0, r0, #31
 800a050:	b002      	add	sp, #8
 800a052:	4770      	bx	lr
 800a054:	0000      	movs	r0, r0
	...

0800a058 <nan>:
 800a058:	ed9f 0b01 	vldr	d0, [pc, #4]	; 800a060 <nan+0x8>
 800a05c:	4770      	bx	lr
 800a05e:	bf00      	nop
 800a060:	00000000 	.word	0x00000000
 800a064:	7ff80000 	.word	0x7ff80000

0800a068 <rint>:
 800a068:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 800a06a:	ec51 0b10 	vmov	r0, r1, d0
 800a06e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a072:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800a076:	2e13      	cmp	r6, #19
 800a078:	ee10 4a10 	vmov	r4, s0
 800a07c:	460b      	mov	r3, r1
 800a07e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800a082:	dc58      	bgt.n	800a136 <rint+0xce>
 800a084:	2e00      	cmp	r6, #0
 800a086:	da2b      	bge.n	800a0e0 <rint+0x78>
 800a088:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 800a08c:	4302      	orrs	r2, r0
 800a08e:	d023      	beq.n	800a0d8 <rint+0x70>
 800a090:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800a094:	4302      	orrs	r2, r0
 800a096:	4254      	negs	r4, r2
 800a098:	4314      	orrs	r4, r2
 800a09a:	0c4b      	lsrs	r3, r1, #17
 800a09c:	0b24      	lsrs	r4, r4, #12
 800a09e:	045b      	lsls	r3, r3, #17
 800a0a0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 800a0a4:	ea44 0103 	orr.w	r1, r4, r3
 800a0a8:	4b32      	ldr	r3, [pc, #200]	; (800a174 <rint+0x10c>)
 800a0aa:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 800a0ae:	e9d3 6700 	ldrd	r6, r7, [r3]
 800a0b2:	4602      	mov	r2, r0
 800a0b4:	460b      	mov	r3, r1
 800a0b6:	4630      	mov	r0, r6
 800a0b8:	4639      	mov	r1, r7
 800a0ba:	f7f6 f893 	bl	80001e4 <__adddf3>
 800a0be:	e9cd 0100 	strd	r0, r1, [sp]
 800a0c2:	463b      	mov	r3, r7
 800a0c4:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a0c8:	4632      	mov	r2, r6
 800a0ca:	f7f6 f889 	bl	80001e0 <__aeabi_dsub>
 800a0ce:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a0d2:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a0d6:	4639      	mov	r1, r7
 800a0d8:	ec41 0b10 	vmov	d0, r0, r1
 800a0dc:	b003      	add	sp, #12
 800a0de:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a0e0:	4a25      	ldr	r2, [pc, #148]	; (800a178 <rint+0x110>)
 800a0e2:	4132      	asrs	r2, r6
 800a0e4:	ea01 0702 	and.w	r7, r1, r2
 800a0e8:	4307      	orrs	r7, r0
 800a0ea:	d0f5      	beq.n	800a0d8 <rint+0x70>
 800a0ec:	0851      	lsrs	r1, r2, #1
 800a0ee:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a0f2:	4314      	orrs	r4, r2
 800a0f4:	d00c      	beq.n	800a110 <rint+0xa8>
 800a0f6:	ea23 0201 	bic.w	r2, r3, r1
 800a0fa:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a0fe:	2e13      	cmp	r6, #19
 800a100:	fa43 f606 	asr.w	r6, r3, r6
 800a104:	bf0c      	ite	eq
 800a106:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a10a:	2400      	movne	r4, #0
 800a10c:	ea42 0306 	orr.w	r3, r2, r6
 800a110:	4918      	ldr	r1, [pc, #96]	; (800a174 <rint+0x10c>)
 800a112:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a116:	4622      	mov	r2, r4
 800a118:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a11c:	4620      	mov	r0, r4
 800a11e:	4629      	mov	r1, r5
 800a120:	f7f6 f860 	bl	80001e4 <__adddf3>
 800a124:	e9cd 0100 	strd	r0, r1, [sp]
 800a128:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a12c:	4622      	mov	r2, r4
 800a12e:	462b      	mov	r3, r5
 800a130:	f7f6 f856 	bl	80001e0 <__aeabi_dsub>
 800a134:	e7d0      	b.n	800a0d8 <rint+0x70>
 800a136:	2e33      	cmp	r6, #51	; 0x33
 800a138:	dd07      	ble.n	800a14a <rint+0xe2>
 800a13a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a13e:	d1cb      	bne.n	800a0d8 <rint+0x70>
 800a140:	ee10 2a10 	vmov	r2, s0
 800a144:	f7f6 f84e 	bl	80001e4 <__adddf3>
 800a148:	e7c6      	b.n	800a0d8 <rint+0x70>
 800a14a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a14e:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800a152:	40d6      	lsrs	r6, r2
 800a154:	4230      	tst	r0, r6
 800a156:	d0bf      	beq.n	800a0d8 <rint+0x70>
 800a158:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a15c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a160:	bf1f      	itttt	ne
 800a162:	ea24 0101 	bicne.w	r1, r4, r1
 800a166:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a16a:	fa44 f202 	asrne.w	r2, r4, r2
 800a16e:	ea41 0402 	orrne.w	r4, r1, r2
 800a172:	e7cd      	b.n	800a110 <rint+0xa8>
 800a174:	0800a300 	.word	0x0800a300
 800a178:	000fffff 	.word	0x000fffff
 800a17c:	00000000 	.word	0x00000000

0800a180 <scalbn>:
 800a180:	b570      	push	{r4, r5, r6, lr}
 800a182:	ec55 4b10 	vmov	r4, r5, d0
 800a186:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a18a:	4606      	mov	r6, r0
 800a18c:	462b      	mov	r3, r5
 800a18e:	b99a      	cbnz	r2, 800a1b8 <scalbn+0x38>
 800a190:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a194:	4323      	orrs	r3, r4
 800a196:	d036      	beq.n	800a206 <scalbn+0x86>
 800a198:	4b39      	ldr	r3, [pc, #228]	; (800a280 <scalbn+0x100>)
 800a19a:	4629      	mov	r1, r5
 800a19c:	ee10 0a10 	vmov	r0, s0
 800a1a0:	2200      	movs	r2, #0
 800a1a2:	f7f6 f9d5 	bl	8000550 <__aeabi_dmul>
 800a1a6:	4b37      	ldr	r3, [pc, #220]	; (800a284 <scalbn+0x104>)
 800a1a8:	429e      	cmp	r6, r3
 800a1aa:	4604      	mov	r4, r0
 800a1ac:	460d      	mov	r5, r1
 800a1ae:	da10      	bge.n	800a1d2 <scalbn+0x52>
 800a1b0:	a32b      	add	r3, pc, #172	; (adr r3, 800a260 <scalbn+0xe0>)
 800a1b2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a1b6:	e03a      	b.n	800a22e <scalbn+0xae>
 800a1b8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a1bc:	428a      	cmp	r2, r1
 800a1be:	d10c      	bne.n	800a1da <scalbn+0x5a>
 800a1c0:	ee10 2a10 	vmov	r2, s0
 800a1c4:	4620      	mov	r0, r4
 800a1c6:	4629      	mov	r1, r5
 800a1c8:	f7f6 f80c 	bl	80001e4 <__adddf3>
 800a1cc:	4604      	mov	r4, r0
 800a1ce:	460d      	mov	r5, r1
 800a1d0:	e019      	b.n	800a206 <scalbn+0x86>
 800a1d2:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a1d6:	460b      	mov	r3, r1
 800a1d8:	3a36      	subs	r2, #54	; 0x36
 800a1da:	4432      	add	r2, r6
 800a1dc:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a1e0:	428a      	cmp	r2, r1
 800a1e2:	dd08      	ble.n	800a1f6 <scalbn+0x76>
 800a1e4:	2d00      	cmp	r5, #0
 800a1e6:	a120      	add	r1, pc, #128	; (adr r1, 800a268 <scalbn+0xe8>)
 800a1e8:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1ec:	da1c      	bge.n	800a228 <scalbn+0xa8>
 800a1ee:	a120      	add	r1, pc, #128	; (adr r1, 800a270 <scalbn+0xf0>)
 800a1f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a1f4:	e018      	b.n	800a228 <scalbn+0xa8>
 800a1f6:	2a00      	cmp	r2, #0
 800a1f8:	dd08      	ble.n	800a20c <scalbn+0x8c>
 800a1fa:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a1fe:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a202:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a206:	ec45 4b10 	vmov	d0, r4, r5
 800a20a:	bd70      	pop	{r4, r5, r6, pc}
 800a20c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a210:	da19      	bge.n	800a246 <scalbn+0xc6>
 800a212:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a216:	429e      	cmp	r6, r3
 800a218:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a21c:	dd0a      	ble.n	800a234 <scalbn+0xb4>
 800a21e:	a112      	add	r1, pc, #72	; (adr r1, 800a268 <scalbn+0xe8>)
 800a220:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a224:	2b00      	cmp	r3, #0
 800a226:	d1e2      	bne.n	800a1ee <scalbn+0x6e>
 800a228:	a30f      	add	r3, pc, #60	; (adr r3, 800a268 <scalbn+0xe8>)
 800a22a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a22e:	f7f6 f98f 	bl	8000550 <__aeabi_dmul>
 800a232:	e7cb      	b.n	800a1cc <scalbn+0x4c>
 800a234:	a10a      	add	r1, pc, #40	; (adr r1, 800a260 <scalbn+0xe0>)
 800a236:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a23a:	2b00      	cmp	r3, #0
 800a23c:	d0b8      	beq.n	800a1b0 <scalbn+0x30>
 800a23e:	a10e      	add	r1, pc, #56	; (adr r1, 800a278 <scalbn+0xf8>)
 800a240:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a244:	e7b4      	b.n	800a1b0 <scalbn+0x30>
 800a246:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a24a:	3236      	adds	r2, #54	; 0x36
 800a24c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a250:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a254:	4620      	mov	r0, r4
 800a256:	4b0c      	ldr	r3, [pc, #48]	; (800a288 <scalbn+0x108>)
 800a258:	2200      	movs	r2, #0
 800a25a:	e7e8      	b.n	800a22e <scalbn+0xae>
 800a25c:	f3af 8000 	nop.w
 800a260:	c2f8f359 	.word	0xc2f8f359
 800a264:	01a56e1f 	.word	0x01a56e1f
 800a268:	8800759c 	.word	0x8800759c
 800a26c:	7e37e43c 	.word	0x7e37e43c
 800a270:	8800759c 	.word	0x8800759c
 800a274:	fe37e43c 	.word	0xfe37e43c
 800a278:	c2f8f359 	.word	0xc2f8f359
 800a27c:	81a56e1f 	.word	0x81a56e1f
 800a280:	43500000 	.word	0x43500000
 800a284:	ffff3cb0 	.word	0xffff3cb0
 800a288:	3c900000 	.word	0x3c900000

0800a28c <_init>:
 800a28c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a28e:	bf00      	nop
 800a290:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a292:	bc08      	pop	{r3}
 800a294:	469e      	mov	lr, r3
 800a296:	4770      	bx	lr

0800a298 <_fini>:
 800a298:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a29a:	bf00      	nop
 800a29c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a29e:	bc08      	pop	{r3}
 800a2a0:	469e      	mov	lr, r3
 800a2a2:	4770      	bx	lr

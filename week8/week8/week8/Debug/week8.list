
week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00007e44  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08007fe0  08007fe0  00017fe0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08008040  08008040  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  08008040  08008040  00018040  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08008048  08008048  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08008048  08008048  00018048  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800804c  0800804c  0001804c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  08008050  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000002a4  200000a8  080080f4  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000604  2000034c  080080f4  0002034c  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000fae2  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 00001eea  00000000  00000000  0002fbb6  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000f48  00000000  00000000  00031aa0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ec8  00000000  00000000  000329e8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  000166da  00000000  00000000  000338b0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00010ab7  00000000  00000000  00049f8a  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008feb9  00000000  00000000  0005aa41  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ea8fa  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00004624  00000000  00000000  000ea950  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a8 	.word	0x200000a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08007fc4 	.word	0x08007fc4

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ac 	.word	0x200000ac
 80001d4:	08007fc4 	.word	0x08007fc4

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001068:	f001 fe5c 	bl	8002d24 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800106c:	f000 f852 	bl	8001114 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001070:	f000 fa54 	bl	800151c <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001074:	f000 f9fe 	bl	8001474 <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001078:	f000 f8e2 	bl	8001240 <MX_TIM1_Init>
	MX_TIM2_Init();
 800107c:	f000 f938 	bl	80012f0 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001080:	f000 f982 	bl	8001388 <MX_TIM3_Init>
	MX_USART6_UART_Init();
 8001084:	f000 fa20 	bl	80014c8 <MX_USART6_UART_Init>
	MX_I2C1_Init();
 8001088:	f000 f8ac 	bl	80011e4 <MX_I2C1_Init>
	/* USER CODE BEGIN 2 */
	//start micros
	HAL_TIM_Base_Start_IT(&htim2);
 800108c:	481c      	ldr	r0, [pc, #112]	; (8001100 <main+0x9c>)
 800108e:	f004 fcfd 	bl	8005a8c <HAL_TIM_Base_Start_IT>
	//Encoder start
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 8001092:	213c      	movs	r1, #60	; 0x3c
 8001094:	481b      	ldr	r0, [pc, #108]	; (8001104 <main+0xa0>)
 8001096:	f004 ff0b 	bl	8005eb0 <HAL_TIM_Encoder_Start>
	//PWM start AIN1
	HAL_TIM_Base_Start(&htim3);
 800109a:	481b      	ldr	r0, [pc, #108]	; (8001108 <main+0xa4>)
 800109c:	f004 fc9c 	bl	80059d8 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010a0:	2100      	movs	r1, #0
 80010a2:	4819      	ldr	r0, [pc, #100]	; (8001108 <main+0xa4>)
 80010a4:	f004 fdae 	bl	8005c04 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 5000;
 80010a8:	4b17      	ldr	r3, [pc, #92]	; (8001108 <main+0xa4>)
 80010aa:	681b      	ldr	r3, [r3, #0]
 80010ac:	f241 3288 	movw	r2, #5000	; 0x1388
 80010b0:	635a      	str	r2, [r3, #52]	; 0x34
	I2C();
 80010b2:	f000 faef 	bl	8001694 <I2C>
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		gotoSethome();
 80010b6:	f000 ffc5 	bl	8002044 <gotoSethome>
		if (micros() - Timestamp >= dt){
 80010ba:	f001 fbb9 	bl	8002830 <micros>
 80010be:	4b13      	ldr	r3, [pc, #76]	; (800110c <main+0xa8>)
 80010c0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010c4:	1a84      	subs	r4, r0, r2
 80010c6:	eb61 0503 	sbc.w	r5, r1, r3
 80010ca:	4b11      	ldr	r3, [pc, #68]	; (8001110 <main+0xac>)
 80010cc:	881b      	ldrh	r3, [r3, #0]
 80010ce:	b29a      	uxth	r2, r3
 80010d0:	f04f 0300 	mov.w	r3, #0
 80010d4:	429d      	cmp	r5, r3
 80010d6:	bf08      	it	eq
 80010d8:	4294      	cmpeq	r4, r2
 80010da:	d3ec      	bcc.n	80010b6 <main+0x52>
			Timestamp = micros();
 80010dc:	f001 fba8 	bl	8002830 <micros>
 80010e0:	4602      	mov	r2, r0
 80010e2:	460b      	mov	r3, r1
 80010e4:	4909      	ldr	r1, [pc, #36]	; (800110c <main+0xa8>)
 80010e6:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory(Timestamp);
 80010ea:	4b08      	ldr	r3, [pc, #32]	; (800110c <main+0xa8>)
 80010ec:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f0:	4610      	mov	r0, r2
 80010f2:	4619      	mov	r1, r3
 80010f4:	f000 fb54 	bl	80017a0 <trajectory>
			//			piVelocity();
			kalman();
 80010f8:	f000 ffba 	bl	8002070 <kalman>
		gotoSethome();
 80010fc:	e7db      	b.n	80010b6 <main+0x52>
 80010fe:	bf00      	nop
 8001100:	200002bc 	.word	0x200002bc
 8001104:	20000230 	.word	0x20000230
 8001108:	200001e8 	.word	0x200001e8
 800110c:	20000108 	.word	0x20000108
 8001110:	2000000c 	.word	0x2000000c

08001114 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001114:	b580      	push	{r7, lr}
 8001116:	b094      	sub	sp, #80	; 0x50
 8001118:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800111a:	f107 0320 	add.w	r3, r7, #32
 800111e:	2230      	movs	r2, #48	; 0x30
 8001120:	2100      	movs	r1, #0
 8001122:	4618      	mov	r0, r3
 8001124:	f005 ff92 	bl	800704c <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001128:	f107 030c 	add.w	r3, r7, #12
 800112c:	2200      	movs	r2, #0
 800112e:	601a      	str	r2, [r3, #0]
 8001130:	605a      	str	r2, [r3, #4]
 8001132:	609a      	str	r2, [r3, #8]
 8001134:	60da      	str	r2, [r3, #12]
 8001136:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 8001138:	2300      	movs	r3, #0
 800113a:	60bb      	str	r3, [r7, #8]
 800113c:	4b27      	ldr	r3, [pc, #156]	; (80011dc <SystemClock_Config+0xc8>)
 800113e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001140:	4a26      	ldr	r2, [pc, #152]	; (80011dc <SystemClock_Config+0xc8>)
 8001142:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001146:	6413      	str	r3, [r2, #64]	; 0x40
 8001148:	4b24      	ldr	r3, [pc, #144]	; (80011dc <SystemClock_Config+0xc8>)
 800114a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800114c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001150:	60bb      	str	r3, [r7, #8]
 8001152:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001154:	2300      	movs	r3, #0
 8001156:	607b      	str	r3, [r7, #4]
 8001158:	4b21      	ldr	r3, [pc, #132]	; (80011e0 <SystemClock_Config+0xcc>)
 800115a:	681b      	ldr	r3, [r3, #0]
 800115c:	4a20      	ldr	r2, [pc, #128]	; (80011e0 <SystemClock_Config+0xcc>)
 800115e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8001162:	6013      	str	r3, [r2, #0]
 8001164:	4b1e      	ldr	r3, [pc, #120]	; (80011e0 <SystemClock_Config+0xcc>)
 8001166:	681b      	ldr	r3, [r3, #0]
 8001168:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 800116c:	607b      	str	r3, [r7, #4]
 800116e:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 8001170:	2302      	movs	r3, #2
 8001172:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 8001174:	2301      	movs	r3, #1
 8001176:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 8001178:	2310      	movs	r3, #16
 800117a:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 800117c:	2302      	movs	r3, #2
 800117e:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 8001180:	2300      	movs	r3, #0
 8001182:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 8001184:	2308      	movs	r3, #8
 8001186:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 8001188:	2364      	movs	r3, #100	; 0x64
 800118a:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 800118c:	2302      	movs	r3, #2
 800118e:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001190:	2304      	movs	r3, #4
 8001192:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001194:	f107 0320 	add.w	r3, r7, #32
 8001198:	4618      	mov	r0, r3
 800119a:	f003 ff59 	bl	8005050 <HAL_RCC_OscConfig>
 800119e:	4603      	mov	r3, r0
 80011a0:	2b00      	cmp	r3, #0
 80011a2:	d001      	beq.n	80011a8 <SystemClock_Config+0x94>
	{
		Error_Handler();
 80011a4:	f001 fb5e 	bl	8002864 <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011a8:	230f      	movs	r3, #15
 80011aa:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ac:	2302      	movs	r3, #2
 80011ae:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011b0:	2300      	movs	r3, #0
 80011b2:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011b4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011b8:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011ba:	2300      	movs	r3, #0
 80011bc:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011be:	f107 030c 	add.w	r3, r7, #12
 80011c2:	2103      	movs	r1, #3
 80011c4:	4618      	mov	r0, r3
 80011c6:	f004 f9bb 	bl	8005540 <HAL_RCC_ClockConfig>
 80011ca:	4603      	mov	r3, r0
 80011cc:	2b00      	cmp	r3, #0
 80011ce:	d001      	beq.n	80011d4 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 80011d0:	f001 fb48 	bl	8002864 <Error_Handler>
	}
}
 80011d4:	bf00      	nop
 80011d6:	3750      	adds	r7, #80	; 0x50
 80011d8:	46bd      	mov	sp, r7
 80011da:	bd80      	pop	{r7, pc}
 80011dc:	40023800 	.word	0x40023800
 80011e0:	40007000 	.word	0x40007000

080011e4 <MX_I2C1_Init>:
 * @brief I2C1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_I2C1_Init(void)
{
 80011e4:	b580      	push	{r7, lr}
 80011e6:	af00      	add	r7, sp, #0
	/* USER CODE END I2C1_Init 0 */

	/* USER CODE BEGIN I2C1_Init 1 */

	/* USER CODE END I2C1_Init 1 */
	hi2c1.Instance = I2C1;
 80011e8:	4b12      	ldr	r3, [pc, #72]	; (8001234 <MX_I2C1_Init+0x50>)
 80011ea:	4a13      	ldr	r2, [pc, #76]	; (8001238 <MX_I2C1_Init+0x54>)
 80011ec:	601a      	str	r2, [r3, #0]
	hi2c1.Init.ClockSpeed = 100000;
 80011ee:	4b11      	ldr	r3, [pc, #68]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f0:	4a12      	ldr	r2, [pc, #72]	; (800123c <MX_I2C1_Init+0x58>)
 80011f2:	605a      	str	r2, [r3, #4]
	hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 80011f4:	4b0f      	ldr	r3, [pc, #60]	; (8001234 <MX_I2C1_Init+0x50>)
 80011f6:	2200      	movs	r2, #0
 80011f8:	609a      	str	r2, [r3, #8]
	hi2c1.Init.OwnAddress1 = 0;
 80011fa:	4b0e      	ldr	r3, [pc, #56]	; (8001234 <MX_I2C1_Init+0x50>)
 80011fc:	2200      	movs	r2, #0
 80011fe:	60da      	str	r2, [r3, #12]
	hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001200:	4b0c      	ldr	r3, [pc, #48]	; (8001234 <MX_I2C1_Init+0x50>)
 8001202:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001206:	611a      	str	r2, [r3, #16]
	hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001208:	4b0a      	ldr	r3, [pc, #40]	; (8001234 <MX_I2C1_Init+0x50>)
 800120a:	2200      	movs	r2, #0
 800120c:	615a      	str	r2, [r3, #20]
	hi2c1.Init.OwnAddress2 = 0;
 800120e:	4b09      	ldr	r3, [pc, #36]	; (8001234 <MX_I2C1_Init+0x50>)
 8001210:	2200      	movs	r2, #0
 8001212:	619a      	str	r2, [r3, #24]
	hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001214:	4b07      	ldr	r3, [pc, #28]	; (8001234 <MX_I2C1_Init+0x50>)
 8001216:	2200      	movs	r2, #0
 8001218:	61da      	str	r2, [r3, #28]
	hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800121a:	4b06      	ldr	r3, [pc, #24]	; (8001234 <MX_I2C1_Init+0x50>)
 800121c:	2200      	movs	r2, #0
 800121e:	621a      	str	r2, [r3, #32]
	if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001220:	4804      	ldr	r0, [pc, #16]	; (8001234 <MX_I2C1_Init+0x50>)
 8001222:	f002 f91b 	bl	800345c <HAL_I2C_Init>
 8001226:	4603      	mov	r3, r0
 8001228:	2b00      	cmp	r3, #0
 800122a:	d001      	beq.n	8001230 <MX_I2C1_Init+0x4c>
	{
		Error_Handler();
 800122c:	f001 fb1a 	bl	8002864 <Error_Handler>
	}
	/* USER CODE BEGIN I2C1_Init 2 */

	/* USER CODE END I2C1_Init 2 */

}
 8001230:	bf00      	nop
 8001232:	bd80      	pop	{r7, pc}
 8001234:	20000194 	.word	0x20000194
 8001238:	40005400 	.word	0x40005400
 800123c:	000186a0 	.word	0x000186a0

08001240 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001240:	b580      	push	{r7, lr}
 8001242:	b08c      	sub	sp, #48	; 0x30
 8001244:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 8001246:	f107 030c 	add.w	r3, r7, #12
 800124a:	2224      	movs	r2, #36	; 0x24
 800124c:	2100      	movs	r1, #0
 800124e:	4618      	mov	r0, r3
 8001250:	f005 fefc 	bl	800704c <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001254:	1d3b      	adds	r3, r7, #4
 8001256:	2200      	movs	r2, #0
 8001258:	601a      	str	r2, [r3, #0]
 800125a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 800125c:	4b22      	ldr	r3, [pc, #136]	; (80012e8 <MX_TIM1_Init+0xa8>)
 800125e:	4a23      	ldr	r2, [pc, #140]	; (80012ec <MX_TIM1_Init+0xac>)
 8001260:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 8001262:	4b21      	ldr	r3, [pc, #132]	; (80012e8 <MX_TIM1_Init+0xa8>)
 8001264:	2200      	movs	r2, #0
 8001266:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001268:	4b1f      	ldr	r3, [pc, #124]	; (80012e8 <MX_TIM1_Init+0xa8>)
 800126a:	2200      	movs	r2, #0
 800126c:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2047;
 800126e:	4b1e      	ldr	r3, [pc, #120]	; (80012e8 <MX_TIM1_Init+0xa8>)
 8001270:	f240 72ff 	movw	r2, #2047	; 0x7ff
 8001274:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001276:	4b1c      	ldr	r3, [pc, #112]	; (80012e8 <MX_TIM1_Init+0xa8>)
 8001278:	2200      	movs	r2, #0
 800127a:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 800127c:	4b1a      	ldr	r3, [pc, #104]	; (80012e8 <MX_TIM1_Init+0xa8>)
 800127e:	2200      	movs	r2, #0
 8001280:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001282:	4b19      	ldr	r3, [pc, #100]	; (80012e8 <MX_TIM1_Init+0xa8>)
 8001284:	2200      	movs	r2, #0
 8001286:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 8001288:	2303      	movs	r3, #3
 800128a:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 800128c:	2300      	movs	r3, #0
 800128e:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 8001290:	2301      	movs	r3, #1
 8001292:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 8001294:	2300      	movs	r3, #0
 8001296:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 3;
 8001298:	2303      	movs	r3, #3
 800129a:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 800129c:	2300      	movs	r3, #0
 800129e:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012a0:	2301      	movs	r3, #1
 80012a2:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012a4:	2300      	movs	r3, #0
 80012a6:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 5;
 80012a8:	2305      	movs	r3, #5
 80012aa:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012ac:	f107 030c 	add.w	r3, r7, #12
 80012b0:	4619      	mov	r1, r3
 80012b2:	480d      	ldr	r0, [pc, #52]	; (80012e8 <MX_TIM1_Init+0xa8>)
 80012b4:	f004 fd56 	bl	8005d64 <HAL_TIM_Encoder_Init>
 80012b8:	4603      	mov	r3, r0
 80012ba:	2b00      	cmp	r3, #0
 80012bc:	d001      	beq.n	80012c2 <MX_TIM1_Init+0x82>
	{
		Error_Handler();
 80012be:	f001 fad1 	bl	8002864 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012c2:	2300      	movs	r3, #0
 80012c4:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012c6:	2300      	movs	r3, #0
 80012c8:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012ca:	1d3b      	adds	r3, r7, #4
 80012cc:	4619      	mov	r1, r3
 80012ce:	4806      	ldr	r0, [pc, #24]	; (80012e8 <MX_TIM1_Init+0xa8>)
 80012d0:	f005 fbfa 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 80012d4:	4603      	mov	r3, r0
 80012d6:	2b00      	cmp	r3, #0
 80012d8:	d001      	beq.n	80012de <MX_TIM1_Init+0x9e>
	{
		Error_Handler();
 80012da:	f001 fac3 	bl	8002864 <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80012de:	bf00      	nop
 80012e0:	3730      	adds	r7, #48	; 0x30
 80012e2:	46bd      	mov	sp, r7
 80012e4:	bd80      	pop	{r7, pc}
 80012e6:	bf00      	nop
 80012e8:	20000230 	.word	0x20000230
 80012ec:	40010000 	.word	0x40010000

080012f0 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 80012f0:	b580      	push	{r7, lr}
 80012f2:	b086      	sub	sp, #24
 80012f4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80012f6:	f107 0308 	add.w	r3, r7, #8
 80012fa:	2200      	movs	r2, #0
 80012fc:	601a      	str	r2, [r3, #0]
 80012fe:	605a      	str	r2, [r3, #4]
 8001300:	609a      	str	r2, [r3, #8]
 8001302:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001304:	463b      	mov	r3, r7
 8001306:	2200      	movs	r2, #0
 8001308:	601a      	str	r2, [r3, #0]
 800130a:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 800130c:	4b1d      	ldr	r3, [pc, #116]	; (8001384 <MX_TIM2_Init+0x94>)
 800130e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001312:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 8001314:	4b1b      	ldr	r3, [pc, #108]	; (8001384 <MX_TIM2_Init+0x94>)
 8001316:	2263      	movs	r2, #99	; 0x63
 8001318:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800131a:	4b1a      	ldr	r3, [pc, #104]	; (8001384 <MX_TIM2_Init+0x94>)
 800131c:	2200      	movs	r2, #0
 800131e:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001320:	4b18      	ldr	r3, [pc, #96]	; (8001384 <MX_TIM2_Init+0x94>)
 8001322:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001326:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001328:	4b16      	ldr	r3, [pc, #88]	; (8001384 <MX_TIM2_Init+0x94>)
 800132a:	2200      	movs	r2, #0
 800132c:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800132e:	4b15      	ldr	r3, [pc, #84]	; (8001384 <MX_TIM2_Init+0x94>)
 8001330:	2200      	movs	r2, #0
 8001332:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001334:	4813      	ldr	r0, [pc, #76]	; (8001384 <MX_TIM2_Init+0x94>)
 8001336:	f004 faff 	bl	8005938 <HAL_TIM_Base_Init>
 800133a:	4603      	mov	r3, r0
 800133c:	2b00      	cmp	r3, #0
 800133e:	d001      	beq.n	8001344 <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8001340:	f001 fa90 	bl	8002864 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001344:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001348:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800134a:	f107 0308 	add.w	r3, r7, #8
 800134e:	4619      	mov	r1, r3
 8001350:	480c      	ldr	r0, [pc, #48]	; (8001384 <MX_TIM2_Init+0x94>)
 8001352:	f005 f801 	bl	8006358 <HAL_TIM_ConfigClockSource>
 8001356:	4603      	mov	r3, r0
 8001358:	2b00      	cmp	r3, #0
 800135a:	d001      	beq.n	8001360 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 800135c:	f001 fa82 	bl	8002864 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001360:	2300      	movs	r3, #0
 8001362:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001364:	2300      	movs	r3, #0
 8001366:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001368:	463b      	mov	r3, r7
 800136a:	4619      	mov	r1, r3
 800136c:	4805      	ldr	r0, [pc, #20]	; (8001384 <MX_TIM2_Init+0x94>)
 800136e:	f005 fbab 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 8001372:	4603      	mov	r3, r0
 8001374:	2b00      	cmp	r3, #0
 8001376:	d001      	beq.n	800137c <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8001378:	f001 fa74 	bl	8002864 <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 800137c:	bf00      	nop
 800137e:	3718      	adds	r7, #24
 8001380:	46bd      	mov	sp, r7
 8001382:	bd80      	pop	{r7, pc}
 8001384:	200002bc 	.word	0x200002bc

08001388 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 8001388:	b580      	push	{r7, lr}
 800138a:	b08e      	sub	sp, #56	; 0x38
 800138c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800138e:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001392:	2200      	movs	r2, #0
 8001394:	601a      	str	r2, [r3, #0]
 8001396:	605a      	str	r2, [r3, #4]
 8001398:	609a      	str	r2, [r3, #8]
 800139a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800139c:	f107 0320 	add.w	r3, r7, #32
 80013a0:	2200      	movs	r2, #0
 80013a2:	601a      	str	r2, [r3, #0]
 80013a4:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80013a6:	1d3b      	adds	r3, r7, #4
 80013a8:	2200      	movs	r2, #0
 80013aa:	601a      	str	r2, [r3, #0]
 80013ac:	605a      	str	r2, [r3, #4]
 80013ae:	609a      	str	r2, [r3, #8]
 80013b0:	60da      	str	r2, [r3, #12]
 80013b2:	611a      	str	r2, [r3, #16]
 80013b4:	615a      	str	r2, [r3, #20]
 80013b6:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013b8:	4b2c      	ldr	r3, [pc, #176]	; (800146c <MX_TIM3_Init+0xe4>)
 80013ba:	4a2d      	ldr	r2, [pc, #180]	; (8001470 <MX_TIM3_Init+0xe8>)
 80013bc:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 80013be:	4b2b      	ldr	r3, [pc, #172]	; (800146c <MX_TIM3_Init+0xe4>)
 80013c0:	2263      	movs	r2, #99	; 0x63
 80013c2:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013c4:	4b29      	ldr	r3, [pc, #164]	; (800146c <MX_TIM3_Init+0xe4>)
 80013c6:	2200      	movs	r2, #0
 80013c8:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000;
 80013ca:	4b28      	ldr	r3, [pc, #160]	; (800146c <MX_TIM3_Init+0xe4>)
 80013cc:	f242 7210 	movw	r2, #10000	; 0x2710
 80013d0:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013d2:	4b26      	ldr	r3, [pc, #152]	; (800146c <MX_TIM3_Init+0xe4>)
 80013d4:	2200      	movs	r2, #0
 80013d6:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013d8:	4b24      	ldr	r3, [pc, #144]	; (800146c <MX_TIM3_Init+0xe4>)
 80013da:	2200      	movs	r2, #0
 80013dc:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013de:	4823      	ldr	r0, [pc, #140]	; (800146c <MX_TIM3_Init+0xe4>)
 80013e0:	f004 faaa 	bl	8005938 <HAL_TIM_Base_Init>
 80013e4:	4603      	mov	r3, r0
 80013e6:	2b00      	cmp	r3, #0
 80013e8:	d001      	beq.n	80013ee <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 80013ea:	f001 fa3b 	bl	8002864 <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 80013ee:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013f2:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 80013f4:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013f8:	4619      	mov	r1, r3
 80013fa:	481c      	ldr	r0, [pc, #112]	; (800146c <MX_TIM3_Init+0xe4>)
 80013fc:	f004 ffac 	bl	8006358 <HAL_TIM_ConfigClockSource>
 8001400:	4603      	mov	r3, r0
 8001402:	2b00      	cmp	r3, #0
 8001404:	d001      	beq.n	800140a <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 8001406:	f001 fa2d 	bl	8002864 <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800140a:	4818      	ldr	r0, [pc, #96]	; (800146c <MX_TIM3_Init+0xe4>)
 800140c:	f004 fba0 	bl	8005b50 <HAL_TIM_PWM_Init>
 8001410:	4603      	mov	r3, r0
 8001412:	2b00      	cmp	r3, #0
 8001414:	d001      	beq.n	800141a <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 8001416:	f001 fa25 	bl	8002864 <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800141a:	2300      	movs	r3, #0
 800141c:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800141e:	2300      	movs	r3, #0
 8001420:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001422:	f107 0320 	add.w	r3, r7, #32
 8001426:	4619      	mov	r1, r3
 8001428:	4810      	ldr	r0, [pc, #64]	; (800146c <MX_TIM3_Init+0xe4>)
 800142a:	f005 fb4d 	bl	8006ac8 <HAL_TIMEx_MasterConfigSynchronization>
 800142e:	4603      	mov	r3, r0
 8001430:	2b00      	cmp	r3, #0
 8001432:	d001      	beq.n	8001438 <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 8001434:	f001 fa16 	bl	8002864 <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001438:	2360      	movs	r3, #96	; 0x60
 800143a:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 800143c:	2300      	movs	r3, #0
 800143e:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001440:	2300      	movs	r3, #0
 8001442:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001444:	2300      	movs	r3, #0
 8001446:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001448:	1d3b      	adds	r3, r7, #4
 800144a:	2200      	movs	r2, #0
 800144c:	4619      	mov	r1, r3
 800144e:	4807      	ldr	r0, [pc, #28]	; (800146c <MX_TIM3_Init+0xe4>)
 8001450:	f004 fec4 	bl	80061dc <HAL_TIM_PWM_ConfigChannel>
 8001454:	4603      	mov	r3, r0
 8001456:	2b00      	cmp	r3, #0
 8001458:	d001      	beq.n	800145e <MX_TIM3_Init+0xd6>
	{
		Error_Handler();
 800145a:	f001 fa03 	bl	8002864 <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 800145e:	4803      	ldr	r0, [pc, #12]	; (800146c <MX_TIM3_Init+0xe4>)
 8001460:	f001 fb12 	bl	8002a88 <HAL_TIM_MspPostInit>

}
 8001464:	bf00      	nop
 8001466:	3738      	adds	r7, #56	; 0x38
 8001468:	46bd      	mov	sp, r7
 800146a:	bd80      	pop	{r7, pc}
 800146c:	200001e8 	.word	0x200001e8
 8001470:	40000400 	.word	0x40000400

08001474 <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 8001474:	b580      	push	{r7, lr}
 8001476:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001478:	4b11      	ldr	r3, [pc, #68]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800147a:	4a12      	ldr	r2, [pc, #72]	; (80014c4 <MX_USART2_UART_Init+0x50>)
 800147c:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 800147e:	4b10      	ldr	r3, [pc, #64]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001480:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001484:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 8001486:	4b0e      	ldr	r3, [pc, #56]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001488:	2200      	movs	r2, #0
 800148a:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 800148c:	4b0c      	ldr	r3, [pc, #48]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800148e:	2200      	movs	r2, #0
 8001490:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 8001492:	4b0b      	ldr	r3, [pc, #44]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 8001494:	2200      	movs	r2, #0
 8001496:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 8001498:	4b09      	ldr	r3, [pc, #36]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 800149a:	220c      	movs	r2, #12
 800149c:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800149e:	4b08      	ldr	r3, [pc, #32]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014a4:	4b06      	ldr	r3, [pc, #24]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80014aa:	4805      	ldr	r0, [pc, #20]	; (80014c0 <MX_USART2_UART_Init+0x4c>)
 80014ac:	f005 fb8e 	bl	8006bcc <HAL_UART_Init>
 80014b0:	4603      	mov	r3, r0
 80014b2:	2b00      	cmp	r3, #0
 80014b4:	d001      	beq.n	80014ba <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80014b6:	f001 f9d5 	bl	8002864 <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014ba:	bf00      	nop
 80014bc:	bd80      	pop	{r7, pc}
 80014be:	bf00      	nop
 80014c0:	20000304 	.word	0x20000304
 80014c4:	40004400 	.word	0x40004400

080014c8 <MX_USART6_UART_Init>:
 * @brief USART6 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART6_UART_Init(void)
{
 80014c8:	b580      	push	{r7, lr}
 80014ca:	af00      	add	r7, sp, #0
	/* USER CODE END USART6_Init 0 */

	/* USER CODE BEGIN USART6_Init 1 */

	/* USER CODE END USART6_Init 1 */
	huart6.Instance = USART6;
 80014cc:	4b11      	ldr	r3, [pc, #68]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014ce:	4a12      	ldr	r2, [pc, #72]	; (8001518 <MX_USART6_UART_Init+0x50>)
 80014d0:	601a      	str	r2, [r3, #0]
	huart6.Init.BaudRate = 115200;
 80014d2:	4b10      	ldr	r3, [pc, #64]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014d4:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 80014d8:	605a      	str	r2, [r3, #4]
	huart6.Init.WordLength = UART_WORDLENGTH_8B;
 80014da:	4b0e      	ldr	r3, [pc, #56]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014dc:	2200      	movs	r2, #0
 80014de:	609a      	str	r2, [r3, #8]
	huart6.Init.StopBits = UART_STOPBITS_1;
 80014e0:	4b0c      	ldr	r3, [pc, #48]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014e2:	2200      	movs	r2, #0
 80014e4:	60da      	str	r2, [r3, #12]
	huart6.Init.Parity = UART_PARITY_NONE;
 80014e6:	4b0b      	ldr	r3, [pc, #44]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	611a      	str	r2, [r3, #16]
	huart6.Init.Mode = UART_MODE_TX_RX;
 80014ec:	4b09      	ldr	r3, [pc, #36]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014ee:	220c      	movs	r2, #12
 80014f0:	615a      	str	r2, [r3, #20]
	huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014f2:	4b08      	ldr	r3, [pc, #32]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014f4:	2200      	movs	r2, #0
 80014f6:	619a      	str	r2, [r3, #24]
	huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 80014f8:	4b06      	ldr	r3, [pc, #24]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 80014fa:	2200      	movs	r2, #0
 80014fc:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart6) != HAL_OK)
 80014fe:	4805      	ldr	r0, [pc, #20]	; (8001514 <MX_USART6_UART_Init+0x4c>)
 8001500:	f005 fb64 	bl	8006bcc <HAL_UART_Init>
 8001504:	4603      	mov	r3, r0
 8001506:	2b00      	cmp	r3, #0
 8001508:	d001      	beq.n	800150e <MX_USART6_UART_Init+0x46>
	{
		Error_Handler();
 800150a:	f001 f9ab 	bl	8002864 <Error_Handler>
	}
	/* USER CODE BEGIN USART6_Init 2 */

	/* USER CODE END USART6_Init 2 */

}
 800150e:	bf00      	nop
 8001510:	bd80      	pop	{r7, pc}
 8001512:	bf00      	nop
 8001514:	20000278 	.word	0x20000278
 8001518:	40011400 	.word	0x40011400

0800151c <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 800151c:	b580      	push	{r7, lr}
 800151e:	b08a      	sub	sp, #40	; 0x28
 8001520:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 8001522:	f107 0314 	add.w	r3, r7, #20
 8001526:	2200      	movs	r2, #0
 8001528:	601a      	str	r2, [r3, #0]
 800152a:	605a      	str	r2, [r3, #4]
 800152c:	609a      	str	r2, [r3, #8]
 800152e:	60da      	str	r2, [r3, #12]
 8001530:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 8001532:	2300      	movs	r3, #0
 8001534:	613b      	str	r3, [r7, #16]
 8001536:	4b41      	ldr	r3, [pc, #260]	; (800163c <MX_GPIO_Init+0x120>)
 8001538:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800153a:	4a40      	ldr	r2, [pc, #256]	; (800163c <MX_GPIO_Init+0x120>)
 800153c:	f043 0304 	orr.w	r3, r3, #4
 8001540:	6313      	str	r3, [r2, #48]	; 0x30
 8001542:	4b3e      	ldr	r3, [pc, #248]	; (800163c <MX_GPIO_Init+0x120>)
 8001544:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001546:	f003 0304 	and.w	r3, r3, #4
 800154a:	613b      	str	r3, [r7, #16]
 800154c:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 800154e:	2300      	movs	r3, #0
 8001550:	60fb      	str	r3, [r7, #12]
 8001552:	4b3a      	ldr	r3, [pc, #232]	; (800163c <MX_GPIO_Init+0x120>)
 8001554:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001556:	4a39      	ldr	r2, [pc, #228]	; (800163c <MX_GPIO_Init+0x120>)
 8001558:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 800155c:	6313      	str	r3, [r2, #48]	; 0x30
 800155e:	4b37      	ldr	r3, [pc, #220]	; (800163c <MX_GPIO_Init+0x120>)
 8001560:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001562:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001566:	60fb      	str	r3, [r7, #12]
 8001568:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800156a:	2300      	movs	r3, #0
 800156c:	60bb      	str	r3, [r7, #8]
 800156e:	4b33      	ldr	r3, [pc, #204]	; (800163c <MX_GPIO_Init+0x120>)
 8001570:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001572:	4a32      	ldr	r2, [pc, #200]	; (800163c <MX_GPIO_Init+0x120>)
 8001574:	f043 0301 	orr.w	r3, r3, #1
 8001578:	6313      	str	r3, [r2, #48]	; 0x30
 800157a:	4b30      	ldr	r3, [pc, #192]	; (800163c <MX_GPIO_Init+0x120>)
 800157c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157e:	f003 0301 	and.w	r3, r3, #1
 8001582:	60bb      	str	r3, [r7, #8]
 8001584:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 8001586:	2300      	movs	r3, #0
 8001588:	607b      	str	r3, [r7, #4]
 800158a:	4b2c      	ldr	r3, [pc, #176]	; (800163c <MX_GPIO_Init+0x120>)
 800158c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800158e:	4a2b      	ldr	r2, [pc, #172]	; (800163c <MX_GPIO_Init+0x120>)
 8001590:	f043 0302 	orr.w	r3, r3, #2
 8001594:	6313      	str	r3, [r2, #48]	; 0x30
 8001596:	4b29      	ldr	r3, [pc, #164]	; (800163c <MX_GPIO_Init+0x120>)
 8001598:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800159a:	f003 0302 	and.w	r3, r3, #2
 800159e:	607b      	str	r3, [r7, #4]
 80015a0:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 80015a2:	2200      	movs	r2, #0
 80015a4:	2120      	movs	r1, #32
 80015a6:	4826      	ldr	r0, [pc, #152]	; (8001640 <MX_GPIO_Init+0x124>)
 80015a8:	f001 ff26 	bl	80033f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 80015ac:	2200      	movs	r2, #0
 80015ae:	f44f 7140 	mov.w	r1, #768	; 0x300
 80015b2:	4824      	ldr	r0, [pc, #144]	; (8001644 <MX_GPIO_Init+0x128>)
 80015b4:	f001 ff20 	bl	80033f8 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 80015b8:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 80015bc:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 80015be:	4b22      	ldr	r3, [pc, #136]	; (8001648 <MX_GPIO_Init+0x12c>)
 80015c0:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015c2:	2300      	movs	r3, #0
 80015c4:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 80015c6:	f107 0314 	add.w	r3, r7, #20
 80015ca:	4619      	mov	r1, r3
 80015cc:	481f      	ldr	r0, [pc, #124]	; (800164c <MX_GPIO_Init+0x130>)
 80015ce:	f001 fd8f 	bl	80030f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 80015d2:	2320      	movs	r3, #32
 80015d4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 80015d6:	2301      	movs	r3, #1
 80015d8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015da:	2300      	movs	r3, #0
 80015dc:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015de:	2300      	movs	r3, #0
 80015e0:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015e2:	f107 0314 	add.w	r3, r7, #20
 80015e6:	4619      	mov	r1, r3
 80015e8:	4815      	ldr	r0, [pc, #84]	; (8001640 <MX_GPIO_Init+0x124>)
 80015ea:	f001 fd81 	bl	80030f0 <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015ee:	2380      	movs	r3, #128	; 0x80
 80015f0:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015f2:	4b17      	ldr	r3, [pc, #92]	; (8001650 <MX_GPIO_Init+0x134>)
 80015f4:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015f6:	2300      	movs	r3, #0
 80015f8:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015fa:	f107 0314 	add.w	r3, r7, #20
 80015fe:	4619      	mov	r1, r3
 8001600:	480f      	ldr	r0, [pc, #60]	; (8001640 <MX_GPIO_Init+0x124>)
 8001602:	f001 fd75 	bl	80030f0 <HAL_GPIO_Init>

	/*Configure GPIO pins : PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8001606:	f44f 7340 	mov.w	r3, #768	; 0x300
 800160a:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800160c:	2311      	movs	r3, #17
 800160e:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 8001610:	2301      	movs	r3, #1
 8001612:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001614:	2300      	movs	r3, #0
 8001616:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8001618:	f107 0314 	add.w	r3, r7, #20
 800161c:	4619      	mov	r1, r3
 800161e:	4809      	ldr	r0, [pc, #36]	; (8001644 <MX_GPIO_Init+0x128>)
 8001620:	f001 fd66 	bl	80030f0 <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 8001624:	2200      	movs	r2, #0
 8001626:	2100      	movs	r1, #0
 8001628:	2017      	movs	r0, #23
 800162a:	f001 fcec 	bl	8003006 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800162e:	2017      	movs	r0, #23
 8001630:	f001 fd05 	bl	800303e <HAL_NVIC_EnableIRQ>

}
 8001634:	bf00      	nop
 8001636:	3728      	adds	r7, #40	; 0x28
 8001638:	46bd      	mov	sp, r7
 800163a:	bd80      	pop	{r7, pc}
 800163c:	40023800 	.word	0x40023800
 8001640:	40020000 	.word	0x40020000
 8001644:	40020400 	.word	0x40020400
 8001648:	10210000 	.word	0x10210000
 800164c:	40020800 	.word	0x40020800
 8001650:	10110000 	.word	0x10110000

08001654 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001654:	b580      	push	{r7, lr}
 8001656:	b082      	sub	sp, #8
 8001658:	af00      	add	r7, sp, #0
 800165a:	4603      	mov	r3, r0
 800165c:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){
 800165e:	88fb      	ldrh	r3, [r7, #6]
 8001660:	2b80      	cmp	r3, #128	; 0x80
 8001662:	d10c      	bne.n	800167e <HAL_GPIO_EXTI_Callback+0x2a>
		cP = 0;
 8001664:	4b08      	ldr	r3, [pc, #32]	; (8001688 <HAL_GPIO_EXTI_Callback+0x34>)
 8001666:	2200      	movs	r2, #0
 8001668:	701a      	strb	r2, [r3, #0]
		velocity = 0;
 800166a:	4b08      	ldr	r3, [pc, #32]	; (800168c <HAL_GPIO_EXTI_Callback+0x38>)
 800166c:	f04f 0200 	mov.w	r2, #0
 8001670:	601a      	str	r2, [r3, #0]
		SetHome = 0;
 8001672:	4b07      	ldr	r3, [pc, #28]	; (8001690 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001674:	2200      	movs	r2, #0
 8001676:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001678:	2017      	movs	r0, #23
 800167a:	f001 fcee 	bl	800305a <HAL_NVIC_DisableIRQ>
	}
}
 800167e:	bf00      	nop
 8001680:	3708      	adds	r7, #8
 8001682:	46bd      	mov	sp, r7
 8001684:	bd80      	pop	{r7, pc}
 8001686:	bf00      	nop
 8001688:	200000d0 	.word	0x200000d0
 800168c:	200000dc 	.word	0x200000dc
 8001690:	200000ec 	.word	0x200000ec

08001694 <I2C>:

void I2C(){
 8001694:	b480      	push	{r7}
 8001696:	b083      	sub	sp, #12
 8001698:	af00      	add	r7, sp, #0
	const uint8_t laserAddress = 0x23<<1;
 800169a:	2346      	movs	r3, #70	; 0x46
 800169c:	71fb      	strb	r3, [r7, #7]
	static uint8_t pdataStart[1] = {0x45};
	//	HAL_I2C_Master_Transmit_IT(&hi2c1, laserAddress, pdataStart, 1);
}
 800169e:	bf00      	nop
 80016a0:	370c      	adds	r7, #12
 80016a2:	46bd      	mov	sp, r7
 80016a4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80016a8:	4770      	bx	lr
 80016aa:	0000      	movs	r0, r0
 80016ac:	0000      	movs	r0, r0
	...

080016b0 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 80016b0:	b5b0      	push	{r4, r5, r7, lr}
 80016b2:	b086      	sub	sp, #24
 80016b4:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 80016b6:	4b36      	ldr	r3, [pc, #216]	; (8001790 <EncoderVelocity_Update+0xe0>)
 80016b8:	681b      	ldr	r3, [r3, #0]
 80016ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80016bc:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 80016be:	f001 f8b7 	bl	8002830 <micros>
 80016c2:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 80016c6:	4b33      	ldr	r3, [pc, #204]	; (8001794 <EncoderVelocity_Update+0xe4>)
 80016c8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80016cc:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 80016d0:	1a84      	subs	r4, r0, r2
 80016d2:	eb61 0503 	sbc.w	r5, r1, r3
 80016d6:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80016da:	4b2f      	ldr	r3, [pc, #188]	; (8001798 <EncoderVelocity_Update+0xe8>)
 80016dc:	681b      	ldr	r3, [r3, #0]
 80016de:	693a      	ldr	r2, [r7, #16]
 80016e0:	1ad3      	subs	r3, r2, r3
 80016e2:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80016e4:	697b      	ldr	r3, [r7, #20]
 80016e6:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80016ea:	db04      	blt.n	80016f6 <EncoderVelocity_Update+0x46>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80016ec:	697b      	ldr	r3, [r7, #20]
 80016ee:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80016f2:	617b      	str	r3, [r7, #20]
 80016f4:	e007      	b.n	8001706 <EncoderVelocity_Update+0x56>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80016f6:	697b      	ldr	r3, [r7, #20]
 80016f8:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 80016fc:	dc03      	bgt.n	8001706 <EncoderVelocity_Update+0x56>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80016fe:	697b      	ldr	r3, [r7, #20]
 8001700:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 8001704:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 8001706:	4a24      	ldr	r2, [pc, #144]	; (8001798 <EncoderVelocity_Update+0xe8>)
 8001708:	693b      	ldr	r3, [r7, #16]
 800170a:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 800170c:	4921      	ldr	r1, [pc, #132]	; (8001794 <EncoderVelocity_Update+0xe4>)
 800170e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8001712:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000*2*3.14) / (float) (EncoderTimeDiff *2048*4);
 8001716:	697b      	ldr	r3, [r7, #20]
 8001718:	4a20      	ldr	r2, [pc, #128]	; (800179c <EncoderVelocity_Update+0xec>)
 800171a:	fb02 f303 	mul.w	r3, r2, r3
 800171e:	4618      	mov	r0, r3
 8001720:	f7fe feac 	bl	800047c <__aeabi_i2d>
 8001724:	a318      	add	r3, pc, #96	; (adr r3, 8001788 <EncoderVelocity_Update+0xd8>)
 8001726:	e9d3 2300 	ldrd	r2, r3, [r3]
 800172a:	f7fe ff11 	bl	8000550 <__aeabi_dmul>
 800172e:	4602      	mov	r2, r0
 8001730:	460b      	mov	r3, r1
 8001732:	4614      	mov	r4, r2
 8001734:	461d      	mov	r5, r3
 8001736:	e9d7 0100 	ldrd	r0, r1, [r7]
 800173a:	f04f 0200 	mov.w	r2, #0
 800173e:	f04f 0300 	mov.w	r3, #0
 8001742:	034b      	lsls	r3, r1, #13
 8001744:	ea43 43d0 	orr.w	r3, r3, r0, lsr #19
 8001748:	0342      	lsls	r2, r0, #13
 800174a:	4610      	mov	r0, r2
 800174c:	4619      	mov	r1, r3
 800174e:	f7ff fac7 	bl	8000ce0 <__aeabi_ul2f>
 8001752:	4603      	mov	r3, r0
 8001754:	4618      	mov	r0, r3
 8001756:	f7fe fea3 	bl	80004a0 <__aeabi_f2d>
 800175a:	4602      	mov	r2, r0
 800175c:	460b      	mov	r3, r1
 800175e:	4620      	mov	r0, r4
 8001760:	4629      	mov	r1, r5
 8001762:	f7ff f81f 	bl	80007a4 <__aeabi_ddiv>
 8001766:	4602      	mov	r2, r0
 8001768:	460b      	mov	r3, r1
 800176a:	4610      	mov	r0, r2
 800176c:	4619      	mov	r1, r3
 800176e:	f7ff f99f 	bl	8000ab0 <__aeabi_d2f>
 8001772:	4603      	mov	r3, r0
 8001774:	ee07 3a90 	vmov	s15, r3

}
 8001778:	eeb0 0a67 	vmov.f32	s0, s15
 800177c:	3718      	adds	r7, #24
 800177e:	46bd      	mov	sp, r7
 8001780:	bdb0      	pop	{r4, r5, r7, pc}
 8001782:	bf00      	nop
 8001784:	f3af 8000 	nop.w
 8001788:	51eb851f 	.word	0x51eb851f
 800178c:	40091eb8 	.word	0x40091eb8
 8001790:	20000230 	.word	0x20000230
 8001794:	20000120 	.word	0x20000120
 8001798:	20000128 	.word	0x20000128
 800179c:	001e8480 	.word	0x001e8480

080017a0 <trajectory>:

void trajectory(uint64_t Timestamp){
 80017a0:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 80017a4:	b082      	sub	sp, #8
 80017a6:	af00      	add	r7, sp, #0
 80017a8:	e9c7 0100 	strd	r0, r1, [r7]
	static float a2 = 0;
	static float a3 = 0;
	static float a4 = 0;
	static float a5 = 0;
	static uint64_t setTime = 0;
	state[0] = start;
 80017ac:	4b48      	ldr	r3, [pc, #288]	; (80018d0 <trajectory+0x130>)
 80017ae:	781b      	ldrb	r3, [r3, #0]
 80017b0:	461a      	mov	r2, r3
 80017b2:	4b48      	ldr	r3, [pc, #288]	; (80018d4 <trajectory+0x134>)
 80017b4:	701a      	strb	r2, [r3, #0]
	rawPosition[0] = (float)HTIM_ENCODER.Instance->CNT*90/2048;
 80017b6:	4b48      	ldr	r3, [pc, #288]	; (80018d8 <trajectory+0x138>)
 80017b8:	681b      	ldr	r3, [r3, #0]
 80017ba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80017bc:	ee07 3a90 	vmov	s15, r3
 80017c0:	eef8 7a67 	vcvt.f32.u32	s15, s15
 80017c4:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80018dc <trajectory+0x13c>
 80017c8:	ee27 7a87 	vmul.f32	s14, s15, s14
 80017cc:	eddf 6a44 	vldr	s13, [pc, #272]	; 80018e0 <trajectory+0x140>
 80017d0:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80017d4:	4b43      	ldr	r3, [pc, #268]	; (80018e4 <trajectory+0x144>)
 80017d6:	edc3 7a00 	vstr	s15, [r3]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 80)){
 80017da:	4b42      	ldr	r3, [pc, #264]	; (80018e4 <trajectory+0x144>)
 80017dc:	edd3 7a00 	vldr	s15, [r3]
 80017e0:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80017e4:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017e8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80017ec:	d510      	bpl.n	8001810 <trajectory+0x70>
 80017ee:	4b3d      	ldr	r3, [pc, #244]	; (80018e4 <trajectory+0x144>)
 80017f0:	edd3 7a01 	vldr	s15, [r3, #4]
 80017f4:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80018e8 <trajectory+0x148>
 80017f8:	eef4 7ac7 	vcmpe.f32	s15, s14
 80017fc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001800:	dd06      	ble.n	8001810 <trajectory+0x70>
		cP += 1;
 8001802:	4b3a      	ldr	r3, [pc, #232]	; (80018ec <trajectory+0x14c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	3301      	adds	r3, #1
 8001808:	b2da      	uxtb	r2, r3
 800180a:	4b38      	ldr	r3, [pc, #224]	; (80018ec <trajectory+0x14c>)
 800180c:	701a      	strb	r2, [r3, #0]
 800180e:	e019      	b.n	8001844 <trajectory+0xa4>
	}
	else if ((rawPosition[0] > 80 )&& (rawPosition[1] < 10)){
 8001810:	4b34      	ldr	r3, [pc, #208]	; (80018e4 <trajectory+0x144>)
 8001812:	edd3 7a00 	vldr	s15, [r3]
 8001816:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80018e8 <trajectory+0x148>
 800181a:	eef4 7ac7 	vcmpe.f32	s15, s14
 800181e:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001822:	dd0f      	ble.n	8001844 <trajectory+0xa4>
 8001824:	4b2f      	ldr	r3, [pc, #188]	; (80018e4 <trajectory+0x144>)
 8001826:	edd3 7a01 	vldr	s15, [r3, #4]
 800182a:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 800182e:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001832:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001836:	d505      	bpl.n	8001844 <trajectory+0xa4>
		cP -= 1;
 8001838:	4b2c      	ldr	r3, [pc, #176]	; (80018ec <trajectory+0x14c>)
 800183a:	781b      	ldrb	r3, [r3, #0]
 800183c:	3b01      	subs	r3, #1
 800183e:	b2da      	uxtb	r2, r3
 8001840:	4b2a      	ldr	r3, [pc, #168]	; (80018ec <trajectory+0x14c>)
 8001842:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 8001844:	4b29      	ldr	r3, [pc, #164]	; (80018ec <trajectory+0x14c>)
 8001846:	781b      	ldrb	r3, [r3, #0]
 8001848:	2b03      	cmp	r3, #3
 800184a:	d902      	bls.n	8001852 <trajectory+0xb2>
		cP = 0;
 800184c:	4b27      	ldr	r3, [pc, #156]	; (80018ec <trajectory+0x14c>)
 800184e:	2200      	movs	r2, #0
 8001850:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = (float)rawPosition[0] + cP*90;
 8001852:	4b24      	ldr	r3, [pc, #144]	; (80018e4 <trajectory+0x144>)
 8001854:	ed93 7a00 	vldr	s14, [r3]
 8001858:	4b24      	ldr	r3, [pc, #144]	; (80018ec <trajectory+0x14c>)
 800185a:	781b      	ldrb	r3, [r3, #0]
 800185c:	461a      	mov	r2, r3
 800185e:	235a      	movs	r3, #90	; 0x5a
 8001860:	fb03 f302 	mul.w	r3, r3, r2
 8001864:	ee07 3a90 	vmov	s15, r3
 8001868:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800186c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001870:	4b1f      	ldr	r3, [pc, #124]	; (80018f0 <trajectory+0x150>)
 8001872:	edc3 7a00 	vstr	s15, [r3]
	K = 0;
 8001876:	4b1f      	ldr	r3, [pc, #124]	; (80018f4 <trajectory+0x154>)
 8001878:	f04f 0200 	mov.w	r2, #0
 800187c:	601a      	str	r2, [r3, #0]
	if(state[0] == 1){
 800187e:	4b15      	ldr	r3, [pc, #84]	; (80018d4 <trajectory+0x134>)
 8001880:	781b      	ldrb	r3, [r3, #0]
 8001882:	2b01      	cmp	r3, #1
 8001884:	f040 8259 	bne.w	8001d3a <trajectory+0x59a>
		if(state[0] != state[1]){
 8001888:	4b12      	ldr	r3, [pc, #72]	; (80018d4 <trajectory+0x134>)
 800188a:	781a      	ldrb	r2, [r3, #0]
 800188c:	4b11      	ldr	r3, [pc, #68]	; (80018d4 <trajectory+0x134>)
 800188e:	785b      	ldrb	r3, [r3, #1]
 8001890:	429a      	cmp	r2, r3
 8001892:	d008      	beq.n	80018a6 <trajectory+0x106>
			setTime = Timestamp;
 8001894:	4918      	ldr	r1, [pc, #96]	; (80018f8 <trajectory+0x158>)
 8001896:	e9d7 2300 	ldrd	r2, r3, [r7]
 800189a:	e9c1 2300 	strd	r2, r3, [r1]
			startAngle = currentPosition;
 800189e:	4b14      	ldr	r3, [pc, #80]	; (80018f0 <trajectory+0x150>)
 80018a0:	681b      	ldr	r3, [r3, #0]
 80018a2:	4a16      	ldr	r2, [pc, #88]	; (80018fc <trajectory+0x15c>)
 80018a4:	6013      	str	r3, [r2, #0]
		}
		if(abs(finalAngle - startAngle) > 80){
 80018a6:	4b16      	ldr	r3, [pc, #88]	; (8001900 <trajectory+0x160>)
 80018a8:	ed93 7a00 	vldr	s14, [r3]
 80018ac:	4b13      	ldr	r3, [pc, #76]	; (80018fc <trajectory+0x15c>)
 80018ae:	edd3 7a00 	vldr	s15, [r3]
 80018b2:	ee77 7a67 	vsub.f32	s15, s14, s15
 80018b6:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018ba:	ee17 3a90 	vmov	r3, s15
 80018be:	2b00      	cmp	r3, #0
 80018c0:	bfb8      	it	lt
 80018c2:	425b      	neglt	r3, r3
 80018c4:	2b50      	cmp	r3, #80	; 0x50
 80018c6:	dd21      	ble.n	800190c <trajectory+0x16c>
			stopError = 5;
 80018c8:	4b0e      	ldr	r3, [pc, #56]	; (8001904 <trajectory+0x164>)
 80018ca:	4a0f      	ldr	r2, [pc, #60]	; (8001908 <trajectory+0x168>)
 80018cc:	601a      	str	r2, [r3, #0]
 80018ce:	e021      	b.n	8001914 <trajectory+0x174>
 80018d0:	20000106 	.word	0x20000106
 80018d4:	20000104 	.word	0x20000104
 80018d8:	20000230 	.word	0x20000230
 80018dc:	42b40000 	.word	0x42b40000
 80018e0:	45000000 	.word	0x45000000
 80018e4:	200000fc 	.word	0x200000fc
 80018e8:	42a00000 	.word	0x42a00000
 80018ec:	200000d0 	.word	0x200000d0
 80018f0:	200000f8 	.word	0x200000f8
 80018f4:	20000024 	.word	0x20000024
 80018f8:	20000130 	.word	0x20000130
 80018fc:	200000f0 	.word	0x200000f0
 8001900:	20000008 	.word	0x20000008
 8001904:	20000004 	.word	0x20000004
 8001908:	40a00000 	.word	0x40a00000
		}
		else{
			stopError = 0;
 800190c:	4bd8      	ldr	r3, [pc, #864]	; (8001c70 <trajectory+0x4d0>)
 800190e:	f04f 0200 	mov.w	r2, #0
 8001912:	601a      	str	r2, [r3, #0]
		}
		tim = (float) (Timestamp-setTime)/1000000;
 8001914:	4bd7      	ldr	r3, [pc, #860]	; (8001c74 <trajectory+0x4d4>)
 8001916:	e9d3 2300 	ldrd	r2, r3, [r3]
 800191a:	e9d7 0100 	ldrd	r0, r1, [r7]
 800191e:	1a84      	subs	r4, r0, r2
 8001920:	eb61 0503 	sbc.w	r5, r1, r3
 8001924:	4620      	mov	r0, r4
 8001926:	4629      	mov	r1, r5
 8001928:	f7ff f9da 	bl	8000ce0 <__aeabi_ul2f>
 800192c:	ee06 0a90 	vmov	s13, r0
 8001930:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8001c78 <trajectory+0x4d8>
 8001934:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001938:	4bd0      	ldr	r3, [pc, #832]	; (8001c7c <trajectory+0x4dc>)
 800193a:	edc3 7a00 	vstr	s15, [r3]
		tF = (float) (250*abs(finalAngle-startAngle)/(355*vMax));
 800193e:	4bd0      	ldr	r3, [pc, #832]	; (8001c80 <trajectory+0x4e0>)
 8001940:	ed93 7a00 	vldr	s14, [r3]
 8001944:	4bcf      	ldr	r3, [pc, #828]	; (8001c84 <trajectory+0x4e4>)
 8001946:	edd3 7a00 	vldr	s15, [r3]
 800194a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800194e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001952:	ee17 3a90 	vmov	r3, s15
 8001956:	2b00      	cmp	r3, #0
 8001958:	bfb8      	it	lt
 800195a:	425b      	neglt	r3, r3
 800195c:	22fa      	movs	r2, #250	; 0xfa
 800195e:	fb02 f303 	mul.w	r3, r2, r3
 8001962:	ee07 3a90 	vmov	s15, r3
 8001966:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800196a:	4bc7      	ldr	r3, [pc, #796]	; (8001c88 <trajectory+0x4e8>)
 800196c:	edd3 7a00 	vldr	s15, [r3]
 8001970:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8001c8c <trajectory+0x4ec>
 8001974:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001978:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800197c:	4bc4      	ldr	r3, [pc, #784]	; (8001c90 <trajectory+0x4f0>)
 800197e:	edc3 7a00 	vstr	s15, [r3]
		if ((tim <= tF)){
 8001982:	4bbe      	ldr	r3, [pc, #760]	; (8001c7c <trajectory+0x4dc>)
 8001984:	ed93 7a00 	vldr	s14, [r3]
 8001988:	4bc1      	ldr	r3, [pc, #772]	; (8001c90 <trajectory+0x4f0>)
 800198a:	edd3 7a00 	vldr	s15, [r3]
 800198e:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001992:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001996:	f200 8138 	bhi.w	8001c0a <trajectory+0x46a>
			//cubic trajectory
			a0 = startAngle;
 800199a:	4bba      	ldr	r3, [pc, #744]	; (8001c84 <trajectory+0x4e4>)
 800199c:	681b      	ldr	r3, [r3, #0]
 800199e:	4abd      	ldr	r2, [pc, #756]	; (8001c94 <trajectory+0x4f4>)
 80019a0:	6013      	str	r3, [r2, #0]
			a1 = 0;
 80019a2:	4bbd      	ldr	r3, [pc, #756]	; (8001c98 <trajectory+0x4f8>)
 80019a4:	f04f 0200 	mov.w	r2, #0
 80019a8:	601a      	str	r2, [r3, #0]
			a2 = (float) (3/pow(tF,2))*(finalAngle-startAngle);
 80019aa:	4bb9      	ldr	r3, [pc, #740]	; (8001c90 <trajectory+0x4f0>)
 80019ac:	681b      	ldr	r3, [r3, #0]
 80019ae:	4618      	mov	r0, r3
 80019b0:	f7fe fd76 	bl	80004a0 <__aeabi_f2d>
 80019b4:	4602      	mov	r2, r0
 80019b6:	460b      	mov	r3, r1
 80019b8:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 8001c58 <trajectory+0x4b8>
 80019bc:	ec43 2b10 	vmov	d0, r2, r3
 80019c0:	f005 fb4c 	bl	800705c <pow>
 80019c4:	ec53 2b10 	vmov	r2, r3, d0
 80019c8:	f04f 0000 	mov.w	r0, #0
 80019cc:	49b3      	ldr	r1, [pc, #716]	; (8001c9c <trajectory+0x4fc>)
 80019ce:	f7fe fee9 	bl	80007a4 <__aeabi_ddiv>
 80019d2:	4602      	mov	r2, r0
 80019d4:	460b      	mov	r3, r1
 80019d6:	4610      	mov	r0, r2
 80019d8:	4619      	mov	r1, r3
 80019da:	f7ff f869 	bl	8000ab0 <__aeabi_d2f>
 80019de:	ee06 0a90 	vmov	s13, r0
 80019e2:	4ba7      	ldr	r3, [pc, #668]	; (8001c80 <trajectory+0x4e0>)
 80019e4:	ed93 7a00 	vldr	s14, [r3]
 80019e8:	4ba6      	ldr	r3, [pc, #664]	; (8001c84 <trajectory+0x4e4>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019f2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019f6:	4baa      	ldr	r3, [pc, #680]	; (8001ca0 <trajectory+0x500>)
 80019f8:	edc3 7a00 	vstr	s15, [r3]
			a3 = (float) -(2/pow(tF,3))*(finalAngle-startAngle);
 80019fc:	4ba4      	ldr	r3, [pc, #656]	; (8001c90 <trajectory+0x4f0>)
 80019fe:	681b      	ldr	r3, [r3, #0]
 8001a00:	4618      	mov	r0, r3
 8001a02:	f7fe fd4d 	bl	80004a0 <__aeabi_f2d>
 8001a06:	4602      	mov	r2, r0
 8001a08:	460b      	mov	r3, r1
 8001a0a:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8001c60 <trajectory+0x4c0>
 8001a0e:	ec43 2b10 	vmov	d0, r2, r3
 8001a12:	f005 fb23 	bl	800705c <pow>
 8001a16:	ec53 2b10 	vmov	r2, r3, d0
 8001a1a:	f04f 0000 	mov.w	r0, #0
 8001a1e:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001a22:	f7fe febf 	bl	80007a4 <__aeabi_ddiv>
 8001a26:	4602      	mov	r2, r0
 8001a28:	460b      	mov	r3, r1
 8001a2a:	4610      	mov	r0, r2
 8001a2c:	4619      	mov	r1, r3
 8001a2e:	f7ff f83f 	bl	8000ab0 <__aeabi_d2f>
 8001a32:	4603      	mov	r3, r0
 8001a34:	ee07 3a90 	vmov	s15, r3
 8001a38:	eeb1 7a67 	vneg.f32	s14, s15
 8001a3c:	4b90      	ldr	r3, [pc, #576]	; (8001c80 <trajectory+0x4e0>)
 8001a3e:	edd3 6a00 	vldr	s13, [r3]
 8001a42:	4b90      	ldr	r3, [pc, #576]	; (8001c84 <trajectory+0x4e4>)
 8001a44:	edd3 7a00 	vldr	s15, [r3]
 8001a48:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a4c:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a50:	4b94      	ldr	r3, [pc, #592]	; (8001ca4 <trajectory+0x504>)
 8001a52:	edc3 7a00 	vstr	s15, [r3]
			position = (float) a0+ (a1*tim) +(a2*pow(tim,2)) +(a3*pow(tim,3));
 8001a56:	4b90      	ldr	r3, [pc, #576]	; (8001c98 <trajectory+0x4f8>)
 8001a58:	ed93 7a00 	vldr	s14, [r3]
 8001a5c:	4b87      	ldr	r3, [pc, #540]	; (8001c7c <trajectory+0x4dc>)
 8001a5e:	edd3 7a00 	vldr	s15, [r3]
 8001a62:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a66:	4b8b      	ldr	r3, [pc, #556]	; (8001c94 <trajectory+0x4f4>)
 8001a68:	edd3 7a00 	vldr	s15, [r3]
 8001a6c:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a70:	ee17 0a90 	vmov	r0, s15
 8001a74:	f7fe fd14 	bl	80004a0 <__aeabi_f2d>
 8001a78:	4604      	mov	r4, r0
 8001a7a:	460d      	mov	r5, r1
 8001a7c:	4b88      	ldr	r3, [pc, #544]	; (8001ca0 <trajectory+0x500>)
 8001a7e:	681b      	ldr	r3, [r3, #0]
 8001a80:	4618      	mov	r0, r3
 8001a82:	f7fe fd0d 	bl	80004a0 <__aeabi_f2d>
 8001a86:	4680      	mov	r8, r0
 8001a88:	4689      	mov	r9, r1
 8001a8a:	4b7c      	ldr	r3, [pc, #496]	; (8001c7c <trajectory+0x4dc>)
 8001a8c:	681b      	ldr	r3, [r3, #0]
 8001a8e:	4618      	mov	r0, r3
 8001a90:	f7fe fd06 	bl	80004a0 <__aeabi_f2d>
 8001a94:	4602      	mov	r2, r0
 8001a96:	460b      	mov	r3, r1
 8001a98:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8001c58 <trajectory+0x4b8>
 8001a9c:	ec43 2b10 	vmov	d0, r2, r3
 8001aa0:	f005 fadc 	bl	800705c <pow>
 8001aa4:	ec53 2b10 	vmov	r2, r3, d0
 8001aa8:	4640      	mov	r0, r8
 8001aaa:	4649      	mov	r1, r9
 8001aac:	f7fe fd50 	bl	8000550 <__aeabi_dmul>
 8001ab0:	4602      	mov	r2, r0
 8001ab2:	460b      	mov	r3, r1
 8001ab4:	4620      	mov	r0, r4
 8001ab6:	4629      	mov	r1, r5
 8001ab8:	f7fe fb94 	bl	80001e4 <__adddf3>
 8001abc:	4602      	mov	r2, r0
 8001abe:	460b      	mov	r3, r1
 8001ac0:	4690      	mov	r8, r2
 8001ac2:	4699      	mov	r9, r3
 8001ac4:	4b77      	ldr	r3, [pc, #476]	; (8001ca4 <trajectory+0x504>)
 8001ac6:	681b      	ldr	r3, [r3, #0]
 8001ac8:	4618      	mov	r0, r3
 8001aca:	f7fe fce9 	bl	80004a0 <__aeabi_f2d>
 8001ace:	4604      	mov	r4, r0
 8001ad0:	460d      	mov	r5, r1
 8001ad2:	4b6a      	ldr	r3, [pc, #424]	; (8001c7c <trajectory+0x4dc>)
 8001ad4:	681b      	ldr	r3, [r3, #0]
 8001ad6:	4618      	mov	r0, r3
 8001ad8:	f7fe fce2 	bl	80004a0 <__aeabi_f2d>
 8001adc:	4602      	mov	r2, r0
 8001ade:	460b      	mov	r3, r1
 8001ae0:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8001c60 <trajectory+0x4c0>
 8001ae4:	ec43 2b10 	vmov	d0, r2, r3
 8001ae8:	f005 fab8 	bl	800705c <pow>
 8001aec:	ec53 2b10 	vmov	r2, r3, d0
 8001af0:	4620      	mov	r0, r4
 8001af2:	4629      	mov	r1, r5
 8001af4:	f7fe fd2c 	bl	8000550 <__aeabi_dmul>
 8001af8:	4602      	mov	r2, r0
 8001afa:	460b      	mov	r3, r1
 8001afc:	4640      	mov	r0, r8
 8001afe:	4649      	mov	r1, r9
 8001b00:	f7fe fb70 	bl	80001e4 <__adddf3>
 8001b04:	4602      	mov	r2, r0
 8001b06:	460b      	mov	r3, r1
 8001b08:	4610      	mov	r0, r2
 8001b0a:	4619      	mov	r1, r3
 8001b0c:	f7fe ffd0 	bl	8000ab0 <__aeabi_d2f>
 8001b10:	4603      	mov	r3, r0
 8001b12:	4a65      	ldr	r2, [pc, #404]	; (8001ca8 <trajectory+0x508>)
 8001b14:	6013      	str	r3, [r2, #0]
			calculatedVelocity = (float) (a1 +(2*a2*tim) +(3*a3*pow(tim,2)))/6;
 8001b16:	4b62      	ldr	r3, [pc, #392]	; (8001ca0 <trajectory+0x500>)
 8001b18:	edd3 7a00 	vldr	s15, [r3]
 8001b1c:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b20:	4b56      	ldr	r3, [pc, #344]	; (8001c7c <trajectory+0x4dc>)
 8001b22:	edd3 7a00 	vldr	s15, [r3]
 8001b26:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001b2a:	4b5b      	ldr	r3, [pc, #364]	; (8001c98 <trajectory+0x4f8>)
 8001b2c:	edd3 7a00 	vldr	s15, [r3]
 8001b30:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b34:	ee17 0a90 	vmov	r0, s15
 8001b38:	f7fe fcb2 	bl	80004a0 <__aeabi_f2d>
 8001b3c:	4604      	mov	r4, r0
 8001b3e:	460d      	mov	r5, r1
 8001b40:	4b58      	ldr	r3, [pc, #352]	; (8001ca4 <trajectory+0x504>)
 8001b42:	edd3 7a00 	vldr	s15, [r3]
 8001b46:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001b4a:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b4e:	ee17 0a90 	vmov	r0, s15
 8001b52:	f7fe fca5 	bl	80004a0 <__aeabi_f2d>
 8001b56:	4680      	mov	r8, r0
 8001b58:	4689      	mov	r9, r1
 8001b5a:	4b48      	ldr	r3, [pc, #288]	; (8001c7c <trajectory+0x4dc>)
 8001b5c:	681b      	ldr	r3, [r3, #0]
 8001b5e:	4618      	mov	r0, r3
 8001b60:	f7fe fc9e 	bl	80004a0 <__aeabi_f2d>
 8001b64:	4602      	mov	r2, r0
 8001b66:	460b      	mov	r3, r1
 8001b68:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8001c58 <trajectory+0x4b8>
 8001b6c:	ec43 2b10 	vmov	d0, r2, r3
 8001b70:	f005 fa74 	bl	800705c <pow>
 8001b74:	ec53 2b10 	vmov	r2, r3, d0
 8001b78:	4640      	mov	r0, r8
 8001b7a:	4649      	mov	r1, r9
 8001b7c:	f7fe fce8 	bl	8000550 <__aeabi_dmul>
 8001b80:	4602      	mov	r2, r0
 8001b82:	460b      	mov	r3, r1
 8001b84:	4620      	mov	r0, r4
 8001b86:	4629      	mov	r1, r5
 8001b88:	f7fe fb2c 	bl	80001e4 <__adddf3>
 8001b8c:	4602      	mov	r2, r0
 8001b8e:	460b      	mov	r3, r1
 8001b90:	4610      	mov	r0, r2
 8001b92:	4619      	mov	r1, r3
 8001b94:	f7fe ff8c 	bl	8000ab0 <__aeabi_d2f>
 8001b98:	ee06 0a90 	vmov	s13, r0
 8001b9c:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001ba0:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001ba4:	4b41      	ldr	r3, [pc, #260]	; (8001cac <trajectory+0x50c>)
 8001ba6:	edc3 7a00 	vstr	s15, [r3]
			alpha = (float) ((2*a2) +(6*a3*tim))*2*3.14/360;
 8001baa:	4b3d      	ldr	r3, [pc, #244]	; (8001ca0 <trajectory+0x500>)
 8001bac:	edd3 7a00 	vldr	s15, [r3]
 8001bb0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001bb4:	4b3b      	ldr	r3, [pc, #236]	; (8001ca4 <trajectory+0x504>)
 8001bb6:	edd3 7a00 	vldr	s15, [r3]
 8001bba:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001bbe:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001bc2:	4b2e      	ldr	r3, [pc, #184]	; (8001c7c <trajectory+0x4dc>)
 8001bc4:	edd3 7a00 	vldr	s15, [r3]
 8001bc8:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bcc:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001bd0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001bd4:	ee17 0a90 	vmov	r0, s15
 8001bd8:	f7fe fc62 	bl	80004a0 <__aeabi_f2d>
 8001bdc:	a322      	add	r3, pc, #136	; (adr r3, 8001c68 <trajectory+0x4c8>)
 8001bde:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001be2:	f7fe fcb5 	bl	8000550 <__aeabi_dmul>
 8001be6:	4602      	mov	r2, r0
 8001be8:	460b      	mov	r3, r1
 8001bea:	4610      	mov	r0, r2
 8001bec:	4619      	mov	r1, r3
 8001bee:	f04f 0200 	mov.w	r2, #0
 8001bf2:	4b2f      	ldr	r3, [pc, #188]	; (8001cb0 <trajectory+0x510>)
 8001bf4:	f7fe fdd6 	bl	80007a4 <__aeabi_ddiv>
 8001bf8:	4602      	mov	r2, r0
 8001bfa:	460b      	mov	r3, r1
 8001bfc:	4610      	mov	r0, r2
 8001bfe:	4619      	mov	r1, r3
 8001c00:	f7fe ff56 	bl	8000ab0 <__aeabi_d2f>
 8001c04:	4603      	mov	r3, r0
 8001c06:	4a2b      	ldr	r2, [pc, #172]	; (8001cb4 <trajectory+0x514>)
 8001c08:	6013      	str	r3, [r2, #0]
			//		a5 = (float) 6*(finalAngle-startAngle)/pow(tF,4);
			//		position = (float) a0 + a1*tim + a2*pow(tim,2) + a3*pow(tim,3) + a4*pow(tim,4) + a5*pow(tim,5);
			//		calculatedVelocity = (float) a1+ 2*a2*tim + 3*a3*pow(tim,2) + 4*a4*pow(tim,3) + 5*a5*pow(tim,4);
			//		alpha = (float) a2 + 6*a3*tim + 12*a4*pow(tim,2) + 20*a5*pow(tim,3);
		}
		if(abs(currentPosition - finalAngle) < 8){
 8001c0a:	4b2b      	ldr	r3, [pc, #172]	; (8001cb8 <trajectory+0x518>)
 8001c0c:	ed93 7a00 	vldr	s14, [r3]
 8001c10:	4b1b      	ldr	r3, [pc, #108]	; (8001c80 <trajectory+0x4e0>)
 8001c12:	edd3 7a00 	vldr	s15, [r3]
 8001c16:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c1a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c1e:	ee17 3a90 	vmov	r3, s15
 8001c22:	f113 0f07 	cmn.w	r3, #7
 8001c26:	f2c0 8081 	blt.w	8001d2c <trajectory+0x58c>
 8001c2a:	4b23      	ldr	r3, [pc, #140]	; (8001cb8 <trajectory+0x518>)
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	4b13      	ldr	r3, [pc, #76]	; (8001c80 <trajectory+0x4e0>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c3a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c3e:	ee17 3a90 	vmov	r3, s15
 8001c42:	2b07      	cmp	r3, #7
 8001c44:	dc72      	bgt.n	8001d2c <trajectory+0x58c>
			K =2000;
 8001c46:	4b1d      	ldr	r3, [pc, #116]	; (8001cbc <trajectory+0x51c>)
 8001c48:	4a1d      	ldr	r2, [pc, #116]	; (8001cc0 <trajectory+0x520>)
 8001c4a:	601a      	str	r2, [r3, #0]
			if(velocity < 0){
 8001c4c:	4b1d      	ldr	r3, [pc, #116]	; (8001cc4 <trajectory+0x524>)
 8001c4e:	edd3 7a00 	vldr	s15, [r3]
 8001c52:	e039      	b.n	8001cc8 <trajectory+0x528>
 8001c54:	f3af 8000 	nop.w
 8001c58:	00000000 	.word	0x00000000
 8001c5c:	40000000 	.word	0x40000000
 8001c60:	00000000 	.word	0x00000000
 8001c64:	40080000 	.word	0x40080000
 8001c68:	51eb851f 	.word	0x51eb851f
 8001c6c:	40091eb8 	.word	0x40091eb8
 8001c70:	20000004 	.word	0x20000004
 8001c74:	20000130 	.word	0x20000130
 8001c78:	49742400 	.word	0x49742400
 8001c7c:	200000e8 	.word	0x200000e8
 8001c80:	20000008 	.word	0x20000008
 8001c84:	200000f0 	.word	0x200000f0
 8001c88:	20000010 	.word	0x20000010
 8001c8c:	43b18000 	.word	0x43b18000
 8001c90:	20000118 	.word	0x20000118
 8001c94:	20000138 	.word	0x20000138
 8001c98:	2000013c 	.word	0x2000013c
 8001c9c:	40080000 	.word	0x40080000
 8001ca0:	20000140 	.word	0x20000140
 8001ca4:	20000144 	.word	0x20000144
 8001ca8:	200000e0 	.word	0x200000e0
 8001cac:	200000d8 	.word	0x200000d8
 8001cb0:	40768000 	.word	0x40768000
 8001cb4:	200000e4 	.word	0x200000e4
 8001cb8:	200000f8 	.word	0x200000f8
 8001cbc:	20000024 	.word	0x20000024
 8001cc0:	44fa0000 	.word	0x44fa0000
 8001cc4:	200000dc 	.word	0x200000dc
 8001cc8:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001ccc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001cd0:	d503      	bpl.n	8001cda <trajectory+0x53a>
				velocity = -1;
 8001cd2:	4b1e      	ldr	r3, [pc, #120]	; (8001d4c <trajectory+0x5ac>)
 8001cd4:	4a1e      	ldr	r2, [pc, #120]	; (8001d50 <trajectory+0x5b0>)
 8001cd6:	601a      	str	r2, [r3, #0]
 8001cd8:	e003      	b.n	8001ce2 <trajectory+0x542>
			}
			else{
				velocity = 1;
 8001cda:	4b1c      	ldr	r3, [pc, #112]	; (8001d4c <trajectory+0x5ac>)
 8001cdc:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001ce0:	601a      	str	r2, [r3, #0]
			}
			if (abs(currentPosition - finalAngle) == 0){
 8001ce2:	4b1c      	ldr	r3, [pc, #112]	; (8001d54 <trajectory+0x5b4>)
 8001ce4:	ed93 7a00 	vldr	s14, [r3]
 8001ce8:	4b1b      	ldr	r3, [pc, #108]	; (8001d58 <trajectory+0x5b8>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001cf2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf6:	ee17 3a90 	vmov	r3, s15
 8001cfa:	2b00      	cmp	r3, #0
 8001cfc:	d11b      	bne.n	8001d36 <trajectory+0x596>
				start = 0;
 8001cfe:	4b17      	ldr	r3, [pc, #92]	; (8001d5c <trajectory+0x5bc>)
 8001d00:	2200      	movs	r2, #0
 8001d02:	701a      	strb	r2, [r3, #0]
				velocity = 0;
 8001d04:	4b11      	ldr	r3, [pc, #68]	; (8001d4c <trajectory+0x5ac>)
 8001d06:	f04f 0200 	mov.w	r2, #0
 8001d0a:	601a      	str	r2, [r3, #0]
				stopTime = Timestamp;
 8001d0c:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001d10:	f7fe ffe6 	bl	8000ce0 <__aeabi_ul2f>
 8001d14:	4603      	mov	r3, r0
 8001d16:	4a12      	ldr	r2, [pc, #72]	; (8001d60 <trajectory+0x5c0>)
 8001d18:	6013      	str	r3, [r2, #0]
				I2C();
 8001d1a:	f7ff fcbb 	bl	8001694 <I2C>
				state[1] = 0;
 8001d1e:	4b11      	ldr	r3, [pc, #68]	; (8001d64 <trajectory+0x5c4>)
 8001d20:	2200      	movs	r2, #0
 8001d22:	705a      	strb	r2, [r3, #1]
				state[0] = 0;
 8001d24:	4b0f      	ldr	r3, [pc, #60]	; (8001d64 <trajectory+0x5c4>)
 8001d26:	2200      	movs	r2, #0
 8001d28:	701a      	strb	r2, [r3, #0]
			if (abs(currentPosition - finalAngle) == 0){
 8001d2a:	e004      	b.n	8001d36 <trajectory+0x596>
			}
		}
		else{
			K = 1000;
 8001d2c:	4b0e      	ldr	r3, [pc, #56]	; (8001d68 <trajectory+0x5c8>)
 8001d2e:	4a0f      	ldr	r2, [pc, #60]	; (8001d6c <trajectory+0x5cc>)
 8001d30:	601a      	str	r2, [r3, #0]
			pidPosition();
 8001d32:	f000 f81f 	bl	8001d74 <pidPosition>
		}
		piVelocity();
 8001d36:	f000 f8b5 	bl	8001ea4 <piVelocity>
	}
	rawPosition[1] = rawPosition[0];
 8001d3a:	4b0d      	ldr	r3, [pc, #52]	; (8001d70 <trajectory+0x5d0>)
 8001d3c:	681b      	ldr	r3, [r3, #0]
 8001d3e:	4a0c      	ldr	r2, [pc, #48]	; (8001d70 <trajectory+0x5d0>)
 8001d40:	6053      	str	r3, [r2, #4]
}
 8001d42:	bf00      	nop
 8001d44:	3708      	adds	r7, #8
 8001d46:	46bd      	mov	sp, r7
 8001d48:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001d4c:	200000dc 	.word	0x200000dc
 8001d50:	bf800000 	.word	0xbf800000
 8001d54:	200000f8 	.word	0x200000f8
 8001d58:	20000008 	.word	0x20000008
 8001d5c:	20000106 	.word	0x20000106
 8001d60:	200000f4 	.word	0x200000f4
 8001d64:	20000104 	.word	0x20000104
 8001d68:	20000024 	.word	0x20000024
 8001d6c:	447a0000 	.word	0x447a0000
 8001d70:	200000fc 	.word	0x200000fc

08001d74 <pidPosition>:

void pidPosition(){
 8001d74:	b480      	push	{r7}
 8001d76:	af00      	add	r7, sp, #0
	static float errorP = 0;
	static float integralP = 0;
	static float derivativeP = 0;
	errorP = position - currentPosition;
 8001d78:	4b3f      	ldr	r3, [pc, #252]	; (8001e78 <pidPosition+0x104>)
 8001d7a:	ed93 7a00 	vldr	s14, [r3]
 8001d7e:	4b3f      	ldr	r3, [pc, #252]	; (8001e7c <pidPosition+0x108>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001d88:	4b3d      	ldr	r3, [pc, #244]	; (8001e80 <pidPosition+0x10c>)
 8001d8a:	edc3 7a00 	vstr	s15, [r3]
	integralP = integralP+errorP;
 8001d8e:	4b3d      	ldr	r3, [pc, #244]	; (8001e84 <pidPosition+0x110>)
 8001d90:	ed93 7a00 	vldr	s14, [r3]
 8001d94:	4b3a      	ldr	r3, [pc, #232]	; (8001e80 <pidPosition+0x10c>)
 8001d96:	edd3 7a00 	vldr	s15, [r3]
 8001d9a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d9e:	4b39      	ldr	r3, [pc, #228]	; (8001e84 <pidPosition+0x110>)
 8001da0:	edc3 7a00 	vstr	s15, [r3]
	velocity = Kp_p*errorP + Ki_p*integralP +Kd_p*(errorP-derivativeP);
 8001da4:	4b38      	ldr	r3, [pc, #224]	; (8001e88 <pidPosition+0x114>)
 8001da6:	ed93 7a00 	vldr	s14, [r3]
 8001daa:	4b35      	ldr	r3, [pc, #212]	; (8001e80 <pidPosition+0x10c>)
 8001dac:	edd3 7a00 	vldr	s15, [r3]
 8001db0:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001db4:	4b35      	ldr	r3, [pc, #212]	; (8001e8c <pidPosition+0x118>)
 8001db6:	edd3 6a00 	vldr	s13, [r3]
 8001dba:	4b32      	ldr	r3, [pc, #200]	; (8001e84 <pidPosition+0x110>)
 8001dbc:	edd3 7a00 	vldr	s15, [r3]
 8001dc0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001dc4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001dc8:	4b2d      	ldr	r3, [pc, #180]	; (8001e80 <pidPosition+0x10c>)
 8001dca:	edd3 6a00 	vldr	s13, [r3]
 8001dce:	4b30      	ldr	r3, [pc, #192]	; (8001e90 <pidPosition+0x11c>)
 8001dd0:	edd3 7a00 	vldr	s15, [r3]
 8001dd4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001dd8:	4b2e      	ldr	r3, [pc, #184]	; (8001e94 <pidPosition+0x120>)
 8001dda:	edd3 7a00 	vldr	s15, [r3]
 8001dde:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001de2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001de6:	4b2c      	ldr	r3, [pc, #176]	; (8001e98 <pidPosition+0x124>)
 8001de8:	edc3 7a00 	vstr	s15, [r3]
	derivativeP = errorP;
 8001dec:	4b24      	ldr	r3, [pc, #144]	; (8001e80 <pidPosition+0x10c>)
 8001dee:	681b      	ldr	r3, [r3, #0]
 8001df0:	4a27      	ldr	r2, [pc, #156]	; (8001e90 <pidPosition+0x11c>)
 8001df2:	6013      	str	r3, [r2, #0]
	if (velocity > vMax){
 8001df4:	4b28      	ldr	r3, [pc, #160]	; (8001e98 <pidPosition+0x124>)
 8001df6:	ed93 7a00 	vldr	s14, [r3]
 8001dfa:	4b28      	ldr	r3, [pc, #160]	; (8001e9c <pidPosition+0x128>)
 8001dfc:	edd3 7a00 	vldr	s15, [r3]
 8001e00:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e04:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e08:	dd04      	ble.n	8001e14 <pidPosition+0xa0>
		velocity = vMax;
 8001e0a:	4b24      	ldr	r3, [pc, #144]	; (8001e9c <pidPosition+0x128>)
 8001e0c:	681b      	ldr	r3, [r3, #0]
 8001e0e:	4a22      	ldr	r2, [pc, #136]	; (8001e98 <pidPosition+0x124>)
 8001e10:	6013      	str	r3, [r2, #0]
 8001e12:	e014      	b.n	8001e3e <pidPosition+0xca>
	}
	else if (velocity < -vMax){
 8001e14:	4b21      	ldr	r3, [pc, #132]	; (8001e9c <pidPosition+0x128>)
 8001e16:	edd3 7a00 	vldr	s15, [r3]
 8001e1a:	eeb1 7a67 	vneg.f32	s14, s15
 8001e1e:	4b1e      	ldr	r3, [pc, #120]	; (8001e98 <pidPosition+0x124>)
 8001e20:	edd3 7a00 	vldr	s15, [r3]
 8001e24:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001e28:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001e2c:	dd07      	ble.n	8001e3e <pidPosition+0xca>
		velocity = -vMax;
 8001e2e:	4b1b      	ldr	r3, [pc, #108]	; (8001e9c <pidPosition+0x128>)
 8001e30:	edd3 7a00 	vldr	s15, [r3]
 8001e34:	eef1 7a67 	vneg.f32	s15, s15
 8001e38:	4b17      	ldr	r3, [pc, #92]	; (8001e98 <pidPosition+0x124>)
 8001e3a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (start == 0){
 8001e3e:	4b18      	ldr	r3, [pc, #96]	; (8001ea0 <pidPosition+0x12c>)
 8001e40:	781b      	ldrb	r3, [r3, #0]
 8001e42:	f083 0301 	eor.w	r3, r3, #1
 8001e46:	b2db      	uxtb	r3, r3
 8001e48:	2b00      	cmp	r3, #0
 8001e4a:	d00f      	beq.n	8001e6c <pidPosition+0xf8>
		velocity = 0;
 8001e4c:	4b12      	ldr	r3, [pc, #72]	; (8001e98 <pidPosition+0x124>)
 8001e4e:	f04f 0200 	mov.w	r2, #0
 8001e52:	601a      	str	r2, [r3, #0]
		errorP = 0;
 8001e54:	4b0a      	ldr	r3, [pc, #40]	; (8001e80 <pidPosition+0x10c>)
 8001e56:	f04f 0200 	mov.w	r2, #0
 8001e5a:	601a      	str	r2, [r3, #0]
		integralP = 0;
 8001e5c:	4b09      	ldr	r3, [pc, #36]	; (8001e84 <pidPosition+0x110>)
 8001e5e:	f04f 0200 	mov.w	r2, #0
 8001e62:	601a      	str	r2, [r3, #0]
		derivativeP = 0;
 8001e64:	4b0a      	ldr	r3, [pc, #40]	; (8001e90 <pidPosition+0x11c>)
 8001e66:	f04f 0200 	mov.w	r2, #0
 8001e6a:	601a      	str	r2, [r3, #0]
	}
}
 8001e6c:	bf00      	nop
 8001e6e:	46bd      	mov	sp, r7
 8001e70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001e74:	4770      	bx	lr
 8001e76:	bf00      	nop
 8001e78:	200000e0 	.word	0x200000e0
 8001e7c:	200000f8 	.word	0x200000f8
 8001e80:	20000148 	.word	0x20000148
 8001e84:	2000014c 	.word	0x2000014c
 8001e88:	2000001c 	.word	0x2000001c
 8001e8c:	20000020 	.word	0x20000020
 8001e90:	20000150 	.word	0x20000150
 8001e94:	20000114 	.word	0x20000114
 8001e98:	200000dc 	.word	0x200000dc
 8001e9c:	20000010 	.word	0x20000010
 8001ea0:	20000106 	.word	0x20000106

08001ea4 <piVelocity>:

void piVelocity(){
 8001ea4:	b580      	push	{r7, lr}
 8001ea6:	af00      	add	r7, sp, #0
	static float error = 0;
	static float integral = 0;
	static float derivative = 0;
		error = abs(velocity) - abs(EncoderVel);
 8001ea8:	4b59      	ldr	r3, [pc, #356]	; (8002010 <piVelocity+0x16c>)
 8001eaa:	edd3 7a00 	vldr	s15, [r3]
 8001eae:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001eb2:	ee17 3a90 	vmov	r3, s15
 8001eb6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001eba:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ebe:	4b55      	ldr	r3, [pc, #340]	; (8002014 <piVelocity+0x170>)
 8001ec0:	edd3 7a00 	vldr	s15, [r3]
 8001ec4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec8:	ee17 3a90 	vmov	r3, s15
 8001ecc:	2b00      	cmp	r3, #0
 8001ece:	bfb8      	it	lt
 8001ed0:	425b      	neglt	r3, r3
 8001ed2:	1ad3      	subs	r3, r2, r3
 8001ed4:	ee07 3a90 	vmov	s15, r3
 8001ed8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001edc:	4b4e      	ldr	r3, [pc, #312]	; (8002018 <piVelocity+0x174>)
 8001ede:	edc3 7a00 	vstr	s15, [r3]
		integral = integral+error;
 8001ee2:	4b4e      	ldr	r3, [pc, #312]	; (800201c <piVelocity+0x178>)
 8001ee4:	ed93 7a00 	vldr	s14, [r3]
 8001ee8:	4b4b      	ldr	r3, [pc, #300]	; (8002018 <piVelocity+0x174>)
 8001eea:	edd3 7a00 	vldr	s15, [r3]
 8001eee:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001ef2:	4b4a      	ldr	r3, [pc, #296]	; (800201c <piVelocity+0x178>)
 8001ef4:	edc3 7a00 	vstr	s15, [r3]
		PWMOut = K + Kp*error + Ki*integral +Kd*(error-derivative);
 8001ef8:	4b49      	ldr	r3, [pc, #292]	; (8002020 <piVelocity+0x17c>)
 8001efa:	ed93 7a00 	vldr	s14, [r3]
 8001efe:	4b46      	ldr	r3, [pc, #280]	; (8002018 <piVelocity+0x174>)
 8001f00:	edd3 7a00 	vldr	s15, [r3]
 8001f04:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f08:	4b46      	ldr	r3, [pc, #280]	; (8002024 <piVelocity+0x180>)
 8001f0a:	edd3 7a00 	vldr	s15, [r3]
 8001f0e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f12:	4b45      	ldr	r3, [pc, #276]	; (8002028 <piVelocity+0x184>)
 8001f14:	edd3 6a00 	vldr	s13, [r3]
 8001f18:	4b40      	ldr	r3, [pc, #256]	; (800201c <piVelocity+0x178>)
 8001f1a:	edd3 7a00 	vldr	s15, [r3]
 8001f1e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f22:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f26:	4b3c      	ldr	r3, [pc, #240]	; (8002018 <piVelocity+0x174>)
 8001f28:	edd3 6a00 	vldr	s13, [r3]
 8001f2c:	4b3f      	ldr	r3, [pc, #252]	; (800202c <piVelocity+0x188>)
 8001f2e:	edd3 7a00 	vldr	s15, [r3]
 8001f32:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001f36:	4b3e      	ldr	r3, [pc, #248]	; (8002030 <piVelocity+0x18c>)
 8001f38:	edd3 7a00 	vldr	s15, [r3]
 8001f3c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f44:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001f48:	ee17 2a90 	vmov	r2, s15
 8001f4c:	4b39      	ldr	r3, [pc, #228]	; (8002034 <piVelocity+0x190>)
 8001f4e:	601a      	str	r2, [r3, #0]
		derivative = error;
 8001f50:	4b31      	ldr	r3, [pc, #196]	; (8002018 <piVelocity+0x174>)
 8001f52:	681b      	ldr	r3, [r3, #0]
 8001f54:	4a35      	ldr	r2, [pc, #212]	; (800202c <piVelocity+0x188>)
 8001f56:	6013      	str	r3, [r2, #0]
	if (abs(PWMOut) > 10000){
 8001f58:	4b36      	ldr	r3, [pc, #216]	; (8002034 <piVelocity+0x190>)
 8001f5a:	681b      	ldr	r3, [r3, #0]
 8001f5c:	2b00      	cmp	r3, #0
 8001f5e:	bfb8      	it	lt
 8001f60:	425b      	neglt	r3, r3
 8001f62:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f66:	4293      	cmp	r3, r2
 8001f68:	dd03      	ble.n	8001f72 <piVelocity+0xce>
		PWMOut = 10000;
 8001f6a:	4b32      	ldr	r3, [pc, #200]	; (8002034 <piVelocity+0x190>)
 8001f6c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001f70:	601a      	str	r2, [r3, #0]
	}

	if (velocity == 0){
 8001f72:	4b27      	ldr	r3, [pc, #156]	; (8002010 <piVelocity+0x16c>)
 8001f74:	edd3 7a00 	vldr	s15, [r3]
 8001f78:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001f7c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001f80:	d10e      	bne.n	8001fa0 <piVelocity+0xfc>
		PWMOut = 0;
 8001f82:	4b2c      	ldr	r3, [pc, #176]	; (8002034 <piVelocity+0x190>)
 8001f84:	2200      	movs	r2, #0
 8001f86:	601a      	str	r2, [r3, #0]
		error = 0;
 8001f88:	4b23      	ldr	r3, [pc, #140]	; (8002018 <piVelocity+0x174>)
 8001f8a:	f04f 0200 	mov.w	r2, #0
 8001f8e:	601a      	str	r2, [r3, #0]
		integral = 0;
 8001f90:	4b22      	ldr	r3, [pc, #136]	; (800201c <piVelocity+0x178>)
 8001f92:	f04f 0200 	mov.w	r2, #0
 8001f96:	601a      	str	r2, [r3, #0]
		derivative = 0;
 8001f98:	4b24      	ldr	r3, [pc, #144]	; (800202c <piVelocity+0x188>)
 8001f9a:	f04f 0200 	mov.w	r2, #0
 8001f9e:	601a      	str	r2, [r3, #0]
	}
	if(velocity < 0){
 8001fa0:	4b1b      	ldr	r3, [pc, #108]	; (8002010 <piVelocity+0x16c>)
 8001fa2:	edd3 7a00 	vldr	s15, [r3]
 8001fa6:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001faa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fae:	d50c      	bpl.n	8001fca <piVelocity+0x126>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8001fb0:	2201      	movs	r2, #1
 8001fb2:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fb6:	4820      	ldr	r0, [pc, #128]	; (8002038 <piVelocity+0x194>)
 8001fb8:	f001 fa1e 	bl	80033f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001fbc:	2200      	movs	r2, #0
 8001fbe:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fc2:	481d      	ldr	r0, [pc, #116]	; (8002038 <piVelocity+0x194>)
 8001fc4:	f001 fa18 	bl	80033f8 <HAL_GPIO_WritePin>
 8001fc8:	e013      	b.n	8001ff2 <piVelocity+0x14e>
	}
	else if (velocity > 0){
 8001fca:	4b11      	ldr	r3, [pc, #68]	; (8002010 <piVelocity+0x16c>)
 8001fcc:	edd3 7a00 	vldr	s15, [r3]
 8001fd0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001fd4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fd8:	dd0b      	ble.n	8001ff2 <piVelocity+0x14e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8001fda:	2201      	movs	r2, #1
 8001fdc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001fe0:	4815      	ldr	r0, [pc, #84]	; (8002038 <piVelocity+0x194>)
 8001fe2:	f001 fa09 	bl	80033f8 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8001fe6:	2200      	movs	r2, #0
 8001fe8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001fec:	4812      	ldr	r0, [pc, #72]	; (8002038 <piVelocity+0x194>)
 8001fee:	f001 fa03 	bl	80033f8 <HAL_GPIO_WritePin>
	}
	htim3.Instance->CCR1 = abs(PWMOut);
 8001ff2:	4b10      	ldr	r3, [pc, #64]	; (8002034 <piVelocity+0x190>)
 8001ff4:	681b      	ldr	r3, [r3, #0]
 8001ff6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001ffa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001ffe:	4b0f      	ldr	r3, [pc, #60]	; (800203c <piVelocity+0x198>)
 8002000:	681b      	ldr	r3, [r3, #0]
 8002002:	635a      	str	r2, [r3, #52]	; 0x34
	state[1] = state[0];
 8002004:	4b0e      	ldr	r3, [pc, #56]	; (8002040 <piVelocity+0x19c>)
 8002006:	781a      	ldrb	r2, [r3, #0]
 8002008:	4b0d      	ldr	r3, [pc, #52]	; (8002040 <piVelocity+0x19c>)
 800200a:	705a      	strb	r2, [r3, #1]
}
 800200c:	bf00      	nop
 800200e:	bd80      	pop	{r7, pc}
 8002010:	200000dc 	.word	0x200000dc
 8002014:	200000d4 	.word	0x200000d4
 8002018:	20000154 	.word	0x20000154
 800201c:	20000158 	.word	0x20000158
 8002020:	20000014 	.word	0x20000014
 8002024:	20000024 	.word	0x20000024
 8002028:	20000018 	.word	0x20000018
 800202c:	2000015c 	.word	0x2000015c
 8002030:	20000110 	.word	0x20000110
 8002034:	20000000 	.word	0x20000000
 8002038:	40020400 	.word	0x40020400
 800203c:	200001e8 	.word	0x200001e8
 8002040:	20000104 	.word	0x20000104

08002044 <gotoSethome>:
void gotoSethome(){
 8002044:	b580      	push	{r7, lr}
 8002046:	af00      	add	r7, sp, #0
	if (SetHome == 1){
 8002048:	4b05      	ldr	r3, [pc, #20]	; (8002060 <gotoSethome+0x1c>)
 800204a:	781b      	ldrb	r3, [r3, #0]
 800204c:	2b00      	cmp	r3, #0
 800204e:	d005      	beq.n	800205c <gotoSethome+0x18>
		velocity = 3;
 8002050:	4b04      	ldr	r3, [pc, #16]	; (8002064 <gotoSethome+0x20>)
 8002052:	4a05      	ldr	r2, [pc, #20]	; (8002068 <gotoSethome+0x24>)
 8002054:	601a      	str	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002056:	2017      	movs	r0, #23
 8002058:	f000 fff1 	bl	800303e <HAL_NVIC_EnableIRQ>
	}
}
 800205c:	bf00      	nop
 800205e:	bd80      	pop	{r7, pc}
 8002060:	200000ec 	.word	0x200000ec
 8002064:	200000dc 	.word	0x200000dc
 8002068:	40400000 	.word	0x40400000
 800206c:	00000000 	.word	0x00000000

08002070 <kalman>:
void kalman(){
 8002070:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002074:	af00      	add	r7, sp, #0
	static float P21predictPRE = 0;
	static float P22predictPRE = 0;
	static float errorVel = 0;
	static float delt = 0;

	delt = (float) dt/1000000;
 8002076:	4bda      	ldr	r3, [pc, #872]	; (80023e0 <kalman+0x370>)
 8002078:	881b      	ldrh	r3, [r3, #0]
 800207a:	ee07 3a90 	vmov	s15, r3
 800207e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002082:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80023e4 <kalman+0x374>
 8002086:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800208a:	4bd7      	ldr	r3, [pc, #860]	; (80023e8 <kalman+0x378>)
 800208c:	edc3 7a00 	vstr	s15, [r3]
	omegaPredict =  (float) omegaPredictPre;
 8002090:	4bd6      	ldr	r3, [pc, #856]	; (80023ec <kalman+0x37c>)
 8002092:	681b      	ldr	r3, [r3, #0]
 8002094:	4ad6      	ldr	r2, [pc, #856]	; (80023f0 <kalman+0x380>)
 8002096:	6013      	str	r3, [r2, #0]
	errorVel = (float) EncoderVelocity_Update() - omegaPredict;
 8002098:	f7ff fb0a 	bl	80016b0 <EncoderVelocity_Update>
 800209c:	eeb0 7a40 	vmov.f32	s14, s0
 80020a0:	4bd3      	ldr	r3, [pc, #844]	; (80023f0 <kalman+0x380>)
 80020a2:	edd3 7a00 	vldr	s15, [r3]
 80020a6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80020aa:	4bd2      	ldr	r3, [pc, #840]	; (80023f4 <kalman+0x384>)
 80020ac:	edc3 7a00 	vstr	s15, [r3]

	P11predict = (float) P11predictPRE+delt*P21predictPRE+(pow(Gl,2)*pow(delt,4))/4+(pow(delt,2)*(P12predictPRE+delt*P22predictPRE))/delt;
 80020b0:	4bcd      	ldr	r3, [pc, #820]	; (80023e8 <kalman+0x378>)
 80020b2:	ed93 7a00 	vldr	s14, [r3]
 80020b6:	4bd0      	ldr	r3, [pc, #832]	; (80023f8 <kalman+0x388>)
 80020b8:	edd3 7a00 	vldr	s15, [r3]
 80020bc:	ee27 7a27 	vmul.f32	s14, s14, s15
 80020c0:	4bce      	ldr	r3, [pc, #824]	; (80023fc <kalman+0x38c>)
 80020c2:	edd3 7a00 	vldr	s15, [r3]
 80020c6:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020ca:	ee17 0a90 	vmov	r0, s15
 80020ce:	f7fe f9e7 	bl	80004a0 <__aeabi_f2d>
 80020d2:	4604      	mov	r4, r0
 80020d4:	460d      	mov	r5, r1
 80020d6:	4bca      	ldr	r3, [pc, #808]	; (8002400 <kalman+0x390>)
 80020d8:	681b      	ldr	r3, [r3, #0]
 80020da:	4618      	mov	r0, r3
 80020dc:	f7fe f9e0 	bl	80004a0 <__aeabi_f2d>
 80020e0:	4602      	mov	r2, r0
 80020e2:	460b      	mov	r3, r1
 80020e4:	ed9f 1bba 	vldr	d1, [pc, #744]	; 80023d0 <kalman+0x360>
 80020e8:	ec43 2b10 	vmov	d0, r2, r3
 80020ec:	f004 ffb6 	bl	800705c <pow>
 80020f0:	ec59 8b10 	vmov	r8, r9, d0
 80020f4:	4bbc      	ldr	r3, [pc, #752]	; (80023e8 <kalman+0x378>)
 80020f6:	681b      	ldr	r3, [r3, #0]
 80020f8:	4618      	mov	r0, r3
 80020fa:	f7fe f9d1 	bl	80004a0 <__aeabi_f2d>
 80020fe:	4602      	mov	r2, r0
 8002100:	460b      	mov	r3, r1
 8002102:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 80023d8 <kalman+0x368>
 8002106:	ec43 2b10 	vmov	d0, r2, r3
 800210a:	f004 ffa7 	bl	800705c <pow>
 800210e:	ec53 2b10 	vmov	r2, r3, d0
 8002112:	4640      	mov	r0, r8
 8002114:	4649      	mov	r1, r9
 8002116:	f7fe fa1b 	bl	8000550 <__aeabi_dmul>
 800211a:	4602      	mov	r2, r0
 800211c:	460b      	mov	r3, r1
 800211e:	4610      	mov	r0, r2
 8002120:	4619      	mov	r1, r3
 8002122:	f04f 0200 	mov.w	r2, #0
 8002126:	4bb7      	ldr	r3, [pc, #732]	; (8002404 <kalman+0x394>)
 8002128:	f7fe fb3c 	bl	80007a4 <__aeabi_ddiv>
 800212c:	4602      	mov	r2, r0
 800212e:	460b      	mov	r3, r1
 8002130:	4620      	mov	r0, r4
 8002132:	4629      	mov	r1, r5
 8002134:	f7fe f856 	bl	80001e4 <__adddf3>
 8002138:	4602      	mov	r2, r0
 800213a:	460b      	mov	r3, r1
 800213c:	4614      	mov	r4, r2
 800213e:	461d      	mov	r5, r3
 8002140:	4ba9      	ldr	r3, [pc, #676]	; (80023e8 <kalman+0x378>)
 8002142:	681b      	ldr	r3, [r3, #0]
 8002144:	4618      	mov	r0, r3
 8002146:	f7fe f9ab 	bl	80004a0 <__aeabi_f2d>
 800214a:	4602      	mov	r2, r0
 800214c:	460b      	mov	r3, r1
 800214e:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 80023d0 <kalman+0x360>
 8002152:	ec43 2b10 	vmov	d0, r2, r3
 8002156:	f004 ff81 	bl	800705c <pow>
 800215a:	ec59 8b10 	vmov	r8, r9, d0
 800215e:	4ba2      	ldr	r3, [pc, #648]	; (80023e8 <kalman+0x378>)
 8002160:	ed93 7a00 	vldr	s14, [r3]
 8002164:	4ba8      	ldr	r3, [pc, #672]	; (8002408 <kalman+0x398>)
 8002166:	edd3 7a00 	vldr	s15, [r3]
 800216a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800216e:	4ba7      	ldr	r3, [pc, #668]	; (800240c <kalman+0x39c>)
 8002170:	edd3 7a00 	vldr	s15, [r3]
 8002174:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002178:	ee17 0a90 	vmov	r0, s15
 800217c:	f7fe f990 	bl	80004a0 <__aeabi_f2d>
 8002180:	4602      	mov	r2, r0
 8002182:	460b      	mov	r3, r1
 8002184:	4640      	mov	r0, r8
 8002186:	4649      	mov	r1, r9
 8002188:	f7fe f9e2 	bl	8000550 <__aeabi_dmul>
 800218c:	4602      	mov	r2, r0
 800218e:	460b      	mov	r3, r1
 8002190:	4690      	mov	r8, r2
 8002192:	4699      	mov	r9, r3
 8002194:	4b94      	ldr	r3, [pc, #592]	; (80023e8 <kalman+0x378>)
 8002196:	681b      	ldr	r3, [r3, #0]
 8002198:	4618      	mov	r0, r3
 800219a:	f7fe f981 	bl	80004a0 <__aeabi_f2d>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4640      	mov	r0, r8
 80021a4:	4649      	mov	r1, r9
 80021a6:	f7fe fafd 	bl	80007a4 <__aeabi_ddiv>
 80021aa:	4602      	mov	r2, r0
 80021ac:	460b      	mov	r3, r1
 80021ae:	4620      	mov	r0, r4
 80021b0:	4629      	mov	r1, r5
 80021b2:	f7fe f817 	bl	80001e4 <__adddf3>
 80021b6:	4602      	mov	r2, r0
 80021b8:	460b      	mov	r3, r1
 80021ba:	4610      	mov	r0, r2
 80021bc:	4619      	mov	r1, r3
 80021be:	f7fe fc77 	bl	8000ab0 <__aeabi_d2f>
 80021c2:	4603      	mov	r3, r0
 80021c4:	4a92      	ldr	r2, [pc, #584]	; (8002410 <kalman+0x3a0>)
 80021c6:	6013      	str	r3, [r2, #0]
	P12predict = (float) P12predictPRE+delt*P22predictPRE+(pow(Gl,2)*delt*pow(delt,2))/2;
 80021c8:	4b87      	ldr	r3, [pc, #540]	; (80023e8 <kalman+0x378>)
 80021ca:	ed93 7a00 	vldr	s14, [r3]
 80021ce:	4b8e      	ldr	r3, [pc, #568]	; (8002408 <kalman+0x398>)
 80021d0:	edd3 7a00 	vldr	s15, [r3]
 80021d4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80021d8:	4b8c      	ldr	r3, [pc, #560]	; (800240c <kalman+0x39c>)
 80021da:	edd3 7a00 	vldr	s15, [r3]
 80021de:	ee77 7a27 	vadd.f32	s15, s14, s15
 80021e2:	ee17 0a90 	vmov	r0, s15
 80021e6:	f7fe f95b 	bl	80004a0 <__aeabi_f2d>
 80021ea:	4604      	mov	r4, r0
 80021ec:	460d      	mov	r5, r1
 80021ee:	4b84      	ldr	r3, [pc, #528]	; (8002400 <kalman+0x390>)
 80021f0:	681b      	ldr	r3, [r3, #0]
 80021f2:	4618      	mov	r0, r3
 80021f4:	f7fe f954 	bl	80004a0 <__aeabi_f2d>
 80021f8:	4602      	mov	r2, r0
 80021fa:	460b      	mov	r3, r1
 80021fc:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80023d0 <kalman+0x360>
 8002200:	ec43 2b10 	vmov	d0, r2, r3
 8002204:	f004 ff2a 	bl	800705c <pow>
 8002208:	ec59 8b10 	vmov	r8, r9, d0
 800220c:	4b76      	ldr	r3, [pc, #472]	; (80023e8 <kalman+0x378>)
 800220e:	681b      	ldr	r3, [r3, #0]
 8002210:	4618      	mov	r0, r3
 8002212:	f7fe f945 	bl	80004a0 <__aeabi_f2d>
 8002216:	4602      	mov	r2, r0
 8002218:	460b      	mov	r3, r1
 800221a:	4640      	mov	r0, r8
 800221c:	4649      	mov	r1, r9
 800221e:	f7fe f997 	bl	8000550 <__aeabi_dmul>
 8002222:	4602      	mov	r2, r0
 8002224:	460b      	mov	r3, r1
 8002226:	4690      	mov	r8, r2
 8002228:	4699      	mov	r9, r3
 800222a:	4b6f      	ldr	r3, [pc, #444]	; (80023e8 <kalman+0x378>)
 800222c:	681b      	ldr	r3, [r3, #0]
 800222e:	4618      	mov	r0, r3
 8002230:	f7fe f936 	bl	80004a0 <__aeabi_f2d>
 8002234:	4602      	mov	r2, r0
 8002236:	460b      	mov	r3, r1
 8002238:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80023d0 <kalman+0x360>
 800223c:	ec43 2b10 	vmov	d0, r2, r3
 8002240:	f004 ff0c 	bl	800705c <pow>
 8002244:	ec53 2b10 	vmov	r2, r3, d0
 8002248:	4640      	mov	r0, r8
 800224a:	4649      	mov	r1, r9
 800224c:	f7fe f980 	bl	8000550 <__aeabi_dmul>
 8002250:	4602      	mov	r2, r0
 8002252:	460b      	mov	r3, r1
 8002254:	4610      	mov	r0, r2
 8002256:	4619      	mov	r1, r3
 8002258:	f04f 0200 	mov.w	r2, #0
 800225c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002260:	f7fe faa0 	bl	80007a4 <__aeabi_ddiv>
 8002264:	4602      	mov	r2, r0
 8002266:	460b      	mov	r3, r1
 8002268:	4620      	mov	r0, r4
 800226a:	4629      	mov	r1, r5
 800226c:	f7fd ffba 	bl	80001e4 <__adddf3>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4610      	mov	r0, r2
 8002276:	4619      	mov	r1, r3
 8002278:	f7fe fc1a 	bl	8000ab0 <__aeabi_d2f>
 800227c:	4603      	mov	r3, r0
 800227e:	4a65      	ldr	r2, [pc, #404]	; (8002414 <kalman+0x3a4>)
 8002280:	6013      	str	r3, [r2, #0]
	P21predict = (float) (2*delt*P21predictPRE+pow(Gl,2)*pow(delt,4)+2*P22predictPRE*pow(delt,2))/(2*delt);
 8002282:	4b59      	ldr	r3, [pc, #356]	; (80023e8 <kalman+0x378>)
 8002284:	edd3 7a00 	vldr	s15, [r3]
 8002288:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800228c:	4b5a      	ldr	r3, [pc, #360]	; (80023f8 <kalman+0x388>)
 800228e:	edd3 7a00 	vldr	s15, [r3]
 8002292:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002296:	ee17 0a90 	vmov	r0, s15
 800229a:	f7fe f901 	bl	80004a0 <__aeabi_f2d>
 800229e:	4604      	mov	r4, r0
 80022a0:	460d      	mov	r5, r1
 80022a2:	4b57      	ldr	r3, [pc, #348]	; (8002400 <kalman+0x390>)
 80022a4:	681b      	ldr	r3, [r3, #0]
 80022a6:	4618      	mov	r0, r3
 80022a8:	f7fe f8fa 	bl	80004a0 <__aeabi_f2d>
 80022ac:	4602      	mov	r2, r0
 80022ae:	460b      	mov	r3, r1
 80022b0:	ed9f 1b47 	vldr	d1, [pc, #284]	; 80023d0 <kalman+0x360>
 80022b4:	ec43 2b10 	vmov	d0, r2, r3
 80022b8:	f004 fed0 	bl	800705c <pow>
 80022bc:	ec59 8b10 	vmov	r8, r9, d0
 80022c0:	4b49      	ldr	r3, [pc, #292]	; (80023e8 <kalman+0x378>)
 80022c2:	681b      	ldr	r3, [r3, #0]
 80022c4:	4618      	mov	r0, r3
 80022c6:	f7fe f8eb 	bl	80004a0 <__aeabi_f2d>
 80022ca:	4602      	mov	r2, r0
 80022cc:	460b      	mov	r3, r1
 80022ce:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80023d8 <kalman+0x368>
 80022d2:	ec43 2b10 	vmov	d0, r2, r3
 80022d6:	f004 fec1 	bl	800705c <pow>
 80022da:	ec53 2b10 	vmov	r2, r3, d0
 80022de:	4640      	mov	r0, r8
 80022e0:	4649      	mov	r1, r9
 80022e2:	f7fe f935 	bl	8000550 <__aeabi_dmul>
 80022e6:	4602      	mov	r2, r0
 80022e8:	460b      	mov	r3, r1
 80022ea:	4620      	mov	r0, r4
 80022ec:	4629      	mov	r1, r5
 80022ee:	f7fd ff79 	bl	80001e4 <__adddf3>
 80022f2:	4602      	mov	r2, r0
 80022f4:	460b      	mov	r3, r1
 80022f6:	4690      	mov	r8, r2
 80022f8:	4699      	mov	r9, r3
 80022fa:	4b43      	ldr	r3, [pc, #268]	; (8002408 <kalman+0x398>)
 80022fc:	edd3 7a00 	vldr	s15, [r3]
 8002300:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002304:	ee17 0a90 	vmov	r0, s15
 8002308:	f7fe f8ca 	bl	80004a0 <__aeabi_f2d>
 800230c:	4604      	mov	r4, r0
 800230e:	460d      	mov	r5, r1
 8002310:	4b35      	ldr	r3, [pc, #212]	; (80023e8 <kalman+0x378>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f8c3 	bl	80004a0 <__aeabi_f2d>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80023d0 <kalman+0x360>
 8002322:	ec43 2b10 	vmov	d0, r2, r3
 8002326:	f004 fe99 	bl	800705c <pow>
 800232a:	ec53 2b10 	vmov	r2, r3, d0
 800232e:	4620      	mov	r0, r4
 8002330:	4629      	mov	r1, r5
 8002332:	f7fe f90d 	bl	8000550 <__aeabi_dmul>
 8002336:	4602      	mov	r2, r0
 8002338:	460b      	mov	r3, r1
 800233a:	4640      	mov	r0, r8
 800233c:	4649      	mov	r1, r9
 800233e:	f7fd ff51 	bl	80001e4 <__adddf3>
 8002342:	4602      	mov	r2, r0
 8002344:	460b      	mov	r3, r1
 8002346:	4610      	mov	r0, r2
 8002348:	4619      	mov	r1, r3
 800234a:	f7fe fbb1 	bl	8000ab0 <__aeabi_d2f>
 800234e:	ee06 0a90 	vmov	s13, r0
 8002352:	4b25      	ldr	r3, [pc, #148]	; (80023e8 <kalman+0x378>)
 8002354:	edd3 7a00 	vldr	s15, [r3]
 8002358:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800235c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002360:	4b2d      	ldr	r3, [pc, #180]	; (8002418 <kalman+0x3a8>)
 8002362:	edc3 7a00 	vstr	s15, [r3]
	P22predict = (float) pow(Gl,2)*pow(delt,2) +P22predictPRE;
 8002366:	4b26      	ldr	r3, [pc, #152]	; (8002400 <kalman+0x390>)
 8002368:	681b      	ldr	r3, [r3, #0]
 800236a:	4618      	mov	r0, r3
 800236c:	f7fe f898 	bl	80004a0 <__aeabi_f2d>
 8002370:	4602      	mov	r2, r0
 8002372:	460b      	mov	r3, r1
 8002374:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80023d0 <kalman+0x360>
 8002378:	ec43 2b10 	vmov	d0, r2, r3
 800237c:	f004 fe6e 	bl	800705c <pow>
 8002380:	ec53 2b10 	vmov	r2, r3, d0
 8002384:	4610      	mov	r0, r2
 8002386:	4619      	mov	r1, r3
 8002388:	f7fe fb92 	bl	8000ab0 <__aeabi_d2f>
 800238c:	4603      	mov	r3, r0
 800238e:	4618      	mov	r0, r3
 8002390:	f7fe f886 	bl	80004a0 <__aeabi_f2d>
 8002394:	4604      	mov	r4, r0
 8002396:	460d      	mov	r5, r1
 8002398:	4b13      	ldr	r3, [pc, #76]	; (80023e8 <kalman+0x378>)
 800239a:	681b      	ldr	r3, [r3, #0]
 800239c:	4618      	mov	r0, r3
 800239e:	f7fe f87f 	bl	80004a0 <__aeabi_f2d>
 80023a2:	4602      	mov	r2, r0
 80023a4:	460b      	mov	r3, r1
 80023a6:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80023d0 <kalman+0x360>
 80023aa:	ec43 2b10 	vmov	d0, r2, r3
 80023ae:	f004 fe55 	bl	800705c <pow>
 80023b2:	ec53 2b10 	vmov	r2, r3, d0
 80023b6:	4620      	mov	r0, r4
 80023b8:	4629      	mov	r1, r5
 80023ba:	f7fe f8c9 	bl	8000550 <__aeabi_dmul>
 80023be:	4602      	mov	r2, r0
 80023c0:	460b      	mov	r3, r1
 80023c2:	4614      	mov	r4, r2
 80023c4:	461d      	mov	r5, r3
 80023c6:	4b10      	ldr	r3, [pc, #64]	; (8002408 <kalman+0x398>)
 80023c8:	681b      	ldr	r3, [r3, #0]
 80023ca:	4618      	mov	r0, r3
 80023cc:	e026      	b.n	800241c <kalman+0x3ac>
 80023ce:	bf00      	nop
 80023d0:	00000000 	.word	0x00000000
 80023d4:	40000000 	.word	0x40000000
 80023d8:	00000000 	.word	0x00000000
 80023dc:	40100000 	.word	0x40100000
 80023e0:	2000000c 	.word	0x2000000c
 80023e4:	49742400 	.word	0x49742400
 80023e8:	20000160 	.word	0x20000160
 80023ec:	20000164 	.word	0x20000164
 80023f0:	20000168 	.word	0x20000168
 80023f4:	2000016c 	.word	0x2000016c
 80023f8:	20000170 	.word	0x20000170
 80023fc:	20000174 	.word	0x20000174
 8002400:	2000002c 	.word	0x2000002c
 8002404:	40100000 	.word	0x40100000
 8002408:	20000178 	.word	0x20000178
 800240c:	2000017c 	.word	0x2000017c
 8002410:	20000180 	.word	0x20000180
 8002414:	20000184 	.word	0x20000184
 8002418:	20000188 	.word	0x20000188
 800241c:	f7fe f840 	bl	80004a0 <__aeabi_f2d>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4620      	mov	r0, r4
 8002426:	4629      	mov	r1, r5
 8002428:	f7fd fedc 	bl	80001e4 <__adddf3>
 800242c:	4602      	mov	r2, r0
 800242e:	460b      	mov	r3, r1
 8002430:	4610      	mov	r0, r2
 8002432:	4619      	mov	r1, r3
 8002434:	f7fe fb3c 	bl	8000ab0 <__aeabi_d2f>
 8002438:	4603      	mov	r3, r0
 800243a:	4acb      	ldr	r2, [pc, #812]	; (8002768 <kalman+0x6f8>)
 800243c:	6013      	str	r3, [r2, #0]

	omega = (float) omegaPredict + (P22predict*errorVel)/(pow(R,2)+P22predict);
 800243e:	4bcb      	ldr	r3, [pc, #812]	; (800276c <kalman+0x6fc>)
 8002440:	681b      	ldr	r3, [r3, #0]
 8002442:	4618      	mov	r0, r3
 8002444:	f7fe f82c 	bl	80004a0 <__aeabi_f2d>
 8002448:	4604      	mov	r4, r0
 800244a:	460d      	mov	r5, r1
 800244c:	4bc6      	ldr	r3, [pc, #792]	; (8002768 <kalman+0x6f8>)
 800244e:	ed93 7a00 	vldr	s14, [r3]
 8002452:	4bc7      	ldr	r3, [pc, #796]	; (8002770 <kalman+0x700>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ee67 7a27 	vmul.f32	s15, s14, s15
 800245c:	ee17 0a90 	vmov	r0, s15
 8002460:	f7fe f81e 	bl	80004a0 <__aeabi_f2d>
 8002464:	4680      	mov	r8, r0
 8002466:	4689      	mov	r9, r1
 8002468:	4bc2      	ldr	r3, [pc, #776]	; (8002774 <kalman+0x704>)
 800246a:	681b      	ldr	r3, [r3, #0]
 800246c:	4618      	mov	r0, r3
 800246e:	f7fe f817 	bl	80004a0 <__aeabi_f2d>
 8002472:	4602      	mov	r2, r0
 8002474:	460b      	mov	r3, r1
 8002476:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 8002758 <kalman+0x6e8>
 800247a:	ec43 2b10 	vmov	d0, r2, r3
 800247e:	f004 fded 	bl	800705c <pow>
 8002482:	ec5b ab10 	vmov	sl, fp, d0
 8002486:	4bb8      	ldr	r3, [pc, #736]	; (8002768 <kalman+0x6f8>)
 8002488:	681b      	ldr	r3, [r3, #0]
 800248a:	4618      	mov	r0, r3
 800248c:	f7fe f808 	bl	80004a0 <__aeabi_f2d>
 8002490:	4602      	mov	r2, r0
 8002492:	460b      	mov	r3, r1
 8002494:	4650      	mov	r0, sl
 8002496:	4659      	mov	r1, fp
 8002498:	f7fd fea4 	bl	80001e4 <__adddf3>
 800249c:	4602      	mov	r2, r0
 800249e:	460b      	mov	r3, r1
 80024a0:	4640      	mov	r0, r8
 80024a2:	4649      	mov	r1, r9
 80024a4:	f7fe f97e 	bl	80007a4 <__aeabi_ddiv>
 80024a8:	4602      	mov	r2, r0
 80024aa:	460b      	mov	r3, r1
 80024ac:	4620      	mov	r0, r4
 80024ae:	4629      	mov	r1, r5
 80024b0:	f7fd fe98 	bl	80001e4 <__adddf3>
 80024b4:	4602      	mov	r2, r0
 80024b6:	460b      	mov	r3, r1
 80024b8:	4610      	mov	r0, r2
 80024ba:	4619      	mov	r1, r3
 80024bc:	f7fe faf8 	bl	8000ab0 <__aeabi_d2f>
 80024c0:	4603      	mov	r3, r0
 80024c2:	4aad      	ldr	r2, [pc, #692]	; (8002778 <kalman+0x708>)
 80024c4:	6013      	str	r3, [r2, #0]
	P11predictPRE = (float) P11predict - (P12predict*P21predict)/(pow(R,2)+P22predict);
 80024c6:	4bad      	ldr	r3, [pc, #692]	; (800277c <kalman+0x70c>)
 80024c8:	681b      	ldr	r3, [r3, #0]
 80024ca:	4618      	mov	r0, r3
 80024cc:	f7fd ffe8 	bl	80004a0 <__aeabi_f2d>
 80024d0:	4604      	mov	r4, r0
 80024d2:	460d      	mov	r5, r1
 80024d4:	4baa      	ldr	r3, [pc, #680]	; (8002780 <kalman+0x710>)
 80024d6:	ed93 7a00 	vldr	s14, [r3]
 80024da:	4baa      	ldr	r3, [pc, #680]	; (8002784 <kalman+0x714>)
 80024dc:	edd3 7a00 	vldr	s15, [r3]
 80024e0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80024e4:	ee17 0a90 	vmov	r0, s15
 80024e8:	f7fd ffda 	bl	80004a0 <__aeabi_f2d>
 80024ec:	4680      	mov	r8, r0
 80024ee:	4689      	mov	r9, r1
 80024f0:	4ba0      	ldr	r3, [pc, #640]	; (8002774 <kalman+0x704>)
 80024f2:	681b      	ldr	r3, [r3, #0]
 80024f4:	4618      	mov	r0, r3
 80024f6:	f7fd ffd3 	bl	80004a0 <__aeabi_f2d>
 80024fa:	4602      	mov	r2, r0
 80024fc:	460b      	mov	r3, r1
 80024fe:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8002758 <kalman+0x6e8>
 8002502:	ec43 2b10 	vmov	d0, r2, r3
 8002506:	f004 fda9 	bl	800705c <pow>
 800250a:	ec5b ab10 	vmov	sl, fp, d0
 800250e:	4b96      	ldr	r3, [pc, #600]	; (8002768 <kalman+0x6f8>)
 8002510:	681b      	ldr	r3, [r3, #0]
 8002512:	4618      	mov	r0, r3
 8002514:	f7fd ffc4 	bl	80004a0 <__aeabi_f2d>
 8002518:	4602      	mov	r2, r0
 800251a:	460b      	mov	r3, r1
 800251c:	4650      	mov	r0, sl
 800251e:	4659      	mov	r1, fp
 8002520:	f7fd fe60 	bl	80001e4 <__adddf3>
 8002524:	4602      	mov	r2, r0
 8002526:	460b      	mov	r3, r1
 8002528:	4640      	mov	r0, r8
 800252a:	4649      	mov	r1, r9
 800252c:	f7fe f93a 	bl	80007a4 <__aeabi_ddiv>
 8002530:	4602      	mov	r2, r0
 8002532:	460b      	mov	r3, r1
 8002534:	4620      	mov	r0, r4
 8002536:	4629      	mov	r1, r5
 8002538:	f7fd fe52 	bl	80001e0 <__aeabi_dsub>
 800253c:	4602      	mov	r2, r0
 800253e:	460b      	mov	r3, r1
 8002540:	4610      	mov	r0, r2
 8002542:	4619      	mov	r1, r3
 8002544:	f7fe fab4 	bl	8000ab0 <__aeabi_d2f>
 8002548:	4603      	mov	r3, r0
 800254a:	4a8f      	ldr	r2, [pc, #572]	; (8002788 <kalman+0x718>)
 800254c:	6013      	str	r3, [r2, #0]
	P12predictPRE = (float) P12predict - (P12predict*P22predict)/(pow(R,2)+P22predict);
 800254e:	4b8c      	ldr	r3, [pc, #560]	; (8002780 <kalman+0x710>)
 8002550:	681b      	ldr	r3, [r3, #0]
 8002552:	4618      	mov	r0, r3
 8002554:	f7fd ffa4 	bl	80004a0 <__aeabi_f2d>
 8002558:	4604      	mov	r4, r0
 800255a:	460d      	mov	r5, r1
 800255c:	4b88      	ldr	r3, [pc, #544]	; (8002780 <kalman+0x710>)
 800255e:	ed93 7a00 	vldr	s14, [r3]
 8002562:	4b81      	ldr	r3, [pc, #516]	; (8002768 <kalman+0x6f8>)
 8002564:	edd3 7a00 	vldr	s15, [r3]
 8002568:	ee67 7a27 	vmul.f32	s15, s14, s15
 800256c:	ee17 0a90 	vmov	r0, s15
 8002570:	f7fd ff96 	bl	80004a0 <__aeabi_f2d>
 8002574:	4680      	mov	r8, r0
 8002576:	4689      	mov	r9, r1
 8002578:	4b7e      	ldr	r3, [pc, #504]	; (8002774 <kalman+0x704>)
 800257a:	681b      	ldr	r3, [r3, #0]
 800257c:	4618      	mov	r0, r3
 800257e:	f7fd ff8f 	bl	80004a0 <__aeabi_f2d>
 8002582:	4602      	mov	r2, r0
 8002584:	460b      	mov	r3, r1
 8002586:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002758 <kalman+0x6e8>
 800258a:	ec43 2b10 	vmov	d0, r2, r3
 800258e:	f004 fd65 	bl	800705c <pow>
 8002592:	ec5b ab10 	vmov	sl, fp, d0
 8002596:	4b74      	ldr	r3, [pc, #464]	; (8002768 <kalman+0x6f8>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	f7fd ff80 	bl	80004a0 <__aeabi_f2d>
 80025a0:	4602      	mov	r2, r0
 80025a2:	460b      	mov	r3, r1
 80025a4:	4650      	mov	r0, sl
 80025a6:	4659      	mov	r1, fp
 80025a8:	f7fd fe1c 	bl	80001e4 <__adddf3>
 80025ac:	4602      	mov	r2, r0
 80025ae:	460b      	mov	r3, r1
 80025b0:	4640      	mov	r0, r8
 80025b2:	4649      	mov	r1, r9
 80025b4:	f7fe f8f6 	bl	80007a4 <__aeabi_ddiv>
 80025b8:	4602      	mov	r2, r0
 80025ba:	460b      	mov	r3, r1
 80025bc:	4620      	mov	r0, r4
 80025be:	4629      	mov	r1, r5
 80025c0:	f7fd fe0e 	bl	80001e0 <__aeabi_dsub>
 80025c4:	4602      	mov	r2, r0
 80025c6:	460b      	mov	r3, r1
 80025c8:	4610      	mov	r0, r2
 80025ca:	4619      	mov	r1, r3
 80025cc:	f7fe fa70 	bl	8000ab0 <__aeabi_d2f>
 80025d0:	4603      	mov	r3, r0
 80025d2:	4a6e      	ldr	r2, [pc, #440]	; (800278c <kalman+0x71c>)
 80025d4:	6013      	str	r3, [r2, #0]
	P21predictPRE = (float) P21predict*(P22predict/(pow(R,2)+P22predict)-1);
 80025d6:	4b6b      	ldr	r3, [pc, #428]	; (8002784 <kalman+0x714>)
 80025d8:	681b      	ldr	r3, [r3, #0]
 80025da:	4618      	mov	r0, r3
 80025dc:	f7fd ff60 	bl	80004a0 <__aeabi_f2d>
 80025e0:	4604      	mov	r4, r0
 80025e2:	460d      	mov	r5, r1
 80025e4:	4b60      	ldr	r3, [pc, #384]	; (8002768 <kalman+0x6f8>)
 80025e6:	681b      	ldr	r3, [r3, #0]
 80025e8:	4618      	mov	r0, r3
 80025ea:	f7fd ff59 	bl	80004a0 <__aeabi_f2d>
 80025ee:	4680      	mov	r8, r0
 80025f0:	4689      	mov	r9, r1
 80025f2:	4b60      	ldr	r3, [pc, #384]	; (8002774 <kalman+0x704>)
 80025f4:	681b      	ldr	r3, [r3, #0]
 80025f6:	4618      	mov	r0, r3
 80025f8:	f7fd ff52 	bl	80004a0 <__aeabi_f2d>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002758 <kalman+0x6e8>
 8002604:	ec43 2b10 	vmov	d0, r2, r3
 8002608:	f004 fd28 	bl	800705c <pow>
 800260c:	ec5b ab10 	vmov	sl, fp, d0
 8002610:	4b55      	ldr	r3, [pc, #340]	; (8002768 <kalman+0x6f8>)
 8002612:	681b      	ldr	r3, [r3, #0]
 8002614:	4618      	mov	r0, r3
 8002616:	f7fd ff43 	bl	80004a0 <__aeabi_f2d>
 800261a:	4602      	mov	r2, r0
 800261c:	460b      	mov	r3, r1
 800261e:	4650      	mov	r0, sl
 8002620:	4659      	mov	r1, fp
 8002622:	f7fd fddf 	bl	80001e4 <__adddf3>
 8002626:	4602      	mov	r2, r0
 8002628:	460b      	mov	r3, r1
 800262a:	4640      	mov	r0, r8
 800262c:	4649      	mov	r1, r9
 800262e:	f7fe f8b9 	bl	80007a4 <__aeabi_ddiv>
 8002632:	4602      	mov	r2, r0
 8002634:	460b      	mov	r3, r1
 8002636:	4610      	mov	r0, r2
 8002638:	4619      	mov	r1, r3
 800263a:	f04f 0200 	mov.w	r2, #0
 800263e:	4b54      	ldr	r3, [pc, #336]	; (8002790 <kalman+0x720>)
 8002640:	f7fd fdce 	bl	80001e0 <__aeabi_dsub>
 8002644:	4602      	mov	r2, r0
 8002646:	460b      	mov	r3, r1
 8002648:	4620      	mov	r0, r4
 800264a:	4629      	mov	r1, r5
 800264c:	f7fd ff80 	bl	8000550 <__aeabi_dmul>
 8002650:	4602      	mov	r2, r0
 8002652:	460b      	mov	r3, r1
 8002654:	4610      	mov	r0, r2
 8002656:	4619      	mov	r1, r3
 8002658:	f7fe fa2a 	bl	8000ab0 <__aeabi_d2f>
 800265c:	4603      	mov	r3, r0
 800265e:	4a4d      	ldr	r2, [pc, #308]	; (8002794 <kalman+0x724>)
 8002660:	6013      	str	r3, [r2, #0]
	P22predictPRE = (float) P22predict*(P22predict/(pow(R,2)+P22predict)-1);
 8002662:	4b41      	ldr	r3, [pc, #260]	; (8002768 <kalman+0x6f8>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4618      	mov	r0, r3
 8002668:	f7fd ff1a 	bl	80004a0 <__aeabi_f2d>
 800266c:	4604      	mov	r4, r0
 800266e:	460d      	mov	r5, r1
 8002670:	4b3d      	ldr	r3, [pc, #244]	; (8002768 <kalman+0x6f8>)
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4618      	mov	r0, r3
 8002676:	f7fd ff13 	bl	80004a0 <__aeabi_f2d>
 800267a:	4680      	mov	r8, r0
 800267c:	4689      	mov	r9, r1
 800267e:	4b3d      	ldr	r3, [pc, #244]	; (8002774 <kalman+0x704>)
 8002680:	681b      	ldr	r3, [r3, #0]
 8002682:	4618      	mov	r0, r3
 8002684:	f7fd ff0c 	bl	80004a0 <__aeabi_f2d>
 8002688:	4602      	mov	r2, r0
 800268a:	460b      	mov	r3, r1
 800268c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8002758 <kalman+0x6e8>
 8002690:	ec43 2b10 	vmov	d0, r2, r3
 8002694:	f004 fce2 	bl	800705c <pow>
 8002698:	ec5b ab10 	vmov	sl, fp, d0
 800269c:	4b32      	ldr	r3, [pc, #200]	; (8002768 <kalman+0x6f8>)
 800269e:	681b      	ldr	r3, [r3, #0]
 80026a0:	4618      	mov	r0, r3
 80026a2:	f7fd fefd 	bl	80004a0 <__aeabi_f2d>
 80026a6:	4602      	mov	r2, r0
 80026a8:	460b      	mov	r3, r1
 80026aa:	4650      	mov	r0, sl
 80026ac:	4659      	mov	r1, fp
 80026ae:	f7fd fd99 	bl	80001e4 <__adddf3>
 80026b2:	4602      	mov	r2, r0
 80026b4:	460b      	mov	r3, r1
 80026b6:	4640      	mov	r0, r8
 80026b8:	4649      	mov	r1, r9
 80026ba:	f7fe f873 	bl	80007a4 <__aeabi_ddiv>
 80026be:	4602      	mov	r2, r0
 80026c0:	460b      	mov	r3, r1
 80026c2:	4610      	mov	r0, r2
 80026c4:	4619      	mov	r1, r3
 80026c6:	f04f 0200 	mov.w	r2, #0
 80026ca:	4b31      	ldr	r3, [pc, #196]	; (8002790 <kalman+0x720>)
 80026cc:	f7fd fd88 	bl	80001e0 <__aeabi_dsub>
 80026d0:	4602      	mov	r2, r0
 80026d2:	460b      	mov	r3, r1
 80026d4:	4620      	mov	r0, r4
 80026d6:	4629      	mov	r1, r5
 80026d8:	f7fd ff3a 	bl	8000550 <__aeabi_dmul>
 80026dc:	4602      	mov	r2, r0
 80026de:	460b      	mov	r3, r1
 80026e0:	4610      	mov	r0, r2
 80026e2:	4619      	mov	r1, r3
 80026e4:	f7fe f9e4 	bl	8000ab0 <__aeabi_d2f>
 80026e8:	4603      	mov	r3, r0
 80026ea:	4a2b      	ldr	r2, [pc, #172]	; (8002798 <kalman+0x728>)
 80026ec:	6013      	str	r3, [r2, #0]
	omegaPredictPre = omega;
 80026ee:	4b22      	ldr	r3, [pc, #136]	; (8002778 <kalman+0x708>)
 80026f0:	681b      	ldr	r3, [r3, #0]
 80026f2:	4a2a      	ldr	r2, [pc, #168]	; (800279c <kalman+0x72c>)
 80026f4:	6013      	str	r3, [r2, #0]
	EncoderVel = omega/0.10472;
 80026f6:	4b20      	ldr	r3, [pc, #128]	; (8002778 <kalman+0x708>)
 80026f8:	681b      	ldr	r3, [r3, #0]
 80026fa:	4618      	mov	r0, r3
 80026fc:	f7fd fed0 	bl	80004a0 <__aeabi_f2d>
 8002700:	a317      	add	r3, pc, #92	; (adr r3, 8002760 <kalman+0x6f0>)
 8002702:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002706:	f7fe f84d 	bl	80007a4 <__aeabi_ddiv>
 800270a:	4602      	mov	r2, r0
 800270c:	460b      	mov	r3, r1
 800270e:	4610      	mov	r0, r2
 8002710:	4619      	mov	r1, r3
 8002712:	f7fe f9cd 	bl	8000ab0 <__aeabi_d2f>
 8002716:	4603      	mov	r3, r0
 8002718:	4a21      	ldr	r2, [pc, #132]	; (80027a0 <kalman+0x730>)
 800271a:	6013      	str	r3, [r2, #0]
	if (velocity == 0){
 800271c:	4b21      	ldr	r3, [pc, #132]	; (80027a4 <kalman+0x734>)
 800271e:	edd3 7a00 	vldr	s15, [r3]
 8002722:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002726:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800272a:	d155      	bne.n	80027d8 <kalman+0x768>
		P11predict = 0;
 800272c:	4b13      	ldr	r3, [pc, #76]	; (800277c <kalman+0x70c>)
 800272e:	f04f 0200 	mov.w	r2, #0
 8002732:	601a      	str	r2, [r3, #0]
		P12predict = 0;
 8002734:	4b12      	ldr	r3, [pc, #72]	; (8002780 <kalman+0x710>)
 8002736:	f04f 0200 	mov.w	r2, #0
 800273a:	601a      	str	r2, [r3, #0]
		P21predict = 0;
 800273c:	4b11      	ldr	r3, [pc, #68]	; (8002784 <kalman+0x714>)
 800273e:	f04f 0200 	mov.w	r2, #0
 8002742:	601a      	str	r2, [r3, #0]
		P22predict = 0;
 8002744:	4b08      	ldr	r3, [pc, #32]	; (8002768 <kalman+0x6f8>)
 8002746:	f04f 0200 	mov.w	r2, #0
 800274a:	601a      	str	r2, [r3, #0]
		P11predictPRE = 0;
 800274c:	4b0e      	ldr	r3, [pc, #56]	; (8002788 <kalman+0x718>)
 800274e:	f04f 0200 	mov.w	r2, #0
 8002752:	601a      	str	r2, [r3, #0]
 8002754:	e028      	b.n	80027a8 <kalman+0x738>
 8002756:	bf00      	nop
 8002758:	00000000 	.word	0x00000000
 800275c:	40000000 	.word	0x40000000
 8002760:	0f3cb3e5 	.word	0x0f3cb3e5
 8002764:	3fbaceee 	.word	0x3fbaceee
 8002768:	2000018c 	.word	0x2000018c
 800276c:	20000168 	.word	0x20000168
 8002770:	2000016c 	.word	0x2000016c
 8002774:	20000028 	.word	0x20000028
 8002778:	20000190 	.word	0x20000190
 800277c:	20000180 	.word	0x20000180
 8002780:	20000184 	.word	0x20000184
 8002784:	20000188 	.word	0x20000188
 8002788:	20000174 	.word	0x20000174
 800278c:	2000017c 	.word	0x2000017c
 8002790:	3ff00000 	.word	0x3ff00000
 8002794:	20000170 	.word	0x20000170
 8002798:	20000178 	.word	0x20000178
 800279c:	20000164 	.word	0x20000164
 80027a0:	200000d4 	.word	0x200000d4
 80027a4:	200000dc 	.word	0x200000dc
		P12predictPRE = 0;
 80027a8:	4b0d      	ldr	r3, [pc, #52]	; (80027e0 <kalman+0x770>)
 80027aa:	f04f 0200 	mov.w	r2, #0
 80027ae:	601a      	str	r2, [r3, #0]
		P21predictPRE = 0;
 80027b0:	4b0c      	ldr	r3, [pc, #48]	; (80027e4 <kalman+0x774>)
 80027b2:	f04f 0200 	mov.w	r2, #0
 80027b6:	601a      	str	r2, [r3, #0]
		P22predictPRE = 0;
 80027b8:	4b0b      	ldr	r3, [pc, #44]	; (80027e8 <kalman+0x778>)
 80027ba:	f04f 0200 	mov.w	r2, #0
 80027be:	601a      	str	r2, [r3, #0]
		omegaPredict = 0;
 80027c0:	4b0a      	ldr	r3, [pc, #40]	; (80027ec <kalman+0x77c>)
 80027c2:	f04f 0200 	mov.w	r2, #0
 80027c6:	601a      	str	r2, [r3, #0]
		omegaPredictPre = 0;
 80027c8:	4b09      	ldr	r3, [pc, #36]	; (80027f0 <kalman+0x780>)
 80027ca:	f04f 0200 	mov.w	r2, #0
 80027ce:	601a      	str	r2, [r3, #0]
		errorVel = 0;
 80027d0:	4b08      	ldr	r3, [pc, #32]	; (80027f4 <kalman+0x784>)
 80027d2:	f04f 0200 	mov.w	r2, #0
 80027d6:	601a      	str	r2, [r3, #0]
	}
}
 80027d8:	bf00      	nop
 80027da:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80027de:	bf00      	nop
 80027e0:	2000017c 	.word	0x2000017c
 80027e4:	20000170 	.word	0x20000170
 80027e8:	20000178 	.word	0x20000178
 80027ec:	20000168 	.word	0x20000168
 80027f0:	20000164 	.word	0x20000164
 80027f4:	2000016c 	.word	0x2000016c

080027f8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80027f8:	b4b0      	push	{r4, r5, r7}
 80027fa:	b083      	sub	sp, #12
 80027fc:	af00      	add	r7, sp, #0
 80027fe:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002800:	687b      	ldr	r3, [r7, #4]
 8002802:	4a09      	ldr	r2, [pc, #36]	; (8002828 <HAL_TIM_PeriodElapsedCallback+0x30>)
 8002804:	4293      	cmp	r3, r2
 8002806:	d109      	bne.n	800281c <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 8002808:	4b08      	ldr	r3, [pc, #32]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x34>)
 800280a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800280e:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
 8002812:	f143 0500 	adc.w	r5, r3, #0
 8002816:	4b05      	ldr	r3, [pc, #20]	; (800282c <HAL_TIM_PeriodElapsedCallback+0x34>)
 8002818:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 800281c:	bf00      	nop
 800281e:	370c      	adds	r7, #12
 8002820:	46bd      	mov	sp, r7
 8002822:	bcb0      	pop	{r4, r5, r7}
 8002824:	4770      	bx	lr
 8002826:	bf00      	nop
 8002828:	200002bc 	.word	0x200002bc
 800282c:	200000c8 	.word	0x200000c8

08002830 <micros>:
uint64_t micros()
{
 8002830:	b4b0      	push	{r4, r5, r7}
 8002832:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002834:	4b09      	ldr	r3, [pc, #36]	; (800285c <micros+0x2c>)
 8002836:	681b      	ldr	r3, [r3, #0]
 8002838:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800283a:	4618      	mov	r0, r3
 800283c:	f04f 0100 	mov.w	r1, #0
 8002840:	4b07      	ldr	r3, [pc, #28]	; (8002860 <micros+0x30>)
 8002842:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002846:	1884      	adds	r4, r0, r2
 8002848:	eb41 0503 	adc.w	r5, r1, r3
 800284c:	4622      	mov	r2, r4
 800284e:	462b      	mov	r3, r5
}
 8002850:	4610      	mov	r0, r2
 8002852:	4619      	mov	r1, r3
 8002854:	46bd      	mov	sp, r7
 8002856:	bcb0      	pop	{r4, r5, r7}
 8002858:	4770      	bx	lr
 800285a:	bf00      	nop
 800285c:	200002bc 	.word	0x200002bc
 8002860:	200000c8 	.word	0x200000c8

08002864 <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 8002864:	b480      	push	{r7}
 8002866:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002868:	b672      	cpsid	i
}
 800286a:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800286c:	e7fe      	b.n	800286c <Error_Handler+0x8>
	...

08002870 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002870:	b580      	push	{r7, lr}
 8002872:	b082      	sub	sp, #8
 8002874:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002876:	2300      	movs	r3, #0
 8002878:	607b      	str	r3, [r7, #4]
 800287a:	4b10      	ldr	r3, [pc, #64]	; (80028bc <HAL_MspInit+0x4c>)
 800287c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800287e:	4a0f      	ldr	r2, [pc, #60]	; (80028bc <HAL_MspInit+0x4c>)
 8002880:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002884:	6453      	str	r3, [r2, #68]	; 0x44
 8002886:	4b0d      	ldr	r3, [pc, #52]	; (80028bc <HAL_MspInit+0x4c>)
 8002888:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800288a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800288e:	607b      	str	r3, [r7, #4]
 8002890:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002892:	2300      	movs	r3, #0
 8002894:	603b      	str	r3, [r7, #0]
 8002896:	4b09      	ldr	r3, [pc, #36]	; (80028bc <HAL_MspInit+0x4c>)
 8002898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800289a:	4a08      	ldr	r2, [pc, #32]	; (80028bc <HAL_MspInit+0x4c>)
 800289c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80028a0:	6413      	str	r3, [r2, #64]	; 0x40
 80028a2:	4b06      	ldr	r3, [pc, #24]	; (80028bc <HAL_MspInit+0x4c>)
 80028a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80028a6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80028aa:	603b      	str	r3, [r7, #0]
 80028ac:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 80028ae:	2007      	movs	r0, #7
 80028b0:	f000 fb9e 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 80028b4:	bf00      	nop
 80028b6:	3708      	adds	r7, #8
 80028b8:	46bd      	mov	sp, r7
 80028ba:	bd80      	pop	{r7, pc}
 80028bc:	40023800 	.word	0x40023800

080028c0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80028c0:	b580      	push	{r7, lr}
 80028c2:	b08a      	sub	sp, #40	; 0x28
 80028c4:	af00      	add	r7, sp, #0
 80028c6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80028c8:	f107 0314 	add.w	r3, r7, #20
 80028cc:	2200      	movs	r2, #0
 80028ce:	601a      	str	r2, [r3, #0]
 80028d0:	605a      	str	r2, [r3, #4]
 80028d2:	609a      	str	r2, [r3, #8]
 80028d4:	60da      	str	r2, [r3, #12]
 80028d6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80028d8:	687b      	ldr	r3, [r7, #4]
 80028da:	681b      	ldr	r3, [r3, #0]
 80028dc:	4a21      	ldr	r2, [pc, #132]	; (8002964 <HAL_I2C_MspInit+0xa4>)
 80028de:	4293      	cmp	r3, r2
 80028e0:	d13b      	bne.n	800295a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80028e2:	2300      	movs	r3, #0
 80028e4:	613b      	str	r3, [r7, #16]
 80028e6:	4b20      	ldr	r3, [pc, #128]	; (8002968 <HAL_I2C_MspInit+0xa8>)
 80028e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028ea:	4a1f      	ldr	r2, [pc, #124]	; (8002968 <HAL_I2C_MspInit+0xa8>)
 80028ec:	f043 0302 	orr.w	r3, r3, #2
 80028f0:	6313      	str	r3, [r2, #48]	; 0x30
 80028f2:	4b1d      	ldr	r3, [pc, #116]	; (8002968 <HAL_I2C_MspInit+0xa8>)
 80028f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80028f6:	f003 0302 	and.w	r3, r3, #2
 80028fa:	613b      	str	r3, [r7, #16]
 80028fc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80028fe:	23c0      	movs	r3, #192	; 0xc0
 8002900:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002902:	2312      	movs	r3, #18
 8002904:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002906:	2301      	movs	r3, #1
 8002908:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800290a:	2303      	movs	r3, #3
 800290c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 800290e:	2304      	movs	r3, #4
 8002910:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002912:	f107 0314 	add.w	r3, r7, #20
 8002916:	4619      	mov	r1, r3
 8002918:	4814      	ldr	r0, [pc, #80]	; (800296c <HAL_I2C_MspInit+0xac>)
 800291a:	f000 fbe9 	bl	80030f0 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 800291e:	2300      	movs	r3, #0
 8002920:	60fb      	str	r3, [r7, #12]
 8002922:	4b11      	ldr	r3, [pc, #68]	; (8002968 <HAL_I2C_MspInit+0xa8>)
 8002924:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002926:	4a10      	ldr	r2, [pc, #64]	; (8002968 <HAL_I2C_MspInit+0xa8>)
 8002928:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800292c:	6413      	str	r3, [r2, #64]	; 0x40
 800292e:	4b0e      	ldr	r3, [pc, #56]	; (8002968 <HAL_I2C_MspInit+0xa8>)
 8002930:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002932:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002936:	60fb      	str	r3, [r7, #12]
 8002938:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800293a:	2200      	movs	r2, #0
 800293c:	2100      	movs	r1, #0
 800293e:	201f      	movs	r0, #31
 8002940:	f000 fb61 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002944:	201f      	movs	r0, #31
 8002946:	f000 fb7a 	bl	800303e <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800294a:	2200      	movs	r2, #0
 800294c:	2100      	movs	r1, #0
 800294e:	2020      	movs	r0, #32
 8002950:	f000 fb59 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002954:	2020      	movs	r0, #32
 8002956:	f000 fb72 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800295a:	bf00      	nop
 800295c:	3728      	adds	r7, #40	; 0x28
 800295e:	46bd      	mov	sp, r7
 8002960:	bd80      	pop	{r7, pc}
 8002962:	bf00      	nop
 8002964:	40005400 	.word	0x40005400
 8002968:	40023800 	.word	0x40023800
 800296c:	40020400 	.word	0x40020400

08002970 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002970:	b580      	push	{r7, lr}
 8002972:	b08a      	sub	sp, #40	; 0x28
 8002974:	af00      	add	r7, sp, #0
 8002976:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002978:	f107 0314 	add.w	r3, r7, #20
 800297c:	2200      	movs	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
 8002980:	605a      	str	r2, [r3, #4]
 8002982:	609a      	str	r2, [r3, #8]
 8002984:	60da      	str	r2, [r3, #12]
 8002986:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002988:	687b      	ldr	r3, [r7, #4]
 800298a:	681b      	ldr	r3, [r3, #0]
 800298c:	4a19      	ldr	r2, [pc, #100]	; (80029f4 <HAL_TIM_Encoder_MspInit+0x84>)
 800298e:	4293      	cmp	r3, r2
 8002990:	d12c      	bne.n	80029ec <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002992:	2300      	movs	r3, #0
 8002994:	613b      	str	r3, [r7, #16]
 8002996:	4b18      	ldr	r3, [pc, #96]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002998:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800299a:	4a17      	ldr	r2, [pc, #92]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x88>)
 800299c:	f043 0301 	orr.w	r3, r3, #1
 80029a0:	6453      	str	r3, [r2, #68]	; 0x44
 80029a2:	4b15      	ldr	r3, [pc, #84]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80029a4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80029a6:	f003 0301 	and.w	r3, r3, #1
 80029aa:	613b      	str	r3, [r7, #16]
 80029ac:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 80029ae:	2300      	movs	r3, #0
 80029b0:	60fb      	str	r3, [r7, #12]
 80029b2:	4b11      	ldr	r3, [pc, #68]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80029b4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029b6:	4a10      	ldr	r2, [pc, #64]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80029b8:	f043 0301 	orr.w	r3, r3, #1
 80029bc:	6313      	str	r3, [r2, #48]	; 0x30
 80029be:	4b0e      	ldr	r3, [pc, #56]	; (80029f8 <HAL_TIM_Encoder_MspInit+0x88>)
 80029c0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80029c2:	f003 0301 	and.w	r3, r3, #1
 80029c6:	60fb      	str	r3, [r7, #12]
 80029c8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80029ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80029ce:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80029d0:	2302      	movs	r3, #2
 80029d2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80029d4:	2300      	movs	r3, #0
 80029d6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80029d8:	2300      	movs	r3, #0
 80029da:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80029dc:	2301      	movs	r3, #1
 80029de:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80029e0:	f107 0314 	add.w	r3, r7, #20
 80029e4:	4619      	mov	r1, r3
 80029e6:	4805      	ldr	r0, [pc, #20]	; (80029fc <HAL_TIM_Encoder_MspInit+0x8c>)
 80029e8:	f000 fb82 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80029ec:	bf00      	nop
 80029ee:	3728      	adds	r7, #40	; 0x28
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bd80      	pop	{r7, pc}
 80029f4:	40010000 	.word	0x40010000
 80029f8:	40023800 	.word	0x40023800
 80029fc:	40020000 	.word	0x40020000

08002a00 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002a00:	b580      	push	{r7, lr}
 8002a02:	b084      	sub	sp, #16
 8002a04:	af00      	add	r7, sp, #0
 8002a06:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002a08:	687b      	ldr	r3, [r7, #4]
 8002a0a:	681b      	ldr	r3, [r3, #0]
 8002a0c:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002a10:	d116      	bne.n	8002a40 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002a12:	2300      	movs	r3, #0
 8002a14:	60fb      	str	r3, [r7, #12]
 8002a16:	4b1a      	ldr	r3, [pc, #104]	; (8002a80 <HAL_TIM_Base_MspInit+0x80>)
 8002a18:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a1a:	4a19      	ldr	r2, [pc, #100]	; (8002a80 <HAL_TIM_Base_MspInit+0x80>)
 8002a1c:	f043 0301 	orr.w	r3, r3, #1
 8002a20:	6413      	str	r3, [r2, #64]	; 0x40
 8002a22:	4b17      	ldr	r3, [pc, #92]	; (8002a80 <HAL_TIM_Base_MspInit+0x80>)
 8002a24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a26:	f003 0301 	and.w	r3, r3, #1
 8002a2a:	60fb      	str	r3, [r7, #12]
 8002a2c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002a2e:	2200      	movs	r2, #0
 8002a30:	2100      	movs	r1, #0
 8002a32:	201c      	movs	r0, #28
 8002a34:	f000 fae7 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002a38:	201c      	movs	r0, #28
 8002a3a:	f000 fb00 	bl	800303e <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002a3e:	e01a      	b.n	8002a76 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002a40:	687b      	ldr	r3, [r7, #4]
 8002a42:	681b      	ldr	r3, [r3, #0]
 8002a44:	4a0f      	ldr	r2, [pc, #60]	; (8002a84 <HAL_TIM_Base_MspInit+0x84>)
 8002a46:	4293      	cmp	r3, r2
 8002a48:	d115      	bne.n	8002a76 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002a4a:	2300      	movs	r3, #0
 8002a4c:	60bb      	str	r3, [r7, #8]
 8002a4e:	4b0c      	ldr	r3, [pc, #48]	; (8002a80 <HAL_TIM_Base_MspInit+0x80>)
 8002a50:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a52:	4a0b      	ldr	r2, [pc, #44]	; (8002a80 <HAL_TIM_Base_MspInit+0x80>)
 8002a54:	f043 0302 	orr.w	r3, r3, #2
 8002a58:	6413      	str	r3, [r2, #64]	; 0x40
 8002a5a:	4b09      	ldr	r3, [pc, #36]	; (8002a80 <HAL_TIM_Base_MspInit+0x80>)
 8002a5c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a5e:	f003 0302 	and.w	r3, r3, #2
 8002a62:	60bb      	str	r3, [r7, #8]
 8002a64:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002a66:	2200      	movs	r2, #0
 8002a68:	2100      	movs	r1, #0
 8002a6a:	201d      	movs	r0, #29
 8002a6c:	f000 facb 	bl	8003006 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002a70:	201d      	movs	r0, #29
 8002a72:	f000 fae4 	bl	800303e <HAL_NVIC_EnableIRQ>
}
 8002a76:	bf00      	nop
 8002a78:	3710      	adds	r7, #16
 8002a7a:	46bd      	mov	sp, r7
 8002a7c:	bd80      	pop	{r7, pc}
 8002a7e:	bf00      	nop
 8002a80:	40023800 	.word	0x40023800
 8002a84:	40000400 	.word	0x40000400

08002a88 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002a88:	b580      	push	{r7, lr}
 8002a8a:	b088      	sub	sp, #32
 8002a8c:	af00      	add	r7, sp, #0
 8002a8e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a90:	f107 030c 	add.w	r3, r7, #12
 8002a94:	2200      	movs	r2, #0
 8002a96:	601a      	str	r2, [r3, #0]
 8002a98:	605a      	str	r2, [r3, #4]
 8002a9a:	609a      	str	r2, [r3, #8]
 8002a9c:	60da      	str	r2, [r3, #12]
 8002a9e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002aa0:	687b      	ldr	r3, [r7, #4]
 8002aa2:	681b      	ldr	r3, [r3, #0]
 8002aa4:	4a12      	ldr	r2, [pc, #72]	; (8002af0 <HAL_TIM_MspPostInit+0x68>)
 8002aa6:	4293      	cmp	r3, r2
 8002aa8:	d11d      	bne.n	8002ae6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002aaa:	2300      	movs	r3, #0
 8002aac:	60bb      	str	r3, [r7, #8]
 8002aae:	4b11      	ldr	r3, [pc, #68]	; (8002af4 <HAL_TIM_MspPostInit+0x6c>)
 8002ab0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ab2:	4a10      	ldr	r2, [pc, #64]	; (8002af4 <HAL_TIM_MspPostInit+0x6c>)
 8002ab4:	f043 0301 	orr.w	r3, r3, #1
 8002ab8:	6313      	str	r3, [r2, #48]	; 0x30
 8002aba:	4b0e      	ldr	r3, [pc, #56]	; (8002af4 <HAL_TIM_MspPostInit+0x6c>)
 8002abc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002abe:	f003 0301 	and.w	r3, r3, #1
 8002ac2:	60bb      	str	r3, [r7, #8]
 8002ac4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002ac6:	2340      	movs	r3, #64	; 0x40
 8002ac8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002aca:	2302      	movs	r3, #2
 8002acc:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ace:	2300      	movs	r3, #0
 8002ad0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ad2:	2300      	movs	r3, #0
 8002ad4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ad6:	2302      	movs	r3, #2
 8002ad8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002ada:	f107 030c 	add.w	r3, r7, #12
 8002ade:	4619      	mov	r1, r3
 8002ae0:	4805      	ldr	r0, [pc, #20]	; (8002af8 <HAL_TIM_MspPostInit+0x70>)
 8002ae2:	f000 fb05 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002ae6:	bf00      	nop
 8002ae8:	3720      	adds	r7, #32
 8002aea:	46bd      	mov	sp, r7
 8002aec:	bd80      	pop	{r7, pc}
 8002aee:	bf00      	nop
 8002af0:	40000400 	.word	0x40000400
 8002af4:	40023800 	.word	0x40023800
 8002af8:	40020000 	.word	0x40020000

08002afc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002afc:	b580      	push	{r7, lr}
 8002afe:	b08c      	sub	sp, #48	; 0x30
 8002b00:	af00      	add	r7, sp, #0
 8002b02:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b04:	f107 031c 	add.w	r3, r7, #28
 8002b08:	2200      	movs	r2, #0
 8002b0a:	601a      	str	r2, [r3, #0]
 8002b0c:	605a      	str	r2, [r3, #4]
 8002b0e:	609a      	str	r2, [r3, #8]
 8002b10:	60da      	str	r2, [r3, #12]
 8002b12:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002b14:	687b      	ldr	r3, [r7, #4]
 8002b16:	681b      	ldr	r3, [r3, #0]
 8002b18:	4a32      	ldr	r2, [pc, #200]	; (8002be4 <HAL_UART_MspInit+0xe8>)
 8002b1a:	4293      	cmp	r3, r2
 8002b1c:	d12c      	bne.n	8002b78 <HAL_UART_MspInit+0x7c>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002b1e:	2300      	movs	r3, #0
 8002b20:	61bb      	str	r3, [r7, #24]
 8002b22:	4b31      	ldr	r3, [pc, #196]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b24:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b26:	4a30      	ldr	r2, [pc, #192]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b28:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002b2c:	6413      	str	r3, [r2, #64]	; 0x40
 8002b2e:	4b2e      	ldr	r3, [pc, #184]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b30:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b32:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002b36:	61bb      	str	r3, [r7, #24]
 8002b38:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b3a:	2300      	movs	r3, #0
 8002b3c:	617b      	str	r3, [r7, #20]
 8002b3e:	4b2a      	ldr	r3, [pc, #168]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b42:	4a29      	ldr	r2, [pc, #164]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b44:	f043 0301 	orr.w	r3, r3, #1
 8002b48:	6313      	str	r3, [r2, #48]	; 0x30
 8002b4a:	4b27      	ldr	r3, [pc, #156]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b4e:	f003 0301 	and.w	r3, r3, #1
 8002b52:	617b      	str	r3, [r7, #20]
 8002b54:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002b56:	230c      	movs	r3, #12
 8002b58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002b5a:	2302      	movs	r3, #2
 8002b5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002b5e:	2300      	movs	r3, #0
 8002b60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002b62:	2303      	movs	r3, #3
 8002b64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002b66:	2307      	movs	r3, #7
 8002b68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002b6a:	f107 031c 	add.w	r3, r7, #28
 8002b6e:	4619      	mov	r1, r3
 8002b70:	481e      	ldr	r0, [pc, #120]	; (8002bec <HAL_UART_MspInit+0xf0>)
 8002b72:	f000 fabd 	bl	80030f0 <HAL_GPIO_Init>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002b76:	e030      	b.n	8002bda <HAL_UART_MspInit+0xde>
  else if(huart->Instance==USART6)
 8002b78:	687b      	ldr	r3, [r7, #4]
 8002b7a:	681b      	ldr	r3, [r3, #0]
 8002b7c:	4a1c      	ldr	r2, [pc, #112]	; (8002bf0 <HAL_UART_MspInit+0xf4>)
 8002b7e:	4293      	cmp	r3, r2
 8002b80:	d12b      	bne.n	8002bda <HAL_UART_MspInit+0xde>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002b82:	2300      	movs	r3, #0
 8002b84:	613b      	str	r3, [r7, #16]
 8002b86:	4b18      	ldr	r3, [pc, #96]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b88:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b8a:	4a17      	ldr	r2, [pc, #92]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b8c:	f043 0320 	orr.w	r3, r3, #32
 8002b90:	6453      	str	r3, [r2, #68]	; 0x44
 8002b92:	4b15      	ldr	r3, [pc, #84]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002b94:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b96:	f003 0320 	and.w	r3, r3, #32
 8002b9a:	613b      	str	r3, [r7, #16]
 8002b9c:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002b9e:	2300      	movs	r3, #0
 8002ba0:	60fb      	str	r3, [r7, #12]
 8002ba2:	4b11      	ldr	r3, [pc, #68]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002ba4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ba6:	4a10      	ldr	r2, [pc, #64]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002ba8:	f043 0304 	orr.w	r3, r3, #4
 8002bac:	6313      	str	r3, [r2, #48]	; 0x30
 8002bae:	4b0e      	ldr	r3, [pc, #56]	; (8002be8 <HAL_UART_MspInit+0xec>)
 8002bb0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002bb2:	f003 0304 	and.w	r3, r3, #4
 8002bb6:	60fb      	str	r3, [r7, #12]
 8002bb8:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002bba:	23c0      	movs	r3, #192	; 0xc0
 8002bbc:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002bbe:	2302      	movs	r3, #2
 8002bc0:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002bc2:	2300      	movs	r3, #0
 8002bc4:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002bc6:	2303      	movs	r3, #3
 8002bc8:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002bca:	2308      	movs	r3, #8
 8002bcc:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002bce:	f107 031c 	add.w	r3, r7, #28
 8002bd2:	4619      	mov	r1, r3
 8002bd4:	4807      	ldr	r0, [pc, #28]	; (8002bf4 <HAL_UART_MspInit+0xf8>)
 8002bd6:	f000 fa8b 	bl	80030f0 <HAL_GPIO_Init>
}
 8002bda:	bf00      	nop
 8002bdc:	3730      	adds	r7, #48	; 0x30
 8002bde:	46bd      	mov	sp, r7
 8002be0:	bd80      	pop	{r7, pc}
 8002be2:	bf00      	nop
 8002be4:	40004400 	.word	0x40004400
 8002be8:	40023800 	.word	0x40023800
 8002bec:	40020000 	.word	0x40020000
 8002bf0:	40011400 	.word	0x40011400
 8002bf4:	40020800 	.word	0x40020800

08002bf8 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002bf8:	b480      	push	{r7}
 8002bfa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002bfc:	e7fe      	b.n	8002bfc <NMI_Handler+0x4>

08002bfe <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002bfe:	b480      	push	{r7}
 8002c00:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002c02:	e7fe      	b.n	8002c02 <HardFault_Handler+0x4>

08002c04 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002c04:	b480      	push	{r7}
 8002c06:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002c08:	e7fe      	b.n	8002c08 <MemManage_Handler+0x4>

08002c0a <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002c0a:	b480      	push	{r7}
 8002c0c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002c0e:	e7fe      	b.n	8002c0e <BusFault_Handler+0x4>

08002c10 <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002c10:	b480      	push	{r7}
 8002c12:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002c14:	e7fe      	b.n	8002c14 <UsageFault_Handler+0x4>

08002c16 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002c16:	b480      	push	{r7}
 8002c18:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002c1a:	bf00      	nop
 8002c1c:	46bd      	mov	sp, r7
 8002c1e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c22:	4770      	bx	lr

08002c24 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002c24:	b480      	push	{r7}
 8002c26:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002c28:	bf00      	nop
 8002c2a:	46bd      	mov	sp, r7
 8002c2c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c30:	4770      	bx	lr

08002c32 <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002c32:	b480      	push	{r7}
 8002c34:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002c36:	bf00      	nop
 8002c38:	46bd      	mov	sp, r7
 8002c3a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c3e:	4770      	bx	lr

08002c40 <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002c40:	b580      	push	{r7, lr}
 8002c42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002c44:	f000 f8c0 	bl	8002dc8 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002c48:	bf00      	nop
 8002c4a:	bd80      	pop	{r7, pc}

08002c4c <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002c50:	2080      	movs	r0, #128	; 0x80
 8002c52:	f000 fbeb 	bl	800342c <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002c56:	bf00      	nop
 8002c58:	bd80      	pop	{r7, pc}
	...

08002c5c <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002c5c:	b580      	push	{r7, lr}
 8002c5e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002c60:	4802      	ldr	r0, [pc, #8]	; (8002c6c <TIM2_IRQHandler+0x10>)
 8002c62:	f003 f9b3 	bl	8005fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002c66:	bf00      	nop
 8002c68:	bd80      	pop	{r7, pc}
 8002c6a:	bf00      	nop
 8002c6c:	200002bc 	.word	0x200002bc

08002c70 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002c70:	b580      	push	{r7, lr}
 8002c72:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002c74:	4802      	ldr	r0, [pc, #8]	; (8002c80 <TIM3_IRQHandler+0x10>)
 8002c76:	f003 f9a9 	bl	8005fcc <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002c7a:	bf00      	nop
 8002c7c:	bd80      	pop	{r7, pc}
 8002c7e:	bf00      	nop
 8002c80:	200001e8 	.word	0x200001e8

08002c84 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002c84:	b580      	push	{r7, lr}
 8002c86:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002c88:	4802      	ldr	r0, [pc, #8]	; (8002c94 <I2C1_EV_IRQHandler+0x10>)
 8002c8a:	f000 fd2b 	bl	80036e4 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002c8e:	bf00      	nop
 8002c90:	bd80      	pop	{r7, pc}
 8002c92:	bf00      	nop
 8002c94:	20000194 	.word	0x20000194

08002c98 <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002c98:	b580      	push	{r7, lr}
 8002c9a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002c9c:	4802      	ldr	r0, [pc, #8]	; (8002ca8 <I2C1_ER_IRQHandler+0x10>)
 8002c9e:	f000 fe8e 	bl	80039be <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002ca2:	bf00      	nop
 8002ca4:	bd80      	pop	{r7, pc}
 8002ca6:	bf00      	nop
 8002ca8:	20000194 	.word	0x20000194

08002cac <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002cac:	b480      	push	{r7}
 8002cae:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002cb0:	4b06      	ldr	r3, [pc, #24]	; (8002ccc <SystemInit+0x20>)
 8002cb2:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8002cb6:	4a05      	ldr	r2, [pc, #20]	; (8002ccc <SystemInit+0x20>)
 8002cb8:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002cbc:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8002cc0:	bf00      	nop
 8002cc2:	46bd      	mov	sp, r7
 8002cc4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002cc8:	4770      	bx	lr
 8002cca:	bf00      	nop
 8002ccc:	e000ed00 	.word	0xe000ed00

08002cd0 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8002cd0:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002d08 <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8002cd4:	480d      	ldr	r0, [pc, #52]	; (8002d0c <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8002cd6:	490e      	ldr	r1, [pc, #56]	; (8002d10 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8002cd8:	4a0e      	ldr	r2, [pc, #56]	; (8002d14 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8002cda:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8002cdc:	e002      	b.n	8002ce4 <LoopCopyDataInit>

08002cde <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8002cde:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8002ce0:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8002ce2:	3304      	adds	r3, #4

08002ce4 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8002ce4:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8002ce6:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8002ce8:	d3f9      	bcc.n	8002cde <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8002cea:	4a0b      	ldr	r2, [pc, #44]	; (8002d18 <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8002cec:	4c0b      	ldr	r4, [pc, #44]	; (8002d1c <LoopFillZerobss+0x26>)
  movs r3, #0
 8002cee:	2300      	movs	r3, #0
  b LoopFillZerobss
 8002cf0:	e001      	b.n	8002cf6 <LoopFillZerobss>

08002cf2 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8002cf2:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8002cf4:	3204      	adds	r2, #4

08002cf6 <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8002cf6:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8002cf8:	d3fb      	bcc.n	8002cf2 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002cfa:	f7ff ffd7 	bl	8002cac <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8002cfe:	f004 f981 	bl	8007004 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8002d02:	f7fe f9af 	bl	8001064 <main>
  bx  lr    
 8002d06:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8002d08:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8002d0c:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8002d10:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8002d14:	08008050 	.word	0x08008050
  ldr r2, =_sbss
 8002d18:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8002d1c:	2000034c 	.word	0x2000034c

08002d20 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8002d20:	e7fe      	b.n	8002d20 <ADC_IRQHandler>
	...

08002d24 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002d28:	4b0e      	ldr	r3, [pc, #56]	; (8002d64 <HAL_Init+0x40>)
 8002d2a:	681b      	ldr	r3, [r3, #0]
 8002d2c:	4a0d      	ldr	r2, [pc, #52]	; (8002d64 <HAL_Init+0x40>)
 8002d2e:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8002d32:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002d34:	4b0b      	ldr	r3, [pc, #44]	; (8002d64 <HAL_Init+0x40>)
 8002d36:	681b      	ldr	r3, [r3, #0]
 8002d38:	4a0a      	ldr	r2, [pc, #40]	; (8002d64 <HAL_Init+0x40>)
 8002d3a:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8002d3e:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8002d40:	4b08      	ldr	r3, [pc, #32]	; (8002d64 <HAL_Init+0x40>)
 8002d42:	681b      	ldr	r3, [r3, #0]
 8002d44:	4a07      	ldr	r2, [pc, #28]	; (8002d64 <HAL_Init+0x40>)
 8002d46:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8002d4a:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8002d4c:	2003      	movs	r0, #3
 8002d4e:	f000 f94f 	bl	8002ff0 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8002d52:	2000      	movs	r0, #0
 8002d54:	f000 f808 	bl	8002d68 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8002d58:	f7ff fd8a 	bl	8002870 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8002d5c:	2300      	movs	r3, #0
}
 8002d5e:	4618      	mov	r0, r3
 8002d60:	bd80      	pop	{r7, pc}
 8002d62:	bf00      	nop
 8002d64:	40023c00 	.word	0x40023c00

08002d68 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8002d68:	b580      	push	{r7, lr}
 8002d6a:	b082      	sub	sp, #8
 8002d6c:	af00      	add	r7, sp, #0
 8002d6e:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8002d70:	4b12      	ldr	r3, [pc, #72]	; (8002dbc <HAL_InitTick+0x54>)
 8002d72:	681a      	ldr	r2, [r3, #0]
 8002d74:	4b12      	ldr	r3, [pc, #72]	; (8002dc0 <HAL_InitTick+0x58>)
 8002d76:	781b      	ldrb	r3, [r3, #0]
 8002d78:	4619      	mov	r1, r3
 8002d7a:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8002d7e:	fbb3 f3f1 	udiv	r3, r3, r1
 8002d82:	fbb2 f3f3 	udiv	r3, r2, r3
 8002d86:	4618      	mov	r0, r3
 8002d88:	f000 f975 	bl	8003076 <HAL_SYSTICK_Config>
 8002d8c:	4603      	mov	r3, r0
 8002d8e:	2b00      	cmp	r3, #0
 8002d90:	d001      	beq.n	8002d96 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8002d92:	2301      	movs	r3, #1
 8002d94:	e00e      	b.n	8002db4 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8002d96:	687b      	ldr	r3, [r7, #4]
 8002d98:	2b0f      	cmp	r3, #15
 8002d9a:	d80a      	bhi.n	8002db2 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8002d9c:	2200      	movs	r2, #0
 8002d9e:	6879      	ldr	r1, [r7, #4]
 8002da0:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002da4:	f000 f92f 	bl	8003006 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002da8:	4a06      	ldr	r2, [pc, #24]	; (8002dc4 <HAL_InitTick+0x5c>)
 8002daa:	687b      	ldr	r3, [r7, #4]
 8002dac:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002dae:	2300      	movs	r3, #0
 8002db0:	e000      	b.n	8002db4 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002db2:	2301      	movs	r3, #1
}
 8002db4:	4618      	mov	r0, r3
 8002db6:	3708      	adds	r7, #8
 8002db8:	46bd      	mov	sp, r7
 8002dba:	bd80      	pop	{r7, pc}
 8002dbc:	20000030 	.word	0x20000030
 8002dc0:	20000038 	.word	0x20000038
 8002dc4:	20000034 	.word	0x20000034

08002dc8 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002dc8:	b480      	push	{r7}
 8002dca:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002dcc:	4b06      	ldr	r3, [pc, #24]	; (8002de8 <HAL_IncTick+0x20>)
 8002dce:	781b      	ldrb	r3, [r3, #0]
 8002dd0:	461a      	mov	r2, r3
 8002dd2:	4b06      	ldr	r3, [pc, #24]	; (8002dec <HAL_IncTick+0x24>)
 8002dd4:	681b      	ldr	r3, [r3, #0]
 8002dd6:	4413      	add	r3, r2
 8002dd8:	4a04      	ldr	r2, [pc, #16]	; (8002dec <HAL_IncTick+0x24>)
 8002dda:	6013      	str	r3, [r2, #0]
}
 8002ddc:	bf00      	nop
 8002dde:	46bd      	mov	sp, r7
 8002de0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002de4:	4770      	bx	lr
 8002de6:	bf00      	nop
 8002de8:	20000038 	.word	0x20000038
 8002dec:	20000348 	.word	0x20000348

08002df0 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002df0:	b480      	push	{r7}
 8002df2:	af00      	add	r7, sp, #0
  return uwTick;
 8002df4:	4b03      	ldr	r3, [pc, #12]	; (8002e04 <HAL_GetTick+0x14>)
 8002df6:	681b      	ldr	r3, [r3, #0]
}
 8002df8:	4618      	mov	r0, r3
 8002dfa:	46bd      	mov	sp, r7
 8002dfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e00:	4770      	bx	lr
 8002e02:	bf00      	nop
 8002e04:	20000348 	.word	0x20000348

08002e08 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002e08:	b480      	push	{r7}
 8002e0a:	b085      	sub	sp, #20
 8002e0c:	af00      	add	r7, sp, #0
 8002e0e:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002e10:	687b      	ldr	r3, [r7, #4]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002e18:	4b0c      	ldr	r3, [pc, #48]	; (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e1a:	68db      	ldr	r3, [r3, #12]
 8002e1c:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002e1e:	68ba      	ldr	r2, [r7, #8]
 8002e20:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002e24:	4013      	ands	r3, r2
 8002e26:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002e28:	68fb      	ldr	r3, [r7, #12]
 8002e2a:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002e2c:	68bb      	ldr	r3, [r7, #8]
 8002e2e:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002e30:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002e34:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002e38:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002e3a:	4a04      	ldr	r2, [pc, #16]	; (8002e4c <__NVIC_SetPriorityGrouping+0x44>)
 8002e3c:	68bb      	ldr	r3, [r7, #8]
 8002e3e:	60d3      	str	r3, [r2, #12]
}
 8002e40:	bf00      	nop
 8002e42:	3714      	adds	r7, #20
 8002e44:	46bd      	mov	sp, r7
 8002e46:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e4a:	4770      	bx	lr
 8002e4c:	e000ed00 	.word	0xe000ed00

08002e50 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002e50:	b480      	push	{r7}
 8002e52:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002e54:	4b04      	ldr	r3, [pc, #16]	; (8002e68 <__NVIC_GetPriorityGrouping+0x18>)
 8002e56:	68db      	ldr	r3, [r3, #12]
 8002e58:	0a1b      	lsrs	r3, r3, #8
 8002e5a:	f003 0307 	and.w	r3, r3, #7
}
 8002e5e:	4618      	mov	r0, r3
 8002e60:	46bd      	mov	sp, r7
 8002e62:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002e66:	4770      	bx	lr
 8002e68:	e000ed00 	.word	0xe000ed00

08002e6c <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002e6c:	b480      	push	{r7}
 8002e6e:	b083      	sub	sp, #12
 8002e70:	af00      	add	r7, sp, #0
 8002e72:	4603      	mov	r3, r0
 8002e74:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002e76:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e7a:	2b00      	cmp	r3, #0
 8002e7c:	db0b      	blt.n	8002e96 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002e7e:	79fb      	ldrb	r3, [r7, #7]
 8002e80:	f003 021f 	and.w	r2, r3, #31
 8002e84:	4907      	ldr	r1, [pc, #28]	; (8002ea4 <__NVIC_EnableIRQ+0x38>)
 8002e86:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002e8a:	095b      	lsrs	r3, r3, #5
 8002e8c:	2001      	movs	r0, #1
 8002e8e:	fa00 f202 	lsl.w	r2, r0, r2
 8002e92:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002e96:	bf00      	nop
 8002e98:	370c      	adds	r7, #12
 8002e9a:	46bd      	mov	sp, r7
 8002e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ea0:	4770      	bx	lr
 8002ea2:	bf00      	nop
 8002ea4:	e000e100 	.word	0xe000e100

08002ea8 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002ea8:	b480      	push	{r7}
 8002eaa:	b083      	sub	sp, #12
 8002eac:	af00      	add	r7, sp, #0
 8002eae:	4603      	mov	r3, r0
 8002eb0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002eb2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002eb6:	2b00      	cmp	r3, #0
 8002eb8:	db12      	blt.n	8002ee0 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002eba:	79fb      	ldrb	r3, [r7, #7]
 8002ebc:	f003 021f 	and.w	r2, r3, #31
 8002ec0:	490a      	ldr	r1, [pc, #40]	; (8002eec <__NVIC_DisableIRQ+0x44>)
 8002ec2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ec6:	095b      	lsrs	r3, r3, #5
 8002ec8:	2001      	movs	r0, #1
 8002eca:	fa00 f202 	lsl.w	r2, r0, r2
 8002ece:	3320      	adds	r3, #32
 8002ed0:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002ed4:	f3bf 8f4f 	dsb	sy
}
 8002ed8:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002eda:	f3bf 8f6f 	isb	sy
}
 8002ede:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002ee0:	bf00      	nop
 8002ee2:	370c      	adds	r7, #12
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr
 8002eec:	e000e100 	.word	0xe000e100

08002ef0 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002ef0:	b480      	push	{r7}
 8002ef2:	b083      	sub	sp, #12
 8002ef4:	af00      	add	r7, sp, #0
 8002ef6:	4603      	mov	r3, r0
 8002ef8:	6039      	str	r1, [r7, #0]
 8002efa:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002efc:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f00:	2b00      	cmp	r3, #0
 8002f02:	db0a      	blt.n	8002f1a <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f04:	683b      	ldr	r3, [r7, #0]
 8002f06:	b2da      	uxtb	r2, r3
 8002f08:	490c      	ldr	r1, [pc, #48]	; (8002f3c <__NVIC_SetPriority+0x4c>)
 8002f0a:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002f0e:	0112      	lsls	r2, r2, #4
 8002f10:	b2d2      	uxtb	r2, r2
 8002f12:	440b      	add	r3, r1
 8002f14:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002f18:	e00a      	b.n	8002f30 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002f1a:	683b      	ldr	r3, [r7, #0]
 8002f1c:	b2da      	uxtb	r2, r3
 8002f1e:	4908      	ldr	r1, [pc, #32]	; (8002f40 <__NVIC_SetPriority+0x50>)
 8002f20:	79fb      	ldrb	r3, [r7, #7]
 8002f22:	f003 030f 	and.w	r3, r3, #15
 8002f26:	3b04      	subs	r3, #4
 8002f28:	0112      	lsls	r2, r2, #4
 8002f2a:	b2d2      	uxtb	r2, r2
 8002f2c:	440b      	add	r3, r1
 8002f2e:	761a      	strb	r2, [r3, #24]
}
 8002f30:	bf00      	nop
 8002f32:	370c      	adds	r7, #12
 8002f34:	46bd      	mov	sp, r7
 8002f36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002f3a:	4770      	bx	lr
 8002f3c:	e000e100 	.word	0xe000e100
 8002f40:	e000ed00 	.word	0xe000ed00

08002f44 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002f44:	b480      	push	{r7}
 8002f46:	b089      	sub	sp, #36	; 0x24
 8002f48:	af00      	add	r7, sp, #0
 8002f4a:	60f8      	str	r0, [r7, #12]
 8002f4c:	60b9      	str	r1, [r7, #8]
 8002f4e:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002f50:	68fb      	ldr	r3, [r7, #12]
 8002f52:	f003 0307 	and.w	r3, r3, #7
 8002f56:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002f58:	69fb      	ldr	r3, [r7, #28]
 8002f5a:	f1c3 0307 	rsb	r3, r3, #7
 8002f5e:	2b04      	cmp	r3, #4
 8002f60:	bf28      	it	cs
 8002f62:	2304      	movcs	r3, #4
 8002f64:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002f66:	69fb      	ldr	r3, [r7, #28]
 8002f68:	3304      	adds	r3, #4
 8002f6a:	2b06      	cmp	r3, #6
 8002f6c:	d902      	bls.n	8002f74 <NVIC_EncodePriority+0x30>
 8002f6e:	69fb      	ldr	r3, [r7, #28]
 8002f70:	3b03      	subs	r3, #3
 8002f72:	e000      	b.n	8002f76 <NVIC_EncodePriority+0x32>
 8002f74:	2300      	movs	r3, #0
 8002f76:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f78:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8002f7c:	69bb      	ldr	r3, [r7, #24]
 8002f7e:	fa02 f303 	lsl.w	r3, r2, r3
 8002f82:	43da      	mvns	r2, r3
 8002f84:	68bb      	ldr	r3, [r7, #8]
 8002f86:	401a      	ands	r2, r3
 8002f88:	697b      	ldr	r3, [r7, #20]
 8002f8a:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002f8c:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 8002f90:	697b      	ldr	r3, [r7, #20]
 8002f92:	fa01 f303 	lsl.w	r3, r1, r3
 8002f96:	43d9      	mvns	r1, r3
 8002f98:	687b      	ldr	r3, [r7, #4]
 8002f9a:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002f9c:	4313      	orrs	r3, r2
         );
}
 8002f9e:	4618      	mov	r0, r3
 8002fa0:	3724      	adds	r7, #36	; 0x24
 8002fa2:	46bd      	mov	sp, r7
 8002fa4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fa8:	4770      	bx	lr
	...

08002fac <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002fac:	b580      	push	{r7, lr}
 8002fae:	b082      	sub	sp, #8
 8002fb0:	af00      	add	r7, sp, #0
 8002fb2:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002fb4:	687b      	ldr	r3, [r7, #4]
 8002fb6:	3b01      	subs	r3, #1
 8002fb8:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002fbc:	d301      	bcc.n	8002fc2 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002fbe:	2301      	movs	r3, #1
 8002fc0:	e00f      	b.n	8002fe2 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002fc2:	4a0a      	ldr	r2, [pc, #40]	; (8002fec <SysTick_Config+0x40>)
 8002fc4:	687b      	ldr	r3, [r7, #4]
 8002fc6:	3b01      	subs	r3, #1
 8002fc8:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002fca:	210f      	movs	r1, #15
 8002fcc:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8002fd0:	f7ff ff8e 	bl	8002ef0 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002fd4:	4b05      	ldr	r3, [pc, #20]	; (8002fec <SysTick_Config+0x40>)
 8002fd6:	2200      	movs	r2, #0
 8002fd8:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002fda:	4b04      	ldr	r3, [pc, #16]	; (8002fec <SysTick_Config+0x40>)
 8002fdc:	2207      	movs	r2, #7
 8002fde:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002fe0:	2300      	movs	r3, #0
}
 8002fe2:	4618      	mov	r0, r3
 8002fe4:	3708      	adds	r7, #8
 8002fe6:	46bd      	mov	sp, r7
 8002fe8:	bd80      	pop	{r7, pc}
 8002fea:	bf00      	nop
 8002fec:	e000e010 	.word	0xe000e010

08002ff0 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002ff0:	b580      	push	{r7, lr}
 8002ff2:	b082      	sub	sp, #8
 8002ff4:	af00      	add	r7, sp, #0
 8002ff6:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002ff8:	6878      	ldr	r0, [r7, #4]
 8002ffa:	f7ff ff05 	bl	8002e08 <__NVIC_SetPriorityGrouping>
}
 8002ffe:	bf00      	nop
 8003000:	3708      	adds	r7, #8
 8003002:	46bd      	mov	sp, r7
 8003004:	bd80      	pop	{r7, pc}

08003006 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003006:	b580      	push	{r7, lr}
 8003008:	b086      	sub	sp, #24
 800300a:	af00      	add	r7, sp, #0
 800300c:	4603      	mov	r3, r0
 800300e:	60b9      	str	r1, [r7, #8]
 8003010:	607a      	str	r2, [r7, #4]
 8003012:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003014:	2300      	movs	r3, #0
 8003016:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003018:	f7ff ff1a 	bl	8002e50 <__NVIC_GetPriorityGrouping>
 800301c:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 800301e:	687a      	ldr	r2, [r7, #4]
 8003020:	68b9      	ldr	r1, [r7, #8]
 8003022:	6978      	ldr	r0, [r7, #20]
 8003024:	f7ff ff8e 	bl	8002f44 <NVIC_EncodePriority>
 8003028:	4602      	mov	r2, r0
 800302a:	f997 300f 	ldrsb.w	r3, [r7, #15]
 800302e:	4611      	mov	r1, r2
 8003030:	4618      	mov	r0, r3
 8003032:	f7ff ff5d 	bl	8002ef0 <__NVIC_SetPriority>
}
 8003036:	bf00      	nop
 8003038:	3718      	adds	r7, #24
 800303a:	46bd      	mov	sp, r7
 800303c:	bd80      	pop	{r7, pc}

0800303e <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 800303e:	b580      	push	{r7, lr}
 8003040:	b082      	sub	sp, #8
 8003042:	af00      	add	r7, sp, #0
 8003044:	4603      	mov	r3, r0
 8003046:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003048:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800304c:	4618      	mov	r0, r3
 800304e:	f7ff ff0d 	bl	8002e6c <__NVIC_EnableIRQ>
}
 8003052:	bf00      	nop
 8003054:	3708      	adds	r7, #8
 8003056:	46bd      	mov	sp, r7
 8003058:	bd80      	pop	{r7, pc}

0800305a <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 800305a:	b580      	push	{r7, lr}
 800305c:	b082      	sub	sp, #8
 800305e:	af00      	add	r7, sp, #0
 8003060:	4603      	mov	r3, r0
 8003062:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003064:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003068:	4618      	mov	r0, r3
 800306a:	f7ff ff1d 	bl	8002ea8 <__NVIC_DisableIRQ>
}
 800306e:	bf00      	nop
 8003070:	3708      	adds	r7, #8
 8003072:	46bd      	mov	sp, r7
 8003074:	bd80      	pop	{r7, pc}

08003076 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003076:	b580      	push	{r7, lr}
 8003078:	b082      	sub	sp, #8
 800307a:	af00      	add	r7, sp, #0
 800307c:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 800307e:	6878      	ldr	r0, [r7, #4]
 8003080:	f7ff ff94 	bl	8002fac <SysTick_Config>
 8003084:	4603      	mov	r3, r0
}
 8003086:	4618      	mov	r0, r3
 8003088:	3708      	adds	r7, #8
 800308a:	46bd      	mov	sp, r7
 800308c:	bd80      	pop	{r7, pc}

0800308e <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 800308e:	b480      	push	{r7}
 8003090:	b083      	sub	sp, #12
 8003092:	af00      	add	r7, sp, #0
 8003094:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003096:	687b      	ldr	r3, [r7, #4]
 8003098:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800309c:	b2db      	uxtb	r3, r3
 800309e:	2b02      	cmp	r3, #2
 80030a0:	d004      	beq.n	80030ac <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80030a2:	687b      	ldr	r3, [r7, #4]
 80030a4:	2280      	movs	r2, #128	; 0x80
 80030a6:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80030a8:	2301      	movs	r3, #1
 80030aa:	e00c      	b.n	80030c6 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80030ac:	687b      	ldr	r3, [r7, #4]
 80030ae:	2205      	movs	r2, #5
 80030b0:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	681b      	ldr	r3, [r3, #0]
 80030b8:	681a      	ldr	r2, [r3, #0]
 80030ba:	687b      	ldr	r3, [r7, #4]
 80030bc:	681b      	ldr	r3, [r3, #0]
 80030be:	f022 0201 	bic.w	r2, r2, #1
 80030c2:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 80030c4:	2300      	movs	r3, #0
}
 80030c6:	4618      	mov	r0, r3
 80030c8:	370c      	adds	r7, #12
 80030ca:	46bd      	mov	sp, r7
 80030cc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030d0:	4770      	bx	lr

080030d2 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 80030d2:	b480      	push	{r7}
 80030d4:	b083      	sub	sp, #12
 80030d6:	af00      	add	r7, sp, #0
 80030d8:	6078      	str	r0, [r7, #4]
  return hdma->State;
 80030da:	687b      	ldr	r3, [r7, #4]
 80030dc:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80030e0:	b2db      	uxtb	r3, r3
}
 80030e2:	4618      	mov	r0, r3
 80030e4:	370c      	adds	r7, #12
 80030e6:	46bd      	mov	sp, r7
 80030e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80030ec:	4770      	bx	lr
	...

080030f0 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 80030f0:	b480      	push	{r7}
 80030f2:	b089      	sub	sp, #36	; 0x24
 80030f4:	af00      	add	r7, sp, #0
 80030f6:	6078      	str	r0, [r7, #4]
 80030f8:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 80030fa:	2300      	movs	r3, #0
 80030fc:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 80030fe:	2300      	movs	r3, #0
 8003100:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003102:	2300      	movs	r3, #0
 8003104:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003106:	2300      	movs	r3, #0
 8003108:	61fb      	str	r3, [r7, #28]
 800310a:	e159      	b.n	80033c0 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 800310c:	2201      	movs	r2, #1
 800310e:	69fb      	ldr	r3, [r7, #28]
 8003110:	fa02 f303 	lsl.w	r3, r2, r3
 8003114:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003116:	683b      	ldr	r3, [r7, #0]
 8003118:	681b      	ldr	r3, [r3, #0]
 800311a:	697a      	ldr	r2, [r7, #20]
 800311c:	4013      	ands	r3, r2
 800311e:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003120:	693a      	ldr	r2, [r7, #16]
 8003122:	697b      	ldr	r3, [r7, #20]
 8003124:	429a      	cmp	r2, r3
 8003126:	f040 8148 	bne.w	80033ba <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800312a:	683b      	ldr	r3, [r7, #0]
 800312c:	685b      	ldr	r3, [r3, #4]
 800312e:	f003 0303 	and.w	r3, r3, #3
 8003132:	2b01      	cmp	r3, #1
 8003134:	d005      	beq.n	8003142 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003136:	683b      	ldr	r3, [r7, #0]
 8003138:	685b      	ldr	r3, [r3, #4]
 800313a:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 800313e:	2b02      	cmp	r3, #2
 8003140:	d130      	bne.n	80031a4 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003142:	687b      	ldr	r3, [r7, #4]
 8003144:	689b      	ldr	r3, [r3, #8]
 8003146:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003148:	69fb      	ldr	r3, [r7, #28]
 800314a:	005b      	lsls	r3, r3, #1
 800314c:	2203      	movs	r2, #3
 800314e:	fa02 f303 	lsl.w	r3, r2, r3
 8003152:	43db      	mvns	r3, r3
 8003154:	69ba      	ldr	r2, [r7, #24]
 8003156:	4013      	ands	r3, r2
 8003158:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 800315a:	683b      	ldr	r3, [r7, #0]
 800315c:	68da      	ldr	r2, [r3, #12]
 800315e:	69fb      	ldr	r3, [r7, #28]
 8003160:	005b      	lsls	r3, r3, #1
 8003162:	fa02 f303 	lsl.w	r3, r2, r3
 8003166:	69ba      	ldr	r2, [r7, #24]
 8003168:	4313      	orrs	r3, r2
 800316a:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 800316c:	687b      	ldr	r3, [r7, #4]
 800316e:	69ba      	ldr	r2, [r7, #24]
 8003170:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003172:	687b      	ldr	r3, [r7, #4]
 8003174:	685b      	ldr	r3, [r3, #4]
 8003176:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003178:	2201      	movs	r2, #1
 800317a:	69fb      	ldr	r3, [r7, #28]
 800317c:	fa02 f303 	lsl.w	r3, r2, r3
 8003180:	43db      	mvns	r3, r3
 8003182:	69ba      	ldr	r2, [r7, #24]
 8003184:	4013      	ands	r3, r2
 8003186:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003188:	683b      	ldr	r3, [r7, #0]
 800318a:	685b      	ldr	r3, [r3, #4]
 800318c:	091b      	lsrs	r3, r3, #4
 800318e:	f003 0201 	and.w	r2, r3, #1
 8003192:	69fb      	ldr	r3, [r7, #28]
 8003194:	fa02 f303 	lsl.w	r3, r2, r3
 8003198:	69ba      	ldr	r2, [r7, #24]
 800319a:	4313      	orrs	r3, r2
 800319c:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	69ba      	ldr	r2, [r7, #24]
 80031a2:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 80031a4:	683b      	ldr	r3, [r7, #0]
 80031a6:	685b      	ldr	r3, [r3, #4]
 80031a8:	f003 0303 	and.w	r3, r3, #3
 80031ac:	2b03      	cmp	r3, #3
 80031ae:	d017      	beq.n	80031e0 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 80031b0:	687b      	ldr	r3, [r7, #4]
 80031b2:	68db      	ldr	r3, [r3, #12]
 80031b4:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 80031b6:	69fb      	ldr	r3, [r7, #28]
 80031b8:	005b      	lsls	r3, r3, #1
 80031ba:	2203      	movs	r2, #3
 80031bc:	fa02 f303 	lsl.w	r3, r2, r3
 80031c0:	43db      	mvns	r3, r3
 80031c2:	69ba      	ldr	r2, [r7, #24]
 80031c4:	4013      	ands	r3, r2
 80031c6:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 80031c8:	683b      	ldr	r3, [r7, #0]
 80031ca:	689a      	ldr	r2, [r3, #8]
 80031cc:	69fb      	ldr	r3, [r7, #28]
 80031ce:	005b      	lsls	r3, r3, #1
 80031d0:	fa02 f303 	lsl.w	r3, r2, r3
 80031d4:	69ba      	ldr	r2, [r7, #24]
 80031d6:	4313      	orrs	r3, r2
 80031d8:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 80031da:	687b      	ldr	r3, [r7, #4]
 80031dc:	69ba      	ldr	r2, [r7, #24]
 80031de:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80031e0:	683b      	ldr	r3, [r7, #0]
 80031e2:	685b      	ldr	r3, [r3, #4]
 80031e4:	f003 0303 	and.w	r3, r3, #3
 80031e8:	2b02      	cmp	r3, #2
 80031ea:	d123      	bne.n	8003234 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 80031ec:	69fb      	ldr	r3, [r7, #28]
 80031ee:	08da      	lsrs	r2, r3, #3
 80031f0:	687b      	ldr	r3, [r7, #4]
 80031f2:	3208      	adds	r2, #8
 80031f4:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 80031f8:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 80031fa:	69fb      	ldr	r3, [r7, #28]
 80031fc:	f003 0307 	and.w	r3, r3, #7
 8003200:	009b      	lsls	r3, r3, #2
 8003202:	220f      	movs	r2, #15
 8003204:	fa02 f303 	lsl.w	r3, r2, r3
 8003208:	43db      	mvns	r3, r3
 800320a:	69ba      	ldr	r2, [r7, #24]
 800320c:	4013      	ands	r3, r2
 800320e:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003210:	683b      	ldr	r3, [r7, #0]
 8003212:	691a      	ldr	r2, [r3, #16]
 8003214:	69fb      	ldr	r3, [r7, #28]
 8003216:	f003 0307 	and.w	r3, r3, #7
 800321a:	009b      	lsls	r3, r3, #2
 800321c:	fa02 f303 	lsl.w	r3, r2, r3
 8003220:	69ba      	ldr	r2, [r7, #24]
 8003222:	4313      	orrs	r3, r2
 8003224:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003226:	69fb      	ldr	r3, [r7, #28]
 8003228:	08da      	lsrs	r2, r3, #3
 800322a:	687b      	ldr	r3, [r7, #4]
 800322c:	3208      	adds	r2, #8
 800322e:	69b9      	ldr	r1, [r7, #24]
 8003230:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003234:	687b      	ldr	r3, [r7, #4]
 8003236:	681b      	ldr	r3, [r3, #0]
 8003238:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 800323a:	69fb      	ldr	r3, [r7, #28]
 800323c:	005b      	lsls	r3, r3, #1
 800323e:	2203      	movs	r2, #3
 8003240:	fa02 f303 	lsl.w	r3, r2, r3
 8003244:	43db      	mvns	r3, r3
 8003246:	69ba      	ldr	r2, [r7, #24]
 8003248:	4013      	ands	r3, r2
 800324a:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 800324c:	683b      	ldr	r3, [r7, #0]
 800324e:	685b      	ldr	r3, [r3, #4]
 8003250:	f003 0203 	and.w	r2, r3, #3
 8003254:	69fb      	ldr	r3, [r7, #28]
 8003256:	005b      	lsls	r3, r3, #1
 8003258:	fa02 f303 	lsl.w	r3, r2, r3
 800325c:	69ba      	ldr	r2, [r7, #24]
 800325e:	4313      	orrs	r3, r2
 8003260:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003262:	687b      	ldr	r3, [r7, #4]
 8003264:	69ba      	ldr	r2, [r7, #24]
 8003266:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003268:	683b      	ldr	r3, [r7, #0]
 800326a:	685b      	ldr	r3, [r3, #4]
 800326c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003270:	2b00      	cmp	r3, #0
 8003272:	f000 80a2 	beq.w	80033ba <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003276:	2300      	movs	r3, #0
 8003278:	60fb      	str	r3, [r7, #12]
 800327a:	4b57      	ldr	r3, [pc, #348]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 800327c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800327e:	4a56      	ldr	r2, [pc, #344]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 8003280:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003284:	6453      	str	r3, [r2, #68]	; 0x44
 8003286:	4b54      	ldr	r3, [pc, #336]	; (80033d8 <HAL_GPIO_Init+0x2e8>)
 8003288:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800328a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800328e:	60fb      	str	r3, [r7, #12]
 8003290:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003292:	4a52      	ldr	r2, [pc, #328]	; (80033dc <HAL_GPIO_Init+0x2ec>)
 8003294:	69fb      	ldr	r3, [r7, #28]
 8003296:	089b      	lsrs	r3, r3, #2
 8003298:	3302      	adds	r3, #2
 800329a:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800329e:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 80032a0:	69fb      	ldr	r3, [r7, #28]
 80032a2:	f003 0303 	and.w	r3, r3, #3
 80032a6:	009b      	lsls	r3, r3, #2
 80032a8:	220f      	movs	r2, #15
 80032aa:	fa02 f303 	lsl.w	r3, r2, r3
 80032ae:	43db      	mvns	r3, r3
 80032b0:	69ba      	ldr	r2, [r7, #24]
 80032b2:	4013      	ands	r3, r2
 80032b4:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 80032b6:	687b      	ldr	r3, [r7, #4]
 80032b8:	4a49      	ldr	r2, [pc, #292]	; (80033e0 <HAL_GPIO_Init+0x2f0>)
 80032ba:	4293      	cmp	r3, r2
 80032bc:	d019      	beq.n	80032f2 <HAL_GPIO_Init+0x202>
 80032be:	687b      	ldr	r3, [r7, #4]
 80032c0:	4a48      	ldr	r2, [pc, #288]	; (80033e4 <HAL_GPIO_Init+0x2f4>)
 80032c2:	4293      	cmp	r3, r2
 80032c4:	d013      	beq.n	80032ee <HAL_GPIO_Init+0x1fe>
 80032c6:	687b      	ldr	r3, [r7, #4]
 80032c8:	4a47      	ldr	r2, [pc, #284]	; (80033e8 <HAL_GPIO_Init+0x2f8>)
 80032ca:	4293      	cmp	r3, r2
 80032cc:	d00d      	beq.n	80032ea <HAL_GPIO_Init+0x1fa>
 80032ce:	687b      	ldr	r3, [r7, #4]
 80032d0:	4a46      	ldr	r2, [pc, #280]	; (80033ec <HAL_GPIO_Init+0x2fc>)
 80032d2:	4293      	cmp	r3, r2
 80032d4:	d007      	beq.n	80032e6 <HAL_GPIO_Init+0x1f6>
 80032d6:	687b      	ldr	r3, [r7, #4]
 80032d8:	4a45      	ldr	r2, [pc, #276]	; (80033f0 <HAL_GPIO_Init+0x300>)
 80032da:	4293      	cmp	r3, r2
 80032dc:	d101      	bne.n	80032e2 <HAL_GPIO_Init+0x1f2>
 80032de:	2304      	movs	r3, #4
 80032e0:	e008      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032e2:	2307      	movs	r3, #7
 80032e4:	e006      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032e6:	2303      	movs	r3, #3
 80032e8:	e004      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032ea:	2302      	movs	r3, #2
 80032ec:	e002      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032ee:	2301      	movs	r3, #1
 80032f0:	e000      	b.n	80032f4 <HAL_GPIO_Init+0x204>
 80032f2:	2300      	movs	r3, #0
 80032f4:	69fa      	ldr	r2, [r7, #28]
 80032f6:	f002 0203 	and.w	r2, r2, #3
 80032fa:	0092      	lsls	r2, r2, #2
 80032fc:	4093      	lsls	r3, r2
 80032fe:	69ba      	ldr	r2, [r7, #24]
 8003300:	4313      	orrs	r3, r2
 8003302:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003304:	4935      	ldr	r1, [pc, #212]	; (80033dc <HAL_GPIO_Init+0x2ec>)
 8003306:	69fb      	ldr	r3, [r7, #28]
 8003308:	089b      	lsrs	r3, r3, #2
 800330a:	3302      	adds	r3, #2
 800330c:	69ba      	ldr	r2, [r7, #24]
 800330e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003312:	4b38      	ldr	r3, [pc, #224]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003314:	681b      	ldr	r3, [r3, #0]
 8003316:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003318:	693b      	ldr	r3, [r7, #16]
 800331a:	43db      	mvns	r3, r3
 800331c:	69ba      	ldr	r2, [r7, #24]
 800331e:	4013      	ands	r3, r2
 8003320:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003322:	683b      	ldr	r3, [r7, #0]
 8003324:	685b      	ldr	r3, [r3, #4]
 8003326:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 800332a:	2b00      	cmp	r3, #0
 800332c:	d003      	beq.n	8003336 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800332e:	69ba      	ldr	r2, [r7, #24]
 8003330:	693b      	ldr	r3, [r7, #16]
 8003332:	4313      	orrs	r3, r2
 8003334:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003336:	4a2f      	ldr	r2, [pc, #188]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003338:	69bb      	ldr	r3, [r7, #24]
 800333a:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 800333c:	4b2d      	ldr	r3, [pc, #180]	; (80033f4 <HAL_GPIO_Init+0x304>)
 800333e:	685b      	ldr	r3, [r3, #4]
 8003340:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003342:	693b      	ldr	r3, [r7, #16]
 8003344:	43db      	mvns	r3, r3
 8003346:	69ba      	ldr	r2, [r7, #24]
 8003348:	4013      	ands	r3, r2
 800334a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 800334c:	683b      	ldr	r3, [r7, #0]
 800334e:	685b      	ldr	r3, [r3, #4]
 8003350:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003354:	2b00      	cmp	r3, #0
 8003356:	d003      	beq.n	8003360 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003358:	69ba      	ldr	r2, [r7, #24]
 800335a:	693b      	ldr	r3, [r7, #16]
 800335c:	4313      	orrs	r3, r2
 800335e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003360:	4a24      	ldr	r2, [pc, #144]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003362:	69bb      	ldr	r3, [r7, #24]
 8003364:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003366:	4b23      	ldr	r3, [pc, #140]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003368:	689b      	ldr	r3, [r3, #8]
 800336a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 800336c:	693b      	ldr	r3, [r7, #16]
 800336e:	43db      	mvns	r3, r3
 8003370:	69ba      	ldr	r2, [r7, #24]
 8003372:	4013      	ands	r3, r2
 8003374:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003376:	683b      	ldr	r3, [r7, #0]
 8003378:	685b      	ldr	r3, [r3, #4]
 800337a:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 800337e:	2b00      	cmp	r3, #0
 8003380:	d003      	beq.n	800338a <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003382:	69ba      	ldr	r2, [r7, #24]
 8003384:	693b      	ldr	r3, [r7, #16]
 8003386:	4313      	orrs	r3, r2
 8003388:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 800338a:	4a1a      	ldr	r2, [pc, #104]	; (80033f4 <HAL_GPIO_Init+0x304>)
 800338c:	69bb      	ldr	r3, [r7, #24]
 800338e:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003390:	4b18      	ldr	r3, [pc, #96]	; (80033f4 <HAL_GPIO_Init+0x304>)
 8003392:	68db      	ldr	r3, [r3, #12]
 8003394:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003396:	693b      	ldr	r3, [r7, #16]
 8003398:	43db      	mvns	r3, r3
 800339a:	69ba      	ldr	r2, [r7, #24]
 800339c:	4013      	ands	r3, r2
 800339e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 80033a0:	683b      	ldr	r3, [r7, #0]
 80033a2:	685b      	ldr	r3, [r3, #4]
 80033a4:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 80033a8:	2b00      	cmp	r3, #0
 80033aa:	d003      	beq.n	80033b4 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 80033ac:	69ba      	ldr	r2, [r7, #24]
 80033ae:	693b      	ldr	r3, [r7, #16]
 80033b0:	4313      	orrs	r3, r2
 80033b2:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 80033b4:	4a0f      	ldr	r2, [pc, #60]	; (80033f4 <HAL_GPIO_Init+0x304>)
 80033b6:	69bb      	ldr	r3, [r7, #24]
 80033b8:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 80033ba:	69fb      	ldr	r3, [r7, #28]
 80033bc:	3301      	adds	r3, #1
 80033be:	61fb      	str	r3, [r7, #28]
 80033c0:	69fb      	ldr	r3, [r7, #28]
 80033c2:	2b0f      	cmp	r3, #15
 80033c4:	f67f aea2 	bls.w	800310c <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 80033c8:	bf00      	nop
 80033ca:	bf00      	nop
 80033cc:	3724      	adds	r7, #36	; 0x24
 80033ce:	46bd      	mov	sp, r7
 80033d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80033d4:	4770      	bx	lr
 80033d6:	bf00      	nop
 80033d8:	40023800 	.word	0x40023800
 80033dc:	40013800 	.word	0x40013800
 80033e0:	40020000 	.word	0x40020000
 80033e4:	40020400 	.word	0x40020400
 80033e8:	40020800 	.word	0x40020800
 80033ec:	40020c00 	.word	0x40020c00
 80033f0:	40021000 	.word	0x40021000
 80033f4:	40013c00 	.word	0x40013c00

080033f8 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 80033f8:	b480      	push	{r7}
 80033fa:	b083      	sub	sp, #12
 80033fc:	af00      	add	r7, sp, #0
 80033fe:	6078      	str	r0, [r7, #4]
 8003400:	460b      	mov	r3, r1
 8003402:	807b      	strh	r3, [r7, #2]
 8003404:	4613      	mov	r3, r2
 8003406:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003408:	787b      	ldrb	r3, [r7, #1]
 800340a:	2b00      	cmp	r3, #0
 800340c:	d003      	beq.n	8003416 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800340e:	887a      	ldrh	r2, [r7, #2]
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003414:	e003      	b.n	800341e <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003416:	887b      	ldrh	r3, [r7, #2]
 8003418:	041a      	lsls	r2, r3, #16
 800341a:	687b      	ldr	r3, [r7, #4]
 800341c:	619a      	str	r2, [r3, #24]
}
 800341e:	bf00      	nop
 8003420:	370c      	adds	r7, #12
 8003422:	46bd      	mov	sp, r7
 8003424:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003428:	4770      	bx	lr
	...

0800342c <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 800342c:	b580      	push	{r7, lr}
 800342e:	b082      	sub	sp, #8
 8003430:	af00      	add	r7, sp, #0
 8003432:	4603      	mov	r3, r0
 8003434:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003436:	4b08      	ldr	r3, [pc, #32]	; (8003458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003438:	695a      	ldr	r2, [r3, #20]
 800343a:	88fb      	ldrh	r3, [r7, #6]
 800343c:	4013      	ands	r3, r2
 800343e:	2b00      	cmp	r3, #0
 8003440:	d006      	beq.n	8003450 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003442:	4a05      	ldr	r2, [pc, #20]	; (8003458 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003444:	88fb      	ldrh	r3, [r7, #6]
 8003446:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003448:	88fb      	ldrh	r3, [r7, #6]
 800344a:	4618      	mov	r0, r3
 800344c:	f7fe f902 	bl	8001654 <HAL_GPIO_EXTI_Callback>
  }
}
 8003450:	bf00      	nop
 8003452:	3708      	adds	r7, #8
 8003454:	46bd      	mov	sp, r7
 8003456:	bd80      	pop	{r7, pc}
 8003458:	40013c00 	.word	0x40013c00

0800345c <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 800345c:	b580      	push	{r7, lr}
 800345e:	b084      	sub	sp, #16
 8003460:	af00      	add	r7, sp, #0
 8003462:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	2b00      	cmp	r3, #0
 8003468:	d101      	bne.n	800346e <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 800346a:	2301      	movs	r3, #1
 800346c:	e12b      	b.n	80036c6 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 800346e:	687b      	ldr	r3, [r7, #4]
 8003470:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003474:	b2db      	uxtb	r3, r3
 8003476:	2b00      	cmp	r3, #0
 8003478:	d106      	bne.n	8003488 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 800347a:	687b      	ldr	r3, [r7, #4]
 800347c:	2200      	movs	r2, #0
 800347e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003482:	6878      	ldr	r0, [r7, #4]
 8003484:	f7ff fa1c 	bl	80028c0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	2224      	movs	r2, #36	; 0x24
 800348c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003490:	687b      	ldr	r3, [r7, #4]
 8003492:	681b      	ldr	r3, [r3, #0]
 8003494:	681a      	ldr	r2, [r3, #0]
 8003496:	687b      	ldr	r3, [r7, #4]
 8003498:	681b      	ldr	r3, [r3, #0]
 800349a:	f022 0201 	bic.w	r2, r2, #1
 800349e:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	681b      	ldr	r3, [r3, #0]
 80034a4:	681a      	ldr	r2, [r3, #0]
 80034a6:	687b      	ldr	r3, [r7, #4]
 80034a8:	681b      	ldr	r3, [r3, #0]
 80034aa:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 80034ae:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 80034b0:	687b      	ldr	r3, [r7, #4]
 80034b2:	681b      	ldr	r3, [r3, #0]
 80034b4:	681a      	ldr	r2, [r3, #0]
 80034b6:	687b      	ldr	r3, [r7, #4]
 80034b8:	681b      	ldr	r3, [r3, #0]
 80034ba:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 80034be:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 80034c0:	f002 fa12 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 80034c4:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 80034c6:	687b      	ldr	r3, [r7, #4]
 80034c8:	685b      	ldr	r3, [r3, #4]
 80034ca:	4a81      	ldr	r2, [pc, #516]	; (80036d0 <HAL_I2C_Init+0x274>)
 80034cc:	4293      	cmp	r3, r2
 80034ce:	d807      	bhi.n	80034e0 <HAL_I2C_Init+0x84>
 80034d0:	68fb      	ldr	r3, [r7, #12]
 80034d2:	4a80      	ldr	r2, [pc, #512]	; (80036d4 <HAL_I2C_Init+0x278>)
 80034d4:	4293      	cmp	r3, r2
 80034d6:	bf94      	ite	ls
 80034d8:	2301      	movls	r3, #1
 80034da:	2300      	movhi	r3, #0
 80034dc:	b2db      	uxtb	r3, r3
 80034de:	e006      	b.n	80034ee <HAL_I2C_Init+0x92>
 80034e0:	68fb      	ldr	r3, [r7, #12]
 80034e2:	4a7d      	ldr	r2, [pc, #500]	; (80036d8 <HAL_I2C_Init+0x27c>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	bf94      	ite	ls
 80034e8:	2301      	movls	r3, #1
 80034ea:	2300      	movhi	r3, #0
 80034ec:	b2db      	uxtb	r3, r3
 80034ee:	2b00      	cmp	r3, #0
 80034f0:	d001      	beq.n	80034f6 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 80034f2:	2301      	movs	r3, #1
 80034f4:	e0e7      	b.n	80036c6 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 80034f6:	68fb      	ldr	r3, [r7, #12]
 80034f8:	4a78      	ldr	r2, [pc, #480]	; (80036dc <HAL_I2C_Init+0x280>)
 80034fa:	fba2 2303 	umull	r2, r3, r2, r3
 80034fe:	0c9b      	lsrs	r3, r3, #18
 8003500:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8003502:	687b      	ldr	r3, [r7, #4]
 8003504:	681b      	ldr	r3, [r3, #0]
 8003506:	685b      	ldr	r3, [r3, #4]
 8003508:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 800350c:	687b      	ldr	r3, [r7, #4]
 800350e:	681b      	ldr	r3, [r3, #0]
 8003510:	68ba      	ldr	r2, [r7, #8]
 8003512:	430a      	orrs	r2, r1
 8003514:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8003516:	687b      	ldr	r3, [r7, #4]
 8003518:	681b      	ldr	r3, [r3, #0]
 800351a:	6a1b      	ldr	r3, [r3, #32]
 800351c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8003520:	687b      	ldr	r3, [r7, #4]
 8003522:	685b      	ldr	r3, [r3, #4]
 8003524:	4a6a      	ldr	r2, [pc, #424]	; (80036d0 <HAL_I2C_Init+0x274>)
 8003526:	4293      	cmp	r3, r2
 8003528:	d802      	bhi.n	8003530 <HAL_I2C_Init+0xd4>
 800352a:	68bb      	ldr	r3, [r7, #8]
 800352c:	3301      	adds	r3, #1
 800352e:	e009      	b.n	8003544 <HAL_I2C_Init+0xe8>
 8003530:	68bb      	ldr	r3, [r7, #8]
 8003532:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8003536:	fb02 f303 	mul.w	r3, r2, r3
 800353a:	4a69      	ldr	r2, [pc, #420]	; (80036e0 <HAL_I2C_Init+0x284>)
 800353c:	fba2 2303 	umull	r2, r3, r2, r3
 8003540:	099b      	lsrs	r3, r3, #6
 8003542:	3301      	adds	r3, #1
 8003544:	687a      	ldr	r2, [r7, #4]
 8003546:	6812      	ldr	r2, [r2, #0]
 8003548:	430b      	orrs	r3, r1
 800354a:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 800354c:	687b      	ldr	r3, [r7, #4]
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	69db      	ldr	r3, [r3, #28]
 8003552:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8003556:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800355a:	687b      	ldr	r3, [r7, #4]
 800355c:	685b      	ldr	r3, [r3, #4]
 800355e:	495c      	ldr	r1, [pc, #368]	; (80036d0 <HAL_I2C_Init+0x274>)
 8003560:	428b      	cmp	r3, r1
 8003562:	d819      	bhi.n	8003598 <HAL_I2C_Init+0x13c>
 8003564:	68fb      	ldr	r3, [r7, #12]
 8003566:	1e59      	subs	r1, r3, #1
 8003568:	687b      	ldr	r3, [r7, #4]
 800356a:	685b      	ldr	r3, [r3, #4]
 800356c:	005b      	lsls	r3, r3, #1
 800356e:	fbb1 f3f3 	udiv	r3, r1, r3
 8003572:	1c59      	adds	r1, r3, #1
 8003574:	f640 73fc 	movw	r3, #4092	; 0xffc
 8003578:	400b      	ands	r3, r1
 800357a:	2b00      	cmp	r3, #0
 800357c:	d00a      	beq.n	8003594 <HAL_I2C_Init+0x138>
 800357e:	68fb      	ldr	r3, [r7, #12]
 8003580:	1e59      	subs	r1, r3, #1
 8003582:	687b      	ldr	r3, [r7, #4]
 8003584:	685b      	ldr	r3, [r3, #4]
 8003586:	005b      	lsls	r3, r3, #1
 8003588:	fbb1 f3f3 	udiv	r3, r1, r3
 800358c:	3301      	adds	r3, #1
 800358e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003592:	e051      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003594:	2304      	movs	r3, #4
 8003596:	e04f      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	689b      	ldr	r3, [r3, #8]
 800359c:	2b00      	cmp	r3, #0
 800359e:	d111      	bne.n	80035c4 <HAL_I2C_Init+0x168>
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	1e58      	subs	r0, r3, #1
 80035a4:	687b      	ldr	r3, [r7, #4]
 80035a6:	6859      	ldr	r1, [r3, #4]
 80035a8:	460b      	mov	r3, r1
 80035aa:	005b      	lsls	r3, r3, #1
 80035ac:	440b      	add	r3, r1
 80035ae:	fbb0 f3f3 	udiv	r3, r0, r3
 80035b2:	3301      	adds	r3, #1
 80035b4:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035b8:	2b00      	cmp	r3, #0
 80035ba:	bf0c      	ite	eq
 80035bc:	2301      	moveq	r3, #1
 80035be:	2300      	movne	r3, #0
 80035c0:	b2db      	uxtb	r3, r3
 80035c2:	e012      	b.n	80035ea <HAL_I2C_Init+0x18e>
 80035c4:	68fb      	ldr	r3, [r7, #12]
 80035c6:	1e58      	subs	r0, r3, #1
 80035c8:	687b      	ldr	r3, [r7, #4]
 80035ca:	6859      	ldr	r1, [r3, #4]
 80035cc:	460b      	mov	r3, r1
 80035ce:	009b      	lsls	r3, r3, #2
 80035d0:	440b      	add	r3, r1
 80035d2:	0099      	lsls	r1, r3, #2
 80035d4:	440b      	add	r3, r1
 80035d6:	fbb0 f3f3 	udiv	r3, r0, r3
 80035da:	3301      	adds	r3, #1
 80035dc:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80035e0:	2b00      	cmp	r3, #0
 80035e2:	bf0c      	ite	eq
 80035e4:	2301      	moveq	r3, #1
 80035e6:	2300      	movne	r3, #0
 80035e8:	b2db      	uxtb	r3, r3
 80035ea:	2b00      	cmp	r3, #0
 80035ec:	d001      	beq.n	80035f2 <HAL_I2C_Init+0x196>
 80035ee:	2301      	movs	r3, #1
 80035f0:	e022      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 80035f2:	687b      	ldr	r3, [r7, #4]
 80035f4:	689b      	ldr	r3, [r3, #8]
 80035f6:	2b00      	cmp	r3, #0
 80035f8:	d10e      	bne.n	8003618 <HAL_I2C_Init+0x1bc>
 80035fa:	68fb      	ldr	r3, [r7, #12]
 80035fc:	1e58      	subs	r0, r3, #1
 80035fe:	687b      	ldr	r3, [r7, #4]
 8003600:	6859      	ldr	r1, [r3, #4]
 8003602:	460b      	mov	r3, r1
 8003604:	005b      	lsls	r3, r3, #1
 8003606:	440b      	add	r3, r1
 8003608:	fbb0 f3f3 	udiv	r3, r0, r3
 800360c:	3301      	adds	r3, #1
 800360e:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003612:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8003616:	e00f      	b.n	8003638 <HAL_I2C_Init+0x1dc>
 8003618:	68fb      	ldr	r3, [r7, #12]
 800361a:	1e58      	subs	r0, r3, #1
 800361c:	687b      	ldr	r3, [r7, #4]
 800361e:	6859      	ldr	r1, [r3, #4]
 8003620:	460b      	mov	r3, r1
 8003622:	009b      	lsls	r3, r3, #2
 8003624:	440b      	add	r3, r1
 8003626:	0099      	lsls	r1, r3, #2
 8003628:	440b      	add	r3, r1
 800362a:	fbb0 f3f3 	udiv	r3, r0, r3
 800362e:	3301      	adds	r3, #1
 8003630:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8003634:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8003638:	6879      	ldr	r1, [r7, #4]
 800363a:	6809      	ldr	r1, [r1, #0]
 800363c:	4313      	orrs	r3, r2
 800363e:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8003640:	687b      	ldr	r3, [r7, #4]
 8003642:	681b      	ldr	r3, [r3, #0]
 8003644:	681b      	ldr	r3, [r3, #0]
 8003646:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	69da      	ldr	r2, [r3, #28]
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	6a1b      	ldr	r3, [r3, #32]
 8003652:	431a      	orrs	r2, r3
 8003654:	687b      	ldr	r3, [r7, #4]
 8003656:	681b      	ldr	r3, [r3, #0]
 8003658:	430a      	orrs	r2, r1
 800365a:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 800365c:	687b      	ldr	r3, [r7, #4]
 800365e:	681b      	ldr	r3, [r3, #0]
 8003660:	689b      	ldr	r3, [r3, #8]
 8003662:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8003666:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800366a:	687a      	ldr	r2, [r7, #4]
 800366c:	6911      	ldr	r1, [r2, #16]
 800366e:	687a      	ldr	r2, [r7, #4]
 8003670:	68d2      	ldr	r2, [r2, #12]
 8003672:	4311      	orrs	r1, r2
 8003674:	687a      	ldr	r2, [r7, #4]
 8003676:	6812      	ldr	r2, [r2, #0]
 8003678:	430b      	orrs	r3, r1
 800367a:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 800367c:	687b      	ldr	r3, [r7, #4]
 800367e:	681b      	ldr	r3, [r3, #0]
 8003680:	68db      	ldr	r3, [r3, #12]
 8003682:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8003686:	687b      	ldr	r3, [r7, #4]
 8003688:	695a      	ldr	r2, [r3, #20]
 800368a:	687b      	ldr	r3, [r7, #4]
 800368c:	699b      	ldr	r3, [r3, #24]
 800368e:	431a      	orrs	r2, r3
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	681b      	ldr	r3, [r3, #0]
 8003694:	430a      	orrs	r2, r1
 8003696:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8003698:	687b      	ldr	r3, [r7, #4]
 800369a:	681b      	ldr	r3, [r3, #0]
 800369c:	681a      	ldr	r2, [r3, #0]
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f042 0201 	orr.w	r2, r2, #1
 80036a6:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80036a8:	687b      	ldr	r3, [r7, #4]
 80036aa:	2200      	movs	r2, #0
 80036ac:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80036ae:	687b      	ldr	r3, [r7, #4]
 80036b0:	2220      	movs	r2, #32
 80036b2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80036bc:	687b      	ldr	r3, [r7, #4]
 80036be:	2200      	movs	r2, #0
 80036c0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80036c4:	2300      	movs	r3, #0
}
 80036c6:	4618      	mov	r0, r3
 80036c8:	3710      	adds	r7, #16
 80036ca:	46bd      	mov	sp, r7
 80036cc:	bd80      	pop	{r7, pc}
 80036ce:	bf00      	nop
 80036d0:	000186a0 	.word	0x000186a0
 80036d4:	001e847f 	.word	0x001e847f
 80036d8:	003d08ff 	.word	0x003d08ff
 80036dc:	431bde83 	.word	0x431bde83
 80036e0:	10624dd3 	.word	0x10624dd3

080036e4 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80036e4:	b580      	push	{r7, lr}
 80036e6:	b088      	sub	sp, #32
 80036e8:	af00      	add	r7, sp, #0
 80036ea:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 80036ec:	2300      	movs	r3, #0
 80036ee:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 80036f0:	687b      	ldr	r3, [r7, #4]
 80036f2:	681b      	ldr	r3, [r3, #0]
 80036f4:	685b      	ldr	r3, [r3, #4]
 80036f6:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 80036f8:	687b      	ldr	r3, [r7, #4]
 80036fa:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80036fc:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80036fe:	687b      	ldr	r3, [r7, #4]
 8003700:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003704:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003706:	687b      	ldr	r3, [r7, #4]
 8003708:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800370c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800370e:	7bfb      	ldrb	r3, [r7, #15]
 8003710:	2b10      	cmp	r3, #16
 8003712:	d003      	beq.n	800371c <HAL_I2C_EV_IRQHandler+0x38>
 8003714:	7bfb      	ldrb	r3, [r7, #15]
 8003716:	2b40      	cmp	r3, #64	; 0x40
 8003718:	f040 80bd 	bne.w	8003896 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800371c:	687b      	ldr	r3, [r7, #4]
 800371e:	681b      	ldr	r3, [r3, #0]
 8003720:	699b      	ldr	r3, [r3, #24]
 8003722:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8003724:	687b      	ldr	r3, [r7, #4]
 8003726:	681b      	ldr	r3, [r3, #0]
 8003728:	695b      	ldr	r3, [r3, #20]
 800372a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800372c:	69fb      	ldr	r3, [r7, #28]
 800372e:	f003 0301 	and.w	r3, r3, #1
 8003732:	2b00      	cmp	r3, #0
 8003734:	d10d      	bne.n	8003752 <HAL_I2C_EV_IRQHandler+0x6e>
 8003736:	693b      	ldr	r3, [r7, #16]
 8003738:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800373c:	d003      	beq.n	8003746 <HAL_I2C_EV_IRQHandler+0x62>
 800373e:	693b      	ldr	r3, [r7, #16]
 8003740:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8003744:	d101      	bne.n	800374a <HAL_I2C_EV_IRQHandler+0x66>
 8003746:	2301      	movs	r3, #1
 8003748:	e000      	b.n	800374c <HAL_I2C_EV_IRQHandler+0x68>
 800374a:	2300      	movs	r3, #0
 800374c:	2b01      	cmp	r3, #1
 800374e:	f000 812e 	beq.w	80039ae <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003752:	69fb      	ldr	r3, [r7, #28]
 8003754:	f003 0301 	and.w	r3, r3, #1
 8003758:	2b00      	cmp	r3, #0
 800375a:	d00c      	beq.n	8003776 <HAL_I2C_EV_IRQHandler+0x92>
 800375c:	697b      	ldr	r3, [r7, #20]
 800375e:	0a5b      	lsrs	r3, r3, #9
 8003760:	f003 0301 	and.w	r3, r3, #1
 8003764:	2b00      	cmp	r3, #0
 8003766:	d006      	beq.n	8003776 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8003768:	6878      	ldr	r0, [r7, #4]
 800376a:	f001 fc55 	bl	8005018 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 800376e:	6878      	ldr	r0, [r7, #4]
 8003770:	f000 fd62 	bl	8004238 <I2C_Master_SB>
 8003774:	e08e      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003776:	69fb      	ldr	r3, [r7, #28]
 8003778:	08db      	lsrs	r3, r3, #3
 800377a:	f003 0301 	and.w	r3, r3, #1
 800377e:	2b00      	cmp	r3, #0
 8003780:	d009      	beq.n	8003796 <HAL_I2C_EV_IRQHandler+0xb2>
 8003782:	697b      	ldr	r3, [r7, #20]
 8003784:	0a5b      	lsrs	r3, r3, #9
 8003786:	f003 0301 	and.w	r3, r3, #1
 800378a:	2b00      	cmp	r3, #0
 800378c:	d003      	beq.n	8003796 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 800378e:	6878      	ldr	r0, [r7, #4]
 8003790:	f000 fdd8 	bl	8004344 <I2C_Master_ADD10>
 8003794:	e07e      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003796:	69fb      	ldr	r3, [r7, #28]
 8003798:	085b      	lsrs	r3, r3, #1
 800379a:	f003 0301 	and.w	r3, r3, #1
 800379e:	2b00      	cmp	r3, #0
 80037a0:	d009      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0xd2>
 80037a2:	697b      	ldr	r3, [r7, #20]
 80037a4:	0a5b      	lsrs	r3, r3, #9
 80037a6:	f003 0301 	and.w	r3, r3, #1
 80037aa:	2b00      	cmp	r3, #0
 80037ac:	d003      	beq.n	80037b6 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 80037ae:	6878      	ldr	r0, [r7, #4]
 80037b0:	f000 fdf2 	bl	8004398 <I2C_Master_ADDR>
 80037b4:	e06e      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 80037b6:	69bb      	ldr	r3, [r7, #24]
 80037b8:	089b      	lsrs	r3, r3, #2
 80037ba:	f003 0301 	and.w	r3, r3, #1
 80037be:	2b00      	cmp	r3, #0
 80037c0:	d037      	beq.n	8003832 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 80037c2:	687b      	ldr	r3, [r7, #4]
 80037c4:	681b      	ldr	r3, [r3, #0]
 80037c6:	685b      	ldr	r3, [r3, #4]
 80037c8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80037cc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80037d0:	f000 80ef 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80037d4:	69fb      	ldr	r3, [r7, #28]
 80037d6:	09db      	lsrs	r3, r3, #7
 80037d8:	f003 0301 	and.w	r3, r3, #1
 80037dc:	2b00      	cmp	r3, #0
 80037de:	d00f      	beq.n	8003800 <HAL_I2C_EV_IRQHandler+0x11c>
 80037e0:	697b      	ldr	r3, [r7, #20]
 80037e2:	0a9b      	lsrs	r3, r3, #10
 80037e4:	f003 0301 	and.w	r3, r3, #1
 80037e8:	2b00      	cmp	r3, #0
 80037ea:	d009      	beq.n	8003800 <HAL_I2C_EV_IRQHandler+0x11c>
 80037ec:	69fb      	ldr	r3, [r7, #28]
 80037ee:	089b      	lsrs	r3, r3, #2
 80037f0:	f003 0301 	and.w	r3, r3, #1
 80037f4:	2b00      	cmp	r3, #0
 80037f6:	d103      	bne.n	8003800 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 80037f8:	6878      	ldr	r0, [r7, #4]
 80037fa:	f000 f9ef 	bl	8003bdc <I2C_MasterTransmit_TXE>
 80037fe:	e049      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003800:	69fb      	ldr	r3, [r7, #28]
 8003802:	089b      	lsrs	r3, r3, #2
 8003804:	f003 0301 	and.w	r3, r3, #1
 8003808:	2b00      	cmp	r3, #0
 800380a:	f000 80d2 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800380e:	697b      	ldr	r3, [r7, #20]
 8003810:	0a5b      	lsrs	r3, r3, #9
 8003812:	f003 0301 	and.w	r3, r3, #1
 8003816:	2b00      	cmp	r3, #0
 8003818:	f000 80cb 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800381c:	7bfb      	ldrb	r3, [r7, #15]
 800381e:	2b10      	cmp	r3, #16
 8003820:	d103      	bne.n	800382a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8003822:	6878      	ldr	r0, [r7, #4]
 8003824:	f000 fa76 	bl	8003d14 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003828:	e0c3      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800382a:	6878      	ldr	r0, [r7, #4]
 800382c:	f000 fada 	bl	8003de4 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003830:	e0bf      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	681b      	ldr	r3, [r3, #0]
 8003836:	685b      	ldr	r3, [r3, #4]
 8003838:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800383c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8003840:	f000 80b7 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003844:	69fb      	ldr	r3, [r7, #28]
 8003846:	099b      	lsrs	r3, r3, #6
 8003848:	f003 0301 	and.w	r3, r3, #1
 800384c:	2b00      	cmp	r3, #0
 800384e:	d00f      	beq.n	8003870 <HAL_I2C_EV_IRQHandler+0x18c>
 8003850:	697b      	ldr	r3, [r7, #20]
 8003852:	0a9b      	lsrs	r3, r3, #10
 8003854:	f003 0301 	and.w	r3, r3, #1
 8003858:	2b00      	cmp	r3, #0
 800385a:	d009      	beq.n	8003870 <HAL_I2C_EV_IRQHandler+0x18c>
 800385c:	69fb      	ldr	r3, [r7, #28]
 800385e:	089b      	lsrs	r3, r3, #2
 8003860:	f003 0301 	and.w	r3, r3, #1
 8003864:	2b00      	cmp	r3, #0
 8003866:	d103      	bne.n	8003870 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8003868:	6878      	ldr	r0, [r7, #4]
 800386a:	f000 fb4a 	bl	8003f02 <I2C_MasterReceive_RXNE>
 800386e:	e011      	b.n	8003894 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003870:	69fb      	ldr	r3, [r7, #28]
 8003872:	089b      	lsrs	r3, r3, #2
 8003874:	f003 0301 	and.w	r3, r3, #1
 8003878:	2b00      	cmp	r3, #0
 800387a:	f000 809a 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 800387e:	697b      	ldr	r3, [r7, #20]
 8003880:	0a5b      	lsrs	r3, r3, #9
 8003882:	f003 0301 	and.w	r3, r3, #1
 8003886:	2b00      	cmp	r3, #0
 8003888:	f000 8093 	beq.w	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 800388c:	6878      	ldr	r0, [r7, #4]
 800388e:	f000 fbe9 	bl	8004064 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003892:	e08e      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
 8003894:	e08d      	b.n	80039b2 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800389a:	2b00      	cmp	r3, #0
 800389c:	d004      	beq.n	80038a8 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 800389e:	687b      	ldr	r3, [r7, #4]
 80038a0:	681b      	ldr	r3, [r3, #0]
 80038a2:	695b      	ldr	r3, [r3, #20]
 80038a4:	61fb      	str	r3, [r7, #28]
 80038a6:	e007      	b.n	80038b8 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038a8:	687b      	ldr	r3, [r7, #4]
 80038aa:	681b      	ldr	r3, [r3, #0]
 80038ac:	699b      	ldr	r3, [r3, #24]
 80038ae:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80038b0:	687b      	ldr	r3, [r7, #4]
 80038b2:	681b      	ldr	r3, [r3, #0]
 80038b4:	695b      	ldr	r3, [r3, #20]
 80038b6:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038b8:	69fb      	ldr	r3, [r7, #28]
 80038ba:	085b      	lsrs	r3, r3, #1
 80038bc:	f003 0301 	and.w	r3, r3, #1
 80038c0:	2b00      	cmp	r3, #0
 80038c2:	d012      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x206>
 80038c4:	697b      	ldr	r3, [r7, #20]
 80038c6:	0a5b      	lsrs	r3, r3, #9
 80038c8:	f003 0301 	and.w	r3, r3, #1
 80038cc:	2b00      	cmp	r3, #0
 80038ce:	d00c      	beq.n	80038ea <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80038d0:	687b      	ldr	r3, [r7, #4]
 80038d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038d4:	2b00      	cmp	r3, #0
 80038d6:	d003      	beq.n	80038e0 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 80038d8:	687b      	ldr	r3, [r7, #4]
 80038da:	681b      	ldr	r3, [r3, #0]
 80038dc:	699b      	ldr	r3, [r3, #24]
 80038de:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 80038e0:	69b9      	ldr	r1, [r7, #24]
 80038e2:	6878      	ldr	r0, [r7, #4]
 80038e4:	f000 ffa7 	bl	8004836 <I2C_Slave_ADDR>
 80038e8:	e066      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80038ea:	69fb      	ldr	r3, [r7, #28]
 80038ec:	091b      	lsrs	r3, r3, #4
 80038ee:	f003 0301 	and.w	r3, r3, #1
 80038f2:	2b00      	cmp	r3, #0
 80038f4:	d009      	beq.n	800390a <HAL_I2C_EV_IRQHandler+0x226>
 80038f6:	697b      	ldr	r3, [r7, #20]
 80038f8:	0a5b      	lsrs	r3, r3, #9
 80038fa:	f003 0301 	and.w	r3, r3, #1
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d003      	beq.n	800390a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8003902:	6878      	ldr	r0, [r7, #4]
 8003904:	f000 ffdc 	bl	80048c0 <I2C_Slave_STOPF>
 8003908:	e056      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800390a:	7bbb      	ldrb	r3, [r7, #14]
 800390c:	2b21      	cmp	r3, #33	; 0x21
 800390e:	d002      	beq.n	8003916 <HAL_I2C_EV_IRQHandler+0x232>
 8003910:	7bbb      	ldrb	r3, [r7, #14]
 8003912:	2b29      	cmp	r3, #41	; 0x29
 8003914:	d125      	bne.n	8003962 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003916:	69fb      	ldr	r3, [r7, #28]
 8003918:	09db      	lsrs	r3, r3, #7
 800391a:	f003 0301 	and.w	r3, r3, #1
 800391e:	2b00      	cmp	r3, #0
 8003920:	d00f      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0x25e>
 8003922:	697b      	ldr	r3, [r7, #20]
 8003924:	0a9b      	lsrs	r3, r3, #10
 8003926:	f003 0301 	and.w	r3, r3, #1
 800392a:	2b00      	cmp	r3, #0
 800392c:	d009      	beq.n	8003942 <HAL_I2C_EV_IRQHandler+0x25e>
 800392e:	69fb      	ldr	r3, [r7, #28]
 8003930:	089b      	lsrs	r3, r3, #2
 8003932:	f003 0301 	and.w	r3, r3, #1
 8003936:	2b00      	cmp	r3, #0
 8003938:	d103      	bne.n	8003942 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800393a:	6878      	ldr	r0, [r7, #4]
 800393c:	f000 febd 	bl	80046ba <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003940:	e039      	b.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8003942:	69fb      	ldr	r3, [r7, #28]
 8003944:	089b      	lsrs	r3, r3, #2
 8003946:	f003 0301 	and.w	r3, r3, #1
 800394a:	2b00      	cmp	r3, #0
 800394c:	d033      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2d2>
 800394e:	697b      	ldr	r3, [r7, #20]
 8003950:	0a5b      	lsrs	r3, r3, #9
 8003952:	f003 0301 	and.w	r3, r3, #1
 8003956:	2b00      	cmp	r3, #0
 8003958:	d02d      	beq.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 800395a:	6878      	ldr	r0, [r7, #4]
 800395c:	f000 feea 	bl	8004734 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003960:	e029      	b.n	80039b6 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8003962:	69fb      	ldr	r3, [r7, #28]
 8003964:	099b      	lsrs	r3, r3, #6
 8003966:	f003 0301 	and.w	r3, r3, #1
 800396a:	2b00      	cmp	r3, #0
 800396c:	d00f      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0x2aa>
 800396e:	697b      	ldr	r3, [r7, #20]
 8003970:	0a9b      	lsrs	r3, r3, #10
 8003972:	f003 0301 	and.w	r3, r3, #1
 8003976:	2b00      	cmp	r3, #0
 8003978:	d009      	beq.n	800398e <HAL_I2C_EV_IRQHandler+0x2aa>
 800397a:	69fb      	ldr	r3, [r7, #28]
 800397c:	089b      	lsrs	r3, r3, #2
 800397e:	f003 0301 	and.w	r3, r3, #1
 8003982:	2b00      	cmp	r3, #0
 8003984:	d103      	bne.n	800398e <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8003986:	6878      	ldr	r0, [r7, #4]
 8003988:	f000 fef5 	bl	8004776 <I2C_SlaveReceive_RXNE>
 800398c:	e014      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800398e:	69fb      	ldr	r3, [r7, #28]
 8003990:	089b      	lsrs	r3, r3, #2
 8003992:	f003 0301 	and.w	r3, r3, #1
 8003996:	2b00      	cmp	r3, #0
 8003998:	d00e      	beq.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
 800399a:	697b      	ldr	r3, [r7, #20]
 800399c:	0a5b      	lsrs	r3, r3, #9
 800399e:	f003 0301 	and.w	r3, r3, #1
 80039a2:	2b00      	cmp	r3, #0
 80039a4:	d008      	beq.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 80039a6:	6878      	ldr	r0, [r7, #4]
 80039a8:	f000 ff23 	bl	80047f2 <I2C_SlaveReceive_BTF>
 80039ac:	e004      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 80039ae:	bf00      	nop
 80039b0:	e002      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80039b2:	bf00      	nop
 80039b4:	e000      	b.n	80039b8 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80039b6:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 80039b8:	3720      	adds	r7, #32
 80039ba:	46bd      	mov	sp, r7
 80039bc:	bd80      	pop	{r7, pc}

080039be <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 80039be:	b580      	push	{r7, lr}
 80039c0:	b08a      	sub	sp, #40	; 0x28
 80039c2:	af00      	add	r7, sp, #0
 80039c4:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	681b      	ldr	r3, [r3, #0]
 80039ca:	695b      	ldr	r3, [r3, #20]
 80039cc:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	685b      	ldr	r3, [r3, #4]
 80039d4:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 80039d6:	2300      	movs	r3, #0
 80039d8:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 80039da:	687b      	ldr	r3, [r7, #4]
 80039dc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80039e0:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80039e2:	6a3b      	ldr	r3, [r7, #32]
 80039e4:	0a1b      	lsrs	r3, r3, #8
 80039e6:	f003 0301 	and.w	r3, r3, #1
 80039ea:	2b00      	cmp	r3, #0
 80039ec:	d00e      	beq.n	8003a0c <HAL_I2C_ER_IRQHandler+0x4e>
 80039ee:	69fb      	ldr	r3, [r7, #28]
 80039f0:	0a1b      	lsrs	r3, r3, #8
 80039f2:	f003 0301 	and.w	r3, r3, #1
 80039f6:	2b00      	cmp	r3, #0
 80039f8:	d008      	beq.n	8003a0c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 80039fa:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80039fc:	f043 0301 	orr.w	r3, r3, #1
 8003a00:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8003a02:	687b      	ldr	r3, [r7, #4]
 8003a04:	681b      	ldr	r3, [r3, #0]
 8003a06:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8003a0a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a0c:	6a3b      	ldr	r3, [r7, #32]
 8003a0e:	0a5b      	lsrs	r3, r3, #9
 8003a10:	f003 0301 	and.w	r3, r3, #1
 8003a14:	2b00      	cmp	r3, #0
 8003a16:	d00e      	beq.n	8003a36 <HAL_I2C_ER_IRQHandler+0x78>
 8003a18:	69fb      	ldr	r3, [r7, #28]
 8003a1a:	0a1b      	lsrs	r3, r3, #8
 8003a1c:	f003 0301 	and.w	r3, r3, #1
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d008      	beq.n	8003a36 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8003a24:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003a26:	f043 0302 	orr.w	r3, r3, #2
 8003a2a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8003a2c:	687b      	ldr	r3, [r7, #4]
 8003a2e:	681b      	ldr	r3, [r3, #0]
 8003a30:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8003a34:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003a36:	6a3b      	ldr	r3, [r7, #32]
 8003a38:	0a9b      	lsrs	r3, r3, #10
 8003a3a:	f003 0301 	and.w	r3, r3, #1
 8003a3e:	2b00      	cmp	r3, #0
 8003a40:	d03f      	beq.n	8003ac2 <HAL_I2C_ER_IRQHandler+0x104>
 8003a42:	69fb      	ldr	r3, [r7, #28]
 8003a44:	0a1b      	lsrs	r3, r3, #8
 8003a46:	f003 0301 	and.w	r3, r3, #1
 8003a4a:	2b00      	cmp	r3, #0
 8003a4c:	d039      	beq.n	8003ac2 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 8003a4e:	7efb      	ldrb	r3, [r7, #27]
 8003a50:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 8003a52:	687b      	ldr	r3, [r7, #4]
 8003a54:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003a56:	b29b      	uxth	r3, r3
 8003a58:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a60:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 8003a62:	687b      	ldr	r3, [r7, #4]
 8003a64:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003a66:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 8003a68:	7ebb      	ldrb	r3, [r7, #26]
 8003a6a:	2b20      	cmp	r3, #32
 8003a6c:	d112      	bne.n	8003a94 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a6e:	697b      	ldr	r3, [r7, #20]
 8003a70:	2b00      	cmp	r3, #0
 8003a72:	d10f      	bne.n	8003a94 <HAL_I2C_ER_IRQHandler+0xd6>
 8003a74:	7cfb      	ldrb	r3, [r7, #19]
 8003a76:	2b21      	cmp	r3, #33	; 0x21
 8003a78:	d008      	beq.n	8003a8c <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 8003a7a:	7cfb      	ldrb	r3, [r7, #19]
 8003a7c:	2b29      	cmp	r3, #41	; 0x29
 8003a7e:	d005      	beq.n	8003a8c <HAL_I2C_ER_IRQHandler+0xce>
 8003a80:	7cfb      	ldrb	r3, [r7, #19]
 8003a82:	2b28      	cmp	r3, #40	; 0x28
 8003a84:	d106      	bne.n	8003a94 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 8003a86:	68fb      	ldr	r3, [r7, #12]
 8003a88:	2b21      	cmp	r3, #33	; 0x21
 8003a8a:	d103      	bne.n	8003a94 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 8003a8c:	6878      	ldr	r0, [r7, #4]
 8003a8e:	f001 f847 	bl	8004b20 <I2C_Slave_AF>
 8003a92:	e016      	b.n	8003ac2 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8003a94:	687b      	ldr	r3, [r7, #4]
 8003a96:	681b      	ldr	r3, [r3, #0]
 8003a98:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8003a9c:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 8003a9e:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aa0:	f043 0304 	orr.w	r3, r3, #4
 8003aa4:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8003aa6:	7efb      	ldrb	r3, [r7, #27]
 8003aa8:	2b10      	cmp	r3, #16
 8003aaa:	d002      	beq.n	8003ab2 <HAL_I2C_ER_IRQHandler+0xf4>
 8003aac:	7efb      	ldrb	r3, [r7, #27]
 8003aae:	2b40      	cmp	r3, #64	; 0x40
 8003ab0:	d107      	bne.n	8003ac2 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	681a      	ldr	r2, [r3, #0]
 8003ab8:	687b      	ldr	r3, [r7, #4]
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003ac0:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8003ac2:	6a3b      	ldr	r3, [r7, #32]
 8003ac4:	0adb      	lsrs	r3, r3, #11
 8003ac6:	f003 0301 	and.w	r3, r3, #1
 8003aca:	2b00      	cmp	r3, #0
 8003acc:	d00e      	beq.n	8003aec <HAL_I2C_ER_IRQHandler+0x12e>
 8003ace:	69fb      	ldr	r3, [r7, #28]
 8003ad0:	0a1b      	lsrs	r3, r3, #8
 8003ad2:	f003 0301 	and.w	r3, r3, #1
 8003ad6:	2b00      	cmp	r3, #0
 8003ad8:	d008      	beq.n	8003aec <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8003ada:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003adc:	f043 0308 	orr.w	r3, r3, #8
 8003ae0:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8003aea:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8003aec:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003aee:	2b00      	cmp	r3, #0
 8003af0:	d008      	beq.n	8003b04 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8003af6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8003af8:	431a      	orrs	r2, r3
 8003afa:	687b      	ldr	r3, [r7, #4]
 8003afc:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 8003afe:	6878      	ldr	r0, [r7, #4]
 8003b00:	f001 f87e 	bl	8004c00 <I2C_ITError>
  }
}
 8003b04:	bf00      	nop
 8003b06:	3728      	adds	r7, #40	; 0x28
 8003b08:	46bd      	mov	sp, r7
 8003b0a:	bd80      	pop	{r7, pc}

08003b0c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b083      	sub	sp, #12
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8003b14:	bf00      	nop
 8003b16:	370c      	adds	r7, #12
 8003b18:	46bd      	mov	sp, r7
 8003b1a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b1e:	4770      	bx	lr

08003b20 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b20:	b480      	push	{r7}
 8003b22:	b083      	sub	sp, #12
 8003b24:	af00      	add	r7, sp, #0
 8003b26:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8003b28:	bf00      	nop
 8003b2a:	370c      	adds	r7, #12
 8003b2c:	46bd      	mov	sp, r7
 8003b2e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b32:	4770      	bx	lr

08003b34 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b34:	b480      	push	{r7}
 8003b36:	b083      	sub	sp, #12
 8003b38:	af00      	add	r7, sp, #0
 8003b3a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 8003b3c:	bf00      	nop
 8003b3e:	370c      	adds	r7, #12
 8003b40:	46bd      	mov	sp, r7
 8003b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b46:	4770      	bx	lr

08003b48 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b48:	b480      	push	{r7}
 8003b4a:	b083      	sub	sp, #12
 8003b4c:	af00      	add	r7, sp, #0
 8003b4e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 8003b50:	bf00      	nop
 8003b52:	370c      	adds	r7, #12
 8003b54:	46bd      	mov	sp, r7
 8003b56:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b5a:	4770      	bx	lr

08003b5c <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 8003b5c:	b480      	push	{r7}
 8003b5e:	b083      	sub	sp, #12
 8003b60:	af00      	add	r7, sp, #0
 8003b62:	6078      	str	r0, [r7, #4]
 8003b64:	460b      	mov	r3, r1
 8003b66:	70fb      	strb	r3, [r7, #3]
 8003b68:	4613      	mov	r3, r2
 8003b6a:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 8003b6c:	bf00      	nop
 8003b6e:	370c      	adds	r7, #12
 8003b70:	46bd      	mov	sp, r7
 8003b72:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b76:	4770      	bx	lr

08003b78 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b78:	b480      	push	{r7}
 8003b7a:	b083      	sub	sp, #12
 8003b7c:	af00      	add	r7, sp, #0
 8003b7e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 8003b80:	bf00      	nop
 8003b82:	370c      	adds	r7, #12
 8003b84:	46bd      	mov	sp, r7
 8003b86:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b8a:	4770      	bx	lr

08003b8c <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003b8c:	b480      	push	{r7}
 8003b8e:	b083      	sub	sp, #12
 8003b90:	af00      	add	r7, sp, #0
 8003b92:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8003b94:	bf00      	nop
 8003b96:	370c      	adds	r7, #12
 8003b98:	46bd      	mov	sp, r7
 8003b9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b9e:	4770      	bx	lr

08003ba0 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003ba0:	b480      	push	{r7}
 8003ba2:	b083      	sub	sp, #12
 8003ba4:	af00      	add	r7, sp, #0
 8003ba6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8003ba8:	bf00      	nop
 8003baa:	370c      	adds	r7, #12
 8003bac:	46bd      	mov	sp, r7
 8003bae:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bb2:	4770      	bx	lr

08003bb4 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8003bb4:	b480      	push	{r7}
 8003bb6:	b083      	sub	sp, #12
 8003bb8:	af00      	add	r7, sp, #0
 8003bba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8003bbc:	bf00      	nop
 8003bbe:	370c      	adds	r7, #12
 8003bc0:	46bd      	mov	sp, r7
 8003bc2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bc6:	4770      	bx	lr

08003bc8 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8003bc8:	b480      	push	{r7}
 8003bca:	b083      	sub	sp, #12
 8003bcc:	af00      	add	r7, sp, #0
 8003bce:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8003bd0:	bf00      	nop
 8003bd2:	370c      	adds	r7, #12
 8003bd4:	46bd      	mov	sp, r7
 8003bd6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003bda:	4770      	bx	lr

08003bdc <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8003bdc:	b580      	push	{r7, lr}
 8003bde:	b084      	sub	sp, #16
 8003be0:	af00      	add	r7, sp, #0
 8003be2:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003be4:	687b      	ldr	r3, [r7, #4]
 8003be6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003bea:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8003bec:	687b      	ldr	r3, [r7, #4]
 8003bee:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003bf2:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8003bf4:	687b      	ldr	r3, [r7, #4]
 8003bf6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bf8:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 8003bfe:	2b00      	cmp	r3, #0
 8003c00:	d150      	bne.n	8003ca4 <I2C_MasterTransmit_TXE+0xc8>
 8003c02:	7bfb      	ldrb	r3, [r7, #15]
 8003c04:	2b21      	cmp	r3, #33	; 0x21
 8003c06:	d14d      	bne.n	8003ca4 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c08:	68bb      	ldr	r3, [r7, #8]
 8003c0a:	2b08      	cmp	r3, #8
 8003c0c:	d01d      	beq.n	8003c4a <I2C_MasterTransmit_TXE+0x6e>
 8003c0e:	68bb      	ldr	r3, [r7, #8]
 8003c10:	2b20      	cmp	r3, #32
 8003c12:	d01a      	beq.n	8003c4a <I2C_MasterTransmit_TXE+0x6e>
 8003c14:	68bb      	ldr	r3, [r7, #8]
 8003c16:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003c1a:	d016      	beq.n	8003c4a <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c1c:	687b      	ldr	r3, [r7, #4]
 8003c1e:	681b      	ldr	r3, [r3, #0]
 8003c20:	685a      	ldr	r2, [r3, #4]
 8003c22:	687b      	ldr	r3, [r7, #4]
 8003c24:	681b      	ldr	r3, [r3, #0]
 8003c26:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c2a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003c2c:	687b      	ldr	r3, [r7, #4]
 8003c2e:	2211      	movs	r2, #17
 8003c30:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c32:	687b      	ldr	r3, [r7, #4]
 8003c34:	2200      	movs	r2, #0
 8003c36:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 8003c3a:	687b      	ldr	r3, [r7, #4]
 8003c3c:	2220      	movs	r2, #32
 8003c3e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c42:	6878      	ldr	r0, [r7, #4]
 8003c44:	f7ff ff62 	bl	8003b0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c48:	e060      	b.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003c4a:	687b      	ldr	r3, [r7, #4]
 8003c4c:	681b      	ldr	r3, [r3, #0]
 8003c4e:	685a      	ldr	r2, [r3, #4]
 8003c50:	687b      	ldr	r3, [r7, #4]
 8003c52:	681b      	ldr	r3, [r3, #0]
 8003c54:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003c58:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003c5a:	687b      	ldr	r3, [r7, #4]
 8003c5c:	681b      	ldr	r3, [r3, #0]
 8003c5e:	681a      	ldr	r2, [r3, #0]
 8003c60:	687b      	ldr	r3, [r7, #4]
 8003c62:	681b      	ldr	r3, [r3, #0]
 8003c64:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003c68:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 8003c6a:	687b      	ldr	r3, [r7, #4]
 8003c6c:	2200      	movs	r2, #0
 8003c6e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003c70:	687b      	ldr	r3, [r7, #4]
 8003c72:	2220      	movs	r2, #32
 8003c74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003c78:	687b      	ldr	r3, [r7, #4]
 8003c7a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003c7e:	b2db      	uxtb	r3, r3
 8003c80:	2b40      	cmp	r3, #64	; 0x40
 8003c82:	d107      	bne.n	8003c94 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c84:	687b      	ldr	r3, [r7, #4]
 8003c86:	2200      	movs	r2, #0
 8003c88:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 8003c8c:	6878      	ldr	r0, [r7, #4]
 8003c8e:	f7ff ff7d 	bl	8003b8c <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003c92:	e03b      	b.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003c94:	687b      	ldr	r3, [r7, #4]
 8003c96:	2200      	movs	r2, #0
 8003c98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003c9c:	6878      	ldr	r0, [r7, #4]
 8003c9e:	f7ff ff35 	bl	8003b0c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003ca2:	e033      	b.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8003ca4:	7bfb      	ldrb	r3, [r7, #15]
 8003ca6:	2b21      	cmp	r3, #33	; 0x21
 8003ca8:	d005      	beq.n	8003cb6 <I2C_MasterTransmit_TXE+0xda>
 8003caa:	7bbb      	ldrb	r3, [r7, #14]
 8003cac:	2b40      	cmp	r3, #64	; 0x40
 8003cae:	d12d      	bne.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8003cb0:	7bfb      	ldrb	r3, [r7, #15]
 8003cb2:	2b22      	cmp	r3, #34	; 0x22
 8003cb4:	d12a      	bne.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8003cb6:	687b      	ldr	r3, [r7, #4]
 8003cb8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003cba:	b29b      	uxth	r3, r3
 8003cbc:	2b00      	cmp	r3, #0
 8003cbe:	d108      	bne.n	8003cd2 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003cc0:	687b      	ldr	r3, [r7, #4]
 8003cc2:	681b      	ldr	r3, [r3, #0]
 8003cc4:	685a      	ldr	r2, [r3, #4]
 8003cc6:	687b      	ldr	r3, [r7, #4]
 8003cc8:	681b      	ldr	r3, [r3, #0]
 8003cca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003cce:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8003cd0:	e01c      	b.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003cd2:	687b      	ldr	r3, [r7, #4]
 8003cd4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003cd8:	b2db      	uxtb	r3, r3
 8003cda:	2b40      	cmp	r3, #64	; 0x40
 8003cdc:	d103      	bne.n	8003ce6 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 8003cde:	6878      	ldr	r0, [r7, #4]
 8003ce0:	f000 f880 	bl	8003de4 <I2C_MemoryTransmit_TXE_BTF>
}
 8003ce4:	e012      	b.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003ce6:	687b      	ldr	r3, [r7, #4]
 8003ce8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cea:	781a      	ldrb	r2, [r3, #0]
 8003cec:	687b      	ldr	r3, [r7, #4]
 8003cee:	681b      	ldr	r3, [r3, #0]
 8003cf0:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8003cf2:	687b      	ldr	r3, [r7, #4]
 8003cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003cf6:	1c5a      	adds	r2, r3, #1
 8003cf8:	687b      	ldr	r3, [r7, #4]
 8003cfa:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003cfc:	687b      	ldr	r3, [r7, #4]
 8003cfe:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d00:	b29b      	uxth	r3, r3
 8003d02:	3b01      	subs	r3, #1
 8003d04:	b29a      	uxth	r2, r3
 8003d06:	687b      	ldr	r3, [r7, #4]
 8003d08:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003d0a:	e7ff      	b.n	8003d0c <I2C_MasterTransmit_TXE+0x130>
 8003d0c:	bf00      	nop
 8003d0e:	3710      	adds	r7, #16
 8003d10:	46bd      	mov	sp, r7
 8003d12:	bd80      	pop	{r7, pc}

08003d14 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8003d14:	b580      	push	{r7, lr}
 8003d16:	b084      	sub	sp, #16
 8003d18:	af00      	add	r7, sp, #0
 8003d1a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8003d1c:	687b      	ldr	r3, [r7, #4]
 8003d1e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003d20:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003d28:	b2db      	uxtb	r3, r3
 8003d2a:	2b21      	cmp	r3, #33	; 0x21
 8003d2c:	d156      	bne.n	8003ddc <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 8003d2e:	687b      	ldr	r3, [r7, #4]
 8003d30:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d32:	b29b      	uxth	r3, r3
 8003d34:	2b00      	cmp	r3, #0
 8003d36:	d012      	beq.n	8003d5e <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003d38:	687b      	ldr	r3, [r7, #4]
 8003d3a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d3c:	781a      	ldrb	r2, [r3, #0]
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	681b      	ldr	r3, [r3, #0]
 8003d42:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003d48:	1c5a      	adds	r2, r3, #1
 8003d4a:	687b      	ldr	r3, [r7, #4]
 8003d4c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003d52:	b29b      	uxth	r3, r3
 8003d54:	3b01      	subs	r3, #1
 8003d56:	b29a      	uxth	r2, r3
 8003d58:	687b      	ldr	r3, [r7, #4]
 8003d5a:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 8003d5c:	e03e      	b.n	8003ddc <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8003d5e:	68fb      	ldr	r3, [r7, #12]
 8003d60:	2b08      	cmp	r3, #8
 8003d62:	d01d      	beq.n	8003da0 <I2C_MasterTransmit_BTF+0x8c>
 8003d64:	68fb      	ldr	r3, [r7, #12]
 8003d66:	2b20      	cmp	r3, #32
 8003d68:	d01a      	beq.n	8003da0 <I2C_MasterTransmit_BTF+0x8c>
 8003d6a:	68fb      	ldr	r3, [r7, #12]
 8003d6c:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8003d70:	d016      	beq.n	8003da0 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003d72:	687b      	ldr	r3, [r7, #4]
 8003d74:	681b      	ldr	r3, [r3, #0]
 8003d76:	685a      	ldr	r2, [r3, #4]
 8003d78:	687b      	ldr	r3, [r7, #4]
 8003d7a:	681b      	ldr	r3, [r3, #0]
 8003d7c:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003d80:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8003d82:	687b      	ldr	r3, [r7, #4]
 8003d84:	2211      	movs	r2, #17
 8003d86:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003d88:	687b      	ldr	r3, [r7, #4]
 8003d8a:	2200      	movs	r2, #0
 8003d8c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 8003d90:	687b      	ldr	r3, [r7, #4]
 8003d92:	2220      	movs	r2, #32
 8003d94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003d98:	6878      	ldr	r0, [r7, #4]
 8003d9a:	f7ff feb7 	bl	8003b0c <HAL_I2C_MasterTxCpltCallback>
}
 8003d9e:	e01d      	b.n	8003ddc <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003da0:	687b      	ldr	r3, [r7, #4]
 8003da2:	681b      	ldr	r3, [r3, #0]
 8003da4:	685a      	ldr	r2, [r3, #4]
 8003da6:	687b      	ldr	r3, [r7, #4]
 8003da8:	681b      	ldr	r3, [r3, #0]
 8003daa:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003dae:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003db0:	687b      	ldr	r3, [r7, #4]
 8003db2:	681b      	ldr	r3, [r3, #0]
 8003db4:	681a      	ldr	r2, [r3, #0]
 8003db6:	687b      	ldr	r3, [r7, #4]
 8003db8:	681b      	ldr	r3, [r3, #0]
 8003dba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003dbe:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8003dc0:	687b      	ldr	r3, [r7, #4]
 8003dc2:	2200      	movs	r2, #0
 8003dc4:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8003dc6:	687b      	ldr	r3, [r7, #4]
 8003dc8:	2220      	movs	r2, #32
 8003dca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8003dce:	687b      	ldr	r3, [r7, #4]
 8003dd0:	2200      	movs	r2, #0
 8003dd2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8003dd6:	6878      	ldr	r0, [r7, #4]
 8003dd8:	f7ff fe98 	bl	8003b0c <HAL_I2C_MasterTxCpltCallback>
}
 8003ddc:	bf00      	nop
 8003dde:	3710      	adds	r7, #16
 8003de0:	46bd      	mov	sp, r7
 8003de2:	bd80      	pop	{r7, pc}

08003de4 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8003de4:	b580      	push	{r7, lr}
 8003de6:	b084      	sub	sp, #16
 8003de8:	af00      	add	r7, sp, #0
 8003dea:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003df2:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8003df4:	687b      	ldr	r3, [r7, #4]
 8003df6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003df8:	2b00      	cmp	r3, #0
 8003dfa:	d11d      	bne.n	8003e38 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003e00:	2b01      	cmp	r3, #1
 8003e02:	d10b      	bne.n	8003e1c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e04:	687b      	ldr	r3, [r7, #4]
 8003e06:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e08:	b2da      	uxtb	r2, r3
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8003e10:	687b      	ldr	r3, [r7, #4]
 8003e12:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e14:	1c9a      	adds	r2, r3, #2
 8003e16:	687b      	ldr	r3, [r7, #4]
 8003e18:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8003e1a:	e06e      	b.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8003e1c:	687b      	ldr	r3, [r7, #4]
 8003e1e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e20:	b29b      	uxth	r3, r3
 8003e22:	121b      	asrs	r3, r3, #8
 8003e24:	b2da      	uxtb	r2, r3
 8003e26:	687b      	ldr	r3, [r7, #4]
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8003e2c:	687b      	ldr	r3, [r7, #4]
 8003e2e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e30:	1c5a      	adds	r2, r3, #1
 8003e32:	687b      	ldr	r3, [r7, #4]
 8003e34:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e36:	e060      	b.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8003e38:	687b      	ldr	r3, [r7, #4]
 8003e3a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e3c:	2b01      	cmp	r3, #1
 8003e3e:	d10b      	bne.n	8003e58 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8003e40:	687b      	ldr	r3, [r7, #4]
 8003e42:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003e44:	b2da      	uxtb	r2, r3
 8003e46:	687b      	ldr	r3, [r7, #4]
 8003e48:	681b      	ldr	r3, [r3, #0]
 8003e4a:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8003e4c:	687b      	ldr	r3, [r7, #4]
 8003e4e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e50:	1c5a      	adds	r2, r3, #1
 8003e52:	687b      	ldr	r3, [r7, #4]
 8003e54:	651a      	str	r2, [r3, #80]	; 0x50
}
 8003e56:	e050      	b.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8003e58:	687b      	ldr	r3, [r7, #4]
 8003e5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003e5c:	2b02      	cmp	r3, #2
 8003e5e:	d14c      	bne.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8003e60:	7bfb      	ldrb	r3, [r7, #15]
 8003e62:	2b22      	cmp	r3, #34	; 0x22
 8003e64:	d108      	bne.n	8003e78 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8003e66:	687b      	ldr	r3, [r7, #4]
 8003e68:	681b      	ldr	r3, [r3, #0]
 8003e6a:	681a      	ldr	r2, [r3, #0]
 8003e6c:	687b      	ldr	r3, [r7, #4]
 8003e6e:	681b      	ldr	r3, [r3, #0]
 8003e70:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8003e74:	601a      	str	r2, [r3, #0]
}
 8003e76:	e040      	b.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003e78:	687b      	ldr	r3, [r7, #4]
 8003e7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003e7c:	b29b      	uxth	r3, r3
 8003e7e:	2b00      	cmp	r3, #0
 8003e80:	d015      	beq.n	8003eae <I2C_MemoryTransmit_TXE_BTF+0xca>
 8003e82:	7bfb      	ldrb	r3, [r7, #15]
 8003e84:	2b21      	cmp	r3, #33	; 0x21
 8003e86:	d112      	bne.n	8003eae <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8003e88:	687b      	ldr	r3, [r7, #4]
 8003e8a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e8c:	781a      	ldrb	r2, [r3, #0]
 8003e8e:	687b      	ldr	r3, [r7, #4]
 8003e90:	681b      	ldr	r3, [r3, #0]
 8003e92:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8003e94:	687b      	ldr	r3, [r7, #4]
 8003e96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003e98:	1c5a      	adds	r2, r3, #1
 8003e9a:	687b      	ldr	r3, [r7, #4]
 8003e9c:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8003e9e:	687b      	ldr	r3, [r7, #4]
 8003ea0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003ea2:	b29b      	uxth	r3, r3
 8003ea4:	3b01      	subs	r3, #1
 8003ea6:	b29a      	uxth	r2, r3
 8003ea8:	687b      	ldr	r3, [r7, #4]
 8003eaa:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8003eac:	e025      	b.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8003eae:	687b      	ldr	r3, [r7, #4]
 8003eb0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003eb2:	b29b      	uxth	r3, r3
 8003eb4:	2b00      	cmp	r3, #0
 8003eb6:	d120      	bne.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
 8003eb8:	7bfb      	ldrb	r3, [r7, #15]
 8003eba:	2b21      	cmp	r3, #33	; 0x21
 8003ebc:	d11d      	bne.n	8003efa <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003ebe:	687b      	ldr	r3, [r7, #4]
 8003ec0:	681b      	ldr	r3, [r3, #0]
 8003ec2:	685a      	ldr	r2, [r3, #4]
 8003ec4:	687b      	ldr	r3, [r7, #4]
 8003ec6:	681b      	ldr	r3, [r3, #0]
 8003ec8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003ecc:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8003ece:	687b      	ldr	r3, [r7, #4]
 8003ed0:	681b      	ldr	r3, [r3, #0]
 8003ed2:	681a      	ldr	r2, [r3, #0]
 8003ed4:	687b      	ldr	r3, [r7, #4]
 8003ed6:	681b      	ldr	r3, [r3, #0]
 8003ed8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8003edc:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8003ede:	687b      	ldr	r3, [r7, #4]
 8003ee0:	2200      	movs	r2, #0
 8003ee2:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8003ee4:	687b      	ldr	r3, [r7, #4]
 8003ee6:	2220      	movs	r2, #32
 8003ee8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8003eec:	687b      	ldr	r3, [r7, #4]
 8003eee:	2200      	movs	r2, #0
 8003ef0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8003ef4:	6878      	ldr	r0, [r7, #4]
 8003ef6:	f7ff fe49 	bl	8003b8c <HAL_I2C_MemTxCpltCallback>
}
 8003efa:	bf00      	nop
 8003efc:	3710      	adds	r7, #16
 8003efe:	46bd      	mov	sp, r7
 8003f00:	bd80      	pop	{r7, pc}

08003f02 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8003f02:	b580      	push	{r7, lr}
 8003f04:	b084      	sub	sp, #16
 8003f06:	af00      	add	r7, sp, #0
 8003f08:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8003f0a:	687b      	ldr	r3, [r7, #4]
 8003f0c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f10:	b2db      	uxtb	r3, r3
 8003f12:	2b22      	cmp	r3, #34	; 0x22
 8003f14:	f040 80a2 	bne.w	800405c <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8003f18:	687b      	ldr	r3, [r7, #4]
 8003f1a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f1c:	b29b      	uxth	r3, r3
 8003f1e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	2b03      	cmp	r3, #3
 8003f24:	d921      	bls.n	8003f6a <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003f26:	687b      	ldr	r3, [r7, #4]
 8003f28:	681b      	ldr	r3, [r3, #0]
 8003f2a:	691a      	ldr	r2, [r3, #16]
 8003f2c:	687b      	ldr	r3, [r7, #4]
 8003f2e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f30:	b2d2      	uxtb	r2, r2
 8003f32:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8003f34:	687b      	ldr	r3, [r7, #4]
 8003f36:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003f38:	1c5a      	adds	r2, r3, #1
 8003f3a:	687b      	ldr	r3, [r7, #4]
 8003f3c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8003f3e:	687b      	ldr	r3, [r7, #4]
 8003f40:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f42:	b29b      	uxth	r3, r3
 8003f44:	3b01      	subs	r3, #1
 8003f46:	b29a      	uxth	r2, r3
 8003f48:	687b      	ldr	r3, [r7, #4]
 8003f4a:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8003f4c:	687b      	ldr	r3, [r7, #4]
 8003f4e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003f50:	b29b      	uxth	r3, r3
 8003f52:	2b03      	cmp	r3, #3
 8003f54:	f040 8082 	bne.w	800405c <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	681b      	ldr	r3, [r3, #0]
 8003f5c:	685a      	ldr	r2, [r3, #4]
 8003f5e:	687b      	ldr	r3, [r7, #4]
 8003f60:	681b      	ldr	r3, [r3, #0]
 8003f62:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f66:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8003f68:	e078      	b.n	800405c <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8003f6a:	687b      	ldr	r3, [r7, #4]
 8003f6c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003f6e:	2b02      	cmp	r3, #2
 8003f70:	d074      	beq.n	800405c <I2C_MasterReceive_RXNE+0x15a>
 8003f72:	68fb      	ldr	r3, [r7, #12]
 8003f74:	2b01      	cmp	r3, #1
 8003f76:	d002      	beq.n	8003f7e <I2C_MasterReceive_RXNE+0x7c>
 8003f78:	68fb      	ldr	r3, [r7, #12]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d16e      	bne.n	800405c <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8003f7e:	6878      	ldr	r0, [r7, #4]
 8003f80:	f001 f818 	bl	8004fb4 <I2C_WaitOnSTOPRequestThroughIT>
 8003f84:	4603      	mov	r3, r0
 8003f86:	2b00      	cmp	r3, #0
 8003f88:	d142      	bne.n	8004010 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8003f8a:	687b      	ldr	r3, [r7, #4]
 8003f8c:	681b      	ldr	r3, [r3, #0]
 8003f8e:	681a      	ldr	r2, [r3, #0]
 8003f90:	687b      	ldr	r3, [r7, #4]
 8003f92:	681b      	ldr	r3, [r3, #0]
 8003f94:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f98:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	685a      	ldr	r2, [r3, #4]
 8003fa0:	687b      	ldr	r3, [r7, #4]
 8003fa2:	681b      	ldr	r3, [r3, #0]
 8003fa4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8003fa8:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	691a      	ldr	r2, [r3, #16]
 8003fb0:	687b      	ldr	r3, [r7, #4]
 8003fb2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fb4:	b2d2      	uxtb	r2, r2
 8003fb6:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003fbc:	1c5a      	adds	r2, r3, #1
 8003fbe:	687b      	ldr	r3, [r7, #4]
 8003fc0:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8003fc6:	b29b      	uxth	r3, r3
 8003fc8:	3b01      	subs	r3, #1
 8003fca:	b29a      	uxth	r2, r3
 8003fcc:	687b      	ldr	r3, [r7, #4]
 8003fce:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8003fd0:	687b      	ldr	r3, [r7, #4]
 8003fd2:	2220      	movs	r2, #32
 8003fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8003fd8:	687b      	ldr	r3, [r7, #4]
 8003fda:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8003fde:	b2db      	uxtb	r3, r3
 8003fe0:	2b40      	cmp	r3, #64	; 0x40
 8003fe2:	d10a      	bne.n	8003ffa <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003fe4:	687b      	ldr	r3, [r7, #4]
 8003fe6:	2200      	movs	r2, #0
 8003fe8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	2200      	movs	r2, #0
 8003ff0:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8003ff2:	6878      	ldr	r0, [r7, #4]
 8003ff4:	f7ff fdd4 	bl	8003ba0 <HAL_I2C_MemRxCpltCallback>
}
 8003ff8:	e030      	b.n	800405c <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8003ffa:	687b      	ldr	r3, [r7, #4]
 8003ffc:	2200      	movs	r2, #0
 8003ffe:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004002:	687b      	ldr	r3, [r7, #4]
 8004004:	2212      	movs	r2, #18
 8004006:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004008:	6878      	ldr	r0, [r7, #4]
 800400a:	f7ff fd89 	bl	8003b20 <HAL_I2C_MasterRxCpltCallback>
}
 800400e:	e025      	b.n	800405c <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004010:	687b      	ldr	r3, [r7, #4]
 8004012:	681b      	ldr	r3, [r3, #0]
 8004014:	685a      	ldr	r2, [r3, #4]
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800401e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	691a      	ldr	r2, [r3, #16]
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	b2d2      	uxtb	r2, r2
 800402c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004032:	1c5a      	adds	r2, r3, #1
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800403c:	b29b      	uxth	r3, r3
 800403e:	3b01      	subs	r3, #1
 8004040:	b29a      	uxth	r2, r3
 8004042:	687b      	ldr	r3, [r7, #4]
 8004044:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004046:	687b      	ldr	r3, [r7, #4]
 8004048:	2220      	movs	r2, #32
 800404a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800404e:	687b      	ldr	r3, [r7, #4]
 8004050:	2200      	movs	r2, #0
 8004052:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004056:	6878      	ldr	r0, [r7, #4]
 8004058:	f7ff fdac 	bl	8003bb4 <HAL_I2C_ErrorCallback>
}
 800405c:	bf00      	nop
 800405e:	3710      	adds	r7, #16
 8004060:	46bd      	mov	sp, r7
 8004062:	bd80      	pop	{r7, pc}

08004064 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004064:	b580      	push	{r7, lr}
 8004066:	b084      	sub	sp, #16
 8004068:	af00      	add	r7, sp, #0
 800406a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800406c:	687b      	ldr	r3, [r7, #4]
 800406e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004070:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004072:	687b      	ldr	r3, [r7, #4]
 8004074:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004076:	b29b      	uxth	r3, r3
 8004078:	2b04      	cmp	r3, #4
 800407a:	d11b      	bne.n	80040b4 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	681b      	ldr	r3, [r3, #0]
 8004080:	685a      	ldr	r2, [r3, #4]
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	681b      	ldr	r3, [r3, #0]
 8004086:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800408a:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800408c:	687b      	ldr	r3, [r7, #4]
 800408e:	681b      	ldr	r3, [r3, #0]
 8004090:	691a      	ldr	r2, [r3, #16]
 8004092:	687b      	ldr	r3, [r7, #4]
 8004094:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004096:	b2d2      	uxtb	r2, r2
 8004098:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800409a:	687b      	ldr	r3, [r7, #4]
 800409c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800409e:	1c5a      	adds	r2, r3, #1
 80040a0:	687b      	ldr	r3, [r7, #4]
 80040a2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80040a4:	687b      	ldr	r3, [r7, #4]
 80040a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040a8:	b29b      	uxth	r3, r3
 80040aa:	3b01      	subs	r3, #1
 80040ac:	b29a      	uxth	r2, r3
 80040ae:	687b      	ldr	r3, [r7, #4]
 80040b0:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 80040b2:	e0bd      	b.n	8004230 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 80040b4:	687b      	ldr	r3, [r7, #4]
 80040b6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80040b8:	b29b      	uxth	r3, r3
 80040ba:	2b03      	cmp	r3, #3
 80040bc:	d129      	bne.n	8004112 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80040be:	687b      	ldr	r3, [r7, #4]
 80040c0:	681b      	ldr	r3, [r3, #0]
 80040c2:	685a      	ldr	r2, [r3, #4]
 80040c4:	687b      	ldr	r3, [r7, #4]
 80040c6:	681b      	ldr	r3, [r3, #0]
 80040c8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040cc:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 80040ce:	68fb      	ldr	r3, [r7, #12]
 80040d0:	2b04      	cmp	r3, #4
 80040d2:	d00a      	beq.n	80040ea <I2C_MasterReceive_BTF+0x86>
 80040d4:	68fb      	ldr	r3, [r7, #12]
 80040d6:	2b02      	cmp	r3, #2
 80040d8:	d007      	beq.n	80040ea <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	681a      	ldr	r2, [r3, #0]
 80040e0:	687b      	ldr	r3, [r7, #4]
 80040e2:	681b      	ldr	r3, [r3, #0]
 80040e4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80040e8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80040ea:	687b      	ldr	r3, [r7, #4]
 80040ec:	681b      	ldr	r3, [r3, #0]
 80040ee:	691a      	ldr	r2, [r3, #16]
 80040f0:	687b      	ldr	r3, [r7, #4]
 80040f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040f4:	b2d2      	uxtb	r2, r2
 80040f6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80040fc:	1c5a      	adds	r2, r3, #1
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004102:	687b      	ldr	r3, [r7, #4]
 8004104:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004106:	b29b      	uxth	r3, r3
 8004108:	3b01      	subs	r3, #1
 800410a:	b29a      	uxth	r2, r3
 800410c:	687b      	ldr	r3, [r7, #4]
 800410e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004110:	e08e      	b.n	8004230 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004116:	b29b      	uxth	r3, r3
 8004118:	2b02      	cmp	r3, #2
 800411a:	d176      	bne.n	800420a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 800411c:	68fb      	ldr	r3, [r7, #12]
 800411e:	2b01      	cmp	r3, #1
 8004120:	d002      	beq.n	8004128 <I2C_MasterReceive_BTF+0xc4>
 8004122:	68fb      	ldr	r3, [r7, #12]
 8004124:	2b10      	cmp	r3, #16
 8004126:	d108      	bne.n	800413a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004128:	687b      	ldr	r3, [r7, #4]
 800412a:	681b      	ldr	r3, [r3, #0]
 800412c:	681a      	ldr	r2, [r3, #0]
 800412e:	687b      	ldr	r3, [r7, #4]
 8004130:	681b      	ldr	r3, [r3, #0]
 8004132:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004136:	601a      	str	r2, [r3, #0]
 8004138:	e019      	b.n	800416e <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 800413a:	68fb      	ldr	r3, [r7, #12]
 800413c:	2b04      	cmp	r3, #4
 800413e:	d002      	beq.n	8004146 <I2C_MasterReceive_BTF+0xe2>
 8004140:	68fb      	ldr	r3, [r7, #12]
 8004142:	2b02      	cmp	r3, #2
 8004144:	d108      	bne.n	8004158 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004146:	687b      	ldr	r3, [r7, #4]
 8004148:	681b      	ldr	r3, [r3, #0]
 800414a:	681a      	ldr	r2, [r3, #0]
 800414c:	687b      	ldr	r3, [r7, #4]
 800414e:	681b      	ldr	r3, [r3, #0]
 8004150:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004154:	601a      	str	r2, [r3, #0]
 8004156:	e00a      	b.n	800416e <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004158:	68fb      	ldr	r3, [r7, #12]
 800415a:	2b10      	cmp	r3, #16
 800415c:	d007      	beq.n	800416e <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	681b      	ldr	r3, [r3, #0]
 8004162:	681a      	ldr	r2, [r3, #0]
 8004164:	687b      	ldr	r3, [r7, #4]
 8004166:	681b      	ldr	r3, [r3, #0]
 8004168:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800416c:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	691a      	ldr	r2, [r3, #16]
 8004174:	687b      	ldr	r3, [r7, #4]
 8004176:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004178:	b2d2      	uxtb	r2, r2
 800417a:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800417c:	687b      	ldr	r3, [r7, #4]
 800417e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004180:	1c5a      	adds	r2, r3, #1
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004186:	687b      	ldr	r3, [r7, #4]
 8004188:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800418a:	b29b      	uxth	r3, r3
 800418c:	3b01      	subs	r3, #1
 800418e:	b29a      	uxth	r2, r3
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004194:	687b      	ldr	r3, [r7, #4]
 8004196:	681b      	ldr	r3, [r3, #0]
 8004198:	691a      	ldr	r2, [r3, #16]
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800419e:	b2d2      	uxtb	r2, r2
 80041a0:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80041a6:	1c5a      	adds	r2, r3, #1
 80041a8:	687b      	ldr	r3, [r7, #4]
 80041aa:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80041b0:	b29b      	uxth	r3, r3
 80041b2:	3b01      	subs	r3, #1
 80041b4:	b29a      	uxth	r2, r3
 80041b6:	687b      	ldr	r3, [r7, #4]
 80041b8:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	685a      	ldr	r2, [r3, #4]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 80041c8:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2220      	movs	r2, #32
 80041ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80041d2:	687b      	ldr	r3, [r7, #4]
 80041d4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80041d8:	b2db      	uxtb	r3, r3
 80041da:	2b40      	cmp	r3, #64	; 0x40
 80041dc:	d10a      	bne.n	80041f4 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041de:	687b      	ldr	r3, [r7, #4]
 80041e0:	2200      	movs	r2, #0
 80041e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 80041e6:	687b      	ldr	r3, [r7, #4]
 80041e8:	2200      	movs	r2, #0
 80041ea:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 80041ec:	6878      	ldr	r0, [r7, #4]
 80041ee:	f7ff fcd7 	bl	8003ba0 <HAL_I2C_MemRxCpltCallback>
}
 80041f2:	e01d      	b.n	8004230 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	2200      	movs	r2, #0
 80041f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	2212      	movs	r2, #18
 8004200:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004202:	6878      	ldr	r0, [r7, #4]
 8004204:	f7ff fc8c 	bl	8003b20 <HAL_I2C_MasterRxCpltCallback>
}
 8004208:	e012      	b.n	8004230 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800420a:	687b      	ldr	r3, [r7, #4]
 800420c:	681b      	ldr	r3, [r3, #0]
 800420e:	691a      	ldr	r2, [r3, #16]
 8004210:	687b      	ldr	r3, [r7, #4]
 8004212:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004214:	b2d2      	uxtb	r2, r2
 8004216:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004218:	687b      	ldr	r3, [r7, #4]
 800421a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800421c:	1c5a      	adds	r2, r3, #1
 800421e:	687b      	ldr	r3, [r7, #4]
 8004220:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004222:	687b      	ldr	r3, [r7, #4]
 8004224:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004226:	b29b      	uxth	r3, r3
 8004228:	3b01      	subs	r3, #1
 800422a:	b29a      	uxth	r2, r3
 800422c:	687b      	ldr	r3, [r7, #4]
 800422e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004230:	bf00      	nop
 8004232:	3710      	adds	r7, #16
 8004234:	46bd      	mov	sp, r7
 8004236:	bd80      	pop	{r7, pc}

08004238 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004238:	b480      	push	{r7}
 800423a:	b083      	sub	sp, #12
 800423c:	af00      	add	r7, sp, #0
 800423e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004240:	687b      	ldr	r3, [r7, #4]
 8004242:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004246:	b2db      	uxtb	r3, r3
 8004248:	2b40      	cmp	r3, #64	; 0x40
 800424a:	d117      	bne.n	800427c <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 800424c:	687b      	ldr	r3, [r7, #4]
 800424e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004250:	2b00      	cmp	r3, #0
 8004252:	d109      	bne.n	8004268 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004258:	b2db      	uxtb	r3, r3
 800425a:	461a      	mov	r2, r3
 800425c:	687b      	ldr	r3, [r7, #4]
 800425e:	681b      	ldr	r3, [r3, #0]
 8004260:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004264:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004266:	e067      	b.n	8004338 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004268:	687b      	ldr	r3, [r7, #4]
 800426a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800426c:	b2db      	uxtb	r3, r3
 800426e:	f043 0301 	orr.w	r3, r3, #1
 8004272:	b2da      	uxtb	r2, r3
 8004274:	687b      	ldr	r3, [r7, #4]
 8004276:	681b      	ldr	r3, [r3, #0]
 8004278:	611a      	str	r2, [r3, #16]
}
 800427a:	e05d      	b.n	8004338 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 800427c:	687b      	ldr	r3, [r7, #4]
 800427e:	691b      	ldr	r3, [r3, #16]
 8004280:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004284:	d133      	bne.n	80042ee <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800428c:	b2db      	uxtb	r3, r3
 800428e:	2b21      	cmp	r3, #33	; 0x21
 8004290:	d109      	bne.n	80042a6 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004296:	b2db      	uxtb	r3, r3
 8004298:	461a      	mov	r2, r3
 800429a:	687b      	ldr	r3, [r7, #4]
 800429c:	681b      	ldr	r3, [r3, #0]
 800429e:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80042a2:	611a      	str	r2, [r3, #16]
 80042a4:	e008      	b.n	80042b8 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80042a6:	687b      	ldr	r3, [r7, #4]
 80042a8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042aa:	b2db      	uxtb	r3, r3
 80042ac:	f043 0301 	orr.w	r3, r3, #1
 80042b0:	b2da      	uxtb	r2, r3
 80042b2:	687b      	ldr	r3, [r7, #4]
 80042b4:	681b      	ldr	r3, [r3, #0]
 80042b6:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042bc:	2b00      	cmp	r3, #0
 80042be:	d004      	beq.n	80042ca <I2C_Master_SB+0x92>
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80042c4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042c6:	2b00      	cmp	r3, #0
 80042c8:	d108      	bne.n	80042dc <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80042ca:	687b      	ldr	r3, [r7, #4]
 80042cc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042ce:	2b00      	cmp	r3, #0
 80042d0:	d032      	beq.n	8004338 <I2C_Master_SB+0x100>
 80042d2:	687b      	ldr	r3, [r7, #4]
 80042d4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80042d6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80042d8:	2b00      	cmp	r3, #0
 80042da:	d02d      	beq.n	8004338 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80042dc:	687b      	ldr	r3, [r7, #4]
 80042de:	681b      	ldr	r3, [r3, #0]
 80042e0:	685a      	ldr	r2, [r3, #4]
 80042e2:	687b      	ldr	r3, [r7, #4]
 80042e4:	681b      	ldr	r3, [r3, #0]
 80042e6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80042ea:	605a      	str	r2, [r3, #4]
}
 80042ec:	e024      	b.n	8004338 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 80042ee:	687b      	ldr	r3, [r7, #4]
 80042f0:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d10e      	bne.n	8004314 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80042fa:	b29b      	uxth	r3, r3
 80042fc:	11db      	asrs	r3, r3, #7
 80042fe:	b2db      	uxtb	r3, r3
 8004300:	f003 0306 	and.w	r3, r3, #6
 8004304:	b2db      	uxtb	r3, r3
 8004306:	f063 030f 	orn	r3, r3, #15
 800430a:	b2da      	uxtb	r2, r3
 800430c:	687b      	ldr	r3, [r7, #4]
 800430e:	681b      	ldr	r3, [r3, #0]
 8004310:	611a      	str	r2, [r3, #16]
}
 8004312:	e011      	b.n	8004338 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004314:	687b      	ldr	r3, [r7, #4]
 8004316:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004318:	2b01      	cmp	r3, #1
 800431a:	d10d      	bne.n	8004338 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 800431c:	687b      	ldr	r3, [r7, #4]
 800431e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004320:	b29b      	uxth	r3, r3
 8004322:	11db      	asrs	r3, r3, #7
 8004324:	b2db      	uxtb	r3, r3
 8004326:	f003 0306 	and.w	r3, r3, #6
 800432a:	b2db      	uxtb	r3, r3
 800432c:	f063 030e 	orn	r3, r3, #14
 8004330:	b2da      	uxtb	r2, r3
 8004332:	687b      	ldr	r3, [r7, #4]
 8004334:	681b      	ldr	r3, [r3, #0]
 8004336:	611a      	str	r2, [r3, #16]
}
 8004338:	bf00      	nop
 800433a:	370c      	adds	r7, #12
 800433c:	46bd      	mov	sp, r7
 800433e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004342:	4770      	bx	lr

08004344 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004344:	b480      	push	{r7}
 8004346:	b083      	sub	sp, #12
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 800434c:	687b      	ldr	r3, [r7, #4]
 800434e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004350:	b2da      	uxtb	r2, r3
 8004352:	687b      	ldr	r3, [r7, #4]
 8004354:	681b      	ldr	r3, [r3, #0]
 8004356:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800435c:	2b00      	cmp	r3, #0
 800435e:	d004      	beq.n	800436a <I2C_Master_ADD10+0x26>
 8004360:	687b      	ldr	r3, [r7, #4]
 8004362:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004364:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004366:	2b00      	cmp	r3, #0
 8004368:	d108      	bne.n	800437c <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 800436a:	687b      	ldr	r3, [r7, #4]
 800436c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800436e:	2b00      	cmp	r3, #0
 8004370:	d00c      	beq.n	800438c <I2C_Master_ADD10+0x48>
 8004372:	687b      	ldr	r3, [r7, #4]
 8004374:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004376:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004378:	2b00      	cmp	r3, #0
 800437a:	d007      	beq.n	800438c <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	685a      	ldr	r2, [r3, #4]
 8004382:	687b      	ldr	r3, [r7, #4]
 8004384:	681b      	ldr	r3, [r3, #0]
 8004386:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800438a:	605a      	str	r2, [r3, #4]
  }
}
 800438c:	bf00      	nop
 800438e:	370c      	adds	r7, #12
 8004390:	46bd      	mov	sp, r7
 8004392:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004396:	4770      	bx	lr

08004398 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004398:	b480      	push	{r7}
 800439a:	b091      	sub	sp, #68	; 0x44
 800439c:	af00      	add	r7, sp, #0
 800439e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 80043a0:	687b      	ldr	r3, [r7, #4]
 80043a2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80043a6:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 80043aa:	687b      	ldr	r3, [r7, #4]
 80043ac:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80043ae:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 80043b0:	687b      	ldr	r3, [r7, #4]
 80043b2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80043b4:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 80043b6:	687b      	ldr	r3, [r7, #4]
 80043b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80043bc:	b2db      	uxtb	r3, r3
 80043be:	2b22      	cmp	r3, #34	; 0x22
 80043c0:	f040 8169 	bne.w	8004696 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 80043c4:	687b      	ldr	r3, [r7, #4]
 80043c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043c8:	2b00      	cmp	r3, #0
 80043ca:	d10f      	bne.n	80043ec <I2C_Master_ADDR+0x54>
 80043cc:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 80043d0:	2b40      	cmp	r3, #64	; 0x40
 80043d2:	d10b      	bne.n	80043ec <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043d4:	2300      	movs	r3, #0
 80043d6:	633b      	str	r3, [r7, #48]	; 0x30
 80043d8:	687b      	ldr	r3, [r7, #4]
 80043da:	681b      	ldr	r3, [r3, #0]
 80043dc:	695b      	ldr	r3, [r3, #20]
 80043de:	633b      	str	r3, [r7, #48]	; 0x30
 80043e0:	687b      	ldr	r3, [r7, #4]
 80043e2:	681b      	ldr	r3, [r3, #0]
 80043e4:	699b      	ldr	r3, [r3, #24]
 80043e6:	633b      	str	r3, [r7, #48]	; 0x30
 80043e8:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 80043ea:	e160      	b.n	80046ae <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 80043ec:	687b      	ldr	r3, [r7, #4]
 80043ee:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80043f0:	2b00      	cmp	r3, #0
 80043f2:	d11d      	bne.n	8004430 <I2C_Master_ADDR+0x98>
 80043f4:	687b      	ldr	r3, [r7, #4]
 80043f6:	691b      	ldr	r3, [r3, #16]
 80043f8:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 80043fc:	d118      	bne.n	8004430 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80043fe:	2300      	movs	r3, #0
 8004400:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004402:	687b      	ldr	r3, [r7, #4]
 8004404:	681b      	ldr	r3, [r3, #0]
 8004406:	695b      	ldr	r3, [r3, #20]
 8004408:	62fb      	str	r3, [r7, #44]	; 0x2c
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	681b      	ldr	r3, [r3, #0]
 800440e:	699b      	ldr	r3, [r3, #24]
 8004410:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004412:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8004414:	687b      	ldr	r3, [r7, #4]
 8004416:	681b      	ldr	r3, [r3, #0]
 8004418:	681a      	ldr	r2, [r3, #0]
 800441a:	687b      	ldr	r3, [r7, #4]
 800441c:	681b      	ldr	r3, [r3, #0]
 800441e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004422:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8004424:	687b      	ldr	r3, [r7, #4]
 8004426:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004428:	1c5a      	adds	r2, r3, #1
 800442a:	687b      	ldr	r3, [r7, #4]
 800442c:	651a      	str	r2, [r3, #80]	; 0x50
 800442e:	e13e      	b.n	80046ae <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8004430:	687b      	ldr	r3, [r7, #4]
 8004432:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004434:	b29b      	uxth	r3, r3
 8004436:	2b00      	cmp	r3, #0
 8004438:	d113      	bne.n	8004462 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800443a:	2300      	movs	r3, #0
 800443c:	62bb      	str	r3, [r7, #40]	; 0x28
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	681b      	ldr	r3, [r3, #0]
 8004442:	695b      	ldr	r3, [r3, #20]
 8004444:	62bb      	str	r3, [r7, #40]	; 0x28
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	699b      	ldr	r3, [r3, #24]
 800444c:	62bb      	str	r3, [r7, #40]	; 0x28
 800444e:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004450:	687b      	ldr	r3, [r7, #4]
 8004452:	681b      	ldr	r3, [r3, #0]
 8004454:	681a      	ldr	r2, [r3, #0]
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	681b      	ldr	r3, [r3, #0]
 800445a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800445e:	601a      	str	r2, [r3, #0]
 8004460:	e115      	b.n	800468e <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004466:	b29b      	uxth	r3, r3
 8004468:	2b01      	cmp	r3, #1
 800446a:	f040 808a 	bne.w	8004582 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 800446e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004470:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8004474:	d137      	bne.n	80044e6 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004476:	687b      	ldr	r3, [r7, #4]
 8004478:	681b      	ldr	r3, [r3, #0]
 800447a:	681a      	ldr	r2, [r3, #0]
 800447c:	687b      	ldr	r3, [r7, #4]
 800447e:	681b      	ldr	r3, [r3, #0]
 8004480:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004484:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004486:	687b      	ldr	r3, [r7, #4]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	685b      	ldr	r3, [r3, #4]
 800448c:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004490:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004494:	d113      	bne.n	80044be <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004496:	687b      	ldr	r3, [r7, #4]
 8004498:	681b      	ldr	r3, [r3, #0]
 800449a:	681a      	ldr	r2, [r3, #0]
 800449c:	687b      	ldr	r3, [r7, #4]
 800449e:	681b      	ldr	r3, [r3, #0]
 80044a0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80044a4:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044a6:	2300      	movs	r3, #0
 80044a8:	627b      	str	r3, [r7, #36]	; 0x24
 80044aa:	687b      	ldr	r3, [r7, #4]
 80044ac:	681b      	ldr	r3, [r3, #0]
 80044ae:	695b      	ldr	r3, [r3, #20]
 80044b0:	627b      	str	r3, [r7, #36]	; 0x24
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	681b      	ldr	r3, [r3, #0]
 80044b6:	699b      	ldr	r3, [r3, #24]
 80044b8:	627b      	str	r3, [r7, #36]	; 0x24
 80044ba:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80044bc:	e0e7      	b.n	800468e <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80044be:	2300      	movs	r3, #0
 80044c0:	623b      	str	r3, [r7, #32]
 80044c2:	687b      	ldr	r3, [r7, #4]
 80044c4:	681b      	ldr	r3, [r3, #0]
 80044c6:	695b      	ldr	r3, [r3, #20]
 80044c8:	623b      	str	r3, [r7, #32]
 80044ca:	687b      	ldr	r3, [r7, #4]
 80044cc:	681b      	ldr	r3, [r3, #0]
 80044ce:	699b      	ldr	r3, [r3, #24]
 80044d0:	623b      	str	r3, [r7, #32]
 80044d2:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80044d4:	687b      	ldr	r3, [r7, #4]
 80044d6:	681b      	ldr	r3, [r3, #0]
 80044d8:	681a      	ldr	r2, [r3, #0]
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80044e2:	601a      	str	r2, [r3, #0]
 80044e4:	e0d3      	b.n	800468e <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 80044e6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044e8:	2b08      	cmp	r3, #8
 80044ea:	d02e      	beq.n	800454a <I2C_Master_ADDR+0x1b2>
 80044ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044ee:	2b20      	cmp	r3, #32
 80044f0:	d02b      	beq.n	800454a <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 80044f2:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 80044f4:	2b12      	cmp	r3, #18
 80044f6:	d102      	bne.n	80044fe <I2C_Master_ADDR+0x166>
 80044f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80044fa:	2b01      	cmp	r3, #1
 80044fc:	d125      	bne.n	800454a <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80044fe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004500:	2b04      	cmp	r3, #4
 8004502:	d00e      	beq.n	8004522 <I2C_Master_ADDR+0x18a>
 8004504:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004506:	2b02      	cmp	r3, #2
 8004508:	d00b      	beq.n	8004522 <I2C_Master_ADDR+0x18a>
 800450a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800450c:	2b10      	cmp	r3, #16
 800450e:	d008      	beq.n	8004522 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	681a      	ldr	r2, [r3, #0]
 8004516:	687b      	ldr	r3, [r7, #4]
 8004518:	681b      	ldr	r3, [r3, #0]
 800451a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800451e:	601a      	str	r2, [r3, #0]
 8004520:	e007      	b.n	8004532 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004522:	687b      	ldr	r3, [r7, #4]
 8004524:	681b      	ldr	r3, [r3, #0]
 8004526:	681a      	ldr	r2, [r3, #0]
 8004528:	687b      	ldr	r3, [r7, #4]
 800452a:	681b      	ldr	r3, [r3, #0]
 800452c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004530:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004532:	2300      	movs	r3, #0
 8004534:	61fb      	str	r3, [r7, #28]
 8004536:	687b      	ldr	r3, [r7, #4]
 8004538:	681b      	ldr	r3, [r3, #0]
 800453a:	695b      	ldr	r3, [r3, #20]
 800453c:	61fb      	str	r3, [r7, #28]
 800453e:	687b      	ldr	r3, [r7, #4]
 8004540:	681b      	ldr	r3, [r3, #0]
 8004542:	699b      	ldr	r3, [r3, #24]
 8004544:	61fb      	str	r3, [r7, #28]
 8004546:	69fb      	ldr	r3, [r7, #28]
 8004548:	e0a1      	b.n	800468e <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	681b      	ldr	r3, [r3, #0]
 800454e:	681a      	ldr	r2, [r3, #0]
 8004550:	687b      	ldr	r3, [r7, #4]
 8004552:	681b      	ldr	r3, [r3, #0]
 8004554:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004558:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800455a:	2300      	movs	r3, #0
 800455c:	61bb      	str	r3, [r7, #24]
 800455e:	687b      	ldr	r3, [r7, #4]
 8004560:	681b      	ldr	r3, [r3, #0]
 8004562:	695b      	ldr	r3, [r3, #20]
 8004564:	61bb      	str	r3, [r7, #24]
 8004566:	687b      	ldr	r3, [r7, #4]
 8004568:	681b      	ldr	r3, [r3, #0]
 800456a:	699b      	ldr	r3, [r3, #24]
 800456c:	61bb      	str	r3, [r7, #24]
 800456e:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004570:	687b      	ldr	r3, [r7, #4]
 8004572:	681b      	ldr	r3, [r3, #0]
 8004574:	681a      	ldr	r2, [r3, #0]
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	681b      	ldr	r3, [r3, #0]
 800457a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800457e:	601a      	str	r2, [r3, #0]
 8004580:	e085      	b.n	800468e <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8004582:	687b      	ldr	r3, [r7, #4]
 8004584:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004586:	b29b      	uxth	r3, r3
 8004588:	2b02      	cmp	r3, #2
 800458a:	d14d      	bne.n	8004628 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800458c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800458e:	2b04      	cmp	r3, #4
 8004590:	d016      	beq.n	80045c0 <I2C_Master_ADDR+0x228>
 8004592:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004594:	2b02      	cmp	r3, #2
 8004596:	d013      	beq.n	80045c0 <I2C_Master_ADDR+0x228>
 8004598:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800459a:	2b10      	cmp	r3, #16
 800459c:	d010      	beq.n	80045c0 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800459e:	687b      	ldr	r3, [r7, #4]
 80045a0:	681b      	ldr	r3, [r3, #0]
 80045a2:	681a      	ldr	r2, [r3, #0]
 80045a4:	687b      	ldr	r3, [r7, #4]
 80045a6:	681b      	ldr	r3, [r3, #0]
 80045a8:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80045ac:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80045ae:	687b      	ldr	r3, [r7, #4]
 80045b0:	681b      	ldr	r3, [r3, #0]
 80045b2:	681a      	ldr	r2, [r3, #0]
 80045b4:	687b      	ldr	r3, [r7, #4]
 80045b6:	681b      	ldr	r3, [r3, #0]
 80045b8:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80045bc:	601a      	str	r2, [r3, #0]
 80045be:	e007      	b.n	80045d0 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80045c0:	687b      	ldr	r3, [r7, #4]
 80045c2:	681b      	ldr	r3, [r3, #0]
 80045c4:	681a      	ldr	r2, [r3, #0]
 80045c6:	687b      	ldr	r3, [r7, #4]
 80045c8:	681b      	ldr	r3, [r3, #0]
 80045ca:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80045ce:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 80045d0:	687b      	ldr	r3, [r7, #4]
 80045d2:	681b      	ldr	r3, [r3, #0]
 80045d4:	685b      	ldr	r3, [r3, #4]
 80045d6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80045da:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80045de:	d117      	bne.n	8004610 <I2C_Master_ADDR+0x278>
 80045e0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045e2:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80045e6:	d00b      	beq.n	8004600 <I2C_Master_ADDR+0x268>
 80045e8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045ea:	2b01      	cmp	r3, #1
 80045ec:	d008      	beq.n	8004600 <I2C_Master_ADDR+0x268>
 80045ee:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f0:	2b08      	cmp	r3, #8
 80045f2:	d005      	beq.n	8004600 <I2C_Master_ADDR+0x268>
 80045f4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045f6:	2b10      	cmp	r3, #16
 80045f8:	d002      	beq.n	8004600 <I2C_Master_ADDR+0x268>
 80045fa:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80045fc:	2b20      	cmp	r3, #32
 80045fe:	d107      	bne.n	8004610 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	685a      	ldr	r2, [r3, #4]
 8004606:	687b      	ldr	r3, [r7, #4]
 8004608:	681b      	ldr	r3, [r3, #0]
 800460a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800460e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004610:	2300      	movs	r3, #0
 8004612:	617b      	str	r3, [r7, #20]
 8004614:	687b      	ldr	r3, [r7, #4]
 8004616:	681b      	ldr	r3, [r3, #0]
 8004618:	695b      	ldr	r3, [r3, #20]
 800461a:	617b      	str	r3, [r7, #20]
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	681b      	ldr	r3, [r3, #0]
 8004620:	699b      	ldr	r3, [r3, #24]
 8004622:	617b      	str	r3, [r7, #20]
 8004624:	697b      	ldr	r3, [r7, #20]
 8004626:	e032      	b.n	800468e <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004628:	687b      	ldr	r3, [r7, #4]
 800462a:	681b      	ldr	r3, [r3, #0]
 800462c:	681a      	ldr	r2, [r3, #0]
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004636:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8004638:	687b      	ldr	r3, [r7, #4]
 800463a:	681b      	ldr	r3, [r3, #0]
 800463c:	685b      	ldr	r3, [r3, #4]
 800463e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004642:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004646:	d117      	bne.n	8004678 <I2C_Master_ADDR+0x2e0>
 8004648:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800464a:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800464e:	d00b      	beq.n	8004668 <I2C_Master_ADDR+0x2d0>
 8004650:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004652:	2b01      	cmp	r3, #1
 8004654:	d008      	beq.n	8004668 <I2C_Master_ADDR+0x2d0>
 8004656:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004658:	2b08      	cmp	r3, #8
 800465a:	d005      	beq.n	8004668 <I2C_Master_ADDR+0x2d0>
 800465c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800465e:	2b10      	cmp	r3, #16
 8004660:	d002      	beq.n	8004668 <I2C_Master_ADDR+0x2d0>
 8004662:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8004664:	2b20      	cmp	r3, #32
 8004666:	d107      	bne.n	8004678 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8004668:	687b      	ldr	r3, [r7, #4]
 800466a:	681b      	ldr	r3, [r3, #0]
 800466c:	685a      	ldr	r2, [r3, #4]
 800466e:	687b      	ldr	r3, [r7, #4]
 8004670:	681b      	ldr	r3, [r3, #0]
 8004672:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8004676:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004678:	2300      	movs	r3, #0
 800467a:	613b      	str	r3, [r7, #16]
 800467c:	687b      	ldr	r3, [r7, #4]
 800467e:	681b      	ldr	r3, [r3, #0]
 8004680:	695b      	ldr	r3, [r3, #20]
 8004682:	613b      	str	r3, [r7, #16]
 8004684:	687b      	ldr	r3, [r7, #4]
 8004686:	681b      	ldr	r3, [r3, #0]
 8004688:	699b      	ldr	r3, [r3, #24]
 800468a:	613b      	str	r3, [r7, #16]
 800468c:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	2200      	movs	r2, #0
 8004692:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8004694:	e00b      	b.n	80046ae <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8004696:	2300      	movs	r3, #0
 8004698:	60fb      	str	r3, [r7, #12]
 800469a:	687b      	ldr	r3, [r7, #4]
 800469c:	681b      	ldr	r3, [r3, #0]
 800469e:	695b      	ldr	r3, [r3, #20]
 80046a0:	60fb      	str	r3, [r7, #12]
 80046a2:	687b      	ldr	r3, [r7, #4]
 80046a4:	681b      	ldr	r3, [r3, #0]
 80046a6:	699b      	ldr	r3, [r3, #24]
 80046a8:	60fb      	str	r3, [r7, #12]
 80046aa:	68fb      	ldr	r3, [r7, #12]
}
 80046ac:	e7ff      	b.n	80046ae <I2C_Master_ADDR+0x316>
 80046ae:	bf00      	nop
 80046b0:	3744      	adds	r7, #68	; 0x44
 80046b2:	46bd      	mov	sp, r7
 80046b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046b8:	4770      	bx	lr

080046ba <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 80046ba:	b580      	push	{r7, lr}
 80046bc:	b084      	sub	sp, #16
 80046be:	af00      	add	r7, sp, #0
 80046c0:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c8:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80046ca:	687b      	ldr	r3, [r7, #4]
 80046cc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ce:	b29b      	uxth	r3, r3
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d02b      	beq.n	800472c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80046d4:	687b      	ldr	r3, [r7, #4]
 80046d6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046d8:	781a      	ldrb	r2, [r3, #0]
 80046da:	687b      	ldr	r3, [r7, #4]
 80046dc:	681b      	ldr	r3, [r3, #0]
 80046de:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80046e0:	687b      	ldr	r3, [r7, #4]
 80046e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80046e4:	1c5a      	adds	r2, r3, #1
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046ee:	b29b      	uxth	r3, r3
 80046f0:	3b01      	subs	r3, #1
 80046f2:	b29a      	uxth	r2, r3
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 80046f8:	687b      	ldr	r3, [r7, #4]
 80046fa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046fc:	b29b      	uxth	r3, r3
 80046fe:	2b00      	cmp	r3, #0
 8004700:	d114      	bne.n	800472c <I2C_SlaveTransmit_TXE+0x72>
 8004702:	7bfb      	ldrb	r3, [r7, #15]
 8004704:	2b29      	cmp	r3, #41	; 0x29
 8004706:	d111      	bne.n	800472c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004708:	687b      	ldr	r3, [r7, #4]
 800470a:	681b      	ldr	r3, [r3, #0]
 800470c:	685a      	ldr	r2, [r3, #4]
 800470e:	687b      	ldr	r3, [r7, #4]
 8004710:	681b      	ldr	r3, [r3, #0]
 8004712:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004716:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	2221      	movs	r2, #33	; 0x21
 800471c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800471e:	687b      	ldr	r3, [r7, #4]
 8004720:	2228      	movs	r2, #40	; 0x28
 8004722:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004726:	6878      	ldr	r0, [r7, #4]
 8004728:	f7ff fa04 	bl	8003b34 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800472c:	bf00      	nop
 800472e:	3710      	adds	r7, #16
 8004730:	46bd      	mov	sp, r7
 8004732:	bd80      	pop	{r7, pc}

08004734 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004734:	b480      	push	{r7}
 8004736:	b083      	sub	sp, #12
 8004738:	af00      	add	r7, sp, #0
 800473a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800473c:	687b      	ldr	r3, [r7, #4]
 800473e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004740:	b29b      	uxth	r3, r3
 8004742:	2b00      	cmp	r3, #0
 8004744:	d011      	beq.n	800476a <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004746:	687b      	ldr	r3, [r7, #4]
 8004748:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800474a:	781a      	ldrb	r2, [r3, #0]
 800474c:	687b      	ldr	r3, [r7, #4]
 800474e:	681b      	ldr	r3, [r3, #0]
 8004750:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004756:	1c5a      	adds	r2, r3, #1
 8004758:	687b      	ldr	r3, [r7, #4]
 800475a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800475c:	687b      	ldr	r3, [r7, #4]
 800475e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004760:	b29b      	uxth	r3, r3
 8004762:	3b01      	subs	r3, #1
 8004764:	b29a      	uxth	r2, r3
 8004766:	687b      	ldr	r3, [r7, #4]
 8004768:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800476a:	bf00      	nop
 800476c:	370c      	adds	r7, #12
 800476e:	46bd      	mov	sp, r7
 8004770:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004774:	4770      	bx	lr

08004776 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004776:	b580      	push	{r7, lr}
 8004778:	b084      	sub	sp, #16
 800477a:	af00      	add	r7, sp, #0
 800477c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 800477e:	687b      	ldr	r3, [r7, #4]
 8004780:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004784:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8004786:	687b      	ldr	r3, [r7, #4]
 8004788:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800478a:	b29b      	uxth	r3, r3
 800478c:	2b00      	cmp	r3, #0
 800478e:	d02c      	beq.n	80047ea <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004790:	687b      	ldr	r3, [r7, #4]
 8004792:	681b      	ldr	r3, [r3, #0]
 8004794:	691a      	ldr	r2, [r3, #16]
 8004796:	687b      	ldr	r3, [r7, #4]
 8004798:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800479a:	b2d2      	uxtb	r2, r2
 800479c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 800479e:	687b      	ldr	r3, [r7, #4]
 80047a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80047a2:	1c5a      	adds	r2, r3, #1
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80047a8:	687b      	ldr	r3, [r7, #4]
 80047aa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ac:	b29b      	uxth	r3, r3
 80047ae:	3b01      	subs	r3, #1
 80047b0:	b29a      	uxth	r2, r3
 80047b2:	687b      	ldr	r3, [r7, #4]
 80047b4:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 80047b6:	687b      	ldr	r3, [r7, #4]
 80047b8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047ba:	b29b      	uxth	r3, r3
 80047bc:	2b00      	cmp	r3, #0
 80047be:	d114      	bne.n	80047ea <I2C_SlaveReceive_RXNE+0x74>
 80047c0:	7bfb      	ldrb	r3, [r7, #15]
 80047c2:	2b2a      	cmp	r3, #42	; 0x2a
 80047c4:	d111      	bne.n	80047ea <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80047c6:	687b      	ldr	r3, [r7, #4]
 80047c8:	681b      	ldr	r3, [r3, #0]
 80047ca:	685a      	ldr	r2, [r3, #4]
 80047cc:	687b      	ldr	r3, [r7, #4]
 80047ce:	681b      	ldr	r3, [r3, #0]
 80047d0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80047d4:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	2222      	movs	r2, #34	; 0x22
 80047da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80047dc:	687b      	ldr	r3, [r7, #4]
 80047de:	2228      	movs	r2, #40	; 0x28
 80047e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 80047e4:	6878      	ldr	r0, [r7, #4]
 80047e6:	f7ff f9af 	bl	8003b48 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 80047ea:	bf00      	nop
 80047ec:	3710      	adds	r7, #16
 80047ee:	46bd      	mov	sp, r7
 80047f0:	bd80      	pop	{r7, pc}

080047f2 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80047f2:	b480      	push	{r7}
 80047f4:	b083      	sub	sp, #12
 80047f6:	af00      	add	r7, sp, #0
 80047f8:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 80047fa:	687b      	ldr	r3, [r7, #4]
 80047fc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80047fe:	b29b      	uxth	r3, r3
 8004800:	2b00      	cmp	r3, #0
 8004802:	d012      	beq.n	800482a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004804:	687b      	ldr	r3, [r7, #4]
 8004806:	681b      	ldr	r3, [r3, #0]
 8004808:	691a      	ldr	r2, [r3, #16]
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800480e:	b2d2      	uxtb	r2, r2
 8004810:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004812:	687b      	ldr	r3, [r7, #4]
 8004814:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004816:	1c5a      	adds	r2, r3, #1
 8004818:	687b      	ldr	r3, [r7, #4]
 800481a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004820:	b29b      	uxth	r3, r3
 8004822:	3b01      	subs	r3, #1
 8004824:	b29a      	uxth	r2, r3
 8004826:	687b      	ldr	r3, [r7, #4]
 8004828:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800482a:	bf00      	nop
 800482c:	370c      	adds	r7, #12
 800482e:	46bd      	mov	sp, r7
 8004830:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004834:	4770      	bx	lr

08004836 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8004836:	b580      	push	{r7, lr}
 8004838:	b084      	sub	sp, #16
 800483a:	af00      	add	r7, sp, #0
 800483c:	6078      	str	r0, [r7, #4]
 800483e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8004840:	2300      	movs	r3, #0
 8004842:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484a:	b2db      	uxtb	r3, r3
 800484c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004850:	2b28      	cmp	r3, #40	; 0x28
 8004852:	d127      	bne.n	80048a4 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	681b      	ldr	r3, [r3, #0]
 8004858:	685a      	ldr	r2, [r3, #4]
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	681b      	ldr	r3, [r3, #0]
 800485e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004862:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8004864:	683b      	ldr	r3, [r7, #0]
 8004866:	089b      	lsrs	r3, r3, #2
 8004868:	f003 0301 	and.w	r3, r3, #1
 800486c:	2b00      	cmp	r3, #0
 800486e:	d101      	bne.n	8004874 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8004870:	2301      	movs	r3, #1
 8004872:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8004874:	683b      	ldr	r3, [r7, #0]
 8004876:	09db      	lsrs	r3, r3, #7
 8004878:	f003 0301 	and.w	r3, r3, #1
 800487c:	2b00      	cmp	r3, #0
 800487e:	d103      	bne.n	8004888 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8004880:	687b      	ldr	r3, [r7, #4]
 8004882:	68db      	ldr	r3, [r3, #12]
 8004884:	81bb      	strh	r3, [r7, #12]
 8004886:	e002      	b.n	800488e <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8004888:	687b      	ldr	r3, [r7, #4]
 800488a:	699b      	ldr	r3, [r3, #24]
 800488c:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800488e:	687b      	ldr	r3, [r7, #4]
 8004890:	2200      	movs	r2, #0
 8004892:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8004896:	89ba      	ldrh	r2, [r7, #12]
 8004898:	7bfb      	ldrb	r3, [r7, #15]
 800489a:	4619      	mov	r1, r3
 800489c:	6878      	ldr	r0, [r7, #4]
 800489e:	f7ff f95d 	bl	8003b5c <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 80048a2:	e008      	b.n	80048b6 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 80048a4:	687b      	ldr	r3, [r7, #4]
 80048a6:	681b      	ldr	r3, [r3, #0]
 80048a8:	f06f 0202 	mvn.w	r2, #2
 80048ac:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 80048ae:	687b      	ldr	r3, [r7, #4]
 80048b0:	2200      	movs	r2, #0
 80048b2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 80048b6:	bf00      	nop
 80048b8:	3710      	adds	r7, #16
 80048ba:	46bd      	mov	sp, r7
 80048bc:	bd80      	pop	{r7, pc}
	...

080048c0 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 80048c0:	b580      	push	{r7, lr}
 80048c2:	b084      	sub	sp, #16
 80048c4:	af00      	add	r7, sp, #0
 80048c6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80048c8:	687b      	ldr	r3, [r7, #4]
 80048ca:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80048ce:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	681b      	ldr	r3, [r3, #0]
 80048d4:	685a      	ldr	r2, [r3, #4]
 80048d6:	687b      	ldr	r3, [r7, #4]
 80048d8:	681b      	ldr	r3, [r3, #0]
 80048da:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048de:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 80048e0:	2300      	movs	r3, #0
 80048e2:	60bb      	str	r3, [r7, #8]
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	681b      	ldr	r3, [r3, #0]
 80048e8:	695b      	ldr	r3, [r3, #20]
 80048ea:	60bb      	str	r3, [r7, #8]
 80048ec:	687b      	ldr	r3, [r7, #4]
 80048ee:	681b      	ldr	r3, [r3, #0]
 80048f0:	681a      	ldr	r2, [r3, #0]
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	f042 0201 	orr.w	r2, r2, #1
 80048fa:	601a      	str	r2, [r3, #0]
 80048fc:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80048fe:	687b      	ldr	r3, [r7, #4]
 8004900:	681b      	ldr	r3, [r3, #0]
 8004902:	681a      	ldr	r2, [r3, #0]
 8004904:	687b      	ldr	r3, [r7, #4]
 8004906:	681b      	ldr	r3, [r3, #0]
 8004908:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800490c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800490e:	687b      	ldr	r3, [r7, #4]
 8004910:	681b      	ldr	r3, [r3, #0]
 8004912:	685b      	ldr	r3, [r3, #4]
 8004914:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004918:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800491c:	d172      	bne.n	8004a04 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800491e:	7bfb      	ldrb	r3, [r7, #15]
 8004920:	2b22      	cmp	r3, #34	; 0x22
 8004922:	d002      	beq.n	800492a <I2C_Slave_STOPF+0x6a>
 8004924:	7bfb      	ldrb	r3, [r7, #15]
 8004926:	2b2a      	cmp	r3, #42	; 0x2a
 8004928:	d135      	bne.n	8004996 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800492e:	681b      	ldr	r3, [r3, #0]
 8004930:	685b      	ldr	r3, [r3, #4]
 8004932:	b29a      	uxth	r2, r3
 8004934:	687b      	ldr	r3, [r7, #4]
 8004936:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8004938:	687b      	ldr	r3, [r7, #4]
 800493a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800493c:	b29b      	uxth	r3, r3
 800493e:	2b00      	cmp	r3, #0
 8004940:	d005      	beq.n	800494e <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004946:	f043 0204 	orr.w	r2, r3, #4
 800494a:	687b      	ldr	r3, [r7, #4]
 800494c:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800494e:	687b      	ldr	r3, [r7, #4]
 8004950:	681b      	ldr	r3, [r3, #0]
 8004952:	685a      	ldr	r2, [r3, #4]
 8004954:	687b      	ldr	r3, [r7, #4]
 8004956:	681b      	ldr	r3, [r3, #0]
 8004958:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800495c:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800495e:	687b      	ldr	r3, [r7, #4]
 8004960:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004962:	4618      	mov	r0, r3
 8004964:	f7fe fbb5 	bl	80030d2 <HAL_DMA_GetState>
 8004968:	4603      	mov	r3, r0
 800496a:	2b01      	cmp	r3, #1
 800496c:	d049      	beq.n	8004a02 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800496e:	687b      	ldr	r3, [r7, #4]
 8004970:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004972:	4a69      	ldr	r2, [pc, #420]	; (8004b18 <I2C_Slave_STOPF+0x258>)
 8004974:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004976:	687b      	ldr	r3, [r7, #4]
 8004978:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800497a:	4618      	mov	r0, r3
 800497c:	f7fe fb87 	bl	800308e <HAL_DMA_Abort_IT>
 8004980:	4603      	mov	r3, r0
 8004982:	2b00      	cmp	r3, #0
 8004984:	d03d      	beq.n	8004a02 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004986:	687b      	ldr	r3, [r7, #4]
 8004988:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800498a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800498c:	687a      	ldr	r2, [r7, #4]
 800498e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004990:	4610      	mov	r0, r2
 8004992:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004994:	e035      	b.n	8004a02 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8004996:	687b      	ldr	r3, [r7, #4]
 8004998:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800499a:	681b      	ldr	r3, [r3, #0]
 800499c:	685b      	ldr	r3, [r3, #4]
 800499e:	b29a      	uxth	r2, r3
 80049a0:	687b      	ldr	r3, [r7, #4]
 80049a2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049a8:	b29b      	uxth	r3, r3
 80049aa:	2b00      	cmp	r3, #0
 80049ac:	d005      	beq.n	80049ba <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80049b2:	f043 0204 	orr.w	r2, r3, #4
 80049b6:	687b      	ldr	r3, [r7, #4]
 80049b8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80049ba:	687b      	ldr	r3, [r7, #4]
 80049bc:	681b      	ldr	r3, [r3, #0]
 80049be:	685a      	ldr	r2, [r3, #4]
 80049c0:	687b      	ldr	r3, [r7, #4]
 80049c2:	681b      	ldr	r3, [r3, #0]
 80049c4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80049c8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 80049ca:	687b      	ldr	r3, [r7, #4]
 80049cc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049ce:	4618      	mov	r0, r3
 80049d0:	f7fe fb7f 	bl	80030d2 <HAL_DMA_GetState>
 80049d4:	4603      	mov	r3, r0
 80049d6:	2b01      	cmp	r3, #1
 80049d8:	d014      	beq.n	8004a04 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 80049da:	687b      	ldr	r3, [r7, #4]
 80049dc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049de:	4a4e      	ldr	r2, [pc, #312]	; (8004b18 <I2C_Slave_STOPF+0x258>)
 80049e0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049e6:	4618      	mov	r0, r3
 80049e8:	f7fe fb51 	bl	800308e <HAL_DMA_Abort_IT>
 80049ec:	4603      	mov	r3, r0
 80049ee:	2b00      	cmp	r3, #0
 80049f0:	d008      	beq.n	8004a04 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 80049f2:	687b      	ldr	r3, [r7, #4]
 80049f4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80049f6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80049f8:	687a      	ldr	r2, [r7, #4]
 80049fa:	6b52      	ldr	r2, [r2, #52]	; 0x34
 80049fc:	4610      	mov	r0, r2
 80049fe:	4798      	blx	r3
 8004a00:	e000      	b.n	8004a04 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8004a02:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8004a04:	687b      	ldr	r3, [r7, #4]
 8004a06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a08:	b29b      	uxth	r3, r3
 8004a0a:	2b00      	cmp	r3, #0
 8004a0c:	d03e      	beq.n	8004a8c <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 8004a0e:	687b      	ldr	r3, [r7, #4]
 8004a10:	681b      	ldr	r3, [r3, #0]
 8004a12:	695b      	ldr	r3, [r3, #20]
 8004a14:	f003 0304 	and.w	r3, r3, #4
 8004a18:	2b04      	cmp	r3, #4
 8004a1a:	d112      	bne.n	8004a42 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a1c:	687b      	ldr	r3, [r7, #4]
 8004a1e:	681b      	ldr	r3, [r3, #0]
 8004a20:	691a      	ldr	r2, [r3, #16]
 8004a22:	687b      	ldr	r3, [r7, #4]
 8004a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a26:	b2d2      	uxtb	r2, r2
 8004a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a2a:	687b      	ldr	r3, [r7, #4]
 8004a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a2e:	1c5a      	adds	r2, r3, #1
 8004a30:	687b      	ldr	r3, [r7, #4]
 8004a32:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a34:	687b      	ldr	r3, [r7, #4]
 8004a36:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a38:	b29b      	uxth	r3, r3
 8004a3a:	3b01      	subs	r3, #1
 8004a3c:	b29a      	uxth	r2, r3
 8004a3e:	687b      	ldr	r3, [r7, #4]
 8004a40:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004a42:	687b      	ldr	r3, [r7, #4]
 8004a44:	681b      	ldr	r3, [r3, #0]
 8004a46:	695b      	ldr	r3, [r3, #20]
 8004a48:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004a4c:	2b40      	cmp	r3, #64	; 0x40
 8004a4e:	d112      	bne.n	8004a76 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004a50:	687b      	ldr	r3, [r7, #4]
 8004a52:	681b      	ldr	r3, [r3, #0]
 8004a54:	691a      	ldr	r2, [r3, #16]
 8004a56:	687b      	ldr	r3, [r7, #4]
 8004a58:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a5a:	b2d2      	uxtb	r2, r2
 8004a5c:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004a5e:	687b      	ldr	r3, [r7, #4]
 8004a60:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004a62:	1c5a      	adds	r2, r3, #1
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004a68:	687b      	ldr	r3, [r7, #4]
 8004a6a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a6c:	b29b      	uxth	r3, r3
 8004a6e:	3b01      	subs	r3, #1
 8004a70:	b29a      	uxth	r2, r3
 8004a72:	687b      	ldr	r3, [r7, #4]
 8004a74:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004a7a:	b29b      	uxth	r3, r3
 8004a7c:	2b00      	cmp	r3, #0
 8004a7e:	d005      	beq.n	8004a8c <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8004a80:	687b      	ldr	r3, [r7, #4]
 8004a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a84:	f043 0204 	orr.w	r2, r3, #4
 8004a88:	687b      	ldr	r3, [r7, #4]
 8004a8a:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004a90:	2b00      	cmp	r3, #0
 8004a92:	d003      	beq.n	8004a9c <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8004a94:	6878      	ldr	r0, [r7, #4]
 8004a96:	f000 f8b3 	bl	8004c00 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8004a9a:	e039      	b.n	8004b10 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8004a9c:	7bfb      	ldrb	r3, [r7, #15]
 8004a9e:	2b2a      	cmp	r3, #42	; 0x2a
 8004aa0:	d109      	bne.n	8004ab6 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8004aa2:	687b      	ldr	r3, [r7, #4]
 8004aa4:	2200      	movs	r2, #0
 8004aa6:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004aa8:	687b      	ldr	r3, [r7, #4]
 8004aaa:	2228      	movs	r2, #40	; 0x28
 8004aac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004ab0:	6878      	ldr	r0, [r7, #4]
 8004ab2:	f7ff f849 	bl	8003b48 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8004ab6:	687b      	ldr	r3, [r7, #4]
 8004ab8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004abc:	b2db      	uxtb	r3, r3
 8004abe:	2b28      	cmp	r3, #40	; 0x28
 8004ac0:	d111      	bne.n	8004ae6 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004ac2:	687b      	ldr	r3, [r7, #4]
 8004ac4:	4a15      	ldr	r2, [pc, #84]	; (8004b1c <I2C_Slave_STOPF+0x25c>)
 8004ac6:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8004ac8:	687b      	ldr	r3, [r7, #4]
 8004aca:	2200      	movs	r2, #0
 8004acc:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004ace:	687b      	ldr	r3, [r7, #4]
 8004ad0:	2220      	movs	r2, #32
 8004ad2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004ad6:	687b      	ldr	r3, [r7, #4]
 8004ad8:	2200      	movs	r2, #0
 8004ada:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 8004ade:	6878      	ldr	r0, [r7, #4]
 8004ae0:	f7ff f84a 	bl	8003b78 <HAL_I2C_ListenCpltCallback>
}
 8004ae4:	e014      	b.n	8004b10 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8004aea:	2b22      	cmp	r3, #34	; 0x22
 8004aec:	d002      	beq.n	8004af4 <I2C_Slave_STOPF+0x234>
 8004aee:	7bfb      	ldrb	r3, [r7, #15]
 8004af0:	2b22      	cmp	r3, #34	; 0x22
 8004af2:	d10d      	bne.n	8004b10 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2200      	movs	r2, #0
 8004af8:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	2220      	movs	r2, #32
 8004afe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	2200      	movs	r2, #0
 8004b06:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8004b0a:	6878      	ldr	r0, [r7, #4]
 8004b0c:	f7ff f81c 	bl	8003b48 <HAL_I2C_SlaveRxCpltCallback>
}
 8004b10:	bf00      	nop
 8004b12:	3710      	adds	r7, #16
 8004b14:	46bd      	mov	sp, r7
 8004b16:	bd80      	pop	{r7, pc}
 8004b18:	08004e65 	.word	0x08004e65
 8004b1c:	ffff0000 	.word	0xffff0000

08004b20 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8004b20:	b580      	push	{r7, lr}
 8004b22:	b084      	sub	sp, #16
 8004b24:	af00      	add	r7, sp, #0
 8004b26:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004b28:	687b      	ldr	r3, [r7, #4]
 8004b2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b2e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004b30:	687b      	ldr	r3, [r7, #4]
 8004b32:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004b34:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8004b36:	68bb      	ldr	r3, [r7, #8]
 8004b38:	2b08      	cmp	r3, #8
 8004b3a:	d002      	beq.n	8004b42 <I2C_Slave_AF+0x22>
 8004b3c:	68bb      	ldr	r3, [r7, #8]
 8004b3e:	2b20      	cmp	r3, #32
 8004b40:	d129      	bne.n	8004b96 <I2C_Slave_AF+0x76>
 8004b42:	7bfb      	ldrb	r3, [r7, #15]
 8004b44:	2b28      	cmp	r3, #40	; 0x28
 8004b46:	d126      	bne.n	8004b96 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8004b48:	687b      	ldr	r3, [r7, #4]
 8004b4a:	4a2c      	ldr	r2, [pc, #176]	; (8004bfc <I2C_Slave_AF+0xdc>)
 8004b4c:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b4e:	687b      	ldr	r3, [r7, #4]
 8004b50:	681b      	ldr	r3, [r3, #0]
 8004b52:	685a      	ldr	r2, [r3, #4]
 8004b54:	687b      	ldr	r3, [r7, #4]
 8004b56:	681b      	ldr	r3, [r3, #0]
 8004b58:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b5c:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004b5e:	687b      	ldr	r3, [r7, #4]
 8004b60:	681b      	ldr	r3, [r3, #0]
 8004b62:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004b66:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004b68:	687b      	ldr	r3, [r7, #4]
 8004b6a:	681b      	ldr	r3, [r3, #0]
 8004b6c:	681a      	ldr	r2, [r3, #0]
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004b76:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	2200      	movs	r2, #0
 8004b7c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004b7e:	687b      	ldr	r3, [r7, #4]
 8004b80:	2220      	movs	r2, #32
 8004b82:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	2200      	movs	r2, #0
 8004b8a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004b8e:	6878      	ldr	r0, [r7, #4]
 8004b90:	f7fe fff2 	bl	8003b78 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8004b94:	e02e      	b.n	8004bf4 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8004b96:	7bfb      	ldrb	r3, [r7, #15]
 8004b98:	2b21      	cmp	r3, #33	; 0x21
 8004b9a:	d126      	bne.n	8004bea <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004b9c:	687b      	ldr	r3, [r7, #4]
 8004b9e:	4a17      	ldr	r2, [pc, #92]	; (8004bfc <I2C_Slave_AF+0xdc>)
 8004ba0:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8004ba2:	687b      	ldr	r3, [r7, #4]
 8004ba4:	2221      	movs	r2, #33	; 0x21
 8004ba6:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	2220      	movs	r2, #32
 8004bac:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004bb0:	687b      	ldr	r3, [r7, #4]
 8004bb2:	2200      	movs	r2, #0
 8004bb4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004bc6:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bc8:	687b      	ldr	r3, [r7, #4]
 8004bca:	681b      	ldr	r3, [r3, #0]
 8004bcc:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bd0:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bd2:	687b      	ldr	r3, [r7, #4]
 8004bd4:	681b      	ldr	r3, [r3, #0]
 8004bd6:	681a      	ldr	r2, [r3, #0]
 8004bd8:	687b      	ldr	r3, [r7, #4]
 8004bda:	681b      	ldr	r3, [r3, #0]
 8004bdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004be0:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8004be2:	6878      	ldr	r0, [r7, #4]
 8004be4:	f7fe ffa6 	bl	8003b34 <HAL_I2C_SlaveTxCpltCallback>
}
 8004be8:	e004      	b.n	8004bf4 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8004bf2:	615a      	str	r2, [r3, #20]
}
 8004bf4:	bf00      	nop
 8004bf6:	3710      	adds	r7, #16
 8004bf8:	46bd      	mov	sp, r7
 8004bfa:	bd80      	pop	{r7, pc}
 8004bfc:	ffff0000 	.word	0xffff0000

08004c00 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8004c00:	b580      	push	{r7, lr}
 8004c02:	b084      	sub	sp, #16
 8004c04:	af00      	add	r7, sp, #0
 8004c06:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004c08:	687b      	ldr	r3, [r7, #4]
 8004c0a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004c0e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c16:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8004c18:	7bbb      	ldrb	r3, [r7, #14]
 8004c1a:	2b10      	cmp	r3, #16
 8004c1c:	d002      	beq.n	8004c24 <I2C_ITError+0x24>
 8004c1e:	7bbb      	ldrb	r3, [r7, #14]
 8004c20:	2b40      	cmp	r3, #64	; 0x40
 8004c22:	d10a      	bne.n	8004c3a <I2C_ITError+0x3a>
 8004c24:	7bfb      	ldrb	r3, [r7, #15]
 8004c26:	2b22      	cmp	r3, #34	; 0x22
 8004c28:	d107      	bne.n	8004c3a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8004c2a:	687b      	ldr	r3, [r7, #4]
 8004c2c:	681b      	ldr	r3, [r3, #0]
 8004c2e:	681a      	ldr	r2, [r3, #0]
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	681b      	ldr	r3, [r3, #0]
 8004c34:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c38:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004c3a:	7bfb      	ldrb	r3, [r7, #15]
 8004c3c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004c40:	2b28      	cmp	r3, #40	; 0x28
 8004c42:	d107      	bne.n	8004c54 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 8004c4a:	687b      	ldr	r3, [r7, #4]
 8004c4c:	2228      	movs	r2, #40	; 0x28
 8004c4e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004c52:	e015      	b.n	8004c80 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 8004c54:	687b      	ldr	r3, [r7, #4]
 8004c56:	681b      	ldr	r3, [r3, #0]
 8004c58:	685b      	ldr	r3, [r3, #4]
 8004c5a:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c5e:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c62:	d00a      	beq.n	8004c7a <I2C_ITError+0x7a>
 8004c64:	7bfb      	ldrb	r3, [r7, #15]
 8004c66:	2b60      	cmp	r3, #96	; 0x60
 8004c68:	d007      	beq.n	8004c7a <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	2220      	movs	r2, #32
 8004c6e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c72:	687b      	ldr	r3, [r7, #4]
 8004c74:	2200      	movs	r2, #0
 8004c76:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 8004c7a:	687b      	ldr	r3, [r7, #4]
 8004c7c:	2200      	movs	r2, #0
 8004c7e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	685b      	ldr	r3, [r3, #4]
 8004c86:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004c8a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004c8e:	d162      	bne.n	8004d56 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 8004c90:	687b      	ldr	r3, [r7, #4]
 8004c92:	681b      	ldr	r3, [r3, #0]
 8004c94:	685a      	ldr	r2, [r3, #4]
 8004c96:	687b      	ldr	r3, [r7, #4]
 8004c98:	681b      	ldr	r3, [r3, #0]
 8004c9a:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8004c9e:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8004ca0:	687b      	ldr	r3, [r7, #4]
 8004ca2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ca4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004ca8:	b2db      	uxtb	r3, r3
 8004caa:	2b01      	cmp	r3, #1
 8004cac:	d020      	beq.n	8004cf0 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cb2:	4a6a      	ldr	r2, [pc, #424]	; (8004e5c <I2C_ITError+0x25c>)
 8004cb4:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004cba:	4618      	mov	r0, r3
 8004cbc:	f7fe f9e7 	bl	800308e <HAL_DMA_Abort_IT>
 8004cc0:	4603      	mov	r3, r0
 8004cc2:	2b00      	cmp	r3, #0
 8004cc4:	f000 8089 	beq.w	8004dda <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	681a      	ldr	r2, [r3, #0]
 8004cce:	687b      	ldr	r3, [r7, #4]
 8004cd0:	681b      	ldr	r3, [r3, #0]
 8004cd2:	f022 0201 	bic.w	r2, r2, #1
 8004cd6:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004cd8:	687b      	ldr	r3, [r7, #4]
 8004cda:	2220      	movs	r2, #32
 8004cdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8004ce0:	687b      	ldr	r3, [r7, #4]
 8004ce2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ce4:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ce6:	687a      	ldr	r2, [r7, #4]
 8004ce8:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8004cea:	4610      	mov	r0, r2
 8004cec:	4798      	blx	r3
 8004cee:	e074      	b.n	8004dda <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8004cf0:	687b      	ldr	r3, [r7, #4]
 8004cf2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cf4:	4a59      	ldr	r2, [pc, #356]	; (8004e5c <I2C_ITError+0x25c>)
 8004cf6:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8004cf8:	687b      	ldr	r3, [r7, #4]
 8004cfa:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004cfc:	4618      	mov	r0, r3
 8004cfe:	f7fe f9c6 	bl	800308e <HAL_DMA_Abort_IT>
 8004d02:	4603      	mov	r3, r0
 8004d04:	2b00      	cmp	r3, #0
 8004d06:	d068      	beq.n	8004dda <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d08:	687b      	ldr	r3, [r7, #4]
 8004d0a:	681b      	ldr	r3, [r3, #0]
 8004d0c:	695b      	ldr	r3, [r3, #20]
 8004d0e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d12:	2b40      	cmp	r3, #64	; 0x40
 8004d14:	d10b      	bne.n	8004d2e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d16:	687b      	ldr	r3, [r7, #4]
 8004d18:	681b      	ldr	r3, [r3, #0]
 8004d1a:	691a      	ldr	r2, [r3, #16]
 8004d1c:	687b      	ldr	r3, [r7, #4]
 8004d1e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d20:	b2d2      	uxtb	r2, r2
 8004d22:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d28:	1c5a      	adds	r2, r3, #1
 8004d2a:	687b      	ldr	r3, [r7, #4]
 8004d2c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8004d2e:	687b      	ldr	r3, [r7, #4]
 8004d30:	681b      	ldr	r3, [r3, #0]
 8004d32:	681a      	ldr	r2, [r3, #0]
 8004d34:	687b      	ldr	r3, [r7, #4]
 8004d36:	681b      	ldr	r3, [r3, #0]
 8004d38:	f022 0201 	bic.w	r2, r2, #1
 8004d3c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8004d3e:	687b      	ldr	r3, [r7, #4]
 8004d40:	2220      	movs	r2, #32
 8004d42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8004d46:	687b      	ldr	r3, [r7, #4]
 8004d48:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004d4a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004d4c:	687a      	ldr	r2, [r7, #4]
 8004d4e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8004d50:	4610      	mov	r0, r2
 8004d52:	4798      	blx	r3
 8004d54:	e041      	b.n	8004dda <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004d56:	687b      	ldr	r3, [r7, #4]
 8004d58:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d5c:	b2db      	uxtb	r3, r3
 8004d5e:	2b60      	cmp	r3, #96	; 0x60
 8004d60:	d125      	bne.n	8004dae <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	2220      	movs	r2, #32
 8004d66:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	2200      	movs	r2, #0
 8004d6e:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004d70:	687b      	ldr	r3, [r7, #4]
 8004d72:	681b      	ldr	r3, [r3, #0]
 8004d74:	695b      	ldr	r3, [r3, #20]
 8004d76:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004d7a:	2b40      	cmp	r3, #64	; 0x40
 8004d7c:	d10b      	bne.n	8004d96 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d7e:	687b      	ldr	r3, [r7, #4]
 8004d80:	681b      	ldr	r3, [r3, #0]
 8004d82:	691a      	ldr	r2, [r3, #16]
 8004d84:	687b      	ldr	r3, [r7, #4]
 8004d86:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d88:	b2d2      	uxtb	r2, r2
 8004d8a:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004d8c:	687b      	ldr	r3, [r7, #4]
 8004d8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d90:	1c5a      	adds	r2, r3, #1
 8004d92:	687b      	ldr	r3, [r7, #4]
 8004d94:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8004d96:	687b      	ldr	r3, [r7, #4]
 8004d98:	681b      	ldr	r3, [r3, #0]
 8004d9a:	681a      	ldr	r2, [r3, #0]
 8004d9c:	687b      	ldr	r3, [r7, #4]
 8004d9e:	681b      	ldr	r3, [r3, #0]
 8004da0:	f022 0201 	bic.w	r2, r2, #1
 8004da4:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004da6:	6878      	ldr	r0, [r7, #4]
 8004da8:	f7fe ff0e 	bl	8003bc8 <HAL_I2C_AbortCpltCallback>
 8004dac:	e015      	b.n	8004dda <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8004dae:	687b      	ldr	r3, [r7, #4]
 8004db0:	681b      	ldr	r3, [r3, #0]
 8004db2:	695b      	ldr	r3, [r3, #20]
 8004db4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8004db8:	2b40      	cmp	r3, #64	; 0x40
 8004dba:	d10b      	bne.n	8004dd4 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dbc:	687b      	ldr	r3, [r7, #4]
 8004dbe:	681b      	ldr	r3, [r3, #0]
 8004dc0:	691a      	ldr	r2, [r3, #16]
 8004dc2:	687b      	ldr	r3, [r7, #4]
 8004dc4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dc6:	b2d2      	uxtb	r2, r2
 8004dc8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004dca:	687b      	ldr	r3, [r7, #4]
 8004dcc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dce:	1c5a      	adds	r2, r3, #1
 8004dd0:	687b      	ldr	r3, [r7, #4]
 8004dd2:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f7fe feed 	bl	8003bb4 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8004dda:	687b      	ldr	r3, [r7, #4]
 8004ddc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004dde:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004de0:	68bb      	ldr	r3, [r7, #8]
 8004de2:	f003 0301 	and.w	r3, r3, #1
 8004de6:	2b00      	cmp	r3, #0
 8004de8:	d10e      	bne.n	8004e08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dea:	68bb      	ldr	r3, [r7, #8]
 8004dec:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8004df0:	2b00      	cmp	r3, #0
 8004df2:	d109      	bne.n	8004e08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004df4:	68bb      	ldr	r3, [r7, #8]
 8004df6:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8004dfa:	2b00      	cmp	r3, #0
 8004dfc:	d104      	bne.n	8004e08 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8004dfe:	68bb      	ldr	r3, [r7, #8]
 8004e00:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8004e04:	2b00      	cmp	r3, #0
 8004e06:	d007      	beq.n	8004e18 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	681b      	ldr	r3, [r3, #0]
 8004e0c:	685a      	ldr	r2, [r3, #4]
 8004e0e:	687b      	ldr	r3, [r7, #4]
 8004e10:	681b      	ldr	r3, [r3, #0]
 8004e12:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004e16:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8004e18:	687b      	ldr	r3, [r7, #4]
 8004e1a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e1e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004e24:	f003 0304 	and.w	r3, r3, #4
 8004e28:	2b04      	cmp	r3, #4
 8004e2a:	d113      	bne.n	8004e54 <I2C_ITError+0x254>
 8004e2c:	7bfb      	ldrb	r3, [r7, #15]
 8004e2e:	2b28      	cmp	r3, #40	; 0x28
 8004e30:	d110      	bne.n	8004e54 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	4a0a      	ldr	r2, [pc, #40]	; (8004e60 <I2C_ITError+0x260>)
 8004e36:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8004e38:	687b      	ldr	r3, [r7, #4]
 8004e3a:	2200      	movs	r2, #0
 8004e3c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2220      	movs	r2, #32
 8004e42:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8004e4e:	6878      	ldr	r0, [r7, #4]
 8004e50:	f7fe fe92 	bl	8003b78 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004e54:	bf00      	nop
 8004e56:	3710      	adds	r7, #16
 8004e58:	46bd      	mov	sp, r7
 8004e5a:	bd80      	pop	{r7, pc}
 8004e5c:	08004e65 	.word	0x08004e65
 8004e60:	ffff0000 	.word	0xffff0000

08004e64 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8004e64:	b580      	push	{r7, lr}
 8004e66:	b086      	sub	sp, #24
 8004e68:	af00      	add	r7, sp, #0
 8004e6a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004e6c:	2300      	movs	r3, #0
 8004e6e:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004e74:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004e76:	697b      	ldr	r3, [r7, #20]
 8004e78:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004e7c:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8004e7e:	4b4b      	ldr	r3, [pc, #300]	; (8004fac <I2C_DMAAbort+0x148>)
 8004e80:	681b      	ldr	r3, [r3, #0]
 8004e82:	08db      	lsrs	r3, r3, #3
 8004e84:	4a4a      	ldr	r2, [pc, #296]	; (8004fb0 <I2C_DMAAbort+0x14c>)
 8004e86:	fba2 2303 	umull	r2, r3, r2, r3
 8004e8a:	0a1a      	lsrs	r2, r3, #8
 8004e8c:	4613      	mov	r3, r2
 8004e8e:	009b      	lsls	r3, r3, #2
 8004e90:	4413      	add	r3, r2
 8004e92:	00da      	lsls	r2, r3, #3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8004e98:	68fb      	ldr	r3, [r7, #12]
 8004e9a:	2b00      	cmp	r3, #0
 8004e9c:	d106      	bne.n	8004eac <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8004e9e:	697b      	ldr	r3, [r7, #20]
 8004ea0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004ea2:	f043 0220 	orr.w	r2, r3, #32
 8004ea6:	697b      	ldr	r3, [r7, #20]
 8004ea8:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8004eaa:	e00a      	b.n	8004ec2 <I2C_DMAAbort+0x5e>
    }
    count--;
 8004eac:	68fb      	ldr	r3, [r7, #12]
 8004eae:	3b01      	subs	r3, #1
 8004eb0:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004eb2:	697b      	ldr	r3, [r7, #20]
 8004eb4:	681b      	ldr	r3, [r3, #0]
 8004eb6:	681b      	ldr	r3, [r3, #0]
 8004eb8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ebc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8004ec0:	d0ea      	beq.n	8004e98 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8004ec2:	697b      	ldr	r3, [r7, #20]
 8004ec4:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ec6:	2b00      	cmp	r3, #0
 8004ec8:	d003      	beq.n	8004ed2 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8004eca:	697b      	ldr	r3, [r7, #20]
 8004ecc:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004ece:	2200      	movs	r2, #0
 8004ed0:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8004ed2:	697b      	ldr	r3, [r7, #20]
 8004ed4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ed6:	2b00      	cmp	r3, #0
 8004ed8:	d003      	beq.n	8004ee2 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8004eda:	697b      	ldr	r3, [r7, #20]
 8004edc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004ede:	2200      	movs	r2, #0
 8004ee0:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004ee2:	697b      	ldr	r3, [r7, #20]
 8004ee4:	681b      	ldr	r3, [r3, #0]
 8004ee6:	681a      	ldr	r2, [r3, #0]
 8004ee8:	697b      	ldr	r3, [r7, #20]
 8004eea:	681b      	ldr	r3, [r3, #0]
 8004eec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004ef0:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8004ef2:	697b      	ldr	r3, [r7, #20]
 8004ef4:	2200      	movs	r2, #0
 8004ef6:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8004ef8:	697b      	ldr	r3, [r7, #20]
 8004efa:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004efc:	2b00      	cmp	r3, #0
 8004efe:	d003      	beq.n	8004f08 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8004f00:	697b      	ldr	r3, [r7, #20]
 8004f02:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f04:	2200      	movs	r2, #0
 8004f06:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8004f08:	697b      	ldr	r3, [r7, #20]
 8004f0a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f0c:	2b00      	cmp	r3, #0
 8004f0e:	d003      	beq.n	8004f18 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8004f10:	697b      	ldr	r3, [r7, #20]
 8004f12:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f14:	2200      	movs	r2, #0
 8004f16:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8004f18:	697b      	ldr	r3, [r7, #20]
 8004f1a:	681b      	ldr	r3, [r3, #0]
 8004f1c:	681a      	ldr	r2, [r3, #0]
 8004f1e:	697b      	ldr	r3, [r7, #20]
 8004f20:	681b      	ldr	r3, [r3, #0]
 8004f22:	f022 0201 	bic.w	r2, r2, #1
 8004f26:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8004f28:	697b      	ldr	r3, [r7, #20]
 8004f2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004f2e:	b2db      	uxtb	r3, r3
 8004f30:	2b60      	cmp	r3, #96	; 0x60
 8004f32:	d10e      	bne.n	8004f52 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8004f34:	697b      	ldr	r3, [r7, #20]
 8004f36:	2220      	movs	r2, #32
 8004f38:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8004f3c:	697b      	ldr	r3, [r7, #20]
 8004f3e:	2200      	movs	r2, #0
 8004f40:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8004f44:	697b      	ldr	r3, [r7, #20]
 8004f46:	2200      	movs	r2, #0
 8004f48:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8004f4a:	6978      	ldr	r0, [r7, #20]
 8004f4c:	f7fe fe3c 	bl	8003bc8 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8004f50:	e027      	b.n	8004fa2 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8004f52:	7cfb      	ldrb	r3, [r7, #19]
 8004f54:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8004f58:	2b28      	cmp	r3, #40	; 0x28
 8004f5a:	d117      	bne.n	8004f8c <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8004f5c:	697b      	ldr	r3, [r7, #20]
 8004f5e:	681b      	ldr	r3, [r3, #0]
 8004f60:	681a      	ldr	r2, [r3, #0]
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	681b      	ldr	r3, [r3, #0]
 8004f66:	f042 0201 	orr.w	r2, r2, #1
 8004f6a:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004f6c:	697b      	ldr	r3, [r7, #20]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	681a      	ldr	r2, [r3, #0]
 8004f72:	697b      	ldr	r3, [r7, #20]
 8004f74:	681b      	ldr	r3, [r3, #0]
 8004f76:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004f7a:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004f7c:	697b      	ldr	r3, [r7, #20]
 8004f7e:	2200      	movs	r2, #0
 8004f80:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8004f82:	697b      	ldr	r3, [r7, #20]
 8004f84:	2228      	movs	r2, #40	; 0x28
 8004f86:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8004f8a:	e007      	b.n	8004f9c <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8004f8c:	697b      	ldr	r3, [r7, #20]
 8004f8e:	2220      	movs	r2, #32
 8004f90:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004f94:	697b      	ldr	r3, [r7, #20]
 8004f96:	2200      	movs	r2, #0
 8004f98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8004f9c:	6978      	ldr	r0, [r7, #20]
 8004f9e:	f7fe fe09 	bl	8003bb4 <HAL_I2C_ErrorCallback>
}
 8004fa2:	bf00      	nop
 8004fa4:	3718      	adds	r7, #24
 8004fa6:	46bd      	mov	sp, r7
 8004fa8:	bd80      	pop	{r7, pc}
 8004faa:	bf00      	nop
 8004fac:	20000030 	.word	0x20000030
 8004fb0:	14f8b589 	.word	0x14f8b589

08004fb4 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8004fb4:	b480      	push	{r7}
 8004fb6:	b085      	sub	sp, #20
 8004fb8:	af00      	add	r7, sp, #0
 8004fba:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8004fbc:	2300      	movs	r3, #0
 8004fbe:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8004fc0:	4b13      	ldr	r3, [pc, #76]	; (8005010 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8004fc2:	681b      	ldr	r3, [r3, #0]
 8004fc4:	08db      	lsrs	r3, r3, #3
 8004fc6:	4a13      	ldr	r2, [pc, #76]	; (8005014 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8004fc8:	fba2 2303 	umull	r2, r3, r2, r3
 8004fcc:	0a1a      	lsrs	r2, r3, #8
 8004fce:	4613      	mov	r3, r2
 8004fd0:	009b      	lsls	r3, r3, #2
 8004fd2:	4413      	add	r3, r2
 8004fd4:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8004fd6:	68fb      	ldr	r3, [r7, #12]
 8004fd8:	3b01      	subs	r3, #1
 8004fda:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8004fdc:	68fb      	ldr	r3, [r7, #12]
 8004fde:	2b00      	cmp	r3, #0
 8004fe0:	d107      	bne.n	8004ff2 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004fe6:	f043 0220 	orr.w	r2, r3, #32
 8004fea:	687b      	ldr	r3, [r7, #4]
 8004fec:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8004fee:	2301      	movs	r3, #1
 8004ff0:	e008      	b.n	8005004 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8004ff2:	687b      	ldr	r3, [r7, #4]
 8004ff4:	681b      	ldr	r3, [r3, #0]
 8004ff6:	681b      	ldr	r3, [r3, #0]
 8004ff8:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8004ffc:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005000:	d0e9      	beq.n	8004fd6 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005002:	2300      	movs	r3, #0
}
 8005004:	4618      	mov	r0, r3
 8005006:	3714      	adds	r7, #20
 8005008:	46bd      	mov	sp, r7
 800500a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800500e:	4770      	bx	lr
 8005010:	20000030 	.word	0x20000030
 8005014:	14f8b589 	.word	0x14f8b589

08005018 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005018:	b480      	push	{r7}
 800501a:	b083      	sub	sp, #12
 800501c:	af00      	add	r7, sp, #0
 800501e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005020:	687b      	ldr	r3, [r7, #4]
 8005022:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005024:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005028:	d103      	bne.n	8005032 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 800502a:	687b      	ldr	r3, [r7, #4]
 800502c:	2201      	movs	r2, #1
 800502e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005030:	e007      	b.n	8005042 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005036:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 800503a:	d102      	bne.n	8005042 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 800503c:	687b      	ldr	r3, [r7, #4]
 800503e:	2208      	movs	r2, #8
 8005040:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005042:	bf00      	nop
 8005044:	370c      	adds	r7, #12
 8005046:	46bd      	mov	sp, r7
 8005048:	f85d 7b04 	ldr.w	r7, [sp], #4
 800504c:	4770      	bx	lr
	...

08005050 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005050:	b580      	push	{r7, lr}
 8005052:	b086      	sub	sp, #24
 8005054:	af00      	add	r7, sp, #0
 8005056:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005058:	687b      	ldr	r3, [r7, #4]
 800505a:	2b00      	cmp	r3, #0
 800505c:	d101      	bne.n	8005062 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 800505e:	2301      	movs	r3, #1
 8005060:	e264      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	f003 0301 	and.w	r3, r3, #1
 800506a:	2b00      	cmp	r3, #0
 800506c:	d075      	beq.n	800515a <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800506e:	4ba3      	ldr	r3, [pc, #652]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005070:	689b      	ldr	r3, [r3, #8]
 8005072:	f003 030c 	and.w	r3, r3, #12
 8005076:	2b04      	cmp	r3, #4
 8005078:	d00c      	beq.n	8005094 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800507a:	4ba0      	ldr	r3, [pc, #640]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 800507c:	689b      	ldr	r3, [r3, #8]
 800507e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005082:	2b08      	cmp	r3, #8
 8005084:	d112      	bne.n	80050ac <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005086:	4b9d      	ldr	r3, [pc, #628]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005088:	685b      	ldr	r3, [r3, #4]
 800508a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800508e:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005092:	d10b      	bne.n	80050ac <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005094:	4b99      	ldr	r3, [pc, #612]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005096:	681b      	ldr	r3, [r3, #0]
 8005098:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800509c:	2b00      	cmp	r3, #0
 800509e:	d05b      	beq.n	8005158 <HAL_RCC_OscConfig+0x108>
 80050a0:	687b      	ldr	r3, [r7, #4]
 80050a2:	685b      	ldr	r3, [r3, #4]
 80050a4:	2b00      	cmp	r3, #0
 80050a6:	d157      	bne.n	8005158 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80050a8:	2301      	movs	r3, #1
 80050aa:	e23f      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80050ac:	687b      	ldr	r3, [r7, #4]
 80050ae:	685b      	ldr	r3, [r3, #4]
 80050b0:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80050b4:	d106      	bne.n	80050c4 <HAL_RCC_OscConfig+0x74>
 80050b6:	4b91      	ldr	r3, [pc, #580]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	4a90      	ldr	r2, [pc, #576]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050bc:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050c0:	6013      	str	r3, [r2, #0]
 80050c2:	e01d      	b.n	8005100 <HAL_RCC_OscConfig+0xb0>
 80050c4:	687b      	ldr	r3, [r7, #4]
 80050c6:	685b      	ldr	r3, [r3, #4]
 80050c8:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80050cc:	d10c      	bne.n	80050e8 <HAL_RCC_OscConfig+0x98>
 80050ce:	4b8b      	ldr	r3, [pc, #556]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050d0:	681b      	ldr	r3, [r3, #0]
 80050d2:	4a8a      	ldr	r2, [pc, #552]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050d4:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80050d8:	6013      	str	r3, [r2, #0]
 80050da:	4b88      	ldr	r3, [pc, #544]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050dc:	681b      	ldr	r3, [r3, #0]
 80050de:	4a87      	ldr	r2, [pc, #540]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050e0:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80050e4:	6013      	str	r3, [r2, #0]
 80050e6:	e00b      	b.n	8005100 <HAL_RCC_OscConfig+0xb0>
 80050e8:	4b84      	ldr	r3, [pc, #528]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050ea:	681b      	ldr	r3, [r3, #0]
 80050ec:	4a83      	ldr	r2, [pc, #524]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050ee:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80050f2:	6013      	str	r3, [r2, #0]
 80050f4:	4b81      	ldr	r3, [pc, #516]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050f6:	681b      	ldr	r3, [r3, #0]
 80050f8:	4a80      	ldr	r2, [pc, #512]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80050fa:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 80050fe:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	685b      	ldr	r3, [r3, #4]
 8005104:	2b00      	cmp	r3, #0
 8005106:	d013      	beq.n	8005130 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005108:	f7fd fe72 	bl	8002df0 <HAL_GetTick>
 800510c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800510e:	e008      	b.n	8005122 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005110:	f7fd fe6e 	bl	8002df0 <HAL_GetTick>
 8005114:	4602      	mov	r2, r0
 8005116:	693b      	ldr	r3, [r7, #16]
 8005118:	1ad3      	subs	r3, r2, r3
 800511a:	2b64      	cmp	r3, #100	; 0x64
 800511c:	d901      	bls.n	8005122 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800511e:	2303      	movs	r3, #3
 8005120:	e204      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005122:	4b76      	ldr	r3, [pc, #472]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800512a:	2b00      	cmp	r3, #0
 800512c:	d0f0      	beq.n	8005110 <HAL_RCC_OscConfig+0xc0>
 800512e:	e014      	b.n	800515a <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005130:	f7fd fe5e 	bl	8002df0 <HAL_GetTick>
 8005134:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005136:	e008      	b.n	800514a <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005138:	f7fd fe5a 	bl	8002df0 <HAL_GetTick>
 800513c:	4602      	mov	r2, r0
 800513e:	693b      	ldr	r3, [r7, #16]
 8005140:	1ad3      	subs	r3, r2, r3
 8005142:	2b64      	cmp	r3, #100	; 0x64
 8005144:	d901      	bls.n	800514a <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005146:	2303      	movs	r3, #3
 8005148:	e1f0      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800514a:	4b6c      	ldr	r3, [pc, #432]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 800514c:	681b      	ldr	r3, [r3, #0]
 800514e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005152:	2b00      	cmp	r3, #0
 8005154:	d1f0      	bne.n	8005138 <HAL_RCC_OscConfig+0xe8>
 8005156:	e000      	b.n	800515a <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005158:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 800515a:	687b      	ldr	r3, [r7, #4]
 800515c:	681b      	ldr	r3, [r3, #0]
 800515e:	f003 0302 	and.w	r3, r3, #2
 8005162:	2b00      	cmp	r3, #0
 8005164:	d063      	beq.n	800522e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005166:	4b65      	ldr	r3, [pc, #404]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005168:	689b      	ldr	r3, [r3, #8]
 800516a:	f003 030c 	and.w	r3, r3, #12
 800516e:	2b00      	cmp	r3, #0
 8005170:	d00b      	beq.n	800518a <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005172:	4b62      	ldr	r3, [pc, #392]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005174:	689b      	ldr	r3, [r3, #8]
 8005176:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800517a:	2b08      	cmp	r3, #8
 800517c:	d11c      	bne.n	80051b8 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800517e:	4b5f      	ldr	r3, [pc, #380]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005180:	685b      	ldr	r3, [r3, #4]
 8005182:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005186:	2b00      	cmp	r3, #0
 8005188:	d116      	bne.n	80051b8 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 800518a:	4b5c      	ldr	r3, [pc, #368]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 800518c:	681b      	ldr	r3, [r3, #0]
 800518e:	f003 0302 	and.w	r3, r3, #2
 8005192:	2b00      	cmp	r3, #0
 8005194:	d005      	beq.n	80051a2 <HAL_RCC_OscConfig+0x152>
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	68db      	ldr	r3, [r3, #12]
 800519a:	2b01      	cmp	r3, #1
 800519c:	d001      	beq.n	80051a2 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800519e:	2301      	movs	r3, #1
 80051a0:	e1c4      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051a2:	4b56      	ldr	r3, [pc, #344]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80051a4:	681b      	ldr	r3, [r3, #0]
 80051a6:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	691b      	ldr	r3, [r3, #16]
 80051ae:	00db      	lsls	r3, r3, #3
 80051b0:	4952      	ldr	r1, [pc, #328]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80051b2:	4313      	orrs	r3, r2
 80051b4:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80051b6:	e03a      	b.n	800522e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80051b8:	687b      	ldr	r3, [r7, #4]
 80051ba:	68db      	ldr	r3, [r3, #12]
 80051bc:	2b00      	cmp	r3, #0
 80051be:	d020      	beq.n	8005202 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80051c0:	4b4f      	ldr	r3, [pc, #316]	; (8005300 <HAL_RCC_OscConfig+0x2b0>)
 80051c2:	2201      	movs	r2, #1
 80051c4:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80051c6:	f7fd fe13 	bl	8002df0 <HAL_GetTick>
 80051ca:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051cc:	e008      	b.n	80051e0 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80051ce:	f7fd fe0f 	bl	8002df0 <HAL_GetTick>
 80051d2:	4602      	mov	r2, r0
 80051d4:	693b      	ldr	r3, [r7, #16]
 80051d6:	1ad3      	subs	r3, r2, r3
 80051d8:	2b02      	cmp	r3, #2
 80051da:	d901      	bls.n	80051e0 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80051dc:	2303      	movs	r3, #3
 80051de:	e1a5      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80051e0:	4b46      	ldr	r3, [pc, #280]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80051e2:	681b      	ldr	r3, [r3, #0]
 80051e4:	f003 0302 	and.w	r3, r3, #2
 80051e8:	2b00      	cmp	r3, #0
 80051ea:	d0f0      	beq.n	80051ce <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80051ec:	4b43      	ldr	r3, [pc, #268]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80051ee:	681b      	ldr	r3, [r3, #0]
 80051f0:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80051f4:	687b      	ldr	r3, [r7, #4]
 80051f6:	691b      	ldr	r3, [r3, #16]
 80051f8:	00db      	lsls	r3, r3, #3
 80051fa:	4940      	ldr	r1, [pc, #256]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80051fc:	4313      	orrs	r3, r2
 80051fe:	600b      	str	r3, [r1, #0]
 8005200:	e015      	b.n	800522e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005202:	4b3f      	ldr	r3, [pc, #252]	; (8005300 <HAL_RCC_OscConfig+0x2b0>)
 8005204:	2200      	movs	r2, #0
 8005206:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005208:	f7fd fdf2 	bl	8002df0 <HAL_GetTick>
 800520c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800520e:	e008      	b.n	8005222 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005210:	f7fd fdee 	bl	8002df0 <HAL_GetTick>
 8005214:	4602      	mov	r2, r0
 8005216:	693b      	ldr	r3, [r7, #16]
 8005218:	1ad3      	subs	r3, r2, r3
 800521a:	2b02      	cmp	r3, #2
 800521c:	d901      	bls.n	8005222 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800521e:	2303      	movs	r3, #3
 8005220:	e184      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005222:	4b36      	ldr	r3, [pc, #216]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005224:	681b      	ldr	r3, [r3, #0]
 8005226:	f003 0302 	and.w	r3, r3, #2
 800522a:	2b00      	cmp	r3, #0
 800522c:	d1f0      	bne.n	8005210 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800522e:	687b      	ldr	r3, [r7, #4]
 8005230:	681b      	ldr	r3, [r3, #0]
 8005232:	f003 0308 	and.w	r3, r3, #8
 8005236:	2b00      	cmp	r3, #0
 8005238:	d030      	beq.n	800529c <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 800523a:	687b      	ldr	r3, [r7, #4]
 800523c:	695b      	ldr	r3, [r3, #20]
 800523e:	2b00      	cmp	r3, #0
 8005240:	d016      	beq.n	8005270 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005242:	4b30      	ldr	r3, [pc, #192]	; (8005304 <HAL_RCC_OscConfig+0x2b4>)
 8005244:	2201      	movs	r2, #1
 8005246:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005248:	f7fd fdd2 	bl	8002df0 <HAL_GetTick>
 800524c:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800524e:	e008      	b.n	8005262 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005250:	f7fd fdce 	bl	8002df0 <HAL_GetTick>
 8005254:	4602      	mov	r2, r0
 8005256:	693b      	ldr	r3, [r7, #16]
 8005258:	1ad3      	subs	r3, r2, r3
 800525a:	2b02      	cmp	r3, #2
 800525c:	d901      	bls.n	8005262 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 800525e:	2303      	movs	r3, #3
 8005260:	e164      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005262:	4b26      	ldr	r3, [pc, #152]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005264:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005266:	f003 0302 	and.w	r3, r3, #2
 800526a:	2b00      	cmp	r3, #0
 800526c:	d0f0      	beq.n	8005250 <HAL_RCC_OscConfig+0x200>
 800526e:	e015      	b.n	800529c <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005270:	4b24      	ldr	r3, [pc, #144]	; (8005304 <HAL_RCC_OscConfig+0x2b4>)
 8005272:	2200      	movs	r2, #0
 8005274:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005276:	f7fd fdbb 	bl	8002df0 <HAL_GetTick>
 800527a:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 800527c:	e008      	b.n	8005290 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 800527e:	f7fd fdb7 	bl	8002df0 <HAL_GetTick>
 8005282:	4602      	mov	r2, r0
 8005284:	693b      	ldr	r3, [r7, #16]
 8005286:	1ad3      	subs	r3, r2, r3
 8005288:	2b02      	cmp	r3, #2
 800528a:	d901      	bls.n	8005290 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 800528c:	2303      	movs	r3, #3
 800528e:	e14d      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005290:	4b1a      	ldr	r3, [pc, #104]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 8005292:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005294:	f003 0302 	and.w	r3, r3, #2
 8005298:	2b00      	cmp	r3, #0
 800529a:	d1f0      	bne.n	800527e <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 800529c:	687b      	ldr	r3, [r7, #4]
 800529e:	681b      	ldr	r3, [r3, #0]
 80052a0:	f003 0304 	and.w	r3, r3, #4
 80052a4:	2b00      	cmp	r3, #0
 80052a6:	f000 80a0 	beq.w	80053ea <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80052aa:	2300      	movs	r3, #0
 80052ac:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80052ae:	4b13      	ldr	r3, [pc, #76]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80052b0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052b2:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052b6:	2b00      	cmp	r3, #0
 80052b8:	d10f      	bne.n	80052da <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80052ba:	2300      	movs	r3, #0
 80052bc:	60bb      	str	r3, [r7, #8]
 80052be:	4b0f      	ldr	r3, [pc, #60]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80052c0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052c2:	4a0e      	ldr	r2, [pc, #56]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80052c4:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80052c8:	6413      	str	r3, [r2, #64]	; 0x40
 80052ca:	4b0c      	ldr	r3, [pc, #48]	; (80052fc <HAL_RCC_OscConfig+0x2ac>)
 80052cc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80052ce:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80052d2:	60bb      	str	r3, [r7, #8]
 80052d4:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80052d6:	2301      	movs	r3, #1
 80052d8:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052da:	4b0b      	ldr	r3, [pc, #44]	; (8005308 <HAL_RCC_OscConfig+0x2b8>)
 80052dc:	681b      	ldr	r3, [r3, #0]
 80052de:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80052e2:	2b00      	cmp	r3, #0
 80052e4:	d121      	bne.n	800532a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80052e6:	4b08      	ldr	r3, [pc, #32]	; (8005308 <HAL_RCC_OscConfig+0x2b8>)
 80052e8:	681b      	ldr	r3, [r3, #0]
 80052ea:	4a07      	ldr	r2, [pc, #28]	; (8005308 <HAL_RCC_OscConfig+0x2b8>)
 80052ec:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80052f0:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80052f2:	f7fd fd7d 	bl	8002df0 <HAL_GetTick>
 80052f6:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80052f8:	e011      	b.n	800531e <HAL_RCC_OscConfig+0x2ce>
 80052fa:	bf00      	nop
 80052fc:	40023800 	.word	0x40023800
 8005300:	42470000 	.word	0x42470000
 8005304:	42470e80 	.word	0x42470e80
 8005308:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 800530c:	f7fd fd70 	bl	8002df0 <HAL_GetTick>
 8005310:	4602      	mov	r2, r0
 8005312:	693b      	ldr	r3, [r7, #16]
 8005314:	1ad3      	subs	r3, r2, r3
 8005316:	2b02      	cmp	r3, #2
 8005318:	d901      	bls.n	800531e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 800531a:	2303      	movs	r3, #3
 800531c:	e106      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800531e:	4b85      	ldr	r3, [pc, #532]	; (8005534 <HAL_RCC_OscConfig+0x4e4>)
 8005320:	681b      	ldr	r3, [r3, #0]
 8005322:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005326:	2b00      	cmp	r3, #0
 8005328:	d0f0      	beq.n	800530c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	689b      	ldr	r3, [r3, #8]
 800532e:	2b01      	cmp	r3, #1
 8005330:	d106      	bne.n	8005340 <HAL_RCC_OscConfig+0x2f0>
 8005332:	4b81      	ldr	r3, [pc, #516]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005334:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005336:	4a80      	ldr	r2, [pc, #512]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005338:	f043 0301 	orr.w	r3, r3, #1
 800533c:	6713      	str	r3, [r2, #112]	; 0x70
 800533e:	e01c      	b.n	800537a <HAL_RCC_OscConfig+0x32a>
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	689b      	ldr	r3, [r3, #8]
 8005344:	2b05      	cmp	r3, #5
 8005346:	d10c      	bne.n	8005362 <HAL_RCC_OscConfig+0x312>
 8005348:	4b7b      	ldr	r3, [pc, #492]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800534a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800534c:	4a7a      	ldr	r2, [pc, #488]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800534e:	f043 0304 	orr.w	r3, r3, #4
 8005352:	6713      	str	r3, [r2, #112]	; 0x70
 8005354:	4b78      	ldr	r3, [pc, #480]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005356:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005358:	4a77      	ldr	r2, [pc, #476]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800535a:	f043 0301 	orr.w	r3, r3, #1
 800535e:	6713      	str	r3, [r2, #112]	; 0x70
 8005360:	e00b      	b.n	800537a <HAL_RCC_OscConfig+0x32a>
 8005362:	4b75      	ldr	r3, [pc, #468]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005364:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005366:	4a74      	ldr	r2, [pc, #464]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005368:	f023 0301 	bic.w	r3, r3, #1
 800536c:	6713      	str	r3, [r2, #112]	; 0x70
 800536e:	4b72      	ldr	r3, [pc, #456]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005370:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005372:	4a71      	ldr	r2, [pc, #452]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005374:	f023 0304 	bic.w	r3, r3, #4
 8005378:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 800537a:	687b      	ldr	r3, [r7, #4]
 800537c:	689b      	ldr	r3, [r3, #8]
 800537e:	2b00      	cmp	r3, #0
 8005380:	d015      	beq.n	80053ae <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005382:	f7fd fd35 	bl	8002df0 <HAL_GetTick>
 8005386:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005388:	e00a      	b.n	80053a0 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 800538a:	f7fd fd31 	bl	8002df0 <HAL_GetTick>
 800538e:	4602      	mov	r2, r0
 8005390:	693b      	ldr	r3, [r7, #16]
 8005392:	1ad3      	subs	r3, r2, r3
 8005394:	f241 3288 	movw	r2, #5000	; 0x1388
 8005398:	4293      	cmp	r3, r2
 800539a:	d901      	bls.n	80053a0 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 800539c:	2303      	movs	r3, #3
 800539e:	e0c5      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80053a0:	4b65      	ldr	r3, [pc, #404]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053a2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053a4:	f003 0302 	and.w	r3, r3, #2
 80053a8:	2b00      	cmp	r3, #0
 80053aa:	d0ee      	beq.n	800538a <HAL_RCC_OscConfig+0x33a>
 80053ac:	e014      	b.n	80053d8 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80053ae:	f7fd fd1f 	bl	8002df0 <HAL_GetTick>
 80053b2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053b4:	e00a      	b.n	80053cc <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80053b6:	f7fd fd1b 	bl	8002df0 <HAL_GetTick>
 80053ba:	4602      	mov	r2, r0
 80053bc:	693b      	ldr	r3, [r7, #16]
 80053be:	1ad3      	subs	r3, r2, r3
 80053c0:	f241 3288 	movw	r2, #5000	; 0x1388
 80053c4:	4293      	cmp	r3, r2
 80053c6:	d901      	bls.n	80053cc <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80053c8:	2303      	movs	r3, #3
 80053ca:	e0af      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80053cc:	4b5a      	ldr	r3, [pc, #360]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053ce:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80053d0:	f003 0302 	and.w	r3, r3, #2
 80053d4:	2b00      	cmp	r3, #0
 80053d6:	d1ee      	bne.n	80053b6 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80053d8:	7dfb      	ldrb	r3, [r7, #23]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d105      	bne.n	80053ea <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80053de:	4b56      	ldr	r3, [pc, #344]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80053e2:	4a55      	ldr	r2, [pc, #340]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053e4:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80053e8:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80053ea:	687b      	ldr	r3, [r7, #4]
 80053ec:	699b      	ldr	r3, [r3, #24]
 80053ee:	2b00      	cmp	r3, #0
 80053f0:	f000 809b 	beq.w	800552a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80053f4:	4b50      	ldr	r3, [pc, #320]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80053f6:	689b      	ldr	r3, [r3, #8]
 80053f8:	f003 030c 	and.w	r3, r3, #12
 80053fc:	2b08      	cmp	r3, #8
 80053fe:	d05c      	beq.n	80054ba <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8005400:	687b      	ldr	r3, [r7, #4]
 8005402:	699b      	ldr	r3, [r3, #24]
 8005404:	2b02      	cmp	r3, #2
 8005406:	d141      	bne.n	800548c <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8005408:	4b4c      	ldr	r3, [pc, #304]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 800540a:	2200      	movs	r2, #0
 800540c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800540e:	f7fd fcef 	bl	8002df0 <HAL_GetTick>
 8005412:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005414:	e008      	b.n	8005428 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8005416:	f7fd fceb 	bl	8002df0 <HAL_GetTick>
 800541a:	4602      	mov	r2, r0
 800541c:	693b      	ldr	r3, [r7, #16]
 800541e:	1ad3      	subs	r3, r2, r3
 8005420:	2b02      	cmp	r3, #2
 8005422:	d901      	bls.n	8005428 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8005424:	2303      	movs	r3, #3
 8005426:	e081      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005428:	4b43      	ldr	r3, [pc, #268]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800542a:	681b      	ldr	r3, [r3, #0]
 800542c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005430:	2b00      	cmp	r3, #0
 8005432:	d1f0      	bne.n	8005416 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8005434:	687b      	ldr	r3, [r7, #4]
 8005436:	69da      	ldr	r2, [r3, #28]
 8005438:	687b      	ldr	r3, [r7, #4]
 800543a:	6a1b      	ldr	r3, [r3, #32]
 800543c:	431a      	orrs	r2, r3
 800543e:	687b      	ldr	r3, [r7, #4]
 8005440:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005442:	019b      	lsls	r3, r3, #6
 8005444:	431a      	orrs	r2, r3
 8005446:	687b      	ldr	r3, [r7, #4]
 8005448:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800544a:	085b      	lsrs	r3, r3, #1
 800544c:	3b01      	subs	r3, #1
 800544e:	041b      	lsls	r3, r3, #16
 8005450:	431a      	orrs	r2, r3
 8005452:	687b      	ldr	r3, [r7, #4]
 8005454:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005456:	061b      	lsls	r3, r3, #24
 8005458:	4937      	ldr	r1, [pc, #220]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 800545a:	4313      	orrs	r3, r2
 800545c:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 800545e:	4b37      	ldr	r3, [pc, #220]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 8005460:	2201      	movs	r2, #1
 8005462:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005464:	f7fd fcc4 	bl	8002df0 <HAL_GetTick>
 8005468:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800546a:	e008      	b.n	800547e <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800546c:	f7fd fcc0 	bl	8002df0 <HAL_GetTick>
 8005470:	4602      	mov	r2, r0
 8005472:	693b      	ldr	r3, [r7, #16]
 8005474:	1ad3      	subs	r3, r2, r3
 8005476:	2b02      	cmp	r3, #2
 8005478:	d901      	bls.n	800547e <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 800547a:	2303      	movs	r3, #3
 800547c:	e056      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800547e:	4b2e      	ldr	r3, [pc, #184]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 8005480:	681b      	ldr	r3, [r3, #0]
 8005482:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005486:	2b00      	cmp	r3, #0
 8005488:	d0f0      	beq.n	800546c <HAL_RCC_OscConfig+0x41c>
 800548a:	e04e      	b.n	800552a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 800548c:	4b2b      	ldr	r3, [pc, #172]	; (800553c <HAL_RCC_OscConfig+0x4ec>)
 800548e:	2200      	movs	r2, #0
 8005490:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005492:	f7fd fcad 	bl	8002df0 <HAL_GetTick>
 8005496:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8005498:	e008      	b.n	80054ac <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800549a:	f7fd fca9 	bl	8002df0 <HAL_GetTick>
 800549e:	4602      	mov	r2, r0
 80054a0:	693b      	ldr	r3, [r7, #16]
 80054a2:	1ad3      	subs	r3, r2, r3
 80054a4:	2b02      	cmp	r3, #2
 80054a6:	d901      	bls.n	80054ac <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80054a8:	2303      	movs	r3, #3
 80054aa:	e03f      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80054ac:	4b22      	ldr	r3, [pc, #136]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054ae:	681b      	ldr	r3, [r3, #0]
 80054b0:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80054b4:	2b00      	cmp	r3, #0
 80054b6:	d1f0      	bne.n	800549a <HAL_RCC_OscConfig+0x44a>
 80054b8:	e037      	b.n	800552a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	699b      	ldr	r3, [r3, #24]
 80054be:	2b01      	cmp	r3, #1
 80054c0:	d101      	bne.n	80054c6 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80054c2:	2301      	movs	r3, #1
 80054c4:	e032      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80054c6:	4b1c      	ldr	r3, [pc, #112]	; (8005538 <HAL_RCC_OscConfig+0x4e8>)
 80054c8:	685b      	ldr	r3, [r3, #4]
 80054ca:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054cc:	687b      	ldr	r3, [r7, #4]
 80054ce:	699b      	ldr	r3, [r3, #24]
 80054d0:	2b01      	cmp	r3, #1
 80054d2:	d028      	beq.n	8005526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054d4:	68fb      	ldr	r3, [r7, #12]
 80054d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80054da:	687b      	ldr	r3, [r7, #4]
 80054dc:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 80054de:	429a      	cmp	r2, r3
 80054e0:	d121      	bne.n	8005526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054e2:	68fb      	ldr	r3, [r7, #12]
 80054e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80054ec:	429a      	cmp	r2, r3
 80054ee:	d11a      	bne.n	8005526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 80054f0:	68fa      	ldr	r2, [r7, #12]
 80054f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80054f6:	4013      	ands	r3, r2
 80054f8:	687a      	ldr	r2, [r7, #4]
 80054fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
 80054fc:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 80054fe:	4293      	cmp	r3, r2
 8005500:	d111      	bne.n	8005526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005502:	68fb      	ldr	r3, [r7, #12]
 8005504:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8005508:	687b      	ldr	r3, [r7, #4]
 800550a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800550c:	085b      	lsrs	r3, r3, #1
 800550e:	3b01      	subs	r3, #1
 8005510:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8005512:	429a      	cmp	r2, r3
 8005514:	d107      	bne.n	8005526 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8005516:	68fb      	ldr	r3, [r7, #12]
 8005518:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800551c:	687b      	ldr	r3, [r7, #4]
 800551e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005520:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8005522:	429a      	cmp	r2, r3
 8005524:	d001      	beq.n	800552a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8005526:	2301      	movs	r3, #1
 8005528:	e000      	b.n	800552c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800552a:	2300      	movs	r3, #0
}
 800552c:	4618      	mov	r0, r3
 800552e:	3718      	adds	r7, #24
 8005530:	46bd      	mov	sp, r7
 8005532:	bd80      	pop	{r7, pc}
 8005534:	40007000 	.word	0x40007000
 8005538:	40023800 	.word	0x40023800
 800553c:	42470060 	.word	0x42470060

08005540 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8005540:	b580      	push	{r7, lr}
 8005542:	b084      	sub	sp, #16
 8005544:	af00      	add	r7, sp, #0
 8005546:	6078      	str	r0, [r7, #4]
 8005548:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2b00      	cmp	r3, #0
 800554e:	d101      	bne.n	8005554 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8005550:	2301      	movs	r3, #1
 8005552:	e0cc      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8005554:	4b68      	ldr	r3, [pc, #416]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005556:	681b      	ldr	r3, [r3, #0]
 8005558:	f003 0307 	and.w	r3, r3, #7
 800555c:	683a      	ldr	r2, [r7, #0]
 800555e:	429a      	cmp	r2, r3
 8005560:	d90c      	bls.n	800557c <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8005562:	4b65      	ldr	r3, [pc, #404]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005564:	683a      	ldr	r2, [r7, #0]
 8005566:	b2d2      	uxtb	r2, r2
 8005568:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800556a:	4b63      	ldr	r3, [pc, #396]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 800556c:	681b      	ldr	r3, [r3, #0]
 800556e:	f003 0307 	and.w	r3, r3, #7
 8005572:	683a      	ldr	r2, [r7, #0]
 8005574:	429a      	cmp	r2, r3
 8005576:	d001      	beq.n	800557c <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8005578:	2301      	movs	r3, #1
 800557a:	e0b8      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 800557c:	687b      	ldr	r3, [r7, #4]
 800557e:	681b      	ldr	r3, [r3, #0]
 8005580:	f003 0302 	and.w	r3, r3, #2
 8005584:	2b00      	cmp	r3, #0
 8005586:	d020      	beq.n	80055ca <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005588:	687b      	ldr	r3, [r7, #4]
 800558a:	681b      	ldr	r3, [r3, #0]
 800558c:	f003 0304 	and.w	r3, r3, #4
 8005590:	2b00      	cmp	r3, #0
 8005592:	d005      	beq.n	80055a0 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8005594:	4b59      	ldr	r3, [pc, #356]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005596:	689b      	ldr	r3, [r3, #8]
 8005598:	4a58      	ldr	r2, [pc, #352]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 800559a:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 800559e:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	681b      	ldr	r3, [r3, #0]
 80055a4:	f003 0308 	and.w	r3, r3, #8
 80055a8:	2b00      	cmp	r3, #0
 80055aa:	d005      	beq.n	80055b8 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80055ac:	4b53      	ldr	r3, [pc, #332]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055ae:	689b      	ldr	r3, [r3, #8]
 80055b0:	4a52      	ldr	r2, [pc, #328]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055b2:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80055b6:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80055b8:	4b50      	ldr	r3, [pc, #320]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055ba:	689b      	ldr	r3, [r3, #8]
 80055bc:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80055c0:	687b      	ldr	r3, [r7, #4]
 80055c2:	689b      	ldr	r3, [r3, #8]
 80055c4:	494d      	ldr	r1, [pc, #308]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055c6:	4313      	orrs	r3, r2
 80055c8:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f003 0301 	and.w	r3, r3, #1
 80055d2:	2b00      	cmp	r3, #0
 80055d4:	d044      	beq.n	8005660 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	685b      	ldr	r3, [r3, #4]
 80055da:	2b01      	cmp	r3, #1
 80055dc:	d107      	bne.n	80055ee <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80055de:	4b47      	ldr	r3, [pc, #284]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80055e0:	681b      	ldr	r3, [r3, #0]
 80055e2:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d119      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80055ea:	2301      	movs	r3, #1
 80055ec:	e07f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055ee:	687b      	ldr	r3, [r7, #4]
 80055f0:	685b      	ldr	r3, [r3, #4]
 80055f2:	2b02      	cmp	r3, #2
 80055f4:	d003      	beq.n	80055fe <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80055fa:	2b03      	cmp	r3, #3
 80055fc:	d107      	bne.n	800560e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80055fe:	4b3f      	ldr	r3, [pc, #252]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005600:	681b      	ldr	r3, [r3, #0]
 8005602:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8005606:	2b00      	cmp	r3, #0
 8005608:	d109      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800560a:	2301      	movs	r3, #1
 800560c:	e06f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800560e:	4b3b      	ldr	r3, [pc, #236]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005610:	681b      	ldr	r3, [r3, #0]
 8005612:	f003 0302 	and.w	r3, r3, #2
 8005616:	2b00      	cmp	r3, #0
 8005618:	d101      	bne.n	800561e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800561a:	2301      	movs	r3, #1
 800561c:	e067      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800561e:	4b37      	ldr	r3, [pc, #220]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005620:	689b      	ldr	r3, [r3, #8]
 8005622:	f023 0203 	bic.w	r2, r3, #3
 8005626:	687b      	ldr	r3, [r7, #4]
 8005628:	685b      	ldr	r3, [r3, #4]
 800562a:	4934      	ldr	r1, [pc, #208]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 800562c:	4313      	orrs	r3, r2
 800562e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8005630:	f7fd fbde 	bl	8002df0 <HAL_GetTick>
 8005634:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8005636:	e00a      	b.n	800564e <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8005638:	f7fd fbda 	bl	8002df0 <HAL_GetTick>
 800563c:	4602      	mov	r2, r0
 800563e:	68fb      	ldr	r3, [r7, #12]
 8005640:	1ad3      	subs	r3, r2, r3
 8005642:	f241 3288 	movw	r2, #5000	; 0x1388
 8005646:	4293      	cmp	r3, r2
 8005648:	d901      	bls.n	800564e <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 800564a:	2303      	movs	r3, #3
 800564c:	e04f      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800564e:	4b2b      	ldr	r3, [pc, #172]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005650:	689b      	ldr	r3, [r3, #8]
 8005652:	f003 020c 	and.w	r2, r3, #12
 8005656:	687b      	ldr	r3, [r7, #4]
 8005658:	685b      	ldr	r3, [r3, #4]
 800565a:	009b      	lsls	r3, r3, #2
 800565c:	429a      	cmp	r2, r3
 800565e:	d1eb      	bne.n	8005638 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8005660:	4b25      	ldr	r3, [pc, #148]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005662:	681b      	ldr	r3, [r3, #0]
 8005664:	f003 0307 	and.w	r3, r3, #7
 8005668:	683a      	ldr	r2, [r7, #0]
 800566a:	429a      	cmp	r2, r3
 800566c:	d20c      	bcs.n	8005688 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800566e:	4b22      	ldr	r3, [pc, #136]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005670:	683a      	ldr	r2, [r7, #0]
 8005672:	b2d2      	uxtb	r2, r2
 8005674:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8005676:	4b20      	ldr	r3, [pc, #128]	; (80056f8 <HAL_RCC_ClockConfig+0x1b8>)
 8005678:	681b      	ldr	r3, [r3, #0]
 800567a:	f003 0307 	and.w	r3, r3, #7
 800567e:	683a      	ldr	r2, [r7, #0]
 8005680:	429a      	cmp	r2, r3
 8005682:	d001      	beq.n	8005688 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8005684:	2301      	movs	r3, #1
 8005686:	e032      	b.n	80056ee <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8005688:	687b      	ldr	r3, [r7, #4]
 800568a:	681b      	ldr	r3, [r3, #0]
 800568c:	f003 0304 	and.w	r3, r3, #4
 8005690:	2b00      	cmp	r3, #0
 8005692:	d008      	beq.n	80056a6 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8005694:	4b19      	ldr	r3, [pc, #100]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 8005696:	689b      	ldr	r3, [r3, #8]
 8005698:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 800569c:	687b      	ldr	r3, [r7, #4]
 800569e:	68db      	ldr	r3, [r3, #12]
 80056a0:	4916      	ldr	r1, [pc, #88]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056a2:	4313      	orrs	r3, r2
 80056a4:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 80056a6:	687b      	ldr	r3, [r7, #4]
 80056a8:	681b      	ldr	r3, [r3, #0]
 80056aa:	f003 0308 	and.w	r3, r3, #8
 80056ae:	2b00      	cmp	r3, #0
 80056b0:	d009      	beq.n	80056c6 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80056b2:	4b12      	ldr	r3, [pc, #72]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056b4:	689b      	ldr	r3, [r3, #8]
 80056b6:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	691b      	ldr	r3, [r3, #16]
 80056be:	00db      	lsls	r3, r3, #3
 80056c0:	490e      	ldr	r1, [pc, #56]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056c2:	4313      	orrs	r3, r2
 80056c4:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80056c6:	f000 f821 	bl	800570c <HAL_RCC_GetSysClockFreq>
 80056ca:	4602      	mov	r2, r0
 80056cc:	4b0b      	ldr	r3, [pc, #44]	; (80056fc <HAL_RCC_ClockConfig+0x1bc>)
 80056ce:	689b      	ldr	r3, [r3, #8]
 80056d0:	091b      	lsrs	r3, r3, #4
 80056d2:	f003 030f 	and.w	r3, r3, #15
 80056d6:	490a      	ldr	r1, [pc, #40]	; (8005700 <HAL_RCC_ClockConfig+0x1c0>)
 80056d8:	5ccb      	ldrb	r3, [r1, r3]
 80056da:	fa22 f303 	lsr.w	r3, r2, r3
 80056de:	4a09      	ldr	r2, [pc, #36]	; (8005704 <HAL_RCC_ClockConfig+0x1c4>)
 80056e0:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80056e2:	4b09      	ldr	r3, [pc, #36]	; (8005708 <HAL_RCC_ClockConfig+0x1c8>)
 80056e4:	681b      	ldr	r3, [r3, #0]
 80056e6:	4618      	mov	r0, r3
 80056e8:	f7fd fb3e 	bl	8002d68 <HAL_InitTick>

  return HAL_OK;
 80056ec:	2300      	movs	r3, #0
}
 80056ee:	4618      	mov	r0, r3
 80056f0:	3710      	adds	r7, #16
 80056f2:	46bd      	mov	sp, r7
 80056f4:	bd80      	pop	{r7, pc}
 80056f6:	bf00      	nop
 80056f8:	40023c00 	.word	0x40023c00
 80056fc:	40023800 	.word	0x40023800
 8005700:	08007fe0 	.word	0x08007fe0
 8005704:	20000030 	.word	0x20000030
 8005708:	20000034 	.word	0x20000034

0800570c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800570c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8005710:	b084      	sub	sp, #16
 8005712:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8005714:	2300      	movs	r3, #0
 8005716:	607b      	str	r3, [r7, #4]
 8005718:	2300      	movs	r3, #0
 800571a:	60fb      	str	r3, [r7, #12]
 800571c:	2300      	movs	r3, #0
 800571e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8005720:	2300      	movs	r3, #0
 8005722:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8005724:	4b67      	ldr	r3, [pc, #412]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005726:	689b      	ldr	r3, [r3, #8]
 8005728:	f003 030c 	and.w	r3, r3, #12
 800572c:	2b08      	cmp	r3, #8
 800572e:	d00d      	beq.n	800574c <HAL_RCC_GetSysClockFreq+0x40>
 8005730:	2b08      	cmp	r3, #8
 8005732:	f200 80bd 	bhi.w	80058b0 <HAL_RCC_GetSysClockFreq+0x1a4>
 8005736:	2b00      	cmp	r3, #0
 8005738:	d002      	beq.n	8005740 <HAL_RCC_GetSysClockFreq+0x34>
 800573a:	2b04      	cmp	r3, #4
 800573c:	d003      	beq.n	8005746 <HAL_RCC_GetSysClockFreq+0x3a>
 800573e:	e0b7      	b.n	80058b0 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8005740:	4b61      	ldr	r3, [pc, #388]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8005742:	60bb      	str	r3, [r7, #8]
       break;
 8005744:	e0b7      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8005746:	4b61      	ldr	r3, [pc, #388]	; (80058cc <HAL_RCC_GetSysClockFreq+0x1c0>)
 8005748:	60bb      	str	r3, [r7, #8]
      break;
 800574a:	e0b4      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 800574c:	4b5d      	ldr	r3, [pc, #372]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 800574e:	685b      	ldr	r3, [r3, #4]
 8005750:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8005754:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8005756:	4b5b      	ldr	r3, [pc, #364]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005758:	685b      	ldr	r3, [r3, #4]
 800575a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800575e:	2b00      	cmp	r3, #0
 8005760:	d04d      	beq.n	80057fe <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8005762:	4b58      	ldr	r3, [pc, #352]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005764:	685b      	ldr	r3, [r3, #4]
 8005766:	099b      	lsrs	r3, r3, #6
 8005768:	461a      	mov	r2, r3
 800576a:	f04f 0300 	mov.w	r3, #0
 800576e:	f240 10ff 	movw	r0, #511	; 0x1ff
 8005772:	f04f 0100 	mov.w	r1, #0
 8005776:	ea02 0800 	and.w	r8, r2, r0
 800577a:	ea03 0901 	and.w	r9, r3, r1
 800577e:	4640      	mov	r0, r8
 8005780:	4649      	mov	r1, r9
 8005782:	f04f 0200 	mov.w	r2, #0
 8005786:	f04f 0300 	mov.w	r3, #0
 800578a:	014b      	lsls	r3, r1, #5
 800578c:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8005790:	0142      	lsls	r2, r0, #5
 8005792:	4610      	mov	r0, r2
 8005794:	4619      	mov	r1, r3
 8005796:	ebb0 0008 	subs.w	r0, r0, r8
 800579a:	eb61 0109 	sbc.w	r1, r1, r9
 800579e:	f04f 0200 	mov.w	r2, #0
 80057a2:	f04f 0300 	mov.w	r3, #0
 80057a6:	018b      	lsls	r3, r1, #6
 80057a8:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80057ac:	0182      	lsls	r2, r0, #6
 80057ae:	1a12      	subs	r2, r2, r0
 80057b0:	eb63 0301 	sbc.w	r3, r3, r1
 80057b4:	f04f 0000 	mov.w	r0, #0
 80057b8:	f04f 0100 	mov.w	r1, #0
 80057bc:	00d9      	lsls	r1, r3, #3
 80057be:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80057c2:	00d0      	lsls	r0, r2, #3
 80057c4:	4602      	mov	r2, r0
 80057c6:	460b      	mov	r3, r1
 80057c8:	eb12 0208 	adds.w	r2, r2, r8
 80057cc:	eb43 0309 	adc.w	r3, r3, r9
 80057d0:	f04f 0000 	mov.w	r0, #0
 80057d4:	f04f 0100 	mov.w	r1, #0
 80057d8:	0259      	lsls	r1, r3, #9
 80057da:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80057de:	0250      	lsls	r0, r2, #9
 80057e0:	4602      	mov	r2, r0
 80057e2:	460b      	mov	r3, r1
 80057e4:	4610      	mov	r0, r2
 80057e6:	4619      	mov	r1, r3
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	461a      	mov	r2, r3
 80057ec:	f04f 0300 	mov.w	r3, #0
 80057f0:	f7fb fabc 	bl	8000d6c <__aeabi_uldivmod>
 80057f4:	4602      	mov	r2, r0
 80057f6:	460b      	mov	r3, r1
 80057f8:	4613      	mov	r3, r2
 80057fa:	60fb      	str	r3, [r7, #12]
 80057fc:	e04a      	b.n	8005894 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80057fe:	4b31      	ldr	r3, [pc, #196]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005800:	685b      	ldr	r3, [r3, #4]
 8005802:	099b      	lsrs	r3, r3, #6
 8005804:	461a      	mov	r2, r3
 8005806:	f04f 0300 	mov.w	r3, #0
 800580a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800580e:	f04f 0100 	mov.w	r1, #0
 8005812:	ea02 0400 	and.w	r4, r2, r0
 8005816:	ea03 0501 	and.w	r5, r3, r1
 800581a:	4620      	mov	r0, r4
 800581c:	4629      	mov	r1, r5
 800581e:	f04f 0200 	mov.w	r2, #0
 8005822:	f04f 0300 	mov.w	r3, #0
 8005826:	014b      	lsls	r3, r1, #5
 8005828:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800582c:	0142      	lsls	r2, r0, #5
 800582e:	4610      	mov	r0, r2
 8005830:	4619      	mov	r1, r3
 8005832:	1b00      	subs	r0, r0, r4
 8005834:	eb61 0105 	sbc.w	r1, r1, r5
 8005838:	f04f 0200 	mov.w	r2, #0
 800583c:	f04f 0300 	mov.w	r3, #0
 8005840:	018b      	lsls	r3, r1, #6
 8005842:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8005846:	0182      	lsls	r2, r0, #6
 8005848:	1a12      	subs	r2, r2, r0
 800584a:	eb63 0301 	sbc.w	r3, r3, r1
 800584e:	f04f 0000 	mov.w	r0, #0
 8005852:	f04f 0100 	mov.w	r1, #0
 8005856:	00d9      	lsls	r1, r3, #3
 8005858:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 800585c:	00d0      	lsls	r0, r2, #3
 800585e:	4602      	mov	r2, r0
 8005860:	460b      	mov	r3, r1
 8005862:	1912      	adds	r2, r2, r4
 8005864:	eb45 0303 	adc.w	r3, r5, r3
 8005868:	f04f 0000 	mov.w	r0, #0
 800586c:	f04f 0100 	mov.w	r1, #0
 8005870:	0299      	lsls	r1, r3, #10
 8005872:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8005876:	0290      	lsls	r0, r2, #10
 8005878:	4602      	mov	r2, r0
 800587a:	460b      	mov	r3, r1
 800587c:	4610      	mov	r0, r2
 800587e:	4619      	mov	r1, r3
 8005880:	687b      	ldr	r3, [r7, #4]
 8005882:	461a      	mov	r2, r3
 8005884:	f04f 0300 	mov.w	r3, #0
 8005888:	f7fb fa70 	bl	8000d6c <__aeabi_uldivmod>
 800588c:	4602      	mov	r2, r0
 800588e:	460b      	mov	r3, r1
 8005890:	4613      	mov	r3, r2
 8005892:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8005894:	4b0b      	ldr	r3, [pc, #44]	; (80058c4 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8005896:	685b      	ldr	r3, [r3, #4]
 8005898:	0c1b      	lsrs	r3, r3, #16
 800589a:	f003 0303 	and.w	r3, r3, #3
 800589e:	3301      	adds	r3, #1
 80058a0:	005b      	lsls	r3, r3, #1
 80058a2:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 80058a4:	68fa      	ldr	r2, [r7, #12]
 80058a6:	683b      	ldr	r3, [r7, #0]
 80058a8:	fbb2 f3f3 	udiv	r3, r2, r3
 80058ac:	60bb      	str	r3, [r7, #8]
      break;
 80058ae:	e002      	b.n	80058b6 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80058b0:	4b05      	ldr	r3, [pc, #20]	; (80058c8 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80058b2:	60bb      	str	r3, [r7, #8]
      break;
 80058b4:	bf00      	nop
    }
  }
  return sysclockfreq;
 80058b6:	68bb      	ldr	r3, [r7, #8]
}
 80058b8:	4618      	mov	r0, r3
 80058ba:	3710      	adds	r7, #16
 80058bc:	46bd      	mov	sp, r7
 80058be:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80058c2:	bf00      	nop
 80058c4:	40023800 	.word	0x40023800
 80058c8:	00f42400 	.word	0x00f42400
 80058cc:	007a1200 	.word	0x007a1200

080058d0 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80058d0:	b480      	push	{r7}
 80058d2:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80058d4:	4b03      	ldr	r3, [pc, #12]	; (80058e4 <HAL_RCC_GetHCLKFreq+0x14>)
 80058d6:	681b      	ldr	r3, [r3, #0]
}
 80058d8:	4618      	mov	r0, r3
 80058da:	46bd      	mov	sp, r7
 80058dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80058e0:	4770      	bx	lr
 80058e2:	bf00      	nop
 80058e4:	20000030 	.word	0x20000030

080058e8 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80058e8:	b580      	push	{r7, lr}
 80058ea:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80058ec:	f7ff fff0 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 80058f0:	4602      	mov	r2, r0
 80058f2:	4b05      	ldr	r3, [pc, #20]	; (8005908 <HAL_RCC_GetPCLK1Freq+0x20>)
 80058f4:	689b      	ldr	r3, [r3, #8]
 80058f6:	0a9b      	lsrs	r3, r3, #10
 80058f8:	f003 0307 	and.w	r3, r3, #7
 80058fc:	4903      	ldr	r1, [pc, #12]	; (800590c <HAL_RCC_GetPCLK1Freq+0x24>)
 80058fe:	5ccb      	ldrb	r3, [r1, r3]
 8005900:	fa22 f303 	lsr.w	r3, r2, r3
}
 8005904:	4618      	mov	r0, r3
 8005906:	bd80      	pop	{r7, pc}
 8005908:	40023800 	.word	0x40023800
 800590c:	08007ff0 	.word	0x08007ff0

08005910 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8005910:	b580      	push	{r7, lr}
 8005912:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8005914:	f7ff ffdc 	bl	80058d0 <HAL_RCC_GetHCLKFreq>
 8005918:	4602      	mov	r2, r0
 800591a:	4b05      	ldr	r3, [pc, #20]	; (8005930 <HAL_RCC_GetPCLK2Freq+0x20>)
 800591c:	689b      	ldr	r3, [r3, #8]
 800591e:	0b5b      	lsrs	r3, r3, #13
 8005920:	f003 0307 	and.w	r3, r3, #7
 8005924:	4903      	ldr	r1, [pc, #12]	; (8005934 <HAL_RCC_GetPCLK2Freq+0x24>)
 8005926:	5ccb      	ldrb	r3, [r1, r3]
 8005928:	fa22 f303 	lsr.w	r3, r2, r3
}
 800592c:	4618      	mov	r0, r3
 800592e:	bd80      	pop	{r7, pc}
 8005930:	40023800 	.word	0x40023800
 8005934:	08007ff0 	.word	0x08007ff0

08005938 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8005938:	b580      	push	{r7, lr}
 800593a:	b082      	sub	sp, #8
 800593c:	af00      	add	r7, sp, #0
 800593e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	2b00      	cmp	r3, #0
 8005944:	d101      	bne.n	800594a <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8005946:	2301      	movs	r3, #1
 8005948:	e041      	b.n	80059ce <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 800594a:	687b      	ldr	r3, [r7, #4]
 800594c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005950:	b2db      	uxtb	r3, r3
 8005952:	2b00      	cmp	r3, #0
 8005954:	d106      	bne.n	8005964 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005956:	687b      	ldr	r3, [r7, #4]
 8005958:	2200      	movs	r2, #0
 800595a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 800595e:	6878      	ldr	r0, [r7, #4]
 8005960:	f7fd f84e 	bl	8002a00 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005964:	687b      	ldr	r3, [r7, #4]
 8005966:	2202      	movs	r2, #2
 8005968:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800596c:	687b      	ldr	r3, [r7, #4]
 800596e:	681a      	ldr	r2, [r3, #0]
 8005970:	687b      	ldr	r3, [r7, #4]
 8005972:	3304      	adds	r3, #4
 8005974:	4619      	mov	r1, r3
 8005976:	4610      	mov	r0, r2
 8005978:	f000 fdda 	bl	8006530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	2201      	movs	r2, #1
 8005980:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	2201      	movs	r2, #1
 8005988:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 800598c:	687b      	ldr	r3, [r7, #4]
 800598e:	2201      	movs	r2, #1
 8005990:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	2201      	movs	r2, #1
 8005998:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 800599c:	687b      	ldr	r3, [r7, #4]
 800599e:	2201      	movs	r2, #1
 80059a0:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80059a4:	687b      	ldr	r3, [r7, #4]
 80059a6:	2201      	movs	r2, #1
 80059a8:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 80059ac:	687b      	ldr	r3, [r7, #4]
 80059ae:	2201      	movs	r2, #1
 80059b0:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 80059b4:	687b      	ldr	r3, [r7, #4]
 80059b6:	2201      	movs	r2, #1
 80059b8:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 80059bc:	687b      	ldr	r3, [r7, #4]
 80059be:	2201      	movs	r2, #1
 80059c0:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	2201      	movs	r2, #1
 80059c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 80059cc:	2300      	movs	r3, #0
}
 80059ce:	4618      	mov	r0, r3
 80059d0:	3708      	adds	r7, #8
 80059d2:	46bd      	mov	sp, r7
 80059d4:	bd80      	pop	{r7, pc}
	...

080059d8 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 80059d8:	b480      	push	{r7}
 80059da:	b085      	sub	sp, #20
 80059dc:	af00      	add	r7, sp, #0
 80059de:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80059e0:	687b      	ldr	r3, [r7, #4]
 80059e2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059e6:	b2db      	uxtb	r3, r3
 80059e8:	2b01      	cmp	r3, #1
 80059ea:	d001      	beq.n	80059f0 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 80059ec:	2301      	movs	r3, #1
 80059ee:	e03c      	b.n	8005a6a <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80059f0:	687b      	ldr	r3, [r7, #4]
 80059f2:	2202      	movs	r2, #2
 80059f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80059f8:	687b      	ldr	r3, [r7, #4]
 80059fa:	681b      	ldr	r3, [r3, #0]
 80059fc:	4a1e      	ldr	r2, [pc, #120]	; (8005a78 <HAL_TIM_Base_Start+0xa0>)
 80059fe:	4293      	cmp	r3, r2
 8005a00:	d018      	beq.n	8005a34 <HAL_TIM_Base_Start+0x5c>
 8005a02:	687b      	ldr	r3, [r7, #4]
 8005a04:	681b      	ldr	r3, [r3, #0]
 8005a06:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005a0a:	d013      	beq.n	8005a34 <HAL_TIM_Base_Start+0x5c>
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	681b      	ldr	r3, [r3, #0]
 8005a10:	4a1a      	ldr	r2, [pc, #104]	; (8005a7c <HAL_TIM_Base_Start+0xa4>)
 8005a12:	4293      	cmp	r3, r2
 8005a14:	d00e      	beq.n	8005a34 <HAL_TIM_Base_Start+0x5c>
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	681b      	ldr	r3, [r3, #0]
 8005a1a:	4a19      	ldr	r2, [pc, #100]	; (8005a80 <HAL_TIM_Base_Start+0xa8>)
 8005a1c:	4293      	cmp	r3, r2
 8005a1e:	d009      	beq.n	8005a34 <HAL_TIM_Base_Start+0x5c>
 8005a20:	687b      	ldr	r3, [r7, #4]
 8005a22:	681b      	ldr	r3, [r3, #0]
 8005a24:	4a17      	ldr	r2, [pc, #92]	; (8005a84 <HAL_TIM_Base_Start+0xac>)
 8005a26:	4293      	cmp	r3, r2
 8005a28:	d004      	beq.n	8005a34 <HAL_TIM_Base_Start+0x5c>
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	681b      	ldr	r3, [r3, #0]
 8005a2e:	4a16      	ldr	r2, [pc, #88]	; (8005a88 <HAL_TIM_Base_Start+0xb0>)
 8005a30:	4293      	cmp	r3, r2
 8005a32:	d111      	bne.n	8005a58 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005a34:	687b      	ldr	r3, [r7, #4]
 8005a36:	681b      	ldr	r3, [r3, #0]
 8005a38:	689b      	ldr	r3, [r3, #8]
 8005a3a:	f003 0307 	and.w	r3, r3, #7
 8005a3e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a40:	68fb      	ldr	r3, [r7, #12]
 8005a42:	2b06      	cmp	r3, #6
 8005a44:	d010      	beq.n	8005a68 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 8005a46:	687b      	ldr	r3, [r7, #4]
 8005a48:	681b      	ldr	r3, [r3, #0]
 8005a4a:	681a      	ldr	r2, [r3, #0]
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	f042 0201 	orr.w	r2, r2, #1
 8005a54:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005a56:	e007      	b.n	8005a68 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	681b      	ldr	r3, [r3, #0]
 8005a5c:	681a      	ldr	r2, [r3, #0]
 8005a5e:	687b      	ldr	r3, [r7, #4]
 8005a60:	681b      	ldr	r3, [r3, #0]
 8005a62:	f042 0201 	orr.w	r2, r2, #1
 8005a66:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005a68:	2300      	movs	r3, #0
}
 8005a6a:	4618      	mov	r0, r3
 8005a6c:	3714      	adds	r7, #20
 8005a6e:	46bd      	mov	sp, r7
 8005a70:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a74:	4770      	bx	lr
 8005a76:	bf00      	nop
 8005a78:	40010000 	.word	0x40010000
 8005a7c:	40000400 	.word	0x40000400
 8005a80:	40000800 	.word	0x40000800
 8005a84:	40000c00 	.word	0x40000c00
 8005a88:	40014000 	.word	0x40014000

08005a8c <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 8005a8c:	b480      	push	{r7}
 8005a8e:	b085      	sub	sp, #20
 8005a90:	af00      	add	r7, sp, #0
 8005a92:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8005a94:	687b      	ldr	r3, [r7, #4]
 8005a96:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a9a:	b2db      	uxtb	r3, r3
 8005a9c:	2b01      	cmp	r3, #1
 8005a9e:	d001      	beq.n	8005aa4 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8005aa0:	2301      	movs	r3, #1
 8005aa2:	e044      	b.n	8005b2e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005aa4:	687b      	ldr	r3, [r7, #4]
 8005aa6:	2202      	movs	r2, #2
 8005aa8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8005aac:	687b      	ldr	r3, [r7, #4]
 8005aae:	681b      	ldr	r3, [r3, #0]
 8005ab0:	68da      	ldr	r2, [r3, #12]
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	f042 0201 	orr.w	r2, r2, #1
 8005aba:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	4a1e      	ldr	r2, [pc, #120]	; (8005b3c <HAL_TIM_Base_Start_IT+0xb0>)
 8005ac2:	4293      	cmp	r3, r2
 8005ac4:	d018      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ac6:	687b      	ldr	r3, [r7, #4]
 8005ac8:	681b      	ldr	r3, [r3, #0]
 8005aca:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ace:	d013      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	681b      	ldr	r3, [r3, #0]
 8005ad4:	4a1a      	ldr	r2, [pc, #104]	; (8005b40 <HAL_TIM_Base_Start_IT+0xb4>)
 8005ad6:	4293      	cmp	r3, r2
 8005ad8:	d00e      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ada:	687b      	ldr	r3, [r7, #4]
 8005adc:	681b      	ldr	r3, [r3, #0]
 8005ade:	4a19      	ldr	r2, [pc, #100]	; (8005b44 <HAL_TIM_Base_Start_IT+0xb8>)
 8005ae0:	4293      	cmp	r3, r2
 8005ae2:	d009      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x6c>
 8005ae4:	687b      	ldr	r3, [r7, #4]
 8005ae6:	681b      	ldr	r3, [r3, #0]
 8005ae8:	4a17      	ldr	r2, [pc, #92]	; (8005b48 <HAL_TIM_Base_Start_IT+0xbc>)
 8005aea:	4293      	cmp	r3, r2
 8005aec:	d004      	beq.n	8005af8 <HAL_TIM_Base_Start_IT+0x6c>
 8005aee:	687b      	ldr	r3, [r7, #4]
 8005af0:	681b      	ldr	r3, [r3, #0]
 8005af2:	4a16      	ldr	r2, [pc, #88]	; (8005b4c <HAL_TIM_Base_Start_IT+0xc0>)
 8005af4:	4293      	cmp	r3, r2
 8005af6:	d111      	bne.n	8005b1c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005af8:	687b      	ldr	r3, [r7, #4]
 8005afa:	681b      	ldr	r3, [r3, #0]
 8005afc:	689b      	ldr	r3, [r3, #8]
 8005afe:	f003 0307 	and.w	r3, r3, #7
 8005b02:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b04:	68fb      	ldr	r3, [r7, #12]
 8005b06:	2b06      	cmp	r3, #6
 8005b08:	d010      	beq.n	8005b2c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8005b0a:	687b      	ldr	r3, [r7, #4]
 8005b0c:	681b      	ldr	r3, [r3, #0]
 8005b0e:	681a      	ldr	r2, [r3, #0]
 8005b10:	687b      	ldr	r3, [r7, #4]
 8005b12:	681b      	ldr	r3, [r3, #0]
 8005b14:	f042 0201 	orr.w	r2, r2, #1
 8005b18:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005b1a:	e007      	b.n	8005b2c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005b1c:	687b      	ldr	r3, [r7, #4]
 8005b1e:	681b      	ldr	r3, [r3, #0]
 8005b20:	681a      	ldr	r2, [r3, #0]
 8005b22:	687b      	ldr	r3, [r7, #4]
 8005b24:	681b      	ldr	r3, [r3, #0]
 8005b26:	f042 0201 	orr.w	r2, r2, #1
 8005b2a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005b2c:	2300      	movs	r3, #0
}
 8005b2e:	4618      	mov	r0, r3
 8005b30:	3714      	adds	r7, #20
 8005b32:	46bd      	mov	sp, r7
 8005b34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005b38:	4770      	bx	lr
 8005b3a:	bf00      	nop
 8005b3c:	40010000 	.word	0x40010000
 8005b40:	40000400 	.word	0x40000400
 8005b44:	40000800 	.word	0x40000800
 8005b48:	40000c00 	.word	0x40000c00
 8005b4c:	40014000 	.word	0x40014000

08005b50 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8005b50:	b580      	push	{r7, lr}
 8005b52:	b082      	sub	sp, #8
 8005b54:	af00      	add	r7, sp, #0
 8005b56:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005b58:	687b      	ldr	r3, [r7, #4]
 8005b5a:	2b00      	cmp	r3, #0
 8005b5c:	d101      	bne.n	8005b62 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8005b5e:	2301      	movs	r3, #1
 8005b60:	e041      	b.n	8005be6 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005b62:	687b      	ldr	r3, [r7, #4]
 8005b64:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b68:	b2db      	uxtb	r3, r3
 8005b6a:	2b00      	cmp	r3, #0
 8005b6c:	d106      	bne.n	8005b7c <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005b6e:	687b      	ldr	r3, [r7, #4]
 8005b70:	2200      	movs	r2, #0
 8005b72:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8005b76:	6878      	ldr	r0, [r7, #4]
 8005b78:	f000 f839 	bl	8005bee <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	2202      	movs	r2, #2
 8005b80:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005b84:	687b      	ldr	r3, [r7, #4]
 8005b86:	681a      	ldr	r2, [r3, #0]
 8005b88:	687b      	ldr	r3, [r7, #4]
 8005b8a:	3304      	adds	r3, #4
 8005b8c:	4619      	mov	r1, r3
 8005b8e:	4610      	mov	r0, r2
 8005b90:	f000 fcce 	bl	8006530 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	2201      	movs	r2, #1
 8005b98:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005b9c:	687b      	ldr	r3, [r7, #4]
 8005b9e:	2201      	movs	r2, #1
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005ba4:	687b      	ldr	r3, [r7, #4]
 8005ba6:	2201      	movs	r2, #1
 8005ba8:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005bac:	687b      	ldr	r3, [r7, #4]
 8005bae:	2201      	movs	r2, #1
 8005bb0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005bb4:	687b      	ldr	r3, [r7, #4]
 8005bb6:	2201      	movs	r2, #1
 8005bb8:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	2201      	movs	r2, #1
 8005bc0:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005bc4:	687b      	ldr	r3, [r7, #4]
 8005bc6:	2201      	movs	r2, #1
 8005bc8:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005bcc:	687b      	ldr	r3, [r7, #4]
 8005bce:	2201      	movs	r2, #1
 8005bd0:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8005bd4:	687b      	ldr	r3, [r7, #4]
 8005bd6:	2201      	movs	r2, #1
 8005bd8:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	2201      	movs	r2, #1
 8005be0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005be4:	2300      	movs	r3, #0
}
 8005be6:	4618      	mov	r0, r3
 8005be8:	3708      	adds	r7, #8
 8005bea:	46bd      	mov	sp, r7
 8005bec:	bd80      	pop	{r7, pc}

08005bee <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8005bee:	b480      	push	{r7}
 8005bf0:	b083      	sub	sp, #12
 8005bf2:	af00      	add	r7, sp, #0
 8005bf4:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8005bf6:	bf00      	nop
 8005bf8:	370c      	adds	r7, #12
 8005bfa:	46bd      	mov	sp, r7
 8005bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c00:	4770      	bx	lr
	...

08005c04 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005c04:	b580      	push	{r7, lr}
 8005c06:	b084      	sub	sp, #16
 8005c08:	af00      	add	r7, sp, #0
 8005c0a:	6078      	str	r0, [r7, #4]
 8005c0c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 8005c0e:	683b      	ldr	r3, [r7, #0]
 8005c10:	2b00      	cmp	r3, #0
 8005c12:	d109      	bne.n	8005c28 <HAL_TIM_PWM_Start+0x24>
 8005c14:	687b      	ldr	r3, [r7, #4]
 8005c16:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005c1a:	b2db      	uxtb	r3, r3
 8005c1c:	2b01      	cmp	r3, #1
 8005c1e:	bf14      	ite	ne
 8005c20:	2301      	movne	r3, #1
 8005c22:	2300      	moveq	r3, #0
 8005c24:	b2db      	uxtb	r3, r3
 8005c26:	e022      	b.n	8005c6e <HAL_TIM_PWM_Start+0x6a>
 8005c28:	683b      	ldr	r3, [r7, #0]
 8005c2a:	2b04      	cmp	r3, #4
 8005c2c:	d109      	bne.n	8005c42 <HAL_TIM_PWM_Start+0x3e>
 8005c2e:	687b      	ldr	r3, [r7, #4]
 8005c30:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005c34:	b2db      	uxtb	r3, r3
 8005c36:	2b01      	cmp	r3, #1
 8005c38:	bf14      	ite	ne
 8005c3a:	2301      	movne	r3, #1
 8005c3c:	2300      	moveq	r3, #0
 8005c3e:	b2db      	uxtb	r3, r3
 8005c40:	e015      	b.n	8005c6e <HAL_TIM_PWM_Start+0x6a>
 8005c42:	683b      	ldr	r3, [r7, #0]
 8005c44:	2b08      	cmp	r3, #8
 8005c46:	d109      	bne.n	8005c5c <HAL_TIM_PWM_Start+0x58>
 8005c48:	687b      	ldr	r3, [r7, #4]
 8005c4a:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 8005c4e:	b2db      	uxtb	r3, r3
 8005c50:	2b01      	cmp	r3, #1
 8005c52:	bf14      	ite	ne
 8005c54:	2301      	movne	r3, #1
 8005c56:	2300      	moveq	r3, #0
 8005c58:	b2db      	uxtb	r3, r3
 8005c5a:	e008      	b.n	8005c6e <HAL_TIM_PWM_Start+0x6a>
 8005c5c:	687b      	ldr	r3, [r7, #4]
 8005c5e:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 8005c62:	b2db      	uxtb	r3, r3
 8005c64:	2b01      	cmp	r3, #1
 8005c66:	bf14      	ite	ne
 8005c68:	2301      	movne	r3, #1
 8005c6a:	2300      	moveq	r3, #0
 8005c6c:	b2db      	uxtb	r3, r3
 8005c6e:	2b00      	cmp	r3, #0
 8005c70:	d001      	beq.n	8005c76 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 8005c72:	2301      	movs	r3, #1
 8005c74:	e068      	b.n	8005d48 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 8005c76:	683b      	ldr	r3, [r7, #0]
 8005c78:	2b00      	cmp	r3, #0
 8005c7a:	d104      	bne.n	8005c86 <HAL_TIM_PWM_Start+0x82>
 8005c7c:	687b      	ldr	r3, [r7, #4]
 8005c7e:	2202      	movs	r2, #2
 8005c80:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8005c84:	e013      	b.n	8005cae <HAL_TIM_PWM_Start+0xaa>
 8005c86:	683b      	ldr	r3, [r7, #0]
 8005c88:	2b04      	cmp	r3, #4
 8005c8a:	d104      	bne.n	8005c96 <HAL_TIM_PWM_Start+0x92>
 8005c8c:	687b      	ldr	r3, [r7, #4]
 8005c8e:	2202      	movs	r2, #2
 8005c90:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8005c94:	e00b      	b.n	8005cae <HAL_TIM_PWM_Start+0xaa>
 8005c96:	683b      	ldr	r3, [r7, #0]
 8005c98:	2b08      	cmp	r3, #8
 8005c9a:	d104      	bne.n	8005ca6 <HAL_TIM_PWM_Start+0xa2>
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2202      	movs	r2, #2
 8005ca0:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8005ca4:	e003      	b.n	8005cae <HAL_TIM_PWM_Start+0xaa>
 8005ca6:	687b      	ldr	r3, [r7, #4]
 8005ca8:	2202      	movs	r2, #2
 8005caa:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8005cae:	687b      	ldr	r3, [r7, #4]
 8005cb0:	681b      	ldr	r3, [r3, #0]
 8005cb2:	2201      	movs	r2, #1
 8005cb4:	6839      	ldr	r1, [r7, #0]
 8005cb6:	4618      	mov	r0, r3
 8005cb8:	f000 fee0 	bl	8006a7c <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8005cbc:	687b      	ldr	r3, [r7, #4]
 8005cbe:	681b      	ldr	r3, [r3, #0]
 8005cc0:	4a23      	ldr	r2, [pc, #140]	; (8005d50 <HAL_TIM_PWM_Start+0x14c>)
 8005cc2:	4293      	cmp	r3, r2
 8005cc4:	d107      	bne.n	8005cd6 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8005cc6:	687b      	ldr	r3, [r7, #4]
 8005cc8:	681b      	ldr	r3, [r3, #0]
 8005cca:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8005ccc:	687b      	ldr	r3, [r7, #4]
 8005cce:	681b      	ldr	r3, [r3, #0]
 8005cd0:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8005cd4:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8005cd6:	687b      	ldr	r3, [r7, #4]
 8005cd8:	681b      	ldr	r3, [r3, #0]
 8005cda:	4a1d      	ldr	r2, [pc, #116]	; (8005d50 <HAL_TIM_PWM_Start+0x14c>)
 8005cdc:	4293      	cmp	r3, r2
 8005cde:	d018      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x10e>
 8005ce0:	687b      	ldr	r3, [r7, #4]
 8005ce2:	681b      	ldr	r3, [r3, #0]
 8005ce4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8005ce8:	d013      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x10e>
 8005cea:	687b      	ldr	r3, [r7, #4]
 8005cec:	681b      	ldr	r3, [r3, #0]
 8005cee:	4a19      	ldr	r2, [pc, #100]	; (8005d54 <HAL_TIM_PWM_Start+0x150>)
 8005cf0:	4293      	cmp	r3, r2
 8005cf2:	d00e      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x10e>
 8005cf4:	687b      	ldr	r3, [r7, #4]
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	4a17      	ldr	r2, [pc, #92]	; (8005d58 <HAL_TIM_PWM_Start+0x154>)
 8005cfa:	4293      	cmp	r3, r2
 8005cfc:	d009      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x10e>
 8005cfe:	687b      	ldr	r3, [r7, #4]
 8005d00:	681b      	ldr	r3, [r3, #0]
 8005d02:	4a16      	ldr	r2, [pc, #88]	; (8005d5c <HAL_TIM_PWM_Start+0x158>)
 8005d04:	4293      	cmp	r3, r2
 8005d06:	d004      	beq.n	8005d12 <HAL_TIM_PWM_Start+0x10e>
 8005d08:	687b      	ldr	r3, [r7, #4]
 8005d0a:	681b      	ldr	r3, [r3, #0]
 8005d0c:	4a14      	ldr	r2, [pc, #80]	; (8005d60 <HAL_TIM_PWM_Start+0x15c>)
 8005d0e:	4293      	cmp	r3, r2
 8005d10:	d111      	bne.n	8005d36 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8005d12:	687b      	ldr	r3, [r7, #4]
 8005d14:	681b      	ldr	r3, [r3, #0]
 8005d16:	689b      	ldr	r3, [r3, #8]
 8005d18:	f003 0307 	and.w	r3, r3, #7
 8005d1c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d1e:	68fb      	ldr	r3, [r7, #12]
 8005d20:	2b06      	cmp	r3, #6
 8005d22:	d010      	beq.n	8005d46 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	681b      	ldr	r3, [r3, #0]
 8005d28:	681a      	ldr	r2, [r3, #0]
 8005d2a:	687b      	ldr	r3, [r7, #4]
 8005d2c:	681b      	ldr	r3, [r3, #0]
 8005d2e:	f042 0201 	orr.w	r2, r2, #1
 8005d32:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8005d34:	e007      	b.n	8005d46 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	681b      	ldr	r3, [r3, #0]
 8005d3a:	681a      	ldr	r2, [r3, #0]
 8005d3c:	687b      	ldr	r3, [r7, #4]
 8005d3e:	681b      	ldr	r3, [r3, #0]
 8005d40:	f042 0201 	orr.w	r2, r2, #1
 8005d44:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8005d46:	2300      	movs	r3, #0
}
 8005d48:	4618      	mov	r0, r3
 8005d4a:	3710      	adds	r7, #16
 8005d4c:	46bd      	mov	sp, r7
 8005d4e:	bd80      	pop	{r7, pc}
 8005d50:	40010000 	.word	0x40010000
 8005d54:	40000400 	.word	0x40000400
 8005d58:	40000800 	.word	0x40000800
 8005d5c:	40000c00 	.word	0x40000c00
 8005d60:	40014000 	.word	0x40014000

08005d64 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8005d64:	b580      	push	{r7, lr}
 8005d66:	b086      	sub	sp, #24
 8005d68:	af00      	add	r7, sp, #0
 8005d6a:	6078      	str	r0, [r7, #4]
 8005d6c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8005d6e:	687b      	ldr	r3, [r7, #4]
 8005d70:	2b00      	cmp	r3, #0
 8005d72:	d101      	bne.n	8005d78 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8005d74:	2301      	movs	r3, #1
 8005d76:	e097      	b.n	8005ea8 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8005d78:	687b      	ldr	r3, [r7, #4]
 8005d7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d7e:	b2db      	uxtb	r3, r3
 8005d80:	2b00      	cmp	r3, #0
 8005d82:	d106      	bne.n	8005d92 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2200      	movs	r2, #0
 8005d88:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8005d8c:	6878      	ldr	r0, [r7, #4]
 8005d8e:	f7fc fdef 	bl	8002970 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8005d92:	687b      	ldr	r3, [r7, #4]
 8005d94:	2202      	movs	r2, #2
 8005d96:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8005d9a:	687b      	ldr	r3, [r7, #4]
 8005d9c:	681b      	ldr	r3, [r3, #0]
 8005d9e:	689b      	ldr	r3, [r3, #8]
 8005da0:	687a      	ldr	r2, [r7, #4]
 8005da2:	6812      	ldr	r2, [r2, #0]
 8005da4:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8005da8:	f023 0307 	bic.w	r3, r3, #7
 8005dac:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8005dae:	687b      	ldr	r3, [r7, #4]
 8005db0:	681a      	ldr	r2, [r3, #0]
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	3304      	adds	r3, #4
 8005db6:	4619      	mov	r1, r3
 8005db8:	4610      	mov	r0, r2
 8005dba:	f000 fbb9 	bl	8006530 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	681b      	ldr	r3, [r3, #0]
 8005dc2:	689b      	ldr	r3, [r3, #8]
 8005dc4:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8005dc6:	687b      	ldr	r3, [r7, #4]
 8005dc8:	681b      	ldr	r3, [r3, #0]
 8005dca:	699b      	ldr	r3, [r3, #24]
 8005dcc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8005dce:	687b      	ldr	r3, [r7, #4]
 8005dd0:	681b      	ldr	r3, [r3, #0]
 8005dd2:	6a1b      	ldr	r3, [r3, #32]
 8005dd4:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8005dd6:	683b      	ldr	r3, [r7, #0]
 8005dd8:	681b      	ldr	r3, [r3, #0]
 8005dda:	697a      	ldr	r2, [r7, #20]
 8005ddc:	4313      	orrs	r3, r2
 8005dde:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8005de0:	693b      	ldr	r3, [r7, #16]
 8005de2:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8005de6:	f023 0303 	bic.w	r3, r3, #3
 8005dea:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8005dec:	683b      	ldr	r3, [r7, #0]
 8005dee:	689a      	ldr	r2, [r3, #8]
 8005df0:	683b      	ldr	r3, [r7, #0]
 8005df2:	699b      	ldr	r3, [r3, #24]
 8005df4:	021b      	lsls	r3, r3, #8
 8005df6:	4313      	orrs	r3, r2
 8005df8:	693a      	ldr	r2, [r7, #16]
 8005dfa:	4313      	orrs	r3, r2
 8005dfc:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8005dfe:	693b      	ldr	r3, [r7, #16]
 8005e00:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8005e04:	f023 030c 	bic.w	r3, r3, #12
 8005e08:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8005e0a:	693b      	ldr	r3, [r7, #16]
 8005e0c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8005e10:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8005e14:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8005e16:	683b      	ldr	r3, [r7, #0]
 8005e18:	68da      	ldr	r2, [r3, #12]
 8005e1a:	683b      	ldr	r3, [r7, #0]
 8005e1c:	69db      	ldr	r3, [r3, #28]
 8005e1e:	021b      	lsls	r3, r3, #8
 8005e20:	4313      	orrs	r3, r2
 8005e22:	693a      	ldr	r2, [r7, #16]
 8005e24:	4313      	orrs	r3, r2
 8005e26:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8005e28:	683b      	ldr	r3, [r7, #0]
 8005e2a:	691b      	ldr	r3, [r3, #16]
 8005e2c:	011a      	lsls	r2, r3, #4
 8005e2e:	683b      	ldr	r3, [r7, #0]
 8005e30:	6a1b      	ldr	r3, [r3, #32]
 8005e32:	031b      	lsls	r3, r3, #12
 8005e34:	4313      	orrs	r3, r2
 8005e36:	693a      	ldr	r2, [r7, #16]
 8005e38:	4313      	orrs	r3, r2
 8005e3a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8005e3c:	68fb      	ldr	r3, [r7, #12]
 8005e3e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8005e42:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8005e44:	68fb      	ldr	r3, [r7, #12]
 8005e46:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8005e4a:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8005e4c:	683b      	ldr	r3, [r7, #0]
 8005e4e:	685a      	ldr	r2, [r3, #4]
 8005e50:	683b      	ldr	r3, [r7, #0]
 8005e52:	695b      	ldr	r3, [r3, #20]
 8005e54:	011b      	lsls	r3, r3, #4
 8005e56:	4313      	orrs	r3, r2
 8005e58:	68fa      	ldr	r2, [r7, #12]
 8005e5a:	4313      	orrs	r3, r2
 8005e5c:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8005e5e:	687b      	ldr	r3, [r7, #4]
 8005e60:	681b      	ldr	r3, [r3, #0]
 8005e62:	697a      	ldr	r2, [r7, #20]
 8005e64:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	681b      	ldr	r3, [r3, #0]
 8005e6a:	693a      	ldr	r2, [r7, #16]
 8005e6c:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8005e6e:	687b      	ldr	r3, [r7, #4]
 8005e70:	681b      	ldr	r3, [r3, #0]
 8005e72:	68fa      	ldr	r2, [r7, #12]
 8005e74:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	2201      	movs	r2, #1
 8005e7a:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	2201      	movs	r2, #1
 8005e82:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e86:	687b      	ldr	r3, [r7, #4]
 8005e88:	2201      	movs	r2, #1
 8005e8a:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	2201      	movs	r2, #1
 8005e92:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8005e96:	687b      	ldr	r3, [r7, #4]
 8005e98:	2201      	movs	r2, #1
 8005e9a:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8005e9e:	687b      	ldr	r3, [r7, #4]
 8005ea0:	2201      	movs	r2, #1
 8005ea2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8005ea6:	2300      	movs	r3, #0
}
 8005ea8:	4618      	mov	r0, r3
 8005eaa:	3718      	adds	r7, #24
 8005eac:	46bd      	mov	sp, r7
 8005eae:	bd80      	pop	{r7, pc}

08005eb0 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8005eb0:	b580      	push	{r7, lr}
 8005eb2:	b084      	sub	sp, #16
 8005eb4:	af00      	add	r7, sp, #0
 8005eb6:	6078      	str	r0, [r7, #4]
 8005eb8:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8005eba:	687b      	ldr	r3, [r7, #4]
 8005ebc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005ec0:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8005ec2:	687b      	ldr	r3, [r7, #4]
 8005ec4:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8005ec8:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8005eca:	687b      	ldr	r3, [r7, #4]
 8005ecc:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8005ed0:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8005ed2:	687b      	ldr	r3, [r7, #4]
 8005ed4:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8005ed8:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8005eda:	683b      	ldr	r3, [r7, #0]
 8005edc:	2b00      	cmp	r3, #0
 8005ede:	d110      	bne.n	8005f02 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005ee0:	7bfb      	ldrb	r3, [r7, #15]
 8005ee2:	2b01      	cmp	r3, #1
 8005ee4:	d102      	bne.n	8005eec <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8005ee6:	7b7b      	ldrb	r3, [r7, #13]
 8005ee8:	2b01      	cmp	r3, #1
 8005eea:	d001      	beq.n	8005ef0 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8005eec:	2301      	movs	r3, #1
 8005eee:	e069      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef0:	687b      	ldr	r3, [r7, #4]
 8005ef2:	2202      	movs	r2, #2
 8005ef4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005ef8:	687b      	ldr	r3, [r7, #4]
 8005efa:	2202      	movs	r2, #2
 8005efc:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8005f00:	e031      	b.n	8005f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8005f02:	683b      	ldr	r3, [r7, #0]
 8005f04:	2b04      	cmp	r3, #4
 8005f06:	d110      	bne.n	8005f2a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f08:	7bbb      	ldrb	r3, [r7, #14]
 8005f0a:	2b01      	cmp	r3, #1
 8005f0c:	d102      	bne.n	8005f14 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f0e:	7b3b      	ldrb	r3, [r7, #12]
 8005f10:	2b01      	cmp	r3, #1
 8005f12:	d001      	beq.n	8005f18 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8005f14:	2301      	movs	r3, #1
 8005f16:	e055      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f18:	687b      	ldr	r3, [r7, #4]
 8005f1a:	2202      	movs	r2, #2
 8005f1c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f20:	687b      	ldr	r3, [r7, #4]
 8005f22:	2202      	movs	r2, #2
 8005f24:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8005f28:	e01d      	b.n	8005f66 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f2a:	7bfb      	ldrb	r3, [r7, #15]
 8005f2c:	2b01      	cmp	r3, #1
 8005f2e:	d108      	bne.n	8005f42 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f30:	7bbb      	ldrb	r3, [r7, #14]
 8005f32:	2b01      	cmp	r3, #1
 8005f34:	d105      	bne.n	8005f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8005f36:	7b7b      	ldrb	r3, [r7, #13]
 8005f38:	2b01      	cmp	r3, #1
 8005f3a:	d102      	bne.n	8005f42 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8005f3c:	7b3b      	ldrb	r3, [r7, #12]
 8005f3e:	2b01      	cmp	r3, #1
 8005f40:	d001      	beq.n	8005f46 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8005f42:	2301      	movs	r3, #1
 8005f44:	e03e      	b.n	8005fc4 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f46:	687b      	ldr	r3, [r7, #4]
 8005f48:	2202      	movs	r2, #2
 8005f4a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f4e:	687b      	ldr	r3, [r7, #4]
 8005f50:	2202      	movs	r2, #2
 8005f52:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f56:	687b      	ldr	r3, [r7, #4]
 8005f58:	2202      	movs	r2, #2
 8005f5a:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	2202      	movs	r2, #2
 8005f62:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8005f66:	683b      	ldr	r3, [r7, #0]
 8005f68:	2b00      	cmp	r3, #0
 8005f6a:	d003      	beq.n	8005f74 <HAL_TIM_Encoder_Start+0xc4>
 8005f6c:	683b      	ldr	r3, [r7, #0]
 8005f6e:	2b04      	cmp	r3, #4
 8005f70:	d008      	beq.n	8005f84 <HAL_TIM_Encoder_Start+0xd4>
 8005f72:	e00f      	b.n	8005f94 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f74:	687b      	ldr	r3, [r7, #4]
 8005f76:	681b      	ldr	r3, [r3, #0]
 8005f78:	2201      	movs	r2, #1
 8005f7a:	2100      	movs	r1, #0
 8005f7c:	4618      	mov	r0, r3
 8005f7e:	f000 fd7d 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 8005f82:	e016      	b.n	8005fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005f84:	687b      	ldr	r3, [r7, #4]
 8005f86:	681b      	ldr	r3, [r3, #0]
 8005f88:	2201      	movs	r2, #1
 8005f8a:	2104      	movs	r1, #4
 8005f8c:	4618      	mov	r0, r3
 8005f8e:	f000 fd75 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 8005f92:	e00e      	b.n	8005fb2 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8005f94:	687b      	ldr	r3, [r7, #4]
 8005f96:	681b      	ldr	r3, [r3, #0]
 8005f98:	2201      	movs	r2, #1
 8005f9a:	2100      	movs	r1, #0
 8005f9c:	4618      	mov	r0, r3
 8005f9e:	f000 fd6d 	bl	8006a7c <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8005fa2:	687b      	ldr	r3, [r7, #4]
 8005fa4:	681b      	ldr	r3, [r3, #0]
 8005fa6:	2201      	movs	r2, #1
 8005fa8:	2104      	movs	r1, #4
 8005faa:	4618      	mov	r0, r3
 8005fac:	f000 fd66 	bl	8006a7c <TIM_CCxChannelCmd>
      break;
 8005fb0:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8005fb2:	687b      	ldr	r3, [r7, #4]
 8005fb4:	681b      	ldr	r3, [r3, #0]
 8005fb6:	681a      	ldr	r2, [r3, #0]
 8005fb8:	687b      	ldr	r3, [r7, #4]
 8005fba:	681b      	ldr	r3, [r3, #0]
 8005fbc:	f042 0201 	orr.w	r2, r2, #1
 8005fc0:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8005fc2:	2300      	movs	r3, #0
}
 8005fc4:	4618      	mov	r0, r3
 8005fc6:	3710      	adds	r7, #16
 8005fc8:	46bd      	mov	sp, r7
 8005fca:	bd80      	pop	{r7, pc}

08005fcc <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8005fcc:	b580      	push	{r7, lr}
 8005fce:	b082      	sub	sp, #8
 8005fd0:	af00      	add	r7, sp, #0
 8005fd2:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8005fd4:	687b      	ldr	r3, [r7, #4]
 8005fd6:	681b      	ldr	r3, [r3, #0]
 8005fd8:	691b      	ldr	r3, [r3, #16]
 8005fda:	f003 0302 	and.w	r3, r3, #2
 8005fde:	2b02      	cmp	r3, #2
 8005fe0:	d122      	bne.n	8006028 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	681b      	ldr	r3, [r3, #0]
 8005fe6:	68db      	ldr	r3, [r3, #12]
 8005fe8:	f003 0302 	and.w	r3, r3, #2
 8005fec:	2b02      	cmp	r3, #2
 8005fee:	d11b      	bne.n	8006028 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8005ff0:	687b      	ldr	r3, [r7, #4]
 8005ff2:	681b      	ldr	r3, [r3, #0]
 8005ff4:	f06f 0202 	mvn.w	r2, #2
 8005ff8:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8005ffa:	687b      	ldr	r3, [r7, #4]
 8005ffc:	2201      	movs	r2, #1
 8005ffe:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006000:	687b      	ldr	r3, [r7, #4]
 8006002:	681b      	ldr	r3, [r3, #0]
 8006004:	699b      	ldr	r3, [r3, #24]
 8006006:	f003 0303 	and.w	r3, r3, #3
 800600a:	2b00      	cmp	r3, #0
 800600c:	d003      	beq.n	8006016 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800600e:	6878      	ldr	r0, [r7, #4]
 8006010:	f000 fa70 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 8006014:	e005      	b.n	8006022 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006016:	6878      	ldr	r0, [r7, #4]
 8006018:	f000 fa62 	bl	80064e0 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 800601c:	6878      	ldr	r0, [r7, #4]
 800601e:	f000 fa73 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	2200      	movs	r2, #0
 8006026:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006028:	687b      	ldr	r3, [r7, #4]
 800602a:	681b      	ldr	r3, [r3, #0]
 800602c:	691b      	ldr	r3, [r3, #16]
 800602e:	f003 0304 	and.w	r3, r3, #4
 8006032:	2b04      	cmp	r3, #4
 8006034:	d122      	bne.n	800607c <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	681b      	ldr	r3, [r3, #0]
 800603a:	68db      	ldr	r3, [r3, #12]
 800603c:	f003 0304 	and.w	r3, r3, #4
 8006040:	2b04      	cmp	r3, #4
 8006042:	d11b      	bne.n	800607c <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006044:	687b      	ldr	r3, [r7, #4]
 8006046:	681b      	ldr	r3, [r3, #0]
 8006048:	f06f 0204 	mvn.w	r2, #4
 800604c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	2202      	movs	r2, #2
 8006052:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006054:	687b      	ldr	r3, [r7, #4]
 8006056:	681b      	ldr	r3, [r3, #0]
 8006058:	699b      	ldr	r3, [r3, #24]
 800605a:	f403 7340 	and.w	r3, r3, #768	; 0x300
 800605e:	2b00      	cmp	r3, #0
 8006060:	d003      	beq.n	800606a <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006062:	6878      	ldr	r0, [r7, #4]
 8006064:	f000 fa46 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 8006068:	e005      	b.n	8006076 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800606a:	6878      	ldr	r0, [r7, #4]
 800606c:	f000 fa38 	bl	80064e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006070:	6878      	ldr	r0, [r7, #4]
 8006072:	f000 fa49 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006076:	687b      	ldr	r3, [r7, #4]
 8006078:	2200      	movs	r2, #0
 800607a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 800607c:	687b      	ldr	r3, [r7, #4]
 800607e:	681b      	ldr	r3, [r3, #0]
 8006080:	691b      	ldr	r3, [r3, #16]
 8006082:	f003 0308 	and.w	r3, r3, #8
 8006086:	2b08      	cmp	r3, #8
 8006088:	d122      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 800608a:	687b      	ldr	r3, [r7, #4]
 800608c:	681b      	ldr	r3, [r3, #0]
 800608e:	68db      	ldr	r3, [r3, #12]
 8006090:	f003 0308 	and.w	r3, r3, #8
 8006094:	2b08      	cmp	r3, #8
 8006096:	d11b      	bne.n	80060d0 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	681b      	ldr	r3, [r3, #0]
 800609c:	f06f 0208 	mvn.w	r2, #8
 80060a0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 80060a2:	687b      	ldr	r3, [r7, #4]
 80060a4:	2204      	movs	r2, #4
 80060a6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 80060a8:	687b      	ldr	r3, [r7, #4]
 80060aa:	681b      	ldr	r3, [r3, #0]
 80060ac:	69db      	ldr	r3, [r3, #28]
 80060ae:	f003 0303 	and.w	r3, r3, #3
 80060b2:	2b00      	cmp	r3, #0
 80060b4:	d003      	beq.n	80060be <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80060b6:	6878      	ldr	r0, [r7, #4]
 80060b8:	f000 fa1c 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 80060bc:	e005      	b.n	80060ca <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80060be:	6878      	ldr	r0, [r7, #4]
 80060c0:	f000 fa0e 	bl	80064e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80060c4:	6878      	ldr	r0, [r7, #4]
 80060c6:	f000 fa1f 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	2200      	movs	r2, #0
 80060ce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	681b      	ldr	r3, [r3, #0]
 80060d4:	691b      	ldr	r3, [r3, #16]
 80060d6:	f003 0310 	and.w	r3, r3, #16
 80060da:	2b10      	cmp	r3, #16
 80060dc:	d122      	bne.n	8006124 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	68db      	ldr	r3, [r3, #12]
 80060e4:	f003 0310 	and.w	r3, r3, #16
 80060e8:	2b10      	cmp	r3, #16
 80060ea:	d11b      	bne.n	8006124 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	681b      	ldr	r3, [r3, #0]
 80060f0:	f06f 0210 	mvn.w	r2, #16
 80060f4:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 80060f6:	687b      	ldr	r3, [r7, #4]
 80060f8:	2208      	movs	r2, #8
 80060fa:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 80060fc:	687b      	ldr	r3, [r7, #4]
 80060fe:	681b      	ldr	r3, [r3, #0]
 8006100:	69db      	ldr	r3, [r3, #28]
 8006102:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006106:	2b00      	cmp	r3, #0
 8006108:	d003      	beq.n	8006112 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 800610a:	6878      	ldr	r0, [r7, #4]
 800610c:	f000 f9f2 	bl	80064f4 <HAL_TIM_IC_CaptureCallback>
 8006110:	e005      	b.n	800611e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006112:	6878      	ldr	r0, [r7, #4]
 8006114:	f000 f9e4 	bl	80064e0 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006118:	6878      	ldr	r0, [r7, #4]
 800611a:	f000 f9f5 	bl	8006508 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800611e:	687b      	ldr	r3, [r7, #4]
 8006120:	2200      	movs	r2, #0
 8006122:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006124:	687b      	ldr	r3, [r7, #4]
 8006126:	681b      	ldr	r3, [r3, #0]
 8006128:	691b      	ldr	r3, [r3, #16]
 800612a:	f003 0301 	and.w	r3, r3, #1
 800612e:	2b01      	cmp	r3, #1
 8006130:	d10e      	bne.n	8006150 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006132:	687b      	ldr	r3, [r7, #4]
 8006134:	681b      	ldr	r3, [r3, #0]
 8006136:	68db      	ldr	r3, [r3, #12]
 8006138:	f003 0301 	and.w	r3, r3, #1
 800613c:	2b01      	cmp	r3, #1
 800613e:	d107      	bne.n	8006150 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006140:	687b      	ldr	r3, [r7, #4]
 8006142:	681b      	ldr	r3, [r3, #0]
 8006144:	f06f 0201 	mvn.w	r2, #1
 8006148:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7fc fb54 	bl	80027f8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006150:	687b      	ldr	r3, [r7, #4]
 8006152:	681b      	ldr	r3, [r3, #0]
 8006154:	691b      	ldr	r3, [r3, #16]
 8006156:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800615a:	2b80      	cmp	r3, #128	; 0x80
 800615c:	d10e      	bne.n	800617c <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 800615e:	687b      	ldr	r3, [r7, #4]
 8006160:	681b      	ldr	r3, [r3, #0]
 8006162:	68db      	ldr	r3, [r3, #12]
 8006164:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006168:	2b80      	cmp	r3, #128	; 0x80
 800616a:	d107      	bne.n	800617c <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 800616c:	687b      	ldr	r3, [r7, #4]
 800616e:	681b      	ldr	r3, [r3, #0]
 8006170:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006174:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f000 fd1e 	bl	8006bb8 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	681b      	ldr	r3, [r3, #0]
 8006180:	691b      	ldr	r3, [r3, #16]
 8006182:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006186:	2b40      	cmp	r3, #64	; 0x40
 8006188:	d10e      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 800618a:	687b      	ldr	r3, [r7, #4]
 800618c:	681b      	ldr	r3, [r3, #0]
 800618e:	68db      	ldr	r3, [r3, #12]
 8006190:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006194:	2b40      	cmp	r3, #64	; 0x40
 8006196:	d107      	bne.n	80061a8 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006198:	687b      	ldr	r3, [r7, #4]
 800619a:	681b      	ldr	r3, [r3, #0]
 800619c:	f06f 0240 	mvn.w	r2, #64	; 0x40
 80061a0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 80061a2:	6878      	ldr	r0, [r7, #4]
 80061a4:	f000 f9ba 	bl	800651c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 80061a8:	687b      	ldr	r3, [r7, #4]
 80061aa:	681b      	ldr	r3, [r3, #0]
 80061ac:	691b      	ldr	r3, [r3, #16]
 80061ae:	f003 0320 	and.w	r3, r3, #32
 80061b2:	2b20      	cmp	r3, #32
 80061b4:	d10e      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 80061b6:	687b      	ldr	r3, [r7, #4]
 80061b8:	681b      	ldr	r3, [r3, #0]
 80061ba:	68db      	ldr	r3, [r3, #12]
 80061bc:	f003 0320 	and.w	r3, r3, #32
 80061c0:	2b20      	cmp	r3, #32
 80061c2:	d107      	bne.n	80061d4 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 80061c4:	687b      	ldr	r3, [r7, #4]
 80061c6:	681b      	ldr	r3, [r3, #0]
 80061c8:	f06f 0220 	mvn.w	r2, #32
 80061cc:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 80061ce:	6878      	ldr	r0, [r7, #4]
 80061d0:	f000 fce8 	bl	8006ba4 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 80061d4:	bf00      	nop
 80061d6:	3708      	adds	r7, #8
 80061d8:	46bd      	mov	sp, r7
 80061da:	bd80      	pop	{r7, pc}

080061dc <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 80061dc:	b580      	push	{r7, lr}
 80061de:	b084      	sub	sp, #16
 80061e0:	af00      	add	r7, sp, #0
 80061e2:	60f8      	str	r0, [r7, #12]
 80061e4:	60b9      	str	r1, [r7, #8]
 80061e6:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 80061e8:	68fb      	ldr	r3, [r7, #12]
 80061ea:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80061ee:	2b01      	cmp	r3, #1
 80061f0:	d101      	bne.n	80061f6 <HAL_TIM_PWM_ConfigChannel+0x1a>
 80061f2:	2302      	movs	r3, #2
 80061f4:	e0ac      	b.n	8006350 <HAL_TIM_PWM_ConfigChannel+0x174>
 80061f6:	68fb      	ldr	r3, [r7, #12]
 80061f8:	2201      	movs	r2, #1
 80061fa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 80061fe:	687b      	ldr	r3, [r7, #4]
 8006200:	2b0c      	cmp	r3, #12
 8006202:	f200 809f 	bhi.w	8006344 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006206:	a201      	add	r2, pc, #4	; (adr r2, 800620c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006208:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800620c:	08006241 	.word	0x08006241
 8006210:	08006345 	.word	0x08006345
 8006214:	08006345 	.word	0x08006345
 8006218:	08006345 	.word	0x08006345
 800621c:	08006281 	.word	0x08006281
 8006220:	08006345 	.word	0x08006345
 8006224:	08006345 	.word	0x08006345
 8006228:	08006345 	.word	0x08006345
 800622c:	080062c3 	.word	0x080062c3
 8006230:	08006345 	.word	0x08006345
 8006234:	08006345 	.word	0x08006345
 8006238:	08006345 	.word	0x08006345
 800623c:	08006303 	.word	0x08006303
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006240:	68fb      	ldr	r3, [r7, #12]
 8006242:	681b      	ldr	r3, [r3, #0]
 8006244:	68b9      	ldr	r1, [r7, #8]
 8006246:	4618      	mov	r0, r3
 8006248:	f000 f9f2 	bl	8006630 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 800624c:	68fb      	ldr	r3, [r7, #12]
 800624e:	681b      	ldr	r3, [r3, #0]
 8006250:	699a      	ldr	r2, [r3, #24]
 8006252:	68fb      	ldr	r3, [r7, #12]
 8006254:	681b      	ldr	r3, [r3, #0]
 8006256:	f042 0208 	orr.w	r2, r2, #8
 800625a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 800625c:	68fb      	ldr	r3, [r7, #12]
 800625e:	681b      	ldr	r3, [r3, #0]
 8006260:	699a      	ldr	r2, [r3, #24]
 8006262:	68fb      	ldr	r3, [r7, #12]
 8006264:	681b      	ldr	r3, [r3, #0]
 8006266:	f022 0204 	bic.w	r2, r2, #4
 800626a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 800626c:	68fb      	ldr	r3, [r7, #12]
 800626e:	681b      	ldr	r3, [r3, #0]
 8006270:	6999      	ldr	r1, [r3, #24]
 8006272:	68bb      	ldr	r3, [r7, #8]
 8006274:	691a      	ldr	r2, [r3, #16]
 8006276:	68fb      	ldr	r3, [r7, #12]
 8006278:	681b      	ldr	r3, [r3, #0]
 800627a:	430a      	orrs	r2, r1
 800627c:	619a      	str	r2, [r3, #24]
      break;
 800627e:	e062      	b.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006280:	68fb      	ldr	r3, [r7, #12]
 8006282:	681b      	ldr	r3, [r3, #0]
 8006284:	68b9      	ldr	r1, [r7, #8]
 8006286:	4618      	mov	r0, r3
 8006288:	f000 fa38 	bl	80066fc <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 800628c:	68fb      	ldr	r3, [r7, #12]
 800628e:	681b      	ldr	r3, [r3, #0]
 8006290:	699a      	ldr	r2, [r3, #24]
 8006292:	68fb      	ldr	r3, [r7, #12]
 8006294:	681b      	ldr	r3, [r3, #0]
 8006296:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800629a:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 800629c:	68fb      	ldr	r3, [r7, #12]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	699a      	ldr	r2, [r3, #24]
 80062a2:	68fb      	ldr	r3, [r7, #12]
 80062a4:	681b      	ldr	r3, [r3, #0]
 80062a6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80062aa:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 80062ac:	68fb      	ldr	r3, [r7, #12]
 80062ae:	681b      	ldr	r3, [r3, #0]
 80062b0:	6999      	ldr	r1, [r3, #24]
 80062b2:	68bb      	ldr	r3, [r7, #8]
 80062b4:	691b      	ldr	r3, [r3, #16]
 80062b6:	021a      	lsls	r2, r3, #8
 80062b8:	68fb      	ldr	r3, [r7, #12]
 80062ba:	681b      	ldr	r3, [r3, #0]
 80062bc:	430a      	orrs	r2, r1
 80062be:	619a      	str	r2, [r3, #24]
      break;
 80062c0:	e041      	b.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 80062c2:	68fb      	ldr	r3, [r7, #12]
 80062c4:	681b      	ldr	r3, [r3, #0]
 80062c6:	68b9      	ldr	r1, [r7, #8]
 80062c8:	4618      	mov	r0, r3
 80062ca:	f000 fa83 	bl	80067d4 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 80062ce:	68fb      	ldr	r3, [r7, #12]
 80062d0:	681b      	ldr	r3, [r3, #0]
 80062d2:	69da      	ldr	r2, [r3, #28]
 80062d4:	68fb      	ldr	r3, [r7, #12]
 80062d6:	681b      	ldr	r3, [r3, #0]
 80062d8:	f042 0208 	orr.w	r2, r2, #8
 80062dc:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 80062de:	68fb      	ldr	r3, [r7, #12]
 80062e0:	681b      	ldr	r3, [r3, #0]
 80062e2:	69da      	ldr	r2, [r3, #28]
 80062e4:	68fb      	ldr	r3, [r7, #12]
 80062e6:	681b      	ldr	r3, [r3, #0]
 80062e8:	f022 0204 	bic.w	r2, r2, #4
 80062ec:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 80062ee:	68fb      	ldr	r3, [r7, #12]
 80062f0:	681b      	ldr	r3, [r3, #0]
 80062f2:	69d9      	ldr	r1, [r3, #28]
 80062f4:	68bb      	ldr	r3, [r7, #8]
 80062f6:	691a      	ldr	r2, [r3, #16]
 80062f8:	68fb      	ldr	r3, [r7, #12]
 80062fa:	681b      	ldr	r3, [r3, #0]
 80062fc:	430a      	orrs	r2, r1
 80062fe:	61da      	str	r2, [r3, #28]
      break;
 8006300:	e021      	b.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006302:	68fb      	ldr	r3, [r7, #12]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	68b9      	ldr	r1, [r7, #8]
 8006308:	4618      	mov	r0, r3
 800630a:	f000 facd 	bl	80068a8 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800630e:	68fb      	ldr	r3, [r7, #12]
 8006310:	681b      	ldr	r3, [r3, #0]
 8006312:	69da      	ldr	r2, [r3, #28]
 8006314:	68fb      	ldr	r3, [r7, #12]
 8006316:	681b      	ldr	r3, [r3, #0]
 8006318:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800631c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800631e:	68fb      	ldr	r3, [r7, #12]
 8006320:	681b      	ldr	r3, [r3, #0]
 8006322:	69da      	ldr	r2, [r3, #28]
 8006324:	68fb      	ldr	r3, [r7, #12]
 8006326:	681b      	ldr	r3, [r3, #0]
 8006328:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800632c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800632e:	68fb      	ldr	r3, [r7, #12]
 8006330:	681b      	ldr	r3, [r3, #0]
 8006332:	69d9      	ldr	r1, [r3, #28]
 8006334:	68bb      	ldr	r3, [r7, #8]
 8006336:	691b      	ldr	r3, [r3, #16]
 8006338:	021a      	lsls	r2, r3, #8
 800633a:	68fb      	ldr	r3, [r7, #12]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	430a      	orrs	r2, r1
 8006340:	61da      	str	r2, [r3, #28]
      break;
 8006342:	e000      	b.n	8006346 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006344:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006346:	68fb      	ldr	r3, [r7, #12]
 8006348:	2200      	movs	r2, #0
 800634a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800634e:	2300      	movs	r3, #0
}
 8006350:	4618      	mov	r0, r3
 8006352:	3710      	adds	r7, #16
 8006354:	46bd      	mov	sp, r7
 8006356:	bd80      	pop	{r7, pc}

08006358 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006358:	b580      	push	{r7, lr}
 800635a:	b084      	sub	sp, #16
 800635c:	af00      	add	r7, sp, #0
 800635e:	6078      	str	r0, [r7, #4]
 8006360:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006362:	687b      	ldr	r3, [r7, #4]
 8006364:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006368:	2b01      	cmp	r3, #1
 800636a:	d101      	bne.n	8006370 <HAL_TIM_ConfigClockSource+0x18>
 800636c:	2302      	movs	r3, #2
 800636e:	e0b3      	b.n	80064d8 <HAL_TIM_ConfigClockSource+0x180>
 8006370:	687b      	ldr	r3, [r7, #4]
 8006372:	2201      	movs	r2, #1
 8006374:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006378:	687b      	ldr	r3, [r7, #4]
 800637a:	2202      	movs	r2, #2
 800637c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006380:	687b      	ldr	r3, [r7, #4]
 8006382:	681b      	ldr	r3, [r3, #0]
 8006384:	689b      	ldr	r3, [r3, #8]
 8006386:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006388:	68fb      	ldr	r3, [r7, #12]
 800638a:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800638e:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006390:	68fb      	ldr	r3, [r7, #12]
 8006392:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006396:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006398:	687b      	ldr	r3, [r7, #4]
 800639a:	681b      	ldr	r3, [r3, #0]
 800639c:	68fa      	ldr	r2, [r7, #12]
 800639e:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 80063a0:	683b      	ldr	r3, [r7, #0]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063a8:	d03e      	beq.n	8006428 <HAL_TIM_ConfigClockSource+0xd0>
 80063aa:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80063ae:	f200 8087 	bhi.w	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063b2:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063b6:	f000 8085 	beq.w	80064c4 <HAL_TIM_ConfigClockSource+0x16c>
 80063ba:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 80063be:	d87f      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063c0:	2b70      	cmp	r3, #112	; 0x70
 80063c2:	d01a      	beq.n	80063fa <HAL_TIM_ConfigClockSource+0xa2>
 80063c4:	2b70      	cmp	r3, #112	; 0x70
 80063c6:	d87b      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063c8:	2b60      	cmp	r3, #96	; 0x60
 80063ca:	d050      	beq.n	800646e <HAL_TIM_ConfigClockSource+0x116>
 80063cc:	2b60      	cmp	r3, #96	; 0x60
 80063ce:	d877      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063d0:	2b50      	cmp	r3, #80	; 0x50
 80063d2:	d03c      	beq.n	800644e <HAL_TIM_ConfigClockSource+0xf6>
 80063d4:	2b50      	cmp	r3, #80	; 0x50
 80063d6:	d873      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063d8:	2b40      	cmp	r3, #64	; 0x40
 80063da:	d058      	beq.n	800648e <HAL_TIM_ConfigClockSource+0x136>
 80063dc:	2b40      	cmp	r3, #64	; 0x40
 80063de:	d86f      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063e0:	2b30      	cmp	r3, #48	; 0x30
 80063e2:	d064      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
 80063e4:	2b30      	cmp	r3, #48	; 0x30
 80063e6:	d86b      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063e8:	2b20      	cmp	r3, #32
 80063ea:	d060      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
 80063ec:	2b20      	cmp	r3, #32
 80063ee:	d867      	bhi.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
 80063f0:	2b00      	cmp	r3, #0
 80063f2:	d05c      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
 80063f4:	2b10      	cmp	r3, #16
 80063f6:	d05a      	beq.n	80064ae <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 80063f8:	e062      	b.n	80064c0 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80063fa:	687b      	ldr	r3, [r7, #4]
 80063fc:	6818      	ldr	r0, [r3, #0]
 80063fe:	683b      	ldr	r3, [r7, #0]
 8006400:	6899      	ldr	r1, [r3, #8]
 8006402:	683b      	ldr	r3, [r7, #0]
 8006404:	685a      	ldr	r2, [r3, #4]
 8006406:	683b      	ldr	r3, [r7, #0]
 8006408:	68db      	ldr	r3, [r3, #12]
 800640a:	f000 fb17 	bl	8006a3c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800640e:	687b      	ldr	r3, [r7, #4]
 8006410:	681b      	ldr	r3, [r3, #0]
 8006412:	689b      	ldr	r3, [r3, #8]
 8006414:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8006416:	68fb      	ldr	r3, [r7, #12]
 8006418:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800641c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800641e:	687b      	ldr	r3, [r7, #4]
 8006420:	681b      	ldr	r3, [r3, #0]
 8006422:	68fa      	ldr	r2, [r7, #12]
 8006424:	609a      	str	r2, [r3, #8]
      break;
 8006426:	e04e      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	6818      	ldr	r0, [r3, #0]
 800642c:	683b      	ldr	r3, [r7, #0]
 800642e:	6899      	ldr	r1, [r3, #8]
 8006430:	683b      	ldr	r3, [r7, #0]
 8006432:	685a      	ldr	r2, [r3, #4]
 8006434:	683b      	ldr	r3, [r7, #0]
 8006436:	68db      	ldr	r3, [r3, #12]
 8006438:	f000 fb00 	bl	8006a3c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	681b      	ldr	r3, [r3, #0]
 8006440:	689a      	ldr	r2, [r3, #8]
 8006442:	687b      	ldr	r3, [r7, #4]
 8006444:	681b      	ldr	r3, [r3, #0]
 8006446:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 800644a:	609a      	str	r2, [r3, #8]
      break;
 800644c:	e03b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800644e:	687b      	ldr	r3, [r7, #4]
 8006450:	6818      	ldr	r0, [r3, #0]
 8006452:	683b      	ldr	r3, [r7, #0]
 8006454:	6859      	ldr	r1, [r3, #4]
 8006456:	683b      	ldr	r3, [r7, #0]
 8006458:	68db      	ldr	r3, [r3, #12]
 800645a:	461a      	mov	r2, r3
 800645c:	f000 fa74 	bl	8006948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8006460:	687b      	ldr	r3, [r7, #4]
 8006462:	681b      	ldr	r3, [r3, #0]
 8006464:	2150      	movs	r1, #80	; 0x50
 8006466:	4618      	mov	r0, r3
 8006468:	f000 facd 	bl	8006a06 <TIM_ITRx_SetConfig>
      break;
 800646c:	e02b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800646e:	687b      	ldr	r3, [r7, #4]
 8006470:	6818      	ldr	r0, [r3, #0]
 8006472:	683b      	ldr	r3, [r7, #0]
 8006474:	6859      	ldr	r1, [r3, #4]
 8006476:	683b      	ldr	r3, [r7, #0]
 8006478:	68db      	ldr	r3, [r3, #12]
 800647a:	461a      	mov	r2, r3
 800647c:	f000 fa93 	bl	80069a6 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8006480:	687b      	ldr	r3, [r7, #4]
 8006482:	681b      	ldr	r3, [r3, #0]
 8006484:	2160      	movs	r1, #96	; 0x60
 8006486:	4618      	mov	r0, r3
 8006488:	f000 fabd 	bl	8006a06 <TIM_ITRx_SetConfig>
      break;
 800648c:	e01b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800648e:	687b      	ldr	r3, [r7, #4]
 8006490:	6818      	ldr	r0, [r3, #0]
 8006492:	683b      	ldr	r3, [r7, #0]
 8006494:	6859      	ldr	r1, [r3, #4]
 8006496:	683b      	ldr	r3, [r7, #0]
 8006498:	68db      	ldr	r3, [r3, #12]
 800649a:	461a      	mov	r2, r3
 800649c:	f000 fa54 	bl	8006948 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 80064a0:	687b      	ldr	r3, [r7, #4]
 80064a2:	681b      	ldr	r3, [r3, #0]
 80064a4:	2140      	movs	r1, #64	; 0x40
 80064a6:	4618      	mov	r0, r3
 80064a8:	f000 faad 	bl	8006a06 <TIM_ITRx_SetConfig>
      break;
 80064ac:	e00b      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 80064ae:	687b      	ldr	r3, [r7, #4]
 80064b0:	681a      	ldr	r2, [r3, #0]
 80064b2:	683b      	ldr	r3, [r7, #0]
 80064b4:	681b      	ldr	r3, [r3, #0]
 80064b6:	4619      	mov	r1, r3
 80064b8:	4610      	mov	r0, r2
 80064ba:	f000 faa4 	bl	8006a06 <TIM_ITRx_SetConfig>
        break;
 80064be:	e002      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064c0:	bf00      	nop
 80064c2:	e000      	b.n	80064c6 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 80064c4:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 80064c6:	687b      	ldr	r3, [r7, #4]
 80064c8:	2201      	movs	r2, #1
 80064ca:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80064ce:	687b      	ldr	r3, [r7, #4]
 80064d0:	2200      	movs	r2, #0
 80064d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80064d6:	2300      	movs	r3, #0
}
 80064d8:	4618      	mov	r0, r3
 80064da:	3710      	adds	r7, #16
 80064dc:	46bd      	mov	sp, r7
 80064de:	bd80      	pop	{r7, pc}

080064e0 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 80064e0:	b480      	push	{r7}
 80064e2:	b083      	sub	sp, #12
 80064e4:	af00      	add	r7, sp, #0
 80064e6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80064e8:	bf00      	nop
 80064ea:	370c      	adds	r7, #12
 80064ec:	46bd      	mov	sp, r7
 80064ee:	f85d 7b04 	ldr.w	r7, [sp], #4
 80064f2:	4770      	bx	lr

080064f4 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80064f4:	b480      	push	{r7}
 80064f6:	b083      	sub	sp, #12
 80064f8:	af00      	add	r7, sp, #0
 80064fa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80064fc:	bf00      	nop
 80064fe:	370c      	adds	r7, #12
 8006500:	46bd      	mov	sp, r7
 8006502:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006506:	4770      	bx	lr

08006508 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8006508:	b480      	push	{r7}
 800650a:	b083      	sub	sp, #12
 800650c:	af00      	add	r7, sp, #0
 800650e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8006510:	bf00      	nop
 8006512:	370c      	adds	r7, #12
 8006514:	46bd      	mov	sp, r7
 8006516:	f85d 7b04 	ldr.w	r7, [sp], #4
 800651a:	4770      	bx	lr

0800651c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800651c:	b480      	push	{r7}
 800651e:	b083      	sub	sp, #12
 8006520:	af00      	add	r7, sp, #0
 8006522:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8006524:	bf00      	nop
 8006526:	370c      	adds	r7, #12
 8006528:	46bd      	mov	sp, r7
 800652a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800652e:	4770      	bx	lr

08006530 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8006530:	b480      	push	{r7}
 8006532:	b085      	sub	sp, #20
 8006534:	af00      	add	r7, sp, #0
 8006536:	6078      	str	r0, [r7, #4]
 8006538:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800653a:	687b      	ldr	r3, [r7, #4]
 800653c:	681b      	ldr	r3, [r3, #0]
 800653e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8006540:	687b      	ldr	r3, [r7, #4]
 8006542:	4a34      	ldr	r2, [pc, #208]	; (8006614 <TIM_Base_SetConfig+0xe4>)
 8006544:	4293      	cmp	r3, r2
 8006546:	d00f      	beq.n	8006568 <TIM_Base_SetConfig+0x38>
 8006548:	687b      	ldr	r3, [r7, #4]
 800654a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800654e:	d00b      	beq.n	8006568 <TIM_Base_SetConfig+0x38>
 8006550:	687b      	ldr	r3, [r7, #4]
 8006552:	4a31      	ldr	r2, [pc, #196]	; (8006618 <TIM_Base_SetConfig+0xe8>)
 8006554:	4293      	cmp	r3, r2
 8006556:	d007      	beq.n	8006568 <TIM_Base_SetConfig+0x38>
 8006558:	687b      	ldr	r3, [r7, #4]
 800655a:	4a30      	ldr	r2, [pc, #192]	; (800661c <TIM_Base_SetConfig+0xec>)
 800655c:	4293      	cmp	r3, r2
 800655e:	d003      	beq.n	8006568 <TIM_Base_SetConfig+0x38>
 8006560:	687b      	ldr	r3, [r7, #4]
 8006562:	4a2f      	ldr	r2, [pc, #188]	; (8006620 <TIM_Base_SetConfig+0xf0>)
 8006564:	4293      	cmp	r3, r2
 8006566:	d108      	bne.n	800657a <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8006568:	68fb      	ldr	r3, [r7, #12]
 800656a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800656e:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8006570:	683b      	ldr	r3, [r7, #0]
 8006572:	685b      	ldr	r3, [r3, #4]
 8006574:	68fa      	ldr	r2, [r7, #12]
 8006576:	4313      	orrs	r3, r2
 8006578:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 800657a:	687b      	ldr	r3, [r7, #4]
 800657c:	4a25      	ldr	r2, [pc, #148]	; (8006614 <TIM_Base_SetConfig+0xe4>)
 800657e:	4293      	cmp	r3, r2
 8006580:	d01b      	beq.n	80065ba <TIM_Base_SetConfig+0x8a>
 8006582:	687b      	ldr	r3, [r7, #4]
 8006584:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006588:	d017      	beq.n	80065ba <TIM_Base_SetConfig+0x8a>
 800658a:	687b      	ldr	r3, [r7, #4]
 800658c:	4a22      	ldr	r2, [pc, #136]	; (8006618 <TIM_Base_SetConfig+0xe8>)
 800658e:	4293      	cmp	r3, r2
 8006590:	d013      	beq.n	80065ba <TIM_Base_SetConfig+0x8a>
 8006592:	687b      	ldr	r3, [r7, #4]
 8006594:	4a21      	ldr	r2, [pc, #132]	; (800661c <TIM_Base_SetConfig+0xec>)
 8006596:	4293      	cmp	r3, r2
 8006598:	d00f      	beq.n	80065ba <TIM_Base_SetConfig+0x8a>
 800659a:	687b      	ldr	r3, [r7, #4]
 800659c:	4a20      	ldr	r2, [pc, #128]	; (8006620 <TIM_Base_SetConfig+0xf0>)
 800659e:	4293      	cmp	r3, r2
 80065a0:	d00b      	beq.n	80065ba <TIM_Base_SetConfig+0x8a>
 80065a2:	687b      	ldr	r3, [r7, #4]
 80065a4:	4a1f      	ldr	r2, [pc, #124]	; (8006624 <TIM_Base_SetConfig+0xf4>)
 80065a6:	4293      	cmp	r3, r2
 80065a8:	d007      	beq.n	80065ba <TIM_Base_SetConfig+0x8a>
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	4a1e      	ldr	r2, [pc, #120]	; (8006628 <TIM_Base_SetConfig+0xf8>)
 80065ae:	4293      	cmp	r3, r2
 80065b0:	d003      	beq.n	80065ba <TIM_Base_SetConfig+0x8a>
 80065b2:	687b      	ldr	r3, [r7, #4]
 80065b4:	4a1d      	ldr	r2, [pc, #116]	; (800662c <TIM_Base_SetConfig+0xfc>)
 80065b6:	4293      	cmp	r3, r2
 80065b8:	d108      	bne.n	80065cc <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 80065ba:	68fb      	ldr	r3, [r7, #12]
 80065bc:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80065c0:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 80065c2:	683b      	ldr	r3, [r7, #0]
 80065c4:	68db      	ldr	r3, [r3, #12]
 80065c6:	68fa      	ldr	r2, [r7, #12]
 80065c8:	4313      	orrs	r3, r2
 80065ca:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 80065cc:	68fb      	ldr	r3, [r7, #12]
 80065ce:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 80065d2:	683b      	ldr	r3, [r7, #0]
 80065d4:	695b      	ldr	r3, [r3, #20]
 80065d6:	4313      	orrs	r3, r2
 80065d8:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 80065da:	687b      	ldr	r3, [r7, #4]
 80065dc:	68fa      	ldr	r2, [r7, #12]
 80065de:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 80065e0:	683b      	ldr	r3, [r7, #0]
 80065e2:	689a      	ldr	r2, [r3, #8]
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80065e8:	683b      	ldr	r3, [r7, #0]
 80065ea:	681a      	ldr	r2, [r3, #0]
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80065f0:	687b      	ldr	r3, [r7, #4]
 80065f2:	4a08      	ldr	r2, [pc, #32]	; (8006614 <TIM_Base_SetConfig+0xe4>)
 80065f4:	4293      	cmp	r3, r2
 80065f6:	d103      	bne.n	8006600 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80065f8:	683b      	ldr	r3, [r7, #0]
 80065fa:	691a      	ldr	r2, [r3, #16]
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8006600:	687b      	ldr	r3, [r7, #4]
 8006602:	2201      	movs	r2, #1
 8006604:	615a      	str	r2, [r3, #20]
}
 8006606:	bf00      	nop
 8006608:	3714      	adds	r7, #20
 800660a:	46bd      	mov	sp, r7
 800660c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006610:	4770      	bx	lr
 8006612:	bf00      	nop
 8006614:	40010000 	.word	0x40010000
 8006618:	40000400 	.word	0x40000400
 800661c:	40000800 	.word	0x40000800
 8006620:	40000c00 	.word	0x40000c00
 8006624:	40014000 	.word	0x40014000
 8006628:	40014400 	.word	0x40014400
 800662c:	40014800 	.word	0x40014800

08006630 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8006630:	b480      	push	{r7}
 8006632:	b087      	sub	sp, #28
 8006634:	af00      	add	r7, sp, #0
 8006636:	6078      	str	r0, [r7, #4]
 8006638:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800663a:	687b      	ldr	r3, [r7, #4]
 800663c:	6a1b      	ldr	r3, [r3, #32]
 800663e:	f023 0201 	bic.w	r2, r3, #1
 8006642:	687b      	ldr	r3, [r7, #4]
 8006644:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006646:	687b      	ldr	r3, [r7, #4]
 8006648:	6a1b      	ldr	r3, [r3, #32]
 800664a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 800664c:	687b      	ldr	r3, [r7, #4]
 800664e:	685b      	ldr	r3, [r3, #4]
 8006650:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8006652:	687b      	ldr	r3, [r7, #4]
 8006654:	699b      	ldr	r3, [r3, #24]
 8006656:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8006658:	68fb      	ldr	r3, [r7, #12]
 800665a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800665e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8006660:	68fb      	ldr	r3, [r7, #12]
 8006662:	f023 0303 	bic.w	r3, r3, #3
 8006666:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8006668:	683b      	ldr	r3, [r7, #0]
 800666a:	681b      	ldr	r3, [r3, #0]
 800666c:	68fa      	ldr	r2, [r7, #12]
 800666e:	4313      	orrs	r3, r2
 8006670:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8006672:	697b      	ldr	r3, [r7, #20]
 8006674:	f023 0302 	bic.w	r3, r3, #2
 8006678:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 800667a:	683b      	ldr	r3, [r7, #0]
 800667c:	689b      	ldr	r3, [r3, #8]
 800667e:	697a      	ldr	r2, [r7, #20]
 8006680:	4313      	orrs	r3, r2
 8006682:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8006684:	687b      	ldr	r3, [r7, #4]
 8006686:	4a1c      	ldr	r2, [pc, #112]	; (80066f8 <TIM_OC1_SetConfig+0xc8>)
 8006688:	4293      	cmp	r3, r2
 800668a:	d10c      	bne.n	80066a6 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 800668c:	697b      	ldr	r3, [r7, #20]
 800668e:	f023 0308 	bic.w	r3, r3, #8
 8006692:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8006694:	683b      	ldr	r3, [r7, #0]
 8006696:	68db      	ldr	r3, [r3, #12]
 8006698:	697a      	ldr	r2, [r7, #20]
 800669a:	4313      	orrs	r3, r2
 800669c:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800669e:	697b      	ldr	r3, [r7, #20]
 80066a0:	f023 0304 	bic.w	r3, r3, #4
 80066a4:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	4a13      	ldr	r2, [pc, #76]	; (80066f8 <TIM_OC1_SetConfig+0xc8>)
 80066aa:	4293      	cmp	r3, r2
 80066ac:	d111      	bne.n	80066d2 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 80066ae:	693b      	ldr	r3, [r7, #16]
 80066b0:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 80066b4:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 80066b6:	693b      	ldr	r3, [r7, #16]
 80066b8:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80066bc:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 80066be:	683b      	ldr	r3, [r7, #0]
 80066c0:	695b      	ldr	r3, [r3, #20]
 80066c2:	693a      	ldr	r2, [r7, #16]
 80066c4:	4313      	orrs	r3, r2
 80066c6:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 80066c8:	683b      	ldr	r3, [r7, #0]
 80066ca:	699b      	ldr	r3, [r3, #24]
 80066cc:	693a      	ldr	r2, [r7, #16]
 80066ce:	4313      	orrs	r3, r2
 80066d0:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80066d2:	687b      	ldr	r3, [r7, #4]
 80066d4:	693a      	ldr	r2, [r7, #16]
 80066d6:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80066d8:	687b      	ldr	r3, [r7, #4]
 80066da:	68fa      	ldr	r2, [r7, #12]
 80066dc:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 80066de:	683b      	ldr	r3, [r7, #0]
 80066e0:	685a      	ldr	r2, [r3, #4]
 80066e2:	687b      	ldr	r3, [r7, #4]
 80066e4:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80066e6:	687b      	ldr	r3, [r7, #4]
 80066e8:	697a      	ldr	r2, [r7, #20]
 80066ea:	621a      	str	r2, [r3, #32]
}
 80066ec:	bf00      	nop
 80066ee:	371c      	adds	r7, #28
 80066f0:	46bd      	mov	sp, r7
 80066f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066f6:	4770      	bx	lr
 80066f8:	40010000 	.word	0x40010000

080066fc <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80066fc:	b480      	push	{r7}
 80066fe:	b087      	sub	sp, #28
 8006700:	af00      	add	r7, sp, #0
 8006702:	6078      	str	r0, [r7, #4]
 8006704:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8006706:	687b      	ldr	r3, [r7, #4]
 8006708:	6a1b      	ldr	r3, [r3, #32]
 800670a:	f023 0210 	bic.w	r2, r3, #16
 800670e:	687b      	ldr	r3, [r7, #4]
 8006710:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	6a1b      	ldr	r3, [r3, #32]
 8006716:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800671e:	687b      	ldr	r3, [r7, #4]
 8006720:	699b      	ldr	r3, [r3, #24]
 8006722:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8006724:	68fb      	ldr	r3, [r7, #12]
 8006726:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800672a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800672c:	68fb      	ldr	r3, [r7, #12]
 800672e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006732:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8006734:	683b      	ldr	r3, [r7, #0]
 8006736:	681b      	ldr	r3, [r3, #0]
 8006738:	021b      	lsls	r3, r3, #8
 800673a:	68fa      	ldr	r2, [r7, #12]
 800673c:	4313      	orrs	r3, r2
 800673e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8006740:	697b      	ldr	r3, [r7, #20]
 8006742:	f023 0320 	bic.w	r3, r3, #32
 8006746:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8006748:	683b      	ldr	r3, [r7, #0]
 800674a:	689b      	ldr	r3, [r3, #8]
 800674c:	011b      	lsls	r3, r3, #4
 800674e:	697a      	ldr	r2, [r7, #20]
 8006750:	4313      	orrs	r3, r2
 8006752:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8006754:	687b      	ldr	r3, [r7, #4]
 8006756:	4a1e      	ldr	r2, [pc, #120]	; (80067d0 <TIM_OC2_SetConfig+0xd4>)
 8006758:	4293      	cmp	r3, r2
 800675a:	d10d      	bne.n	8006778 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 800675c:	697b      	ldr	r3, [r7, #20]
 800675e:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006762:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8006764:	683b      	ldr	r3, [r7, #0]
 8006766:	68db      	ldr	r3, [r3, #12]
 8006768:	011b      	lsls	r3, r3, #4
 800676a:	697a      	ldr	r2, [r7, #20]
 800676c:	4313      	orrs	r3, r2
 800676e:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8006770:	697b      	ldr	r3, [r7, #20]
 8006772:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8006776:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006778:	687b      	ldr	r3, [r7, #4]
 800677a:	4a15      	ldr	r2, [pc, #84]	; (80067d0 <TIM_OC2_SetConfig+0xd4>)
 800677c:	4293      	cmp	r3, r2
 800677e:	d113      	bne.n	80067a8 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8006780:	693b      	ldr	r3, [r7, #16]
 8006782:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8006786:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8006788:	693b      	ldr	r3, [r7, #16]
 800678a:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800678e:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8006790:	683b      	ldr	r3, [r7, #0]
 8006792:	695b      	ldr	r3, [r3, #20]
 8006794:	009b      	lsls	r3, r3, #2
 8006796:	693a      	ldr	r2, [r7, #16]
 8006798:	4313      	orrs	r3, r2
 800679a:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 800679c:	683b      	ldr	r3, [r7, #0]
 800679e:	699b      	ldr	r3, [r3, #24]
 80067a0:	009b      	lsls	r3, r3, #2
 80067a2:	693a      	ldr	r2, [r7, #16]
 80067a4:	4313      	orrs	r3, r2
 80067a6:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80067a8:	687b      	ldr	r3, [r7, #4]
 80067aa:	693a      	ldr	r2, [r7, #16]
 80067ac:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 80067ae:	687b      	ldr	r3, [r7, #4]
 80067b0:	68fa      	ldr	r2, [r7, #12]
 80067b2:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 80067b4:	683b      	ldr	r3, [r7, #0]
 80067b6:	685a      	ldr	r2, [r3, #4]
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80067bc:	687b      	ldr	r3, [r7, #4]
 80067be:	697a      	ldr	r2, [r7, #20]
 80067c0:	621a      	str	r2, [r3, #32]
}
 80067c2:	bf00      	nop
 80067c4:	371c      	adds	r7, #28
 80067c6:	46bd      	mov	sp, r7
 80067c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80067cc:	4770      	bx	lr
 80067ce:	bf00      	nop
 80067d0:	40010000 	.word	0x40010000

080067d4 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80067d4:	b480      	push	{r7}
 80067d6:	b087      	sub	sp, #28
 80067d8:	af00      	add	r7, sp, #0
 80067da:	6078      	str	r0, [r7, #4]
 80067dc:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 80067de:	687b      	ldr	r3, [r7, #4]
 80067e0:	6a1b      	ldr	r3, [r3, #32]
 80067e2:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80067e6:	687b      	ldr	r3, [r7, #4]
 80067e8:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80067ea:	687b      	ldr	r3, [r7, #4]
 80067ec:	6a1b      	ldr	r3, [r3, #32]
 80067ee:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80067f0:	687b      	ldr	r3, [r7, #4]
 80067f2:	685b      	ldr	r3, [r3, #4]
 80067f4:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80067f6:	687b      	ldr	r3, [r7, #4]
 80067f8:	69db      	ldr	r3, [r3, #28]
 80067fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80067fc:	68fb      	ldr	r3, [r7, #12]
 80067fe:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006802:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8006804:	68fb      	ldr	r3, [r7, #12]
 8006806:	f023 0303 	bic.w	r3, r3, #3
 800680a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800680c:	683b      	ldr	r3, [r7, #0]
 800680e:	681b      	ldr	r3, [r3, #0]
 8006810:	68fa      	ldr	r2, [r7, #12]
 8006812:	4313      	orrs	r3, r2
 8006814:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8006816:	697b      	ldr	r3, [r7, #20]
 8006818:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800681c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800681e:	683b      	ldr	r3, [r7, #0]
 8006820:	689b      	ldr	r3, [r3, #8]
 8006822:	021b      	lsls	r3, r3, #8
 8006824:	697a      	ldr	r2, [r7, #20]
 8006826:	4313      	orrs	r3, r2
 8006828:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800682a:	687b      	ldr	r3, [r7, #4]
 800682c:	4a1d      	ldr	r2, [pc, #116]	; (80068a4 <TIM_OC3_SetConfig+0xd0>)
 800682e:	4293      	cmp	r3, r2
 8006830:	d10d      	bne.n	800684e <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8006832:	697b      	ldr	r3, [r7, #20]
 8006834:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8006838:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800683a:	683b      	ldr	r3, [r7, #0]
 800683c:	68db      	ldr	r3, [r3, #12]
 800683e:	021b      	lsls	r3, r3, #8
 8006840:	697a      	ldr	r2, [r7, #20]
 8006842:	4313      	orrs	r3, r2
 8006844:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8006846:	697b      	ldr	r3, [r7, #20]
 8006848:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 800684c:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800684e:	687b      	ldr	r3, [r7, #4]
 8006850:	4a14      	ldr	r2, [pc, #80]	; (80068a4 <TIM_OC3_SetConfig+0xd0>)
 8006852:	4293      	cmp	r3, r2
 8006854:	d113      	bne.n	800687e <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8006856:	693b      	ldr	r3, [r7, #16]
 8006858:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 800685c:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800685e:	693b      	ldr	r3, [r7, #16]
 8006860:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8006864:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8006866:	683b      	ldr	r3, [r7, #0]
 8006868:	695b      	ldr	r3, [r3, #20]
 800686a:	011b      	lsls	r3, r3, #4
 800686c:	693a      	ldr	r2, [r7, #16]
 800686e:	4313      	orrs	r3, r2
 8006870:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8006872:	683b      	ldr	r3, [r7, #0]
 8006874:	699b      	ldr	r3, [r3, #24]
 8006876:	011b      	lsls	r3, r3, #4
 8006878:	693a      	ldr	r2, [r7, #16]
 800687a:	4313      	orrs	r3, r2
 800687c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800687e:	687b      	ldr	r3, [r7, #4]
 8006880:	693a      	ldr	r2, [r7, #16]
 8006882:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006884:	687b      	ldr	r3, [r7, #4]
 8006886:	68fa      	ldr	r2, [r7, #12]
 8006888:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 800688a:	683b      	ldr	r3, [r7, #0]
 800688c:	685a      	ldr	r2, [r3, #4]
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006892:	687b      	ldr	r3, [r7, #4]
 8006894:	697a      	ldr	r2, [r7, #20]
 8006896:	621a      	str	r2, [r3, #32]
}
 8006898:	bf00      	nop
 800689a:	371c      	adds	r7, #28
 800689c:	46bd      	mov	sp, r7
 800689e:	f85d 7b04 	ldr.w	r7, [sp], #4
 80068a2:	4770      	bx	lr
 80068a4:	40010000 	.word	0x40010000

080068a8 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80068a8:	b480      	push	{r7}
 80068aa:	b087      	sub	sp, #28
 80068ac:	af00      	add	r7, sp, #0
 80068ae:	6078      	str	r0, [r7, #4]
 80068b0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 80068b2:	687b      	ldr	r3, [r7, #4]
 80068b4:	6a1b      	ldr	r3, [r3, #32]
 80068b6:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 80068ba:	687b      	ldr	r3, [r7, #4]
 80068bc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80068be:	687b      	ldr	r3, [r7, #4]
 80068c0:	6a1b      	ldr	r3, [r3, #32]
 80068c2:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80068c4:	687b      	ldr	r3, [r7, #4]
 80068c6:	685b      	ldr	r3, [r3, #4]
 80068c8:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80068ca:	687b      	ldr	r3, [r7, #4]
 80068cc:	69db      	ldr	r3, [r3, #28]
 80068ce:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 80068d0:	68fb      	ldr	r3, [r7, #12]
 80068d2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80068d6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 80068d8:	68fb      	ldr	r3, [r7, #12]
 80068da:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80068de:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80068e0:	683b      	ldr	r3, [r7, #0]
 80068e2:	681b      	ldr	r3, [r3, #0]
 80068e4:	021b      	lsls	r3, r3, #8
 80068e6:	68fa      	ldr	r2, [r7, #12]
 80068e8:	4313      	orrs	r3, r2
 80068ea:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80068ec:	693b      	ldr	r3, [r7, #16]
 80068ee:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80068f2:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80068f4:	683b      	ldr	r3, [r7, #0]
 80068f6:	689b      	ldr	r3, [r3, #8]
 80068f8:	031b      	lsls	r3, r3, #12
 80068fa:	693a      	ldr	r2, [r7, #16]
 80068fc:	4313      	orrs	r3, r2
 80068fe:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8006900:	687b      	ldr	r3, [r7, #4]
 8006902:	4a10      	ldr	r2, [pc, #64]	; (8006944 <TIM_OC4_SetConfig+0x9c>)
 8006904:	4293      	cmp	r3, r2
 8006906:	d109      	bne.n	800691c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8006908:	697b      	ldr	r3, [r7, #20]
 800690a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800690e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8006910:	683b      	ldr	r3, [r7, #0]
 8006912:	695b      	ldr	r3, [r3, #20]
 8006914:	019b      	lsls	r3, r3, #6
 8006916:	697a      	ldr	r2, [r7, #20]
 8006918:	4313      	orrs	r3, r2
 800691a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	697a      	ldr	r2, [r7, #20]
 8006920:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8006922:	687b      	ldr	r3, [r7, #4]
 8006924:	68fa      	ldr	r2, [r7, #12]
 8006926:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8006928:	683b      	ldr	r3, [r7, #0]
 800692a:	685a      	ldr	r2, [r3, #4]
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8006930:	687b      	ldr	r3, [r7, #4]
 8006932:	693a      	ldr	r2, [r7, #16]
 8006934:	621a      	str	r2, [r3, #32]
}
 8006936:	bf00      	nop
 8006938:	371c      	adds	r7, #28
 800693a:	46bd      	mov	sp, r7
 800693c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006940:	4770      	bx	lr
 8006942:	bf00      	nop
 8006944:	40010000 	.word	0x40010000

08006948 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8006948:	b480      	push	{r7}
 800694a:	b087      	sub	sp, #28
 800694c:	af00      	add	r7, sp, #0
 800694e:	60f8      	str	r0, [r7, #12]
 8006950:	60b9      	str	r1, [r7, #8]
 8006952:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8006954:	68fb      	ldr	r3, [r7, #12]
 8006956:	6a1b      	ldr	r3, [r3, #32]
 8006958:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800695a:	68fb      	ldr	r3, [r7, #12]
 800695c:	6a1b      	ldr	r3, [r3, #32]
 800695e:	f023 0201 	bic.w	r2, r3, #1
 8006962:	68fb      	ldr	r3, [r7, #12]
 8006964:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8006966:	68fb      	ldr	r3, [r7, #12]
 8006968:	699b      	ldr	r3, [r3, #24]
 800696a:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 800696c:	693b      	ldr	r3, [r7, #16]
 800696e:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006972:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8006974:	687b      	ldr	r3, [r7, #4]
 8006976:	011b      	lsls	r3, r3, #4
 8006978:	693a      	ldr	r2, [r7, #16]
 800697a:	4313      	orrs	r3, r2
 800697c:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800697e:	697b      	ldr	r3, [r7, #20]
 8006980:	f023 030a 	bic.w	r3, r3, #10
 8006984:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8006986:	697a      	ldr	r2, [r7, #20]
 8006988:	68bb      	ldr	r3, [r7, #8]
 800698a:	4313      	orrs	r3, r2
 800698c:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800698e:	68fb      	ldr	r3, [r7, #12]
 8006990:	693a      	ldr	r2, [r7, #16]
 8006992:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8006994:	68fb      	ldr	r3, [r7, #12]
 8006996:	697a      	ldr	r2, [r7, #20]
 8006998:	621a      	str	r2, [r3, #32]
}
 800699a:	bf00      	nop
 800699c:	371c      	adds	r7, #28
 800699e:	46bd      	mov	sp, r7
 80069a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80069a4:	4770      	bx	lr

080069a6 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80069a6:	b480      	push	{r7}
 80069a8:	b087      	sub	sp, #28
 80069aa:	af00      	add	r7, sp, #0
 80069ac:	60f8      	str	r0, [r7, #12]
 80069ae:	60b9      	str	r1, [r7, #8]
 80069b0:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80069b2:	68fb      	ldr	r3, [r7, #12]
 80069b4:	6a1b      	ldr	r3, [r3, #32]
 80069b6:	f023 0210 	bic.w	r2, r3, #16
 80069ba:	68fb      	ldr	r3, [r7, #12]
 80069bc:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80069be:	68fb      	ldr	r3, [r7, #12]
 80069c0:	699b      	ldr	r3, [r3, #24]
 80069c2:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 80069c4:	68fb      	ldr	r3, [r7, #12]
 80069c6:	6a1b      	ldr	r3, [r3, #32]
 80069c8:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 80069ca:	697b      	ldr	r3, [r7, #20]
 80069cc:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 80069d0:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 80069d2:	687b      	ldr	r3, [r7, #4]
 80069d4:	031b      	lsls	r3, r3, #12
 80069d6:	697a      	ldr	r2, [r7, #20]
 80069d8:	4313      	orrs	r3, r2
 80069da:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 80069dc:	693b      	ldr	r3, [r7, #16]
 80069de:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 80069e2:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80069e4:	68bb      	ldr	r3, [r7, #8]
 80069e6:	011b      	lsls	r3, r3, #4
 80069e8:	693a      	ldr	r2, [r7, #16]
 80069ea:	4313      	orrs	r3, r2
 80069ec:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80069ee:	68fb      	ldr	r3, [r7, #12]
 80069f0:	697a      	ldr	r2, [r7, #20]
 80069f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80069f4:	68fb      	ldr	r3, [r7, #12]
 80069f6:	693a      	ldr	r2, [r7, #16]
 80069f8:	621a      	str	r2, [r3, #32]
}
 80069fa:	bf00      	nop
 80069fc:	371c      	adds	r7, #28
 80069fe:	46bd      	mov	sp, r7
 8006a00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a04:	4770      	bx	lr

08006a06 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8006a06:	b480      	push	{r7}
 8006a08:	b085      	sub	sp, #20
 8006a0a:	af00      	add	r7, sp, #0
 8006a0c:	6078      	str	r0, [r7, #4]
 8006a0e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8006a10:	687b      	ldr	r3, [r7, #4]
 8006a12:	689b      	ldr	r3, [r3, #8]
 8006a14:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8006a16:	68fb      	ldr	r3, [r7, #12]
 8006a18:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006a1c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 8006a1e:	683a      	ldr	r2, [r7, #0]
 8006a20:	68fb      	ldr	r3, [r7, #12]
 8006a22:	4313      	orrs	r3, r2
 8006a24:	f043 0307 	orr.w	r3, r3, #7
 8006a28:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a2a:	687b      	ldr	r3, [r7, #4]
 8006a2c:	68fa      	ldr	r2, [r7, #12]
 8006a2e:	609a      	str	r2, [r3, #8]
}
 8006a30:	bf00      	nop
 8006a32:	3714      	adds	r7, #20
 8006a34:	46bd      	mov	sp, r7
 8006a36:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a3a:	4770      	bx	lr

08006a3c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 8006a3c:	b480      	push	{r7}
 8006a3e:	b087      	sub	sp, #28
 8006a40:	af00      	add	r7, sp, #0
 8006a42:	60f8      	str	r0, [r7, #12]
 8006a44:	60b9      	str	r1, [r7, #8]
 8006a46:	607a      	str	r2, [r7, #4]
 8006a48:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8006a4a:	68fb      	ldr	r3, [r7, #12]
 8006a4c:	689b      	ldr	r3, [r3, #8]
 8006a4e:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006a50:	697b      	ldr	r3, [r7, #20]
 8006a52:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006a56:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8006a58:	683b      	ldr	r3, [r7, #0]
 8006a5a:	021a      	lsls	r2, r3, #8
 8006a5c:	687b      	ldr	r3, [r7, #4]
 8006a5e:	431a      	orrs	r2, r3
 8006a60:	68bb      	ldr	r3, [r7, #8]
 8006a62:	4313      	orrs	r3, r2
 8006a64:	697a      	ldr	r2, [r7, #20]
 8006a66:	4313      	orrs	r3, r2
 8006a68:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8006a6a:	68fb      	ldr	r3, [r7, #12]
 8006a6c:	697a      	ldr	r2, [r7, #20]
 8006a6e:	609a      	str	r2, [r3, #8]
}
 8006a70:	bf00      	nop
 8006a72:	371c      	adds	r7, #28
 8006a74:	46bd      	mov	sp, r7
 8006a76:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006a7a:	4770      	bx	lr

08006a7c <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8006a7c:	b480      	push	{r7}
 8006a7e:	b087      	sub	sp, #28
 8006a80:	af00      	add	r7, sp, #0
 8006a82:	60f8      	str	r0, [r7, #12]
 8006a84:	60b9      	str	r1, [r7, #8]
 8006a86:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8006a88:	68bb      	ldr	r3, [r7, #8]
 8006a8a:	f003 031f 	and.w	r3, r3, #31
 8006a8e:	2201      	movs	r2, #1
 8006a90:	fa02 f303 	lsl.w	r3, r2, r3
 8006a94:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8006a96:	68fb      	ldr	r3, [r7, #12]
 8006a98:	6a1a      	ldr	r2, [r3, #32]
 8006a9a:	697b      	ldr	r3, [r7, #20]
 8006a9c:	43db      	mvns	r3, r3
 8006a9e:	401a      	ands	r2, r3
 8006aa0:	68fb      	ldr	r3, [r7, #12]
 8006aa2:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	6a1a      	ldr	r2, [r3, #32]
 8006aa8:	68bb      	ldr	r3, [r7, #8]
 8006aaa:	f003 031f 	and.w	r3, r3, #31
 8006aae:	6879      	ldr	r1, [r7, #4]
 8006ab0:	fa01 f303 	lsl.w	r3, r1, r3
 8006ab4:	431a      	orrs	r2, r3
 8006ab6:	68fb      	ldr	r3, [r7, #12]
 8006ab8:	621a      	str	r2, [r3, #32]
}
 8006aba:	bf00      	nop
 8006abc:	371c      	adds	r7, #28
 8006abe:	46bd      	mov	sp, r7
 8006ac0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006ac4:	4770      	bx	lr
	...

08006ac8 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8006ac8:	b480      	push	{r7}
 8006aca:	b085      	sub	sp, #20
 8006acc:	af00      	add	r7, sp, #0
 8006ace:	6078      	str	r0, [r7, #4]
 8006ad0:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8006ad2:	687b      	ldr	r3, [r7, #4]
 8006ad4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006ad8:	2b01      	cmp	r3, #1
 8006ada:	d101      	bne.n	8006ae0 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8006adc:	2302      	movs	r3, #2
 8006ade:	e050      	b.n	8006b82 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8006ae0:	687b      	ldr	r3, [r7, #4]
 8006ae2:	2201      	movs	r2, #1
 8006ae4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006ae8:	687b      	ldr	r3, [r7, #4]
 8006aea:	2202      	movs	r2, #2
 8006aec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8006af0:	687b      	ldr	r3, [r7, #4]
 8006af2:	681b      	ldr	r3, [r3, #0]
 8006af4:	685b      	ldr	r3, [r3, #4]
 8006af6:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006af8:	687b      	ldr	r3, [r7, #4]
 8006afa:	681b      	ldr	r3, [r3, #0]
 8006afc:	689b      	ldr	r3, [r3, #8]
 8006afe:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8006b00:	68fb      	ldr	r3, [r7, #12]
 8006b02:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8006b06:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8006b08:	683b      	ldr	r3, [r7, #0]
 8006b0a:	681b      	ldr	r3, [r3, #0]
 8006b0c:	68fa      	ldr	r2, [r7, #12]
 8006b0e:	4313      	orrs	r3, r2
 8006b10:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8006b12:	687b      	ldr	r3, [r7, #4]
 8006b14:	681b      	ldr	r3, [r3, #0]
 8006b16:	68fa      	ldr	r2, [r7, #12]
 8006b18:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	681b      	ldr	r3, [r3, #0]
 8006b1e:	4a1c      	ldr	r2, [pc, #112]	; (8006b90 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8006b20:	4293      	cmp	r3, r2
 8006b22:	d018      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b24:	687b      	ldr	r3, [r7, #4]
 8006b26:	681b      	ldr	r3, [r3, #0]
 8006b28:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006b2c:	d013      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b2e:	687b      	ldr	r3, [r7, #4]
 8006b30:	681b      	ldr	r3, [r3, #0]
 8006b32:	4a18      	ldr	r2, [pc, #96]	; (8006b94 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8006b34:	4293      	cmp	r3, r2
 8006b36:	d00e      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	681b      	ldr	r3, [r3, #0]
 8006b3c:	4a16      	ldr	r2, [pc, #88]	; (8006b98 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 8006b3e:	4293      	cmp	r3, r2
 8006b40:	d009      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b42:	687b      	ldr	r3, [r7, #4]
 8006b44:	681b      	ldr	r3, [r3, #0]
 8006b46:	4a15      	ldr	r2, [pc, #84]	; (8006b9c <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8006b48:	4293      	cmp	r3, r2
 8006b4a:	d004      	beq.n	8006b56 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8006b4c:	687b      	ldr	r3, [r7, #4]
 8006b4e:	681b      	ldr	r3, [r3, #0]
 8006b50:	4a13      	ldr	r2, [pc, #76]	; (8006ba0 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 8006b52:	4293      	cmp	r3, r2
 8006b54:	d10c      	bne.n	8006b70 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8006b56:	68bb      	ldr	r3, [r7, #8]
 8006b58:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8006b5c:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 8006b5e:	683b      	ldr	r3, [r7, #0]
 8006b60:	685b      	ldr	r3, [r3, #4]
 8006b62:	68ba      	ldr	r2, [r7, #8]
 8006b64:	4313      	orrs	r3, r2
 8006b66:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8006b68:	687b      	ldr	r3, [r7, #4]
 8006b6a:	681b      	ldr	r3, [r3, #0]
 8006b6c:	68ba      	ldr	r2, [r7, #8]
 8006b6e:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 8006b70:	687b      	ldr	r3, [r7, #4]
 8006b72:	2201      	movs	r2, #1
 8006b74:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2200      	movs	r2, #0
 8006b7c:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006b80:	2300      	movs	r3, #0
}
 8006b82:	4618      	mov	r0, r3
 8006b84:	3714      	adds	r7, #20
 8006b86:	46bd      	mov	sp, r7
 8006b88:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006b8c:	4770      	bx	lr
 8006b8e:	bf00      	nop
 8006b90:	40010000 	.word	0x40010000
 8006b94:	40000400 	.word	0x40000400
 8006b98:	40000800 	.word	0x40000800
 8006b9c:	40000c00 	.word	0x40000c00
 8006ba0:	40014000 	.word	0x40014000

08006ba4 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8006ba4:	b480      	push	{r7}
 8006ba6:	b083      	sub	sp, #12
 8006ba8:	af00      	add	r7, sp, #0
 8006baa:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8006bac:	bf00      	nop
 8006bae:	370c      	adds	r7, #12
 8006bb0:	46bd      	mov	sp, r7
 8006bb2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bb6:	4770      	bx	lr

08006bb8 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8006bb8:	b480      	push	{r7}
 8006bba:	b083      	sub	sp, #12
 8006bbc:	af00      	add	r7, sp, #0
 8006bbe:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8006bc0:	bf00      	nop
 8006bc2:	370c      	adds	r7, #12
 8006bc4:	46bd      	mov	sp, r7
 8006bc6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006bca:	4770      	bx	lr

08006bcc <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8006bcc:	b580      	push	{r7, lr}
 8006bce:	b082      	sub	sp, #8
 8006bd0:	af00      	add	r7, sp, #0
 8006bd2:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	2b00      	cmp	r3, #0
 8006bd8:	d101      	bne.n	8006bde <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8006bda:	2301      	movs	r3, #1
 8006bdc:	e03f      	b.n	8006c5e <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 8006bde:	687b      	ldr	r3, [r7, #4]
 8006be0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006be4:	b2db      	uxtb	r3, r3
 8006be6:	2b00      	cmp	r3, #0
 8006be8:	d106      	bne.n	8006bf8 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8006bea:	687b      	ldr	r3, [r7, #4]
 8006bec:	2200      	movs	r2, #0
 8006bee:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8006bf2:	6878      	ldr	r0, [r7, #4]
 8006bf4:	f7fb ff82 	bl	8002afc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8006bf8:	687b      	ldr	r3, [r7, #4]
 8006bfa:	2224      	movs	r2, #36	; 0x24
 8006bfc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8006c00:	687b      	ldr	r3, [r7, #4]
 8006c02:	681b      	ldr	r3, [r3, #0]
 8006c04:	68da      	ldr	r2, [r3, #12]
 8006c06:	687b      	ldr	r3, [r7, #4]
 8006c08:	681b      	ldr	r3, [r3, #0]
 8006c0a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 8006c0e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8006c10:	6878      	ldr	r0, [r7, #4]
 8006c12:	f000 f829 	bl	8006c68 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8006c16:	687b      	ldr	r3, [r7, #4]
 8006c18:	681b      	ldr	r3, [r3, #0]
 8006c1a:	691a      	ldr	r2, [r3, #16]
 8006c1c:	687b      	ldr	r3, [r7, #4]
 8006c1e:	681b      	ldr	r3, [r3, #0]
 8006c20:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8006c24:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8006c26:	687b      	ldr	r3, [r7, #4]
 8006c28:	681b      	ldr	r3, [r3, #0]
 8006c2a:	695a      	ldr	r2, [r3, #20]
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	681b      	ldr	r3, [r3, #0]
 8006c30:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8006c34:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	68da      	ldr	r2, [r3, #12]
 8006c3c:	687b      	ldr	r3, [r7, #4]
 8006c3e:	681b      	ldr	r3, [r3, #0]
 8006c40:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8006c44:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8006c46:	687b      	ldr	r3, [r7, #4]
 8006c48:	2200      	movs	r2, #0
 8006c4a:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 8006c4c:	687b      	ldr	r3, [r7, #4]
 8006c4e:	2220      	movs	r2, #32
 8006c50:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 8006c54:	687b      	ldr	r3, [r7, #4]
 8006c56:	2220      	movs	r2, #32
 8006c58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8006c5c:	2300      	movs	r3, #0
}
 8006c5e:	4618      	mov	r0, r3
 8006c60:	3708      	adds	r7, #8
 8006c62:	46bd      	mov	sp, r7
 8006c64:	bd80      	pop	{r7, pc}
	...

08006c68 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8006c68:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8006c6c:	b09f      	sub	sp, #124	; 0x7c
 8006c6e:	af00      	add	r7, sp, #0
 8006c70:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8006c72:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c74:	681b      	ldr	r3, [r3, #0]
 8006c76:	691b      	ldr	r3, [r3, #16]
 8006c78:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8006c7c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c7e:	68d9      	ldr	r1, [r3, #12]
 8006c80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c82:	681a      	ldr	r2, [r3, #0]
 8006c84:	ea40 0301 	orr.w	r3, r0, r1
 8006c88:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8006c8a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c8c:	689a      	ldr	r2, [r3, #8]
 8006c8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c90:	691b      	ldr	r3, [r3, #16]
 8006c92:	431a      	orrs	r2, r3
 8006c94:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c96:	695b      	ldr	r3, [r3, #20]
 8006c98:	431a      	orrs	r2, r3
 8006c9a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006c9c:	69db      	ldr	r3, [r3, #28]
 8006c9e:	4313      	orrs	r3, r2
 8006ca0:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8006ca2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ca4:	681b      	ldr	r3, [r3, #0]
 8006ca6:	68db      	ldr	r3, [r3, #12]
 8006ca8:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8006cac:	f021 010c 	bic.w	r1, r1, #12
 8006cb0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cb2:	681a      	ldr	r2, [r3, #0]
 8006cb4:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8006cb6:	430b      	orrs	r3, r1
 8006cb8:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8006cba:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cbc:	681b      	ldr	r3, [r3, #0]
 8006cbe:	695b      	ldr	r3, [r3, #20]
 8006cc0:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8006cc4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cc6:	6999      	ldr	r1, [r3, #24]
 8006cc8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cca:	681a      	ldr	r2, [r3, #0]
 8006ccc:	ea40 0301 	orr.w	r3, r0, r1
 8006cd0:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8006cd2:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cd4:	681a      	ldr	r2, [r3, #0]
 8006cd6:	4bc5      	ldr	r3, [pc, #788]	; (8006fec <UART_SetConfig+0x384>)
 8006cd8:	429a      	cmp	r2, r3
 8006cda:	d004      	beq.n	8006ce6 <UART_SetConfig+0x7e>
 8006cdc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cde:	681a      	ldr	r2, [r3, #0]
 8006ce0:	4bc3      	ldr	r3, [pc, #780]	; (8006ff0 <UART_SetConfig+0x388>)
 8006ce2:	429a      	cmp	r2, r3
 8006ce4:	d103      	bne.n	8006cee <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8006ce6:	f7fe fe13 	bl	8005910 <HAL_RCC_GetPCLK2Freq>
 8006cea:	6778      	str	r0, [r7, #116]	; 0x74
 8006cec:	e002      	b.n	8006cf4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8006cee:	f7fe fdfb 	bl	80058e8 <HAL_RCC_GetPCLK1Freq>
 8006cf2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8006cf4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006cf6:	69db      	ldr	r3, [r3, #28]
 8006cf8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8006cfc:	f040 80b6 	bne.w	8006e6c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8006d00:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d02:	461c      	mov	r4, r3
 8006d04:	f04f 0500 	mov.w	r5, #0
 8006d08:	4622      	mov	r2, r4
 8006d0a:	462b      	mov	r3, r5
 8006d0c:	1891      	adds	r1, r2, r2
 8006d0e:	6439      	str	r1, [r7, #64]	; 0x40
 8006d10:	415b      	adcs	r3, r3
 8006d12:	647b      	str	r3, [r7, #68]	; 0x44
 8006d14:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8006d18:	1912      	adds	r2, r2, r4
 8006d1a:	eb45 0303 	adc.w	r3, r5, r3
 8006d1e:	f04f 0000 	mov.w	r0, #0
 8006d22:	f04f 0100 	mov.w	r1, #0
 8006d26:	00d9      	lsls	r1, r3, #3
 8006d28:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d2c:	00d0      	lsls	r0, r2, #3
 8006d2e:	4602      	mov	r2, r0
 8006d30:	460b      	mov	r3, r1
 8006d32:	1911      	adds	r1, r2, r4
 8006d34:	6639      	str	r1, [r7, #96]	; 0x60
 8006d36:	416b      	adcs	r3, r5
 8006d38:	667b      	str	r3, [r7, #100]	; 0x64
 8006d3a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006d3c:	685b      	ldr	r3, [r3, #4]
 8006d3e:	461a      	mov	r2, r3
 8006d40:	f04f 0300 	mov.w	r3, #0
 8006d44:	1891      	adds	r1, r2, r2
 8006d46:	63b9      	str	r1, [r7, #56]	; 0x38
 8006d48:	415b      	adcs	r3, r3
 8006d4a:	63fb      	str	r3, [r7, #60]	; 0x3c
 8006d4c:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8006d50:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8006d54:	f7fa f80a 	bl	8000d6c <__aeabi_uldivmod>
 8006d58:	4602      	mov	r2, r0
 8006d5a:	460b      	mov	r3, r1
 8006d5c:	4ba5      	ldr	r3, [pc, #660]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006d5e:	fba3 2302 	umull	r2, r3, r3, r2
 8006d62:	095b      	lsrs	r3, r3, #5
 8006d64:	011e      	lsls	r6, r3, #4
 8006d66:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006d68:	461c      	mov	r4, r3
 8006d6a:	f04f 0500 	mov.w	r5, #0
 8006d6e:	4622      	mov	r2, r4
 8006d70:	462b      	mov	r3, r5
 8006d72:	1891      	adds	r1, r2, r2
 8006d74:	6339      	str	r1, [r7, #48]	; 0x30
 8006d76:	415b      	adcs	r3, r3
 8006d78:	637b      	str	r3, [r7, #52]	; 0x34
 8006d7a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8006d7e:	1912      	adds	r2, r2, r4
 8006d80:	eb45 0303 	adc.w	r3, r5, r3
 8006d84:	f04f 0000 	mov.w	r0, #0
 8006d88:	f04f 0100 	mov.w	r1, #0
 8006d8c:	00d9      	lsls	r1, r3, #3
 8006d8e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006d92:	00d0      	lsls	r0, r2, #3
 8006d94:	4602      	mov	r2, r0
 8006d96:	460b      	mov	r3, r1
 8006d98:	1911      	adds	r1, r2, r4
 8006d9a:	65b9      	str	r1, [r7, #88]	; 0x58
 8006d9c:	416b      	adcs	r3, r5
 8006d9e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8006da0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006da2:	685b      	ldr	r3, [r3, #4]
 8006da4:	461a      	mov	r2, r3
 8006da6:	f04f 0300 	mov.w	r3, #0
 8006daa:	1891      	adds	r1, r2, r2
 8006dac:	62b9      	str	r1, [r7, #40]	; 0x28
 8006dae:	415b      	adcs	r3, r3
 8006db0:	62fb      	str	r3, [r7, #44]	; 0x2c
 8006db2:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8006db6:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8006dba:	f7f9 ffd7 	bl	8000d6c <__aeabi_uldivmod>
 8006dbe:	4602      	mov	r2, r0
 8006dc0:	460b      	mov	r3, r1
 8006dc2:	4b8c      	ldr	r3, [pc, #560]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006dc4:	fba3 1302 	umull	r1, r3, r3, r2
 8006dc8:	095b      	lsrs	r3, r3, #5
 8006dca:	2164      	movs	r1, #100	; 0x64
 8006dcc:	fb01 f303 	mul.w	r3, r1, r3
 8006dd0:	1ad3      	subs	r3, r2, r3
 8006dd2:	00db      	lsls	r3, r3, #3
 8006dd4:	3332      	adds	r3, #50	; 0x32
 8006dd6:	4a87      	ldr	r2, [pc, #540]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006dd8:	fba2 2303 	umull	r2, r3, r2, r3
 8006ddc:	095b      	lsrs	r3, r3, #5
 8006dde:	005b      	lsls	r3, r3, #1
 8006de0:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8006de4:	441e      	add	r6, r3
 8006de6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006de8:	4618      	mov	r0, r3
 8006dea:	f04f 0100 	mov.w	r1, #0
 8006dee:	4602      	mov	r2, r0
 8006df0:	460b      	mov	r3, r1
 8006df2:	1894      	adds	r4, r2, r2
 8006df4:	623c      	str	r4, [r7, #32]
 8006df6:	415b      	adcs	r3, r3
 8006df8:	627b      	str	r3, [r7, #36]	; 0x24
 8006dfa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8006dfe:	1812      	adds	r2, r2, r0
 8006e00:	eb41 0303 	adc.w	r3, r1, r3
 8006e04:	f04f 0400 	mov.w	r4, #0
 8006e08:	f04f 0500 	mov.w	r5, #0
 8006e0c:	00dd      	lsls	r5, r3, #3
 8006e0e:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006e12:	00d4      	lsls	r4, r2, #3
 8006e14:	4622      	mov	r2, r4
 8006e16:	462b      	mov	r3, r5
 8006e18:	1814      	adds	r4, r2, r0
 8006e1a:	653c      	str	r4, [r7, #80]	; 0x50
 8006e1c:	414b      	adcs	r3, r1
 8006e1e:	657b      	str	r3, [r7, #84]	; 0x54
 8006e20:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e22:	685b      	ldr	r3, [r3, #4]
 8006e24:	461a      	mov	r2, r3
 8006e26:	f04f 0300 	mov.w	r3, #0
 8006e2a:	1891      	adds	r1, r2, r2
 8006e2c:	61b9      	str	r1, [r7, #24]
 8006e2e:	415b      	adcs	r3, r3
 8006e30:	61fb      	str	r3, [r7, #28]
 8006e32:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8006e36:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8006e3a:	f7f9 ff97 	bl	8000d6c <__aeabi_uldivmod>
 8006e3e:	4602      	mov	r2, r0
 8006e40:	460b      	mov	r3, r1
 8006e42:	4b6c      	ldr	r3, [pc, #432]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006e44:	fba3 1302 	umull	r1, r3, r3, r2
 8006e48:	095b      	lsrs	r3, r3, #5
 8006e4a:	2164      	movs	r1, #100	; 0x64
 8006e4c:	fb01 f303 	mul.w	r3, r1, r3
 8006e50:	1ad3      	subs	r3, r2, r3
 8006e52:	00db      	lsls	r3, r3, #3
 8006e54:	3332      	adds	r3, #50	; 0x32
 8006e56:	4a67      	ldr	r2, [pc, #412]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006e58:	fba2 2303 	umull	r2, r3, r2, r3
 8006e5c:	095b      	lsrs	r3, r3, #5
 8006e5e:	f003 0207 	and.w	r2, r3, #7
 8006e62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006e64:	681b      	ldr	r3, [r3, #0]
 8006e66:	4432      	add	r2, r6
 8006e68:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8006e6a:	e0b9      	b.n	8006fe0 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8006e6c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006e6e:	461c      	mov	r4, r3
 8006e70:	f04f 0500 	mov.w	r5, #0
 8006e74:	4622      	mov	r2, r4
 8006e76:	462b      	mov	r3, r5
 8006e78:	1891      	adds	r1, r2, r2
 8006e7a:	6139      	str	r1, [r7, #16]
 8006e7c:	415b      	adcs	r3, r3
 8006e7e:	617b      	str	r3, [r7, #20]
 8006e80:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8006e84:	1912      	adds	r2, r2, r4
 8006e86:	eb45 0303 	adc.w	r3, r5, r3
 8006e8a:	f04f 0000 	mov.w	r0, #0
 8006e8e:	f04f 0100 	mov.w	r1, #0
 8006e92:	00d9      	lsls	r1, r3, #3
 8006e94:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e98:	00d0      	lsls	r0, r2, #3
 8006e9a:	4602      	mov	r2, r0
 8006e9c:	460b      	mov	r3, r1
 8006e9e:	eb12 0804 	adds.w	r8, r2, r4
 8006ea2:	eb43 0905 	adc.w	r9, r3, r5
 8006ea6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006ea8:	685b      	ldr	r3, [r3, #4]
 8006eaa:	4618      	mov	r0, r3
 8006eac:	f04f 0100 	mov.w	r1, #0
 8006eb0:	f04f 0200 	mov.w	r2, #0
 8006eb4:	f04f 0300 	mov.w	r3, #0
 8006eb8:	008b      	lsls	r3, r1, #2
 8006eba:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006ebe:	0082      	lsls	r2, r0, #2
 8006ec0:	4640      	mov	r0, r8
 8006ec2:	4649      	mov	r1, r9
 8006ec4:	f7f9 ff52 	bl	8000d6c <__aeabi_uldivmod>
 8006ec8:	4602      	mov	r2, r0
 8006eca:	460b      	mov	r3, r1
 8006ecc:	4b49      	ldr	r3, [pc, #292]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006ece:	fba3 2302 	umull	r2, r3, r3, r2
 8006ed2:	095b      	lsrs	r3, r3, #5
 8006ed4:	011e      	lsls	r6, r3, #4
 8006ed6:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006ed8:	4618      	mov	r0, r3
 8006eda:	f04f 0100 	mov.w	r1, #0
 8006ede:	4602      	mov	r2, r0
 8006ee0:	460b      	mov	r3, r1
 8006ee2:	1894      	adds	r4, r2, r2
 8006ee4:	60bc      	str	r4, [r7, #8]
 8006ee6:	415b      	adcs	r3, r3
 8006ee8:	60fb      	str	r3, [r7, #12]
 8006eea:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8006eee:	1812      	adds	r2, r2, r0
 8006ef0:	eb41 0303 	adc.w	r3, r1, r3
 8006ef4:	f04f 0400 	mov.w	r4, #0
 8006ef8:	f04f 0500 	mov.w	r5, #0
 8006efc:	00dd      	lsls	r5, r3, #3
 8006efe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f02:	00d4      	lsls	r4, r2, #3
 8006f04:	4622      	mov	r2, r4
 8006f06:	462b      	mov	r3, r5
 8006f08:	1814      	adds	r4, r2, r0
 8006f0a:	64bc      	str	r4, [r7, #72]	; 0x48
 8006f0c:	414b      	adcs	r3, r1
 8006f0e:	64fb      	str	r3, [r7, #76]	; 0x4c
 8006f10:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f12:	685b      	ldr	r3, [r3, #4]
 8006f14:	4618      	mov	r0, r3
 8006f16:	f04f 0100 	mov.w	r1, #0
 8006f1a:	f04f 0200 	mov.w	r2, #0
 8006f1e:	f04f 0300 	mov.w	r3, #0
 8006f22:	008b      	lsls	r3, r1, #2
 8006f24:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006f28:	0082      	lsls	r2, r0, #2
 8006f2a:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8006f2e:	f7f9 ff1d 	bl	8000d6c <__aeabi_uldivmod>
 8006f32:	4602      	mov	r2, r0
 8006f34:	460b      	mov	r3, r1
 8006f36:	4b2f      	ldr	r3, [pc, #188]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006f38:	fba3 1302 	umull	r1, r3, r3, r2
 8006f3c:	095b      	lsrs	r3, r3, #5
 8006f3e:	2164      	movs	r1, #100	; 0x64
 8006f40:	fb01 f303 	mul.w	r3, r1, r3
 8006f44:	1ad3      	subs	r3, r2, r3
 8006f46:	011b      	lsls	r3, r3, #4
 8006f48:	3332      	adds	r3, #50	; 0x32
 8006f4a:	4a2a      	ldr	r2, [pc, #168]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006f4c:	fba2 2303 	umull	r2, r3, r2, r3
 8006f50:	095b      	lsrs	r3, r3, #5
 8006f52:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8006f56:	441e      	add	r6, r3
 8006f58:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8006f5a:	4618      	mov	r0, r3
 8006f5c:	f04f 0100 	mov.w	r1, #0
 8006f60:	4602      	mov	r2, r0
 8006f62:	460b      	mov	r3, r1
 8006f64:	1894      	adds	r4, r2, r2
 8006f66:	603c      	str	r4, [r7, #0]
 8006f68:	415b      	adcs	r3, r3
 8006f6a:	607b      	str	r3, [r7, #4]
 8006f6c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8006f70:	1812      	adds	r2, r2, r0
 8006f72:	eb41 0303 	adc.w	r3, r1, r3
 8006f76:	f04f 0400 	mov.w	r4, #0
 8006f7a:	f04f 0500 	mov.w	r5, #0
 8006f7e:	00dd      	lsls	r5, r3, #3
 8006f80:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8006f84:	00d4      	lsls	r4, r2, #3
 8006f86:	4622      	mov	r2, r4
 8006f88:	462b      	mov	r3, r5
 8006f8a:	eb12 0a00 	adds.w	sl, r2, r0
 8006f8e:	eb43 0b01 	adc.w	fp, r3, r1
 8006f92:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006f94:	685b      	ldr	r3, [r3, #4]
 8006f96:	4618      	mov	r0, r3
 8006f98:	f04f 0100 	mov.w	r1, #0
 8006f9c:	f04f 0200 	mov.w	r2, #0
 8006fa0:	f04f 0300 	mov.w	r3, #0
 8006fa4:	008b      	lsls	r3, r1, #2
 8006fa6:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8006faa:	0082      	lsls	r2, r0, #2
 8006fac:	4650      	mov	r0, sl
 8006fae:	4659      	mov	r1, fp
 8006fb0:	f7f9 fedc 	bl	8000d6c <__aeabi_uldivmod>
 8006fb4:	4602      	mov	r2, r0
 8006fb6:	460b      	mov	r3, r1
 8006fb8:	4b0e      	ldr	r3, [pc, #56]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006fba:	fba3 1302 	umull	r1, r3, r3, r2
 8006fbe:	095b      	lsrs	r3, r3, #5
 8006fc0:	2164      	movs	r1, #100	; 0x64
 8006fc2:	fb01 f303 	mul.w	r3, r1, r3
 8006fc6:	1ad3      	subs	r3, r2, r3
 8006fc8:	011b      	lsls	r3, r3, #4
 8006fca:	3332      	adds	r3, #50	; 0x32
 8006fcc:	4a09      	ldr	r2, [pc, #36]	; (8006ff4 <UART_SetConfig+0x38c>)
 8006fce:	fba2 2303 	umull	r2, r3, r2, r3
 8006fd2:	095b      	lsrs	r3, r3, #5
 8006fd4:	f003 020f 	and.w	r2, r3, #15
 8006fd8:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8006fda:	681b      	ldr	r3, [r3, #0]
 8006fdc:	4432      	add	r2, r6
 8006fde:	609a      	str	r2, [r3, #8]
}
 8006fe0:	bf00      	nop
 8006fe2:	377c      	adds	r7, #124	; 0x7c
 8006fe4:	46bd      	mov	sp, r7
 8006fe6:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8006fea:	bf00      	nop
 8006fec:	40011000 	.word	0x40011000
 8006ff0:	40011400 	.word	0x40011400
 8006ff4:	51eb851f 	.word	0x51eb851f

08006ff8 <__errno>:
 8006ff8:	4b01      	ldr	r3, [pc, #4]	; (8007000 <__errno+0x8>)
 8006ffa:	6818      	ldr	r0, [r3, #0]
 8006ffc:	4770      	bx	lr
 8006ffe:	bf00      	nop
 8007000:	2000003c 	.word	0x2000003c

08007004 <__libc_init_array>:
 8007004:	b570      	push	{r4, r5, r6, lr}
 8007006:	4d0d      	ldr	r5, [pc, #52]	; (800703c <__libc_init_array+0x38>)
 8007008:	4c0d      	ldr	r4, [pc, #52]	; (8007040 <__libc_init_array+0x3c>)
 800700a:	1b64      	subs	r4, r4, r5
 800700c:	10a4      	asrs	r4, r4, #2
 800700e:	2600      	movs	r6, #0
 8007010:	42a6      	cmp	r6, r4
 8007012:	d109      	bne.n	8007028 <__libc_init_array+0x24>
 8007014:	4d0b      	ldr	r5, [pc, #44]	; (8007044 <__libc_init_array+0x40>)
 8007016:	4c0c      	ldr	r4, [pc, #48]	; (8007048 <__libc_init_array+0x44>)
 8007018:	f000 ffd4 	bl	8007fc4 <_init>
 800701c:	1b64      	subs	r4, r4, r5
 800701e:	10a4      	asrs	r4, r4, #2
 8007020:	2600      	movs	r6, #0
 8007022:	42a6      	cmp	r6, r4
 8007024:	d105      	bne.n	8007032 <__libc_init_array+0x2e>
 8007026:	bd70      	pop	{r4, r5, r6, pc}
 8007028:	f855 3b04 	ldr.w	r3, [r5], #4
 800702c:	4798      	blx	r3
 800702e:	3601      	adds	r6, #1
 8007030:	e7ee      	b.n	8007010 <__libc_init_array+0xc>
 8007032:	f855 3b04 	ldr.w	r3, [r5], #4
 8007036:	4798      	blx	r3
 8007038:	3601      	adds	r6, #1
 800703a:	e7f2      	b.n	8007022 <__libc_init_array+0x1e>
 800703c:	08008048 	.word	0x08008048
 8007040:	08008048 	.word	0x08008048
 8007044:	08008048 	.word	0x08008048
 8007048:	0800804c 	.word	0x0800804c

0800704c <memset>:
 800704c:	4402      	add	r2, r0
 800704e:	4603      	mov	r3, r0
 8007050:	4293      	cmp	r3, r2
 8007052:	d100      	bne.n	8007056 <memset+0xa>
 8007054:	4770      	bx	lr
 8007056:	f803 1b01 	strb.w	r1, [r3], #1
 800705a:	e7f9      	b.n	8007050 <memset+0x4>

0800705c <pow>:
 800705c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8007060:	ec59 8b10 	vmov	r8, r9, d0
 8007064:	ec57 6b11 	vmov	r6, r7, d1
 8007068:	f000 f8a6 	bl	80071b8 <__ieee754_pow>
 800706c:	4b4e      	ldr	r3, [pc, #312]	; (80071a8 <pow+0x14c>)
 800706e:	f993 3000 	ldrsb.w	r3, [r3]
 8007072:	3301      	adds	r3, #1
 8007074:	ec55 4b10 	vmov	r4, r5, d0
 8007078:	d015      	beq.n	80070a6 <pow+0x4a>
 800707a:	4632      	mov	r2, r6
 800707c:	463b      	mov	r3, r7
 800707e:	4630      	mov	r0, r6
 8007080:	4639      	mov	r1, r7
 8007082:	f7f9 fcff 	bl	8000a84 <__aeabi_dcmpun>
 8007086:	b970      	cbnz	r0, 80070a6 <pow+0x4a>
 8007088:	4642      	mov	r2, r8
 800708a:	464b      	mov	r3, r9
 800708c:	4640      	mov	r0, r8
 800708e:	4649      	mov	r1, r9
 8007090:	f7f9 fcf8 	bl	8000a84 <__aeabi_dcmpun>
 8007094:	2200      	movs	r2, #0
 8007096:	2300      	movs	r3, #0
 8007098:	b148      	cbz	r0, 80070ae <pow+0x52>
 800709a:	4630      	mov	r0, r6
 800709c:	4639      	mov	r1, r7
 800709e:	f7f9 fcbf 	bl	8000a20 <__aeabi_dcmpeq>
 80070a2:	2800      	cmp	r0, #0
 80070a4:	d17d      	bne.n	80071a2 <pow+0x146>
 80070a6:	ec45 4b10 	vmov	d0, r4, r5
 80070aa:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80070ae:	4640      	mov	r0, r8
 80070b0:	4649      	mov	r1, r9
 80070b2:	f7f9 fcb5 	bl	8000a20 <__aeabi_dcmpeq>
 80070b6:	b1e0      	cbz	r0, 80070f2 <pow+0x96>
 80070b8:	2200      	movs	r2, #0
 80070ba:	2300      	movs	r3, #0
 80070bc:	4630      	mov	r0, r6
 80070be:	4639      	mov	r1, r7
 80070c0:	f7f9 fcae 	bl	8000a20 <__aeabi_dcmpeq>
 80070c4:	2800      	cmp	r0, #0
 80070c6:	d16c      	bne.n	80071a2 <pow+0x146>
 80070c8:	ec47 6b10 	vmov	d0, r6, r7
 80070cc:	f000 fe53 	bl	8007d76 <finite>
 80070d0:	2800      	cmp	r0, #0
 80070d2:	d0e8      	beq.n	80070a6 <pow+0x4a>
 80070d4:	2200      	movs	r2, #0
 80070d6:	2300      	movs	r3, #0
 80070d8:	4630      	mov	r0, r6
 80070da:	4639      	mov	r1, r7
 80070dc:	f7f9 fcaa 	bl	8000a34 <__aeabi_dcmplt>
 80070e0:	2800      	cmp	r0, #0
 80070e2:	d0e0      	beq.n	80070a6 <pow+0x4a>
 80070e4:	f7ff ff88 	bl	8006ff8 <__errno>
 80070e8:	2321      	movs	r3, #33	; 0x21
 80070ea:	6003      	str	r3, [r0, #0]
 80070ec:	2400      	movs	r4, #0
 80070ee:	4d2f      	ldr	r5, [pc, #188]	; (80071ac <pow+0x150>)
 80070f0:	e7d9      	b.n	80070a6 <pow+0x4a>
 80070f2:	ec45 4b10 	vmov	d0, r4, r5
 80070f6:	f000 fe3e 	bl	8007d76 <finite>
 80070fa:	bbb8      	cbnz	r0, 800716c <pow+0x110>
 80070fc:	ec49 8b10 	vmov	d0, r8, r9
 8007100:	f000 fe39 	bl	8007d76 <finite>
 8007104:	b390      	cbz	r0, 800716c <pow+0x110>
 8007106:	ec47 6b10 	vmov	d0, r6, r7
 800710a:	f000 fe34 	bl	8007d76 <finite>
 800710e:	b368      	cbz	r0, 800716c <pow+0x110>
 8007110:	4622      	mov	r2, r4
 8007112:	462b      	mov	r3, r5
 8007114:	4620      	mov	r0, r4
 8007116:	4629      	mov	r1, r5
 8007118:	f7f9 fcb4 	bl	8000a84 <__aeabi_dcmpun>
 800711c:	b160      	cbz	r0, 8007138 <pow+0xdc>
 800711e:	f7ff ff6b 	bl	8006ff8 <__errno>
 8007122:	2321      	movs	r3, #33	; 0x21
 8007124:	6003      	str	r3, [r0, #0]
 8007126:	2200      	movs	r2, #0
 8007128:	2300      	movs	r3, #0
 800712a:	4610      	mov	r0, r2
 800712c:	4619      	mov	r1, r3
 800712e:	f7f9 fb39 	bl	80007a4 <__aeabi_ddiv>
 8007132:	4604      	mov	r4, r0
 8007134:	460d      	mov	r5, r1
 8007136:	e7b6      	b.n	80070a6 <pow+0x4a>
 8007138:	f7ff ff5e 	bl	8006ff8 <__errno>
 800713c:	2322      	movs	r3, #34	; 0x22
 800713e:	6003      	str	r3, [r0, #0]
 8007140:	2200      	movs	r2, #0
 8007142:	2300      	movs	r3, #0
 8007144:	4640      	mov	r0, r8
 8007146:	4649      	mov	r1, r9
 8007148:	f7f9 fc74 	bl	8000a34 <__aeabi_dcmplt>
 800714c:	2400      	movs	r4, #0
 800714e:	b158      	cbz	r0, 8007168 <pow+0x10c>
 8007150:	ec47 6b10 	vmov	d0, r6, r7
 8007154:	f000 fe24 	bl	8007da0 <rint>
 8007158:	4632      	mov	r2, r6
 800715a:	ec51 0b10 	vmov	r0, r1, d0
 800715e:	463b      	mov	r3, r7
 8007160:	f7f9 fc5e 	bl	8000a20 <__aeabi_dcmpeq>
 8007164:	2800      	cmp	r0, #0
 8007166:	d0c2      	beq.n	80070ee <pow+0x92>
 8007168:	4d11      	ldr	r5, [pc, #68]	; (80071b0 <pow+0x154>)
 800716a:	e79c      	b.n	80070a6 <pow+0x4a>
 800716c:	2200      	movs	r2, #0
 800716e:	2300      	movs	r3, #0
 8007170:	4620      	mov	r0, r4
 8007172:	4629      	mov	r1, r5
 8007174:	f7f9 fc54 	bl	8000a20 <__aeabi_dcmpeq>
 8007178:	2800      	cmp	r0, #0
 800717a:	d094      	beq.n	80070a6 <pow+0x4a>
 800717c:	ec49 8b10 	vmov	d0, r8, r9
 8007180:	f000 fdf9 	bl	8007d76 <finite>
 8007184:	2800      	cmp	r0, #0
 8007186:	d08e      	beq.n	80070a6 <pow+0x4a>
 8007188:	ec47 6b10 	vmov	d0, r6, r7
 800718c:	f000 fdf3 	bl	8007d76 <finite>
 8007190:	2800      	cmp	r0, #0
 8007192:	d088      	beq.n	80070a6 <pow+0x4a>
 8007194:	f7ff ff30 	bl	8006ff8 <__errno>
 8007198:	2322      	movs	r3, #34	; 0x22
 800719a:	6003      	str	r3, [r0, #0]
 800719c:	2400      	movs	r4, #0
 800719e:	2500      	movs	r5, #0
 80071a0:	e781      	b.n	80070a6 <pow+0x4a>
 80071a2:	4d04      	ldr	r5, [pc, #16]	; (80071b4 <pow+0x158>)
 80071a4:	2400      	movs	r4, #0
 80071a6:	e77e      	b.n	80070a6 <pow+0x4a>
 80071a8:	200000a0 	.word	0x200000a0
 80071ac:	fff00000 	.word	0xfff00000
 80071b0:	7ff00000 	.word	0x7ff00000
 80071b4:	3ff00000 	.word	0x3ff00000

080071b8 <__ieee754_pow>:
 80071b8:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80071bc:	ed2d 8b06 	vpush	{d8-d10}
 80071c0:	b08d      	sub	sp, #52	; 0x34
 80071c2:	ed8d 1b02 	vstr	d1, [sp, #8]
 80071c6:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80071ca:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80071ce:	ea56 0100 	orrs.w	r1, r6, r0
 80071d2:	ec53 2b10 	vmov	r2, r3, d0
 80071d6:	f000 84d1 	beq.w	8007b7c <__ieee754_pow+0x9c4>
 80071da:	497f      	ldr	r1, [pc, #508]	; (80073d8 <__ieee754_pow+0x220>)
 80071dc:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80071e0:	428c      	cmp	r4, r1
 80071e2:	ee10 8a10 	vmov	r8, s0
 80071e6:	4699      	mov	r9, r3
 80071e8:	dc09      	bgt.n	80071fe <__ieee754_pow+0x46>
 80071ea:	d103      	bne.n	80071f4 <__ieee754_pow+0x3c>
 80071ec:	b97a      	cbnz	r2, 800720e <__ieee754_pow+0x56>
 80071ee:	42a6      	cmp	r6, r4
 80071f0:	dd02      	ble.n	80071f8 <__ieee754_pow+0x40>
 80071f2:	e00c      	b.n	800720e <__ieee754_pow+0x56>
 80071f4:	428e      	cmp	r6, r1
 80071f6:	dc02      	bgt.n	80071fe <__ieee754_pow+0x46>
 80071f8:	428e      	cmp	r6, r1
 80071fa:	d110      	bne.n	800721e <__ieee754_pow+0x66>
 80071fc:	b178      	cbz	r0, 800721e <__ieee754_pow+0x66>
 80071fe:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007202:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8007206:	ea54 0308 	orrs.w	r3, r4, r8
 800720a:	f000 84b7 	beq.w	8007b7c <__ieee754_pow+0x9c4>
 800720e:	4873      	ldr	r0, [pc, #460]	; (80073dc <__ieee754_pow+0x224>)
 8007210:	b00d      	add	sp, #52	; 0x34
 8007212:	ecbd 8b06 	vpop	{d8-d10}
 8007216:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800721a:	f000 bdb9 	b.w	8007d90 <nan>
 800721e:	f1b9 0f00 	cmp.w	r9, #0
 8007222:	da36      	bge.n	8007292 <__ieee754_pow+0xda>
 8007224:	496e      	ldr	r1, [pc, #440]	; (80073e0 <__ieee754_pow+0x228>)
 8007226:	428e      	cmp	r6, r1
 8007228:	dc51      	bgt.n	80072ce <__ieee754_pow+0x116>
 800722a:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 800722e:	428e      	cmp	r6, r1
 8007230:	f340 84af 	ble.w	8007b92 <__ieee754_pow+0x9da>
 8007234:	1531      	asrs	r1, r6, #20
 8007236:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 800723a:	2914      	cmp	r1, #20
 800723c:	dd0f      	ble.n	800725e <__ieee754_pow+0xa6>
 800723e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8007242:	fa20 fc01 	lsr.w	ip, r0, r1
 8007246:	fa0c f101 	lsl.w	r1, ip, r1
 800724a:	4281      	cmp	r1, r0
 800724c:	f040 84a1 	bne.w	8007b92 <__ieee754_pow+0x9da>
 8007250:	f00c 0c01 	and.w	ip, ip, #1
 8007254:	f1cc 0102 	rsb	r1, ip, #2
 8007258:	9100      	str	r1, [sp, #0]
 800725a:	b180      	cbz	r0, 800727e <__ieee754_pow+0xc6>
 800725c:	e059      	b.n	8007312 <__ieee754_pow+0x15a>
 800725e:	2800      	cmp	r0, #0
 8007260:	d155      	bne.n	800730e <__ieee754_pow+0x156>
 8007262:	f1c1 0114 	rsb	r1, r1, #20
 8007266:	fa46 fc01 	asr.w	ip, r6, r1
 800726a:	fa0c f101 	lsl.w	r1, ip, r1
 800726e:	42b1      	cmp	r1, r6
 8007270:	f040 848c 	bne.w	8007b8c <__ieee754_pow+0x9d4>
 8007274:	f00c 0c01 	and.w	ip, ip, #1
 8007278:	f1cc 0102 	rsb	r1, ip, #2
 800727c:	9100      	str	r1, [sp, #0]
 800727e:	4959      	ldr	r1, [pc, #356]	; (80073e4 <__ieee754_pow+0x22c>)
 8007280:	428e      	cmp	r6, r1
 8007282:	d12d      	bne.n	80072e0 <__ieee754_pow+0x128>
 8007284:	2f00      	cmp	r7, #0
 8007286:	da79      	bge.n	800737c <__ieee754_pow+0x1c4>
 8007288:	4956      	ldr	r1, [pc, #344]	; (80073e4 <__ieee754_pow+0x22c>)
 800728a:	2000      	movs	r0, #0
 800728c:	f7f9 fa8a 	bl	80007a4 <__aeabi_ddiv>
 8007290:	e016      	b.n	80072c0 <__ieee754_pow+0x108>
 8007292:	2100      	movs	r1, #0
 8007294:	9100      	str	r1, [sp, #0]
 8007296:	2800      	cmp	r0, #0
 8007298:	d13b      	bne.n	8007312 <__ieee754_pow+0x15a>
 800729a:	494f      	ldr	r1, [pc, #316]	; (80073d8 <__ieee754_pow+0x220>)
 800729c:	428e      	cmp	r6, r1
 800729e:	d1ee      	bne.n	800727e <__ieee754_pow+0xc6>
 80072a0:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 80072a4:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80072a8:	ea53 0308 	orrs.w	r3, r3, r8
 80072ac:	f000 8466 	beq.w	8007b7c <__ieee754_pow+0x9c4>
 80072b0:	4b4d      	ldr	r3, [pc, #308]	; (80073e8 <__ieee754_pow+0x230>)
 80072b2:	429c      	cmp	r4, r3
 80072b4:	dd0d      	ble.n	80072d2 <__ieee754_pow+0x11a>
 80072b6:	2f00      	cmp	r7, #0
 80072b8:	f280 8464 	bge.w	8007b84 <__ieee754_pow+0x9cc>
 80072bc:	2000      	movs	r0, #0
 80072be:	2100      	movs	r1, #0
 80072c0:	ec41 0b10 	vmov	d0, r0, r1
 80072c4:	b00d      	add	sp, #52	; 0x34
 80072c6:	ecbd 8b06 	vpop	{d8-d10}
 80072ca:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80072ce:	2102      	movs	r1, #2
 80072d0:	e7e0      	b.n	8007294 <__ieee754_pow+0xdc>
 80072d2:	2f00      	cmp	r7, #0
 80072d4:	daf2      	bge.n	80072bc <__ieee754_pow+0x104>
 80072d6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80072da:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80072de:	e7ef      	b.n	80072c0 <__ieee754_pow+0x108>
 80072e0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80072e4:	d104      	bne.n	80072f0 <__ieee754_pow+0x138>
 80072e6:	4610      	mov	r0, r2
 80072e8:	4619      	mov	r1, r3
 80072ea:	f7f9 f931 	bl	8000550 <__aeabi_dmul>
 80072ee:	e7e7      	b.n	80072c0 <__ieee754_pow+0x108>
 80072f0:	493e      	ldr	r1, [pc, #248]	; (80073ec <__ieee754_pow+0x234>)
 80072f2:	428f      	cmp	r7, r1
 80072f4:	d10d      	bne.n	8007312 <__ieee754_pow+0x15a>
 80072f6:	f1b9 0f00 	cmp.w	r9, #0
 80072fa:	db0a      	blt.n	8007312 <__ieee754_pow+0x15a>
 80072fc:	ec43 2b10 	vmov	d0, r2, r3
 8007300:	b00d      	add	sp, #52	; 0x34
 8007302:	ecbd 8b06 	vpop	{d8-d10}
 8007306:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800730a:	f000 bc77 	b.w	8007bfc <__ieee754_sqrt>
 800730e:	2100      	movs	r1, #0
 8007310:	9100      	str	r1, [sp, #0]
 8007312:	ec43 2b10 	vmov	d0, r2, r3
 8007316:	e9cd 2304 	strd	r2, r3, [sp, #16]
 800731a:	f000 fd23 	bl	8007d64 <fabs>
 800731e:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8007322:	ec51 0b10 	vmov	r0, r1, d0
 8007326:	f1b8 0f00 	cmp.w	r8, #0
 800732a:	d12a      	bne.n	8007382 <__ieee754_pow+0x1ca>
 800732c:	b12c      	cbz	r4, 800733a <__ieee754_pow+0x182>
 800732e:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80073e4 <__ieee754_pow+0x22c>
 8007332:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8007336:	45e6      	cmp	lr, ip
 8007338:	d123      	bne.n	8007382 <__ieee754_pow+0x1ca>
 800733a:	2f00      	cmp	r7, #0
 800733c:	da05      	bge.n	800734a <__ieee754_pow+0x192>
 800733e:	4602      	mov	r2, r0
 8007340:	460b      	mov	r3, r1
 8007342:	2000      	movs	r0, #0
 8007344:	4927      	ldr	r1, [pc, #156]	; (80073e4 <__ieee754_pow+0x22c>)
 8007346:	f7f9 fa2d 	bl	80007a4 <__aeabi_ddiv>
 800734a:	f1b9 0f00 	cmp.w	r9, #0
 800734e:	dab7      	bge.n	80072c0 <__ieee754_pow+0x108>
 8007350:	9b00      	ldr	r3, [sp, #0]
 8007352:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8007356:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800735a:	4323      	orrs	r3, r4
 800735c:	d108      	bne.n	8007370 <__ieee754_pow+0x1b8>
 800735e:	4602      	mov	r2, r0
 8007360:	460b      	mov	r3, r1
 8007362:	4610      	mov	r0, r2
 8007364:	4619      	mov	r1, r3
 8007366:	f7f8 ff3b 	bl	80001e0 <__aeabi_dsub>
 800736a:	4602      	mov	r2, r0
 800736c:	460b      	mov	r3, r1
 800736e:	e78d      	b.n	800728c <__ieee754_pow+0xd4>
 8007370:	9b00      	ldr	r3, [sp, #0]
 8007372:	2b01      	cmp	r3, #1
 8007374:	d1a4      	bne.n	80072c0 <__ieee754_pow+0x108>
 8007376:	4602      	mov	r2, r0
 8007378:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 800737c:	4610      	mov	r0, r2
 800737e:	4619      	mov	r1, r3
 8007380:	e79e      	b.n	80072c0 <__ieee754_pow+0x108>
 8007382:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8007386:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 800738a:	950a      	str	r5, [sp, #40]	; 0x28
 800738c:	9d00      	ldr	r5, [sp, #0]
 800738e:	46ac      	mov	ip, r5
 8007390:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8007392:	ea5c 0505 	orrs.w	r5, ip, r5
 8007396:	d0e4      	beq.n	8007362 <__ieee754_pow+0x1aa>
 8007398:	4b15      	ldr	r3, [pc, #84]	; (80073f0 <__ieee754_pow+0x238>)
 800739a:	429e      	cmp	r6, r3
 800739c:	f340 80fc 	ble.w	8007598 <__ieee754_pow+0x3e0>
 80073a0:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 80073a4:	429e      	cmp	r6, r3
 80073a6:	4b10      	ldr	r3, [pc, #64]	; (80073e8 <__ieee754_pow+0x230>)
 80073a8:	dd07      	ble.n	80073ba <__ieee754_pow+0x202>
 80073aa:	429c      	cmp	r4, r3
 80073ac:	dc0a      	bgt.n	80073c4 <__ieee754_pow+0x20c>
 80073ae:	2f00      	cmp	r7, #0
 80073b0:	da84      	bge.n	80072bc <__ieee754_pow+0x104>
 80073b2:	a307      	add	r3, pc, #28	; (adr r3, 80073d0 <__ieee754_pow+0x218>)
 80073b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80073b8:	e795      	b.n	80072e6 <__ieee754_pow+0x12e>
 80073ba:	429c      	cmp	r4, r3
 80073bc:	dbf7      	blt.n	80073ae <__ieee754_pow+0x1f6>
 80073be:	4b09      	ldr	r3, [pc, #36]	; (80073e4 <__ieee754_pow+0x22c>)
 80073c0:	429c      	cmp	r4, r3
 80073c2:	dd17      	ble.n	80073f4 <__ieee754_pow+0x23c>
 80073c4:	2f00      	cmp	r7, #0
 80073c6:	dcf4      	bgt.n	80073b2 <__ieee754_pow+0x1fa>
 80073c8:	e778      	b.n	80072bc <__ieee754_pow+0x104>
 80073ca:	bf00      	nop
 80073cc:	f3af 8000 	nop.w
 80073d0:	8800759c 	.word	0x8800759c
 80073d4:	7e37e43c 	.word	0x7e37e43c
 80073d8:	7ff00000 	.word	0x7ff00000
 80073dc:	08007ff8 	.word	0x08007ff8
 80073e0:	433fffff 	.word	0x433fffff
 80073e4:	3ff00000 	.word	0x3ff00000
 80073e8:	3fefffff 	.word	0x3fefffff
 80073ec:	3fe00000 	.word	0x3fe00000
 80073f0:	41e00000 	.word	0x41e00000
 80073f4:	4b64      	ldr	r3, [pc, #400]	; (8007588 <__ieee754_pow+0x3d0>)
 80073f6:	2200      	movs	r2, #0
 80073f8:	f7f8 fef2 	bl	80001e0 <__aeabi_dsub>
 80073fc:	a356      	add	r3, pc, #344	; (adr r3, 8007558 <__ieee754_pow+0x3a0>)
 80073fe:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007402:	4604      	mov	r4, r0
 8007404:	460d      	mov	r5, r1
 8007406:	f7f9 f8a3 	bl	8000550 <__aeabi_dmul>
 800740a:	a355      	add	r3, pc, #340	; (adr r3, 8007560 <__ieee754_pow+0x3a8>)
 800740c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007410:	4606      	mov	r6, r0
 8007412:	460f      	mov	r7, r1
 8007414:	4620      	mov	r0, r4
 8007416:	4629      	mov	r1, r5
 8007418:	f7f9 f89a 	bl	8000550 <__aeabi_dmul>
 800741c:	4b5b      	ldr	r3, [pc, #364]	; (800758c <__ieee754_pow+0x3d4>)
 800741e:	4682      	mov	sl, r0
 8007420:	468b      	mov	fp, r1
 8007422:	2200      	movs	r2, #0
 8007424:	4620      	mov	r0, r4
 8007426:	4629      	mov	r1, r5
 8007428:	f7f9 f892 	bl	8000550 <__aeabi_dmul>
 800742c:	4602      	mov	r2, r0
 800742e:	460b      	mov	r3, r1
 8007430:	a14d      	add	r1, pc, #308	; (adr r1, 8007568 <__ieee754_pow+0x3b0>)
 8007432:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007436:	f7f8 fed3 	bl	80001e0 <__aeabi_dsub>
 800743a:	4622      	mov	r2, r4
 800743c:	462b      	mov	r3, r5
 800743e:	f7f9 f887 	bl	8000550 <__aeabi_dmul>
 8007442:	4602      	mov	r2, r0
 8007444:	460b      	mov	r3, r1
 8007446:	2000      	movs	r0, #0
 8007448:	4951      	ldr	r1, [pc, #324]	; (8007590 <__ieee754_pow+0x3d8>)
 800744a:	f7f8 fec9 	bl	80001e0 <__aeabi_dsub>
 800744e:	4622      	mov	r2, r4
 8007450:	4680      	mov	r8, r0
 8007452:	4689      	mov	r9, r1
 8007454:	462b      	mov	r3, r5
 8007456:	4620      	mov	r0, r4
 8007458:	4629      	mov	r1, r5
 800745a:	f7f9 f879 	bl	8000550 <__aeabi_dmul>
 800745e:	4602      	mov	r2, r0
 8007460:	460b      	mov	r3, r1
 8007462:	4640      	mov	r0, r8
 8007464:	4649      	mov	r1, r9
 8007466:	f7f9 f873 	bl	8000550 <__aeabi_dmul>
 800746a:	a341      	add	r3, pc, #260	; (adr r3, 8007570 <__ieee754_pow+0x3b8>)
 800746c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007470:	f7f9 f86e 	bl	8000550 <__aeabi_dmul>
 8007474:	4602      	mov	r2, r0
 8007476:	460b      	mov	r3, r1
 8007478:	4650      	mov	r0, sl
 800747a:	4659      	mov	r1, fp
 800747c:	f7f8 feb0 	bl	80001e0 <__aeabi_dsub>
 8007480:	4602      	mov	r2, r0
 8007482:	460b      	mov	r3, r1
 8007484:	4680      	mov	r8, r0
 8007486:	4689      	mov	r9, r1
 8007488:	4630      	mov	r0, r6
 800748a:	4639      	mov	r1, r7
 800748c:	f7f8 feaa 	bl	80001e4 <__adddf3>
 8007490:	2400      	movs	r4, #0
 8007492:	4632      	mov	r2, r6
 8007494:	463b      	mov	r3, r7
 8007496:	4620      	mov	r0, r4
 8007498:	460d      	mov	r5, r1
 800749a:	f7f8 fea1 	bl	80001e0 <__aeabi_dsub>
 800749e:	4602      	mov	r2, r0
 80074a0:	460b      	mov	r3, r1
 80074a2:	4640      	mov	r0, r8
 80074a4:	4649      	mov	r1, r9
 80074a6:	f7f8 fe9b 	bl	80001e0 <__aeabi_dsub>
 80074aa:	9b00      	ldr	r3, [sp, #0]
 80074ac:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80074ae:	3b01      	subs	r3, #1
 80074b0:	4313      	orrs	r3, r2
 80074b2:	4682      	mov	sl, r0
 80074b4:	468b      	mov	fp, r1
 80074b6:	f040 81f1 	bne.w	800789c <__ieee754_pow+0x6e4>
 80074ba:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8007578 <__ieee754_pow+0x3c0>
 80074be:	eeb0 8a47 	vmov.f32	s16, s14
 80074c2:	eef0 8a67 	vmov.f32	s17, s15
 80074c6:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80074ca:	2600      	movs	r6, #0
 80074cc:	4632      	mov	r2, r6
 80074ce:	463b      	mov	r3, r7
 80074d0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80074d4:	f7f8 fe84 	bl	80001e0 <__aeabi_dsub>
 80074d8:	4622      	mov	r2, r4
 80074da:	462b      	mov	r3, r5
 80074dc:	f7f9 f838 	bl	8000550 <__aeabi_dmul>
 80074e0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80074e4:	4680      	mov	r8, r0
 80074e6:	4689      	mov	r9, r1
 80074e8:	4650      	mov	r0, sl
 80074ea:	4659      	mov	r1, fp
 80074ec:	f7f9 f830 	bl	8000550 <__aeabi_dmul>
 80074f0:	4602      	mov	r2, r0
 80074f2:	460b      	mov	r3, r1
 80074f4:	4640      	mov	r0, r8
 80074f6:	4649      	mov	r1, r9
 80074f8:	f7f8 fe74 	bl	80001e4 <__adddf3>
 80074fc:	4632      	mov	r2, r6
 80074fe:	463b      	mov	r3, r7
 8007500:	4680      	mov	r8, r0
 8007502:	4689      	mov	r9, r1
 8007504:	4620      	mov	r0, r4
 8007506:	4629      	mov	r1, r5
 8007508:	f7f9 f822 	bl	8000550 <__aeabi_dmul>
 800750c:	460b      	mov	r3, r1
 800750e:	4604      	mov	r4, r0
 8007510:	460d      	mov	r5, r1
 8007512:	4602      	mov	r2, r0
 8007514:	4649      	mov	r1, r9
 8007516:	4640      	mov	r0, r8
 8007518:	f7f8 fe64 	bl	80001e4 <__adddf3>
 800751c:	4b1d      	ldr	r3, [pc, #116]	; (8007594 <__ieee754_pow+0x3dc>)
 800751e:	4299      	cmp	r1, r3
 8007520:	ec45 4b19 	vmov	d9, r4, r5
 8007524:	4606      	mov	r6, r0
 8007526:	460f      	mov	r7, r1
 8007528:	468b      	mov	fp, r1
 800752a:	f340 82fe 	ble.w	8007b2a <__ieee754_pow+0x972>
 800752e:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8007532:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8007536:	4303      	orrs	r3, r0
 8007538:	f000 81f0 	beq.w	800791c <__ieee754_pow+0x764>
 800753c:	a310      	add	r3, pc, #64	; (adr r3, 8007580 <__ieee754_pow+0x3c8>)
 800753e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007542:	ec51 0b18 	vmov	r0, r1, d8
 8007546:	f7f9 f803 	bl	8000550 <__aeabi_dmul>
 800754a:	a30d      	add	r3, pc, #52	; (adr r3, 8007580 <__ieee754_pow+0x3c8>)
 800754c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007550:	e6cb      	b.n	80072ea <__ieee754_pow+0x132>
 8007552:	bf00      	nop
 8007554:	f3af 8000 	nop.w
 8007558:	60000000 	.word	0x60000000
 800755c:	3ff71547 	.word	0x3ff71547
 8007560:	f85ddf44 	.word	0xf85ddf44
 8007564:	3e54ae0b 	.word	0x3e54ae0b
 8007568:	55555555 	.word	0x55555555
 800756c:	3fd55555 	.word	0x3fd55555
 8007570:	652b82fe 	.word	0x652b82fe
 8007574:	3ff71547 	.word	0x3ff71547
 8007578:	00000000 	.word	0x00000000
 800757c:	bff00000 	.word	0xbff00000
 8007580:	8800759c 	.word	0x8800759c
 8007584:	7e37e43c 	.word	0x7e37e43c
 8007588:	3ff00000 	.word	0x3ff00000
 800758c:	3fd00000 	.word	0x3fd00000
 8007590:	3fe00000 	.word	0x3fe00000
 8007594:	408fffff 	.word	0x408fffff
 8007598:	4bd7      	ldr	r3, [pc, #860]	; (80078f8 <__ieee754_pow+0x740>)
 800759a:	ea03 0309 	and.w	r3, r3, r9
 800759e:	2200      	movs	r2, #0
 80075a0:	b92b      	cbnz	r3, 80075ae <__ieee754_pow+0x3f6>
 80075a2:	4bd6      	ldr	r3, [pc, #856]	; (80078fc <__ieee754_pow+0x744>)
 80075a4:	f7f8 ffd4 	bl	8000550 <__aeabi_dmul>
 80075a8:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80075ac:	460c      	mov	r4, r1
 80075ae:	1523      	asrs	r3, r4, #20
 80075b0:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80075b4:	4413      	add	r3, r2
 80075b6:	9309      	str	r3, [sp, #36]	; 0x24
 80075b8:	4bd1      	ldr	r3, [pc, #836]	; (8007900 <__ieee754_pow+0x748>)
 80075ba:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80075be:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80075c2:	429c      	cmp	r4, r3
 80075c4:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80075c8:	dd08      	ble.n	80075dc <__ieee754_pow+0x424>
 80075ca:	4bce      	ldr	r3, [pc, #824]	; (8007904 <__ieee754_pow+0x74c>)
 80075cc:	429c      	cmp	r4, r3
 80075ce:	f340 8163 	ble.w	8007898 <__ieee754_pow+0x6e0>
 80075d2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80075d4:	3301      	adds	r3, #1
 80075d6:	9309      	str	r3, [sp, #36]	; 0x24
 80075d8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80075dc:	2400      	movs	r4, #0
 80075de:	00e3      	lsls	r3, r4, #3
 80075e0:	930b      	str	r3, [sp, #44]	; 0x2c
 80075e2:	4bc9      	ldr	r3, [pc, #804]	; (8007908 <__ieee754_pow+0x750>)
 80075e4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80075e8:	ed93 7b00 	vldr	d7, [r3]
 80075ec:	4629      	mov	r1, r5
 80075ee:	ec53 2b17 	vmov	r2, r3, d7
 80075f2:	eeb0 8a47 	vmov.f32	s16, s14
 80075f6:	eef0 8a67 	vmov.f32	s17, s15
 80075fa:	4682      	mov	sl, r0
 80075fc:	f7f8 fdf0 	bl	80001e0 <__aeabi_dsub>
 8007600:	4652      	mov	r2, sl
 8007602:	4606      	mov	r6, r0
 8007604:	460f      	mov	r7, r1
 8007606:	462b      	mov	r3, r5
 8007608:	ec51 0b18 	vmov	r0, r1, d8
 800760c:	f7f8 fdea 	bl	80001e4 <__adddf3>
 8007610:	4602      	mov	r2, r0
 8007612:	460b      	mov	r3, r1
 8007614:	2000      	movs	r0, #0
 8007616:	49bd      	ldr	r1, [pc, #756]	; (800790c <__ieee754_pow+0x754>)
 8007618:	f7f9 f8c4 	bl	80007a4 <__aeabi_ddiv>
 800761c:	ec41 0b19 	vmov	d9, r0, r1
 8007620:	4602      	mov	r2, r0
 8007622:	460b      	mov	r3, r1
 8007624:	4630      	mov	r0, r6
 8007626:	4639      	mov	r1, r7
 8007628:	f7f8 ff92 	bl	8000550 <__aeabi_dmul>
 800762c:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8007630:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8007634:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8007638:	2300      	movs	r3, #0
 800763a:	9304      	str	r3, [sp, #16]
 800763c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8007640:	46ab      	mov	fp, r5
 8007642:	106d      	asrs	r5, r5, #1
 8007644:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8007648:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 800764c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8007650:	2200      	movs	r2, #0
 8007652:	4640      	mov	r0, r8
 8007654:	4649      	mov	r1, r9
 8007656:	4614      	mov	r4, r2
 8007658:	461d      	mov	r5, r3
 800765a:	f7f8 ff79 	bl	8000550 <__aeabi_dmul>
 800765e:	4602      	mov	r2, r0
 8007660:	460b      	mov	r3, r1
 8007662:	4630      	mov	r0, r6
 8007664:	4639      	mov	r1, r7
 8007666:	f7f8 fdbb 	bl	80001e0 <__aeabi_dsub>
 800766a:	ec53 2b18 	vmov	r2, r3, d8
 800766e:	4606      	mov	r6, r0
 8007670:	460f      	mov	r7, r1
 8007672:	4620      	mov	r0, r4
 8007674:	4629      	mov	r1, r5
 8007676:	f7f8 fdb3 	bl	80001e0 <__aeabi_dsub>
 800767a:	4602      	mov	r2, r0
 800767c:	460b      	mov	r3, r1
 800767e:	4650      	mov	r0, sl
 8007680:	4659      	mov	r1, fp
 8007682:	f7f8 fdad 	bl	80001e0 <__aeabi_dsub>
 8007686:	4642      	mov	r2, r8
 8007688:	464b      	mov	r3, r9
 800768a:	f7f8 ff61 	bl	8000550 <__aeabi_dmul>
 800768e:	4602      	mov	r2, r0
 8007690:	460b      	mov	r3, r1
 8007692:	4630      	mov	r0, r6
 8007694:	4639      	mov	r1, r7
 8007696:	f7f8 fda3 	bl	80001e0 <__aeabi_dsub>
 800769a:	ec53 2b19 	vmov	r2, r3, d9
 800769e:	f7f8 ff57 	bl	8000550 <__aeabi_dmul>
 80076a2:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80076a6:	ec41 0b18 	vmov	d8, r0, r1
 80076aa:	4610      	mov	r0, r2
 80076ac:	4619      	mov	r1, r3
 80076ae:	f7f8 ff4f 	bl	8000550 <__aeabi_dmul>
 80076b2:	a37d      	add	r3, pc, #500	; (adr r3, 80078a8 <__ieee754_pow+0x6f0>)
 80076b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076b8:	4604      	mov	r4, r0
 80076ba:	460d      	mov	r5, r1
 80076bc:	f7f8 ff48 	bl	8000550 <__aeabi_dmul>
 80076c0:	a37b      	add	r3, pc, #492	; (adr r3, 80078b0 <__ieee754_pow+0x6f8>)
 80076c2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076c6:	f7f8 fd8d 	bl	80001e4 <__adddf3>
 80076ca:	4622      	mov	r2, r4
 80076cc:	462b      	mov	r3, r5
 80076ce:	f7f8 ff3f 	bl	8000550 <__aeabi_dmul>
 80076d2:	a379      	add	r3, pc, #484	; (adr r3, 80078b8 <__ieee754_pow+0x700>)
 80076d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076d8:	f7f8 fd84 	bl	80001e4 <__adddf3>
 80076dc:	4622      	mov	r2, r4
 80076de:	462b      	mov	r3, r5
 80076e0:	f7f8 ff36 	bl	8000550 <__aeabi_dmul>
 80076e4:	a376      	add	r3, pc, #472	; (adr r3, 80078c0 <__ieee754_pow+0x708>)
 80076e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076ea:	f7f8 fd7b 	bl	80001e4 <__adddf3>
 80076ee:	4622      	mov	r2, r4
 80076f0:	462b      	mov	r3, r5
 80076f2:	f7f8 ff2d 	bl	8000550 <__aeabi_dmul>
 80076f6:	a374      	add	r3, pc, #464	; (adr r3, 80078c8 <__ieee754_pow+0x710>)
 80076f8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80076fc:	f7f8 fd72 	bl	80001e4 <__adddf3>
 8007700:	4622      	mov	r2, r4
 8007702:	462b      	mov	r3, r5
 8007704:	f7f8 ff24 	bl	8000550 <__aeabi_dmul>
 8007708:	a371      	add	r3, pc, #452	; (adr r3, 80078d0 <__ieee754_pow+0x718>)
 800770a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800770e:	f7f8 fd69 	bl	80001e4 <__adddf3>
 8007712:	4622      	mov	r2, r4
 8007714:	4606      	mov	r6, r0
 8007716:	460f      	mov	r7, r1
 8007718:	462b      	mov	r3, r5
 800771a:	4620      	mov	r0, r4
 800771c:	4629      	mov	r1, r5
 800771e:	f7f8 ff17 	bl	8000550 <__aeabi_dmul>
 8007722:	4602      	mov	r2, r0
 8007724:	460b      	mov	r3, r1
 8007726:	4630      	mov	r0, r6
 8007728:	4639      	mov	r1, r7
 800772a:	f7f8 ff11 	bl	8000550 <__aeabi_dmul>
 800772e:	4642      	mov	r2, r8
 8007730:	4604      	mov	r4, r0
 8007732:	460d      	mov	r5, r1
 8007734:	464b      	mov	r3, r9
 8007736:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 800773a:	f7f8 fd53 	bl	80001e4 <__adddf3>
 800773e:	ec53 2b18 	vmov	r2, r3, d8
 8007742:	f7f8 ff05 	bl	8000550 <__aeabi_dmul>
 8007746:	4622      	mov	r2, r4
 8007748:	462b      	mov	r3, r5
 800774a:	f7f8 fd4b 	bl	80001e4 <__adddf3>
 800774e:	4642      	mov	r2, r8
 8007750:	4682      	mov	sl, r0
 8007752:	468b      	mov	fp, r1
 8007754:	464b      	mov	r3, r9
 8007756:	4640      	mov	r0, r8
 8007758:	4649      	mov	r1, r9
 800775a:	f7f8 fef9 	bl	8000550 <__aeabi_dmul>
 800775e:	4b6c      	ldr	r3, [pc, #432]	; (8007910 <__ieee754_pow+0x758>)
 8007760:	2200      	movs	r2, #0
 8007762:	4606      	mov	r6, r0
 8007764:	460f      	mov	r7, r1
 8007766:	f7f8 fd3d 	bl	80001e4 <__adddf3>
 800776a:	4652      	mov	r2, sl
 800776c:	465b      	mov	r3, fp
 800776e:	f7f8 fd39 	bl	80001e4 <__adddf3>
 8007772:	9c04      	ldr	r4, [sp, #16]
 8007774:	460d      	mov	r5, r1
 8007776:	4622      	mov	r2, r4
 8007778:	460b      	mov	r3, r1
 800777a:	4640      	mov	r0, r8
 800777c:	4649      	mov	r1, r9
 800777e:	f7f8 fee7 	bl	8000550 <__aeabi_dmul>
 8007782:	4b63      	ldr	r3, [pc, #396]	; (8007910 <__ieee754_pow+0x758>)
 8007784:	4680      	mov	r8, r0
 8007786:	4689      	mov	r9, r1
 8007788:	2200      	movs	r2, #0
 800778a:	4620      	mov	r0, r4
 800778c:	4629      	mov	r1, r5
 800778e:	f7f8 fd27 	bl	80001e0 <__aeabi_dsub>
 8007792:	4632      	mov	r2, r6
 8007794:	463b      	mov	r3, r7
 8007796:	f7f8 fd23 	bl	80001e0 <__aeabi_dsub>
 800779a:	4602      	mov	r2, r0
 800779c:	460b      	mov	r3, r1
 800779e:	4650      	mov	r0, sl
 80077a0:	4659      	mov	r1, fp
 80077a2:	f7f8 fd1d 	bl	80001e0 <__aeabi_dsub>
 80077a6:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80077aa:	f7f8 fed1 	bl	8000550 <__aeabi_dmul>
 80077ae:	4622      	mov	r2, r4
 80077b0:	4606      	mov	r6, r0
 80077b2:	460f      	mov	r7, r1
 80077b4:	462b      	mov	r3, r5
 80077b6:	ec51 0b18 	vmov	r0, r1, d8
 80077ba:	f7f8 fec9 	bl	8000550 <__aeabi_dmul>
 80077be:	4602      	mov	r2, r0
 80077c0:	460b      	mov	r3, r1
 80077c2:	4630      	mov	r0, r6
 80077c4:	4639      	mov	r1, r7
 80077c6:	f7f8 fd0d 	bl	80001e4 <__adddf3>
 80077ca:	4606      	mov	r6, r0
 80077cc:	460f      	mov	r7, r1
 80077ce:	4602      	mov	r2, r0
 80077d0:	460b      	mov	r3, r1
 80077d2:	4640      	mov	r0, r8
 80077d4:	4649      	mov	r1, r9
 80077d6:	f7f8 fd05 	bl	80001e4 <__adddf3>
 80077da:	9c04      	ldr	r4, [sp, #16]
 80077dc:	a33e      	add	r3, pc, #248	; (adr r3, 80078d8 <__ieee754_pow+0x720>)
 80077de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80077e2:	4620      	mov	r0, r4
 80077e4:	460d      	mov	r5, r1
 80077e6:	f7f8 feb3 	bl	8000550 <__aeabi_dmul>
 80077ea:	4642      	mov	r2, r8
 80077ec:	ec41 0b18 	vmov	d8, r0, r1
 80077f0:	464b      	mov	r3, r9
 80077f2:	4620      	mov	r0, r4
 80077f4:	4629      	mov	r1, r5
 80077f6:	f7f8 fcf3 	bl	80001e0 <__aeabi_dsub>
 80077fa:	4602      	mov	r2, r0
 80077fc:	460b      	mov	r3, r1
 80077fe:	4630      	mov	r0, r6
 8007800:	4639      	mov	r1, r7
 8007802:	f7f8 fced 	bl	80001e0 <__aeabi_dsub>
 8007806:	a336      	add	r3, pc, #216	; (adr r3, 80078e0 <__ieee754_pow+0x728>)
 8007808:	e9d3 2300 	ldrd	r2, r3, [r3]
 800780c:	f7f8 fea0 	bl	8000550 <__aeabi_dmul>
 8007810:	a335      	add	r3, pc, #212	; (adr r3, 80078e8 <__ieee754_pow+0x730>)
 8007812:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007816:	4606      	mov	r6, r0
 8007818:	460f      	mov	r7, r1
 800781a:	4620      	mov	r0, r4
 800781c:	4629      	mov	r1, r5
 800781e:	f7f8 fe97 	bl	8000550 <__aeabi_dmul>
 8007822:	4602      	mov	r2, r0
 8007824:	460b      	mov	r3, r1
 8007826:	4630      	mov	r0, r6
 8007828:	4639      	mov	r1, r7
 800782a:	f7f8 fcdb 	bl	80001e4 <__adddf3>
 800782e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007830:	4b38      	ldr	r3, [pc, #224]	; (8007914 <__ieee754_pow+0x75c>)
 8007832:	4413      	add	r3, r2
 8007834:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007838:	f7f8 fcd4 	bl	80001e4 <__adddf3>
 800783c:	4682      	mov	sl, r0
 800783e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8007840:	468b      	mov	fp, r1
 8007842:	f7f8 fe1b 	bl	800047c <__aeabi_i2d>
 8007846:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8007848:	4b33      	ldr	r3, [pc, #204]	; (8007918 <__ieee754_pow+0x760>)
 800784a:	4413      	add	r3, r2
 800784c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8007850:	4606      	mov	r6, r0
 8007852:	460f      	mov	r7, r1
 8007854:	4652      	mov	r2, sl
 8007856:	465b      	mov	r3, fp
 8007858:	ec51 0b18 	vmov	r0, r1, d8
 800785c:	f7f8 fcc2 	bl	80001e4 <__adddf3>
 8007860:	4642      	mov	r2, r8
 8007862:	464b      	mov	r3, r9
 8007864:	f7f8 fcbe 	bl	80001e4 <__adddf3>
 8007868:	4632      	mov	r2, r6
 800786a:	463b      	mov	r3, r7
 800786c:	f7f8 fcba 	bl	80001e4 <__adddf3>
 8007870:	9c04      	ldr	r4, [sp, #16]
 8007872:	4632      	mov	r2, r6
 8007874:	463b      	mov	r3, r7
 8007876:	4620      	mov	r0, r4
 8007878:	460d      	mov	r5, r1
 800787a:	f7f8 fcb1 	bl	80001e0 <__aeabi_dsub>
 800787e:	4642      	mov	r2, r8
 8007880:	464b      	mov	r3, r9
 8007882:	f7f8 fcad 	bl	80001e0 <__aeabi_dsub>
 8007886:	ec53 2b18 	vmov	r2, r3, d8
 800788a:	f7f8 fca9 	bl	80001e0 <__aeabi_dsub>
 800788e:	4602      	mov	r2, r0
 8007890:	460b      	mov	r3, r1
 8007892:	4650      	mov	r0, sl
 8007894:	4659      	mov	r1, fp
 8007896:	e606      	b.n	80074a6 <__ieee754_pow+0x2ee>
 8007898:	2401      	movs	r4, #1
 800789a:	e6a0      	b.n	80075de <__ieee754_pow+0x426>
 800789c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80078f0 <__ieee754_pow+0x738>
 80078a0:	e60d      	b.n	80074be <__ieee754_pow+0x306>
 80078a2:	bf00      	nop
 80078a4:	f3af 8000 	nop.w
 80078a8:	4a454eef 	.word	0x4a454eef
 80078ac:	3fca7e28 	.word	0x3fca7e28
 80078b0:	93c9db65 	.word	0x93c9db65
 80078b4:	3fcd864a 	.word	0x3fcd864a
 80078b8:	a91d4101 	.word	0xa91d4101
 80078bc:	3fd17460 	.word	0x3fd17460
 80078c0:	518f264d 	.word	0x518f264d
 80078c4:	3fd55555 	.word	0x3fd55555
 80078c8:	db6fabff 	.word	0xdb6fabff
 80078cc:	3fdb6db6 	.word	0x3fdb6db6
 80078d0:	33333303 	.word	0x33333303
 80078d4:	3fe33333 	.word	0x3fe33333
 80078d8:	e0000000 	.word	0xe0000000
 80078dc:	3feec709 	.word	0x3feec709
 80078e0:	dc3a03fd 	.word	0xdc3a03fd
 80078e4:	3feec709 	.word	0x3feec709
 80078e8:	145b01f5 	.word	0x145b01f5
 80078ec:	be3e2fe0 	.word	0xbe3e2fe0
 80078f0:	00000000 	.word	0x00000000
 80078f4:	3ff00000 	.word	0x3ff00000
 80078f8:	7ff00000 	.word	0x7ff00000
 80078fc:	43400000 	.word	0x43400000
 8007900:	0003988e 	.word	0x0003988e
 8007904:	000bb679 	.word	0x000bb679
 8007908:	08008000 	.word	0x08008000
 800790c:	3ff00000 	.word	0x3ff00000
 8007910:	40080000 	.word	0x40080000
 8007914:	08008020 	.word	0x08008020
 8007918:	08008010 	.word	0x08008010
 800791c:	a3b5      	add	r3, pc, #724	; (adr r3, 8007bf4 <__ieee754_pow+0xa3c>)
 800791e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007922:	4640      	mov	r0, r8
 8007924:	4649      	mov	r1, r9
 8007926:	f7f8 fc5d 	bl	80001e4 <__adddf3>
 800792a:	4622      	mov	r2, r4
 800792c:	ec41 0b1a 	vmov	d10, r0, r1
 8007930:	462b      	mov	r3, r5
 8007932:	4630      	mov	r0, r6
 8007934:	4639      	mov	r1, r7
 8007936:	f7f8 fc53 	bl	80001e0 <__aeabi_dsub>
 800793a:	4602      	mov	r2, r0
 800793c:	460b      	mov	r3, r1
 800793e:	ec51 0b1a 	vmov	r0, r1, d10
 8007942:	f7f9 f895 	bl	8000a70 <__aeabi_dcmpgt>
 8007946:	2800      	cmp	r0, #0
 8007948:	f47f adf8 	bne.w	800753c <__ieee754_pow+0x384>
 800794c:	4aa4      	ldr	r2, [pc, #656]	; (8007be0 <__ieee754_pow+0xa28>)
 800794e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8007952:	4293      	cmp	r3, r2
 8007954:	f340 810b 	ble.w	8007b6e <__ieee754_pow+0x9b6>
 8007958:	151b      	asrs	r3, r3, #20
 800795a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800795e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8007962:	fa4a f303 	asr.w	r3, sl, r3
 8007966:	445b      	add	r3, fp
 8007968:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800796c:	4e9d      	ldr	r6, [pc, #628]	; (8007be4 <__ieee754_pow+0xa2c>)
 800796e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8007972:	4116      	asrs	r6, r2
 8007974:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8007978:	2000      	movs	r0, #0
 800797a:	ea23 0106 	bic.w	r1, r3, r6
 800797e:	f1c2 0214 	rsb	r2, r2, #20
 8007982:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8007986:	fa4a fa02 	asr.w	sl, sl, r2
 800798a:	f1bb 0f00 	cmp.w	fp, #0
 800798e:	4602      	mov	r2, r0
 8007990:	460b      	mov	r3, r1
 8007992:	4620      	mov	r0, r4
 8007994:	4629      	mov	r1, r5
 8007996:	bfb8      	it	lt
 8007998:	f1ca 0a00 	rsblt	sl, sl, #0
 800799c:	f7f8 fc20 	bl	80001e0 <__aeabi_dsub>
 80079a0:	ec41 0b19 	vmov	d9, r0, r1
 80079a4:	4642      	mov	r2, r8
 80079a6:	464b      	mov	r3, r9
 80079a8:	ec51 0b19 	vmov	r0, r1, d9
 80079ac:	f7f8 fc1a 	bl	80001e4 <__adddf3>
 80079b0:	2400      	movs	r4, #0
 80079b2:	a379      	add	r3, pc, #484	; (adr r3, 8007b98 <__ieee754_pow+0x9e0>)
 80079b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079b8:	4620      	mov	r0, r4
 80079ba:	460d      	mov	r5, r1
 80079bc:	f7f8 fdc8 	bl	8000550 <__aeabi_dmul>
 80079c0:	ec53 2b19 	vmov	r2, r3, d9
 80079c4:	4606      	mov	r6, r0
 80079c6:	460f      	mov	r7, r1
 80079c8:	4620      	mov	r0, r4
 80079ca:	4629      	mov	r1, r5
 80079cc:	f7f8 fc08 	bl	80001e0 <__aeabi_dsub>
 80079d0:	4602      	mov	r2, r0
 80079d2:	460b      	mov	r3, r1
 80079d4:	4640      	mov	r0, r8
 80079d6:	4649      	mov	r1, r9
 80079d8:	f7f8 fc02 	bl	80001e0 <__aeabi_dsub>
 80079dc:	a370      	add	r3, pc, #448	; (adr r3, 8007ba0 <__ieee754_pow+0x9e8>)
 80079de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079e2:	f7f8 fdb5 	bl	8000550 <__aeabi_dmul>
 80079e6:	a370      	add	r3, pc, #448	; (adr r3, 8007ba8 <__ieee754_pow+0x9f0>)
 80079e8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80079ec:	4680      	mov	r8, r0
 80079ee:	4689      	mov	r9, r1
 80079f0:	4620      	mov	r0, r4
 80079f2:	4629      	mov	r1, r5
 80079f4:	f7f8 fdac 	bl	8000550 <__aeabi_dmul>
 80079f8:	4602      	mov	r2, r0
 80079fa:	460b      	mov	r3, r1
 80079fc:	4640      	mov	r0, r8
 80079fe:	4649      	mov	r1, r9
 8007a00:	f7f8 fbf0 	bl	80001e4 <__adddf3>
 8007a04:	4604      	mov	r4, r0
 8007a06:	460d      	mov	r5, r1
 8007a08:	4602      	mov	r2, r0
 8007a0a:	460b      	mov	r3, r1
 8007a0c:	4630      	mov	r0, r6
 8007a0e:	4639      	mov	r1, r7
 8007a10:	f7f8 fbe8 	bl	80001e4 <__adddf3>
 8007a14:	4632      	mov	r2, r6
 8007a16:	463b      	mov	r3, r7
 8007a18:	4680      	mov	r8, r0
 8007a1a:	4689      	mov	r9, r1
 8007a1c:	f7f8 fbe0 	bl	80001e0 <__aeabi_dsub>
 8007a20:	4602      	mov	r2, r0
 8007a22:	460b      	mov	r3, r1
 8007a24:	4620      	mov	r0, r4
 8007a26:	4629      	mov	r1, r5
 8007a28:	f7f8 fbda 	bl	80001e0 <__aeabi_dsub>
 8007a2c:	4642      	mov	r2, r8
 8007a2e:	4606      	mov	r6, r0
 8007a30:	460f      	mov	r7, r1
 8007a32:	464b      	mov	r3, r9
 8007a34:	4640      	mov	r0, r8
 8007a36:	4649      	mov	r1, r9
 8007a38:	f7f8 fd8a 	bl	8000550 <__aeabi_dmul>
 8007a3c:	a35c      	add	r3, pc, #368	; (adr r3, 8007bb0 <__ieee754_pow+0x9f8>)
 8007a3e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a42:	4604      	mov	r4, r0
 8007a44:	460d      	mov	r5, r1
 8007a46:	f7f8 fd83 	bl	8000550 <__aeabi_dmul>
 8007a4a:	a35b      	add	r3, pc, #364	; (adr r3, 8007bb8 <__ieee754_pow+0xa00>)
 8007a4c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a50:	f7f8 fbc6 	bl	80001e0 <__aeabi_dsub>
 8007a54:	4622      	mov	r2, r4
 8007a56:	462b      	mov	r3, r5
 8007a58:	f7f8 fd7a 	bl	8000550 <__aeabi_dmul>
 8007a5c:	a358      	add	r3, pc, #352	; (adr r3, 8007bc0 <__ieee754_pow+0xa08>)
 8007a5e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a62:	f7f8 fbbf 	bl	80001e4 <__adddf3>
 8007a66:	4622      	mov	r2, r4
 8007a68:	462b      	mov	r3, r5
 8007a6a:	f7f8 fd71 	bl	8000550 <__aeabi_dmul>
 8007a6e:	a356      	add	r3, pc, #344	; (adr r3, 8007bc8 <__ieee754_pow+0xa10>)
 8007a70:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a74:	f7f8 fbb4 	bl	80001e0 <__aeabi_dsub>
 8007a78:	4622      	mov	r2, r4
 8007a7a:	462b      	mov	r3, r5
 8007a7c:	f7f8 fd68 	bl	8000550 <__aeabi_dmul>
 8007a80:	a353      	add	r3, pc, #332	; (adr r3, 8007bd0 <__ieee754_pow+0xa18>)
 8007a82:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007a86:	f7f8 fbad 	bl	80001e4 <__adddf3>
 8007a8a:	4622      	mov	r2, r4
 8007a8c:	462b      	mov	r3, r5
 8007a8e:	f7f8 fd5f 	bl	8000550 <__aeabi_dmul>
 8007a92:	4602      	mov	r2, r0
 8007a94:	460b      	mov	r3, r1
 8007a96:	4640      	mov	r0, r8
 8007a98:	4649      	mov	r1, r9
 8007a9a:	f7f8 fba1 	bl	80001e0 <__aeabi_dsub>
 8007a9e:	4604      	mov	r4, r0
 8007aa0:	460d      	mov	r5, r1
 8007aa2:	4602      	mov	r2, r0
 8007aa4:	460b      	mov	r3, r1
 8007aa6:	4640      	mov	r0, r8
 8007aa8:	4649      	mov	r1, r9
 8007aaa:	f7f8 fd51 	bl	8000550 <__aeabi_dmul>
 8007aae:	2200      	movs	r2, #0
 8007ab0:	ec41 0b19 	vmov	d9, r0, r1
 8007ab4:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8007ab8:	4620      	mov	r0, r4
 8007aba:	4629      	mov	r1, r5
 8007abc:	f7f8 fb90 	bl	80001e0 <__aeabi_dsub>
 8007ac0:	4602      	mov	r2, r0
 8007ac2:	460b      	mov	r3, r1
 8007ac4:	ec51 0b19 	vmov	r0, r1, d9
 8007ac8:	f7f8 fe6c 	bl	80007a4 <__aeabi_ddiv>
 8007acc:	4632      	mov	r2, r6
 8007ace:	4604      	mov	r4, r0
 8007ad0:	460d      	mov	r5, r1
 8007ad2:	463b      	mov	r3, r7
 8007ad4:	4640      	mov	r0, r8
 8007ad6:	4649      	mov	r1, r9
 8007ad8:	f7f8 fd3a 	bl	8000550 <__aeabi_dmul>
 8007adc:	4632      	mov	r2, r6
 8007ade:	463b      	mov	r3, r7
 8007ae0:	f7f8 fb80 	bl	80001e4 <__adddf3>
 8007ae4:	4602      	mov	r2, r0
 8007ae6:	460b      	mov	r3, r1
 8007ae8:	4620      	mov	r0, r4
 8007aea:	4629      	mov	r1, r5
 8007aec:	f7f8 fb78 	bl	80001e0 <__aeabi_dsub>
 8007af0:	4642      	mov	r2, r8
 8007af2:	464b      	mov	r3, r9
 8007af4:	f7f8 fb74 	bl	80001e0 <__aeabi_dsub>
 8007af8:	460b      	mov	r3, r1
 8007afa:	4602      	mov	r2, r0
 8007afc:	493a      	ldr	r1, [pc, #232]	; (8007be8 <__ieee754_pow+0xa30>)
 8007afe:	2000      	movs	r0, #0
 8007b00:	f7f8 fb6e 	bl	80001e0 <__aeabi_dsub>
 8007b04:	e9cd 0100 	strd	r0, r1, [sp]
 8007b08:	9b01      	ldr	r3, [sp, #4]
 8007b0a:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8007b0e:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8007b12:	da2f      	bge.n	8007b74 <__ieee754_pow+0x9bc>
 8007b14:	4650      	mov	r0, sl
 8007b16:	ed9d 0b00 	vldr	d0, [sp]
 8007b1a:	f000 f9cd 	bl	8007eb8 <scalbn>
 8007b1e:	ec51 0b10 	vmov	r0, r1, d0
 8007b22:	ec53 2b18 	vmov	r2, r3, d8
 8007b26:	f7ff bbe0 	b.w	80072ea <__ieee754_pow+0x132>
 8007b2a:	4b30      	ldr	r3, [pc, #192]	; (8007bec <__ieee754_pow+0xa34>)
 8007b2c:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8007b30:	429e      	cmp	r6, r3
 8007b32:	f77f af0b 	ble.w	800794c <__ieee754_pow+0x794>
 8007b36:	4b2e      	ldr	r3, [pc, #184]	; (8007bf0 <__ieee754_pow+0xa38>)
 8007b38:	440b      	add	r3, r1
 8007b3a:	4303      	orrs	r3, r0
 8007b3c:	d00b      	beq.n	8007b56 <__ieee754_pow+0x99e>
 8007b3e:	a326      	add	r3, pc, #152	; (adr r3, 8007bd8 <__ieee754_pow+0xa20>)
 8007b40:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b44:	ec51 0b18 	vmov	r0, r1, d8
 8007b48:	f7f8 fd02 	bl	8000550 <__aeabi_dmul>
 8007b4c:	a322      	add	r3, pc, #136	; (adr r3, 8007bd8 <__ieee754_pow+0xa20>)
 8007b4e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007b52:	f7ff bbca 	b.w	80072ea <__ieee754_pow+0x132>
 8007b56:	4622      	mov	r2, r4
 8007b58:	462b      	mov	r3, r5
 8007b5a:	f7f8 fb41 	bl	80001e0 <__aeabi_dsub>
 8007b5e:	4642      	mov	r2, r8
 8007b60:	464b      	mov	r3, r9
 8007b62:	f7f8 ff7b 	bl	8000a5c <__aeabi_dcmpge>
 8007b66:	2800      	cmp	r0, #0
 8007b68:	f43f aef0 	beq.w	800794c <__ieee754_pow+0x794>
 8007b6c:	e7e7      	b.n	8007b3e <__ieee754_pow+0x986>
 8007b6e:	f04f 0a00 	mov.w	sl, #0
 8007b72:	e717      	b.n	80079a4 <__ieee754_pow+0x7ec>
 8007b74:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007b78:	4619      	mov	r1, r3
 8007b7a:	e7d2      	b.n	8007b22 <__ieee754_pow+0x96a>
 8007b7c:	491a      	ldr	r1, [pc, #104]	; (8007be8 <__ieee754_pow+0xa30>)
 8007b7e:	2000      	movs	r0, #0
 8007b80:	f7ff bb9e 	b.w	80072c0 <__ieee754_pow+0x108>
 8007b84:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8007b88:	f7ff bb9a 	b.w	80072c0 <__ieee754_pow+0x108>
 8007b8c:	9000      	str	r0, [sp, #0]
 8007b8e:	f7ff bb76 	b.w	800727e <__ieee754_pow+0xc6>
 8007b92:	2100      	movs	r1, #0
 8007b94:	f7ff bb60 	b.w	8007258 <__ieee754_pow+0xa0>
 8007b98:	00000000 	.word	0x00000000
 8007b9c:	3fe62e43 	.word	0x3fe62e43
 8007ba0:	fefa39ef 	.word	0xfefa39ef
 8007ba4:	3fe62e42 	.word	0x3fe62e42
 8007ba8:	0ca86c39 	.word	0x0ca86c39
 8007bac:	be205c61 	.word	0xbe205c61
 8007bb0:	72bea4d0 	.word	0x72bea4d0
 8007bb4:	3e663769 	.word	0x3e663769
 8007bb8:	c5d26bf1 	.word	0xc5d26bf1
 8007bbc:	3ebbbd41 	.word	0x3ebbbd41
 8007bc0:	af25de2c 	.word	0xaf25de2c
 8007bc4:	3f11566a 	.word	0x3f11566a
 8007bc8:	16bebd93 	.word	0x16bebd93
 8007bcc:	3f66c16c 	.word	0x3f66c16c
 8007bd0:	5555553e 	.word	0x5555553e
 8007bd4:	3fc55555 	.word	0x3fc55555
 8007bd8:	c2f8f359 	.word	0xc2f8f359
 8007bdc:	01a56e1f 	.word	0x01a56e1f
 8007be0:	3fe00000 	.word	0x3fe00000
 8007be4:	000fffff 	.word	0x000fffff
 8007be8:	3ff00000 	.word	0x3ff00000
 8007bec:	4090cbff 	.word	0x4090cbff
 8007bf0:	3f6f3400 	.word	0x3f6f3400
 8007bf4:	652b82fe 	.word	0x652b82fe
 8007bf8:	3c971547 	.word	0x3c971547

08007bfc <__ieee754_sqrt>:
 8007bfc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8007c00:	ec55 4b10 	vmov	r4, r5, d0
 8007c04:	4e56      	ldr	r6, [pc, #344]	; (8007d60 <__ieee754_sqrt+0x164>)
 8007c06:	43ae      	bics	r6, r5
 8007c08:	ee10 0a10 	vmov	r0, s0
 8007c0c:	ee10 3a10 	vmov	r3, s0
 8007c10:	4629      	mov	r1, r5
 8007c12:	462a      	mov	r2, r5
 8007c14:	d110      	bne.n	8007c38 <__ieee754_sqrt+0x3c>
 8007c16:	ee10 2a10 	vmov	r2, s0
 8007c1a:	462b      	mov	r3, r5
 8007c1c:	f7f8 fc98 	bl	8000550 <__aeabi_dmul>
 8007c20:	4602      	mov	r2, r0
 8007c22:	460b      	mov	r3, r1
 8007c24:	4620      	mov	r0, r4
 8007c26:	4629      	mov	r1, r5
 8007c28:	f7f8 fadc 	bl	80001e4 <__adddf3>
 8007c2c:	4604      	mov	r4, r0
 8007c2e:	460d      	mov	r5, r1
 8007c30:	ec45 4b10 	vmov	d0, r4, r5
 8007c34:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8007c38:	2d00      	cmp	r5, #0
 8007c3a:	dc10      	bgt.n	8007c5e <__ieee754_sqrt+0x62>
 8007c3c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8007c40:	4330      	orrs	r0, r6
 8007c42:	d0f5      	beq.n	8007c30 <__ieee754_sqrt+0x34>
 8007c44:	b15d      	cbz	r5, 8007c5e <__ieee754_sqrt+0x62>
 8007c46:	ee10 2a10 	vmov	r2, s0
 8007c4a:	462b      	mov	r3, r5
 8007c4c:	ee10 0a10 	vmov	r0, s0
 8007c50:	f7f8 fac6 	bl	80001e0 <__aeabi_dsub>
 8007c54:	4602      	mov	r2, r0
 8007c56:	460b      	mov	r3, r1
 8007c58:	f7f8 fda4 	bl	80007a4 <__aeabi_ddiv>
 8007c5c:	e7e6      	b.n	8007c2c <__ieee754_sqrt+0x30>
 8007c5e:	1509      	asrs	r1, r1, #20
 8007c60:	d076      	beq.n	8007d50 <__ieee754_sqrt+0x154>
 8007c62:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8007c66:	07ce      	lsls	r6, r1, #31
 8007c68:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8007c6c:	bf5e      	ittt	pl
 8007c6e:	0fda      	lsrpl	r2, r3, #31
 8007c70:	005b      	lslpl	r3, r3, #1
 8007c72:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8007c76:	0fda      	lsrs	r2, r3, #31
 8007c78:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8007c7c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8007c80:	2000      	movs	r0, #0
 8007c82:	106d      	asrs	r5, r5, #1
 8007c84:	005b      	lsls	r3, r3, #1
 8007c86:	f04f 0e16 	mov.w	lr, #22
 8007c8a:	4684      	mov	ip, r0
 8007c8c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8007c90:	eb0c 0401 	add.w	r4, ip, r1
 8007c94:	4294      	cmp	r4, r2
 8007c96:	bfde      	ittt	le
 8007c98:	1b12      	suble	r2, r2, r4
 8007c9a:	eb04 0c01 	addle.w	ip, r4, r1
 8007c9e:	1840      	addle	r0, r0, r1
 8007ca0:	0052      	lsls	r2, r2, #1
 8007ca2:	f1be 0e01 	subs.w	lr, lr, #1
 8007ca6:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007caa:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8007cae:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cb2:	d1ed      	bne.n	8007c90 <__ieee754_sqrt+0x94>
 8007cb4:	4671      	mov	r1, lr
 8007cb6:	2720      	movs	r7, #32
 8007cb8:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8007cbc:	4562      	cmp	r2, ip
 8007cbe:	eb04 060e 	add.w	r6, r4, lr
 8007cc2:	dc02      	bgt.n	8007cca <__ieee754_sqrt+0xce>
 8007cc4:	d113      	bne.n	8007cee <__ieee754_sqrt+0xf2>
 8007cc6:	429e      	cmp	r6, r3
 8007cc8:	d811      	bhi.n	8007cee <__ieee754_sqrt+0xf2>
 8007cca:	2e00      	cmp	r6, #0
 8007ccc:	eb06 0e04 	add.w	lr, r6, r4
 8007cd0:	da43      	bge.n	8007d5a <__ieee754_sqrt+0x15e>
 8007cd2:	f1be 0f00 	cmp.w	lr, #0
 8007cd6:	db40      	blt.n	8007d5a <__ieee754_sqrt+0x15e>
 8007cd8:	f10c 0801 	add.w	r8, ip, #1
 8007cdc:	eba2 020c 	sub.w	r2, r2, ip
 8007ce0:	429e      	cmp	r6, r3
 8007ce2:	bf88      	it	hi
 8007ce4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 8007ce8:	1b9b      	subs	r3, r3, r6
 8007cea:	4421      	add	r1, r4
 8007cec:	46c4      	mov	ip, r8
 8007cee:	0052      	lsls	r2, r2, #1
 8007cf0:	3f01      	subs	r7, #1
 8007cf2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8007cf6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8007cfa:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8007cfe:	d1dd      	bne.n	8007cbc <__ieee754_sqrt+0xc0>
 8007d00:	4313      	orrs	r3, r2
 8007d02:	d006      	beq.n	8007d12 <__ieee754_sqrt+0x116>
 8007d04:	1c4c      	adds	r4, r1, #1
 8007d06:	bf13      	iteet	ne
 8007d08:	3101      	addne	r1, #1
 8007d0a:	3001      	addeq	r0, #1
 8007d0c:	4639      	moveq	r1, r7
 8007d0e:	f021 0101 	bicne.w	r1, r1, #1
 8007d12:	1043      	asrs	r3, r0, #1
 8007d14:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8007d18:	0849      	lsrs	r1, r1, #1
 8007d1a:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8007d1e:	07c2      	lsls	r2, r0, #31
 8007d20:	bf48      	it	mi
 8007d22:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8007d26:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8007d2a:	460c      	mov	r4, r1
 8007d2c:	463d      	mov	r5, r7
 8007d2e:	e77f      	b.n	8007c30 <__ieee754_sqrt+0x34>
 8007d30:	0ada      	lsrs	r2, r3, #11
 8007d32:	3815      	subs	r0, #21
 8007d34:	055b      	lsls	r3, r3, #21
 8007d36:	2a00      	cmp	r2, #0
 8007d38:	d0fa      	beq.n	8007d30 <__ieee754_sqrt+0x134>
 8007d3a:	02d7      	lsls	r7, r2, #11
 8007d3c:	d50a      	bpl.n	8007d54 <__ieee754_sqrt+0x158>
 8007d3e:	f1c1 0420 	rsb	r4, r1, #32
 8007d42:	fa23 f404 	lsr.w	r4, r3, r4
 8007d46:	1e4d      	subs	r5, r1, #1
 8007d48:	408b      	lsls	r3, r1
 8007d4a:	4322      	orrs	r2, r4
 8007d4c:	1b41      	subs	r1, r0, r5
 8007d4e:	e788      	b.n	8007c62 <__ieee754_sqrt+0x66>
 8007d50:	4608      	mov	r0, r1
 8007d52:	e7f0      	b.n	8007d36 <__ieee754_sqrt+0x13a>
 8007d54:	0052      	lsls	r2, r2, #1
 8007d56:	3101      	adds	r1, #1
 8007d58:	e7ef      	b.n	8007d3a <__ieee754_sqrt+0x13e>
 8007d5a:	46e0      	mov	r8, ip
 8007d5c:	e7be      	b.n	8007cdc <__ieee754_sqrt+0xe0>
 8007d5e:	bf00      	nop
 8007d60:	7ff00000 	.word	0x7ff00000

08007d64 <fabs>:
 8007d64:	ec51 0b10 	vmov	r0, r1, d0
 8007d68:	ee10 2a10 	vmov	r2, s0
 8007d6c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007d70:	ec43 2b10 	vmov	d0, r2, r3
 8007d74:	4770      	bx	lr

08007d76 <finite>:
 8007d76:	b082      	sub	sp, #8
 8007d78:	ed8d 0b00 	vstr	d0, [sp]
 8007d7c:	9801      	ldr	r0, [sp, #4]
 8007d7e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8007d82:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8007d86:	0fc0      	lsrs	r0, r0, #31
 8007d88:	b002      	add	sp, #8
 8007d8a:	4770      	bx	lr
 8007d8c:	0000      	movs	r0, r0
	...

08007d90 <nan>:
 8007d90:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8007d98 <nan+0x8>
 8007d94:	4770      	bx	lr
 8007d96:	bf00      	nop
 8007d98:	00000000 	.word	0x00000000
 8007d9c:	7ff80000 	.word	0x7ff80000

08007da0 <rint>:
 8007da0:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8007da2:	ec51 0b10 	vmov	r0, r1, d0
 8007da6:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007daa:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8007dae:	2e13      	cmp	r6, #19
 8007db0:	ee10 4a10 	vmov	r4, s0
 8007db4:	460b      	mov	r3, r1
 8007db6:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8007dba:	dc58      	bgt.n	8007e6e <rint+0xce>
 8007dbc:	2e00      	cmp	r6, #0
 8007dbe:	da2b      	bge.n	8007e18 <rint+0x78>
 8007dc0:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8007dc4:	4302      	orrs	r2, r0
 8007dc6:	d023      	beq.n	8007e10 <rint+0x70>
 8007dc8:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8007dcc:	4302      	orrs	r2, r0
 8007dce:	4254      	negs	r4, r2
 8007dd0:	4314      	orrs	r4, r2
 8007dd2:	0c4b      	lsrs	r3, r1, #17
 8007dd4:	0b24      	lsrs	r4, r4, #12
 8007dd6:	045b      	lsls	r3, r3, #17
 8007dd8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8007ddc:	ea44 0103 	orr.w	r1, r4, r3
 8007de0:	4b32      	ldr	r3, [pc, #200]	; (8007eac <rint+0x10c>)
 8007de2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8007de6:	e9d3 6700 	ldrd	r6, r7, [r3]
 8007dea:	4602      	mov	r2, r0
 8007dec:	460b      	mov	r3, r1
 8007dee:	4630      	mov	r0, r6
 8007df0:	4639      	mov	r1, r7
 8007df2:	f7f8 f9f7 	bl	80001e4 <__adddf3>
 8007df6:	e9cd 0100 	strd	r0, r1, [sp]
 8007dfa:	463b      	mov	r3, r7
 8007dfc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e00:	4632      	mov	r2, r6
 8007e02:	f7f8 f9ed 	bl	80001e0 <__aeabi_dsub>
 8007e06:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8007e0a:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8007e0e:	4639      	mov	r1, r7
 8007e10:	ec41 0b10 	vmov	d0, r0, r1
 8007e14:	b003      	add	sp, #12
 8007e16:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8007e18:	4a25      	ldr	r2, [pc, #148]	; (8007eb0 <rint+0x110>)
 8007e1a:	4132      	asrs	r2, r6
 8007e1c:	ea01 0702 	and.w	r7, r1, r2
 8007e20:	4307      	orrs	r7, r0
 8007e22:	d0f5      	beq.n	8007e10 <rint+0x70>
 8007e24:	0851      	lsrs	r1, r2, #1
 8007e26:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8007e2a:	4314      	orrs	r4, r2
 8007e2c:	d00c      	beq.n	8007e48 <rint+0xa8>
 8007e2e:	ea23 0201 	bic.w	r2, r3, r1
 8007e32:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8007e36:	2e13      	cmp	r6, #19
 8007e38:	fa43 f606 	asr.w	r6, r3, r6
 8007e3c:	bf0c      	ite	eq
 8007e3e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8007e42:	2400      	movne	r4, #0
 8007e44:	ea42 0306 	orr.w	r3, r2, r6
 8007e48:	4918      	ldr	r1, [pc, #96]	; (8007eac <rint+0x10c>)
 8007e4a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8007e4e:	4622      	mov	r2, r4
 8007e50:	e9d5 4500 	ldrd	r4, r5, [r5]
 8007e54:	4620      	mov	r0, r4
 8007e56:	4629      	mov	r1, r5
 8007e58:	f7f8 f9c4 	bl	80001e4 <__adddf3>
 8007e5c:	e9cd 0100 	strd	r0, r1, [sp]
 8007e60:	e9dd 0100 	ldrd	r0, r1, [sp]
 8007e64:	4622      	mov	r2, r4
 8007e66:	462b      	mov	r3, r5
 8007e68:	f7f8 f9ba 	bl	80001e0 <__aeabi_dsub>
 8007e6c:	e7d0      	b.n	8007e10 <rint+0x70>
 8007e6e:	2e33      	cmp	r6, #51	; 0x33
 8007e70:	dd07      	ble.n	8007e82 <rint+0xe2>
 8007e72:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8007e76:	d1cb      	bne.n	8007e10 <rint+0x70>
 8007e78:	ee10 2a10 	vmov	r2, s0
 8007e7c:	f7f8 f9b2 	bl	80001e4 <__adddf3>
 8007e80:	e7c6      	b.n	8007e10 <rint+0x70>
 8007e82:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8007e86:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 8007e8a:	40d6      	lsrs	r6, r2
 8007e8c:	4230      	tst	r0, r6
 8007e8e:	d0bf      	beq.n	8007e10 <rint+0x70>
 8007e90:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8007e94:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8007e98:	bf1f      	itttt	ne
 8007e9a:	ea24 0101 	bicne.w	r1, r4, r1
 8007e9e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8007ea2:	fa44 f202 	asrne.w	r2, r4, r2
 8007ea6:	ea41 0402 	orrne.w	r4, r1, r2
 8007eaa:	e7cd      	b.n	8007e48 <rint+0xa8>
 8007eac:	08008030 	.word	0x08008030
 8007eb0:	000fffff 	.word	0x000fffff
 8007eb4:	00000000 	.word	0x00000000

08007eb8 <scalbn>:
 8007eb8:	b570      	push	{r4, r5, r6, lr}
 8007eba:	ec55 4b10 	vmov	r4, r5, d0
 8007ebe:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8007ec2:	4606      	mov	r6, r0
 8007ec4:	462b      	mov	r3, r5
 8007ec6:	b99a      	cbnz	r2, 8007ef0 <scalbn+0x38>
 8007ec8:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8007ecc:	4323      	orrs	r3, r4
 8007ece:	d036      	beq.n	8007f3e <scalbn+0x86>
 8007ed0:	4b39      	ldr	r3, [pc, #228]	; (8007fb8 <scalbn+0x100>)
 8007ed2:	4629      	mov	r1, r5
 8007ed4:	ee10 0a10 	vmov	r0, s0
 8007ed8:	2200      	movs	r2, #0
 8007eda:	f7f8 fb39 	bl	8000550 <__aeabi_dmul>
 8007ede:	4b37      	ldr	r3, [pc, #220]	; (8007fbc <scalbn+0x104>)
 8007ee0:	429e      	cmp	r6, r3
 8007ee2:	4604      	mov	r4, r0
 8007ee4:	460d      	mov	r5, r1
 8007ee6:	da10      	bge.n	8007f0a <scalbn+0x52>
 8007ee8:	a32b      	add	r3, pc, #172	; (adr r3, 8007f98 <scalbn+0xe0>)
 8007eea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007eee:	e03a      	b.n	8007f66 <scalbn+0xae>
 8007ef0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8007ef4:	428a      	cmp	r2, r1
 8007ef6:	d10c      	bne.n	8007f12 <scalbn+0x5a>
 8007ef8:	ee10 2a10 	vmov	r2, s0
 8007efc:	4620      	mov	r0, r4
 8007efe:	4629      	mov	r1, r5
 8007f00:	f7f8 f970 	bl	80001e4 <__adddf3>
 8007f04:	4604      	mov	r4, r0
 8007f06:	460d      	mov	r5, r1
 8007f08:	e019      	b.n	8007f3e <scalbn+0x86>
 8007f0a:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8007f0e:	460b      	mov	r3, r1
 8007f10:	3a36      	subs	r2, #54	; 0x36
 8007f12:	4432      	add	r2, r6
 8007f14:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8007f18:	428a      	cmp	r2, r1
 8007f1a:	dd08      	ble.n	8007f2e <scalbn+0x76>
 8007f1c:	2d00      	cmp	r5, #0
 8007f1e:	a120      	add	r1, pc, #128	; (adr r1, 8007fa0 <scalbn+0xe8>)
 8007f20:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f24:	da1c      	bge.n	8007f60 <scalbn+0xa8>
 8007f26:	a120      	add	r1, pc, #128	; (adr r1, 8007fa8 <scalbn+0xf0>)
 8007f28:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f2c:	e018      	b.n	8007f60 <scalbn+0xa8>
 8007f2e:	2a00      	cmp	r2, #0
 8007f30:	dd08      	ble.n	8007f44 <scalbn+0x8c>
 8007f32:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f36:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f3a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8007f3e:	ec45 4b10 	vmov	d0, r4, r5
 8007f42:	bd70      	pop	{r4, r5, r6, pc}
 8007f44:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8007f48:	da19      	bge.n	8007f7e <scalbn+0xc6>
 8007f4a:	f24c 3350 	movw	r3, #50000	; 0xc350
 8007f4e:	429e      	cmp	r6, r3
 8007f50:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8007f54:	dd0a      	ble.n	8007f6c <scalbn+0xb4>
 8007f56:	a112      	add	r1, pc, #72	; (adr r1, 8007fa0 <scalbn+0xe8>)
 8007f58:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f5c:	2b00      	cmp	r3, #0
 8007f5e:	d1e2      	bne.n	8007f26 <scalbn+0x6e>
 8007f60:	a30f      	add	r3, pc, #60	; (adr r3, 8007fa0 <scalbn+0xe8>)
 8007f62:	e9d3 2300 	ldrd	r2, r3, [r3]
 8007f66:	f7f8 faf3 	bl	8000550 <__aeabi_dmul>
 8007f6a:	e7cb      	b.n	8007f04 <scalbn+0x4c>
 8007f6c:	a10a      	add	r1, pc, #40	; (adr r1, 8007f98 <scalbn+0xe0>)
 8007f6e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f72:	2b00      	cmp	r3, #0
 8007f74:	d0b8      	beq.n	8007ee8 <scalbn+0x30>
 8007f76:	a10e      	add	r1, pc, #56	; (adr r1, 8007fb0 <scalbn+0xf8>)
 8007f78:	e9d1 0100 	ldrd	r0, r1, [r1]
 8007f7c:	e7b4      	b.n	8007ee8 <scalbn+0x30>
 8007f7e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8007f82:	3236      	adds	r2, #54	; 0x36
 8007f84:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8007f88:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8007f8c:	4620      	mov	r0, r4
 8007f8e:	4b0c      	ldr	r3, [pc, #48]	; (8007fc0 <scalbn+0x108>)
 8007f90:	2200      	movs	r2, #0
 8007f92:	e7e8      	b.n	8007f66 <scalbn+0xae>
 8007f94:	f3af 8000 	nop.w
 8007f98:	c2f8f359 	.word	0xc2f8f359
 8007f9c:	01a56e1f 	.word	0x01a56e1f
 8007fa0:	8800759c 	.word	0x8800759c
 8007fa4:	7e37e43c 	.word	0x7e37e43c
 8007fa8:	8800759c 	.word	0x8800759c
 8007fac:	fe37e43c 	.word	0xfe37e43c
 8007fb0:	c2f8f359 	.word	0xc2f8f359
 8007fb4:	81a56e1f 	.word	0x81a56e1f
 8007fb8:	43500000 	.word	0x43500000
 8007fbc:	ffff3cb0 	.word	0xffff3cb0
 8007fc0:	3c900000 	.word	0x3c900000

08007fc4 <_init>:
 8007fc4:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fc6:	bf00      	nop
 8007fc8:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fca:	bc08      	pop	{r3}
 8007fcc:	469e      	mov	lr, r3
 8007fce:	4770      	bx	lr

08007fd0 <_fini>:
 8007fd0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8007fd2:	bf00      	nop
 8007fd4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8007fd6:	bc08      	pop	{r3}
 8007fd8:	469e      	mov	lr, r3
 8007fda:	4770      	bx	lr

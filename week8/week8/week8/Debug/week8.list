
week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         0000a03c  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  0800a1d8  0800a1d8  0001a1d8  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  0800a240  0800a240  000200a4  2**0
                  CONTENTS
  4 .ARM          00000008  0800a240  0800a240  0001a240  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  0800a248  0800a248  000200a4  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  0800a248  0800a248  0001a248  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  0800a24c  0800a24c  0001a24c  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a4  20000000  0800a250  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000009b0  200000a8  0800a2f4  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000a58  0800a2f4  00020a58  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a4  2**0
                  CONTENTS, READONLY
 12 .debug_info   00011152  00000000  00000000  000200d4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020ed  00000000  00000000  00031226  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  00033318  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  000342d8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a1b  00000000  00000000  00035208  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011338  00000000  00000000  0004bc23  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    000908a0  00000000  00000000  0005cf5b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000ed7fb  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049e8  00000000  00000000  000ed850  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a8 	.word	0x200000a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800a1bc 	.word	0x0800a1bc

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ac 	.word	0x200000ac
 80001d4:	0800a1bc 	.word	0x0800a1bc

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	b082      	sub	sp, #8
 8001068:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 800106a:	f002 fd8d 	bl	8003b88 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106e:	f000 f87d 	bl	800116c <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001072:	f000 faa9 	bl	80015c8 <MX_GPIO_Init>
  MX_DMA_Init();
 8001076:	f000 fa7f 	bl	8001578 <MX_DMA_Init>
  MX_USART2_UART_Init();
 800107a:	f000 fa27 	bl	80014cc <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800107e:	f000 f90b 	bl	8001298 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001082:	f000 f961 	bl	8001348 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001086:	f000 f9ab 	bl	80013e0 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 800108a:	f000 fa4b 	bl	8001524 <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800108e:	f000 f8d5 	bl	800123c <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	UART2.huart = &huart2;
 8001092:	4b2e      	ldr	r3, [pc, #184]	; (800114c <main+0xe8>)
 8001094:	4a2e      	ldr	r2, [pc, #184]	; (8001150 <main+0xec>)
 8001096:	601a      	str	r2, [r3, #0]
  	UART2.RxLen = 255;
 8001098:	4b2c      	ldr	r3, [pc, #176]	; (800114c <main+0xe8>)
 800109a:	22ff      	movs	r2, #255	; 0xff
 800109c:	80da      	strh	r2, [r3, #6]
  	UART2.TxLen = 255;
 800109e:	4b2b      	ldr	r3, [pc, #172]	; (800114c <main+0xe8>)
 80010a0:	22ff      	movs	r2, #255	; 0xff
 80010a2:	809a      	strh	r2, [r3, #4]
  	UARTInit(&UART2);
 80010a4:	4829      	ldr	r0, [pc, #164]	; (800114c <main+0xe8>)
 80010a6:	f000 fb2b 	bl	8001700 <UARTInit>
  	UARTResetStart(&UART2);
 80010aa:	4828      	ldr	r0, [pc, #160]	; (800114c <main+0xe8>)
 80010ac:	f000 fb50 	bl	8001750 <UARTResetStart>
	//start micros
	HAL_TIM_Base_Start_IT(&htim2);
 80010b0:	4828      	ldr	r0, [pc, #160]	; (8001154 <main+0xf0>)
 80010b2:	f006 f821 	bl	80070f8 <HAL_TIM_Base_Start_IT>
	//Encoder start
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010b6:	213c      	movs	r1, #60	; 0x3c
 80010b8:	4827      	ldr	r0, [pc, #156]	; (8001158 <main+0xf4>)
 80010ba:	f006 fa2f 	bl	800751c <HAL_TIM_Encoder_Start>
	//PWM start AIN1
	HAL_TIM_Base_Start(&htim3);
 80010be:	4827      	ldr	r0, [pc, #156]	; (800115c <main+0xf8>)
 80010c0:	f005 ffc0 	bl	8007044 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010c4:	2100      	movs	r1, #0
 80010c6:	4825      	ldr	r0, [pc, #148]	; (800115c <main+0xf8>)
 80010c8:	f006 f8d2 	bl	8007270 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 5000;
 80010cc:	4b23      	ldr	r3, [pc, #140]	; (800115c <main+0xf8>)
 80010ce:	681b      	ldr	r3, [r3, #0]
 80010d0:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d4:	635a      	str	r2, [r3, #52]	; 0x34
	I2C();
 80010d6:	f001 f943 	bl	8002360 <I2C>
	{
    /* USER CODE END WHILE */

    /* USER CODE BEGIN 3 */

		int16_t inputChar = UARTReadChar(&UART2);
 80010da:	481c      	ldr	r0, [pc, #112]	; (800114c <main+0xe8>)
 80010dc:	f000 fb5c 	bl	8001798 <UARTReadChar>
 80010e0:	4603      	mov	r3, r0
 80010e2:	80fb      	strh	r3, [r7, #6]
		if (inputChar != -1)
 80010e4:	f9b7 3006 	ldrsh.w	r3, [r7, #6]
 80010e8:	f1b3 3fff 	cmp.w	r3, #4294967295
 80010ec:	d006      	beq.n	80010fc <main+0x98>
		{
			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
 80010ee:	f9b7 2006 	ldrsh.w	r2, [r7, #6]
 80010f2:	4b16      	ldr	r3, [pc, #88]	; (800114c <main+0xe8>)
 80010f4:	2101      	movs	r1, #1
 80010f6:	481a      	ldr	r0, [pc, #104]	; (8001160 <main+0xfc>)
 80010f8:	f000 fc10 	bl	800191c <DynamixelProtocal2>
		}
		gotoSethome();
 80010fc:	f001 fe12 	bl	8002d24 <gotoSethome>
		if (micros() - Timestamp >= dt){
 8001100:	f002 fa06 	bl	8003510 <micros>
 8001104:	4b17      	ldr	r3, [pc, #92]	; (8001164 <main+0x100>)
 8001106:	e9d3 2300 	ldrd	r2, r3, [r3]
 800110a:	1a84      	subs	r4, r0, r2
 800110c:	eb61 0503 	sbc.w	r5, r1, r3
 8001110:	4b15      	ldr	r3, [pc, #84]	; (8001168 <main+0x104>)
 8001112:	881b      	ldrh	r3, [r3, #0]
 8001114:	b29a      	uxth	r2, r3
 8001116:	f04f 0300 	mov.w	r3, #0
 800111a:	429d      	cmp	r5, r3
 800111c:	bf08      	it	eq
 800111e:	4294      	cmpeq	r4, r2
 8001120:	d30f      	bcc.n	8001142 <main+0xde>
			Timestamp = micros();
 8001122:	f002 f9f5 	bl	8003510 <micros>
 8001126:	4602      	mov	r2, r0
 8001128:	460b      	mov	r3, r1
 800112a:	490e      	ldr	r1, [pc, #56]	; (8001164 <main+0x100>)
 800112c:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory(Timestamp);
 8001130:	4b0c      	ldr	r3, [pc, #48]	; (8001164 <main+0x100>)
 8001132:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001136:	4610      	mov	r0, r2
 8001138:	4619      	mov	r1, r3
 800113a:	f001 f995 	bl	8002468 <trajectory>
			//			piVelocity();
			kalman();
 800113e:	f001 fe07 	bl	8002d50 <kalman>
		}
		UARTTxDumpBuffer(&UART2);
 8001142:	4802      	ldr	r0, [pc, #8]	; (800114c <main+0xe8>)
 8001144:	f000 fb52 	bl	80017ec <UARTTxDumpBuffer>
	{
 8001148:	e7c7      	b.n	80010da <main+0x76>
 800114a:	bf00      	nop
 800114c:	200000c4 	.word	0x200000c4
 8001150:	20000a00 	.word	0x20000a00
 8001154:	200009b8 	.word	0x200009b8
 8001158:	2000092c 	.word	0x2000092c
 800115c:	20000884 	.word	0x20000884
 8001160:	200000dc 	.word	0x200000dc
 8001164:	20000738 	.word	0x20000738
 8001168:	2000000c 	.word	0x2000000c

0800116c <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 800116c:	b580      	push	{r7, lr}
 800116e:	b094      	sub	sp, #80	; 0x50
 8001170:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 8001172:	f107 0320 	add.w	r3, r7, #32
 8001176:	2230      	movs	r2, #48	; 0x30
 8001178:	2100      	movs	r1, #0
 800117a:	4618      	mov	r0, r3
 800117c:	f007 ffda 	bl	8009134 <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001180:	f107 030c 	add.w	r3, r7, #12
 8001184:	2200      	movs	r2, #0
 8001186:	601a      	str	r2, [r3, #0]
 8001188:	605a      	str	r2, [r3, #4]
 800118a:	609a      	str	r2, [r3, #8]
 800118c:	60da      	str	r2, [r3, #12]
 800118e:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001190:	2300      	movs	r3, #0
 8001192:	60bb      	str	r3, [r7, #8]
 8001194:	4b27      	ldr	r3, [pc, #156]	; (8001234 <SystemClock_Config+0xc8>)
 8001196:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001198:	4a26      	ldr	r2, [pc, #152]	; (8001234 <SystemClock_Config+0xc8>)
 800119a:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 800119e:	6413      	str	r3, [r2, #64]	; 0x40
 80011a0:	4b24      	ldr	r3, [pc, #144]	; (8001234 <SystemClock_Config+0xc8>)
 80011a2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011a4:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011a8:	60bb      	str	r3, [r7, #8]
 80011aa:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011ac:	2300      	movs	r3, #0
 80011ae:	607b      	str	r3, [r7, #4]
 80011b0:	4b21      	ldr	r3, [pc, #132]	; (8001238 <SystemClock_Config+0xcc>)
 80011b2:	681b      	ldr	r3, [r3, #0]
 80011b4:	4a20      	ldr	r2, [pc, #128]	; (8001238 <SystemClock_Config+0xcc>)
 80011b6:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011ba:	6013      	str	r3, [r2, #0]
 80011bc:	4b1e      	ldr	r3, [pc, #120]	; (8001238 <SystemClock_Config+0xcc>)
 80011be:	681b      	ldr	r3, [r3, #0]
 80011c0:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011c4:	607b      	str	r3, [r7, #4]
 80011c6:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011c8:	2302      	movs	r3, #2
 80011ca:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011cc:	2301      	movs	r3, #1
 80011ce:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011d0:	2310      	movs	r3, #16
 80011d2:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011d4:	2302      	movs	r3, #2
 80011d6:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011d8:	2300      	movs	r3, #0
 80011da:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011dc:	2308      	movs	r3, #8
 80011de:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011e0:	2364      	movs	r3, #100	; 0x64
 80011e2:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011e4:	2302      	movs	r3, #2
 80011e6:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011e8:	2304      	movs	r3, #4
 80011ea:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011ec:	f107 0320 	add.w	r3, r7, #32
 80011f0:	4618      	mov	r0, r3
 80011f2:	f005 fa63 	bl	80066bc <HAL_RCC_OscConfig>
 80011f6:	4603      	mov	r3, r0
 80011f8:	2b00      	cmp	r3, #0
 80011fa:	d001      	beq.n	8001200 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011fc:	f002 f9a2 	bl	8003544 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 8001200:	230f      	movs	r3, #15
 8001202:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001204:	2302      	movs	r3, #2
 8001206:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001208:	2300      	movs	r3, #0
 800120a:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 800120c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001210:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 8001212:	2300      	movs	r3, #0
 8001214:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001216:	f107 030c 	add.w	r3, r7, #12
 800121a:	2103      	movs	r1, #3
 800121c:	4618      	mov	r0, r3
 800121e:	f005 fcc5 	bl	8006bac <HAL_RCC_ClockConfig>
 8001222:	4603      	mov	r3, r0
 8001224:	2b00      	cmp	r3, #0
 8001226:	d001      	beq.n	800122c <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001228:	f002 f98c 	bl	8003544 <Error_Handler>
  }
}
 800122c:	bf00      	nop
 800122e:	3750      	adds	r7, #80	; 0x50
 8001230:	46bd      	mov	sp, r7
 8001232:	bd80      	pop	{r7, pc}
 8001234:	40023800 	.word	0x40023800
 8001238:	40007000 	.word	0x40007000

0800123c <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 800123c:	b580      	push	{r7, lr}
 800123e:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001240:	4b12      	ldr	r3, [pc, #72]	; (800128c <MX_I2C1_Init+0x50>)
 8001242:	4a13      	ldr	r2, [pc, #76]	; (8001290 <MX_I2C1_Init+0x54>)
 8001244:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 8001246:	4b11      	ldr	r3, [pc, #68]	; (800128c <MX_I2C1_Init+0x50>)
 8001248:	4a12      	ldr	r2, [pc, #72]	; (8001294 <MX_I2C1_Init+0x58>)
 800124a:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 800124c:	4b0f      	ldr	r3, [pc, #60]	; (800128c <MX_I2C1_Init+0x50>)
 800124e:	2200      	movs	r2, #0
 8001250:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 8001252:	4b0e      	ldr	r3, [pc, #56]	; (800128c <MX_I2C1_Init+0x50>)
 8001254:	2200      	movs	r2, #0
 8001256:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001258:	4b0c      	ldr	r3, [pc, #48]	; (800128c <MX_I2C1_Init+0x50>)
 800125a:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 800125e:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001260:	4b0a      	ldr	r3, [pc, #40]	; (800128c <MX_I2C1_Init+0x50>)
 8001262:	2200      	movs	r2, #0
 8001264:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 8001266:	4b09      	ldr	r3, [pc, #36]	; (800128c <MX_I2C1_Init+0x50>)
 8001268:	2200      	movs	r2, #0
 800126a:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 800126c:	4b07      	ldr	r3, [pc, #28]	; (800128c <MX_I2C1_Init+0x50>)
 800126e:	2200      	movs	r2, #0
 8001270:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 8001272:	4b06      	ldr	r3, [pc, #24]	; (800128c <MX_I2C1_Init+0x50>)
 8001274:	2200      	movs	r2, #0
 8001276:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001278:	4804      	ldr	r0, [pc, #16]	; (800128c <MX_I2C1_Init+0x50>)
 800127a:	f003 fc25 	bl	8004ac8 <HAL_I2C_Init>
 800127e:	4603      	mov	r3, r0
 8001280:	2b00      	cmp	r3, #0
 8001282:	d001      	beq.n	8001288 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 8001284:	f002 f95e 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001288:	bf00      	nop
 800128a:	bd80      	pop	{r7, pc}
 800128c:	20000830 	.word	0x20000830
 8001290:	40005400 	.word	0x40005400
 8001294:	000186a0 	.word	0x000186a0

08001298 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001298:	b580      	push	{r7, lr}
 800129a:	b08c      	sub	sp, #48	; 0x30
 800129c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 800129e:	f107 030c 	add.w	r3, r7, #12
 80012a2:	2224      	movs	r2, #36	; 0x24
 80012a4:	2100      	movs	r1, #0
 80012a6:	4618      	mov	r0, r3
 80012a8:	f007 ff44 	bl	8009134 <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80012ac:	1d3b      	adds	r3, r7, #4
 80012ae:	2200      	movs	r2, #0
 80012b0:	601a      	str	r2, [r3, #0]
 80012b2:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 80012b4:	4b22      	ldr	r3, [pc, #136]	; (8001340 <MX_TIM1_Init+0xa8>)
 80012b6:	4a23      	ldr	r2, [pc, #140]	; (8001344 <MX_TIM1_Init+0xac>)
 80012b8:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012ba:	4b21      	ldr	r3, [pc, #132]	; (8001340 <MX_TIM1_Init+0xa8>)
 80012bc:	2200      	movs	r2, #0
 80012be:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012c0:	4b1f      	ldr	r3, [pc, #124]	; (8001340 <MX_TIM1_Init+0xa8>)
 80012c2:	2200      	movs	r2, #0
 80012c4:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 80012c6:	4b1e      	ldr	r3, [pc, #120]	; (8001340 <MX_TIM1_Init+0xa8>)
 80012c8:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012cc:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012ce:	4b1c      	ldr	r3, [pc, #112]	; (8001340 <MX_TIM1_Init+0xa8>)
 80012d0:	2200      	movs	r2, #0
 80012d2:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012d4:	4b1a      	ldr	r3, [pc, #104]	; (8001340 <MX_TIM1_Init+0xa8>)
 80012d6:	2200      	movs	r2, #0
 80012d8:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012da:	4b19      	ldr	r3, [pc, #100]	; (8001340 <MX_TIM1_Init+0xa8>)
 80012dc:	2200      	movs	r2, #0
 80012de:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012e0:	2303      	movs	r3, #3
 80012e2:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012e4:	2300      	movs	r3, #0
 80012e6:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012e8:	2301      	movs	r3, #1
 80012ea:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ec:	2300      	movs	r3, #0
 80012ee:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80012f0:	2303      	movs	r3, #3
 80012f2:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012f4:	2300      	movs	r3, #0
 80012f6:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012f8:	2301      	movs	r3, #1
 80012fa:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012fc:	2300      	movs	r3, #0
 80012fe:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 8001300:	2305      	movs	r3, #5
 8001302:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 8001304:	f107 030c 	add.w	r3, r7, #12
 8001308:	4619      	mov	r1, r3
 800130a:	480d      	ldr	r0, [pc, #52]	; (8001340 <MX_TIM1_Init+0xa8>)
 800130c:	f006 f860 	bl	80073d0 <HAL_TIM_Encoder_Init>
 8001310:	4603      	mov	r3, r0
 8001312:	2b00      	cmp	r3, #0
 8001314:	d001      	beq.n	800131a <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 8001316:	f002 f915 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800131a:	2300      	movs	r3, #0
 800131c:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800131e:	2300      	movs	r3, #0
 8001320:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 8001322:	1d3b      	adds	r3, r7, #4
 8001324:	4619      	mov	r1, r3
 8001326:	4806      	ldr	r0, [pc, #24]	; (8001340 <MX_TIM1_Init+0xa8>)
 8001328:	f006 ff04 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 800132c:	4603      	mov	r3, r0
 800132e:	2b00      	cmp	r3, #0
 8001330:	d001      	beq.n	8001336 <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 8001332:	f002 f907 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 8001336:	bf00      	nop
 8001338:	3730      	adds	r7, #48	; 0x30
 800133a:	46bd      	mov	sp, r7
 800133c:	bd80      	pop	{r7, pc}
 800133e:	bf00      	nop
 8001340:	2000092c 	.word	0x2000092c
 8001344:	40010000 	.word	0x40010000

08001348 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001348:	b580      	push	{r7, lr}
 800134a:	b086      	sub	sp, #24
 800134c:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800134e:	f107 0308 	add.w	r3, r7, #8
 8001352:	2200      	movs	r2, #0
 8001354:	601a      	str	r2, [r3, #0]
 8001356:	605a      	str	r2, [r3, #4]
 8001358:	609a      	str	r2, [r3, #8]
 800135a:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 800135c:	463b      	mov	r3, r7
 800135e:	2200      	movs	r2, #0
 8001360:	601a      	str	r2, [r3, #0]
 8001362:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 8001364:	4b1d      	ldr	r3, [pc, #116]	; (80013dc <MX_TIM2_Init+0x94>)
 8001366:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800136a:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 800136c:	4b1b      	ldr	r3, [pc, #108]	; (80013dc <MX_TIM2_Init+0x94>)
 800136e:	2263      	movs	r2, #99	; 0x63
 8001370:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001372:	4b1a      	ldr	r3, [pc, #104]	; (80013dc <MX_TIM2_Init+0x94>)
 8001374:	2200      	movs	r2, #0
 8001376:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001378:	4b18      	ldr	r3, [pc, #96]	; (80013dc <MX_TIM2_Init+0x94>)
 800137a:	f04f 32ff 	mov.w	r2, #4294967295
 800137e:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001380:	4b16      	ldr	r3, [pc, #88]	; (80013dc <MX_TIM2_Init+0x94>)
 8001382:	2200      	movs	r2, #0
 8001384:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001386:	4b15      	ldr	r3, [pc, #84]	; (80013dc <MX_TIM2_Init+0x94>)
 8001388:	2200      	movs	r2, #0
 800138a:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800138c:	4813      	ldr	r0, [pc, #76]	; (80013dc <MX_TIM2_Init+0x94>)
 800138e:	f005 fe09 	bl	8006fa4 <HAL_TIM_Base_Init>
 8001392:	4603      	mov	r3, r0
 8001394:	2b00      	cmp	r3, #0
 8001396:	d001      	beq.n	800139c <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001398:	f002 f8d4 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800139c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80013a0:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 80013a2:	f107 0308 	add.w	r3, r7, #8
 80013a6:	4619      	mov	r1, r3
 80013a8:	480c      	ldr	r0, [pc, #48]	; (80013dc <MX_TIM2_Init+0x94>)
 80013aa:	f006 fb0b 	bl	80079c4 <HAL_TIM_ConfigClockSource>
 80013ae:	4603      	mov	r3, r0
 80013b0:	2b00      	cmp	r3, #0
 80013b2:	d001      	beq.n	80013b8 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 80013b4:	f002 f8c6 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013b8:	2300      	movs	r3, #0
 80013ba:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013bc:	2300      	movs	r3, #0
 80013be:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013c0:	463b      	mov	r3, r7
 80013c2:	4619      	mov	r1, r3
 80013c4:	4805      	ldr	r0, [pc, #20]	; (80013dc <MX_TIM2_Init+0x94>)
 80013c6:	f006 feb5 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 80013ca:	4603      	mov	r3, r0
 80013cc:	2b00      	cmp	r3, #0
 80013ce:	d001      	beq.n	80013d4 <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013d0:	f002 f8b8 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013d4:	bf00      	nop
 80013d6:	3718      	adds	r7, #24
 80013d8:	46bd      	mov	sp, r7
 80013da:	bd80      	pop	{r7, pc}
 80013dc:	200009b8 	.word	0x200009b8

080013e0 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013e0:	b580      	push	{r7, lr}
 80013e2:	b08e      	sub	sp, #56	; 0x38
 80013e4:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013e6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013ea:	2200      	movs	r2, #0
 80013ec:	601a      	str	r2, [r3, #0]
 80013ee:	605a      	str	r2, [r3, #4]
 80013f0:	609a      	str	r2, [r3, #8]
 80013f2:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013f4:	f107 0320 	add.w	r3, r7, #32
 80013f8:	2200      	movs	r2, #0
 80013fa:	601a      	str	r2, [r3, #0]
 80013fc:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013fe:	1d3b      	adds	r3, r7, #4
 8001400:	2200      	movs	r2, #0
 8001402:	601a      	str	r2, [r3, #0]
 8001404:	605a      	str	r2, [r3, #4]
 8001406:	609a      	str	r2, [r3, #8]
 8001408:	60da      	str	r2, [r3, #12]
 800140a:	611a      	str	r2, [r3, #16]
 800140c:	615a      	str	r2, [r3, #20]
 800140e:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 8001410:	4b2c      	ldr	r3, [pc, #176]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001412:	4a2d      	ldr	r2, [pc, #180]	; (80014c8 <MX_TIM3_Init+0xe8>)
 8001414:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 8001416:	4b2b      	ldr	r3, [pc, #172]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001418:	2263      	movs	r2, #99	; 0x63
 800141a:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 800141c:	4b29      	ldr	r3, [pc, #164]	; (80014c4 <MX_TIM3_Init+0xe4>)
 800141e:	2200      	movs	r2, #0
 8001420:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 8001422:	4b28      	ldr	r3, [pc, #160]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001424:	f242 7210 	movw	r2, #10000	; 0x2710
 8001428:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800142a:	4b26      	ldr	r3, [pc, #152]	; (80014c4 <MX_TIM3_Init+0xe4>)
 800142c:	2200      	movs	r2, #0
 800142e:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001430:	4b24      	ldr	r3, [pc, #144]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001432:	2200      	movs	r2, #0
 8001434:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 8001436:	4823      	ldr	r0, [pc, #140]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001438:	f005 fdb4 	bl	8006fa4 <HAL_TIM_Base_Init>
 800143c:	4603      	mov	r3, r0
 800143e:	2b00      	cmp	r3, #0
 8001440:	d001      	beq.n	8001446 <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 8001442:	f002 f87f 	bl	8003544 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001446:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800144a:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800144c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001450:	4619      	mov	r1, r3
 8001452:	481c      	ldr	r0, [pc, #112]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001454:	f006 fab6 	bl	80079c4 <HAL_TIM_ConfigClockSource>
 8001458:	4603      	mov	r3, r0
 800145a:	2b00      	cmp	r3, #0
 800145c:	d001      	beq.n	8001462 <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 800145e:	f002 f871 	bl	8003544 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001462:	4818      	ldr	r0, [pc, #96]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001464:	f005 feaa 	bl	80071bc <HAL_TIM_PWM_Init>
 8001468:	4603      	mov	r3, r0
 800146a:	2b00      	cmp	r3, #0
 800146c:	d001      	beq.n	8001472 <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 800146e:	f002 f869 	bl	8003544 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001472:	2300      	movs	r3, #0
 8001474:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001476:	2300      	movs	r3, #0
 8001478:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800147a:	f107 0320 	add.w	r3, r7, #32
 800147e:	4619      	mov	r1, r3
 8001480:	4810      	ldr	r0, [pc, #64]	; (80014c4 <MX_TIM3_Init+0xe4>)
 8001482:	f006 fe57 	bl	8008134 <HAL_TIMEx_MasterConfigSynchronization>
 8001486:	4603      	mov	r3, r0
 8001488:	2b00      	cmp	r3, #0
 800148a:	d001      	beq.n	8001490 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 800148c:	f002 f85a 	bl	8003544 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001490:	2360      	movs	r3, #96	; 0x60
 8001492:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 8001494:	2300      	movs	r3, #0
 8001496:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001498:	2300      	movs	r3, #0
 800149a:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800149c:	2300      	movs	r3, #0
 800149e:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 80014a0:	1d3b      	adds	r3, r7, #4
 80014a2:	2200      	movs	r2, #0
 80014a4:	4619      	mov	r1, r3
 80014a6:	4807      	ldr	r0, [pc, #28]	; (80014c4 <MX_TIM3_Init+0xe4>)
 80014a8:	f006 f9ce 	bl	8007848 <HAL_TIM_PWM_ConfigChannel>
 80014ac:	4603      	mov	r3, r0
 80014ae:	2b00      	cmp	r3, #0
 80014b0:	d001      	beq.n	80014b6 <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 80014b2:	f002 f847 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 80014b6:	4803      	ldr	r0, [pc, #12]	; (80014c4 <MX_TIM3_Init+0xe4>)
 80014b8:	f002 f956 	bl	8003768 <HAL_TIM_MspPostInit>

}
 80014bc:	bf00      	nop
 80014be:	3738      	adds	r7, #56	; 0x38
 80014c0:	46bd      	mov	sp, r7
 80014c2:	bd80      	pop	{r7, pc}
 80014c4:	20000884 	.word	0x20000884
 80014c8:	40000400 	.word	0x40000400

080014cc <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014cc:	b580      	push	{r7, lr}
 80014ce:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014d0:	4b12      	ldr	r3, [pc, #72]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014d2:	4a13      	ldr	r2, [pc, #76]	; (8001520 <MX_USART2_UART_Init+0x54>)
 80014d4:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80014d6:	4b11      	ldr	r3, [pc, #68]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014d8:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80014dc:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80014de:	4b0f      	ldr	r3, [pc, #60]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014e0:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014e4:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014e6:	4b0d      	ldr	r3, [pc, #52]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014e8:	2200      	movs	r2, #0
 80014ea:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80014ec:	4b0b      	ldr	r3, [pc, #44]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014ee:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014f2:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014f4:	4b09      	ldr	r3, [pc, #36]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014f6:	220c      	movs	r2, #12
 80014f8:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014fa:	4b08      	ldr	r3, [pc, #32]	; (800151c <MX_USART2_UART_Init+0x50>)
 80014fc:	2200      	movs	r2, #0
 80014fe:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 8001500:	4b06      	ldr	r3, [pc, #24]	; (800151c <MX_USART2_UART_Init+0x50>)
 8001502:	2200      	movs	r2, #0
 8001504:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 8001506:	4805      	ldr	r0, [pc, #20]	; (800151c <MX_USART2_UART_Init+0x50>)
 8001508:	f006 fe96 	bl	8008238 <HAL_UART_Init>
 800150c:	4603      	mov	r3, r0
 800150e:	2b00      	cmp	r3, #0
 8001510:	d001      	beq.n	8001516 <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 8001512:	f002 f817 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 8001516:	bf00      	nop
 8001518:	bd80      	pop	{r7, pc}
 800151a:	bf00      	nop
 800151c:	20000a00 	.word	0x20000a00
 8001520:	40004400 	.word	0x40004400

08001524 <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 8001524:	b580      	push	{r7, lr}
 8001526:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001528:	4b11      	ldr	r3, [pc, #68]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800152a:	4a12      	ldr	r2, [pc, #72]	; (8001574 <MX_USART6_UART_Init+0x50>)
 800152c:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 800152e:	4b10      	ldr	r3, [pc, #64]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001530:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 8001534:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 8001536:	4b0e      	ldr	r3, [pc, #56]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 800153c:	4b0c      	ldr	r3, [pc, #48]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 8001542:	4b0b      	ldr	r3, [pc, #44]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001544:	2200      	movs	r2, #0
 8001546:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001548:	4b09      	ldr	r3, [pc, #36]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800154a:	220c      	movs	r2, #12
 800154c:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 800154e:	4b08      	ldr	r3, [pc, #32]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001550:	2200      	movs	r2, #0
 8001552:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 8001554:	4b06      	ldr	r3, [pc, #24]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 8001556:	2200      	movs	r2, #0
 8001558:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 800155a:	4805      	ldr	r0, [pc, #20]	; (8001570 <MX_USART6_UART_Init+0x4c>)
 800155c:	f006 fe6c 	bl	8008238 <HAL_UART_Init>
 8001560:	4603      	mov	r3, r0
 8001562:	2b00      	cmp	r3, #0
 8001564:	d001      	beq.n	800156a <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 8001566:	f001 ffed 	bl	8003544 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 800156a:	bf00      	nop
 800156c:	bd80      	pop	{r7, pc}
 800156e:	bf00      	nop
 8001570:	20000974 	.word	0x20000974
 8001574:	40011400 	.word	0x40011400

08001578 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001578:	b580      	push	{r7, lr}
 800157a:	b082      	sub	sp, #8
 800157c:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 800157e:	2300      	movs	r3, #0
 8001580:	607b      	str	r3, [r7, #4]
 8001582:	4b10      	ldr	r3, [pc, #64]	; (80015c4 <MX_DMA_Init+0x4c>)
 8001584:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001586:	4a0f      	ldr	r2, [pc, #60]	; (80015c4 <MX_DMA_Init+0x4c>)
 8001588:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800158c:	6313      	str	r3, [r2, #48]	; 0x30
 800158e:	4b0d      	ldr	r3, [pc, #52]	; (80015c4 <MX_DMA_Init+0x4c>)
 8001590:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001592:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8001596:	607b      	str	r3, [r7, #4]
 8001598:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 800159a:	2200      	movs	r2, #0
 800159c:	2100      	movs	r1, #0
 800159e:	2010      	movs	r0, #16
 80015a0:	f002 fc87 	bl	8003eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 80015a4:	2010      	movs	r0, #16
 80015a6:	f002 fca0 	bl	8003eea <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 80015aa:	2200      	movs	r2, #0
 80015ac:	2100      	movs	r1, #0
 80015ae:	2011      	movs	r0, #17
 80015b0:	f002 fc7f 	bl	8003eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 80015b4:	2011      	movs	r0, #17
 80015b6:	f002 fc98 	bl	8003eea <HAL_NVIC_EnableIRQ>

}
 80015ba:	bf00      	nop
 80015bc:	3708      	adds	r7, #8
 80015be:	46bd      	mov	sp, r7
 80015c0:	bd80      	pop	{r7, pc}
 80015c2:	bf00      	nop
 80015c4:	40023800 	.word	0x40023800

080015c8 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015c8:	b580      	push	{r7, lr}
 80015ca:	b08a      	sub	sp, #40	; 0x28
 80015cc:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015ce:	f107 0314 	add.w	r3, r7, #20
 80015d2:	2200      	movs	r2, #0
 80015d4:	601a      	str	r2, [r3, #0]
 80015d6:	605a      	str	r2, [r3, #4]
 80015d8:	609a      	str	r2, [r3, #8]
 80015da:	60da      	str	r2, [r3, #12]
 80015dc:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015de:	2300      	movs	r3, #0
 80015e0:	613b      	str	r3, [r7, #16]
 80015e2:	4b41      	ldr	r3, [pc, #260]	; (80016e8 <MX_GPIO_Init+0x120>)
 80015e4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015e6:	4a40      	ldr	r2, [pc, #256]	; (80016e8 <MX_GPIO_Init+0x120>)
 80015e8:	f043 0304 	orr.w	r3, r3, #4
 80015ec:	6313      	str	r3, [r2, #48]	; 0x30
 80015ee:	4b3e      	ldr	r3, [pc, #248]	; (80016e8 <MX_GPIO_Init+0x120>)
 80015f0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f2:	f003 0304 	and.w	r3, r3, #4
 80015f6:	613b      	str	r3, [r7, #16]
 80015f8:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015fa:	2300      	movs	r3, #0
 80015fc:	60fb      	str	r3, [r7, #12]
 80015fe:	4b3a      	ldr	r3, [pc, #232]	; (80016e8 <MX_GPIO_Init+0x120>)
 8001600:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001602:	4a39      	ldr	r2, [pc, #228]	; (80016e8 <MX_GPIO_Init+0x120>)
 8001604:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001608:	6313      	str	r3, [r2, #48]	; 0x30
 800160a:	4b37      	ldr	r3, [pc, #220]	; (80016e8 <MX_GPIO_Init+0x120>)
 800160c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800160e:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8001612:	60fb      	str	r3, [r7, #12]
 8001614:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 8001616:	2300      	movs	r3, #0
 8001618:	60bb      	str	r3, [r7, #8]
 800161a:	4b33      	ldr	r3, [pc, #204]	; (80016e8 <MX_GPIO_Init+0x120>)
 800161c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800161e:	4a32      	ldr	r2, [pc, #200]	; (80016e8 <MX_GPIO_Init+0x120>)
 8001620:	f043 0301 	orr.w	r3, r3, #1
 8001624:	6313      	str	r3, [r2, #48]	; 0x30
 8001626:	4b30      	ldr	r3, [pc, #192]	; (80016e8 <MX_GPIO_Init+0x120>)
 8001628:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162a:	f003 0301 	and.w	r3, r3, #1
 800162e:	60bb      	str	r3, [r7, #8]
 8001630:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 8001632:	2300      	movs	r3, #0
 8001634:	607b      	str	r3, [r7, #4]
 8001636:	4b2c      	ldr	r3, [pc, #176]	; (80016e8 <MX_GPIO_Init+0x120>)
 8001638:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800163a:	4a2b      	ldr	r2, [pc, #172]	; (80016e8 <MX_GPIO_Init+0x120>)
 800163c:	f043 0302 	orr.w	r3, r3, #2
 8001640:	6313      	str	r3, [r2, #48]	; 0x30
 8001642:	4b29      	ldr	r3, [pc, #164]	; (80016e8 <MX_GPIO_Init+0x120>)
 8001644:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001646:	f003 0302 	and.w	r3, r3, #2
 800164a:	607b      	str	r3, [r7, #4]
 800164c:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 800164e:	2200      	movs	r2, #0
 8001650:	2120      	movs	r1, #32
 8001652:	4826      	ldr	r0, [pc, #152]	; (80016ec <MX_GPIO_Init+0x124>)
 8001654:	f003 fa06 	bl	8004a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001658:	2200      	movs	r2, #0
 800165a:	f44f 7140 	mov.w	r1, #768	; 0x300
 800165e:	4824      	ldr	r0, [pc, #144]	; (80016f0 <MX_GPIO_Init+0x128>)
 8001660:	f003 fa00 	bl	8004a64 <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 8001664:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001668:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 800166a:	4b22      	ldr	r3, [pc, #136]	; (80016f4 <MX_GPIO_Init+0x12c>)
 800166c:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166e:	2300      	movs	r3, #0
 8001670:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001672:	f107 0314 	add.w	r3, r7, #20
 8001676:	4619      	mov	r1, r3
 8001678:	481f      	ldr	r0, [pc, #124]	; (80016f8 <MX_GPIO_Init+0x130>)
 800167a:	f003 f86f 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 800167e:	2320      	movs	r3, #32
 8001680:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001682:	2301      	movs	r3, #1
 8001684:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001686:	2300      	movs	r3, #0
 8001688:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 800168a:	2300      	movs	r3, #0
 800168c:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 800168e:	f107 0314 	add.w	r3, r7, #20
 8001692:	4619      	mov	r1, r3
 8001694:	4815      	ldr	r0, [pc, #84]	; (80016ec <MX_GPIO_Init+0x124>)
 8001696:	f003 f861 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 800169a:	2380      	movs	r3, #128	; 0x80
 800169c:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 800169e:	4b17      	ldr	r3, [pc, #92]	; (80016fc <MX_GPIO_Init+0x134>)
 80016a0:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 80016a2:	2300      	movs	r3, #0
 80016a4:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80016a6:	f107 0314 	add.w	r3, r7, #20
 80016aa:	4619      	mov	r1, r3
 80016ac:	480f      	ldr	r0, [pc, #60]	; (80016ec <MX_GPIO_Init+0x124>)
 80016ae:	f003 f855 	bl	800475c <HAL_GPIO_Init>

  /*Configure GPIO pins : PB8 PB9 */
  GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80016b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80016b6:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80016b8:	2311      	movs	r3, #17
 80016ba:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016bc:	2301      	movs	r3, #1
 80016be:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016c0:	2300      	movs	r3, #0
 80016c2:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016c4:	f107 0314 	add.w	r3, r7, #20
 80016c8:	4619      	mov	r1, r3
 80016ca:	4809      	ldr	r0, [pc, #36]	; (80016f0 <MX_GPIO_Init+0x128>)
 80016cc:	f003 f846 	bl	800475c <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016d0:	2200      	movs	r2, #0
 80016d2:	2100      	movs	r1, #0
 80016d4:	2017      	movs	r0, #23
 80016d6:	f002 fbec 	bl	8003eb2 <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016da:	2017      	movs	r0, #23
 80016dc:	f002 fc05 	bl	8003eea <HAL_NVIC_EnableIRQ>

}
 80016e0:	bf00      	nop
 80016e2:	3728      	adds	r7, #40	; 0x28
 80016e4:	46bd      	mov	sp, r7
 80016e6:	bd80      	pop	{r7, pc}
 80016e8:	40023800 	.word	0x40023800
 80016ec:	40020000 	.word	0x40020000
 80016f0:	40020400 	.word	0x40020400
 80016f4:	10210000 	.word	0x10210000
 80016f8:	40020800 	.word	0x40020800
 80016fc:	10110000 	.word	0x10110000

08001700 <UARTInit>:
/* USER CODE BEGIN 4 */
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void UARTInit(UARTStucrture *uart)
{
 8001700:	b580      	push	{r7, lr}
 8001702:	b082      	sub	sp, #8
 8001704:	af00      	add	r7, sp, #0
 8001706:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 8001708:	4b10      	ldr	r3, [pc, #64]	; (800174c <UARTInit+0x4c>)
 800170a:	88db      	ldrh	r3, [r3, #6]
 800170c:	4619      	mov	r1, r3
 800170e:	2001      	movs	r0, #1
 8001710:	f007 fcd0 	bl	80090b4 <calloc>
 8001714:	4603      	mov	r3, r0
 8001716:	461a      	mov	r2, r3
 8001718:	687b      	ldr	r3, [r7, #4]
 800171a:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 800171c:	4b0b      	ldr	r3, [pc, #44]	; (800174c <UARTInit+0x4c>)
 800171e:	889b      	ldrh	r3, [r3, #4]
 8001720:	4619      	mov	r1, r3
 8001722:	2001      	movs	r0, #1
 8001724:	f007 fcc6 	bl	80090b4 <calloc>
 8001728:	4603      	mov	r3, r0
 800172a:	461a      	mov	r2, r3
 800172c:	687b      	ldr	r3, [r7, #4]
 800172e:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001730:	687b      	ldr	r3, [r7, #4]
 8001732:	2200      	movs	r2, #0
 8001734:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 8001736:	687b      	ldr	r3, [r7, #4]
 8001738:	2200      	movs	r2, #0
 800173a:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	2200      	movs	r2, #0
 8001740:	81da      	strh	r2, [r3, #14]

}
 8001742:	bf00      	nop
 8001744:	3708      	adds	r7, #8
 8001746:	46bd      	mov	sp, r7
 8001748:	bd80      	pop	{r7, pc}
 800174a:	bf00      	nop
 800174c:	200000c4 	.word	0x200000c4

08001750 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001750:	b580      	push	{r7, lr}
 8001752:	b082      	sub	sp, #8
 8001754:	af00      	add	r7, sp, #0
 8001756:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 8001758:	687b      	ldr	r3, [r7, #4]
 800175a:	6818      	ldr	r0, [r3, #0]
 800175c:	687b      	ldr	r3, [r7, #4]
 800175e:	6919      	ldr	r1, [r3, #16]
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	88db      	ldrh	r3, [r3, #6]
 8001764:	461a      	mov	r2, r3
 8001766:	f006 fe21 	bl	80083ac <HAL_UART_Receive_DMA>
}
 800176a:	bf00      	nop
 800176c:	3708      	adds	r7, #8
 800176e:	46bd      	mov	sp, r7
 8001770:	bd80      	pop	{r7, pc}

08001772 <UARTGetRxHead>:
uint32_t UARTGetRxHead(UARTStucrture *uart)
{
 8001772:	b480      	push	{r7}
 8001774:	b083      	sub	sp, #12
 8001776:	af00      	add	r7, sp, #0
 8001778:	6078      	str	r0, [r7, #4]
	return uart->RxLen - __HAL_DMA_GET_COUNTER(uart->huart->hdmarx);
 800177a:	687b      	ldr	r3, [r7, #4]
 800177c:	88db      	ldrh	r3, [r3, #6]
 800177e:	461a      	mov	r2, r3
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	681b      	ldr	r3, [r3, #0]
 8001784:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8001786:	681b      	ldr	r3, [r3, #0]
 8001788:	685b      	ldr	r3, [r3, #4]
 800178a:	1ad3      	subs	r3, r2, r3
}
 800178c:	4618      	mov	r0, r3
 800178e:	370c      	adds	r7, #12
 8001790:	46bd      	mov	sp, r7
 8001792:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001796:	4770      	bx	lr

08001798 <UARTReadChar>:
int16_t UARTReadChar(UARTStucrture *uart)
{
 8001798:	b590      	push	{r4, r7, lr}
 800179a:	b085      	sub	sp, #20
 800179c:	af00      	add	r7, sp, #0
 800179e:	6078      	str	r0, [r7, #4]
	int16_t Result = -1; // -1 Mean no new data
 80017a0:	f64f 73ff 	movw	r3, #65535	; 0xffff
 80017a4:	81fb      	strh	r3, [r7, #14]

	//check Buffer Position
	if (uart->RxTail != UARTGetRxHead(uart))
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	8a9b      	ldrh	r3, [r3, #20]
 80017aa:	461c      	mov	r4, r3
 80017ac:	6878      	ldr	r0, [r7, #4]
 80017ae:	f7ff ffe0 	bl	8001772 <UARTGetRxHead>
 80017b2:	4603      	mov	r3, r0
 80017b4:	429c      	cmp	r4, r3
 80017b6:	d013      	beq.n	80017e0 <UARTReadChar+0x48>
	{
		//get data from buffer
		Result = uart->RxBuffer[uart->RxTail];
 80017b8:	687b      	ldr	r3, [r7, #4]
 80017ba:	691b      	ldr	r3, [r3, #16]
 80017bc:	687a      	ldr	r2, [r7, #4]
 80017be:	8a92      	ldrh	r2, [r2, #20]
 80017c0:	4413      	add	r3, r2
 80017c2:	781b      	ldrb	r3, [r3, #0]
 80017c4:	81fb      	strh	r3, [r7, #14]
		uart->RxTail = (uart->RxTail + 1) % uart->RxLen;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	8a9b      	ldrh	r3, [r3, #20]
 80017ca:	3301      	adds	r3, #1
 80017cc:	687a      	ldr	r2, [r7, #4]
 80017ce:	88d2      	ldrh	r2, [r2, #6]
 80017d0:	fb93 f1f2 	sdiv	r1, r3, r2
 80017d4:	fb02 f201 	mul.w	r2, r2, r1
 80017d8:	1a9b      	subs	r3, r3, r2
 80017da:	b29a      	uxth	r2, r3
 80017dc:	687b      	ldr	r3, [r7, #4]
 80017de:	829a      	strh	r2, [r3, #20]

	}
	return Result;
 80017e0:	f9b7 300e 	ldrsh.w	r3, [r7, #14]

}
 80017e4:	4618      	mov	r0, r3
 80017e6:	3714      	adds	r7, #20
 80017e8:	46bd      	mov	sp, r7
 80017ea:	bd90      	pop	{r4, r7, pc}

080017ec <UARTTxDumpBuffer>:
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 80017ec:	b580      	push	{r7, lr}
 80017ee:	b084      	sub	sp, #16
 80017f0:	af00      	add	r7, sp, #0
 80017f2:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 80017f4:	687b      	ldr	r3, [r7, #4]
 80017f6:	681b      	ldr	r3, [r3, #0]
 80017f8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80017fc:	b2db      	uxtb	r3, r3
 80017fe:	2b20      	cmp	r3, #32
 8001800:	d13d      	bne.n	800187e <UARTTxDumpBuffer+0x92>
 8001802:	4b21      	ldr	r3, [pc, #132]	; (8001888 <UARTTxDumpBuffer+0x9c>)
 8001804:	781b      	ldrb	r3, [r3, #0]
 8001806:	2b00      	cmp	r3, #0
 8001808:	d139      	bne.n	800187e <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 800180a:	4b1f      	ldr	r3, [pc, #124]	; (8001888 <UARTTxDumpBuffer+0x9c>)
 800180c:	2201      	movs	r2, #1
 800180e:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 8001810:	687b      	ldr	r3, [r7, #4]
 8001812:	89da      	ldrh	r2, [r3, #14]
 8001814:	687b      	ldr	r3, [r7, #4]
 8001816:	899b      	ldrh	r3, [r3, #12]
 8001818:	429a      	cmp	r2, r3
 800181a:	d02d      	beq.n	8001878 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 800181c:	687b      	ldr	r3, [r7, #4]
 800181e:	89da      	ldrh	r2, [r3, #14]
 8001820:	687b      	ldr	r3, [r7, #4]
 8001822:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001824:	429a      	cmp	r2, r3
 8001826:	d906      	bls.n	8001836 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8001828:	687b      	ldr	r3, [r7, #4]
 800182a:	89da      	ldrh	r2, [r3, #14]
 800182c:	687b      	ldr	r3, [r7, #4]
 800182e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001830:	1ad3      	subs	r3, r2, r3
 8001832:	b29b      	uxth	r3, r3
 8001834:	e005      	b.n	8001842 <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 8001836:	687b      	ldr	r3, [r7, #4]
 8001838:	889a      	ldrh	r2, [r3, #4]
 800183a:	687b      	ldr	r3, [r7, #4]
 800183c:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800183e:	1ad3      	subs	r3, r2, r3
 8001840:	b29b      	uxth	r3, r3
 8001842:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 8001844:	687b      	ldr	r3, [r7, #4]
 8001846:	6818      	ldr	r0, [r3, #0]
 8001848:	687b      	ldr	r3, [r7, #4]
 800184a:	689b      	ldr	r3, [r3, #8]
 800184c:	687a      	ldr	r2, [r7, #4]
 800184e:	8992      	ldrh	r2, [r2, #12]
 8001850:	4413      	add	r3, r2
 8001852:	89fa      	ldrh	r2, [r7, #14]
 8001854:	4619      	mov	r1, r3
 8001856:	f006 fd3d 	bl	80082d4 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 800185a:	687b      	ldr	r3, [r7, #4]
 800185c:	899b      	ldrh	r3, [r3, #12]
 800185e:	461a      	mov	r2, r3
 8001860:	89fb      	ldrh	r3, [r7, #14]
 8001862:	4413      	add	r3, r2
 8001864:	687a      	ldr	r2, [r7, #4]
 8001866:	8892      	ldrh	r2, [r2, #4]
 8001868:	fb93 f1f2 	sdiv	r1, r3, r2
 800186c:	fb02 f201 	mul.w	r2, r2, r1
 8001870:	1a9b      	subs	r3, r3, r2
 8001872:	b29a      	uxth	r2, r3
 8001874:	687b      	ldr	r3, [r7, #4]
 8001876:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 8001878:	4b03      	ldr	r3, [pc, #12]	; (8001888 <UARTTxDumpBuffer+0x9c>)
 800187a:	2200      	movs	r2, #0
 800187c:	701a      	strb	r2, [r3, #0]
	}
}
 800187e:	bf00      	nop
 8001880:	3710      	adds	r7, #16
 8001882:	46bd      	mov	sp, r7
 8001884:	bd80      	pop	{r7, pc}
 8001886:	bf00      	nop
 8001888:	2000074c 	.word	0x2000074c

0800188c <UARTTxWrite>:
void UARTTxWrite(UARTStucrture *uart, uint8_t *pData, uint16_t len)
{
 800188c:	b580      	push	{r7, lr}
 800188e:	b086      	sub	sp, #24
 8001890:	af00      	add	r7, sp, #0
 8001892:	60f8      	str	r0, [r7, #12]
 8001894:	60b9      	str	r1, [r7, #8]
 8001896:	4613      	mov	r3, r2
 8001898:	80fb      	strh	r3, [r7, #6]
	//check data len is more than buffur?
	uint16_t lenAddBuffer = (len <= uart->TxLen) ? len : uart->TxLen;
 800189a:	68fb      	ldr	r3, [r7, #12]
 800189c:	889b      	ldrh	r3, [r3, #4]
 800189e:	88fa      	ldrh	r2, [r7, #6]
 80018a0:	4293      	cmp	r3, r2
 80018a2:	bf28      	it	cs
 80018a4:	4613      	movcs	r3, r2
 80018a6:	82fb      	strh	r3, [r7, #22]
	// find number of data before end of ring buffer
	uint16_t numberOfdataCanCopy =
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80018a8:	8afa      	ldrh	r2, [r7, #22]
			lenAddBuffer <= uart->TxLen - uart->TxHead ?
 80018aa:	68fb      	ldr	r3, [r7, #12]
 80018ac:	889b      	ldrh	r3, [r3, #4]
 80018ae:	4619      	mov	r1, r3
 80018b0:	68fb      	ldr	r3, [r7, #12]
 80018b2:	89db      	ldrh	r3, [r3, #14]
 80018b4:	1acb      	subs	r3, r1, r3
					lenAddBuffer : uart->TxLen - uart->TxHead;
 80018b6:	4293      	cmp	r3, r2
 80018b8:	bfa8      	it	ge
 80018ba:	4613      	movge	r3, r2
	uint16_t numberOfdataCanCopy =
 80018bc:	82bb      	strh	r3, [r7, #20]
	//copy data to the buffer
	memcpy(&(uart->TxBuffer[uart->TxHead]), pData, numberOfdataCanCopy);
 80018be:	68fb      	ldr	r3, [r7, #12]
 80018c0:	689b      	ldr	r3, [r3, #8]
 80018c2:	68fa      	ldr	r2, [r7, #12]
 80018c4:	89d2      	ldrh	r2, [r2, #14]
 80018c6:	4413      	add	r3, r2
 80018c8:	8aba      	ldrh	r2, [r7, #20]
 80018ca:	68b9      	ldr	r1, [r7, #8]
 80018cc:	4618      	mov	r0, r3
 80018ce:	f007 fc23 	bl	8009118 <memcpy>

	//Move Head to new position

	uart->TxHead = (uart->TxHead + lenAddBuffer) % uart->TxLen;
 80018d2:	68fb      	ldr	r3, [r7, #12]
 80018d4:	89db      	ldrh	r3, [r3, #14]
 80018d6:	461a      	mov	r2, r3
 80018d8:	8afb      	ldrh	r3, [r7, #22]
 80018da:	4413      	add	r3, r2
 80018dc:	68fa      	ldr	r2, [r7, #12]
 80018de:	8892      	ldrh	r2, [r2, #4]
 80018e0:	fb93 f1f2 	sdiv	r1, r3, r2
 80018e4:	fb02 f201 	mul.w	r2, r2, r1
 80018e8:	1a9b      	subs	r3, r3, r2
 80018ea:	b29a      	uxth	r2, r3
 80018ec:	68fb      	ldr	r3, [r7, #12]
 80018ee:	81da      	strh	r2, [r3, #14]
	//Check that we copy all data That We can?
	if (lenAddBuffer != numberOfdataCanCopy)
 80018f0:	8afa      	ldrh	r2, [r7, #22]
 80018f2:	8abb      	ldrh	r3, [r7, #20]
 80018f4:	429a      	cmp	r2, r3
 80018f6:	d00a      	beq.n	800190e <UARTTxWrite+0x82>
	{
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 80018f8:	68fb      	ldr	r3, [r7, #12]
 80018fa:	6898      	ldr	r0, [r3, #8]
 80018fc:	8abb      	ldrh	r3, [r7, #20]
 80018fe:	68ba      	ldr	r2, [r7, #8]
 8001900:	18d1      	adds	r1, r2, r3
				lenAddBuffer - numberOfdataCanCopy);
 8001902:	8afa      	ldrh	r2, [r7, #22]
 8001904:	8abb      	ldrh	r3, [r7, #20]
 8001906:	1ad3      	subs	r3, r2, r3
		memcpy(uart->TxBuffer, &(pData[numberOfdataCanCopy]),
 8001908:	461a      	mov	r2, r3
 800190a:	f007 fc05 	bl	8009118 <memcpy>
	}
	UARTTxDumpBuffer(uart);
 800190e:	68f8      	ldr	r0, [r7, #12]
 8001910:	f7ff ff6c 	bl	80017ec <UARTTxDumpBuffer>

}
 8001914:	bf00      	nop
 8001916:	3718      	adds	r7, #24
 8001918:	46bd      	mov	sp, r7
 800191a:	bd80      	pop	{r7, pc}

0800191c <DynamixelProtocal2>:

void DynamixelProtocal2(uint8_t *Memory, uint8_t MotorID, int16_t dataIn,
		UARTStucrture *uart)
{
 800191c:	b580      	push	{r7, lr}
 800191e:	b09c      	sub	sp, #112	; 0x70
 8001920:	af00      	add	r7, sp, #0
 8001922:	60f8      	str	r0, [r7, #12]
 8001924:	607b      	str	r3, [r7, #4]
 8001926:	460b      	mov	r3, r1
 8001928:	72fb      	strb	r3, [r7, #11]
 800192a:	4613      	mov	r3, r2
 800192c:	813b      	strh	r3, [r7, #8]
	static uint16_t packetSize = 0;
	static uint16_t CRC_accum;


	//Pj. Var.
	A = dataIn ;
 800192e:	893a      	ldrh	r2, [r7, #8]
 8001930:	4ba9      	ldr	r3, [pc, #676]	; (8001bd8 <DynamixelProtocal2+0x2bc>)
 8001932:	801a      	strh	r2, [r3, #0]


	//	Pj.State Machine
	switch (State)
 8001934:	4ba9      	ldr	r3, [pc, #676]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001936:	781b      	ldrb	r3, [r3, #0]
 8001938:	2b27      	cmp	r3, #39	; 0x27
 800193a:	f200 84dc 	bhi.w	80022f6 <DynamixelProtocal2+0x9da>
 800193e:	a201      	add	r2, pc, #4	; (adr r2, 8001944 <DynamixelProtocal2+0x28>)
 8001940:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001944:	08001a07 	.word	0x08001a07
 8001948:	080022f7 	.word	0x080022f7
 800194c:	080022f7 	.word	0x080022f7
 8001950:	080022f7 	.word	0x080022f7
 8001954:	080022f7 	.word	0x080022f7
 8001958:	080022f7 	.word	0x080022f7
 800195c:	080022f7 	.word	0x080022f7
 8001960:	080022f7 	.word	0x080022f7
 8001964:	080022f7 	.word	0x080022f7
 8001968:	080022f7 	.word	0x080022f7
 800196c:	080022f7 	.word	0x080022f7
 8001970:	080022f7 	.word	0x080022f7
 8001974:	080022f7 	.word	0x080022f7
 8001978:	080022f7 	.word	0x080022f7
 800197c:	080022f7 	.word	0x080022f7
 8001980:	080022f7 	.word	0x080022f7
 8001984:	080022f7 	.word	0x080022f7
 8001988:	08001b29 	.word	0x08001b29
 800198c:	08001b4b 	.word	0x08001b4b
 8001990:	08001b6d 	.word	0x08001b6d
 8001994:	08001b8f 	.word	0x08001b8f
 8001998:	08001bb1 	.word	0x08001bb1
 800199c:	08001bf9 	.word	0x08001bf9
 80019a0:	08001c1f 	.word	0x08001c1f
 80019a4:	080022f7 	.word	0x080022f7
 80019a8:	08001cd5 	.word	0x08001cd5
 80019ac:	08001f4d 	.word	0x08001f4d
 80019b0:	08001d3d 	.word	0x08001d3d
 80019b4:	08002109 	.word	0x08002109
 80019b8:	080022f7 	.word	0x080022f7
 80019bc:	080022f7 	.word	0x080022f7
 80019c0:	08002273 	.word	0x08002273
 80019c4:	080019e5 	.word	0x080019e5
 80019c8:	080019f3 	.word	0x080019f3
 80019cc:	080022f7 	.word	0x080022f7
 80019d0:	080022f7 	.word	0x080022f7
 80019d4:	08001ccd 	.word	0x08001ccd
 80019d8:	08001c67 	.word	0x08001c67
 80019dc:	08001c89 	.word	0x08001c89
 80019e0:	08001cab 	.word	0x08001cab
	{
	case CheckACK1:
		if ((dataIn &0xFF) == 0x58)
 80019e4:	893b      	ldrh	r3, [r7, #8]
 80019e6:	b2db      	uxtb	r3, r3
 80019e8:	2b58      	cmp	r3, #88	; 0x58
 80019ea:	d102      	bne.n	80019f2 <DynamixelProtocal2+0xd6>
			State = CheckACK2 ;
 80019ec:	4b7b      	ldr	r3, [pc, #492]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 80019ee:	2221      	movs	r2, #33	; 0x21
 80019f0:	701a      	strb	r2, [r3, #0]
	case CheckACK2:
		if ((dataIn &0xFF) == 0x75)
 80019f2:	893b      	ldrh	r3, [r7, #8]
 80019f4:	b2db      	uxtb	r3, r3
 80019f6:	2b75      	cmp	r3, #117	; 0x75
 80019f8:	d102      	bne.n	8001a00 <DynamixelProtocal2+0xe4>
			ACK = 0;
 80019fa:	4b79      	ldr	r3, [pc, #484]	; (8001be0 <DynamixelProtocal2+0x2c4>)
 80019fc:	2200      	movs	r2, #0
 80019fe:	801a      	strh	r2, [r3, #0]
			State = S_idle ;
 8001a00:	4b76      	ldr	r3, [pc, #472]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001a02:	2200      	movs	r2, #0
 8001a04:	701a      	strb	r2, [r3, #0]

	case S_idle:
		if (ACK == 1)
 8001a06:	4b76      	ldr	r3, [pc, #472]	; (8001be0 <DynamixelProtocal2+0x2c4>)
 8001a08:	881b      	ldrh	r3, [r3, #0]
 8001a0a:	2b01      	cmp	r3, #1
 8001a0c:	d104      	bne.n	8001a18 <DynamixelProtocal2+0xfc>
		{
			State = CheckACK1;
 8001a0e:	4b73      	ldr	r3, [pc, #460]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001a10:	2220      	movs	r2, #32
 8001a12:	701a      	strb	r2, [r3, #0]
			else
			{
				State = S_idle ;
			}
		}
		break;
 8001a14:	f000 bc6f 	b.w	80022f6 <DynamixelProtocal2+0x9da>
			if (((dataIn >> 4) & 0xff) == 0x09)
 8001a18:	f9b7 3008 	ldrsh.w	r3, [r7, #8]
 8001a1c:	111b      	asrs	r3, r3, #4
 8001a1e:	b21b      	sxth	r3, r3
 8001a20:	b29b      	uxth	r3, r3
 8001a22:	b2db      	uxtb	r3, r3
 8001a24:	2b09      	cmp	r3, #9
 8001a26:	d17a      	bne.n	8001b1e <DynamixelProtocal2+0x202>
				START = dataIn;
 8001a28:	893a      	ldrh	r2, [r7, #8]
 8001a2a:	4b6e      	ldr	r3, [pc, #440]	; (8001be4 <DynamixelProtocal2+0x2c8>)
 8001a2c:	801a      	strh	r2, [r3, #0]
				if ((dataIn &0x0F) == 0x02 || (dataIn &0x0F) == 0x03 || (dataIn &0x0F) >= 0x08) //case 2,3,8-14 Frame#1
 8001a2e:	893b      	ldrh	r3, [r7, #8]
 8001a30:	f003 030f 	and.w	r3, r3, #15
 8001a34:	2b02      	cmp	r3, #2
 8001a36:	d009      	beq.n	8001a4c <DynamixelProtocal2+0x130>
 8001a38:	893b      	ldrh	r3, [r7, #8]
 8001a3a:	f003 030f 	and.w	r3, r3, #15
 8001a3e:	2b03      	cmp	r3, #3
 8001a40:	d004      	beq.n	8001a4c <DynamixelProtocal2+0x130>
 8001a42:	893b      	ldrh	r3, [r7, #8]
 8001a44:	f003 0308 	and.w	r3, r3, #8
 8001a48:	2b00      	cmp	r3, #0
 8001a4a:	d022      	beq.n	8001a92 <DynamixelProtocal2+0x176>
					if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001a4c:	893b      	ldrh	r3, [r7, #8]
 8001a4e:	f003 030f 	and.w	r3, r3, #15
 8001a52:	2b09      	cmp	r3, #9
 8001a54:	d009      	beq.n	8001a6a <DynamixelProtocal2+0x14e>
 8001a56:	893b      	ldrh	r3, [r7, #8]
 8001a58:	f003 030f 	and.w	r3, r3, #15
 8001a5c:	2b0a      	cmp	r3, #10
 8001a5e:	d004      	beq.n	8001a6a <DynamixelProtocal2+0x14e>
 8001a60:	893b      	ldrh	r3, [r7, #8]
 8001a62:	f003 030f 	and.w	r3, r3, #15
 8001a66:	2b0b      	cmp	r3, #11
 8001a68:	d109      	bne.n	8001a7e <DynamixelProtocal2+0x162>
						MODE = dataIn &0x0F ;
 8001a6a:	893b      	ldrh	r3, [r7, #8]
 8001a6c:	f003 030f 	and.w	r3, r3, #15
 8001a70:	b29a      	uxth	r2, r3
 8001a72:	4b5d      	ldr	r3, [pc, #372]	; (8001be8 <DynamixelProtocal2+0x2cc>)
 8001a74:	801a      	strh	r2, [r3, #0]
						State = S_Checksum1_2;
 8001a76:	4b59      	ldr	r3, [pc, #356]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001a78:	221b      	movs	r2, #27
 8001a7a:	701a      	strb	r2, [r3, #0]
					if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001a7c:	e053      	b.n	8001b26 <DynamixelProtocal2+0x20a>
						MODE = dataIn &0x0F ;
 8001a7e:	893b      	ldrh	r3, [r7, #8]
 8001a80:	f003 030f 	and.w	r3, r3, #15
 8001a84:	b29a      	uxth	r2, r3
 8001a86:	4b58      	ldr	r3, [pc, #352]	; (8001be8 <DynamixelProtocal2+0x2cc>)
 8001a88:	801a      	strh	r2, [r3, #0]
						State = S_Checksum1;
 8001a8a:	4b54      	ldr	r3, [pc, #336]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001a8c:	221a      	movs	r2, #26
 8001a8e:	701a      	strb	r2, [r3, #0]
					if((dataIn &0x0F) == 0x09 ||(dataIn &0x0F) == 0x0A || (dataIn &0x0F) == 0x0B)
 8001a90:	e049      	b.n	8001b26 <DynamixelProtocal2+0x20a>
				else if ((dataIn &0x0F) == 0x01 || ((dataIn &0x0F) <= 0x06)) //case 1,6 Frame#2
 8001a92:	893b      	ldrh	r3, [r7, #8]
 8001a94:	f003 030f 	and.w	r3, r3, #15
 8001a98:	2b01      	cmp	r3, #1
 8001a9a:	d004      	beq.n	8001aa6 <DynamixelProtocal2+0x18a>
 8001a9c:	893b      	ldrh	r3, [r7, #8]
 8001a9e:	f003 030f 	and.w	r3, r3, #15
 8001aa2:	2b06      	cmp	r3, #6
 8001aa4:	dc09      	bgt.n	8001aba <DynamixelProtocal2+0x19e>
					MODE = dataIn &0x0F ;
 8001aa6:	893b      	ldrh	r3, [r7, #8]
 8001aa8:	f003 030f 	and.w	r3, r3, #15
 8001aac:	b29a      	uxth	r2, r3
 8001aae:	4b4e      	ldr	r3, [pc, #312]	; (8001be8 <DynamixelProtocal2+0x2cc>)
 8001ab0:	801a      	strh	r2, [r3, #0]
					State = S_Frame2_DataFrame_1;
 8001ab2:	4b4a      	ldr	r3, [pc, #296]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001ab4:	2211      	movs	r2, #17
 8001ab6:	701a      	strb	r2, [r3, #0]
 8001ab8:	e035      	b.n	8001b26 <DynamixelProtocal2+0x20a>
				else if ((dataIn &0x0F) == 0x04) //case 4 Frame#2
 8001aba:	893b      	ldrh	r3, [r7, #8]
 8001abc:	f003 030f 	and.w	r3, r3, #15
 8001ac0:	2b04      	cmp	r3, #4
 8001ac2:	d10a      	bne.n	8001ada <DynamixelProtocal2+0x1be>
					MODE = dataIn &0x0F ;
 8001ac4:	893b      	ldrh	r3, [r7, #8]
 8001ac6:	f003 030f 	and.w	r3, r3, #15
 8001aca:	b29a      	uxth	r2, r3
 8001acc:	4b46      	ldr	r3, [pc, #280]	; (8001be8 <DynamixelProtocal2+0x2cc>)
 8001ace:	801a      	strh	r2, [r3, #0]
					State = S_Frame2_DataFrame_1;
 8001ad0:	4b42      	ldr	r3, [pc, #264]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001ad2:	2211      	movs	r2, #17
 8001ad4:	701a      	strb	r2, [r3, #0]
		break;
 8001ad6:	f000 bc0e 	b.w	80022f6 <DynamixelProtocal2+0x9da>
				else if ((dataIn &0x0F) == 0x05) //case 5 Frame#2
 8001ada:	893b      	ldrh	r3, [r7, #8]
 8001adc:	f003 030f 	and.w	r3, r3, #15
 8001ae0:	2b05      	cmp	r3, #5
 8001ae2:	d109      	bne.n	8001af8 <DynamixelProtocal2+0x1dc>
					MODE = dataIn &0x0F ;
 8001ae4:	893b      	ldrh	r3, [r7, #8]
 8001ae6:	f003 030f 	and.w	r3, r3, #15
 8001aea:	b29a      	uxth	r2, r3
 8001aec:	4b3e      	ldr	r3, [pc, #248]	; (8001be8 <DynamixelProtocal2+0x2cc>)
 8001aee:	801a      	strh	r2, [r3, #0]
					State = S_Frame2_DataFrame_Mode5_1;
 8001af0:	4b3a      	ldr	r3, [pc, #232]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001af2:	2215      	movs	r2, #21
 8001af4:	701a      	strb	r2, [r3, #0]
		break;
 8001af6:	e3fe      	b.n	80022f6 <DynamixelProtocal2+0x9da>
				else if ((dataIn &0x0F) == 0x07) //case 7 Frame#3
 8001af8:	893b      	ldrh	r3, [r7, #8]
 8001afa:	f003 030f 	and.w	r3, r3, #15
 8001afe:	2b07      	cmp	r3, #7
 8001b00:	d109      	bne.n	8001b16 <DynamixelProtocal2+0x1fa>
					MODE = dataIn &0x0F ;
 8001b02:	893b      	ldrh	r3, [r7, #8]
 8001b04:	f003 030f 	and.w	r3, r3, #15
 8001b08:	b29a      	uxth	r2, r3
 8001b0a:	4b37      	ldr	r3, [pc, #220]	; (8001be8 <DynamixelProtocal2+0x2cc>)
 8001b0c:	801a      	strh	r2, [r3, #0]
					State = S_Frame3_Station;
 8001b0e:	4b33      	ldr	r3, [pc, #204]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001b10:	2217      	movs	r2, #23
 8001b12:	701a      	strb	r2, [r3, #0]
		break;
 8001b14:	e3ef      	b.n	80022f6 <DynamixelProtocal2+0x9da>
					State = S_idle ;
 8001b16:	4b31      	ldr	r3, [pc, #196]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001b18:	2200      	movs	r2, #0
 8001b1a:	701a      	strb	r2, [r3, #0]
		break;
 8001b1c:	e3eb      	b.n	80022f6 <DynamixelProtocal2+0x9da>
				State = S_idle ;
 8001b1e:	4b2f      	ldr	r3, [pc, #188]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001b20:	2200      	movs	r2, #0
 8001b22:	701a      	strb	r2, [r3, #0]
		break;
 8001b24:	e3e7      	b.n	80022f6 <DynamixelProtocal2+0x9da>
 8001b26:	e3e6      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Frame2_DataFrame_1 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001b28:	4b30      	ldr	r3, [pc, #192]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b2a:	881b      	ldrh	r3, [r3, #0]
 8001b2c:	461a      	mov	r2, r3
 8001b2e:	893b      	ldrh	r3, [r7, #8]
 8001b30:	b2d9      	uxtb	r1, r3
 8001b32:	4b2f      	ldr	r3, [pc, #188]	; (8001bf0 <DynamixelProtocal2+0x2d4>)
 8001b34:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001b36:	4b2d      	ldr	r3, [pc, #180]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b38:	881b      	ldrh	r3, [r3, #0]
 8001b3a:	3301      	adds	r3, #1
 8001b3c:	b29a      	uxth	r2, r3
 8001b3e:	4b2b      	ldr	r3, [pc, #172]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b40:	801a      	strh	r2, [r3, #0]
		State = S_Frame2_DataFrame_2;
 8001b42:	4b26      	ldr	r3, [pc, #152]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001b44:	2212      	movs	r2, #18
 8001b46:	701a      	strb	r2, [r3, #0]
		break;
 8001b48:	e3d5      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Frame2_DataFrame_2:
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001b4a:	4b28      	ldr	r3, [pc, #160]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b4c:	881b      	ldrh	r3, [r3, #0]
 8001b4e:	461a      	mov	r2, r3
 8001b50:	893b      	ldrh	r3, [r7, #8]
 8001b52:	b2d9      	uxtb	r1, r3
 8001b54:	4b26      	ldr	r3, [pc, #152]	; (8001bf0 <DynamixelProtocal2+0x2d4>)
 8001b56:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001b58:	4b24      	ldr	r3, [pc, #144]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b5a:	881b      	ldrh	r3, [r3, #0]
 8001b5c:	3301      	adds	r3, #1
 8001b5e:	b29a      	uxth	r2, r3
 8001b60:	4b22      	ldr	r3, [pc, #136]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b62:	801a      	strh	r2, [r3, #0]
		State = S_Checksum2 ;
 8001b64:	4b1d      	ldr	r3, [pc, #116]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001b66:	221c      	movs	r2, #28
 8001b68:	701a      	strb	r2, [r3, #0]
		break;
 8001b6a:	e3c4      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Frame2_DataFrame_Mode4_1 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001b6c:	4b1f      	ldr	r3, [pc, #124]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b6e:	881b      	ldrh	r3, [r3, #0]
 8001b70:	461a      	mov	r2, r3
 8001b72:	893b      	ldrh	r3, [r7, #8]
 8001b74:	b2d9      	uxtb	r1, r3
 8001b76:	4b1e      	ldr	r3, [pc, #120]	; (8001bf0 <DynamixelProtocal2+0x2d4>)
 8001b78:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001b7a:	4b1c      	ldr	r3, [pc, #112]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b7c:	881b      	ldrh	r3, [r3, #0]
 8001b7e:	3301      	adds	r3, #1
 8001b80:	b29a      	uxth	r2, r3
 8001b82:	4b1a      	ldr	r3, [pc, #104]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b84:	801a      	strh	r2, [r3, #0]
		State = S_Frame2_DataFrame_Mode4_2;
 8001b86:	4b15      	ldr	r3, [pc, #84]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001b88:	2214      	movs	r2, #20
 8001b8a:	701a      	strb	r2, [r3, #0]
		break;
 8001b8c:	e3b3      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Frame2_DataFrame_Mode4_2:
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001b8e:	4b17      	ldr	r3, [pc, #92]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b90:	881b      	ldrh	r3, [r3, #0]
 8001b92:	461a      	mov	r2, r3
 8001b94:	893b      	ldrh	r3, [r7, #8]
 8001b96:	b2d9      	uxtb	r1, r3
 8001b98:	4b15      	ldr	r3, [pc, #84]	; (8001bf0 <DynamixelProtocal2+0x2d4>)
 8001b9a:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001b9c:	4b13      	ldr	r3, [pc, #76]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001b9e:	881b      	ldrh	r3, [r3, #0]
 8001ba0:	3301      	adds	r3, #1
 8001ba2:	b29a      	uxth	r2, r3
 8001ba4:	4b11      	ldr	r3, [pc, #68]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001ba6:	801a      	strh	r2, [r3, #0]
		State = S_Checksum2_4 ;
 8001ba8:	4b0c      	ldr	r3, [pc, #48]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001baa:	221d      	movs	r2, #29
 8001bac:	701a      	strb	r2, [r3, #0]
		break;
 8001bae:	e3a2      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Frame2_DataFrame_Mode5_1 :
		DATAFRAME_5[CollectedData] = dataIn &0xff;
 8001bb0:	893b      	ldrh	r3, [r7, #8]
 8001bb2:	461a      	mov	r2, r3
 8001bb4:	4b0d      	ldr	r3, [pc, #52]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001bb6:	881b      	ldrh	r3, [r3, #0]
 8001bb8:	4619      	mov	r1, r3
 8001bba:	b2d3      	uxtb	r3, r2
 8001bbc:	4a0d      	ldr	r2, [pc, #52]	; (8001bf4 <DynamixelProtocal2+0x2d8>)
 8001bbe:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		CollectedData++;
 8001bc2:	4b0a      	ldr	r3, [pc, #40]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001bc4:	881b      	ldrh	r3, [r3, #0]
 8001bc6:	3301      	adds	r3, #1
 8001bc8:	b29a      	uxth	r2, r3
 8001bca:	4b08      	ldr	r3, [pc, #32]	; (8001bec <DynamixelProtocal2+0x2d0>)
 8001bcc:	801a      	strh	r2, [r3, #0]
		State = S_Frame2_DataFrame_Mode5_2;
 8001bce:	4b03      	ldr	r3, [pc, #12]	; (8001bdc <DynamixelProtocal2+0x2c0>)
 8001bd0:	2216      	movs	r2, #22
 8001bd2:	701a      	strb	r2, [r3, #0]
		break;
 8001bd4:	e38f      	b.n	80022f6 <DynamixelProtocal2+0x9da>
 8001bd6:	bf00      	nop
 8001bd8:	200006f0 	.word	0x200006f0
 8001bdc:	200006f4 	.word	0x200006f4
 8001be0:	200006ee 	.word	0x200006ee
 8001be4:	200001e0 	.word	0x200001e0
 8001be8:	200001e2 	.word	0x200001e2
 8001bec:	2000074e 	.word	0x2000074e
 8001bf0:	200001e4 	.word	0x200001e4
 8001bf4:	200002e4 	.word	0x200002e4

	case S_Frame2_DataFrame_Mode5_2:
		DATAFRAME_5[CollectedData] = dataIn &0xff;
 8001bf8:	893b      	ldrh	r3, [r7, #8]
 8001bfa:	461a      	mov	r2, r3
 8001bfc:	4b9a      	ldr	r3, [pc, #616]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001bfe:	881b      	ldrh	r3, [r3, #0]
 8001c00:	4619      	mov	r1, r3
 8001c02:	b2d3      	uxtb	r3, r2
 8001c04:	4a99      	ldr	r2, [pc, #612]	; (8001e6c <DynamixelProtocal2+0x550>)
 8001c06:	f842 3021 	str.w	r3, [r2, r1, lsl #2]
		CollectedData++;
 8001c0a:	4b97      	ldr	r3, [pc, #604]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001c0c:	881b      	ldrh	r3, [r3, #0]
 8001c0e:	3301      	adds	r3, #1
 8001c10:	b29a      	uxth	r2, r3
 8001c12:	4b95      	ldr	r3, [pc, #596]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001c14:	801a      	strh	r2, [r3, #0]
		State = S_Checksum2_5 ;
 8001c16:	4b96      	ldr	r3, [pc, #600]	; (8001e70 <DynamixelProtocal2+0x554>)
 8001c18:	221e      	movs	r2, #30
 8001c1a:	701a      	strb	r2, [r3, #0]
		break;
 8001c1c:	e36b      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Frame3_Station:
		STATION = dataIn &0xff;
 8001c1e:	893b      	ldrh	r3, [r7, #8]
 8001c20:	b2da      	uxtb	r2, r3
 8001c22:	4b94      	ldr	r3, [pc, #592]	; (8001e74 <DynamixelProtocal2+0x558>)
 8001c24:	701a      	strb	r2, [r3, #0]
		DATA = (STATION) &0xff;
 8001c26:	4b93      	ldr	r3, [pc, #588]	; (8001e74 <DynamixelProtocal2+0x558>)
 8001c28:	781b      	ldrb	r3, [r3, #0]
 8001c2a:	b29a      	uxth	r2, r3
 8001c2c:	4b92      	ldr	r3, [pc, #584]	; (8001e78 <DynamixelProtocal2+0x55c>)
 8001c2e:	801a      	strh	r2, [r3, #0]
		if(DATA % 2 == 0) 				//EVEN
 8001c30:	4b91      	ldr	r3, [pc, #580]	; (8001e78 <DynamixelProtocal2+0x55c>)
 8001c32:	881b      	ldrh	r3, [r3, #0]
 8001c34:	f003 0301 	and.w	r3, r3, #1
 8001c38:	b29b      	uxth	r3, r3
 8001c3a:	2b00      	cmp	r3, #0
 8001c3c:	d106      	bne.n	8001c4c <DynamixelProtocal2+0x330>
		{
			DATA_Byte = (DATA/2);
 8001c3e:	4b8e      	ldr	r3, [pc, #568]	; (8001e78 <DynamixelProtocal2+0x55c>)
 8001c40:	881b      	ldrh	r3, [r3, #0]
 8001c42:	085b      	lsrs	r3, r3, #1
 8001c44:	b29a      	uxth	r2, r3
 8001c46:	4b8d      	ldr	r3, [pc, #564]	; (8001e7c <DynamixelProtocal2+0x560>)
 8001c48:	801a      	strh	r2, [r3, #0]
 8001c4a:	e008      	b.n	8001c5e <DynamixelProtocal2+0x342>
		}
		else							//odd
		{
			DATA_Byte = (DATA+1)/2;
 8001c4c:	4b8a      	ldr	r3, [pc, #552]	; (8001e78 <DynamixelProtocal2+0x55c>)
 8001c4e:	881b      	ldrh	r3, [r3, #0]
 8001c50:	3301      	adds	r3, #1
 8001c52:	0fda      	lsrs	r2, r3, #31
 8001c54:	4413      	add	r3, r2
 8001c56:	105b      	asrs	r3, r3, #1
 8001c58:	b29a      	uxth	r2, r3
 8001c5a:	4b88      	ldr	r3, [pc, #544]	; (8001e7c <DynamixelProtocal2+0x560>)
 8001c5c:	801a      	strh	r2, [r3, #0]
		}
		State = S_Frame3_DataFrame_2;
 8001c5e:	4b84      	ldr	r3, [pc, #528]	; (8001e70 <DynamixelProtocal2+0x554>)
 8001c60:	2219      	movs	r2, #25
 8001c62:	701a      	strb	r2, [r3, #0]
		break;
 8001c64:	e347      	b.n	80022f6 <DynamixelProtocal2+0x9da>


	case S500 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001c66:	4b80      	ldr	r3, [pc, #512]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001c68:	881b      	ldrh	r3, [r3, #0]
 8001c6a:	461a      	mov	r2, r3
 8001c6c:	893b      	ldrh	r3, [r7, #8]
 8001c6e:	b2d9      	uxtb	r1, r3
 8001c70:	4b83      	ldr	r3, [pc, #524]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001c72:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001c74:	4b7c      	ldr	r3, [pc, #496]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001c76:	881b      	ldrh	r3, [r3, #0]
 8001c78:	3301      	adds	r3, #1
 8001c7a:	b29a      	uxth	r2, r3
 8001c7c:	4b7a      	ldr	r3, [pc, #488]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001c7e:	801a      	strh	r2, [r3, #0]
		State = S600;
 8001c80:	4b7b      	ldr	r3, [pc, #492]	; (8001e70 <DynamixelProtocal2+0x554>)
 8001c82:	2226      	movs	r2, #38	; 0x26
 8001c84:	701a      	strb	r2, [r3, #0]
		break;
 8001c86:	e336      	b.n	80022f6 <DynamixelProtocal2+0x9da>
	case S600 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001c88:	4b77      	ldr	r3, [pc, #476]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001c8a:	881b      	ldrh	r3, [r3, #0]
 8001c8c:	461a      	mov	r2, r3
 8001c8e:	893b      	ldrh	r3, [r7, #8]
 8001c90:	b2d9      	uxtb	r1, r3
 8001c92:	4b7b      	ldr	r3, [pc, #492]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001c94:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001c96:	4b74      	ldr	r3, [pc, #464]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001c98:	881b      	ldrh	r3, [r3, #0]
 8001c9a:	3301      	adds	r3, #1
 8001c9c:	b29a      	uxth	r2, r3
 8001c9e:	4b72      	ldr	r3, [pc, #456]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001ca0:	801a      	strh	r2, [r3, #0]
		State = S700;
 8001ca2:	4b73      	ldr	r3, [pc, #460]	; (8001e70 <DynamixelProtocal2+0x554>)
 8001ca4:	2227      	movs	r2, #39	; 0x27
 8001ca6:	701a      	strb	r2, [r3, #0]
		break;
 8001ca8:	e325      	b.n	80022f6 <DynamixelProtocal2+0x9da>
	case S700 :
		DATAFRAME[CollectedData] = dataIn &0xff;
 8001caa:	4b6f      	ldr	r3, [pc, #444]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001cac:	881b      	ldrh	r3, [r3, #0]
 8001cae:	461a      	mov	r2, r3
 8001cb0:	893b      	ldrh	r3, [r7, #8]
 8001cb2:	b2d9      	uxtb	r1, r3
 8001cb4:	4b72      	ldr	r3, [pc, #456]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001cb6:	5499      	strb	r1, [r3, r2]
		CollectedData++;
 8001cb8:	4b6b      	ldr	r3, [pc, #428]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001cba:	881b      	ldrh	r3, [r3, #0]
 8001cbc:	3301      	adds	r3, #1
 8001cbe:	b29a      	uxth	r2, r3
 8001cc0:	4b69      	ldr	r3, [pc, #420]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001cc2:	801a      	strh	r2, [r3, #0]
		State = S_Checksum3;
 8001cc4:	4b6a      	ldr	r3, [pc, #424]	; (8001e70 <DynamixelProtocal2+0x554>)
 8001cc6:	221f      	movs	r2, #31
 8001cc8:	701a      	strb	r2, [r3, #0]
		break;
 8001cca:	e314      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Jump :
		State = S_Checksum3;
 8001ccc:	4b68      	ldr	r3, [pc, #416]	; (8001e70 <DynamixelProtocal2+0x554>)
 8001cce:	221f      	movs	r2, #31
 8001cd0:	701a      	strb	r2, [r3, #0]
		break;
 8001cd2:	e310      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case  S_Frame3_DataFrame_2:
	{
		if (x < DATA_Byte)
 8001cd4:	4b6b      	ldr	r3, [pc, #428]	; (8001e84 <DynamixelProtocal2+0x568>)
 8001cd6:	781b      	ldrb	r3, [r3, #0]
 8001cd8:	b29a      	uxth	r2, r3
 8001cda:	4b68      	ldr	r3, [pc, #416]	; (8001e7c <DynamixelProtocal2+0x560>)
 8001cdc:	881b      	ldrh	r3, [r3, #0]
 8001cde:	429a      	cmp	r2, r3
 8001ce0:	d222      	bcs.n	8001d28 <DynamixelProtocal2+0x40c>
		{
			x++;
 8001ce2:	4b68      	ldr	r3, [pc, #416]	; (8001e84 <DynamixelProtocal2+0x568>)
 8001ce4:	781b      	ldrb	r3, [r3, #0]
 8001ce6:	3301      	adds	r3, #1
 8001ce8:	b2da      	uxtb	r2, r3
 8001cea:	4b66      	ldr	r3, [pc, #408]	; (8001e84 <DynamixelProtocal2+0x568>)
 8001cec:	701a      	strb	r2, [r3, #0]
			S = dataIn &0xff;
 8001cee:	893b      	ldrh	r3, [r7, #8]
 8001cf0:	b2db      	uxtb	r3, r3
 8001cf2:	b29a      	uxth	r2, r3
 8001cf4:	4b64      	ldr	r3, [pc, #400]	; (8001e88 <DynamixelProtocal2+0x56c>)
 8001cf6:	801a      	strh	r2, [r3, #0]
			DATA_N_SUM += S;
 8001cf8:	4b63      	ldr	r3, [pc, #396]	; (8001e88 <DynamixelProtocal2+0x56c>)
 8001cfa:	881b      	ldrh	r3, [r3, #0]
 8001cfc:	b2da      	uxtb	r2, r3
 8001cfe:	4b63      	ldr	r3, [pc, #396]	; (8001e8c <DynamixelProtocal2+0x570>)
 8001d00:	781b      	ldrb	r3, [r3, #0]
 8001d02:	4413      	add	r3, r2
 8001d04:	b2da      	uxtb	r2, r3
 8001d06:	4b61      	ldr	r3, [pc, #388]	; (8001e8c <DynamixelProtocal2+0x570>)
 8001d08:	701a      	strb	r2, [r3, #0]
			DATAFRAME[CollectedData] = S;
 8001d0a:	4b5f      	ldr	r3, [pc, #380]	; (8001e88 <DynamixelProtocal2+0x56c>)
 8001d0c:	8819      	ldrh	r1, [r3, #0]
 8001d0e:	4b56      	ldr	r3, [pc, #344]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001d10:	881b      	ldrh	r3, [r3, #0]
 8001d12:	461a      	mov	r2, r3
 8001d14:	b2c9      	uxtb	r1, r1
 8001d16:	4b5a      	ldr	r3, [pc, #360]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001d18:	5499      	strb	r1, [r3, r2]
			CollectedData++;
 8001d1a:	4b53      	ldr	r3, [pc, #332]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001d1c:	881b      	ldrh	r3, [r3, #0]
 8001d1e:	3301      	adds	r3, #1
 8001d20:	b29a      	uxth	r2, r3
 8001d22:	4b51      	ldr	r3, [pc, #324]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001d24:	801a      	strh	r2, [r3, #0]
 8001d26:	e005      	b.n	8001d34 <DynamixelProtocal2+0x418>

		}
		else
		{
			B+=1;
 8001d28:	4b59      	ldr	r3, [pc, #356]	; (8001e90 <DynamixelProtocal2+0x574>)
 8001d2a:	881b      	ldrh	r3, [r3, #0]
 8001d2c:	3301      	adds	r3, #1
 8001d2e:	b29a      	uxth	r2, r3
 8001d30:	4b57      	ldr	r3, [pc, #348]	; (8001e90 <DynamixelProtocal2+0x574>)
 8001d32:	801a      	strh	r2, [r3, #0]
		}
		State = S_Checksum3;
 8001d34:	4b4e      	ldr	r3, [pc, #312]	; (8001e70 <DynamixelProtocal2+0x554>)
 8001d36:	221f      	movs	r2, #31
 8001d38:	701a      	strb	r2, [r3, #0]
		break;
 8001d3a:	e2dc      	b.n	80022f6 <DynamixelProtocal2+0x9da>
	}

	case S_Checksum1_2:
		CHECKSUM = dataIn & 0xff ;
 8001d3c:	893b      	ldrh	r3, [r7, #8]
 8001d3e:	b2da      	uxtb	r2, r3
 8001d40:	4b54      	ldr	r3, [pc, #336]	; (8001e94 <DynamixelProtocal2+0x578>)
 8001d42:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~((0x9 << 4) | MODE );
 8001d44:	4b54      	ldr	r3, [pc, #336]	; (8001e98 <DynamixelProtocal2+0x57c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	b2db      	uxtb	r3, r3
 8001d4a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001d4e:	b2db      	uxtb	r3, r3
 8001d50:	43db      	mvns	r3, r3
 8001d52:	b2da      	uxtb	r2, r3
 8001d54:	4b51      	ldr	r3, [pc, #324]	; (8001e9c <DynamixelProtocal2+0x580>)
 8001d56:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 8001d58:	4b50      	ldr	r3, [pc, #320]	; (8001e9c <DynamixelProtocal2+0x580>)
 8001d5a:	781a      	ldrb	r2, [r3, #0]
 8001d5c:	4b4d      	ldr	r3, [pc, #308]	; (8001e94 <DynamixelProtocal2+0x578>)
 8001d5e:	781b      	ldrb	r3, [r3, #0]
 8001d60:	429a      	cmp	r2, r3
 8001d62:	f040 80d9 	bne.w	8001f18 <DynamixelProtocal2+0x5fc>
		{
			switch (MODE)
 8001d66:	4b4c      	ldr	r3, [pc, #304]	; (8001e98 <DynamixelProtocal2+0x57c>)
 8001d68:	881b      	ldrh	r3, [r3, #0]
 8001d6a:	2b0b      	cmp	r3, #11
 8001d6c:	f000 809a 	beq.w	8001ea4 <DynamixelProtocal2+0x588>
 8001d70:	2b0b      	cmp	r3, #11
 8001d72:	f300 80e4 	bgt.w	8001f3e <DynamixelProtocal2+0x622>
 8001d76:	2b09      	cmp	r3, #9
 8001d78:	d002      	beq.n	8001d80 <DynamixelProtocal2+0x464>
 8001d7a:	2b0a      	cmp	r3, #10
 8001d7c:	d03a      	beq.n	8001df4 <DynamixelProtocal2+0x4d8>
 8001d7e:	e0de      	b.n	8001f3e <DynamixelProtocal2+0x622>
			{
				case 0b1001: //9
				{
					uint8_t temp[] = {0x58,0x75};
 8001d80:	f247 5358 	movw	r3, #30040	; 0x7558
 8001d84:	f8a7 306c 	strh.w	r3, [r7, #108]	; 0x6c
					UARTTxWrite(uart, temp, 2);
 8001d88:	f107 036c 	add.w	r3, r7, #108	; 0x6c
 8001d8c:	2202      	movs	r2, #2
 8001d8e:	4619      	mov	r1, r3
 8001d90:	6878      	ldr	r0, [r7, #4]
 8001d92:	f7ff fd7b 	bl	800188c <UARTTxWrite>
					CHECK_SEND = ~ (0x99 + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001d96:	4b34      	ldr	r3, [pc, #208]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001d98:	881b      	ldrh	r3, [r3, #0]
 8001d9a:	3b02      	subs	r3, #2
 8001d9c:	4a38      	ldr	r2, [pc, #224]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001d9e:	5cd2      	ldrb	r2, [r2, r3]
 8001da0:	4b31      	ldr	r3, [pc, #196]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001da2:	881b      	ldrh	r3, [r3, #0]
 8001da4:	3b01      	subs	r3, #1
 8001da6:	4936      	ldr	r1, [pc, #216]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001da8:	5ccb      	ldrb	r3, [r1, r3]
 8001daa:	4413      	add	r3, r2
 8001dac:	b2db      	uxtb	r3, r3
 8001dae:	3b67      	subs	r3, #103	; 0x67
 8001db0:	b2db      	uxtb	r3, r3
 8001db2:	43db      	mvns	r3, r3
 8001db4:	b2da      	uxtb	r2, r3
 8001db6:	4b3a      	ldr	r3, [pc, #232]	; (8001ea0 <DynamixelProtocal2+0x584>)
 8001db8:	701a      	strb	r2, [r3, #0]
					uint8_t FRAME2[] = {0x99,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001dba:	2399      	movs	r3, #153	; 0x99
 8001dbc:	f887 3068 	strb.w	r3, [r7, #104]	; 0x68
 8001dc0:	4b29      	ldr	r3, [pc, #164]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001dc2:	881b      	ldrh	r3, [r3, #0]
 8001dc4:	3b02      	subs	r3, #2
 8001dc6:	4a2e      	ldr	r2, [pc, #184]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001dc8:	5cd3      	ldrb	r3, [r2, r3]
 8001dca:	f887 3069 	strb.w	r3, [r7, #105]	; 0x69
 8001dce:	4b26      	ldr	r3, [pc, #152]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001dd0:	881b      	ldrh	r3, [r3, #0]
 8001dd2:	3b01      	subs	r3, #1
 8001dd4:	4a2a      	ldr	r2, [pc, #168]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001dd6:	5cd3      	ldrb	r3, [r2, r3]
 8001dd8:	f887 306a 	strb.w	r3, [r7, #106]	; 0x6a
 8001ddc:	4b30      	ldr	r3, [pc, #192]	; (8001ea0 <DynamixelProtocal2+0x584>)
 8001dde:	781b      	ldrb	r3, [r3, #0]
 8001de0:	f887 306b 	strb.w	r3, [r7, #107]	; 0x6b
					UARTTxWrite(uart, FRAME2, 4);
 8001de4:	f107 0368 	add.w	r3, r7, #104	; 0x68
 8001de8:	2204      	movs	r2, #4
 8001dea:	4619      	mov	r1, r3
 8001dec:	6878      	ldr	r0, [r7, #4]
 8001dee:	f7ff fd4d 	bl	800188c <UARTTxWrite>
					break;
 8001df2:	e0a4      	b.n	8001f3e <DynamixelProtocal2+0x622>
				}
				case 0b1010: //10
				{
					uint8_t temp[] = {0x58,0x75};
 8001df4:	f247 5358 	movw	r3, #30040	; 0x7558
 8001df8:	f8a7 3064 	strh.w	r3, [r7, #100]	; 0x64
					UARTTxWrite(uart, temp, 2);
 8001dfc:	f107 0364 	add.w	r3, r7, #100	; 0x64
 8001e00:	2202      	movs	r2, #2
 8001e02:	4619      	mov	r1, r3
 8001e04:	6878      	ldr	r0, [r7, #4]
 8001e06:	f7ff fd41 	bl	800188c <UARTTxWrite>
					CHECK_SEND = ~(0x9A + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001e0a:	4b17      	ldr	r3, [pc, #92]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001e0c:	881b      	ldrh	r3, [r3, #0]
 8001e0e:	3b02      	subs	r3, #2
 8001e10:	4a1b      	ldr	r2, [pc, #108]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001e12:	5cd2      	ldrb	r2, [r2, r3]
 8001e14:	4b14      	ldr	r3, [pc, #80]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001e16:	881b      	ldrh	r3, [r3, #0]
 8001e18:	3b01      	subs	r3, #1
 8001e1a:	4919      	ldr	r1, [pc, #100]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001e1c:	5ccb      	ldrb	r3, [r1, r3]
 8001e1e:	4413      	add	r3, r2
 8001e20:	b2db      	uxtb	r3, r3
 8001e22:	3b66      	subs	r3, #102	; 0x66
 8001e24:	b2db      	uxtb	r3, r3
 8001e26:	43db      	mvns	r3, r3
 8001e28:	b2da      	uxtb	r2, r3
 8001e2a:	4b1d      	ldr	r3, [pc, #116]	; (8001ea0 <DynamixelProtocal2+0x584>)
 8001e2c:	701a      	strb	r2, [r3, #0]
					uint8_t FRAME2[] = {0x9A,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001e2e:	239a      	movs	r3, #154	; 0x9a
 8001e30:	f887 3060 	strb.w	r3, [r7, #96]	; 0x60
 8001e34:	4b0c      	ldr	r3, [pc, #48]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001e36:	881b      	ldrh	r3, [r3, #0]
 8001e38:	3b02      	subs	r3, #2
 8001e3a:	4a11      	ldr	r2, [pc, #68]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001e3c:	5cd3      	ldrb	r3, [r2, r3]
 8001e3e:	f887 3061 	strb.w	r3, [r7, #97]	; 0x61
 8001e42:	4b09      	ldr	r3, [pc, #36]	; (8001e68 <DynamixelProtocal2+0x54c>)
 8001e44:	881b      	ldrh	r3, [r3, #0]
 8001e46:	3b01      	subs	r3, #1
 8001e48:	4a0d      	ldr	r2, [pc, #52]	; (8001e80 <DynamixelProtocal2+0x564>)
 8001e4a:	5cd3      	ldrb	r3, [r2, r3]
 8001e4c:	f887 3062 	strb.w	r3, [r7, #98]	; 0x62
 8001e50:	4b13      	ldr	r3, [pc, #76]	; (8001ea0 <DynamixelProtocal2+0x584>)
 8001e52:	781b      	ldrb	r3, [r3, #0]
 8001e54:	f887 3063 	strb.w	r3, [r7, #99]	; 0x63
					UARTTxWrite(uart, FRAME2, 4);
 8001e58:	f107 0360 	add.w	r3, r7, #96	; 0x60
 8001e5c:	2204      	movs	r2, #4
 8001e5e:	4619      	mov	r1, r3
 8001e60:	6878      	ldr	r0, [r7, #4]
 8001e62:	f7ff fd13 	bl	800188c <UARTTxWrite>
					break;
 8001e66:	e06a      	b.n	8001f3e <DynamixelProtocal2+0x622>
 8001e68:	2000074e 	.word	0x2000074e
 8001e6c:	200002e4 	.word	0x200002e4
 8001e70:	200006f4 	.word	0x200006f4
 8001e74:	200006e8 	.word	0x200006e8
 8001e78:	200006e4 	.word	0x200006e4
 8001e7c:	200006e6 	.word	0x200006e6
 8001e80:	200001e4 	.word	0x200001e4
 8001e84:	200006ec 	.word	0x200006ec
 8001e88:	200006ea 	.word	0x200006ea
 8001e8c:	200006e9 	.word	0x200006e9
 8001e90:	200006f2 	.word	0x200006f2
 8001e94:	200001db 	.word	0x200001db
 8001e98:	200001e2 	.word	0x200001e2
 8001e9c:	200001dc 	.word	0x200001dc
 8001ea0:	200001de 	.word	0x200001de
				}
				case 0b1011: //11
				{
					uint8_t temp[] = {0x58,0x75};
 8001ea4:	f247 5358 	movw	r3, #30040	; 0x7558
 8001ea8:	f8a7 305c 	strh.w	r3, [r7, #92]	; 0x5c
					UARTTxWrite(uart, temp, 2);
 8001eac:	f107 035c 	add.w	r3, r7, #92	; 0x5c
 8001eb0:	2202      	movs	r2, #2
 8001eb2:	4619      	mov	r1, r3
 8001eb4:	6878      	ldr	r0, [r7, #4]
 8001eb6:	f7ff fce9 	bl	800188c <UARTTxWrite>
					CHECK_SEND = ~(0x9B + (DATAFRAME[CollectedData-2]) + (DATAFRAME[CollectedData-1]));
 8001eba:	4bb8      	ldr	r3, [pc, #736]	; (800219c <DynamixelProtocal2+0x880>)
 8001ebc:	881b      	ldrh	r3, [r3, #0]
 8001ebe:	3b02      	subs	r3, #2
 8001ec0:	4ab7      	ldr	r2, [pc, #732]	; (80021a0 <DynamixelProtocal2+0x884>)
 8001ec2:	5cd2      	ldrb	r2, [r2, r3]
 8001ec4:	4bb5      	ldr	r3, [pc, #724]	; (800219c <DynamixelProtocal2+0x880>)
 8001ec6:	881b      	ldrh	r3, [r3, #0]
 8001ec8:	3b01      	subs	r3, #1
 8001eca:	49b5      	ldr	r1, [pc, #724]	; (80021a0 <DynamixelProtocal2+0x884>)
 8001ecc:	5ccb      	ldrb	r3, [r1, r3]
 8001ece:	4413      	add	r3, r2
 8001ed0:	b2db      	uxtb	r3, r3
 8001ed2:	3b65      	subs	r3, #101	; 0x65
 8001ed4:	b2db      	uxtb	r3, r3
 8001ed6:	43db      	mvns	r3, r3
 8001ed8:	b2da      	uxtb	r2, r3
 8001eda:	4bb2      	ldr	r3, [pc, #712]	; (80021a4 <DynamixelProtocal2+0x888>)
 8001edc:	701a      	strb	r2, [r3, #0]
					uint8_t FRAME2[] = {0x9B,(DATAFRAME[CollectedData-2]),(DATAFRAME[CollectedData-1]),CHECK_SEND};
 8001ede:	239b      	movs	r3, #155	; 0x9b
 8001ee0:	f887 3058 	strb.w	r3, [r7, #88]	; 0x58
 8001ee4:	4bad      	ldr	r3, [pc, #692]	; (800219c <DynamixelProtocal2+0x880>)
 8001ee6:	881b      	ldrh	r3, [r3, #0]
 8001ee8:	3b02      	subs	r3, #2
 8001eea:	4aad      	ldr	r2, [pc, #692]	; (80021a0 <DynamixelProtocal2+0x884>)
 8001eec:	5cd3      	ldrb	r3, [r2, r3]
 8001eee:	f887 3059 	strb.w	r3, [r7, #89]	; 0x59
 8001ef2:	4baa      	ldr	r3, [pc, #680]	; (800219c <DynamixelProtocal2+0x880>)
 8001ef4:	881b      	ldrh	r3, [r3, #0]
 8001ef6:	3b01      	subs	r3, #1
 8001ef8:	4aa9      	ldr	r2, [pc, #676]	; (80021a0 <DynamixelProtocal2+0x884>)
 8001efa:	5cd3      	ldrb	r3, [r2, r3]
 8001efc:	f887 305a 	strb.w	r3, [r7, #90]	; 0x5a
 8001f00:	4ba8      	ldr	r3, [pc, #672]	; (80021a4 <DynamixelProtocal2+0x888>)
 8001f02:	781b      	ldrb	r3, [r3, #0]
 8001f04:	f887 305b 	strb.w	r3, [r7, #91]	; 0x5b
					UARTTxWrite(uart, FRAME2, 4);
 8001f08:	f107 0358 	add.w	r3, r7, #88	; 0x58
 8001f0c:	2204      	movs	r2, #4
 8001f0e:	4619      	mov	r1, r3
 8001f10:	6878      	ldr	r0, [r7, #4]
 8001f12:	f7ff fcbb 	bl	800188c <UARTTxWrite>
					break;
 8001f16:	e012      	b.n	8001f3e <DynamixelProtocal2+0x622>
			}

		}
		else
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
 8001f18:	4ba3      	ldr	r3, [pc, #652]	; (80021a8 <DynamixelProtocal2+0x88c>)
 8001f1a:	881b      	ldrh	r3, [r3, #0]
 8001f1c:	b2db      	uxtb	r3, r3
 8001f1e:	f887 3054 	strb.w	r3, [r7, #84]	; 0x54
 8001f22:	2375      	movs	r3, #117	; 0x75
 8001f24:	f887 3055 	strb.w	r3, [r7, #85]	; 0x55
 8001f28:	4ba0      	ldr	r3, [pc, #640]	; (80021ac <DynamixelProtocal2+0x890>)
 8001f2a:	781b      	ldrb	r3, [r3, #0]
 8001f2c:	f887 3056 	strb.w	r3, [r7, #86]	; 0x56
			UARTTxWrite(uart, temp, 3);
 8001f30:	f107 0354 	add.w	r3, r7, #84	; 0x54
 8001f34:	2203      	movs	r2, #3
 8001f36:	4619      	mov	r1, r3
 8001f38:	6878      	ldr	r0, [r7, #4]
 8001f3a:	f7ff fca7 	bl	800188c <UARTTxWrite>
		}
		ACK = 1;
 8001f3e:	4b9c      	ldr	r3, [pc, #624]	; (80021b0 <DynamixelProtocal2+0x894>)
 8001f40:	2201      	movs	r2, #1
 8001f42:	801a      	strh	r2, [r3, #0]
		State = S_idle ;
 8001f44:	4b9b      	ldr	r3, [pc, #620]	; (80021b4 <DynamixelProtocal2+0x898>)
 8001f46:	2200      	movs	r2, #0
 8001f48:	701a      	strb	r2, [r3, #0]
		break;
 8001f4a:	e1d4      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Checksum1:
		CHECKSUM = dataIn & 0xff ;
 8001f4c:	893b      	ldrh	r3, [r7, #8]
 8001f4e:	b2da      	uxtb	r2, r3
 8001f50:	4b96      	ldr	r3, [pc, #600]	; (80021ac <DynamixelProtocal2+0x890>)
 8001f52:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~((0x9 << 4) | MODE );
 8001f54:	4b98      	ldr	r3, [pc, #608]	; (80021b8 <DynamixelProtocal2+0x89c>)
 8001f56:	881b      	ldrh	r3, [r3, #0]
 8001f58:	b2db      	uxtb	r3, r3
 8001f5a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8001f5e:	b2db      	uxtb	r3, r3
 8001f60:	43db      	mvns	r3, r3
 8001f62:	b2da      	uxtb	r2, r3
 8001f64:	4b95      	ldr	r3, [pc, #596]	; (80021bc <DynamixelProtocal2+0x8a0>)
 8001f66:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 8001f68:	4b94      	ldr	r3, [pc, #592]	; (80021bc <DynamixelProtocal2+0x8a0>)
 8001f6a:	781a      	ldrb	r2, [r3, #0]
 8001f6c:	4b8f      	ldr	r3, [pc, #572]	; (80021ac <DynamixelProtocal2+0x890>)
 8001f6e:	781b      	ldrb	r3, [r3, #0]
 8001f70:	429a      	cmp	r2, r3
 8001f72:	f040 80b0 	bne.w	80020d6 <DynamixelProtocal2+0x7ba>
		{
			switch (MODE)
 8001f76:	4b90      	ldr	r3, [pc, #576]	; (80021b8 <DynamixelProtocal2+0x89c>)
 8001f78:	881b      	ldrh	r3, [r3, #0]
 8001f7a:	f240 32e7 	movw	r2, #999	; 0x3e7
 8001f7e:	4293      	cmp	r3, r2
 8001f80:	d06f      	beq.n	8002062 <DynamixelProtocal2+0x746>
 8001f82:	f5b3 7f7a 	cmp.w	r3, #1000	; 0x3e8
 8001f86:	f280 81b5 	bge.w	80022f4 <DynamixelProtocal2+0x9d8>
 8001f8a:	2b0e      	cmp	r3, #14
 8001f8c:	dc24      	bgt.n	8001fd8 <DynamixelProtocal2+0x6bc>
 8001f8e:	2b02      	cmp	r3, #2
 8001f90:	f2c0 81b0 	blt.w	80022f4 <DynamixelProtocal2+0x9d8>
 8001f94:	3b02      	subs	r3, #2
 8001f96:	2b0c      	cmp	r3, #12
 8001f98:	f200 81ac 	bhi.w	80022f4 <DynamixelProtocal2+0x9d8>
 8001f9c:	a201      	add	r2, pc, #4	; (adr r2, 8001fa4 <DynamixelProtocal2+0x688>)
 8001f9e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8001fa2:	bf00      	nop
 8001fa4:	08001fe3 	.word	0x08001fe3
 8001fa8:	08002001 	.word	0x08002001
 8001fac:	080022f5 	.word	0x080022f5
 8001fb0:	080022f5 	.word	0x080022f5
 8001fb4:	080022f5 	.word	0x080022f5
 8001fb8:	080022f5 	.word	0x080022f5
 8001fbc:	0800201f 	.word	0x0800201f
 8001fc0:	080022f5 	.word	0x080022f5
 8001fc4:	080022f5 	.word	0x080022f5
 8001fc8:	080022f5 	.word	0x080022f5
 8001fcc:	08002081 	.word	0x08002081
 8001fd0:	0800209f 	.word	0x0800209f
 8001fd4:	080020bb 	.word	0x080020bb
 8001fd8:	f240 32e6 	movw	r2, #998	; 0x3e6
 8001fdc:	4293      	cmp	r3, r2
 8001fde:	d034      	beq.n	800204a <DynamixelProtocal2+0x72e>
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
			UARTTxWrite(uart, temp, 3);
			State = S_idle ;
		}
		break;
 8001fe0:	e188      	b.n	80022f4 <DynamixelProtocal2+0x9d8>
				uint8_t temp[] = {0x58,0x75};
 8001fe2:	f247 5358 	movw	r3, #30040	; 0x7558
 8001fe6:	f8a7 3050 	strh.w	r3, [r7, #80]	; 0x50
				UARTTxWrite(uart, temp, 2);
 8001fea:	f107 0350 	add.w	r3, r7, #80	; 0x50
 8001fee:	2202      	movs	r2, #2
 8001ff0:	4619      	mov	r1, r3
 8001ff2:	6878      	ldr	r0, [r7, #4]
 8001ff4:	f7ff fc4a 	bl	800188c <UARTTxWrite>
				State = S_idle ;
 8001ff8:	4b6e      	ldr	r3, [pc, #440]	; (80021b4 <DynamixelProtocal2+0x898>)
 8001ffa:	2200      	movs	r2, #0
 8001ffc:	701a      	strb	r2, [r3, #0]
				break;
 8001ffe:	e082      	b.n	8002106 <DynamixelProtocal2+0x7ea>
				uint8_t temp[] = {0x58,0x75};
 8002000:	f247 5358 	movw	r3, #30040	; 0x7558
 8002004:	f8a7 304c 	strh.w	r3, [r7, #76]	; 0x4c
				UARTTxWrite(uart, temp, 2);
 8002008:	f107 034c 	add.w	r3, r7, #76	; 0x4c
 800200c:	2202      	movs	r2, #2
 800200e:	4619      	mov	r1, r3
 8002010:	6878      	ldr	r0, [r7, #4]
 8002012:	f7ff fc3b 	bl	800188c <UARTTxWrite>
				State = S_idle ;
 8002016:	4b67      	ldr	r3, [pc, #412]	; (80021b4 <DynamixelProtocal2+0x898>)
 8002018:	2200      	movs	r2, #0
 800201a:	701a      	strb	r2, [r3, #0]
				break;
 800201c:	e073      	b.n	8002106 <DynamixelProtocal2+0x7ea>
				uint8_t temp[] = {0x58,0x75};
 800201e:	f247 5358 	movw	r3, #30040	; 0x7558
 8002022:	f8a7 3048 	strh.w	r3, [r7, #72]	; 0x48
				UARTTxWrite(uart, temp,2);
 8002026:	f107 0348 	add.w	r3, r7, #72	; 0x48
 800202a:	2202      	movs	r2, #2
 800202c:	4619      	mov	r1, r3
 800202e:	6878      	ldr	r0, [r7, #4]
 8002030:	f7ff fc2c 	bl	800188c <UARTTxWrite>
				HAL_Delay(5000);
 8002034:	f241 3088 	movw	r0, #5000	; 0x1388
 8002038:	f001 fe18 	bl	8003c6c <HAL_Delay>
				start = 1;
 800203c:	4b60      	ldr	r3, [pc, #384]	; (80021c0 <DynamixelProtocal2+0x8a4>)
 800203e:	2201      	movs	r2, #1
 8002040:	701a      	strb	r2, [r3, #0]
				State = S_idle;
 8002042:	4b5c      	ldr	r3, [pc, #368]	; (80021b4 <DynamixelProtocal2+0x898>)
 8002044:	2200      	movs	r2, #0
 8002046:	701a      	strb	r2, [r3, #0]
				break;
 8002048:	e05d      	b.n	8002106 <DynamixelProtocal2+0x7ea>
				if(start == 0)
 800204a:	4b5d      	ldr	r3, [pc, #372]	; (80021c0 <DynamixelProtocal2+0x8a4>)
 800204c:	781b      	ldrb	r3, [r3, #0]
 800204e:	f083 0301 	eor.w	r3, r3, #1
 8002052:	b2db      	uxtb	r3, r3
 8002054:	2b00      	cmp	r3, #0
 8002056:	d055      	beq.n	8002104 <DynamixelProtocal2+0x7e8>
					MODE = 999;
 8002058:	4b57      	ldr	r3, [pc, #348]	; (80021b8 <DynamixelProtocal2+0x89c>)
 800205a:	f240 32e7 	movw	r2, #999	; 0x3e7
 800205e:	801a      	strh	r2, [r3, #0]
				break;
 8002060:	e050      	b.n	8002104 <DynamixelProtocal2+0x7e8>
				uint8_t temp2[] = {0x46,0x6E};
 8002062:	f646 6346 	movw	r3, #28230	; 0x6e46
 8002066:	f8a7 3044 	strh.w	r3, [r7, #68]	; 0x44
				UARTTxWrite(uart, temp2, 2);
 800206a:	f107 0344 	add.w	r3, r7, #68	; 0x44
 800206e:	2202      	movs	r2, #2
 8002070:	4619      	mov	r1, r3
 8002072:	6878      	ldr	r0, [r7, #4]
 8002074:	f7ff fc0a 	bl	800188c <UARTTxWrite>
				State = S_idle ;
 8002078:	4b4e      	ldr	r3, [pc, #312]	; (80021b4 <DynamixelProtocal2+0x898>)
 800207a:	2200      	movs	r2, #0
 800207c:	701a      	strb	r2, [r3, #0]
				break;
 800207e:	e042      	b.n	8002106 <DynamixelProtocal2+0x7ea>
				uint8_t temp[] = {0x58,0x75};
 8002080:	f247 5358 	movw	r3, #30040	; 0x7558
 8002084:	f8a7 3040 	strh.w	r3, [r7, #64]	; 0x40
				UARTTxWrite(uart, temp, 2);
 8002088:	f107 0340 	add.w	r3, r7, #64	; 0x40
 800208c:	2202      	movs	r2, #2
 800208e:	4619      	mov	r1, r3
 8002090:	6878      	ldr	r0, [r7, #4]
 8002092:	f7ff fbfb 	bl	800188c <UARTTxWrite>
				State = S_idle ;
 8002096:	4b47      	ldr	r3, [pc, #284]	; (80021b4 <DynamixelProtocal2+0x898>)
 8002098:	2200      	movs	r2, #0
 800209a:	701a      	strb	r2, [r3, #0]
				break;
 800209c:	e033      	b.n	8002106 <DynamixelProtocal2+0x7ea>
				uint8_t temp[] = {0x58,0x75};
 800209e:	f247 5358 	movw	r3, #30040	; 0x7558
 80020a2:	87bb      	strh	r3, [r7, #60]	; 0x3c
				UARTTxWrite(uart, temp, 2);
 80020a4:	f107 033c 	add.w	r3, r7, #60	; 0x3c
 80020a8:	2202      	movs	r2, #2
 80020aa:	4619      	mov	r1, r3
 80020ac:	6878      	ldr	r0, [r7, #4]
 80020ae:	f7ff fbed 	bl	800188c <UARTTxWrite>
				State = S_idle ;
 80020b2:	4b40      	ldr	r3, [pc, #256]	; (80021b4 <DynamixelProtocal2+0x898>)
 80020b4:	2200      	movs	r2, #0
 80020b6:	701a      	strb	r2, [r3, #0]
				break;
 80020b8:	e025      	b.n	8002106 <DynamixelProtocal2+0x7ea>
				uint8_t temp[] = {0x58,0x75};
 80020ba:	f247 5358 	movw	r3, #30040	; 0x7558
 80020be:	873b      	strh	r3, [r7, #56]	; 0x38
				UARTTxWrite(uart, temp, 2);
 80020c0:	f107 0338 	add.w	r3, r7, #56	; 0x38
 80020c4:	2202      	movs	r2, #2
 80020c6:	4619      	mov	r1, r3
 80020c8:	6878      	ldr	r0, [r7, #4]
 80020ca:	f7ff fbdf 	bl	800188c <UARTTxWrite>
				State = S_idle ;
 80020ce:	4b39      	ldr	r3, [pc, #228]	; (80021b4 <DynamixelProtocal2+0x898>)
 80020d0:	2200      	movs	r2, #0
 80020d2:	701a      	strb	r2, [r3, #0]
				break;
 80020d4:	e017      	b.n	8002106 <DynamixelProtocal2+0x7ea>
			uint8_t temp[] = {START,0x75,CHECKSUM};
 80020d6:	4b34      	ldr	r3, [pc, #208]	; (80021a8 <DynamixelProtocal2+0x88c>)
 80020d8:	881b      	ldrh	r3, [r3, #0]
 80020da:	b2db      	uxtb	r3, r3
 80020dc:	f887 3034 	strb.w	r3, [r7, #52]	; 0x34
 80020e0:	2375      	movs	r3, #117	; 0x75
 80020e2:	f887 3035 	strb.w	r3, [r7, #53]	; 0x35
 80020e6:	4b31      	ldr	r3, [pc, #196]	; (80021ac <DynamixelProtocal2+0x890>)
 80020e8:	781b      	ldrb	r3, [r3, #0]
 80020ea:	f887 3036 	strb.w	r3, [r7, #54]	; 0x36
			UARTTxWrite(uart, temp, 3);
 80020ee:	f107 0334 	add.w	r3, r7, #52	; 0x34
 80020f2:	2203      	movs	r2, #3
 80020f4:	4619      	mov	r1, r3
 80020f6:	6878      	ldr	r0, [r7, #4]
 80020f8:	f7ff fbc8 	bl	800188c <UARTTxWrite>
			State = S_idle ;
 80020fc:	4b2d      	ldr	r3, [pc, #180]	; (80021b4 <DynamixelProtocal2+0x898>)
 80020fe:	2200      	movs	r2, #0
 8002100:	701a      	strb	r2, [r3, #0]
		break;
 8002102:	e0f7      	b.n	80022f4 <DynamixelProtocal2+0x9d8>
				break;
 8002104:	bf00      	nop
		break;
 8002106:	e0f5      	b.n	80022f4 <DynamixelProtocal2+0x9d8>

	case S_Checksum2:
		CHECKSUM = dataIn & 0xff ;
 8002108:	893b      	ldrh	r3, [r7, #8]
 800210a:	b2da      	uxtb	r2, r3
 800210c:	4b27      	ldr	r3, [pc, #156]	; (80021ac <DynamixelProtocal2+0x890>)
 800210e:	701a      	strb	r2, [r3, #0]
		CHECK_SUM3 = ~( ((0x9 << 4) | MODE) + STATION + DATA_N_SUM);
 8002110:	4b29      	ldr	r3, [pc, #164]	; (80021b8 <DynamixelProtocal2+0x89c>)
 8002112:	881b      	ldrh	r3, [r3, #0]
 8002114:	b2db      	uxtb	r3, r3
 8002116:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800211a:	b2da      	uxtb	r2, r3
 800211c:	4b29      	ldr	r3, [pc, #164]	; (80021c4 <DynamixelProtocal2+0x8a8>)
 800211e:	781b      	ldrb	r3, [r3, #0]
 8002120:	4413      	add	r3, r2
 8002122:	b2da      	uxtb	r2, r3
 8002124:	4b28      	ldr	r3, [pc, #160]	; (80021c8 <DynamixelProtocal2+0x8ac>)
 8002126:	781b      	ldrb	r3, [r3, #0]
 8002128:	4413      	add	r3, r2
 800212a:	b2db      	uxtb	r3, r3
 800212c:	43db      	mvns	r3, r3
 800212e:	b2da      	uxtb	r2, r3
 8002130:	4b26      	ldr	r3, [pc, #152]	; (80021cc <DynamixelProtocal2+0x8b0>)
 8002132:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~( ((0x9 << 4) | MODE) + ((DATAFRAME[CollectedData-1]) + (DATAFRAME[CollectedData-2])) );
 8002134:	4b20      	ldr	r3, [pc, #128]	; (80021b8 <DynamixelProtocal2+0x89c>)
 8002136:	881b      	ldrh	r3, [r3, #0]
 8002138:	b2db      	uxtb	r3, r3
 800213a:	f063 036f 	orn	r3, r3, #111	; 0x6f
 800213e:	b2da      	uxtb	r2, r3
 8002140:	4b16      	ldr	r3, [pc, #88]	; (800219c <DynamixelProtocal2+0x880>)
 8002142:	881b      	ldrh	r3, [r3, #0]
 8002144:	3b01      	subs	r3, #1
 8002146:	4916      	ldr	r1, [pc, #88]	; (80021a0 <DynamixelProtocal2+0x884>)
 8002148:	5cc9      	ldrb	r1, [r1, r3]
 800214a:	4b14      	ldr	r3, [pc, #80]	; (800219c <DynamixelProtocal2+0x880>)
 800214c:	881b      	ldrh	r3, [r3, #0]
 800214e:	3b02      	subs	r3, #2
 8002150:	4813      	ldr	r0, [pc, #76]	; (80021a0 <DynamixelProtocal2+0x884>)
 8002152:	5cc3      	ldrb	r3, [r0, r3]
 8002154:	440b      	add	r3, r1
 8002156:	b2db      	uxtb	r3, r3
 8002158:	4413      	add	r3, r2
 800215a:	b2db      	uxtb	r3, r3
 800215c:	43db      	mvns	r3, r3
 800215e:	b2da      	uxtb	r2, r3
 8002160:	4b16      	ldr	r3, [pc, #88]	; (80021bc <DynamixelProtocal2+0x8a0>)
 8002162:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 8002164:	4b15      	ldr	r3, [pc, #84]	; (80021bc <DynamixelProtocal2+0x8a0>)
 8002166:	781a      	ldrb	r2, [r3, #0]
 8002168:	4b10      	ldr	r3, [pc, #64]	; (80021ac <DynamixelProtocal2+0x890>)
 800216a:	781b      	ldrb	r3, [r3, #0]
 800216c:	429a      	cmp	r2, r3
 800216e:	d166      	bne.n	800223e <DynamixelProtocal2+0x922>
		{
			switch (MODE)
 8002170:	4b11      	ldr	r3, [pc, #68]	; (80021b8 <DynamixelProtocal2+0x89c>)
 8002172:	881b      	ldrh	r3, [r3, #0]
 8002174:	3b01      	subs	r3, #1
 8002176:	2b06      	cmp	r3, #6
 8002178:	d871      	bhi.n	800225e <DynamixelProtocal2+0x942>
 800217a:	a201      	add	r2, pc, #4	; (adr r2, 8002180 <DynamixelProtocal2+0x864>)
 800217c:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8002180:	080021d1 	.word	0x080021d1
 8002184:	0800225f 	.word	0x0800225f
 8002188:	0800225f 	.word	0x0800225f
 800218c:	080021e7 	.word	0x080021e7
 8002190:	080021fd 	.word	0x080021fd
 8002194:	08002213 	.word	0x08002213
 8002198:	08002229 	.word	0x08002229
 800219c:	2000074e 	.word	0x2000074e
 80021a0:	200001e4 	.word	0x200001e4
 80021a4:	200001de 	.word	0x200001de
 80021a8:	200001e0 	.word	0x200001e0
 80021ac:	200001db 	.word	0x200001db
 80021b0:	200006ee 	.word	0x200006ee
 80021b4:	200006f4 	.word	0x200006f4
 80021b8:	200001e2 	.word	0x200001e2
 80021bc:	200001dc 	.word	0x200001dc
 80021c0:	20000736 	.word	0x20000736
 80021c4:	200006e8 	.word	0x200006e8
 80021c8:	200006e9 	.word	0x200006e9
 80021cc:	200001dd 	.word	0x200001dd
			{
			case 0b0001: //1
			{
				uint8_t temp[] = {0x58,0x75};
 80021d0:	f247 5358 	movw	r3, #30040	; 0x7558
 80021d4:	863b      	strh	r3, [r7, #48]	; 0x30
				UARTTxWrite(uart, temp, 2);
 80021d6:	f107 0330 	add.w	r3, r7, #48	; 0x30
 80021da:	2202      	movs	r2, #2
 80021dc:	4619      	mov	r1, r3
 80021de:	6878      	ldr	r0, [r7, #4]
 80021e0:	f7ff fb54 	bl	800188c <UARTTxWrite>
				break;
 80021e4:	e03b      	b.n	800225e <DynamixelProtocal2+0x942>
			}
			case 0b0100: //4
			{
				uint8_t temp[] = {0x58,0x75};
 80021e6:	f247 5358 	movw	r3, #30040	; 0x7558
 80021ea:	85bb      	strh	r3, [r7, #44]	; 0x2c
				UARTTxWrite(uart, temp, 2);
 80021ec:	f107 032c 	add.w	r3, r7, #44	; 0x2c
 80021f0:	2202      	movs	r2, #2
 80021f2:	4619      	mov	r1, r3
 80021f4:	6878      	ldr	r0, [r7, #4]
 80021f6:	f7ff fb49 	bl	800188c <UARTTxWrite>
				break;
 80021fa:	e030      	b.n	800225e <DynamixelProtocal2+0x942>
			}
			case 0b0101: //5
			{
				uint8_t temp[] = {0x58,0x75};
 80021fc:	f247 5358 	movw	r3, #30040	; 0x7558
 8002200:	853b      	strh	r3, [r7, #40]	; 0x28
				UARTTxWrite(uart, temp, 2);
 8002202:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8002206:	2202      	movs	r2, #2
 8002208:	4619      	mov	r1, r3
 800220a:	6878      	ldr	r0, [r7, #4]
 800220c:	f7ff fb3e 	bl	800188c <UARTTxWrite>
				break;
 8002210:	e025      	b.n	800225e <DynamixelProtocal2+0x942>
			}
			case 0b0110: //6
			{
				uint8_t temp[] = {0x58,0x75};
 8002212:	f247 5358 	movw	r3, #30040	; 0x7558
 8002216:	84bb      	strh	r3, [r7, #36]	; 0x24
				UARTTxWrite(uart, temp, 2);
 8002218:	f107 0324 	add.w	r3, r7, #36	; 0x24
 800221c:	2202      	movs	r2, #2
 800221e:	4619      	mov	r1, r3
 8002220:	6878      	ldr	r0, [r7, #4]
 8002222:	f7ff fb33 	bl	800188c <UARTTxWrite>
				break;
 8002226:	e01a      	b.n	800225e <DynamixelProtocal2+0x942>
			}
			case 0b0111: //7
			{
				uint8_t temp[] = {0x58,0x75};
 8002228:	f247 5358 	movw	r3, #30040	; 0x7558
 800222c:	843b      	strh	r3, [r7, #32]
				UARTTxWrite(uart, temp, 2);
 800222e:	f107 0320 	add.w	r3, r7, #32
 8002232:	2202      	movs	r2, #2
 8002234:	4619      	mov	r1, r3
 8002236:	6878      	ldr	r0, [r7, #4]
 8002238:	f7ff fb28 	bl	800188c <UARTTxWrite>
				break;
 800223c:	e00f      	b.n	800225e <DynamixelProtocal2+0x942>
			}
			}
		}
		else
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
 800223e:	4b30      	ldr	r3, [pc, #192]	; (8002300 <DynamixelProtocal2+0x9e4>)
 8002240:	881b      	ldrh	r3, [r3, #0]
 8002242:	b2db      	uxtb	r3, r3
 8002244:	773b      	strb	r3, [r7, #28]
 8002246:	2375      	movs	r3, #117	; 0x75
 8002248:	777b      	strb	r3, [r7, #29]
 800224a:	4b2e      	ldr	r3, [pc, #184]	; (8002304 <DynamixelProtocal2+0x9e8>)
 800224c:	781b      	ldrb	r3, [r3, #0]
 800224e:	77bb      	strb	r3, [r7, #30]
			UARTTxWrite(uart, temp, 3);
 8002250:	f107 031c 	add.w	r3, r7, #28
 8002254:	2203      	movs	r2, #3
 8002256:	4619      	mov	r1, r3
 8002258:	6878      	ldr	r0, [r7, #4]
 800225a:	f7ff fb17 	bl	800188c <UARTTxWrite>
		}

		DATA_N_SUM = 0;
 800225e:	4b2a      	ldr	r3, [pc, #168]	; (8002308 <DynamixelProtocal2+0x9ec>)
 8002260:	2200      	movs	r2, #0
 8002262:	701a      	strb	r2, [r3, #0]
		x=0;
 8002264:	4b29      	ldr	r3, [pc, #164]	; (800230c <DynamixelProtocal2+0x9f0>)
 8002266:	2200      	movs	r2, #0
 8002268:	701a      	strb	r2, [r3, #0]
		State = S_idle;
 800226a:	4b29      	ldr	r3, [pc, #164]	; (8002310 <DynamixelProtocal2+0x9f4>)
 800226c:	2200      	movs	r2, #0
 800226e:	701a      	strb	r2, [r3, #0]
		break;
 8002270:	e041      	b.n	80022f6 <DynamixelProtocal2+0x9da>

	case S_Checksum3:
		x = 0;
 8002272:	4b26      	ldr	r3, [pc, #152]	; (800230c <DynamixelProtocal2+0x9f0>)
 8002274:	2200      	movs	r2, #0
 8002276:	701a      	strb	r2, [r3, #0]
		CHECK_SUM1 = ~( ((0x9 << 4) | MODE) + STATION + DATA_N_SUM);
 8002278:	4b26      	ldr	r3, [pc, #152]	; (8002314 <DynamixelProtocal2+0x9f8>)
 800227a:	881b      	ldrh	r3, [r3, #0]
 800227c:	b2db      	uxtb	r3, r3
 800227e:	f063 036f 	orn	r3, r3, #111	; 0x6f
 8002282:	b2da      	uxtb	r2, r3
 8002284:	4b24      	ldr	r3, [pc, #144]	; (8002318 <DynamixelProtocal2+0x9fc>)
 8002286:	781b      	ldrb	r3, [r3, #0]
 8002288:	4413      	add	r3, r2
 800228a:	b2da      	uxtb	r2, r3
 800228c:	4b1e      	ldr	r3, [pc, #120]	; (8002308 <DynamixelProtocal2+0x9ec>)
 800228e:	781b      	ldrb	r3, [r3, #0]
 8002290:	4413      	add	r3, r2
 8002292:	b2db      	uxtb	r3, r3
 8002294:	43db      	mvns	r3, r3
 8002296:	b2da      	uxtb	r2, r3
 8002298:	4b20      	ldr	r3, [pc, #128]	; (800231c <DynamixelProtocal2+0xa00>)
 800229a:	701a      	strb	r2, [r3, #0]
		CHECKSUM = dataIn & 0xff ;
 800229c:	893b      	ldrh	r3, [r7, #8]
 800229e:	b2da      	uxtb	r2, r3
 80022a0:	4b18      	ldr	r3, [pc, #96]	; (8002304 <DynamixelProtocal2+0x9e8>)
 80022a2:	701a      	strb	r2, [r3, #0]
		if (CHECK_SUM1 == CHECKSUM)
 80022a4:	4b1d      	ldr	r3, [pc, #116]	; (800231c <DynamixelProtocal2+0xa00>)
 80022a6:	781a      	ldrb	r2, [r3, #0]
 80022a8:	4b16      	ldr	r3, [pc, #88]	; (8002304 <DynamixelProtocal2+0x9e8>)
 80022aa:	781b      	ldrb	r3, [r3, #0]
 80022ac:	429a      	cmp	r2, r3
 80022ae:	d10d      	bne.n	80022cc <DynamixelProtocal2+0x9b0>
		{
			switch (MODE)
 80022b0:	4b18      	ldr	r3, [pc, #96]	; (8002314 <DynamixelProtocal2+0x9f8>)
 80022b2:	881b      	ldrh	r3, [r3, #0]
 80022b4:	2b07      	cmp	r3, #7
 80022b6:	d119      	bne.n	80022ec <DynamixelProtocal2+0x9d0>
			{
			case 0b0111: //7
			{
				uint8_t temp[] = {0x75};
 80022b8:	2375      	movs	r3, #117	; 0x75
 80022ba:	763b      	strb	r3, [r7, #24]
				UARTTxWrite(uart, temp, 1);
 80022bc:	f107 0318 	add.w	r3, r7, #24
 80022c0:	2201      	movs	r2, #1
 80022c2:	4619      	mov	r1, r3
 80022c4:	6878      	ldr	r0, [r7, #4]
 80022c6:	f7ff fae1 	bl	800188c <UARTTxWrite>
				break;
 80022ca:	e00f      	b.n	80022ec <DynamixelProtocal2+0x9d0>
			}
			}
		}
		else
		{
			uint8_t temp[] = {START,0x75,CHECKSUM};
 80022cc:	4b0c      	ldr	r3, [pc, #48]	; (8002300 <DynamixelProtocal2+0x9e4>)
 80022ce:	881b      	ldrh	r3, [r3, #0]
 80022d0:	b2db      	uxtb	r3, r3
 80022d2:	753b      	strb	r3, [r7, #20]
 80022d4:	2375      	movs	r3, #117	; 0x75
 80022d6:	757b      	strb	r3, [r7, #21]
 80022d8:	4b0a      	ldr	r3, [pc, #40]	; (8002304 <DynamixelProtocal2+0x9e8>)
 80022da:	781b      	ldrb	r3, [r3, #0]
 80022dc:	75bb      	strb	r3, [r7, #22]
			UARTTxWrite(uart, temp, 3);
 80022de:	f107 0314 	add.w	r3, r7, #20
 80022e2:	2203      	movs	r2, #3
 80022e4:	4619      	mov	r1, r3
 80022e6:	6878      	ldr	r0, [r7, #4]
 80022e8:	f7ff fad0 	bl	800188c <UARTTxWrite>
		}
		State = S_idle;
 80022ec:	4b08      	ldr	r3, [pc, #32]	; (8002310 <DynamixelProtocal2+0x9f4>)
 80022ee:	2200      	movs	r2, #0
 80022f0:	701a      	strb	r2, [r3, #0]
		break;
 80022f2:	e000      	b.n	80022f6 <DynamixelProtocal2+0x9da>
		break;
 80022f4:	bf00      	nop
	}
}
 80022f6:	bf00      	nop
 80022f8:	3770      	adds	r7, #112	; 0x70
 80022fa:	46bd      	mov	sp, r7
 80022fc:	bd80      	pop	{r7, pc}
 80022fe:	bf00      	nop
 8002300:	200001e0 	.word	0x200001e0
 8002304:	200001db 	.word	0x200001db
 8002308:	200006e9 	.word	0x200006e9
 800230c:	200006ec 	.word	0x200006ec
 8002310:	200006f4 	.word	0x200006f4
 8002314:	200001e2 	.word	0x200001e2
 8002318:	200006e8 	.word	0x200006e8
 800231c:	200001dc 	.word	0x200001dc

08002320 <HAL_GPIO_EXTI_Callback>:

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8002320:	b580      	push	{r7, lr}
 8002322:	b082      	sub	sp, #8
 8002324:	af00      	add	r7, sp, #0
 8002326:	4603      	mov	r3, r0
 8002328:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){
 800232a:	88fb      	ldrh	r3, [r7, #6]
 800232c:	2b80      	cmp	r3, #128	; 0x80
 800232e:	d10c      	bne.n	800234a <HAL_GPIO_EXTI_Callback+0x2a>
		cP = 0;
 8002330:	4b08      	ldr	r3, [pc, #32]	; (8002354 <HAL_GPIO_EXTI_Callback+0x34>)
 8002332:	2200      	movs	r2, #0
 8002334:	701a      	strb	r2, [r3, #0]
		velocity = 0;
 8002336:	4b08      	ldr	r3, [pc, #32]	; (8002358 <HAL_GPIO_EXTI_Callback+0x38>)
 8002338:	f04f 0200 	mov.w	r2, #0
 800233c:	601a      	str	r2, [r3, #0]
		SetHome = 0;
 800233e:	4b07      	ldr	r3, [pc, #28]	; (800235c <HAL_GPIO_EXTI_Callback+0x3c>)
 8002340:	2200      	movs	r2, #0
 8002342:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8002344:	2017      	movs	r0, #23
 8002346:	f001 fdde 	bl	8003f06 <HAL_NVIC_DisableIRQ>
	}
}
 800234a:	bf00      	nop
 800234c:	3708      	adds	r7, #8
 800234e:	46bd      	mov	sp, r7
 8002350:	bd80      	pop	{r7, pc}
 8002352:	bf00      	nop
 8002354:	20000700 	.word	0x20000700
 8002358:	2000070c 	.word	0x2000070c
 800235c:	2000071c 	.word	0x2000071c

08002360 <I2C>:

void I2C(){
 8002360:	b480      	push	{r7}
 8002362:	b083      	sub	sp, #12
 8002364:	af00      	add	r7, sp, #0
	const uint8_t laserAddress = 0x23<<1;
 8002366:	2346      	movs	r3, #70	; 0x46
 8002368:	71fb      	strb	r3, [r7, #7]
	static uint8_t pdataStart[1] = {0x45};
	//	HAL_I2C_Master_Transmit_IT(&hi2c1, laserAddress, pdataStart, 1);
}
 800236a:	bf00      	nop
 800236c:	370c      	adds	r7, #12
 800236e:	46bd      	mov	sp, r7
 8002370:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002374:	4770      	bx	lr
	...

08002378 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 8002378:	b5b0      	push	{r4, r5, r7, lr}
 800237a:	b086      	sub	sp, #24
 800237c:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 800237e:	4b36      	ldr	r3, [pc, #216]	; (8002458 <EncoderVelocity_Update+0xe0>)
 8002380:	681b      	ldr	r3, [r3, #0]
 8002382:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002384:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 8002386:	f001 f8c3 	bl	8003510 <micros>
 800238a:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 800238e:	4b33      	ldr	r3, [pc, #204]	; (800245c <EncoderVelocity_Update+0xe4>)
 8002390:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002394:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8002398:	1a84      	subs	r4, r0, r2
 800239a:	eb61 0503 	sbc.w	r5, r1, r3
 800239e:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 80023a2:	4b2f      	ldr	r3, [pc, #188]	; (8002460 <EncoderVelocity_Update+0xe8>)
 80023a4:	681b      	ldr	r3, [r3, #0]
 80023a6:	693a      	ldr	r2, [r7, #16]
 80023a8:	1ad3      	subs	r3, r2, r3
 80023aa:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80023ac:	697b      	ldr	r3, [r7, #20]
 80023ae:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80023b2:	db04      	blt.n	80023be <EncoderVelocity_Update+0x46>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80023b4:	697b      	ldr	r3, [r7, #20]
 80023b6:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80023ba:	617b      	str	r3, [r7, #20]
 80023bc:	e007      	b.n	80023ce <EncoderVelocity_Update+0x56>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80023be:	697b      	ldr	r3, [r7, #20]
 80023c0:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 80023c4:	dc03      	bgt.n	80023ce <EncoderVelocity_Update+0x56>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80023c6:	697b      	ldr	r3, [r7, #20]
 80023c8:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80023cc:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80023ce:	4a24      	ldr	r2, [pc, #144]	; (8002460 <EncoderVelocity_Update+0xe8>)
 80023d0:	693b      	ldr	r3, [r7, #16]
 80023d2:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80023d4:	4921      	ldr	r1, [pc, #132]	; (800245c <EncoderVelocity_Update+0xe4>)
 80023d6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80023da:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000*2*3.14) / (float) (EncoderTimeDiff *2048*4);
 80023de:	697b      	ldr	r3, [r7, #20]
 80023e0:	4a20      	ldr	r2, [pc, #128]	; (8002464 <EncoderVelocity_Update+0xec>)
 80023e2:	fb02 f303 	mul.w	r3, r2, r3
 80023e6:	4618      	mov	r0, r3
 80023e8:	f7fe f848 	bl	800047c <__aeabi_i2d>
 80023ec:	a318      	add	r3, pc, #96	; (adr r3, 8002450 <EncoderVelocity_Update+0xd8>)
 80023ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80023f2:	f7fe f8ad 	bl	8000550 <__aeabi_dmul>
 80023f6:	4602      	mov	r2, r0
 80023f8:	460b      	mov	r3, r1
 80023fa:	4614      	mov	r4, r2
 80023fc:	461d      	mov	r5, r3
 80023fe:	e9d7 0100 	ldrd	r0, r1, [r7]
 8002402:	f04f 0200 	mov.w	r2, #0
 8002406:	f04f 0300 	mov.w	r3, #0
 800240a:	034b      	lsls	r3, r1, #13
 800240c:	ea43 43d0 	orr.w	r3, r3, r0, lsr #19
 8002410:	0342      	lsls	r2, r0, #13
 8002412:	4610      	mov	r0, r2
 8002414:	4619      	mov	r1, r3
 8002416:	f7fe fc63 	bl	8000ce0 <__aeabi_ul2f>
 800241a:	4603      	mov	r3, r0
 800241c:	4618      	mov	r0, r3
 800241e:	f7fe f83f 	bl	80004a0 <__aeabi_f2d>
 8002422:	4602      	mov	r2, r0
 8002424:	460b      	mov	r3, r1
 8002426:	4620      	mov	r0, r4
 8002428:	4629      	mov	r1, r5
 800242a:	f7fe f9bb 	bl	80007a4 <__aeabi_ddiv>
 800242e:	4602      	mov	r2, r0
 8002430:	460b      	mov	r3, r1
 8002432:	4610      	mov	r0, r2
 8002434:	4619      	mov	r1, r3
 8002436:	f7fe fb3b 	bl	8000ab0 <__aeabi_d2f>
 800243a:	4603      	mov	r3, r0
 800243c:	ee07 3a90 	vmov	s15, r3

}
 8002440:	eeb0 0a67 	vmov.f32	s0, s15
 8002444:	3718      	adds	r7, #24
 8002446:	46bd      	mov	sp, r7
 8002448:	bdb0      	pop	{r4, r5, r7, pc}
 800244a:	bf00      	nop
 800244c:	f3af 8000 	nop.w
 8002450:	51eb851f 	.word	0x51eb851f
 8002454:	40091eb8 	.word	0x40091eb8
 8002458:	2000092c 	.word	0x2000092c
 800245c:	20000750 	.word	0x20000750
 8002460:	20000758 	.word	0x20000758
 8002464:	001e8480 	.word	0x001e8480

08002468 <trajectory>:

void trajectory(uint64_t Timestamp){
 8002468:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800246c:	b084      	sub	sp, #16
 800246e:	af00      	add	r7, sp, #0
 8002470:	e9c7 0100 	strd	r0, r1, [r7]
	static float a2 = 0;
	static float a3 = 0;
	static float a4 = 0;
	static float a5 = 0;
	static uint64_t setTime = 0;
	state[0] = start;
 8002474:	4b48      	ldr	r3, [pc, #288]	; (8002598 <trajectory+0x130>)
 8002476:	781b      	ldrb	r3, [r3, #0]
 8002478:	461a      	mov	r2, r3
 800247a:	4b48      	ldr	r3, [pc, #288]	; (800259c <trajectory+0x134>)
 800247c:	701a      	strb	r2, [r3, #0]
	rawPosition[0] = (float)HTIM_ENCODER.Instance->CNT*90/2048;
 800247e:	4b48      	ldr	r3, [pc, #288]	; (80025a0 <trajectory+0x138>)
 8002480:	681b      	ldr	r3, [r3, #0]
 8002482:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002484:	ee07 3a90 	vmov	s15, r3
 8002488:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800248c:	ed9f 7a45 	vldr	s14, [pc, #276]	; 80025a4 <trajectory+0x13c>
 8002490:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002494:	eddf 6a44 	vldr	s13, [pc, #272]	; 80025a8 <trajectory+0x140>
 8002498:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800249c:	4b43      	ldr	r3, [pc, #268]	; (80025ac <trajectory+0x144>)
 800249e:	edc3 7a00 	vstr	s15, [r3]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 80)){
 80024a2:	4b42      	ldr	r3, [pc, #264]	; (80025ac <trajectory+0x144>)
 80024a4:	edd3 7a00 	vldr	s15, [r3]
 80024a8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024ac:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024b0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024b4:	d510      	bpl.n	80024d8 <trajectory+0x70>
 80024b6:	4b3d      	ldr	r3, [pc, #244]	; (80025ac <trajectory+0x144>)
 80024b8:	edd3 7a01 	vldr	s15, [r3, #4]
 80024bc:	ed9f 7a3c 	vldr	s14, [pc, #240]	; 80025b0 <trajectory+0x148>
 80024c0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024c4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024c8:	dd06      	ble.n	80024d8 <trajectory+0x70>
		cP += 1;
 80024ca:	4b3a      	ldr	r3, [pc, #232]	; (80025b4 <trajectory+0x14c>)
 80024cc:	781b      	ldrb	r3, [r3, #0]
 80024ce:	3301      	adds	r3, #1
 80024d0:	b2da      	uxtb	r2, r3
 80024d2:	4b38      	ldr	r3, [pc, #224]	; (80025b4 <trajectory+0x14c>)
 80024d4:	701a      	strb	r2, [r3, #0]
 80024d6:	e019      	b.n	800250c <trajectory+0xa4>
	}
	else if ((rawPosition[0] > 80 )&& (rawPosition[1] < 10)){
 80024d8:	4b34      	ldr	r3, [pc, #208]	; (80025ac <trajectory+0x144>)
 80024da:	edd3 7a00 	vldr	s15, [r3]
 80024de:	ed9f 7a34 	vldr	s14, [pc, #208]	; 80025b0 <trajectory+0x148>
 80024e2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024e6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024ea:	dd0f      	ble.n	800250c <trajectory+0xa4>
 80024ec:	4b2f      	ldr	r3, [pc, #188]	; (80025ac <trajectory+0x144>)
 80024ee:	edd3 7a01 	vldr	s15, [r3, #4]
 80024f2:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80024f6:	eef4 7ac7 	vcmpe.f32	s15, s14
 80024fa:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024fe:	d505      	bpl.n	800250c <trajectory+0xa4>
		cP -= 1;
 8002500:	4b2c      	ldr	r3, [pc, #176]	; (80025b4 <trajectory+0x14c>)
 8002502:	781b      	ldrb	r3, [r3, #0]
 8002504:	3b01      	subs	r3, #1
 8002506:	b2da      	uxtb	r2, r3
 8002508:	4b2a      	ldr	r3, [pc, #168]	; (80025b4 <trajectory+0x14c>)
 800250a:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 800250c:	4b29      	ldr	r3, [pc, #164]	; (80025b4 <trajectory+0x14c>)
 800250e:	781b      	ldrb	r3, [r3, #0]
 8002510:	2b03      	cmp	r3, #3
 8002512:	d902      	bls.n	800251a <trajectory+0xb2>
		cP = 0;
 8002514:	4b27      	ldr	r3, [pc, #156]	; (80025b4 <trajectory+0x14c>)
 8002516:	2200      	movs	r2, #0
 8002518:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = (float)rawPosition[0] + cP*90;
 800251a:	4b24      	ldr	r3, [pc, #144]	; (80025ac <trajectory+0x144>)
 800251c:	ed93 7a00 	vldr	s14, [r3]
 8002520:	4b24      	ldr	r3, [pc, #144]	; (80025b4 <trajectory+0x14c>)
 8002522:	781b      	ldrb	r3, [r3, #0]
 8002524:	461a      	mov	r2, r3
 8002526:	235a      	movs	r3, #90	; 0x5a
 8002528:	fb03 f302 	mul.w	r3, r3, r2
 800252c:	ee07 3a90 	vmov	s15, r3
 8002530:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002534:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002538:	4b1f      	ldr	r3, [pc, #124]	; (80025b8 <trajectory+0x150>)
 800253a:	edc3 7a00 	vstr	s15, [r3]
	K = 0;
 800253e:	4b1f      	ldr	r3, [pc, #124]	; (80025bc <trajectory+0x154>)
 8002540:	f04f 0200 	mov.w	r2, #0
 8002544:	601a      	str	r2, [r3, #0]
	if(state[0] == 1){
 8002546:	4b15      	ldr	r3, [pc, #84]	; (800259c <trajectory+0x134>)
 8002548:	781b      	ldrb	r3, [r3, #0]
 800254a:	2b01      	cmp	r3, #1
 800254c:	f040 8263 	bne.w	8002a16 <trajectory+0x5ae>
		if(state[0] != state[1]){
 8002550:	4b12      	ldr	r3, [pc, #72]	; (800259c <trajectory+0x134>)
 8002552:	781a      	ldrb	r2, [r3, #0]
 8002554:	4b11      	ldr	r3, [pc, #68]	; (800259c <trajectory+0x134>)
 8002556:	785b      	ldrb	r3, [r3, #1]
 8002558:	429a      	cmp	r2, r3
 800255a:	d008      	beq.n	800256e <trajectory+0x106>
			setTime = Timestamp;
 800255c:	4918      	ldr	r1, [pc, #96]	; (80025c0 <trajectory+0x158>)
 800255e:	e9d7 2300 	ldrd	r2, r3, [r7]
 8002562:	e9c1 2300 	strd	r2, r3, [r1]
			startAngle = currentPosition;
 8002566:	4b14      	ldr	r3, [pc, #80]	; (80025b8 <trajectory+0x150>)
 8002568:	681b      	ldr	r3, [r3, #0]
 800256a:	4a16      	ldr	r2, [pc, #88]	; (80025c4 <trajectory+0x15c>)
 800256c:	6013      	str	r3, [r2, #0]
		}
		if(abs(finalAngle - startAngle) > 80){
 800256e:	4b16      	ldr	r3, [pc, #88]	; (80025c8 <trajectory+0x160>)
 8002570:	ed93 7a00 	vldr	s14, [r3]
 8002574:	4b13      	ldr	r3, [pc, #76]	; (80025c4 <trajectory+0x15c>)
 8002576:	edd3 7a00 	vldr	s15, [r3]
 800257a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800257e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002582:	ee17 3a90 	vmov	r3, s15
 8002586:	2b00      	cmp	r3, #0
 8002588:	bfb8      	it	lt
 800258a:	425b      	neglt	r3, r3
 800258c:	2b50      	cmp	r3, #80	; 0x50
 800258e:	dd21      	ble.n	80025d4 <trajectory+0x16c>
			stopError = 5;
 8002590:	4b0e      	ldr	r3, [pc, #56]	; (80025cc <trajectory+0x164>)
 8002592:	4a0f      	ldr	r2, [pc, #60]	; (80025d0 <trajectory+0x168>)
 8002594:	601a      	str	r2, [r3, #0]
 8002596:	e021      	b.n	80025dc <trajectory+0x174>
 8002598:	20000736 	.word	0x20000736
 800259c:	20000734 	.word	0x20000734
 80025a0:	2000092c 	.word	0x2000092c
 80025a4:	42b40000 	.word	0x42b40000
 80025a8:	45000000 	.word	0x45000000
 80025ac:	2000072c 	.word	0x2000072c
 80025b0:	42a00000 	.word	0x42a00000
 80025b4:	20000700 	.word	0x20000700
 80025b8:	20000728 	.word	0x20000728
 80025bc:	20000024 	.word	0x20000024
 80025c0:	20000760 	.word	0x20000760
 80025c4:	20000720 	.word	0x20000720
 80025c8:	20000008 	.word	0x20000008
 80025cc:	20000004 	.word	0x20000004
 80025d0:	40a00000 	.word	0x40a00000
		}
		else{
			stopError = 0;
 80025d4:	4bd8      	ldr	r3, [pc, #864]	; (8002938 <trajectory+0x4d0>)
 80025d6:	f04f 0200 	mov.w	r2, #0
 80025da:	601a      	str	r2, [r3, #0]
		}
		tim = (float) (Timestamp-setTime)/1000000;
 80025dc:	4bd7      	ldr	r3, [pc, #860]	; (800293c <trajectory+0x4d4>)
 80025de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80025e6:	1a84      	subs	r4, r0, r2
 80025e8:	eb61 0503 	sbc.w	r5, r1, r3
 80025ec:	4620      	mov	r0, r4
 80025ee:	4629      	mov	r1, r5
 80025f0:	f7fe fb76 	bl	8000ce0 <__aeabi_ul2f>
 80025f4:	ee06 0a90 	vmov	s13, r0
 80025f8:	ed9f 7ad1 	vldr	s14, [pc, #836]	; 8002940 <trajectory+0x4d8>
 80025fc:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002600:	4bd0      	ldr	r3, [pc, #832]	; (8002944 <trajectory+0x4dc>)
 8002602:	edc3 7a00 	vstr	s15, [r3]
		tF = (float) (250*abs(finalAngle-startAngle)/(355*vMax));
 8002606:	4bd0      	ldr	r3, [pc, #832]	; (8002948 <trajectory+0x4e0>)
 8002608:	ed93 7a00 	vldr	s14, [r3]
 800260c:	4bcf      	ldr	r3, [pc, #828]	; (800294c <trajectory+0x4e4>)
 800260e:	edd3 7a00 	vldr	s15, [r3]
 8002612:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002616:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800261a:	ee17 3a90 	vmov	r3, s15
 800261e:	2b00      	cmp	r3, #0
 8002620:	bfb8      	it	lt
 8002622:	425b      	neglt	r3, r3
 8002624:	22fa      	movs	r2, #250	; 0xfa
 8002626:	fb02 f303 	mul.w	r3, r2, r3
 800262a:	ee07 3a90 	vmov	s15, r3
 800262e:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8002632:	4bc7      	ldr	r3, [pc, #796]	; (8002950 <trajectory+0x4e8>)
 8002634:	edd3 7a00 	vldr	s15, [r3]
 8002638:	ed9f 7ac6 	vldr	s14, [pc, #792]	; 8002954 <trajectory+0x4ec>
 800263c:	ee27 7a87 	vmul.f32	s14, s15, s14
 8002640:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002644:	4bc4      	ldr	r3, [pc, #784]	; (8002958 <trajectory+0x4f0>)
 8002646:	edc3 7a00 	vstr	s15, [r3]
		if ((tim <= tF)){
 800264a:	4bbe      	ldr	r3, [pc, #760]	; (8002944 <trajectory+0x4dc>)
 800264c:	ed93 7a00 	vldr	s14, [r3]
 8002650:	4bc1      	ldr	r3, [pc, #772]	; (8002958 <trajectory+0x4f0>)
 8002652:	edd3 7a00 	vldr	s15, [r3]
 8002656:	eeb4 7ae7 	vcmpe.f32	s14, s15
 800265a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800265e:	f200 8138 	bhi.w	80028d2 <trajectory+0x46a>
			//cubic trajectory
			a0 = startAngle;
 8002662:	4bba      	ldr	r3, [pc, #744]	; (800294c <trajectory+0x4e4>)
 8002664:	681b      	ldr	r3, [r3, #0]
 8002666:	4abd      	ldr	r2, [pc, #756]	; (800295c <trajectory+0x4f4>)
 8002668:	6013      	str	r3, [r2, #0]
			a1 = 0;
 800266a:	4bbd      	ldr	r3, [pc, #756]	; (8002960 <trajectory+0x4f8>)
 800266c:	f04f 0200 	mov.w	r2, #0
 8002670:	601a      	str	r2, [r3, #0]
			a2 = (float) (3/pow(tF,2))*(finalAngle-startAngle);
 8002672:	4bb9      	ldr	r3, [pc, #740]	; (8002958 <trajectory+0x4f0>)
 8002674:	681b      	ldr	r3, [r3, #0]
 8002676:	4618      	mov	r0, r3
 8002678:	f7fd ff12 	bl	80004a0 <__aeabi_f2d>
 800267c:	4602      	mov	r2, r0
 800267e:	460b      	mov	r3, r1
 8002680:	ed9f 1ba7 	vldr	d1, [pc, #668]	; 8002920 <trajectory+0x4b8>
 8002684:	ec43 2b10 	vmov	d0, r2, r3
 8002688:	f006 fde4 	bl	8009254 <pow>
 800268c:	ec53 2b10 	vmov	r2, r3, d0
 8002690:	f04f 0000 	mov.w	r0, #0
 8002694:	49b3      	ldr	r1, [pc, #716]	; (8002964 <trajectory+0x4fc>)
 8002696:	f7fe f885 	bl	80007a4 <__aeabi_ddiv>
 800269a:	4602      	mov	r2, r0
 800269c:	460b      	mov	r3, r1
 800269e:	4610      	mov	r0, r2
 80026a0:	4619      	mov	r1, r3
 80026a2:	f7fe fa05 	bl	8000ab0 <__aeabi_d2f>
 80026a6:	ee06 0a90 	vmov	s13, r0
 80026aa:	4ba7      	ldr	r3, [pc, #668]	; (8002948 <trajectory+0x4e0>)
 80026ac:	ed93 7a00 	vldr	s14, [r3]
 80026b0:	4ba6      	ldr	r3, [pc, #664]	; (800294c <trajectory+0x4e4>)
 80026b2:	edd3 7a00 	vldr	s15, [r3]
 80026b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80026ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80026be:	4baa      	ldr	r3, [pc, #680]	; (8002968 <trajectory+0x500>)
 80026c0:	edc3 7a00 	vstr	s15, [r3]
			a3 = (float) -(2/pow(tF,3))*(finalAngle-startAngle);
 80026c4:	4ba4      	ldr	r3, [pc, #656]	; (8002958 <trajectory+0x4f0>)
 80026c6:	681b      	ldr	r3, [r3, #0]
 80026c8:	4618      	mov	r0, r3
 80026ca:	f7fd fee9 	bl	80004a0 <__aeabi_f2d>
 80026ce:	4602      	mov	r2, r0
 80026d0:	460b      	mov	r3, r1
 80026d2:	ed9f 1b95 	vldr	d1, [pc, #596]	; 8002928 <trajectory+0x4c0>
 80026d6:	ec43 2b10 	vmov	d0, r2, r3
 80026da:	f006 fdbb 	bl	8009254 <pow>
 80026de:	ec53 2b10 	vmov	r2, r3, d0
 80026e2:	f04f 0000 	mov.w	r0, #0
 80026e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80026ea:	f7fe f85b 	bl	80007a4 <__aeabi_ddiv>
 80026ee:	4602      	mov	r2, r0
 80026f0:	460b      	mov	r3, r1
 80026f2:	4610      	mov	r0, r2
 80026f4:	4619      	mov	r1, r3
 80026f6:	f7fe f9db 	bl	8000ab0 <__aeabi_d2f>
 80026fa:	4603      	mov	r3, r0
 80026fc:	ee07 3a90 	vmov	s15, r3
 8002700:	eeb1 7a67 	vneg.f32	s14, s15
 8002704:	4b90      	ldr	r3, [pc, #576]	; (8002948 <trajectory+0x4e0>)
 8002706:	edd3 6a00 	vldr	s13, [r3]
 800270a:	4b90      	ldr	r3, [pc, #576]	; (800294c <trajectory+0x4e4>)
 800270c:	edd3 7a00 	vldr	s15, [r3]
 8002710:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8002714:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002718:	4b94      	ldr	r3, [pc, #592]	; (800296c <trajectory+0x504>)
 800271a:	edc3 7a00 	vstr	s15, [r3]
			position = (float) a0+ (a1*tim) +(a2*pow(tim,2)) +(a3*pow(tim,3));
 800271e:	4b90      	ldr	r3, [pc, #576]	; (8002960 <trajectory+0x4f8>)
 8002720:	ed93 7a00 	vldr	s14, [r3]
 8002724:	4b87      	ldr	r3, [pc, #540]	; (8002944 <trajectory+0x4dc>)
 8002726:	edd3 7a00 	vldr	s15, [r3]
 800272a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800272e:	4b8b      	ldr	r3, [pc, #556]	; (800295c <trajectory+0x4f4>)
 8002730:	edd3 7a00 	vldr	s15, [r3]
 8002734:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002738:	ee17 0a90 	vmov	r0, s15
 800273c:	f7fd feb0 	bl	80004a0 <__aeabi_f2d>
 8002740:	4604      	mov	r4, r0
 8002742:	460d      	mov	r5, r1
 8002744:	4b88      	ldr	r3, [pc, #544]	; (8002968 <trajectory+0x500>)
 8002746:	681b      	ldr	r3, [r3, #0]
 8002748:	4618      	mov	r0, r3
 800274a:	f7fd fea9 	bl	80004a0 <__aeabi_f2d>
 800274e:	4680      	mov	r8, r0
 8002750:	4689      	mov	r9, r1
 8002752:	4b7c      	ldr	r3, [pc, #496]	; (8002944 <trajectory+0x4dc>)
 8002754:	681b      	ldr	r3, [r3, #0]
 8002756:	4618      	mov	r0, r3
 8002758:	f7fd fea2 	bl	80004a0 <__aeabi_f2d>
 800275c:	4602      	mov	r2, r0
 800275e:	460b      	mov	r3, r1
 8002760:	ed9f 1b6f 	vldr	d1, [pc, #444]	; 8002920 <trajectory+0x4b8>
 8002764:	ec43 2b10 	vmov	d0, r2, r3
 8002768:	f006 fd74 	bl	8009254 <pow>
 800276c:	ec53 2b10 	vmov	r2, r3, d0
 8002770:	4640      	mov	r0, r8
 8002772:	4649      	mov	r1, r9
 8002774:	f7fd feec 	bl	8000550 <__aeabi_dmul>
 8002778:	4602      	mov	r2, r0
 800277a:	460b      	mov	r3, r1
 800277c:	4620      	mov	r0, r4
 800277e:	4629      	mov	r1, r5
 8002780:	f7fd fd30 	bl	80001e4 <__adddf3>
 8002784:	4602      	mov	r2, r0
 8002786:	460b      	mov	r3, r1
 8002788:	4690      	mov	r8, r2
 800278a:	4699      	mov	r9, r3
 800278c:	4b77      	ldr	r3, [pc, #476]	; (800296c <trajectory+0x504>)
 800278e:	681b      	ldr	r3, [r3, #0]
 8002790:	4618      	mov	r0, r3
 8002792:	f7fd fe85 	bl	80004a0 <__aeabi_f2d>
 8002796:	4604      	mov	r4, r0
 8002798:	460d      	mov	r5, r1
 800279a:	4b6a      	ldr	r3, [pc, #424]	; (8002944 <trajectory+0x4dc>)
 800279c:	681b      	ldr	r3, [r3, #0]
 800279e:	4618      	mov	r0, r3
 80027a0:	f7fd fe7e 	bl	80004a0 <__aeabi_f2d>
 80027a4:	4602      	mov	r2, r0
 80027a6:	460b      	mov	r3, r1
 80027a8:	ed9f 1b5f 	vldr	d1, [pc, #380]	; 8002928 <trajectory+0x4c0>
 80027ac:	ec43 2b10 	vmov	d0, r2, r3
 80027b0:	f006 fd50 	bl	8009254 <pow>
 80027b4:	ec53 2b10 	vmov	r2, r3, d0
 80027b8:	4620      	mov	r0, r4
 80027ba:	4629      	mov	r1, r5
 80027bc:	f7fd fec8 	bl	8000550 <__aeabi_dmul>
 80027c0:	4602      	mov	r2, r0
 80027c2:	460b      	mov	r3, r1
 80027c4:	4640      	mov	r0, r8
 80027c6:	4649      	mov	r1, r9
 80027c8:	f7fd fd0c 	bl	80001e4 <__adddf3>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	4610      	mov	r0, r2
 80027d2:	4619      	mov	r1, r3
 80027d4:	f7fe f96c 	bl	8000ab0 <__aeabi_d2f>
 80027d8:	4603      	mov	r3, r0
 80027da:	4a65      	ldr	r2, [pc, #404]	; (8002970 <trajectory+0x508>)
 80027dc:	6013      	str	r3, [r2, #0]
			calculatedVelocity = (float) (a1 +(2*a2*tim) +(3*a3*pow(tim,2)))/6;
 80027de:	4b62      	ldr	r3, [pc, #392]	; (8002968 <trajectory+0x500>)
 80027e0:	edd3 7a00 	vldr	s15, [r3]
 80027e4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 80027e8:	4b56      	ldr	r3, [pc, #344]	; (8002944 <trajectory+0x4dc>)
 80027ea:	edd3 7a00 	vldr	s15, [r3]
 80027ee:	ee27 7a27 	vmul.f32	s14, s14, s15
 80027f2:	4b5b      	ldr	r3, [pc, #364]	; (8002960 <trajectory+0x4f8>)
 80027f4:	edd3 7a00 	vldr	s15, [r3]
 80027f8:	ee77 7a27 	vadd.f32	s15, s14, s15
 80027fc:	ee17 0a90 	vmov	r0, s15
 8002800:	f7fd fe4e 	bl	80004a0 <__aeabi_f2d>
 8002804:	4604      	mov	r4, r0
 8002806:	460d      	mov	r5, r1
 8002808:	4b58      	ldr	r3, [pc, #352]	; (800296c <trajectory+0x504>)
 800280a:	edd3 7a00 	vldr	s15, [r3]
 800280e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8002812:	ee67 7a87 	vmul.f32	s15, s15, s14
 8002816:	ee17 0a90 	vmov	r0, s15
 800281a:	f7fd fe41 	bl	80004a0 <__aeabi_f2d>
 800281e:	4680      	mov	r8, r0
 8002820:	4689      	mov	r9, r1
 8002822:	4b48      	ldr	r3, [pc, #288]	; (8002944 <trajectory+0x4dc>)
 8002824:	681b      	ldr	r3, [r3, #0]
 8002826:	4618      	mov	r0, r3
 8002828:	f7fd fe3a 	bl	80004a0 <__aeabi_f2d>
 800282c:	4602      	mov	r2, r0
 800282e:	460b      	mov	r3, r1
 8002830:	ed9f 1b3b 	vldr	d1, [pc, #236]	; 8002920 <trajectory+0x4b8>
 8002834:	ec43 2b10 	vmov	d0, r2, r3
 8002838:	f006 fd0c 	bl	8009254 <pow>
 800283c:	ec53 2b10 	vmov	r2, r3, d0
 8002840:	4640      	mov	r0, r8
 8002842:	4649      	mov	r1, r9
 8002844:	f7fd fe84 	bl	8000550 <__aeabi_dmul>
 8002848:	4602      	mov	r2, r0
 800284a:	460b      	mov	r3, r1
 800284c:	4620      	mov	r0, r4
 800284e:	4629      	mov	r1, r5
 8002850:	f7fd fcc8 	bl	80001e4 <__adddf3>
 8002854:	4602      	mov	r2, r0
 8002856:	460b      	mov	r3, r1
 8002858:	4610      	mov	r0, r2
 800285a:	4619      	mov	r1, r3
 800285c:	f7fe f928 	bl	8000ab0 <__aeabi_d2f>
 8002860:	ee06 0a90 	vmov	s13, r0
 8002864:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8002868:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800286c:	4b41      	ldr	r3, [pc, #260]	; (8002974 <trajectory+0x50c>)
 800286e:	edc3 7a00 	vstr	s15, [r3]
			alpha = (float) ((2*a2) +(6*a3*tim))*2*3.14/360;
 8002872:	4b3d      	ldr	r3, [pc, #244]	; (8002968 <trajectory+0x500>)
 8002874:	edd3 7a00 	vldr	s15, [r3]
 8002878:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800287c:	4b3b      	ldr	r3, [pc, #236]	; (800296c <trajectory+0x504>)
 800287e:	edd3 7a00 	vldr	s15, [r3]
 8002882:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8002886:	ee67 6aa6 	vmul.f32	s13, s15, s13
 800288a:	4b2e      	ldr	r3, [pc, #184]	; (8002944 <trajectory+0x4dc>)
 800288c:	edd3 7a00 	vldr	s15, [r3]
 8002890:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002894:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002898:	ee77 7aa7 	vadd.f32	s15, s15, s15
 800289c:	ee17 0a90 	vmov	r0, s15
 80028a0:	f7fd fdfe 	bl	80004a0 <__aeabi_f2d>
 80028a4:	a322      	add	r3, pc, #136	; (adr r3, 8002930 <trajectory+0x4c8>)
 80028a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028aa:	f7fd fe51 	bl	8000550 <__aeabi_dmul>
 80028ae:	4602      	mov	r2, r0
 80028b0:	460b      	mov	r3, r1
 80028b2:	4610      	mov	r0, r2
 80028b4:	4619      	mov	r1, r3
 80028b6:	f04f 0200 	mov.w	r2, #0
 80028ba:	4b2f      	ldr	r3, [pc, #188]	; (8002978 <trajectory+0x510>)
 80028bc:	f7fd ff72 	bl	80007a4 <__aeabi_ddiv>
 80028c0:	4602      	mov	r2, r0
 80028c2:	460b      	mov	r3, r1
 80028c4:	4610      	mov	r0, r2
 80028c6:	4619      	mov	r1, r3
 80028c8:	f7fe f8f2 	bl	8000ab0 <__aeabi_d2f>
 80028cc:	4603      	mov	r3, r0
 80028ce:	4a2b      	ldr	r2, [pc, #172]	; (800297c <trajectory+0x514>)
 80028d0:	6013      	str	r3, [r2, #0]
			//		a5 = (float) 6*(finalAngle-startAngle)/pow(tF,4);
			//		position = (float) a0 + a1*tim + a2*pow(tim,2) + a3*pow(tim,3) + a4*pow(tim,4) + a5*pow(tim,5);
			//		calculatedVelocity = (float) a1+ 2*a2*tim + 3*a3*pow(tim,2) + 4*a4*pow(tim,3) + 5*a5*pow(tim,4);
			//		alpha = (float) a2 + 6*a3*tim + 12*a4*pow(tim,2) + 20*a5*pow(tim,3);
		}
		if(abs(currentPosition - finalAngle) < 8){
 80028d2:	4b2b      	ldr	r3, [pc, #172]	; (8002980 <trajectory+0x518>)
 80028d4:	ed93 7a00 	vldr	s14, [r3]
 80028d8:	4b1b      	ldr	r3, [pc, #108]	; (8002948 <trajectory+0x4e0>)
 80028da:	edd3 7a00 	vldr	s15, [r3]
 80028de:	ee77 7a67 	vsub.f32	s15, s14, s15
 80028e2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80028e6:	ee17 3a90 	vmov	r3, s15
 80028ea:	f113 0f07 	cmn.w	r3, #7
 80028ee:	f2c0 808b 	blt.w	8002a08 <trajectory+0x5a0>
 80028f2:	4b23      	ldr	r3, [pc, #140]	; (8002980 <trajectory+0x518>)
 80028f4:	ed93 7a00 	vldr	s14, [r3]
 80028f8:	4b13      	ldr	r3, [pc, #76]	; (8002948 <trajectory+0x4e0>)
 80028fa:	edd3 7a00 	vldr	s15, [r3]
 80028fe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002902:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002906:	ee17 3a90 	vmov	r3, s15
 800290a:	2b07      	cmp	r3, #7
 800290c:	dc7c      	bgt.n	8002a08 <trajectory+0x5a0>
			K =2000;
 800290e:	4b1d      	ldr	r3, [pc, #116]	; (8002984 <trajectory+0x51c>)
 8002910:	4a1d      	ldr	r2, [pc, #116]	; (8002988 <trajectory+0x520>)
 8002912:	601a      	str	r2, [r3, #0]
			if(velocity < 0){
 8002914:	4b1d      	ldr	r3, [pc, #116]	; (800298c <trajectory+0x524>)
 8002916:	edd3 7a00 	vldr	s15, [r3]
 800291a:	e039      	b.n	8002990 <trajectory+0x528>
 800291c:	f3af 8000 	nop.w
 8002920:	00000000 	.word	0x00000000
 8002924:	40000000 	.word	0x40000000
 8002928:	00000000 	.word	0x00000000
 800292c:	40080000 	.word	0x40080000
 8002930:	51eb851f 	.word	0x51eb851f
 8002934:	40091eb8 	.word	0x40091eb8
 8002938:	20000004 	.word	0x20000004
 800293c:	20000760 	.word	0x20000760
 8002940:	49742400 	.word	0x49742400
 8002944:	20000718 	.word	0x20000718
 8002948:	20000008 	.word	0x20000008
 800294c:	20000720 	.word	0x20000720
 8002950:	20000010 	.word	0x20000010
 8002954:	43b18000 	.word	0x43b18000
 8002958:	20000748 	.word	0x20000748
 800295c:	20000768 	.word	0x20000768
 8002960:	2000076c 	.word	0x2000076c
 8002964:	40080000 	.word	0x40080000
 8002968:	20000770 	.word	0x20000770
 800296c:	20000774 	.word	0x20000774
 8002970:	20000710 	.word	0x20000710
 8002974:	20000708 	.word	0x20000708
 8002978:	40768000 	.word	0x40768000
 800297c:	20000714 	.word	0x20000714
 8002980:	20000728 	.word	0x20000728
 8002984:	20000024 	.word	0x20000024
 8002988:	44fa0000 	.word	0x44fa0000
 800298c:	2000070c 	.word	0x2000070c
 8002990:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002994:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002998:	d503      	bpl.n	80029a2 <trajectory+0x53a>
				velocity = -1;
 800299a:	4b23      	ldr	r3, [pc, #140]	; (8002a28 <trajectory+0x5c0>)
 800299c:	4a23      	ldr	r2, [pc, #140]	; (8002a2c <trajectory+0x5c4>)
 800299e:	601a      	str	r2, [r3, #0]
 80029a0:	e003      	b.n	80029aa <trajectory+0x542>
			}
			else{
				velocity = 1;
 80029a2:	4b21      	ldr	r3, [pc, #132]	; (8002a28 <trajectory+0x5c0>)
 80029a4:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 80029a8:	601a      	str	r2, [r3, #0]
			}
			if (abs(currentPosition - finalAngle) == 0){
 80029aa:	4b21      	ldr	r3, [pc, #132]	; (8002a30 <trajectory+0x5c8>)
 80029ac:	ed93 7a00 	vldr	s14, [r3]
 80029b0:	4b20      	ldr	r3, [pc, #128]	; (8002a34 <trajectory+0x5cc>)
 80029b2:	edd3 7a00 	vldr	s15, [r3]
 80029b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80029ba:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80029be:	ee17 3a90 	vmov	r3, s15
 80029c2:	2b00      	cmp	r3, #0
 80029c4:	d125      	bne.n	8002a12 <trajectory+0x5aa>
				start = 0;
 80029c6:	4b1c      	ldr	r3, [pc, #112]	; (8002a38 <trajectory+0x5d0>)
 80029c8:	2200      	movs	r2, #0
 80029ca:	701a      	strb	r2, [r3, #0]
				uint8_t temp2[] = {0x46,0x6E};
 80029cc:	f646 6346 	movw	r3, #28230	; 0x6e46
 80029d0:	81bb      	strh	r3, [r7, #12]
				UARTTxWrite(&UART2, temp2, 2);
 80029d2:	f107 030c 	add.w	r3, r7, #12
 80029d6:	2202      	movs	r2, #2
 80029d8:	4619      	mov	r1, r3
 80029da:	4818      	ldr	r0, [pc, #96]	; (8002a3c <trajectory+0x5d4>)
 80029dc:	f7fe ff56 	bl	800188c <UARTTxWrite>
				velocity = 0;
 80029e0:	4b11      	ldr	r3, [pc, #68]	; (8002a28 <trajectory+0x5c0>)
 80029e2:	f04f 0200 	mov.w	r2, #0
 80029e6:	601a      	str	r2, [r3, #0]
				stopTime = Timestamp;
 80029e8:	e9d7 0100 	ldrd	r0, r1, [r7]
 80029ec:	f7fe f978 	bl	8000ce0 <__aeabi_ul2f>
 80029f0:	4603      	mov	r3, r0
 80029f2:	4a13      	ldr	r2, [pc, #76]	; (8002a40 <trajectory+0x5d8>)
 80029f4:	6013      	str	r3, [r2, #0]
				I2C();
 80029f6:	f7ff fcb3 	bl	8002360 <I2C>
				state[1] = 0;
 80029fa:	4b12      	ldr	r3, [pc, #72]	; (8002a44 <trajectory+0x5dc>)
 80029fc:	2200      	movs	r2, #0
 80029fe:	705a      	strb	r2, [r3, #1]
				state[0] = 0;
 8002a00:	4b10      	ldr	r3, [pc, #64]	; (8002a44 <trajectory+0x5dc>)
 8002a02:	2200      	movs	r2, #0
 8002a04:	701a      	strb	r2, [r3, #0]
			if (abs(currentPosition - finalAngle) == 0){
 8002a06:	e004      	b.n	8002a12 <trajectory+0x5aa>
			}
		}
		else{
			K = 1000;
 8002a08:	4b0f      	ldr	r3, [pc, #60]	; (8002a48 <trajectory+0x5e0>)
 8002a0a:	4a10      	ldr	r2, [pc, #64]	; (8002a4c <trajectory+0x5e4>)
 8002a0c:	601a      	str	r2, [r3, #0]
			pidPosition();
 8002a0e:	f000 f821 	bl	8002a54 <pidPosition>
		}
		piVelocity();
 8002a12:	f000 f8b7 	bl	8002b84 <piVelocity>
	}
	rawPosition[1] = rawPosition[0];
 8002a16:	4b0e      	ldr	r3, [pc, #56]	; (8002a50 <trajectory+0x5e8>)
 8002a18:	681b      	ldr	r3, [r3, #0]
 8002a1a:	4a0d      	ldr	r2, [pc, #52]	; (8002a50 <trajectory+0x5e8>)
 8002a1c:	6053      	str	r3, [r2, #4]
}
 8002a1e:	bf00      	nop
 8002a20:	3710      	adds	r7, #16
 8002a22:	46bd      	mov	sp, r7
 8002a24:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8002a28:	2000070c 	.word	0x2000070c
 8002a2c:	bf800000 	.word	0xbf800000
 8002a30:	20000728 	.word	0x20000728
 8002a34:	20000008 	.word	0x20000008
 8002a38:	20000736 	.word	0x20000736
 8002a3c:	200000c4 	.word	0x200000c4
 8002a40:	20000724 	.word	0x20000724
 8002a44:	20000734 	.word	0x20000734
 8002a48:	20000024 	.word	0x20000024
 8002a4c:	447a0000 	.word	0x447a0000
 8002a50:	2000072c 	.word	0x2000072c

08002a54 <pidPosition>:

void pidPosition(){
 8002a54:	b480      	push	{r7}
 8002a56:	af00      	add	r7, sp, #0
	static float errorP = 0;
	static float integralP = 0;
	static float derivativeP = 0;
	errorP = position - currentPosition;
 8002a58:	4b3f      	ldr	r3, [pc, #252]	; (8002b58 <pidPosition+0x104>)
 8002a5a:	ed93 7a00 	vldr	s14, [r3]
 8002a5e:	4b3f      	ldr	r3, [pc, #252]	; (8002b5c <pidPosition+0x108>)
 8002a60:	edd3 7a00 	vldr	s15, [r3]
 8002a64:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002a68:	4b3d      	ldr	r3, [pc, #244]	; (8002b60 <pidPosition+0x10c>)
 8002a6a:	edc3 7a00 	vstr	s15, [r3]
	integralP = integralP+errorP;
 8002a6e:	4b3d      	ldr	r3, [pc, #244]	; (8002b64 <pidPosition+0x110>)
 8002a70:	ed93 7a00 	vldr	s14, [r3]
 8002a74:	4b3a      	ldr	r3, [pc, #232]	; (8002b60 <pidPosition+0x10c>)
 8002a76:	edd3 7a00 	vldr	s15, [r3]
 8002a7a:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002a7e:	4b39      	ldr	r3, [pc, #228]	; (8002b64 <pidPosition+0x110>)
 8002a80:	edc3 7a00 	vstr	s15, [r3]
	velocity = Kp_p*errorP + Ki_p*integralP +Kd_p*(errorP-derivativeP);
 8002a84:	4b38      	ldr	r3, [pc, #224]	; (8002b68 <pidPosition+0x114>)
 8002a86:	ed93 7a00 	vldr	s14, [r3]
 8002a8a:	4b35      	ldr	r3, [pc, #212]	; (8002b60 <pidPosition+0x10c>)
 8002a8c:	edd3 7a00 	vldr	s15, [r3]
 8002a90:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002a94:	4b35      	ldr	r3, [pc, #212]	; (8002b6c <pidPosition+0x118>)
 8002a96:	edd3 6a00 	vldr	s13, [r3]
 8002a9a:	4b32      	ldr	r3, [pc, #200]	; (8002b64 <pidPosition+0x110>)
 8002a9c:	edd3 7a00 	vldr	s15, [r3]
 8002aa0:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002aa4:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002aa8:	4b2d      	ldr	r3, [pc, #180]	; (8002b60 <pidPosition+0x10c>)
 8002aaa:	edd3 6a00 	vldr	s13, [r3]
 8002aae:	4b30      	ldr	r3, [pc, #192]	; (8002b70 <pidPosition+0x11c>)
 8002ab0:	edd3 7a00 	vldr	s15, [r3]
 8002ab4:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002ab8:	4b2e      	ldr	r3, [pc, #184]	; (8002b74 <pidPosition+0x120>)
 8002aba:	edd3 7a00 	vldr	s15, [r3]
 8002abe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002ac2:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ac6:	4b2c      	ldr	r3, [pc, #176]	; (8002b78 <pidPosition+0x124>)
 8002ac8:	edc3 7a00 	vstr	s15, [r3]
	derivativeP = errorP;
 8002acc:	4b24      	ldr	r3, [pc, #144]	; (8002b60 <pidPosition+0x10c>)
 8002ace:	681b      	ldr	r3, [r3, #0]
 8002ad0:	4a27      	ldr	r2, [pc, #156]	; (8002b70 <pidPosition+0x11c>)
 8002ad2:	6013      	str	r3, [r2, #0]
	if (velocity > vMax){
 8002ad4:	4b28      	ldr	r3, [pc, #160]	; (8002b78 <pidPosition+0x124>)
 8002ad6:	ed93 7a00 	vldr	s14, [r3]
 8002ada:	4b28      	ldr	r3, [pc, #160]	; (8002b7c <pidPosition+0x128>)
 8002adc:	edd3 7a00 	vldr	s15, [r3]
 8002ae0:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002ae4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002ae8:	dd04      	ble.n	8002af4 <pidPosition+0xa0>
		velocity = vMax;
 8002aea:	4b24      	ldr	r3, [pc, #144]	; (8002b7c <pidPosition+0x128>)
 8002aec:	681b      	ldr	r3, [r3, #0]
 8002aee:	4a22      	ldr	r2, [pc, #136]	; (8002b78 <pidPosition+0x124>)
 8002af0:	6013      	str	r3, [r2, #0]
 8002af2:	e014      	b.n	8002b1e <pidPosition+0xca>
	}
	else if (velocity < -vMax){
 8002af4:	4b21      	ldr	r3, [pc, #132]	; (8002b7c <pidPosition+0x128>)
 8002af6:	edd3 7a00 	vldr	s15, [r3]
 8002afa:	eeb1 7a67 	vneg.f32	s14, s15
 8002afe:	4b1e      	ldr	r3, [pc, #120]	; (8002b78 <pidPosition+0x124>)
 8002b00:	edd3 7a00 	vldr	s15, [r3]
 8002b04:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8002b08:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002b0c:	dd07      	ble.n	8002b1e <pidPosition+0xca>
		velocity = -vMax;
 8002b0e:	4b1b      	ldr	r3, [pc, #108]	; (8002b7c <pidPosition+0x128>)
 8002b10:	edd3 7a00 	vldr	s15, [r3]
 8002b14:	eef1 7a67 	vneg.f32	s15, s15
 8002b18:	4b17      	ldr	r3, [pc, #92]	; (8002b78 <pidPosition+0x124>)
 8002b1a:	edc3 7a00 	vstr	s15, [r3]
	}

	if (start == 0){
 8002b1e:	4b18      	ldr	r3, [pc, #96]	; (8002b80 <pidPosition+0x12c>)
 8002b20:	781b      	ldrb	r3, [r3, #0]
 8002b22:	f083 0301 	eor.w	r3, r3, #1
 8002b26:	b2db      	uxtb	r3, r3
 8002b28:	2b00      	cmp	r3, #0
 8002b2a:	d00f      	beq.n	8002b4c <pidPosition+0xf8>
		velocity = 0;
 8002b2c:	4b12      	ldr	r3, [pc, #72]	; (8002b78 <pidPosition+0x124>)
 8002b2e:	f04f 0200 	mov.w	r2, #0
 8002b32:	601a      	str	r2, [r3, #0]
		errorP = 0;
 8002b34:	4b0a      	ldr	r3, [pc, #40]	; (8002b60 <pidPosition+0x10c>)
 8002b36:	f04f 0200 	mov.w	r2, #0
 8002b3a:	601a      	str	r2, [r3, #0]
		integralP = 0;
 8002b3c:	4b09      	ldr	r3, [pc, #36]	; (8002b64 <pidPosition+0x110>)
 8002b3e:	f04f 0200 	mov.w	r2, #0
 8002b42:	601a      	str	r2, [r3, #0]
		derivativeP = 0;
 8002b44:	4b0a      	ldr	r3, [pc, #40]	; (8002b70 <pidPosition+0x11c>)
 8002b46:	f04f 0200 	mov.w	r2, #0
 8002b4a:	601a      	str	r2, [r3, #0]
	}
}
 8002b4c:	bf00      	nop
 8002b4e:	46bd      	mov	sp, r7
 8002b50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b54:	4770      	bx	lr
 8002b56:	bf00      	nop
 8002b58:	20000710 	.word	0x20000710
 8002b5c:	20000728 	.word	0x20000728
 8002b60:	20000778 	.word	0x20000778
 8002b64:	2000077c 	.word	0x2000077c
 8002b68:	2000001c 	.word	0x2000001c
 8002b6c:	20000020 	.word	0x20000020
 8002b70:	20000780 	.word	0x20000780
 8002b74:	20000744 	.word	0x20000744
 8002b78:	2000070c 	.word	0x2000070c
 8002b7c:	20000010 	.word	0x20000010
 8002b80:	20000736 	.word	0x20000736

08002b84 <piVelocity>:

void piVelocity(){
 8002b84:	b580      	push	{r7, lr}
 8002b86:	af00      	add	r7, sp, #0
	static float error = 0;
	static float integral = 0;
	static float derivative = 0;
		error = abs(velocity) - abs(EncoderVel);
 8002b88:	4b59      	ldr	r3, [pc, #356]	; (8002cf0 <piVelocity+0x16c>)
 8002b8a:	edd3 7a00 	vldr	s15, [r3]
 8002b8e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002b92:	ee17 3a90 	vmov	r3, s15
 8002b96:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002b9a:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002b9e:	4b55      	ldr	r3, [pc, #340]	; (8002cf4 <piVelocity+0x170>)
 8002ba0:	edd3 7a00 	vldr	s15, [r3]
 8002ba4:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002ba8:	ee17 3a90 	vmov	r3, s15
 8002bac:	2b00      	cmp	r3, #0
 8002bae:	bfb8      	it	lt
 8002bb0:	425b      	neglt	r3, r3
 8002bb2:	1ad3      	subs	r3, r2, r3
 8002bb4:	ee07 3a90 	vmov	s15, r3
 8002bb8:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8002bbc:	4b4e      	ldr	r3, [pc, #312]	; (8002cf8 <piVelocity+0x174>)
 8002bbe:	edc3 7a00 	vstr	s15, [r3]
		integral = integral+error;
 8002bc2:	4b4e      	ldr	r3, [pc, #312]	; (8002cfc <piVelocity+0x178>)
 8002bc4:	ed93 7a00 	vldr	s14, [r3]
 8002bc8:	4b4b      	ldr	r3, [pc, #300]	; (8002cf8 <piVelocity+0x174>)
 8002bca:	edd3 7a00 	vldr	s15, [r3]
 8002bce:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002bd2:	4b4a      	ldr	r3, [pc, #296]	; (8002cfc <piVelocity+0x178>)
 8002bd4:	edc3 7a00 	vstr	s15, [r3]
		PWMOut = K + Kp*error + Ki*integral +Kd*(error-derivative);
 8002bd8:	4b49      	ldr	r3, [pc, #292]	; (8002d00 <piVelocity+0x17c>)
 8002bda:	ed93 7a00 	vldr	s14, [r3]
 8002bde:	4b46      	ldr	r3, [pc, #280]	; (8002cf8 <piVelocity+0x174>)
 8002be0:	edd3 7a00 	vldr	s15, [r3]
 8002be4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002be8:	4b46      	ldr	r3, [pc, #280]	; (8002d04 <piVelocity+0x180>)
 8002bea:	edd3 7a00 	vldr	s15, [r3]
 8002bee:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002bf2:	4b45      	ldr	r3, [pc, #276]	; (8002d08 <piVelocity+0x184>)
 8002bf4:	edd3 6a00 	vldr	s13, [r3]
 8002bf8:	4b40      	ldr	r3, [pc, #256]	; (8002cfc <piVelocity+0x178>)
 8002bfa:	edd3 7a00 	vldr	s15, [r3]
 8002bfe:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c02:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002c06:	4b3c      	ldr	r3, [pc, #240]	; (8002cf8 <piVelocity+0x174>)
 8002c08:	edd3 6a00 	vldr	s13, [r3]
 8002c0c:	4b3f      	ldr	r3, [pc, #252]	; (8002d0c <piVelocity+0x188>)
 8002c0e:	edd3 7a00 	vldr	s15, [r3]
 8002c12:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8002c16:	4b3e      	ldr	r3, [pc, #248]	; (8002d10 <piVelocity+0x18c>)
 8002c18:	edd3 7a00 	vldr	s15, [r3]
 8002c1c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002c20:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002c24:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8002c28:	ee17 2a90 	vmov	r2, s15
 8002c2c:	4b39      	ldr	r3, [pc, #228]	; (8002d14 <piVelocity+0x190>)
 8002c2e:	601a      	str	r2, [r3, #0]
		derivative = error;
 8002c30:	4b31      	ldr	r3, [pc, #196]	; (8002cf8 <piVelocity+0x174>)
 8002c32:	681b      	ldr	r3, [r3, #0]
 8002c34:	4a35      	ldr	r2, [pc, #212]	; (8002d0c <piVelocity+0x188>)
 8002c36:	6013      	str	r3, [r2, #0]
	if (abs(PWMOut) > 10000){
 8002c38:	4b36      	ldr	r3, [pc, #216]	; (8002d14 <piVelocity+0x190>)
 8002c3a:	681b      	ldr	r3, [r3, #0]
 8002c3c:	2b00      	cmp	r3, #0
 8002c3e:	bfb8      	it	lt
 8002c40:	425b      	neglt	r3, r3
 8002c42:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c46:	4293      	cmp	r3, r2
 8002c48:	dd03      	ble.n	8002c52 <piVelocity+0xce>
		PWMOut = 10000;
 8002c4a:	4b32      	ldr	r3, [pc, #200]	; (8002d14 <piVelocity+0x190>)
 8002c4c:	f242 7210 	movw	r2, #10000	; 0x2710
 8002c50:	601a      	str	r2, [r3, #0]
	}

	if (velocity == 0){
 8002c52:	4b27      	ldr	r3, [pc, #156]	; (8002cf0 <piVelocity+0x16c>)
 8002c54:	edd3 7a00 	vldr	s15, [r3]
 8002c58:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002c5c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c60:	d10e      	bne.n	8002c80 <piVelocity+0xfc>
		PWMOut = 0;
 8002c62:	4b2c      	ldr	r3, [pc, #176]	; (8002d14 <piVelocity+0x190>)
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
		error = 0;
 8002c68:	4b23      	ldr	r3, [pc, #140]	; (8002cf8 <piVelocity+0x174>)
 8002c6a:	f04f 0200 	mov.w	r2, #0
 8002c6e:	601a      	str	r2, [r3, #0]
		integral = 0;
 8002c70:	4b22      	ldr	r3, [pc, #136]	; (8002cfc <piVelocity+0x178>)
 8002c72:	f04f 0200 	mov.w	r2, #0
 8002c76:	601a      	str	r2, [r3, #0]
		derivative = 0;
 8002c78:	4b24      	ldr	r3, [pc, #144]	; (8002d0c <piVelocity+0x188>)
 8002c7a:	f04f 0200 	mov.w	r2, #0
 8002c7e:	601a      	str	r2, [r3, #0]
	}
	if(velocity < 0){
 8002c80:	4b1b      	ldr	r3, [pc, #108]	; (8002cf0 <piVelocity+0x16c>)
 8002c82:	edd3 7a00 	vldr	s15, [r3]
 8002c86:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002c8a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002c8e:	d50c      	bpl.n	8002caa <piVelocity+0x126>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8002c90:	2201      	movs	r2, #1
 8002c92:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002c96:	4820      	ldr	r0, [pc, #128]	; (8002d18 <piVelocity+0x194>)
 8002c98:	f001 fee4 	bl	8004a64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8002c9c:	2200      	movs	r2, #0
 8002c9e:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002ca2:	481d      	ldr	r0, [pc, #116]	; (8002d18 <piVelocity+0x194>)
 8002ca4:	f001 fede 	bl	8004a64 <HAL_GPIO_WritePin>
 8002ca8:	e013      	b.n	8002cd2 <piVelocity+0x14e>
	}
	else if (velocity > 0){
 8002caa:	4b11      	ldr	r3, [pc, #68]	; (8002cf0 <piVelocity+0x16c>)
 8002cac:	edd3 7a00 	vldr	s15, [r3]
 8002cb0:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002cb4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002cb8:	dd0b      	ble.n	8002cd2 <piVelocity+0x14e>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 8002cba:	2201      	movs	r2, #1
 8002cbc:	f44f 7100 	mov.w	r1, #512	; 0x200
 8002cc0:	4815      	ldr	r0, [pc, #84]	; (8002d18 <piVelocity+0x194>)
 8002cc2:	f001 fecf 	bl	8004a64 <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 8002cc6:	2200      	movs	r2, #0
 8002cc8:	f44f 7180 	mov.w	r1, #256	; 0x100
 8002ccc:	4812      	ldr	r0, [pc, #72]	; (8002d18 <piVelocity+0x194>)
 8002cce:	f001 fec9 	bl	8004a64 <HAL_GPIO_WritePin>
	}
	htim3.Instance->CCR1 = abs(PWMOut);
 8002cd2:	4b10      	ldr	r3, [pc, #64]	; (8002d14 <piVelocity+0x190>)
 8002cd4:	681b      	ldr	r3, [r3, #0]
 8002cd6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8002cda:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8002cde:	4b0f      	ldr	r3, [pc, #60]	; (8002d1c <piVelocity+0x198>)
 8002ce0:	681b      	ldr	r3, [r3, #0]
 8002ce2:	635a      	str	r2, [r3, #52]	; 0x34
	state[1] = state[0];
 8002ce4:	4b0e      	ldr	r3, [pc, #56]	; (8002d20 <piVelocity+0x19c>)
 8002ce6:	781a      	ldrb	r2, [r3, #0]
 8002ce8:	4b0d      	ldr	r3, [pc, #52]	; (8002d20 <piVelocity+0x19c>)
 8002cea:	705a      	strb	r2, [r3, #1]
}
 8002cec:	bf00      	nop
 8002cee:	bd80      	pop	{r7, pc}
 8002cf0:	2000070c 	.word	0x2000070c
 8002cf4:	20000704 	.word	0x20000704
 8002cf8:	20000784 	.word	0x20000784
 8002cfc:	20000788 	.word	0x20000788
 8002d00:	20000014 	.word	0x20000014
 8002d04:	20000024 	.word	0x20000024
 8002d08:	20000018 	.word	0x20000018
 8002d0c:	2000078c 	.word	0x2000078c
 8002d10:	20000740 	.word	0x20000740
 8002d14:	20000000 	.word	0x20000000
 8002d18:	40020400 	.word	0x40020400
 8002d1c:	20000884 	.word	0x20000884
 8002d20:	20000734 	.word	0x20000734

08002d24 <gotoSethome>:
void gotoSethome(){
 8002d24:	b580      	push	{r7, lr}
 8002d26:	af00      	add	r7, sp, #0
	if (SetHome == 1){
 8002d28:	4b05      	ldr	r3, [pc, #20]	; (8002d40 <gotoSethome+0x1c>)
 8002d2a:	781b      	ldrb	r3, [r3, #0]
 8002d2c:	2b00      	cmp	r3, #0
 8002d2e:	d005      	beq.n	8002d3c <gotoSethome+0x18>
		velocity = 3;
 8002d30:	4b04      	ldr	r3, [pc, #16]	; (8002d44 <gotoSethome+0x20>)
 8002d32:	4a05      	ldr	r2, [pc, #20]	; (8002d48 <gotoSethome+0x24>)
 8002d34:	601a      	str	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8002d36:	2017      	movs	r0, #23
 8002d38:	f001 f8d7 	bl	8003eea <HAL_NVIC_EnableIRQ>
	}
}
 8002d3c:	bf00      	nop
 8002d3e:	bd80      	pop	{r7, pc}
 8002d40:	2000071c 	.word	0x2000071c
 8002d44:	2000070c 	.word	0x2000070c
 8002d48:	40400000 	.word	0x40400000
 8002d4c:	00000000 	.word	0x00000000

08002d50 <kalman>:
void kalman(){
 8002d50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002d54:	af00      	add	r7, sp, #0
	static float P21predictPRE = 0;
	static float P22predictPRE = 0;
	static float errorVel = 0;
	static float delt = 0;

	delt = (float) dt/1000000;
 8002d56:	4bda      	ldr	r3, [pc, #872]	; (80030c0 <kalman+0x370>)
 8002d58:	881b      	ldrh	r3, [r3, #0]
 8002d5a:	ee07 3a90 	vmov	s15, r3
 8002d5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002d62:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80030c4 <kalman+0x374>
 8002d66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8002d6a:	4bd7      	ldr	r3, [pc, #860]	; (80030c8 <kalman+0x378>)
 8002d6c:	edc3 7a00 	vstr	s15, [r3]
	omegaPredict =  (float) omegaPredictPre;
 8002d70:	4bd6      	ldr	r3, [pc, #856]	; (80030cc <kalman+0x37c>)
 8002d72:	681b      	ldr	r3, [r3, #0]
 8002d74:	4ad6      	ldr	r2, [pc, #856]	; (80030d0 <kalman+0x380>)
 8002d76:	6013      	str	r3, [r2, #0]
	errorVel = (float) EncoderVelocity_Update() - omegaPredict;
 8002d78:	f7ff fafe 	bl	8002378 <EncoderVelocity_Update>
 8002d7c:	eeb0 7a40 	vmov.f32	s14, s0
 8002d80:	4bd3      	ldr	r3, [pc, #844]	; (80030d0 <kalman+0x380>)
 8002d82:	edd3 7a00 	vldr	s15, [r3]
 8002d86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8002d8a:	4bd2      	ldr	r3, [pc, #840]	; (80030d4 <kalman+0x384>)
 8002d8c:	edc3 7a00 	vstr	s15, [r3]

	P11predict = (float) P11predictPRE+delt*P21predictPRE+(pow(Gl,2)*pow(delt,4))/4+(pow(delt,2)*(P12predictPRE+delt*P22predictPRE))/delt;
 8002d90:	4bcd      	ldr	r3, [pc, #820]	; (80030c8 <kalman+0x378>)
 8002d92:	ed93 7a00 	vldr	s14, [r3]
 8002d96:	4bd0      	ldr	r3, [pc, #832]	; (80030d8 <kalman+0x388>)
 8002d98:	edd3 7a00 	vldr	s15, [r3]
 8002d9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002da0:	4bce      	ldr	r3, [pc, #824]	; (80030dc <kalman+0x38c>)
 8002da2:	edd3 7a00 	vldr	s15, [r3]
 8002da6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002daa:	ee17 0a90 	vmov	r0, s15
 8002dae:	f7fd fb77 	bl	80004a0 <__aeabi_f2d>
 8002db2:	4604      	mov	r4, r0
 8002db4:	460d      	mov	r5, r1
 8002db6:	4bca      	ldr	r3, [pc, #808]	; (80030e0 <kalman+0x390>)
 8002db8:	681b      	ldr	r3, [r3, #0]
 8002dba:	4618      	mov	r0, r3
 8002dbc:	f7fd fb70 	bl	80004a0 <__aeabi_f2d>
 8002dc0:	4602      	mov	r2, r0
 8002dc2:	460b      	mov	r3, r1
 8002dc4:	ed9f 1bba 	vldr	d1, [pc, #744]	; 80030b0 <kalman+0x360>
 8002dc8:	ec43 2b10 	vmov	d0, r2, r3
 8002dcc:	f006 fa42 	bl	8009254 <pow>
 8002dd0:	ec59 8b10 	vmov	r8, r9, d0
 8002dd4:	4bbc      	ldr	r3, [pc, #752]	; (80030c8 <kalman+0x378>)
 8002dd6:	681b      	ldr	r3, [r3, #0]
 8002dd8:	4618      	mov	r0, r3
 8002dda:	f7fd fb61 	bl	80004a0 <__aeabi_f2d>
 8002dde:	4602      	mov	r2, r0
 8002de0:	460b      	mov	r3, r1
 8002de2:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 80030b8 <kalman+0x368>
 8002de6:	ec43 2b10 	vmov	d0, r2, r3
 8002dea:	f006 fa33 	bl	8009254 <pow>
 8002dee:	ec53 2b10 	vmov	r2, r3, d0
 8002df2:	4640      	mov	r0, r8
 8002df4:	4649      	mov	r1, r9
 8002df6:	f7fd fbab 	bl	8000550 <__aeabi_dmul>
 8002dfa:	4602      	mov	r2, r0
 8002dfc:	460b      	mov	r3, r1
 8002dfe:	4610      	mov	r0, r2
 8002e00:	4619      	mov	r1, r3
 8002e02:	f04f 0200 	mov.w	r2, #0
 8002e06:	4bb7      	ldr	r3, [pc, #732]	; (80030e4 <kalman+0x394>)
 8002e08:	f7fd fccc 	bl	80007a4 <__aeabi_ddiv>
 8002e0c:	4602      	mov	r2, r0
 8002e0e:	460b      	mov	r3, r1
 8002e10:	4620      	mov	r0, r4
 8002e12:	4629      	mov	r1, r5
 8002e14:	f7fd f9e6 	bl	80001e4 <__adddf3>
 8002e18:	4602      	mov	r2, r0
 8002e1a:	460b      	mov	r3, r1
 8002e1c:	4614      	mov	r4, r2
 8002e1e:	461d      	mov	r5, r3
 8002e20:	4ba9      	ldr	r3, [pc, #676]	; (80030c8 <kalman+0x378>)
 8002e22:	681b      	ldr	r3, [r3, #0]
 8002e24:	4618      	mov	r0, r3
 8002e26:	f7fd fb3b 	bl	80004a0 <__aeabi_f2d>
 8002e2a:	4602      	mov	r2, r0
 8002e2c:	460b      	mov	r3, r1
 8002e2e:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 80030b0 <kalman+0x360>
 8002e32:	ec43 2b10 	vmov	d0, r2, r3
 8002e36:	f006 fa0d 	bl	8009254 <pow>
 8002e3a:	ec59 8b10 	vmov	r8, r9, d0
 8002e3e:	4ba2      	ldr	r3, [pc, #648]	; (80030c8 <kalman+0x378>)
 8002e40:	ed93 7a00 	vldr	s14, [r3]
 8002e44:	4ba8      	ldr	r3, [pc, #672]	; (80030e8 <kalman+0x398>)
 8002e46:	edd3 7a00 	vldr	s15, [r3]
 8002e4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002e4e:	4ba7      	ldr	r3, [pc, #668]	; (80030ec <kalman+0x39c>)
 8002e50:	edd3 7a00 	vldr	s15, [r3]
 8002e54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002e58:	ee17 0a90 	vmov	r0, s15
 8002e5c:	f7fd fb20 	bl	80004a0 <__aeabi_f2d>
 8002e60:	4602      	mov	r2, r0
 8002e62:	460b      	mov	r3, r1
 8002e64:	4640      	mov	r0, r8
 8002e66:	4649      	mov	r1, r9
 8002e68:	f7fd fb72 	bl	8000550 <__aeabi_dmul>
 8002e6c:	4602      	mov	r2, r0
 8002e6e:	460b      	mov	r3, r1
 8002e70:	4690      	mov	r8, r2
 8002e72:	4699      	mov	r9, r3
 8002e74:	4b94      	ldr	r3, [pc, #592]	; (80030c8 <kalman+0x378>)
 8002e76:	681b      	ldr	r3, [r3, #0]
 8002e78:	4618      	mov	r0, r3
 8002e7a:	f7fd fb11 	bl	80004a0 <__aeabi_f2d>
 8002e7e:	4602      	mov	r2, r0
 8002e80:	460b      	mov	r3, r1
 8002e82:	4640      	mov	r0, r8
 8002e84:	4649      	mov	r1, r9
 8002e86:	f7fd fc8d 	bl	80007a4 <__aeabi_ddiv>
 8002e8a:	4602      	mov	r2, r0
 8002e8c:	460b      	mov	r3, r1
 8002e8e:	4620      	mov	r0, r4
 8002e90:	4629      	mov	r1, r5
 8002e92:	f7fd f9a7 	bl	80001e4 <__adddf3>
 8002e96:	4602      	mov	r2, r0
 8002e98:	460b      	mov	r3, r1
 8002e9a:	4610      	mov	r0, r2
 8002e9c:	4619      	mov	r1, r3
 8002e9e:	f7fd fe07 	bl	8000ab0 <__aeabi_d2f>
 8002ea2:	4603      	mov	r3, r0
 8002ea4:	4a92      	ldr	r2, [pc, #584]	; (80030f0 <kalman+0x3a0>)
 8002ea6:	6013      	str	r3, [r2, #0]
	P12predict = (float) P12predictPRE+delt*P22predictPRE+(pow(Gl,2)*delt*pow(delt,2))/2;
 8002ea8:	4b87      	ldr	r3, [pc, #540]	; (80030c8 <kalman+0x378>)
 8002eaa:	ed93 7a00 	vldr	s14, [r3]
 8002eae:	4b8e      	ldr	r3, [pc, #568]	; (80030e8 <kalman+0x398>)
 8002eb0:	edd3 7a00 	vldr	s15, [r3]
 8002eb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002eb8:	4b8c      	ldr	r3, [pc, #560]	; (80030ec <kalman+0x39c>)
 8002eba:	edd3 7a00 	vldr	s15, [r3]
 8002ebe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002ec2:	ee17 0a90 	vmov	r0, s15
 8002ec6:	f7fd faeb 	bl	80004a0 <__aeabi_f2d>
 8002eca:	4604      	mov	r4, r0
 8002ecc:	460d      	mov	r5, r1
 8002ece:	4b84      	ldr	r3, [pc, #528]	; (80030e0 <kalman+0x390>)
 8002ed0:	681b      	ldr	r3, [r3, #0]
 8002ed2:	4618      	mov	r0, r3
 8002ed4:	f7fd fae4 	bl	80004a0 <__aeabi_f2d>
 8002ed8:	4602      	mov	r2, r0
 8002eda:	460b      	mov	r3, r1
 8002edc:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80030b0 <kalman+0x360>
 8002ee0:	ec43 2b10 	vmov	d0, r2, r3
 8002ee4:	f006 f9b6 	bl	8009254 <pow>
 8002ee8:	ec59 8b10 	vmov	r8, r9, d0
 8002eec:	4b76      	ldr	r3, [pc, #472]	; (80030c8 <kalman+0x378>)
 8002eee:	681b      	ldr	r3, [r3, #0]
 8002ef0:	4618      	mov	r0, r3
 8002ef2:	f7fd fad5 	bl	80004a0 <__aeabi_f2d>
 8002ef6:	4602      	mov	r2, r0
 8002ef8:	460b      	mov	r3, r1
 8002efa:	4640      	mov	r0, r8
 8002efc:	4649      	mov	r1, r9
 8002efe:	f7fd fb27 	bl	8000550 <__aeabi_dmul>
 8002f02:	4602      	mov	r2, r0
 8002f04:	460b      	mov	r3, r1
 8002f06:	4690      	mov	r8, r2
 8002f08:	4699      	mov	r9, r3
 8002f0a:	4b6f      	ldr	r3, [pc, #444]	; (80030c8 <kalman+0x378>)
 8002f0c:	681b      	ldr	r3, [r3, #0]
 8002f0e:	4618      	mov	r0, r3
 8002f10:	f7fd fac6 	bl	80004a0 <__aeabi_f2d>
 8002f14:	4602      	mov	r2, r0
 8002f16:	460b      	mov	r3, r1
 8002f18:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80030b0 <kalman+0x360>
 8002f1c:	ec43 2b10 	vmov	d0, r2, r3
 8002f20:	f006 f998 	bl	8009254 <pow>
 8002f24:	ec53 2b10 	vmov	r2, r3, d0
 8002f28:	4640      	mov	r0, r8
 8002f2a:	4649      	mov	r1, r9
 8002f2c:	f7fd fb10 	bl	8000550 <__aeabi_dmul>
 8002f30:	4602      	mov	r2, r0
 8002f32:	460b      	mov	r3, r1
 8002f34:	4610      	mov	r0, r2
 8002f36:	4619      	mov	r1, r3
 8002f38:	f04f 0200 	mov.w	r2, #0
 8002f3c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002f40:	f7fd fc30 	bl	80007a4 <__aeabi_ddiv>
 8002f44:	4602      	mov	r2, r0
 8002f46:	460b      	mov	r3, r1
 8002f48:	4620      	mov	r0, r4
 8002f4a:	4629      	mov	r1, r5
 8002f4c:	f7fd f94a 	bl	80001e4 <__adddf3>
 8002f50:	4602      	mov	r2, r0
 8002f52:	460b      	mov	r3, r1
 8002f54:	4610      	mov	r0, r2
 8002f56:	4619      	mov	r1, r3
 8002f58:	f7fd fdaa 	bl	8000ab0 <__aeabi_d2f>
 8002f5c:	4603      	mov	r3, r0
 8002f5e:	4a65      	ldr	r2, [pc, #404]	; (80030f4 <kalman+0x3a4>)
 8002f60:	6013      	str	r3, [r2, #0]
	P21predict = (float) (2*delt*P21predictPRE+pow(Gl,2)*pow(delt,4)+2*P22predictPRE*pow(delt,2))/(2*delt);
 8002f62:	4b59      	ldr	r3, [pc, #356]	; (80030c8 <kalman+0x378>)
 8002f64:	edd3 7a00 	vldr	s15, [r3]
 8002f68:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8002f6c:	4b5a      	ldr	r3, [pc, #360]	; (80030d8 <kalman+0x388>)
 8002f6e:	edd3 7a00 	vldr	s15, [r3]
 8002f72:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002f76:	ee17 0a90 	vmov	r0, s15
 8002f7a:	f7fd fa91 	bl	80004a0 <__aeabi_f2d>
 8002f7e:	4604      	mov	r4, r0
 8002f80:	460d      	mov	r5, r1
 8002f82:	4b57      	ldr	r3, [pc, #348]	; (80030e0 <kalman+0x390>)
 8002f84:	681b      	ldr	r3, [r3, #0]
 8002f86:	4618      	mov	r0, r3
 8002f88:	f7fd fa8a 	bl	80004a0 <__aeabi_f2d>
 8002f8c:	4602      	mov	r2, r0
 8002f8e:	460b      	mov	r3, r1
 8002f90:	ed9f 1b47 	vldr	d1, [pc, #284]	; 80030b0 <kalman+0x360>
 8002f94:	ec43 2b10 	vmov	d0, r2, r3
 8002f98:	f006 f95c 	bl	8009254 <pow>
 8002f9c:	ec59 8b10 	vmov	r8, r9, d0
 8002fa0:	4b49      	ldr	r3, [pc, #292]	; (80030c8 <kalman+0x378>)
 8002fa2:	681b      	ldr	r3, [r3, #0]
 8002fa4:	4618      	mov	r0, r3
 8002fa6:	f7fd fa7b 	bl	80004a0 <__aeabi_f2d>
 8002faa:	4602      	mov	r2, r0
 8002fac:	460b      	mov	r3, r1
 8002fae:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80030b8 <kalman+0x368>
 8002fb2:	ec43 2b10 	vmov	d0, r2, r3
 8002fb6:	f006 f94d 	bl	8009254 <pow>
 8002fba:	ec53 2b10 	vmov	r2, r3, d0
 8002fbe:	4640      	mov	r0, r8
 8002fc0:	4649      	mov	r1, r9
 8002fc2:	f7fd fac5 	bl	8000550 <__aeabi_dmul>
 8002fc6:	4602      	mov	r2, r0
 8002fc8:	460b      	mov	r3, r1
 8002fca:	4620      	mov	r0, r4
 8002fcc:	4629      	mov	r1, r5
 8002fce:	f7fd f909 	bl	80001e4 <__adddf3>
 8002fd2:	4602      	mov	r2, r0
 8002fd4:	460b      	mov	r3, r1
 8002fd6:	4690      	mov	r8, r2
 8002fd8:	4699      	mov	r9, r3
 8002fda:	4b43      	ldr	r3, [pc, #268]	; (80030e8 <kalman+0x398>)
 8002fdc:	edd3 7a00 	vldr	s15, [r3]
 8002fe0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8002fe4:	ee17 0a90 	vmov	r0, s15
 8002fe8:	f7fd fa5a 	bl	80004a0 <__aeabi_f2d>
 8002fec:	4604      	mov	r4, r0
 8002fee:	460d      	mov	r5, r1
 8002ff0:	4b35      	ldr	r3, [pc, #212]	; (80030c8 <kalman+0x378>)
 8002ff2:	681b      	ldr	r3, [r3, #0]
 8002ff4:	4618      	mov	r0, r3
 8002ff6:	f7fd fa53 	bl	80004a0 <__aeabi_f2d>
 8002ffa:	4602      	mov	r2, r0
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80030b0 <kalman+0x360>
 8003002:	ec43 2b10 	vmov	d0, r2, r3
 8003006:	f006 f925 	bl	8009254 <pow>
 800300a:	ec53 2b10 	vmov	r2, r3, d0
 800300e:	4620      	mov	r0, r4
 8003010:	4629      	mov	r1, r5
 8003012:	f7fd fa9d 	bl	8000550 <__aeabi_dmul>
 8003016:	4602      	mov	r2, r0
 8003018:	460b      	mov	r3, r1
 800301a:	4640      	mov	r0, r8
 800301c:	4649      	mov	r1, r9
 800301e:	f7fd f8e1 	bl	80001e4 <__adddf3>
 8003022:	4602      	mov	r2, r0
 8003024:	460b      	mov	r3, r1
 8003026:	4610      	mov	r0, r2
 8003028:	4619      	mov	r1, r3
 800302a:	f7fd fd41 	bl	8000ab0 <__aeabi_d2f>
 800302e:	ee06 0a90 	vmov	s13, r0
 8003032:	4b25      	ldr	r3, [pc, #148]	; (80030c8 <kalman+0x378>)
 8003034:	edd3 7a00 	vldr	s15, [r3]
 8003038:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800303c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8003040:	4b2d      	ldr	r3, [pc, #180]	; (80030f8 <kalman+0x3a8>)
 8003042:	edc3 7a00 	vstr	s15, [r3]
	P22predict = (float) pow(Gl,2)*pow(delt,2) +P22predictPRE;
 8003046:	4b26      	ldr	r3, [pc, #152]	; (80030e0 <kalman+0x390>)
 8003048:	681b      	ldr	r3, [r3, #0]
 800304a:	4618      	mov	r0, r3
 800304c:	f7fd fa28 	bl	80004a0 <__aeabi_f2d>
 8003050:	4602      	mov	r2, r0
 8003052:	460b      	mov	r3, r1
 8003054:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80030b0 <kalman+0x360>
 8003058:	ec43 2b10 	vmov	d0, r2, r3
 800305c:	f006 f8fa 	bl	8009254 <pow>
 8003060:	ec53 2b10 	vmov	r2, r3, d0
 8003064:	4610      	mov	r0, r2
 8003066:	4619      	mov	r1, r3
 8003068:	f7fd fd22 	bl	8000ab0 <__aeabi_d2f>
 800306c:	4603      	mov	r3, r0
 800306e:	4618      	mov	r0, r3
 8003070:	f7fd fa16 	bl	80004a0 <__aeabi_f2d>
 8003074:	4604      	mov	r4, r0
 8003076:	460d      	mov	r5, r1
 8003078:	4b13      	ldr	r3, [pc, #76]	; (80030c8 <kalman+0x378>)
 800307a:	681b      	ldr	r3, [r3, #0]
 800307c:	4618      	mov	r0, r3
 800307e:	f7fd fa0f 	bl	80004a0 <__aeabi_f2d>
 8003082:	4602      	mov	r2, r0
 8003084:	460b      	mov	r3, r1
 8003086:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80030b0 <kalman+0x360>
 800308a:	ec43 2b10 	vmov	d0, r2, r3
 800308e:	f006 f8e1 	bl	8009254 <pow>
 8003092:	ec53 2b10 	vmov	r2, r3, d0
 8003096:	4620      	mov	r0, r4
 8003098:	4629      	mov	r1, r5
 800309a:	f7fd fa59 	bl	8000550 <__aeabi_dmul>
 800309e:	4602      	mov	r2, r0
 80030a0:	460b      	mov	r3, r1
 80030a2:	4614      	mov	r4, r2
 80030a4:	461d      	mov	r5, r3
 80030a6:	4b10      	ldr	r3, [pc, #64]	; (80030e8 <kalman+0x398>)
 80030a8:	681b      	ldr	r3, [r3, #0]
 80030aa:	4618      	mov	r0, r3
 80030ac:	e026      	b.n	80030fc <kalman+0x3ac>
 80030ae:	bf00      	nop
 80030b0:	00000000 	.word	0x00000000
 80030b4:	40000000 	.word	0x40000000
 80030b8:	00000000 	.word	0x00000000
 80030bc:	40100000 	.word	0x40100000
 80030c0:	2000000c 	.word	0x2000000c
 80030c4:	49742400 	.word	0x49742400
 80030c8:	20000790 	.word	0x20000790
 80030cc:	20000794 	.word	0x20000794
 80030d0:	20000798 	.word	0x20000798
 80030d4:	2000079c 	.word	0x2000079c
 80030d8:	200007a0 	.word	0x200007a0
 80030dc:	200007a4 	.word	0x200007a4
 80030e0:	2000002c 	.word	0x2000002c
 80030e4:	40100000 	.word	0x40100000
 80030e8:	200007a8 	.word	0x200007a8
 80030ec:	200007ac 	.word	0x200007ac
 80030f0:	200007b0 	.word	0x200007b0
 80030f4:	200007b4 	.word	0x200007b4
 80030f8:	200007b8 	.word	0x200007b8
 80030fc:	f7fd f9d0 	bl	80004a0 <__aeabi_f2d>
 8003100:	4602      	mov	r2, r0
 8003102:	460b      	mov	r3, r1
 8003104:	4620      	mov	r0, r4
 8003106:	4629      	mov	r1, r5
 8003108:	f7fd f86c 	bl	80001e4 <__adddf3>
 800310c:	4602      	mov	r2, r0
 800310e:	460b      	mov	r3, r1
 8003110:	4610      	mov	r0, r2
 8003112:	4619      	mov	r1, r3
 8003114:	f7fd fccc 	bl	8000ab0 <__aeabi_d2f>
 8003118:	4603      	mov	r3, r0
 800311a:	4acb      	ldr	r2, [pc, #812]	; (8003448 <kalman+0x6f8>)
 800311c:	6013      	str	r3, [r2, #0]

	omega = (float) omegaPredict + (P22predict*errorVel)/(pow(R,2)+P22predict);
 800311e:	4bcb      	ldr	r3, [pc, #812]	; (800344c <kalman+0x6fc>)
 8003120:	681b      	ldr	r3, [r3, #0]
 8003122:	4618      	mov	r0, r3
 8003124:	f7fd f9bc 	bl	80004a0 <__aeabi_f2d>
 8003128:	4604      	mov	r4, r0
 800312a:	460d      	mov	r5, r1
 800312c:	4bc6      	ldr	r3, [pc, #792]	; (8003448 <kalman+0x6f8>)
 800312e:	ed93 7a00 	vldr	s14, [r3]
 8003132:	4bc7      	ldr	r3, [pc, #796]	; (8003450 <kalman+0x700>)
 8003134:	edd3 7a00 	vldr	s15, [r3]
 8003138:	ee67 7a27 	vmul.f32	s15, s14, s15
 800313c:	ee17 0a90 	vmov	r0, s15
 8003140:	f7fd f9ae 	bl	80004a0 <__aeabi_f2d>
 8003144:	4680      	mov	r8, r0
 8003146:	4689      	mov	r9, r1
 8003148:	4bc2      	ldr	r3, [pc, #776]	; (8003454 <kalman+0x704>)
 800314a:	681b      	ldr	r3, [r3, #0]
 800314c:	4618      	mov	r0, r3
 800314e:	f7fd f9a7 	bl	80004a0 <__aeabi_f2d>
 8003152:	4602      	mov	r2, r0
 8003154:	460b      	mov	r3, r1
 8003156:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 8003438 <kalman+0x6e8>
 800315a:	ec43 2b10 	vmov	d0, r2, r3
 800315e:	f006 f879 	bl	8009254 <pow>
 8003162:	ec5b ab10 	vmov	sl, fp, d0
 8003166:	4bb8      	ldr	r3, [pc, #736]	; (8003448 <kalman+0x6f8>)
 8003168:	681b      	ldr	r3, [r3, #0]
 800316a:	4618      	mov	r0, r3
 800316c:	f7fd f998 	bl	80004a0 <__aeabi_f2d>
 8003170:	4602      	mov	r2, r0
 8003172:	460b      	mov	r3, r1
 8003174:	4650      	mov	r0, sl
 8003176:	4659      	mov	r1, fp
 8003178:	f7fd f834 	bl	80001e4 <__adddf3>
 800317c:	4602      	mov	r2, r0
 800317e:	460b      	mov	r3, r1
 8003180:	4640      	mov	r0, r8
 8003182:	4649      	mov	r1, r9
 8003184:	f7fd fb0e 	bl	80007a4 <__aeabi_ddiv>
 8003188:	4602      	mov	r2, r0
 800318a:	460b      	mov	r3, r1
 800318c:	4620      	mov	r0, r4
 800318e:	4629      	mov	r1, r5
 8003190:	f7fd f828 	bl	80001e4 <__adddf3>
 8003194:	4602      	mov	r2, r0
 8003196:	460b      	mov	r3, r1
 8003198:	4610      	mov	r0, r2
 800319a:	4619      	mov	r1, r3
 800319c:	f7fd fc88 	bl	8000ab0 <__aeabi_d2f>
 80031a0:	4603      	mov	r3, r0
 80031a2:	4aad      	ldr	r2, [pc, #692]	; (8003458 <kalman+0x708>)
 80031a4:	6013      	str	r3, [r2, #0]
	P11predictPRE = (float) P11predict - (P12predict*P21predict)/(pow(R,2)+P22predict);
 80031a6:	4bad      	ldr	r3, [pc, #692]	; (800345c <kalman+0x70c>)
 80031a8:	681b      	ldr	r3, [r3, #0]
 80031aa:	4618      	mov	r0, r3
 80031ac:	f7fd f978 	bl	80004a0 <__aeabi_f2d>
 80031b0:	4604      	mov	r4, r0
 80031b2:	460d      	mov	r5, r1
 80031b4:	4baa      	ldr	r3, [pc, #680]	; (8003460 <kalman+0x710>)
 80031b6:	ed93 7a00 	vldr	s14, [r3]
 80031ba:	4baa      	ldr	r3, [pc, #680]	; (8003464 <kalman+0x714>)
 80031bc:	edd3 7a00 	vldr	s15, [r3]
 80031c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80031c4:	ee17 0a90 	vmov	r0, s15
 80031c8:	f7fd f96a 	bl	80004a0 <__aeabi_f2d>
 80031cc:	4680      	mov	r8, r0
 80031ce:	4689      	mov	r9, r1
 80031d0:	4ba0      	ldr	r3, [pc, #640]	; (8003454 <kalman+0x704>)
 80031d2:	681b      	ldr	r3, [r3, #0]
 80031d4:	4618      	mov	r0, r3
 80031d6:	f7fd f963 	bl	80004a0 <__aeabi_f2d>
 80031da:	4602      	mov	r2, r0
 80031dc:	460b      	mov	r3, r1
 80031de:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8003438 <kalman+0x6e8>
 80031e2:	ec43 2b10 	vmov	d0, r2, r3
 80031e6:	f006 f835 	bl	8009254 <pow>
 80031ea:	ec5b ab10 	vmov	sl, fp, d0
 80031ee:	4b96      	ldr	r3, [pc, #600]	; (8003448 <kalman+0x6f8>)
 80031f0:	681b      	ldr	r3, [r3, #0]
 80031f2:	4618      	mov	r0, r3
 80031f4:	f7fd f954 	bl	80004a0 <__aeabi_f2d>
 80031f8:	4602      	mov	r2, r0
 80031fa:	460b      	mov	r3, r1
 80031fc:	4650      	mov	r0, sl
 80031fe:	4659      	mov	r1, fp
 8003200:	f7fc fff0 	bl	80001e4 <__adddf3>
 8003204:	4602      	mov	r2, r0
 8003206:	460b      	mov	r3, r1
 8003208:	4640      	mov	r0, r8
 800320a:	4649      	mov	r1, r9
 800320c:	f7fd faca 	bl	80007a4 <__aeabi_ddiv>
 8003210:	4602      	mov	r2, r0
 8003212:	460b      	mov	r3, r1
 8003214:	4620      	mov	r0, r4
 8003216:	4629      	mov	r1, r5
 8003218:	f7fc ffe2 	bl	80001e0 <__aeabi_dsub>
 800321c:	4602      	mov	r2, r0
 800321e:	460b      	mov	r3, r1
 8003220:	4610      	mov	r0, r2
 8003222:	4619      	mov	r1, r3
 8003224:	f7fd fc44 	bl	8000ab0 <__aeabi_d2f>
 8003228:	4603      	mov	r3, r0
 800322a:	4a8f      	ldr	r2, [pc, #572]	; (8003468 <kalman+0x718>)
 800322c:	6013      	str	r3, [r2, #0]
	P12predictPRE = (float) P12predict - (P12predict*P22predict)/(pow(R,2)+P22predict);
 800322e:	4b8c      	ldr	r3, [pc, #560]	; (8003460 <kalman+0x710>)
 8003230:	681b      	ldr	r3, [r3, #0]
 8003232:	4618      	mov	r0, r3
 8003234:	f7fd f934 	bl	80004a0 <__aeabi_f2d>
 8003238:	4604      	mov	r4, r0
 800323a:	460d      	mov	r5, r1
 800323c:	4b88      	ldr	r3, [pc, #544]	; (8003460 <kalman+0x710>)
 800323e:	ed93 7a00 	vldr	s14, [r3]
 8003242:	4b81      	ldr	r3, [pc, #516]	; (8003448 <kalman+0x6f8>)
 8003244:	edd3 7a00 	vldr	s15, [r3]
 8003248:	ee67 7a27 	vmul.f32	s15, s14, s15
 800324c:	ee17 0a90 	vmov	r0, s15
 8003250:	f7fd f926 	bl	80004a0 <__aeabi_f2d>
 8003254:	4680      	mov	r8, r0
 8003256:	4689      	mov	r9, r1
 8003258:	4b7e      	ldr	r3, [pc, #504]	; (8003454 <kalman+0x704>)
 800325a:	681b      	ldr	r3, [r3, #0]
 800325c:	4618      	mov	r0, r3
 800325e:	f7fd f91f 	bl	80004a0 <__aeabi_f2d>
 8003262:	4602      	mov	r2, r0
 8003264:	460b      	mov	r3, r1
 8003266:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8003438 <kalman+0x6e8>
 800326a:	ec43 2b10 	vmov	d0, r2, r3
 800326e:	f005 fff1 	bl	8009254 <pow>
 8003272:	ec5b ab10 	vmov	sl, fp, d0
 8003276:	4b74      	ldr	r3, [pc, #464]	; (8003448 <kalman+0x6f8>)
 8003278:	681b      	ldr	r3, [r3, #0]
 800327a:	4618      	mov	r0, r3
 800327c:	f7fd f910 	bl	80004a0 <__aeabi_f2d>
 8003280:	4602      	mov	r2, r0
 8003282:	460b      	mov	r3, r1
 8003284:	4650      	mov	r0, sl
 8003286:	4659      	mov	r1, fp
 8003288:	f7fc ffac 	bl	80001e4 <__adddf3>
 800328c:	4602      	mov	r2, r0
 800328e:	460b      	mov	r3, r1
 8003290:	4640      	mov	r0, r8
 8003292:	4649      	mov	r1, r9
 8003294:	f7fd fa86 	bl	80007a4 <__aeabi_ddiv>
 8003298:	4602      	mov	r2, r0
 800329a:	460b      	mov	r3, r1
 800329c:	4620      	mov	r0, r4
 800329e:	4629      	mov	r1, r5
 80032a0:	f7fc ff9e 	bl	80001e0 <__aeabi_dsub>
 80032a4:	4602      	mov	r2, r0
 80032a6:	460b      	mov	r3, r1
 80032a8:	4610      	mov	r0, r2
 80032aa:	4619      	mov	r1, r3
 80032ac:	f7fd fc00 	bl	8000ab0 <__aeabi_d2f>
 80032b0:	4603      	mov	r3, r0
 80032b2:	4a6e      	ldr	r2, [pc, #440]	; (800346c <kalman+0x71c>)
 80032b4:	6013      	str	r3, [r2, #0]
	P21predictPRE = (float) P21predict*(P22predict/(pow(R,2)+P22predict)-1);
 80032b6:	4b6b      	ldr	r3, [pc, #428]	; (8003464 <kalman+0x714>)
 80032b8:	681b      	ldr	r3, [r3, #0]
 80032ba:	4618      	mov	r0, r3
 80032bc:	f7fd f8f0 	bl	80004a0 <__aeabi_f2d>
 80032c0:	4604      	mov	r4, r0
 80032c2:	460d      	mov	r5, r1
 80032c4:	4b60      	ldr	r3, [pc, #384]	; (8003448 <kalman+0x6f8>)
 80032c6:	681b      	ldr	r3, [r3, #0]
 80032c8:	4618      	mov	r0, r3
 80032ca:	f7fd f8e9 	bl	80004a0 <__aeabi_f2d>
 80032ce:	4680      	mov	r8, r0
 80032d0:	4689      	mov	r9, r1
 80032d2:	4b60      	ldr	r3, [pc, #384]	; (8003454 <kalman+0x704>)
 80032d4:	681b      	ldr	r3, [r3, #0]
 80032d6:	4618      	mov	r0, r3
 80032d8:	f7fd f8e2 	bl	80004a0 <__aeabi_f2d>
 80032dc:	4602      	mov	r2, r0
 80032de:	460b      	mov	r3, r1
 80032e0:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8003438 <kalman+0x6e8>
 80032e4:	ec43 2b10 	vmov	d0, r2, r3
 80032e8:	f005 ffb4 	bl	8009254 <pow>
 80032ec:	ec5b ab10 	vmov	sl, fp, d0
 80032f0:	4b55      	ldr	r3, [pc, #340]	; (8003448 <kalman+0x6f8>)
 80032f2:	681b      	ldr	r3, [r3, #0]
 80032f4:	4618      	mov	r0, r3
 80032f6:	f7fd f8d3 	bl	80004a0 <__aeabi_f2d>
 80032fa:	4602      	mov	r2, r0
 80032fc:	460b      	mov	r3, r1
 80032fe:	4650      	mov	r0, sl
 8003300:	4659      	mov	r1, fp
 8003302:	f7fc ff6f 	bl	80001e4 <__adddf3>
 8003306:	4602      	mov	r2, r0
 8003308:	460b      	mov	r3, r1
 800330a:	4640      	mov	r0, r8
 800330c:	4649      	mov	r1, r9
 800330e:	f7fd fa49 	bl	80007a4 <__aeabi_ddiv>
 8003312:	4602      	mov	r2, r0
 8003314:	460b      	mov	r3, r1
 8003316:	4610      	mov	r0, r2
 8003318:	4619      	mov	r1, r3
 800331a:	f04f 0200 	mov.w	r2, #0
 800331e:	4b54      	ldr	r3, [pc, #336]	; (8003470 <kalman+0x720>)
 8003320:	f7fc ff5e 	bl	80001e0 <__aeabi_dsub>
 8003324:	4602      	mov	r2, r0
 8003326:	460b      	mov	r3, r1
 8003328:	4620      	mov	r0, r4
 800332a:	4629      	mov	r1, r5
 800332c:	f7fd f910 	bl	8000550 <__aeabi_dmul>
 8003330:	4602      	mov	r2, r0
 8003332:	460b      	mov	r3, r1
 8003334:	4610      	mov	r0, r2
 8003336:	4619      	mov	r1, r3
 8003338:	f7fd fbba 	bl	8000ab0 <__aeabi_d2f>
 800333c:	4603      	mov	r3, r0
 800333e:	4a4d      	ldr	r2, [pc, #308]	; (8003474 <kalman+0x724>)
 8003340:	6013      	str	r3, [r2, #0]
	P22predictPRE = (float) P22predict*(P22predict/(pow(R,2)+P22predict)-1);
 8003342:	4b41      	ldr	r3, [pc, #260]	; (8003448 <kalman+0x6f8>)
 8003344:	681b      	ldr	r3, [r3, #0]
 8003346:	4618      	mov	r0, r3
 8003348:	f7fd f8aa 	bl	80004a0 <__aeabi_f2d>
 800334c:	4604      	mov	r4, r0
 800334e:	460d      	mov	r5, r1
 8003350:	4b3d      	ldr	r3, [pc, #244]	; (8003448 <kalman+0x6f8>)
 8003352:	681b      	ldr	r3, [r3, #0]
 8003354:	4618      	mov	r0, r3
 8003356:	f7fd f8a3 	bl	80004a0 <__aeabi_f2d>
 800335a:	4680      	mov	r8, r0
 800335c:	4689      	mov	r9, r1
 800335e:	4b3d      	ldr	r3, [pc, #244]	; (8003454 <kalman+0x704>)
 8003360:	681b      	ldr	r3, [r3, #0]
 8003362:	4618      	mov	r0, r3
 8003364:	f7fd f89c 	bl	80004a0 <__aeabi_f2d>
 8003368:	4602      	mov	r2, r0
 800336a:	460b      	mov	r3, r1
 800336c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8003438 <kalman+0x6e8>
 8003370:	ec43 2b10 	vmov	d0, r2, r3
 8003374:	f005 ff6e 	bl	8009254 <pow>
 8003378:	ec5b ab10 	vmov	sl, fp, d0
 800337c:	4b32      	ldr	r3, [pc, #200]	; (8003448 <kalman+0x6f8>)
 800337e:	681b      	ldr	r3, [r3, #0]
 8003380:	4618      	mov	r0, r3
 8003382:	f7fd f88d 	bl	80004a0 <__aeabi_f2d>
 8003386:	4602      	mov	r2, r0
 8003388:	460b      	mov	r3, r1
 800338a:	4650      	mov	r0, sl
 800338c:	4659      	mov	r1, fp
 800338e:	f7fc ff29 	bl	80001e4 <__adddf3>
 8003392:	4602      	mov	r2, r0
 8003394:	460b      	mov	r3, r1
 8003396:	4640      	mov	r0, r8
 8003398:	4649      	mov	r1, r9
 800339a:	f7fd fa03 	bl	80007a4 <__aeabi_ddiv>
 800339e:	4602      	mov	r2, r0
 80033a0:	460b      	mov	r3, r1
 80033a2:	4610      	mov	r0, r2
 80033a4:	4619      	mov	r1, r3
 80033a6:	f04f 0200 	mov.w	r2, #0
 80033aa:	4b31      	ldr	r3, [pc, #196]	; (8003470 <kalman+0x720>)
 80033ac:	f7fc ff18 	bl	80001e0 <__aeabi_dsub>
 80033b0:	4602      	mov	r2, r0
 80033b2:	460b      	mov	r3, r1
 80033b4:	4620      	mov	r0, r4
 80033b6:	4629      	mov	r1, r5
 80033b8:	f7fd f8ca 	bl	8000550 <__aeabi_dmul>
 80033bc:	4602      	mov	r2, r0
 80033be:	460b      	mov	r3, r1
 80033c0:	4610      	mov	r0, r2
 80033c2:	4619      	mov	r1, r3
 80033c4:	f7fd fb74 	bl	8000ab0 <__aeabi_d2f>
 80033c8:	4603      	mov	r3, r0
 80033ca:	4a2b      	ldr	r2, [pc, #172]	; (8003478 <kalman+0x728>)
 80033cc:	6013      	str	r3, [r2, #0]
	omegaPredictPre = omega;
 80033ce:	4b22      	ldr	r3, [pc, #136]	; (8003458 <kalman+0x708>)
 80033d0:	681b      	ldr	r3, [r3, #0]
 80033d2:	4a2a      	ldr	r2, [pc, #168]	; (800347c <kalman+0x72c>)
 80033d4:	6013      	str	r3, [r2, #0]
	EncoderVel = omega/0.10472;
 80033d6:	4b20      	ldr	r3, [pc, #128]	; (8003458 <kalman+0x708>)
 80033d8:	681b      	ldr	r3, [r3, #0]
 80033da:	4618      	mov	r0, r3
 80033dc:	f7fd f860 	bl	80004a0 <__aeabi_f2d>
 80033e0:	a317      	add	r3, pc, #92	; (adr r3, 8003440 <kalman+0x6f0>)
 80033e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80033e6:	f7fd f9dd 	bl	80007a4 <__aeabi_ddiv>
 80033ea:	4602      	mov	r2, r0
 80033ec:	460b      	mov	r3, r1
 80033ee:	4610      	mov	r0, r2
 80033f0:	4619      	mov	r1, r3
 80033f2:	f7fd fb5d 	bl	8000ab0 <__aeabi_d2f>
 80033f6:	4603      	mov	r3, r0
 80033f8:	4a21      	ldr	r2, [pc, #132]	; (8003480 <kalman+0x730>)
 80033fa:	6013      	str	r3, [r2, #0]
	if (velocity == 0){
 80033fc:	4b21      	ldr	r3, [pc, #132]	; (8003484 <kalman+0x734>)
 80033fe:	edd3 7a00 	vldr	s15, [r3]
 8003402:	eef5 7a40 	vcmp.f32	s15, #0.0
 8003406:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800340a:	d155      	bne.n	80034b8 <kalman+0x768>
		P11predict = 0;
 800340c:	4b13      	ldr	r3, [pc, #76]	; (800345c <kalman+0x70c>)
 800340e:	f04f 0200 	mov.w	r2, #0
 8003412:	601a      	str	r2, [r3, #0]
		P12predict = 0;
 8003414:	4b12      	ldr	r3, [pc, #72]	; (8003460 <kalman+0x710>)
 8003416:	f04f 0200 	mov.w	r2, #0
 800341a:	601a      	str	r2, [r3, #0]
		P21predict = 0;
 800341c:	4b11      	ldr	r3, [pc, #68]	; (8003464 <kalman+0x714>)
 800341e:	f04f 0200 	mov.w	r2, #0
 8003422:	601a      	str	r2, [r3, #0]
		P22predict = 0;
 8003424:	4b08      	ldr	r3, [pc, #32]	; (8003448 <kalman+0x6f8>)
 8003426:	f04f 0200 	mov.w	r2, #0
 800342a:	601a      	str	r2, [r3, #0]
		P11predictPRE = 0;
 800342c:	4b0e      	ldr	r3, [pc, #56]	; (8003468 <kalman+0x718>)
 800342e:	f04f 0200 	mov.w	r2, #0
 8003432:	601a      	str	r2, [r3, #0]
 8003434:	e028      	b.n	8003488 <kalman+0x738>
 8003436:	bf00      	nop
 8003438:	00000000 	.word	0x00000000
 800343c:	40000000 	.word	0x40000000
 8003440:	0f3cb3e5 	.word	0x0f3cb3e5
 8003444:	3fbaceee 	.word	0x3fbaceee
 8003448:	200007bc 	.word	0x200007bc
 800344c:	20000798 	.word	0x20000798
 8003450:	2000079c 	.word	0x2000079c
 8003454:	20000028 	.word	0x20000028
 8003458:	200007c0 	.word	0x200007c0
 800345c:	200007b0 	.word	0x200007b0
 8003460:	200007b4 	.word	0x200007b4
 8003464:	200007b8 	.word	0x200007b8
 8003468:	200007a4 	.word	0x200007a4
 800346c:	200007ac 	.word	0x200007ac
 8003470:	3ff00000 	.word	0x3ff00000
 8003474:	200007a0 	.word	0x200007a0
 8003478:	200007a8 	.word	0x200007a8
 800347c:	20000794 	.word	0x20000794
 8003480:	20000704 	.word	0x20000704
 8003484:	2000070c 	.word	0x2000070c
		P12predictPRE = 0;
 8003488:	4b0d      	ldr	r3, [pc, #52]	; (80034c0 <kalman+0x770>)
 800348a:	f04f 0200 	mov.w	r2, #0
 800348e:	601a      	str	r2, [r3, #0]
		P21predictPRE = 0;
 8003490:	4b0c      	ldr	r3, [pc, #48]	; (80034c4 <kalman+0x774>)
 8003492:	f04f 0200 	mov.w	r2, #0
 8003496:	601a      	str	r2, [r3, #0]
		P22predictPRE = 0;
 8003498:	4b0b      	ldr	r3, [pc, #44]	; (80034c8 <kalman+0x778>)
 800349a:	f04f 0200 	mov.w	r2, #0
 800349e:	601a      	str	r2, [r3, #0]
		omegaPredict = 0;
 80034a0:	4b0a      	ldr	r3, [pc, #40]	; (80034cc <kalman+0x77c>)
 80034a2:	f04f 0200 	mov.w	r2, #0
 80034a6:	601a      	str	r2, [r3, #0]
		omegaPredictPre = 0;
 80034a8:	4b09      	ldr	r3, [pc, #36]	; (80034d0 <kalman+0x780>)
 80034aa:	f04f 0200 	mov.w	r2, #0
 80034ae:	601a      	str	r2, [r3, #0]
		errorVel = 0;
 80034b0:	4b08      	ldr	r3, [pc, #32]	; (80034d4 <kalman+0x784>)
 80034b2:	f04f 0200 	mov.w	r2, #0
 80034b6:	601a      	str	r2, [r3, #0]
	}
}
 80034b8:	bf00      	nop
 80034ba:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80034be:	bf00      	nop
 80034c0:	200007ac 	.word	0x200007ac
 80034c4:	200007a0 	.word	0x200007a0
 80034c8:	200007a8 	.word	0x200007a8
 80034cc:	20000798 	.word	0x20000798
 80034d0:	20000794 	.word	0x20000794
 80034d4:	2000079c 	.word	0x2000079c

080034d8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80034d8:	b4b0      	push	{r4, r5, r7}
 80034da:	b083      	sub	sp, #12
 80034dc:	af00      	add	r7, sp, #0
 80034de:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	4a09      	ldr	r2, [pc, #36]	; (8003508 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80034e4:	4293      	cmp	r3, r2
 80034e6:	d109      	bne.n	80034fc <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80034e8:	4b08      	ldr	r3, [pc, #32]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80034ea:	e9d3 2300 	ldrd	r2, r3, [r3]
 80034ee:	f112 34ff 	adds.w	r4, r2, #4294967295
 80034f2:	f143 0500 	adc.w	r5, r3, #0
 80034f6:	4b05      	ldr	r3, [pc, #20]	; (800350c <HAL_TIM_PeriodElapsedCallback+0x34>)
 80034f8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80034fc:	bf00      	nop
 80034fe:	370c      	adds	r7, #12
 8003500:	46bd      	mov	sp, r7
 8003502:	bcb0      	pop	{r4, r5, r7}
 8003504:	4770      	bx	lr
 8003506:	bf00      	nop
 8003508:	200009b8 	.word	0x200009b8
 800350c:	200006f8 	.word	0x200006f8

08003510 <micros>:
uint64_t micros()
{
 8003510:	b4b0      	push	{r4, r5, r7}
 8003512:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8003514:	4b09      	ldr	r3, [pc, #36]	; (800353c <micros+0x2c>)
 8003516:	681b      	ldr	r3, [r3, #0]
 8003518:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800351a:	4618      	mov	r0, r3
 800351c:	f04f 0100 	mov.w	r1, #0
 8003520:	4b07      	ldr	r3, [pc, #28]	; (8003540 <micros+0x30>)
 8003522:	e9d3 2300 	ldrd	r2, r3, [r3]
 8003526:	1884      	adds	r4, r0, r2
 8003528:	eb41 0503 	adc.w	r5, r1, r3
 800352c:	4622      	mov	r2, r4
 800352e:	462b      	mov	r3, r5
}
 8003530:	4610      	mov	r0, r2
 8003532:	4619      	mov	r1, r3
 8003534:	46bd      	mov	sp, r7
 8003536:	bcb0      	pop	{r4, r5, r7}
 8003538:	4770      	bx	lr
 800353a:	bf00      	nop
 800353c:	200009b8 	.word	0x200009b8
 8003540:	200006f8 	.word	0x200006f8

08003544 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8003544:	b480      	push	{r7}
 8003546:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8003548:	b672      	cpsid	i
}
 800354a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 800354c:	e7fe      	b.n	800354c <Error_Handler+0x8>
	...

08003550 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8003550:	b580      	push	{r7, lr}
 8003552:	b082      	sub	sp, #8
 8003554:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003556:	2300      	movs	r3, #0
 8003558:	607b      	str	r3, [r7, #4]
 800355a:	4b10      	ldr	r3, [pc, #64]	; (800359c <HAL_MspInit+0x4c>)
 800355c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800355e:	4a0f      	ldr	r2, [pc, #60]	; (800359c <HAL_MspInit+0x4c>)
 8003560:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003564:	6453      	str	r3, [r2, #68]	; 0x44
 8003566:	4b0d      	ldr	r3, [pc, #52]	; (800359c <HAL_MspInit+0x4c>)
 8003568:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800356a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 800356e:	607b      	str	r3, [r7, #4]
 8003570:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8003572:	2300      	movs	r3, #0
 8003574:	603b      	str	r3, [r7, #0]
 8003576:	4b09      	ldr	r3, [pc, #36]	; (800359c <HAL_MspInit+0x4c>)
 8003578:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800357a:	4a08      	ldr	r2, [pc, #32]	; (800359c <HAL_MspInit+0x4c>)
 800357c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8003580:	6413      	str	r3, [r2, #64]	; 0x40
 8003582:	4b06      	ldr	r3, [pc, #24]	; (800359c <HAL_MspInit+0x4c>)
 8003584:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003586:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800358a:	603b      	str	r3, [r7, #0]
 800358c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 800358e:	2007      	movs	r0, #7
 8003590:	f000 fc84 	bl	8003e9c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8003594:	bf00      	nop
 8003596:	3708      	adds	r7, #8
 8003598:	46bd      	mov	sp, r7
 800359a:	bd80      	pop	{r7, pc}
 800359c:	40023800 	.word	0x40023800

080035a0 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 80035a0:	b580      	push	{r7, lr}
 80035a2:	b08a      	sub	sp, #40	; 0x28
 80035a4:	af00      	add	r7, sp, #0
 80035a6:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80035a8:	f107 0314 	add.w	r3, r7, #20
 80035ac:	2200      	movs	r2, #0
 80035ae:	601a      	str	r2, [r3, #0]
 80035b0:	605a      	str	r2, [r3, #4]
 80035b2:	609a      	str	r2, [r3, #8]
 80035b4:	60da      	str	r2, [r3, #12]
 80035b6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	4a21      	ldr	r2, [pc, #132]	; (8003644 <HAL_I2C_MspInit+0xa4>)
 80035be:	4293      	cmp	r3, r2
 80035c0:	d13b      	bne.n	800363a <HAL_I2C_MspInit+0x9a>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 80035c2:	2300      	movs	r3, #0
 80035c4:	613b      	str	r3, [r7, #16]
 80035c6:	4b20      	ldr	r3, [pc, #128]	; (8003648 <HAL_I2C_MspInit+0xa8>)
 80035c8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035ca:	4a1f      	ldr	r2, [pc, #124]	; (8003648 <HAL_I2C_MspInit+0xa8>)
 80035cc:	f043 0302 	orr.w	r3, r3, #2
 80035d0:	6313      	str	r3, [r2, #48]	; 0x30
 80035d2:	4b1d      	ldr	r3, [pc, #116]	; (8003648 <HAL_I2C_MspInit+0xa8>)
 80035d4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80035d6:	f003 0302 	and.w	r3, r3, #2
 80035da:	613b      	str	r3, [r7, #16]
 80035dc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB6     ------> I2C1_SCL
    PB7     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 80035de:	23c0      	movs	r3, #192	; 0xc0
 80035e0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 80035e2:	2312      	movs	r3, #18
 80035e4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 80035e6:	2301      	movs	r3, #1
 80035e8:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 80035ea:	2303      	movs	r3, #3
 80035ec:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 80035ee:	2304      	movs	r3, #4
 80035f0:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80035f2:	f107 0314 	add.w	r3, r7, #20
 80035f6:	4619      	mov	r1, r3
 80035f8:	4814      	ldr	r0, [pc, #80]	; (800364c <HAL_I2C_MspInit+0xac>)
 80035fa:	f001 f8af 	bl	800475c <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 80035fe:	2300      	movs	r3, #0
 8003600:	60fb      	str	r3, [r7, #12]
 8003602:	4b11      	ldr	r3, [pc, #68]	; (8003648 <HAL_I2C_MspInit+0xa8>)
 8003604:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003606:	4a10      	ldr	r2, [pc, #64]	; (8003648 <HAL_I2C_MspInit+0xa8>)
 8003608:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 800360c:	6413      	str	r3, [r2, #64]	; 0x40
 800360e:	4b0e      	ldr	r3, [pc, #56]	; (8003648 <HAL_I2C_MspInit+0xa8>)
 8003610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003612:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003616:	60fb      	str	r3, [r7, #12]
 8003618:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 800361a:	2200      	movs	r2, #0
 800361c:	2100      	movs	r1, #0
 800361e:	201f      	movs	r0, #31
 8003620:	f000 fc47 	bl	8003eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8003624:	201f      	movs	r0, #31
 8003626:	f000 fc60 	bl	8003eea <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 800362a:	2200      	movs	r2, #0
 800362c:	2100      	movs	r1, #0
 800362e:	2020      	movs	r0, #32
 8003630:	f000 fc3f 	bl	8003eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8003634:	2020      	movs	r0, #32
 8003636:	f000 fc58 	bl	8003eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 800363a:	bf00      	nop
 800363c:	3728      	adds	r7, #40	; 0x28
 800363e:	46bd      	mov	sp, r7
 8003640:	bd80      	pop	{r7, pc}
 8003642:	bf00      	nop
 8003644:	40005400 	.word	0x40005400
 8003648:	40023800 	.word	0x40023800
 800364c:	40020400 	.word	0x40020400

08003650 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8003650:	b580      	push	{r7, lr}
 8003652:	b08a      	sub	sp, #40	; 0x28
 8003654:	af00      	add	r7, sp, #0
 8003656:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003658:	f107 0314 	add.w	r3, r7, #20
 800365c:	2200      	movs	r2, #0
 800365e:	601a      	str	r2, [r3, #0]
 8003660:	605a      	str	r2, [r3, #4]
 8003662:	609a      	str	r2, [r3, #8]
 8003664:	60da      	str	r2, [r3, #12]
 8003666:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	4a19      	ldr	r2, [pc, #100]	; (80036d4 <HAL_TIM_Encoder_MspInit+0x84>)
 800366e:	4293      	cmp	r3, r2
 8003670:	d12c      	bne.n	80036cc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8003672:	2300      	movs	r3, #0
 8003674:	613b      	str	r3, [r7, #16]
 8003676:	4b18      	ldr	r3, [pc, #96]	; (80036d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003678:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800367a:	4a17      	ldr	r2, [pc, #92]	; (80036d8 <HAL_TIM_Encoder_MspInit+0x88>)
 800367c:	f043 0301 	orr.w	r3, r3, #1
 8003680:	6453      	str	r3, [r2, #68]	; 0x44
 8003682:	4b15      	ldr	r3, [pc, #84]	; (80036d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003684:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003686:	f003 0301 	and.w	r3, r3, #1
 800368a:	613b      	str	r3, [r7, #16]
 800368c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800368e:	2300      	movs	r3, #0
 8003690:	60fb      	str	r3, [r7, #12]
 8003692:	4b11      	ldr	r3, [pc, #68]	; (80036d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003694:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003696:	4a10      	ldr	r2, [pc, #64]	; (80036d8 <HAL_TIM_Encoder_MspInit+0x88>)
 8003698:	f043 0301 	orr.w	r3, r3, #1
 800369c:	6313      	str	r3, [r2, #48]	; 0x30
 800369e:	4b0e      	ldr	r3, [pc, #56]	; (80036d8 <HAL_TIM_Encoder_MspInit+0x88>)
 80036a0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	60fb      	str	r3, [r7, #12]
 80036a8:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80036aa:	f44f 7340 	mov.w	r3, #768	; 0x300
 80036ae:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80036b0:	2302      	movs	r3, #2
 80036b2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80036b4:	2300      	movs	r3, #0
 80036b6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80036b8:	2300      	movs	r3, #0
 80036ba:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80036bc:	2301      	movs	r3, #1
 80036be:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80036c0:	f107 0314 	add.w	r3, r7, #20
 80036c4:	4619      	mov	r1, r3
 80036c6:	4805      	ldr	r0, [pc, #20]	; (80036dc <HAL_TIM_Encoder_MspInit+0x8c>)
 80036c8:	f001 f848 	bl	800475c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80036cc:	bf00      	nop
 80036ce:	3728      	adds	r7, #40	; 0x28
 80036d0:	46bd      	mov	sp, r7
 80036d2:	bd80      	pop	{r7, pc}
 80036d4:	40010000 	.word	0x40010000
 80036d8:	40023800 	.word	0x40023800
 80036dc:	40020000 	.word	0x40020000

080036e0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80036e0:	b580      	push	{r7, lr}
 80036e2:	b084      	sub	sp, #16
 80036e4:	af00      	add	r7, sp, #0
 80036e6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80036e8:	687b      	ldr	r3, [r7, #4]
 80036ea:	681b      	ldr	r3, [r3, #0]
 80036ec:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80036f0:	d116      	bne.n	8003720 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80036f2:	2300      	movs	r3, #0
 80036f4:	60fb      	str	r3, [r7, #12]
 80036f6:	4b1a      	ldr	r3, [pc, #104]	; (8003760 <HAL_TIM_Base_MspInit+0x80>)
 80036f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80036fa:	4a19      	ldr	r2, [pc, #100]	; (8003760 <HAL_TIM_Base_MspInit+0x80>)
 80036fc:	f043 0301 	orr.w	r3, r3, #1
 8003700:	6413      	str	r3, [r2, #64]	; 0x40
 8003702:	4b17      	ldr	r3, [pc, #92]	; (8003760 <HAL_TIM_Base_MspInit+0x80>)
 8003704:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003706:	f003 0301 	and.w	r3, r3, #1
 800370a:	60fb      	str	r3, [r7, #12]
 800370c:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 800370e:	2200      	movs	r2, #0
 8003710:	2100      	movs	r1, #0
 8003712:	201c      	movs	r0, #28
 8003714:	f000 fbcd 	bl	8003eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8003718:	201c      	movs	r0, #28
 800371a:	f000 fbe6 	bl	8003eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 800371e:	e01a      	b.n	8003756 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8003720:	687b      	ldr	r3, [r7, #4]
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a0f      	ldr	r2, [pc, #60]	; (8003764 <HAL_TIM_Base_MspInit+0x84>)
 8003726:	4293      	cmp	r3, r2
 8003728:	d115      	bne.n	8003756 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 800372a:	2300      	movs	r3, #0
 800372c:	60bb      	str	r3, [r7, #8]
 800372e:	4b0c      	ldr	r3, [pc, #48]	; (8003760 <HAL_TIM_Base_MspInit+0x80>)
 8003730:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003732:	4a0b      	ldr	r2, [pc, #44]	; (8003760 <HAL_TIM_Base_MspInit+0x80>)
 8003734:	f043 0302 	orr.w	r3, r3, #2
 8003738:	6413      	str	r3, [r2, #64]	; 0x40
 800373a:	4b09      	ldr	r3, [pc, #36]	; (8003760 <HAL_TIM_Base_MspInit+0x80>)
 800373c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800373e:	f003 0302 	and.w	r3, r3, #2
 8003742:	60bb      	str	r3, [r7, #8]
 8003744:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8003746:	2200      	movs	r2, #0
 8003748:	2100      	movs	r1, #0
 800374a:	201d      	movs	r0, #29
 800374c:	f000 fbb1 	bl	8003eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8003750:	201d      	movs	r0, #29
 8003752:	f000 fbca 	bl	8003eea <HAL_NVIC_EnableIRQ>
}
 8003756:	bf00      	nop
 8003758:	3710      	adds	r7, #16
 800375a:	46bd      	mov	sp, r7
 800375c:	bd80      	pop	{r7, pc}
 800375e:	bf00      	nop
 8003760:	40023800 	.word	0x40023800
 8003764:	40000400 	.word	0x40000400

08003768 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8003768:	b580      	push	{r7, lr}
 800376a:	b088      	sub	sp, #32
 800376c:	af00      	add	r7, sp, #0
 800376e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8003770:	f107 030c 	add.w	r3, r7, #12
 8003774:	2200      	movs	r2, #0
 8003776:	601a      	str	r2, [r3, #0]
 8003778:	605a      	str	r2, [r3, #4]
 800377a:	609a      	str	r2, [r3, #8]
 800377c:	60da      	str	r2, [r3, #12]
 800377e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	681b      	ldr	r3, [r3, #0]
 8003784:	4a12      	ldr	r2, [pc, #72]	; (80037d0 <HAL_TIM_MspPostInit+0x68>)
 8003786:	4293      	cmp	r3, r2
 8003788:	d11d      	bne.n	80037c6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800378a:	2300      	movs	r3, #0
 800378c:	60bb      	str	r3, [r7, #8]
 800378e:	4b11      	ldr	r3, [pc, #68]	; (80037d4 <HAL_TIM_MspPostInit+0x6c>)
 8003790:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003792:	4a10      	ldr	r2, [pc, #64]	; (80037d4 <HAL_TIM_MspPostInit+0x6c>)
 8003794:	f043 0301 	orr.w	r3, r3, #1
 8003798:	6313      	str	r3, [r2, #48]	; 0x30
 800379a:	4b0e      	ldr	r3, [pc, #56]	; (80037d4 <HAL_TIM_MspPostInit+0x6c>)
 800379c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800379e:	f003 0301 	and.w	r3, r3, #1
 80037a2:	60bb      	str	r3, [r7, #8]
 80037a4:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80037a6:	2340      	movs	r3, #64	; 0x40
 80037a8:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80037aa:	2302      	movs	r3, #2
 80037ac:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80037ae:	2300      	movs	r3, #0
 80037b0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80037b2:	2300      	movs	r3, #0
 80037b4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80037b6:	2302      	movs	r3, #2
 80037b8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80037ba:	f107 030c 	add.w	r3, r7, #12
 80037be:	4619      	mov	r1, r3
 80037c0:	4805      	ldr	r0, [pc, #20]	; (80037d8 <HAL_TIM_MspPostInit+0x70>)
 80037c2:	f000 ffcb 	bl	800475c <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80037c6:	bf00      	nop
 80037c8:	3720      	adds	r7, #32
 80037ca:	46bd      	mov	sp, r7
 80037cc:	bd80      	pop	{r7, pc}
 80037ce:	bf00      	nop
 80037d0:	40000400 	.word	0x40000400
 80037d4:	40023800 	.word	0x40023800
 80037d8:	40020000 	.word	0x40020000

080037dc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80037dc:	b580      	push	{r7, lr}
 80037de:	b08c      	sub	sp, #48	; 0x30
 80037e0:	af00      	add	r7, sp, #0
 80037e2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80037e4:	f107 031c 	add.w	r3, r7, #28
 80037e8:	2200      	movs	r2, #0
 80037ea:	601a      	str	r2, [r3, #0]
 80037ec:	605a      	str	r2, [r3, #4]
 80037ee:	609a      	str	r2, [r3, #8]
 80037f0:	60da      	str	r2, [r3, #12]
 80037f2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80037f4:	687b      	ldr	r3, [r7, #4]
 80037f6:	681b      	ldr	r3, [r3, #0]
 80037f8:	4a65      	ldr	r2, [pc, #404]	; (8003990 <HAL_UART_MspInit+0x1b4>)
 80037fa:	4293      	cmp	r3, r2
 80037fc:	f040 8092 	bne.w	8003924 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8003800:	2300      	movs	r3, #0
 8003802:	61bb      	str	r3, [r7, #24]
 8003804:	4b63      	ldr	r3, [pc, #396]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003806:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003808:	4a62      	ldr	r2, [pc, #392]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 800380a:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800380e:	6413      	str	r3, [r2, #64]	; 0x40
 8003810:	4b60      	ldr	r3, [pc, #384]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003812:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003814:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003818:	61bb      	str	r3, [r7, #24]
 800381a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 800381c:	2300      	movs	r3, #0
 800381e:	617b      	str	r3, [r7, #20]
 8003820:	4b5c      	ldr	r3, [pc, #368]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003822:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003824:	4a5b      	ldr	r2, [pc, #364]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003826:	f043 0301 	orr.w	r3, r3, #1
 800382a:	6313      	str	r3, [r2, #48]	; 0x30
 800382c:	4b59      	ldr	r3, [pc, #356]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 800382e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003830:	f003 0301 	and.w	r3, r3, #1
 8003834:	617b      	str	r3, [r7, #20]
 8003836:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8003838:	230c      	movs	r3, #12
 800383a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800383c:	2302      	movs	r3, #2
 800383e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8003840:	2300      	movs	r3, #0
 8003842:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003844:	2303      	movs	r3, #3
 8003846:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8003848:	2307      	movs	r3, #7
 800384a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800384c:	f107 031c 	add.w	r3, r7, #28
 8003850:	4619      	mov	r1, r3
 8003852:	4851      	ldr	r0, [pc, #324]	; (8003998 <HAL_UART_MspInit+0x1bc>)
 8003854:	f000 ff82 	bl	800475c <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8003858:	4b50      	ldr	r3, [pc, #320]	; (800399c <HAL_UART_MspInit+0x1c0>)
 800385a:	4a51      	ldr	r2, [pc, #324]	; (80039a0 <HAL_UART_MspInit+0x1c4>)
 800385c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 800385e:	4b4f      	ldr	r3, [pc, #316]	; (800399c <HAL_UART_MspInit+0x1c0>)
 8003860:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8003864:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8003866:	4b4d      	ldr	r3, [pc, #308]	; (800399c <HAL_UART_MspInit+0x1c0>)
 8003868:	2200      	movs	r2, #0
 800386a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 800386c:	4b4b      	ldr	r3, [pc, #300]	; (800399c <HAL_UART_MspInit+0x1c0>)
 800386e:	2200      	movs	r2, #0
 8003870:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8003872:	4b4a      	ldr	r3, [pc, #296]	; (800399c <HAL_UART_MspInit+0x1c0>)
 8003874:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8003878:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 800387a:	4b48      	ldr	r3, [pc, #288]	; (800399c <HAL_UART_MspInit+0x1c0>)
 800387c:	2200      	movs	r2, #0
 800387e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8003880:	4b46      	ldr	r3, [pc, #280]	; (800399c <HAL_UART_MspInit+0x1c0>)
 8003882:	2200      	movs	r2, #0
 8003884:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8003886:	4b45      	ldr	r3, [pc, #276]	; (800399c <HAL_UART_MspInit+0x1c0>)
 8003888:	f44f 7280 	mov.w	r2, #256	; 0x100
 800388c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 800388e:	4b43      	ldr	r3, [pc, #268]	; (800399c <HAL_UART_MspInit+0x1c0>)
 8003890:	2200      	movs	r2, #0
 8003892:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8003894:	4b41      	ldr	r3, [pc, #260]	; (800399c <HAL_UART_MspInit+0x1c0>)
 8003896:	2200      	movs	r2, #0
 8003898:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 800389a:	4840      	ldr	r0, [pc, #256]	; (800399c <HAL_UART_MspInit+0x1c0>)
 800389c:	f000 fb4e 	bl	8003f3c <HAL_DMA_Init>
 80038a0:	4603      	mov	r3, r0
 80038a2:	2b00      	cmp	r3, #0
 80038a4:	d001      	beq.n	80038aa <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 80038a6:	f7ff fe4d 	bl	8003544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 80038aa:	687b      	ldr	r3, [r7, #4]
 80038ac:	4a3b      	ldr	r2, [pc, #236]	; (800399c <HAL_UART_MspInit+0x1c0>)
 80038ae:	639a      	str	r2, [r3, #56]	; 0x38
 80038b0:	4a3a      	ldr	r2, [pc, #232]	; (800399c <HAL_UART_MspInit+0x1c0>)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 80038b6:	4b3b      	ldr	r3, [pc, #236]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038b8:	4a3b      	ldr	r2, [pc, #236]	; (80039a8 <HAL_UART_MspInit+0x1cc>)
 80038ba:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 80038bc:	4b39      	ldr	r3, [pc, #228]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038be:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 80038c2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 80038c4:	4b37      	ldr	r3, [pc, #220]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038c6:	2240      	movs	r2, #64	; 0x40
 80038c8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 80038ca:	4b36      	ldr	r3, [pc, #216]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038cc:	2200      	movs	r2, #0
 80038ce:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 80038d0:	4b34      	ldr	r3, [pc, #208]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038d2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80038d6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 80038d8:	4b32      	ldr	r3, [pc, #200]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038da:	2200      	movs	r2, #0
 80038dc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 80038de:	4b31      	ldr	r3, [pc, #196]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038e0:	2200      	movs	r2, #0
 80038e2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 80038e4:	4b2f      	ldr	r3, [pc, #188]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038e6:	2200      	movs	r2, #0
 80038e8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 80038ea:	4b2e      	ldr	r3, [pc, #184]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038ec:	2200      	movs	r2, #0
 80038ee:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 80038f0:	4b2c      	ldr	r3, [pc, #176]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038f2:	2200      	movs	r2, #0
 80038f4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 80038f6:	482b      	ldr	r0, [pc, #172]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 80038f8:	f000 fb20 	bl	8003f3c <HAL_DMA_Init>
 80038fc:	4603      	mov	r3, r0
 80038fe:	2b00      	cmp	r3, #0
 8003900:	d001      	beq.n	8003906 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8003902:	f7ff fe1f 	bl	8003544 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8003906:	687b      	ldr	r3, [r7, #4]
 8003908:	4a26      	ldr	r2, [pc, #152]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 800390a:	635a      	str	r2, [r3, #52]	; 0x34
 800390c:	4a25      	ldr	r2, [pc, #148]	; (80039a4 <HAL_UART_MspInit+0x1c8>)
 800390e:	687b      	ldr	r3, [r7, #4]
 8003910:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8003912:	2200      	movs	r2, #0
 8003914:	2100      	movs	r1, #0
 8003916:	2026      	movs	r0, #38	; 0x26
 8003918:	f000 facb 	bl	8003eb2 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 800391c:	2026      	movs	r0, #38	; 0x26
 800391e:	f000 fae4 	bl	8003eea <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8003922:	e030      	b.n	8003986 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8003924:	687b      	ldr	r3, [r7, #4]
 8003926:	681b      	ldr	r3, [r3, #0]
 8003928:	4a20      	ldr	r2, [pc, #128]	; (80039ac <HAL_UART_MspInit+0x1d0>)
 800392a:	4293      	cmp	r3, r2
 800392c:	d12b      	bne.n	8003986 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 800392e:	2300      	movs	r3, #0
 8003930:	613b      	str	r3, [r7, #16]
 8003932:	4b18      	ldr	r3, [pc, #96]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003934:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003936:	4a17      	ldr	r2, [pc, #92]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003938:	f043 0320 	orr.w	r3, r3, #32
 800393c:	6453      	str	r3, [r2, #68]	; 0x44
 800393e:	4b15      	ldr	r3, [pc, #84]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003940:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003942:	f003 0320 	and.w	r3, r3, #32
 8003946:	613b      	str	r3, [r7, #16]
 8003948:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 800394a:	2300      	movs	r3, #0
 800394c:	60fb      	str	r3, [r7, #12]
 800394e:	4b11      	ldr	r3, [pc, #68]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003950:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003952:	4a10      	ldr	r2, [pc, #64]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 8003954:	f043 0304 	orr.w	r3, r3, #4
 8003958:	6313      	str	r3, [r2, #48]	; 0x30
 800395a:	4b0e      	ldr	r3, [pc, #56]	; (8003994 <HAL_UART_MspInit+0x1b8>)
 800395c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800395e:	f003 0304 	and.w	r3, r3, #4
 8003962:	60fb      	str	r3, [r7, #12]
 8003964:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8003966:	23c0      	movs	r3, #192	; 0xc0
 8003968:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 800396a:	2302      	movs	r3, #2
 800396c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 800396e:	2300      	movs	r3, #0
 8003970:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8003972:	2303      	movs	r3, #3
 8003974:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8003976:	2308      	movs	r3, #8
 8003978:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 800397a:	f107 031c 	add.w	r3, r7, #28
 800397e:	4619      	mov	r1, r3
 8003980:	480b      	ldr	r0, [pc, #44]	; (80039b0 <HAL_UART_MspInit+0x1d4>)
 8003982:	f000 feeb 	bl	800475c <HAL_GPIO_Init>
}
 8003986:	bf00      	nop
 8003988:	3730      	adds	r7, #48	; 0x30
 800398a:	46bd      	mov	sp, r7
 800398c:	bd80      	pop	{r7, pc}
 800398e:	bf00      	nop
 8003990:	40004400 	.word	0x40004400
 8003994:	40023800 	.word	0x40023800
 8003998:	40020000 	.word	0x40020000
 800399c:	200007d0 	.word	0x200007d0
 80039a0:	40026088 	.word	0x40026088
 80039a4:	200008cc 	.word	0x200008cc
 80039a8:	400260a0 	.word	0x400260a0
 80039ac:	40011400 	.word	0x40011400
 80039b0:	40020800 	.word	0x40020800

080039b4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 80039b4:	b480      	push	{r7}
 80039b6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 80039b8:	e7fe      	b.n	80039b8 <NMI_Handler+0x4>

080039ba <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 80039ba:	b480      	push	{r7}
 80039bc:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 80039be:	e7fe      	b.n	80039be <HardFault_Handler+0x4>

080039c0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 80039c0:	b480      	push	{r7}
 80039c2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 80039c4:	e7fe      	b.n	80039c4 <MemManage_Handler+0x4>

080039c6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 80039c6:	b480      	push	{r7}
 80039c8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 80039ca:	e7fe      	b.n	80039ca <BusFault_Handler+0x4>

080039cc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 80039cc:	b480      	push	{r7}
 80039ce:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 80039d0:	e7fe      	b.n	80039d0 <UsageFault_Handler+0x4>

080039d2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 80039d2:	b480      	push	{r7}
 80039d4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 80039d6:	bf00      	nop
 80039d8:	46bd      	mov	sp, r7
 80039da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039de:	4770      	bx	lr

080039e0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80039e0:	b480      	push	{r7}
 80039e2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80039e4:	bf00      	nop
 80039e6:	46bd      	mov	sp, r7
 80039e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039ec:	4770      	bx	lr

080039ee <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80039ee:	b480      	push	{r7}
 80039f0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80039f2:	bf00      	nop
 80039f4:	46bd      	mov	sp, r7
 80039f6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039fa:	4770      	bx	lr

080039fc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80039fc:	b580      	push	{r7, lr}
 80039fe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8003a00:	f000 f914 	bl	8003c2c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8003a04:	bf00      	nop
 8003a06:	bd80      	pop	{r7, pc}

08003a08 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8003a08:	b580      	push	{r7, lr}
 8003a0a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8003a0c:	4802      	ldr	r0, [pc, #8]	; (8003a18 <DMA1_Stream5_IRQHandler+0x10>)
 8003a0e:	f000 fc2d 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8003a12:	bf00      	nop
 8003a14:	bd80      	pop	{r7, pc}
 8003a16:	bf00      	nop
 8003a18:	200007d0 	.word	0x200007d0

08003a1c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8003a1c:	b580      	push	{r7, lr}
 8003a1e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8003a20:	4802      	ldr	r0, [pc, #8]	; (8003a2c <DMA1_Stream6_IRQHandler+0x10>)
 8003a22:	f000 fc23 	bl	800426c <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8003a26:	bf00      	nop
 8003a28:	bd80      	pop	{r7, pc}
 8003a2a:	bf00      	nop
 8003a2c:	200008cc 	.word	0x200008cc

08003a30 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8003a30:	b580      	push	{r7, lr}
 8003a32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8003a34:	2080      	movs	r0, #128	; 0x80
 8003a36:	f001 f82f 	bl	8004a98 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8003a3a:	bf00      	nop
 8003a3c:	bd80      	pop	{r7, pc}
	...

08003a40 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8003a40:	b580      	push	{r7, lr}
 8003a42:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8003a44:	4802      	ldr	r0, [pc, #8]	; (8003a50 <TIM2_IRQHandler+0x10>)
 8003a46:	f003 fdf7 	bl	8007638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8003a4a:	bf00      	nop
 8003a4c:	bd80      	pop	{r7, pc}
 8003a4e:	bf00      	nop
 8003a50:	200009b8 	.word	0x200009b8

08003a54 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8003a54:	b580      	push	{r7, lr}
 8003a56:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8003a58:	4802      	ldr	r0, [pc, #8]	; (8003a64 <TIM3_IRQHandler+0x10>)
 8003a5a:	f003 fded 	bl	8007638 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8003a5e:	bf00      	nop
 8003a60:	bd80      	pop	{r7, pc}
 8003a62:	bf00      	nop
 8003a64:	20000884 	.word	0x20000884

08003a68 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8003a68:	b580      	push	{r7, lr}
 8003a6a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8003a6c:	4802      	ldr	r0, [pc, #8]	; (8003a78 <I2C1_EV_IRQHandler+0x10>)
 8003a6e:	f001 f96f 	bl	8004d50 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8003a72:	bf00      	nop
 8003a74:	bd80      	pop	{r7, pc}
 8003a76:	bf00      	nop
 8003a78:	20000830 	.word	0x20000830

08003a7c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8003a7c:	b580      	push	{r7, lr}
 8003a7e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8003a80:	4802      	ldr	r0, [pc, #8]	; (8003a8c <I2C1_ER_IRQHandler+0x10>)
 8003a82:	f001 fad2 	bl	800502a <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8003a86:	bf00      	nop
 8003a88:	bd80      	pop	{r7, pc}
 8003a8a:	bf00      	nop
 8003a8c:	20000830 	.word	0x20000830

08003a90 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8003a90:	b580      	push	{r7, lr}
 8003a92:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8003a94:	4802      	ldr	r0, [pc, #8]	; (8003aa0 <USART2_IRQHandler+0x10>)
 8003a96:	f004 fcb9 	bl	800840c <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8003a9a:	bf00      	nop
 8003a9c:	bd80      	pop	{r7, pc}
 8003a9e:	bf00      	nop
 8003aa0:	20000a00 	.word	0x20000a00

08003aa4 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8003aa4:	b580      	push	{r7, lr}
 8003aa6:	b086      	sub	sp, #24
 8003aa8:	af00      	add	r7, sp, #0
 8003aaa:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8003aac:	4a14      	ldr	r2, [pc, #80]	; (8003b00 <_sbrk+0x5c>)
 8003aae:	4b15      	ldr	r3, [pc, #84]	; (8003b04 <_sbrk+0x60>)
 8003ab0:	1ad3      	subs	r3, r2, r3
 8003ab2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8003ab4:	697b      	ldr	r3, [r7, #20]
 8003ab6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8003ab8:	4b13      	ldr	r3, [pc, #76]	; (8003b08 <_sbrk+0x64>)
 8003aba:	681b      	ldr	r3, [r3, #0]
 8003abc:	2b00      	cmp	r3, #0
 8003abe:	d102      	bne.n	8003ac6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8003ac0:	4b11      	ldr	r3, [pc, #68]	; (8003b08 <_sbrk+0x64>)
 8003ac2:	4a12      	ldr	r2, [pc, #72]	; (8003b0c <_sbrk+0x68>)
 8003ac4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8003ac6:	4b10      	ldr	r3, [pc, #64]	; (8003b08 <_sbrk+0x64>)
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	4413      	add	r3, r2
 8003ace:	693a      	ldr	r2, [r7, #16]
 8003ad0:	429a      	cmp	r2, r3
 8003ad2:	d207      	bcs.n	8003ae4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8003ad4:	f005 faf6 	bl	80090c4 <__errno>
 8003ad8:	4603      	mov	r3, r0
 8003ada:	220c      	movs	r2, #12
 8003adc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8003ade:	f04f 33ff 	mov.w	r3, #4294967295
 8003ae2:	e009      	b.n	8003af8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8003ae4:	4b08      	ldr	r3, [pc, #32]	; (8003b08 <_sbrk+0x64>)
 8003ae6:	681b      	ldr	r3, [r3, #0]
 8003ae8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8003aea:	4b07      	ldr	r3, [pc, #28]	; (8003b08 <_sbrk+0x64>)
 8003aec:	681a      	ldr	r2, [r3, #0]
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	4413      	add	r3, r2
 8003af2:	4a05      	ldr	r2, [pc, #20]	; (8003b08 <_sbrk+0x64>)
 8003af4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8003af6:	68fb      	ldr	r3, [r7, #12]
}
 8003af8:	4618      	mov	r0, r3
 8003afa:	3718      	adds	r7, #24
 8003afc:	46bd      	mov	sp, r7
 8003afe:	bd80      	pop	{r7, pc}
 8003b00:	20020000 	.word	0x20020000
 8003b04:	00000400 	.word	0x00000400
 8003b08:	200007c4 	.word	0x200007c4
 8003b0c:	20000a58 	.word	0x20000a58

08003b10 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003b10:	b480      	push	{r7}
 8003b12:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003b14:	4b06      	ldr	r3, [pc, #24]	; (8003b30 <SystemInit+0x20>)
 8003b16:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 8003b1a:	4a05      	ldr	r2, [pc, #20]	; (8003b30 <SystemInit+0x20>)
 8003b1c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003b20:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003b24:	bf00      	nop
 8003b26:	46bd      	mov	sp, r7
 8003b28:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b2c:	4770      	bx	lr
 8003b2e:	bf00      	nop
 8003b30:	e000ed00 	.word	0xe000ed00

08003b34 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b34:	f8df d034 	ldr.w	sp, [pc, #52]	; 8003b6c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003b38:	480d      	ldr	r0, [pc, #52]	; (8003b70 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 8003b3a:	490e      	ldr	r1, [pc, #56]	; (8003b74 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 8003b3c:	4a0e      	ldr	r2, [pc, #56]	; (8003b78 <LoopFillZerobss+0x1e>)
  movs r3, #0
 8003b3e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003b40:	e002      	b.n	8003b48 <LoopCopyDataInit>

08003b42 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003b42:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003b44:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003b46:	3304      	adds	r3, #4

08003b48 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003b48:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 8003b4a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 8003b4c:	d3f9      	bcc.n	8003b42 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 8003b4e:	4a0b      	ldr	r2, [pc, #44]	; (8003b7c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003b50:	4c0b      	ldr	r4, [pc, #44]	; (8003b80 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003b52:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003b54:	e001      	b.n	8003b5a <LoopFillZerobss>

08003b56 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003b56:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003b58:	3204      	adds	r2, #4

08003b5a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 8003b5a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 8003b5c:	d3fb      	bcc.n	8003b56 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8003b5e:	f7ff ffd7 	bl	8003b10 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003b62:	f005 fab5 	bl	80090d0 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003b66:	f7fd fa7d 	bl	8001064 <main>
  bx  lr    
 8003b6a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 8003b6c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003b70:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003b74:	200000a4 	.word	0x200000a4
  ldr r2, =_sidata
 8003b78:	0800a250 	.word	0x0800a250
  ldr r2, =_sbss
 8003b7c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003b80:	20000a58 	.word	0x20000a58

08003b84 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003b84:	e7fe      	b.n	8003b84 <ADC_IRQHandler>
	...

08003b88 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003b88:	b580      	push	{r7, lr}
 8003b8a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8003b8c:	4b0e      	ldr	r3, [pc, #56]	; (8003bc8 <HAL_Init+0x40>)
 8003b8e:	681b      	ldr	r3, [r3, #0]
 8003b90:	4a0d      	ldr	r2, [pc, #52]	; (8003bc8 <HAL_Init+0x40>)
 8003b92:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003b96:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003b98:	4b0b      	ldr	r3, [pc, #44]	; (8003bc8 <HAL_Init+0x40>)
 8003b9a:	681b      	ldr	r3, [r3, #0]
 8003b9c:	4a0a      	ldr	r2, [pc, #40]	; (8003bc8 <HAL_Init+0x40>)
 8003b9e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003ba2:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003ba4:	4b08      	ldr	r3, [pc, #32]	; (8003bc8 <HAL_Init+0x40>)
 8003ba6:	681b      	ldr	r3, [r3, #0]
 8003ba8:	4a07      	ldr	r2, [pc, #28]	; (8003bc8 <HAL_Init+0x40>)
 8003baa:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8003bae:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 8003bb0:	2003      	movs	r0, #3
 8003bb2:	f000 f973 	bl	8003e9c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 8003bb6:	2000      	movs	r0, #0
 8003bb8:	f000 f808 	bl	8003bcc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 8003bbc:	f7ff fcc8 	bl	8003550 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 8003bc0:	2300      	movs	r3, #0
}
 8003bc2:	4618      	mov	r0, r3
 8003bc4:	bd80      	pop	{r7, pc}
 8003bc6:	bf00      	nop
 8003bc8:	40023c00 	.word	0x40023c00

08003bcc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 8003bcc:	b580      	push	{r7, lr}
 8003bce:	b082      	sub	sp, #8
 8003bd0:	af00      	add	r7, sp, #0
 8003bd2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 8003bd4:	4b12      	ldr	r3, [pc, #72]	; (8003c20 <HAL_InitTick+0x54>)
 8003bd6:	681a      	ldr	r2, [r3, #0]
 8003bd8:	4b12      	ldr	r3, [pc, #72]	; (8003c24 <HAL_InitTick+0x58>)
 8003bda:	781b      	ldrb	r3, [r3, #0]
 8003bdc:	4619      	mov	r1, r3
 8003bde:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 8003be2:	fbb3 f3f1 	udiv	r3, r3, r1
 8003be6:	fbb2 f3f3 	udiv	r3, r2, r3
 8003bea:	4618      	mov	r0, r3
 8003bec:	f000 f999 	bl	8003f22 <HAL_SYSTICK_Config>
 8003bf0:	4603      	mov	r3, r0
 8003bf2:	2b00      	cmp	r3, #0
 8003bf4:	d001      	beq.n	8003bfa <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 8003bf6:	2301      	movs	r3, #1
 8003bf8:	e00e      	b.n	8003c18 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 8003bfa:	687b      	ldr	r3, [r7, #4]
 8003bfc:	2b0f      	cmp	r3, #15
 8003bfe:	d80a      	bhi.n	8003c16 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 8003c00:	2200      	movs	r2, #0
 8003c02:	6879      	ldr	r1, [r7, #4]
 8003c04:	f04f 30ff 	mov.w	r0, #4294967295
 8003c08:	f000 f953 	bl	8003eb2 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8003c0c:	4a06      	ldr	r2, [pc, #24]	; (8003c28 <HAL_InitTick+0x5c>)
 8003c0e:	687b      	ldr	r3, [r7, #4]
 8003c10:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003c12:	2300      	movs	r3, #0
 8003c14:	e000      	b.n	8003c18 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003c16:	2301      	movs	r3, #1
}
 8003c18:	4618      	mov	r0, r3
 8003c1a:	3708      	adds	r7, #8
 8003c1c:	46bd      	mov	sp, r7
 8003c1e:	bd80      	pop	{r7, pc}
 8003c20:	20000030 	.word	0x20000030
 8003c24:	20000038 	.word	0x20000038
 8003c28:	20000034 	.word	0x20000034

08003c2c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8003c2c:	b480      	push	{r7}
 8003c2e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003c30:	4b06      	ldr	r3, [pc, #24]	; (8003c4c <HAL_IncTick+0x20>)
 8003c32:	781b      	ldrb	r3, [r3, #0]
 8003c34:	461a      	mov	r2, r3
 8003c36:	4b06      	ldr	r3, [pc, #24]	; (8003c50 <HAL_IncTick+0x24>)
 8003c38:	681b      	ldr	r3, [r3, #0]
 8003c3a:	4413      	add	r3, r2
 8003c3c:	4a04      	ldr	r2, [pc, #16]	; (8003c50 <HAL_IncTick+0x24>)
 8003c3e:	6013      	str	r3, [r2, #0]
}
 8003c40:	bf00      	nop
 8003c42:	46bd      	mov	sp, r7
 8003c44:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c48:	4770      	bx	lr
 8003c4a:	bf00      	nop
 8003c4c:	20000038 	.word	0x20000038
 8003c50:	20000a44 	.word	0x20000a44

08003c54 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003c54:	b480      	push	{r7}
 8003c56:	af00      	add	r7, sp, #0
  return uwTick;
 8003c58:	4b03      	ldr	r3, [pc, #12]	; (8003c68 <HAL_GetTick+0x14>)
 8003c5a:	681b      	ldr	r3, [r3, #0]
}
 8003c5c:	4618      	mov	r0, r3
 8003c5e:	46bd      	mov	sp, r7
 8003c60:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c64:	4770      	bx	lr
 8003c66:	bf00      	nop
 8003c68:	20000a44 	.word	0x20000a44

08003c6c <HAL_Delay>:
  *       implementations in user file.
  * @param Delay specifies the delay time length, in milliseconds.
  * @retval None
  */
__weak void HAL_Delay(uint32_t Delay)
{
 8003c6c:	b580      	push	{r7, lr}
 8003c6e:	b084      	sub	sp, #16
 8003c70:	af00      	add	r7, sp, #0
 8003c72:	6078      	str	r0, [r7, #4]
  uint32_t tickstart = HAL_GetTick();
 8003c74:	f7ff ffee 	bl	8003c54 <HAL_GetTick>
 8003c78:	60b8      	str	r0, [r7, #8]
  uint32_t wait = Delay;
 8003c7a:	687b      	ldr	r3, [r7, #4]
 8003c7c:	60fb      	str	r3, [r7, #12]

  /* Add a freq to guarantee minimum wait */
  if (wait < HAL_MAX_DELAY)
 8003c7e:	68fb      	ldr	r3, [r7, #12]
 8003c80:	f1b3 3fff 	cmp.w	r3, #4294967295
 8003c84:	d005      	beq.n	8003c92 <HAL_Delay+0x26>
  {
    wait += (uint32_t)(uwTickFreq);
 8003c86:	4b0a      	ldr	r3, [pc, #40]	; (8003cb0 <HAL_Delay+0x44>)
 8003c88:	781b      	ldrb	r3, [r3, #0]
 8003c8a:	461a      	mov	r2, r3
 8003c8c:	68fb      	ldr	r3, [r7, #12]
 8003c8e:	4413      	add	r3, r2
 8003c90:	60fb      	str	r3, [r7, #12]
  }

  while((HAL_GetTick() - tickstart) < wait)
 8003c92:	bf00      	nop
 8003c94:	f7ff ffde 	bl	8003c54 <HAL_GetTick>
 8003c98:	4602      	mov	r2, r0
 8003c9a:	68bb      	ldr	r3, [r7, #8]
 8003c9c:	1ad3      	subs	r3, r2, r3
 8003c9e:	68fa      	ldr	r2, [r7, #12]
 8003ca0:	429a      	cmp	r2, r3
 8003ca2:	d8f7      	bhi.n	8003c94 <HAL_Delay+0x28>
  {
  }
}
 8003ca4:	bf00      	nop
 8003ca6:	bf00      	nop
 8003ca8:	3710      	adds	r7, #16
 8003caa:	46bd      	mov	sp, r7
 8003cac:	bd80      	pop	{r7, pc}
 8003cae:	bf00      	nop
 8003cb0:	20000038 	.word	0x20000038

08003cb4 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003cb4:	b480      	push	{r7}
 8003cb6:	b085      	sub	sp, #20
 8003cb8:	af00      	add	r7, sp, #0
 8003cba:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003cbc:	687b      	ldr	r3, [r7, #4]
 8003cbe:	f003 0307 	and.w	r3, r3, #7
 8003cc2:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8003cc4:	4b0c      	ldr	r3, [pc, #48]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003cca:	68ba      	ldr	r2, [r7, #8]
 8003ccc:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003cd0:	4013      	ands	r3, r2
 8003cd2:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8003cd4:	68fb      	ldr	r3, [r7, #12]
 8003cd6:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003cd8:	68bb      	ldr	r3, [r7, #8]
 8003cda:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003cdc:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003ce0:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8003ce4:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8003ce6:	4a04      	ldr	r2, [pc, #16]	; (8003cf8 <__NVIC_SetPriorityGrouping+0x44>)
 8003ce8:	68bb      	ldr	r3, [r7, #8]
 8003cea:	60d3      	str	r3, [r2, #12]
}
 8003cec:	bf00      	nop
 8003cee:	3714      	adds	r7, #20
 8003cf0:	46bd      	mov	sp, r7
 8003cf2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003cf6:	4770      	bx	lr
 8003cf8:	e000ed00 	.word	0xe000ed00

08003cfc <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8003cfc:	b480      	push	{r7}
 8003cfe:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8003d00:	4b04      	ldr	r3, [pc, #16]	; (8003d14 <__NVIC_GetPriorityGrouping+0x18>)
 8003d02:	68db      	ldr	r3, [r3, #12]
 8003d04:	0a1b      	lsrs	r3, r3, #8
 8003d06:	f003 0307 	and.w	r3, r3, #7
}
 8003d0a:	4618      	mov	r0, r3
 8003d0c:	46bd      	mov	sp, r7
 8003d0e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d12:	4770      	bx	lr
 8003d14:	e000ed00 	.word	0xe000ed00

08003d18 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003d18:	b480      	push	{r7}
 8003d1a:	b083      	sub	sp, #12
 8003d1c:	af00      	add	r7, sp, #0
 8003d1e:	4603      	mov	r3, r0
 8003d20:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d22:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d26:	2b00      	cmp	r3, #0
 8003d28:	db0b      	blt.n	8003d42 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d2a:	79fb      	ldrb	r3, [r7, #7]
 8003d2c:	f003 021f 	and.w	r2, r3, #31
 8003d30:	4907      	ldr	r1, [pc, #28]	; (8003d50 <__NVIC_EnableIRQ+0x38>)
 8003d32:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d36:	095b      	lsrs	r3, r3, #5
 8003d38:	2001      	movs	r0, #1
 8003d3a:	fa00 f202 	lsl.w	r2, r0, r2
 8003d3e:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8003d42:	bf00      	nop
 8003d44:	370c      	adds	r7, #12
 8003d46:	46bd      	mov	sp, r7
 8003d48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d4c:	4770      	bx	lr
 8003d4e:	bf00      	nop
 8003d50:	e000e100 	.word	0xe000e100

08003d54 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003d54:	b480      	push	{r7}
 8003d56:	b083      	sub	sp, #12
 8003d58:	af00      	add	r7, sp, #0
 8003d5a:	4603      	mov	r3, r0
 8003d5c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003d5e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d62:	2b00      	cmp	r3, #0
 8003d64:	db12      	blt.n	8003d8c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8003d66:	79fb      	ldrb	r3, [r7, #7]
 8003d68:	f003 021f 	and.w	r2, r3, #31
 8003d6c:	490a      	ldr	r1, [pc, #40]	; (8003d98 <__NVIC_DisableIRQ+0x44>)
 8003d6e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003d72:	095b      	lsrs	r3, r3, #5
 8003d74:	2001      	movs	r0, #1
 8003d76:	fa00 f202 	lsl.w	r2, r0, r2
 8003d7a:	3320      	adds	r3, #32
 8003d7c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003d80:	f3bf 8f4f 	dsb	sy
}
 8003d84:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8003d86:	f3bf 8f6f 	isb	sy
}
 8003d8a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003d8c:	bf00      	nop
 8003d8e:	370c      	adds	r7, #12
 8003d90:	46bd      	mov	sp, r7
 8003d92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003d96:	4770      	bx	lr
 8003d98:	e000e100 	.word	0xe000e100

08003d9c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003d9c:	b480      	push	{r7}
 8003d9e:	b083      	sub	sp, #12
 8003da0:	af00      	add	r7, sp, #0
 8003da2:	4603      	mov	r3, r0
 8003da4:	6039      	str	r1, [r7, #0]
 8003da6:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003da8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dac:	2b00      	cmp	r3, #0
 8003dae:	db0a      	blt.n	8003dc6 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003db0:	683b      	ldr	r3, [r7, #0]
 8003db2:	b2da      	uxtb	r2, r3
 8003db4:	490c      	ldr	r1, [pc, #48]	; (8003de8 <__NVIC_SetPriority+0x4c>)
 8003db6:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003dba:	0112      	lsls	r2, r2, #4
 8003dbc:	b2d2      	uxtb	r2, r2
 8003dbe:	440b      	add	r3, r1
 8003dc0:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8003dc4:	e00a      	b.n	8003ddc <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003dc6:	683b      	ldr	r3, [r7, #0]
 8003dc8:	b2da      	uxtb	r2, r3
 8003dca:	4908      	ldr	r1, [pc, #32]	; (8003dec <__NVIC_SetPriority+0x50>)
 8003dcc:	79fb      	ldrb	r3, [r7, #7]
 8003dce:	f003 030f 	and.w	r3, r3, #15
 8003dd2:	3b04      	subs	r3, #4
 8003dd4:	0112      	lsls	r2, r2, #4
 8003dd6:	b2d2      	uxtb	r2, r2
 8003dd8:	440b      	add	r3, r1
 8003dda:	761a      	strb	r2, [r3, #24]
}
 8003ddc:	bf00      	nop
 8003dde:	370c      	adds	r7, #12
 8003de0:	46bd      	mov	sp, r7
 8003de2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003de6:	4770      	bx	lr
 8003de8:	e000e100 	.word	0xe000e100
 8003dec:	e000ed00 	.word	0xe000ed00

08003df0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003df0:	b480      	push	{r7}
 8003df2:	b089      	sub	sp, #36	; 0x24
 8003df4:	af00      	add	r7, sp, #0
 8003df6:	60f8      	str	r0, [r7, #12]
 8003df8:	60b9      	str	r1, [r7, #8]
 8003dfa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8003dfc:	68fb      	ldr	r3, [r7, #12]
 8003dfe:	f003 0307 	and.w	r3, r3, #7
 8003e02:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8003e04:	69fb      	ldr	r3, [r7, #28]
 8003e06:	f1c3 0307 	rsb	r3, r3, #7
 8003e0a:	2b04      	cmp	r3, #4
 8003e0c:	bf28      	it	cs
 8003e0e:	2304      	movcs	r3, #4
 8003e10:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8003e12:	69fb      	ldr	r3, [r7, #28]
 8003e14:	3304      	adds	r3, #4
 8003e16:	2b06      	cmp	r3, #6
 8003e18:	d902      	bls.n	8003e20 <NVIC_EncodePriority+0x30>
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	3b03      	subs	r3, #3
 8003e1e:	e000      	b.n	8003e22 <NVIC_EncodePriority+0x32>
 8003e20:	2300      	movs	r3, #0
 8003e22:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e24:	f04f 32ff 	mov.w	r2, #4294967295
 8003e28:	69bb      	ldr	r3, [r7, #24]
 8003e2a:	fa02 f303 	lsl.w	r3, r2, r3
 8003e2e:	43da      	mvns	r2, r3
 8003e30:	68bb      	ldr	r3, [r7, #8]
 8003e32:	401a      	ands	r2, r3
 8003e34:	697b      	ldr	r3, [r7, #20]
 8003e36:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8003e38:	f04f 31ff 	mov.w	r1, #4294967295
 8003e3c:	697b      	ldr	r3, [r7, #20]
 8003e3e:	fa01 f303 	lsl.w	r3, r1, r3
 8003e42:	43d9      	mvns	r1, r3
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8003e48:	4313      	orrs	r3, r2
         );
}
 8003e4a:	4618      	mov	r0, r3
 8003e4c:	3724      	adds	r7, #36	; 0x24
 8003e4e:	46bd      	mov	sp, r7
 8003e50:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003e54:	4770      	bx	lr
	...

08003e58 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003e58:	b580      	push	{r7, lr}
 8003e5a:	b082      	sub	sp, #8
 8003e5c:	af00      	add	r7, sp, #0
 8003e5e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003e60:	687b      	ldr	r3, [r7, #4]
 8003e62:	3b01      	subs	r3, #1
 8003e64:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003e68:	d301      	bcc.n	8003e6e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003e6a:	2301      	movs	r3, #1
 8003e6c:	e00f      	b.n	8003e8e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003e6e:	4a0a      	ldr	r2, [pc, #40]	; (8003e98 <SysTick_Config+0x40>)
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	3b01      	subs	r3, #1
 8003e74:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8003e76:	210f      	movs	r1, #15
 8003e78:	f04f 30ff 	mov.w	r0, #4294967295
 8003e7c:	f7ff ff8e 	bl	8003d9c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003e80:	4b05      	ldr	r3, [pc, #20]	; (8003e98 <SysTick_Config+0x40>)
 8003e82:	2200      	movs	r2, #0
 8003e84:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8003e86:	4b04      	ldr	r3, [pc, #16]	; (8003e98 <SysTick_Config+0x40>)
 8003e88:	2207      	movs	r2, #7
 8003e8a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003e8c:	2300      	movs	r3, #0
}
 8003e8e:	4618      	mov	r0, r3
 8003e90:	3708      	adds	r7, #8
 8003e92:	46bd      	mov	sp, r7
 8003e94:	bd80      	pop	{r7, pc}
 8003e96:	bf00      	nop
 8003e98:	e000e010 	.word	0xe000e010

08003e9c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003e9c:	b580      	push	{r7, lr}
 8003e9e:	b082      	sub	sp, #8
 8003ea0:	af00      	add	r7, sp, #0
 8003ea2:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8003ea4:	6878      	ldr	r0, [r7, #4]
 8003ea6:	f7ff ff05 	bl	8003cb4 <__NVIC_SetPriorityGrouping>
}
 8003eaa:	bf00      	nop
 8003eac:	3708      	adds	r7, #8
 8003eae:	46bd      	mov	sp, r7
 8003eb0:	bd80      	pop	{r7, pc}

08003eb2 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8003eb2:	b580      	push	{r7, lr}
 8003eb4:	b086      	sub	sp, #24
 8003eb6:	af00      	add	r7, sp, #0
 8003eb8:	4603      	mov	r3, r0
 8003eba:	60b9      	str	r1, [r7, #8]
 8003ebc:	607a      	str	r2, [r7, #4]
 8003ebe:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003ec0:	2300      	movs	r3, #0
 8003ec2:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8003ec4:	f7ff ff1a 	bl	8003cfc <__NVIC_GetPriorityGrouping>
 8003ec8:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003eca:	687a      	ldr	r2, [r7, #4]
 8003ecc:	68b9      	ldr	r1, [r7, #8]
 8003ece:	6978      	ldr	r0, [r7, #20]
 8003ed0:	f7ff ff8e 	bl	8003df0 <NVIC_EncodePriority>
 8003ed4:	4602      	mov	r2, r0
 8003ed6:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003eda:	4611      	mov	r1, r2
 8003edc:	4618      	mov	r0, r3
 8003ede:	f7ff ff5d 	bl	8003d9c <__NVIC_SetPriority>
}
 8003ee2:	bf00      	nop
 8003ee4:	3718      	adds	r7, #24
 8003ee6:	46bd      	mov	sp, r7
 8003ee8:	bd80      	pop	{r7, pc}

08003eea <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003eea:	b580      	push	{r7, lr}
 8003eec:	b082      	sub	sp, #8
 8003eee:	af00      	add	r7, sp, #0
 8003ef0:	4603      	mov	r3, r0
 8003ef2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8003ef4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003ef8:	4618      	mov	r0, r3
 8003efa:	f7ff ff0d 	bl	8003d18 <__NVIC_EnableIRQ>
}
 8003efe:	bf00      	nop
 8003f00:	3708      	adds	r7, #8
 8003f02:	46bd      	mov	sp, r7
 8003f04:	bd80      	pop	{r7, pc}

08003f06 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8003f06:	b580      	push	{r7, lr}
 8003f08:	b082      	sub	sp, #8
 8003f0a:	af00      	add	r7, sp, #0
 8003f0c:	4603      	mov	r3, r0
 8003f0e:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8003f10:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003f14:	4618      	mov	r0, r3
 8003f16:	f7ff ff1d 	bl	8003d54 <__NVIC_DisableIRQ>
}
 8003f1a:	bf00      	nop
 8003f1c:	3708      	adds	r7, #8
 8003f1e:	46bd      	mov	sp, r7
 8003f20:	bd80      	pop	{r7, pc}

08003f22 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8003f22:	b580      	push	{r7, lr}
 8003f24:	b082      	sub	sp, #8
 8003f26:	af00      	add	r7, sp, #0
 8003f28:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8003f2a:	6878      	ldr	r0, [r7, #4]
 8003f2c:	f7ff ff94 	bl	8003e58 <SysTick_Config>
 8003f30:	4603      	mov	r3, r0
}
 8003f32:	4618      	mov	r0, r3
 8003f34:	3708      	adds	r7, #8
 8003f36:	46bd      	mov	sp, r7
 8003f38:	bd80      	pop	{r7, pc}
	...

08003f3c <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 8003f3c:	b580      	push	{r7, lr}
 8003f3e:	b086      	sub	sp, #24
 8003f40:	af00      	add	r7, sp, #0
 8003f42:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 8003f44:	2300      	movs	r3, #0
 8003f46:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 8003f48:	f7ff fe84 	bl	8003c54 <HAL_GetTick>
 8003f4c:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 8003f4e:	687b      	ldr	r3, [r7, #4]
 8003f50:	2b00      	cmp	r3, #0
 8003f52:	d101      	bne.n	8003f58 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 8003f54:	2301      	movs	r3, #1
 8003f56:	e099      	b.n	800408c <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003f58:	687b      	ldr	r3, [r7, #4]
 8003f5a:	2200      	movs	r2, #0
 8003f5c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003f60:	687b      	ldr	r3, [r7, #4]
 8003f62:	2202      	movs	r2, #2
 8003f64:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003f68:	687b      	ldr	r3, [r7, #4]
 8003f6a:	681b      	ldr	r3, [r3, #0]
 8003f6c:	681a      	ldr	r2, [r3, #0]
 8003f6e:	687b      	ldr	r3, [r7, #4]
 8003f70:	681b      	ldr	r3, [r3, #0]
 8003f72:	f022 0201 	bic.w	r2, r2, #1
 8003f76:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f78:	e00f      	b.n	8003f9a <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003f7a:	f7ff fe6b 	bl	8003c54 <HAL_GetTick>
 8003f7e:	4602      	mov	r2, r0
 8003f80:	693b      	ldr	r3, [r7, #16]
 8003f82:	1ad3      	subs	r3, r2, r3
 8003f84:	2b05      	cmp	r3, #5
 8003f86:	d908      	bls.n	8003f9a <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003f88:	687b      	ldr	r3, [r7, #4]
 8003f8a:	2220      	movs	r2, #32
 8003f8c:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2203      	movs	r2, #3
 8003f92:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 8003f96:	2303      	movs	r3, #3
 8003f98:	e078      	b.n	800408c <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003f9a:	687b      	ldr	r3, [r7, #4]
 8003f9c:	681b      	ldr	r3, [r3, #0]
 8003f9e:	681b      	ldr	r3, [r3, #0]
 8003fa0:	f003 0301 	and.w	r3, r3, #1
 8003fa4:	2b00      	cmp	r3, #0
 8003fa6:	d1e8      	bne.n	8003f7a <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003fa8:	687b      	ldr	r3, [r7, #4]
 8003faa:	681b      	ldr	r3, [r3, #0]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003fb0:	697a      	ldr	r2, [r7, #20]
 8003fb2:	4b38      	ldr	r3, [pc, #224]	; (8004094 <HAL_DMA_Init+0x158>)
 8003fb4:	4013      	ands	r3, r2
 8003fb6:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fb8:	687b      	ldr	r3, [r7, #4]
 8003fba:	685a      	ldr	r2, [r3, #4]
 8003fbc:	687b      	ldr	r3, [r7, #4]
 8003fbe:	689b      	ldr	r3, [r3, #8]
 8003fc0:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc2:	687b      	ldr	r3, [r7, #4]
 8003fc4:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fc6:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fc8:	687b      	ldr	r3, [r7, #4]
 8003fca:	691b      	ldr	r3, [r3, #16]
 8003fcc:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fce:	687b      	ldr	r3, [r7, #4]
 8003fd0:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003fd2:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fd4:	687b      	ldr	r3, [r7, #4]
 8003fd6:	699b      	ldr	r3, [r3, #24]
 8003fd8:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003fde:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003fe0:	687b      	ldr	r3, [r7, #4]
 8003fe2:	6a1b      	ldr	r3, [r3, #32]
 8003fe4:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003fe6:	697a      	ldr	r2, [r7, #20]
 8003fe8:	4313      	orrs	r3, r2
 8003fea:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003fec:	687b      	ldr	r3, [r7, #4]
 8003fee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003ff0:	2b04      	cmp	r3, #4
 8003ff2:	d107      	bne.n	8004004 <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 8003ff4:	687b      	ldr	r3, [r7, #4]
 8003ff6:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 8003ff8:	687b      	ldr	r3, [r7, #4]
 8003ffa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8003ffc:	4313      	orrs	r3, r2
 8003ffe:	697a      	ldr	r2, [r7, #20]
 8004000:	4313      	orrs	r3, r2
 8004002:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 8004004:	687b      	ldr	r3, [r7, #4]
 8004006:	681b      	ldr	r3, [r3, #0]
 8004008:	697a      	ldr	r2, [r7, #20]
 800400a:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 800400c:	687b      	ldr	r3, [r7, #4]
 800400e:	681b      	ldr	r3, [r3, #0]
 8004010:	695b      	ldr	r3, [r3, #20]
 8004012:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 8004014:	697b      	ldr	r3, [r7, #20]
 8004016:	f023 0307 	bic.w	r3, r3, #7
 800401a:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 800401c:	687b      	ldr	r3, [r7, #4]
 800401e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004020:	697a      	ldr	r2, [r7, #20]
 8004022:	4313      	orrs	r3, r2
 8004024:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8004026:	687b      	ldr	r3, [r7, #4]
 8004028:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800402a:	2b04      	cmp	r3, #4
 800402c:	d117      	bne.n	800405e <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 800402e:	687b      	ldr	r3, [r7, #4]
 8004030:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004032:	697a      	ldr	r2, [r7, #20]
 8004034:	4313      	orrs	r3, r2
 8004036:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 8004038:	687b      	ldr	r3, [r7, #4]
 800403a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800403c:	2b00      	cmp	r3, #0
 800403e:	d00e      	beq.n	800405e <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 8004040:	6878      	ldr	r0, [r7, #4]
 8004042:	f000 fb0f 	bl	8004664 <DMA_CheckFifoParam>
 8004046:	4603      	mov	r3, r0
 8004048:	2b00      	cmp	r3, #0
 800404a:	d008      	beq.n	800405e <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 800404c:	687b      	ldr	r3, [r7, #4]
 800404e:	2240      	movs	r2, #64	; 0x40
 8004050:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8004052:	687b      	ldr	r3, [r7, #4]
 8004054:	2201      	movs	r2, #1
 8004056:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 800405a:	2301      	movs	r3, #1
 800405c:	e016      	b.n	800408c <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 800405e:	687b      	ldr	r3, [r7, #4]
 8004060:	681b      	ldr	r3, [r3, #0]
 8004062:	697a      	ldr	r2, [r7, #20]
 8004064:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 8004066:	6878      	ldr	r0, [r7, #4]
 8004068:	f000 fac6 	bl	80045f8 <DMA_CalcBaseAndBitshift>
 800406c:	4603      	mov	r3, r0
 800406e:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004070:	687b      	ldr	r3, [r7, #4]
 8004072:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004074:	223f      	movs	r2, #63	; 0x3f
 8004076:	409a      	lsls	r2, r3
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	2200      	movs	r2, #0
 8004080:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 8004082:	687b      	ldr	r3, [r7, #4]
 8004084:	2201      	movs	r2, #1
 8004086:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 800408a:	2300      	movs	r3, #0
}
 800408c:	4618      	mov	r0, r3
 800408e:	3718      	adds	r7, #24
 8004090:	46bd      	mov	sp, r7
 8004092:	bd80      	pop	{r7, pc}
 8004094:	f010803f 	.word	0xf010803f

08004098 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8004098:	b580      	push	{r7, lr}
 800409a:	b086      	sub	sp, #24
 800409c:	af00      	add	r7, sp, #0
 800409e:	60f8      	str	r0, [r7, #12]
 80040a0:	60b9      	str	r1, [r7, #8]
 80040a2:	607a      	str	r2, [r7, #4]
 80040a4:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 80040a6:	2300      	movs	r3, #0
 80040a8:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80040aa:	68fb      	ldr	r3, [r7, #12]
 80040ac:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80040ae:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 80040b0:	68fb      	ldr	r3, [r7, #12]
 80040b2:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 80040b6:	2b01      	cmp	r3, #1
 80040b8:	d101      	bne.n	80040be <HAL_DMA_Start_IT+0x26>
 80040ba:	2302      	movs	r3, #2
 80040bc:	e040      	b.n	8004140 <HAL_DMA_Start_IT+0xa8>
 80040be:	68fb      	ldr	r3, [r7, #12]
 80040c0:	2201      	movs	r2, #1
 80040c2:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 80040c6:	68fb      	ldr	r3, [r7, #12]
 80040c8:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80040cc:	b2db      	uxtb	r3, r3
 80040ce:	2b01      	cmp	r3, #1
 80040d0:	d12f      	bne.n	8004132 <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	2202      	movs	r2, #2
 80040d6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 80040da:	68fb      	ldr	r3, [r7, #12]
 80040dc:	2200      	movs	r2, #0
 80040de:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 80040e0:	683b      	ldr	r3, [r7, #0]
 80040e2:	687a      	ldr	r2, [r7, #4]
 80040e4:	68b9      	ldr	r1, [r7, #8]
 80040e6:	68f8      	ldr	r0, [r7, #12]
 80040e8:	f000 fa58 	bl	800459c <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80040ec:	68fb      	ldr	r3, [r7, #12]
 80040ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80040f0:	223f      	movs	r2, #63	; 0x3f
 80040f2:	409a      	lsls	r2, r3
 80040f4:	693b      	ldr	r3, [r7, #16]
 80040f6:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80040f8:	68fb      	ldr	r3, [r7, #12]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	681a      	ldr	r2, [r3, #0]
 80040fe:	68fb      	ldr	r3, [r7, #12]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f042 0216 	orr.w	r2, r2, #22
 8004106:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 8004108:	68fb      	ldr	r3, [r7, #12]
 800410a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800410c:	2b00      	cmp	r3, #0
 800410e:	d007      	beq.n	8004120 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 8004110:	68fb      	ldr	r3, [r7, #12]
 8004112:	681b      	ldr	r3, [r3, #0]
 8004114:	681a      	ldr	r2, [r3, #0]
 8004116:	68fb      	ldr	r3, [r7, #12]
 8004118:	681b      	ldr	r3, [r3, #0]
 800411a:	f042 0208 	orr.w	r2, r2, #8
 800411e:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 8004120:	68fb      	ldr	r3, [r7, #12]
 8004122:	681b      	ldr	r3, [r3, #0]
 8004124:	681a      	ldr	r2, [r3, #0]
 8004126:	68fb      	ldr	r3, [r7, #12]
 8004128:	681b      	ldr	r3, [r3, #0]
 800412a:	f042 0201 	orr.w	r2, r2, #1
 800412e:	601a      	str	r2, [r3, #0]
 8004130:	e005      	b.n	800413e <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 8004132:	68fb      	ldr	r3, [r7, #12]
 8004134:	2200      	movs	r2, #0
 8004136:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 800413a:	2302      	movs	r3, #2
 800413c:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 800413e:	7dfb      	ldrb	r3, [r7, #23]
}
 8004140:	4618      	mov	r0, r3
 8004142:	3718      	adds	r7, #24
 8004144:	46bd      	mov	sp, r7
 8004146:	bd80      	pop	{r7, pc}

08004148 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 8004148:	b580      	push	{r7, lr}
 800414a:	b084      	sub	sp, #16
 800414c:	af00      	add	r7, sp, #0
 800414e:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004150:	687b      	ldr	r3, [r7, #4]
 8004152:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8004154:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 8004156:	f7ff fd7d 	bl	8003c54 <HAL_GetTick>
 800415a:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004162:	b2db      	uxtb	r3, r3
 8004164:	2b02      	cmp	r3, #2
 8004166:	d008      	beq.n	800417a <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	2280      	movs	r2, #128	; 0x80
 800416c:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800416e:	687b      	ldr	r3, [r7, #4]
 8004170:	2200      	movs	r2, #0
 8004172:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 8004176:	2301      	movs	r3, #1
 8004178:	e052      	b.n	8004220 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 800417a:	687b      	ldr	r3, [r7, #4]
 800417c:	681b      	ldr	r3, [r3, #0]
 800417e:	681a      	ldr	r2, [r3, #0]
 8004180:	687b      	ldr	r3, [r7, #4]
 8004182:	681b      	ldr	r3, [r3, #0]
 8004184:	f022 0216 	bic.w	r2, r2, #22
 8004188:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	681b      	ldr	r3, [r3, #0]
 800418e:	695a      	ldr	r2, [r3, #20]
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004198:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800419e:	2b00      	cmp	r3, #0
 80041a0:	d103      	bne.n	80041aa <HAL_DMA_Abort+0x62>
 80041a2:	687b      	ldr	r3, [r7, #4]
 80041a4:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80041a6:	2b00      	cmp	r3, #0
 80041a8:	d007      	beq.n	80041ba <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 80041aa:	687b      	ldr	r3, [r7, #4]
 80041ac:	681b      	ldr	r3, [r3, #0]
 80041ae:	681a      	ldr	r2, [r3, #0]
 80041b0:	687b      	ldr	r3, [r7, #4]
 80041b2:	681b      	ldr	r3, [r3, #0]
 80041b4:	f022 0208 	bic.w	r2, r2, #8
 80041b8:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80041ba:	687b      	ldr	r3, [r7, #4]
 80041bc:	681b      	ldr	r3, [r3, #0]
 80041be:	681a      	ldr	r2, [r3, #0]
 80041c0:	687b      	ldr	r3, [r7, #4]
 80041c2:	681b      	ldr	r3, [r3, #0]
 80041c4:	f022 0201 	bic.w	r2, r2, #1
 80041c8:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041ca:	e013      	b.n	80041f4 <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 80041cc:	f7ff fd42 	bl	8003c54 <HAL_GetTick>
 80041d0:	4602      	mov	r2, r0
 80041d2:	68bb      	ldr	r3, [r7, #8]
 80041d4:	1ad3      	subs	r3, r2, r3
 80041d6:	2b05      	cmp	r3, #5
 80041d8:	d90c      	bls.n	80041f4 <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 80041da:	687b      	ldr	r3, [r7, #4]
 80041dc:	2220      	movs	r2, #32
 80041de:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 80041e0:	687b      	ldr	r3, [r7, #4]
 80041e2:	2200      	movs	r2, #0
 80041e4:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 80041e8:	687b      	ldr	r3, [r7, #4]
 80041ea:	2203      	movs	r2, #3
 80041ec:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 80041f0:	2303      	movs	r3, #3
 80041f2:	e015      	b.n	8004220 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 80041f4:	687b      	ldr	r3, [r7, #4]
 80041f6:	681b      	ldr	r3, [r3, #0]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	f003 0301 	and.w	r3, r3, #1
 80041fe:	2b00      	cmp	r3, #0
 8004200:	d1e4      	bne.n	80041cc <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004202:	687b      	ldr	r3, [r7, #4]
 8004204:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004206:	223f      	movs	r2, #63	; 0x3f
 8004208:	409a      	lsls	r2, r3
 800420a:	68fb      	ldr	r3, [r7, #12]
 800420c:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 800420e:	687b      	ldr	r3, [r7, #4]
 8004210:	2200      	movs	r2, #0
 8004212:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 8004216:	687b      	ldr	r3, [r7, #4]
 8004218:	2201      	movs	r2, #1
 800421a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 800421e:	2300      	movs	r3, #0
}
 8004220:	4618      	mov	r0, r3
 8004222:	3710      	adds	r7, #16
 8004224:	46bd      	mov	sp, r7
 8004226:	bd80      	pop	{r7, pc}

08004228 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 8004228:	b480      	push	{r7}
 800422a:	b083      	sub	sp, #12
 800422c:	af00      	add	r7, sp, #0
 800422e:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8004230:	687b      	ldr	r3, [r7, #4]
 8004232:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004236:	b2db      	uxtb	r3, r3
 8004238:	2b02      	cmp	r3, #2
 800423a:	d004      	beq.n	8004246 <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 800423c:	687b      	ldr	r3, [r7, #4]
 800423e:	2280      	movs	r2, #128	; 0x80
 8004240:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 8004242:	2301      	movs	r3, #1
 8004244:	e00c      	b.n	8004260 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	2205      	movs	r2, #5
 800424a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	681b      	ldr	r3, [r3, #0]
 8004252:	681a      	ldr	r2, [r3, #0]
 8004254:	687b      	ldr	r3, [r7, #4]
 8004256:	681b      	ldr	r3, [r3, #0]
 8004258:	f022 0201 	bic.w	r2, r2, #1
 800425c:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 800425e:	2300      	movs	r3, #0
}
 8004260:	4618      	mov	r0, r3
 8004262:	370c      	adds	r7, #12
 8004264:	46bd      	mov	sp, r7
 8004266:	f85d 7b04 	ldr.w	r7, [sp], #4
 800426a:	4770      	bx	lr

0800426c <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 800426c:	b580      	push	{r7, lr}
 800426e:	b086      	sub	sp, #24
 8004270:	af00      	add	r7, sp, #0
 8004272:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 8004274:	2300      	movs	r3, #0
 8004276:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8004278:	4b92      	ldr	r3, [pc, #584]	; (80044c4 <HAL_DMA_IRQHandler+0x258>)
 800427a:	681b      	ldr	r3, [r3, #0]
 800427c:	4a92      	ldr	r2, [pc, #584]	; (80044c8 <HAL_DMA_IRQHandler+0x25c>)
 800427e:	fba2 2303 	umull	r2, r3, r2, r3
 8004282:	0a9b      	lsrs	r3, r3, #10
 8004284:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8004286:	687b      	ldr	r3, [r7, #4]
 8004288:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 800428a:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 800428c:	693b      	ldr	r3, [r7, #16]
 800428e:	681b      	ldr	r3, [r3, #0]
 8004290:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 8004292:	687b      	ldr	r3, [r7, #4]
 8004294:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004296:	2208      	movs	r2, #8
 8004298:	409a      	lsls	r2, r3
 800429a:	68fb      	ldr	r3, [r7, #12]
 800429c:	4013      	ands	r3, r2
 800429e:	2b00      	cmp	r3, #0
 80042a0:	d01a      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 80042a2:	687b      	ldr	r3, [r7, #4]
 80042a4:	681b      	ldr	r3, [r3, #0]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	f003 0304 	and.w	r3, r3, #4
 80042ac:	2b00      	cmp	r3, #0
 80042ae:	d013      	beq.n	80042d8 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 80042b0:	687b      	ldr	r3, [r7, #4]
 80042b2:	681b      	ldr	r3, [r3, #0]
 80042b4:	681a      	ldr	r2, [r3, #0]
 80042b6:	687b      	ldr	r3, [r7, #4]
 80042b8:	681b      	ldr	r3, [r3, #0]
 80042ba:	f022 0204 	bic.w	r2, r2, #4
 80042be:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 80042c0:	687b      	ldr	r3, [r7, #4]
 80042c2:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042c4:	2208      	movs	r2, #8
 80042c6:	409a      	lsls	r2, r3
 80042c8:	693b      	ldr	r3, [r7, #16]
 80042ca:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 80042cc:	687b      	ldr	r3, [r7, #4]
 80042ce:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80042d0:	f043 0201 	orr.w	r2, r3, #1
 80042d4:	687b      	ldr	r3, [r7, #4]
 80042d6:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 80042d8:	687b      	ldr	r3, [r7, #4]
 80042da:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042dc:	2201      	movs	r2, #1
 80042de:	409a      	lsls	r2, r3
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	4013      	ands	r3, r2
 80042e4:	2b00      	cmp	r3, #0
 80042e6:	d012      	beq.n	800430e <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 80042e8:	687b      	ldr	r3, [r7, #4]
 80042ea:	681b      	ldr	r3, [r3, #0]
 80042ec:	695b      	ldr	r3, [r3, #20]
 80042ee:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80042f2:	2b00      	cmp	r3, #0
 80042f4:	d00b      	beq.n	800430e <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80042fa:	2201      	movs	r2, #1
 80042fc:	409a      	lsls	r2, r3
 80042fe:	693b      	ldr	r3, [r7, #16]
 8004300:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004306:	f043 0202 	orr.w	r2, r3, #2
 800430a:	687b      	ldr	r3, [r7, #4]
 800430c:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004312:	2204      	movs	r2, #4
 8004314:	409a      	lsls	r2, r3
 8004316:	68fb      	ldr	r3, [r7, #12]
 8004318:	4013      	ands	r3, r2
 800431a:	2b00      	cmp	r3, #0
 800431c:	d012      	beq.n	8004344 <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 800431e:	687b      	ldr	r3, [r7, #4]
 8004320:	681b      	ldr	r3, [r3, #0]
 8004322:	681b      	ldr	r3, [r3, #0]
 8004324:	f003 0302 	and.w	r3, r3, #2
 8004328:	2b00      	cmp	r3, #0
 800432a:	d00b      	beq.n	8004344 <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 800432c:	687b      	ldr	r3, [r7, #4]
 800432e:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004330:	2204      	movs	r2, #4
 8004332:	409a      	lsls	r2, r3
 8004334:	693b      	ldr	r3, [r7, #16]
 8004336:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 8004338:	687b      	ldr	r3, [r7, #4]
 800433a:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800433c:	f043 0204 	orr.w	r2, r3, #4
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 8004344:	687b      	ldr	r3, [r7, #4]
 8004346:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004348:	2210      	movs	r2, #16
 800434a:	409a      	lsls	r2, r3
 800434c:	68fb      	ldr	r3, [r7, #12]
 800434e:	4013      	ands	r3, r2
 8004350:	2b00      	cmp	r3, #0
 8004352:	d043      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 8004354:	687b      	ldr	r3, [r7, #4]
 8004356:	681b      	ldr	r3, [r3, #0]
 8004358:	681b      	ldr	r3, [r3, #0]
 800435a:	f003 0308 	and.w	r3, r3, #8
 800435e:	2b00      	cmp	r3, #0
 8004360:	d03c      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004366:	2210      	movs	r2, #16
 8004368:	409a      	lsls	r2, r3
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800436e:	687b      	ldr	r3, [r7, #4]
 8004370:	681b      	ldr	r3, [r3, #0]
 8004372:	681b      	ldr	r3, [r3, #0]
 8004374:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8004378:	2b00      	cmp	r3, #0
 800437a:	d018      	beq.n	80043ae <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	681b      	ldr	r3, [r3, #0]
 8004382:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8004386:	2b00      	cmp	r3, #0
 8004388:	d108      	bne.n	800439c <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 800438a:	687b      	ldr	r3, [r7, #4]
 800438c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800438e:	2b00      	cmp	r3, #0
 8004390:	d024      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 8004392:	687b      	ldr	r3, [r7, #4]
 8004394:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004396:	6878      	ldr	r0, [r7, #4]
 8004398:	4798      	blx	r3
 800439a:	e01f      	b.n	80043dc <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 800439c:	687b      	ldr	r3, [r7, #4]
 800439e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a0:	2b00      	cmp	r3, #0
 80043a2:	d01b      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 80043a4:	687b      	ldr	r3, [r7, #4]
 80043a6:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80043a8:	6878      	ldr	r0, [r7, #4]
 80043aa:	4798      	blx	r3
 80043ac:	e016      	b.n	80043dc <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80043ae:	687b      	ldr	r3, [r7, #4]
 80043b0:	681b      	ldr	r3, [r3, #0]
 80043b2:	681b      	ldr	r3, [r3, #0]
 80043b4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d107      	bne.n	80043cc <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80043bc:	687b      	ldr	r3, [r7, #4]
 80043be:	681b      	ldr	r3, [r3, #0]
 80043c0:	681a      	ldr	r2, [r3, #0]
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	681b      	ldr	r3, [r3, #0]
 80043c6:	f022 0208 	bic.w	r2, r2, #8
 80043ca:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 80043cc:	687b      	ldr	r3, [r7, #4]
 80043ce:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d0:	2b00      	cmp	r3, #0
 80043d2:	d003      	beq.n	80043dc <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80043d8:	6878      	ldr	r0, [r7, #4]
 80043da:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 80043dc:	687b      	ldr	r3, [r7, #4]
 80043de:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80043e0:	2220      	movs	r2, #32
 80043e2:	409a      	lsls	r2, r3
 80043e4:	68fb      	ldr	r3, [r7, #12]
 80043e6:	4013      	ands	r3, r2
 80043e8:	2b00      	cmp	r3, #0
 80043ea:	f000 808e 	beq.w	800450a <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 80043ee:	687b      	ldr	r3, [r7, #4]
 80043f0:	681b      	ldr	r3, [r3, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	f003 0310 	and.w	r3, r3, #16
 80043f8:	2b00      	cmp	r3, #0
 80043fa:	f000 8086 	beq.w	800450a <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80043fe:	687b      	ldr	r3, [r7, #4]
 8004400:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8004402:	2220      	movs	r2, #32
 8004404:	409a      	lsls	r2, r3
 8004406:	693b      	ldr	r3, [r7, #16]
 8004408:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 800440a:	687b      	ldr	r3, [r7, #4]
 800440c:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8004410:	b2db      	uxtb	r3, r3
 8004412:	2b05      	cmp	r3, #5
 8004414:	d136      	bne.n	8004484 <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8004416:	687b      	ldr	r3, [r7, #4]
 8004418:	681b      	ldr	r3, [r3, #0]
 800441a:	681a      	ldr	r2, [r3, #0]
 800441c:	687b      	ldr	r3, [r7, #4]
 800441e:	681b      	ldr	r3, [r3, #0]
 8004420:	f022 0216 	bic.w	r2, r2, #22
 8004424:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 8004426:	687b      	ldr	r3, [r7, #4]
 8004428:	681b      	ldr	r3, [r3, #0]
 800442a:	695a      	ldr	r2, [r3, #20]
 800442c:	687b      	ldr	r3, [r7, #4]
 800442e:	681b      	ldr	r3, [r3, #0]
 8004430:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8004434:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8004436:	687b      	ldr	r3, [r7, #4]
 8004438:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800443a:	2b00      	cmp	r3, #0
 800443c:	d103      	bne.n	8004446 <HAL_DMA_IRQHandler+0x1da>
 800443e:	687b      	ldr	r3, [r7, #4]
 8004440:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004442:	2b00      	cmp	r3, #0
 8004444:	d007      	beq.n	8004456 <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8004446:	687b      	ldr	r3, [r7, #4]
 8004448:	681b      	ldr	r3, [r3, #0]
 800444a:	681a      	ldr	r2, [r3, #0]
 800444c:	687b      	ldr	r3, [r7, #4]
 800444e:	681b      	ldr	r3, [r3, #0]
 8004450:	f022 0208 	bic.w	r2, r2, #8
 8004454:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 8004456:	687b      	ldr	r3, [r7, #4]
 8004458:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800445a:	223f      	movs	r2, #63	; 0x3f
 800445c:	409a      	lsls	r2, r3
 800445e:	693b      	ldr	r3, [r7, #16]
 8004460:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8004462:	687b      	ldr	r3, [r7, #4]
 8004464:	2200      	movs	r2, #0
 8004466:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	2201      	movs	r2, #1
 800446e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 8004472:	687b      	ldr	r3, [r7, #4]
 8004474:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004476:	2b00      	cmp	r3, #0
 8004478:	d07d      	beq.n	8004576 <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 800447a:	687b      	ldr	r3, [r7, #4]
 800447c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800447e:	6878      	ldr	r0, [r7, #4]
 8004480:	4798      	blx	r3
        }
        return;
 8004482:	e078      	b.n	8004576 <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8004484:	687b      	ldr	r3, [r7, #4]
 8004486:	681b      	ldr	r3, [r3, #0]
 8004488:	681b      	ldr	r3, [r3, #0]
 800448a:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 800448e:	2b00      	cmp	r3, #0
 8004490:	d01c      	beq.n	80044cc <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	681b      	ldr	r3, [r3, #0]
 8004498:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800449c:	2b00      	cmp	r3, #0
 800449e:	d108      	bne.n	80044b2 <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 80044a0:	687b      	ldr	r3, [r7, #4]
 80044a2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044a4:	2b00      	cmp	r3, #0
 80044a6:	d030      	beq.n	800450a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 80044a8:	687b      	ldr	r3, [r7, #4]
 80044aa:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80044ac:	6878      	ldr	r0, [r7, #4]
 80044ae:	4798      	blx	r3
 80044b0:	e02b      	b.n	800450a <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044b6:	2b00      	cmp	r3, #0
 80044b8:	d027      	beq.n	800450a <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 80044ba:	687b      	ldr	r3, [r7, #4]
 80044bc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044be:	6878      	ldr	r0, [r7, #4]
 80044c0:	4798      	blx	r3
 80044c2:	e022      	b.n	800450a <HAL_DMA_IRQHandler+0x29e>
 80044c4:	20000030 	.word	0x20000030
 80044c8:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 80044cc:	687b      	ldr	r3, [r7, #4]
 80044ce:	681b      	ldr	r3, [r3, #0]
 80044d0:	681b      	ldr	r3, [r3, #0]
 80044d2:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80044d6:	2b00      	cmp	r3, #0
 80044d8:	d10f      	bne.n	80044fa <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 80044da:	687b      	ldr	r3, [r7, #4]
 80044dc:	681b      	ldr	r3, [r3, #0]
 80044de:	681a      	ldr	r2, [r3, #0]
 80044e0:	687b      	ldr	r3, [r7, #4]
 80044e2:	681b      	ldr	r3, [r3, #0]
 80044e4:	f022 0210 	bic.w	r2, r2, #16
 80044e8:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 80044ea:	687b      	ldr	r3, [r7, #4]
 80044ec:	2200      	movs	r2, #0
 80044ee:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 80044f2:	687b      	ldr	r3, [r7, #4]
 80044f4:	2201      	movs	r2, #1
 80044f6:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80044fa:	687b      	ldr	r3, [r7, #4]
 80044fc:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80044fe:	2b00      	cmp	r3, #0
 8004500:	d003      	beq.n	800450a <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 8004502:	687b      	ldr	r3, [r7, #4]
 8004504:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004506:	6878      	ldr	r0, [r7, #4]
 8004508:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 800450e:	2b00      	cmp	r3, #0
 8004510:	d032      	beq.n	8004578 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 8004512:	687b      	ldr	r3, [r7, #4]
 8004514:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8004516:	f003 0301 	and.w	r3, r3, #1
 800451a:	2b00      	cmp	r3, #0
 800451c:	d022      	beq.n	8004564 <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 800451e:	687b      	ldr	r3, [r7, #4]
 8004520:	2205      	movs	r2, #5
 8004522:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 8004526:	687b      	ldr	r3, [r7, #4]
 8004528:	681b      	ldr	r3, [r3, #0]
 800452a:	681a      	ldr	r2, [r3, #0]
 800452c:	687b      	ldr	r3, [r7, #4]
 800452e:	681b      	ldr	r3, [r3, #0]
 8004530:	f022 0201 	bic.w	r2, r2, #1
 8004534:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 8004536:	68bb      	ldr	r3, [r7, #8]
 8004538:	3301      	adds	r3, #1
 800453a:	60bb      	str	r3, [r7, #8]
 800453c:	697a      	ldr	r2, [r7, #20]
 800453e:	429a      	cmp	r2, r3
 8004540:	d307      	bcc.n	8004552 <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 8004542:	687b      	ldr	r3, [r7, #4]
 8004544:	681b      	ldr	r3, [r3, #0]
 8004546:	681b      	ldr	r3, [r3, #0]
 8004548:	f003 0301 	and.w	r3, r3, #1
 800454c:	2b00      	cmp	r3, #0
 800454e:	d1f2      	bne.n	8004536 <HAL_DMA_IRQHandler+0x2ca>
 8004550:	e000      	b.n	8004554 <HAL_DMA_IRQHandler+0x2e8>
          break;
 8004552:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 8004554:	687b      	ldr	r3, [r7, #4]
 8004556:	2200      	movs	r2, #0
 8004558:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 800455c:	687b      	ldr	r3, [r7, #4]
 800455e:	2201      	movs	r2, #1
 8004560:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8004564:	687b      	ldr	r3, [r7, #4]
 8004566:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004568:	2b00      	cmp	r3, #0
 800456a:	d005      	beq.n	8004578 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 800456c:	687b      	ldr	r3, [r7, #4]
 800456e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004570:	6878      	ldr	r0, [r7, #4]
 8004572:	4798      	blx	r3
 8004574:	e000      	b.n	8004578 <HAL_DMA_IRQHandler+0x30c>
        return;
 8004576:	bf00      	nop
    }
  }
}
 8004578:	3718      	adds	r7, #24
 800457a:	46bd      	mov	sp, r7
 800457c:	bd80      	pop	{r7, pc}
 800457e:	bf00      	nop

08004580 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8004580:	b480      	push	{r7}
 8004582:	b083      	sub	sp, #12
 8004584:	af00      	add	r7, sp, #0
 8004586:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8004588:	687b      	ldr	r3, [r7, #4]
 800458a:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800458e:	b2db      	uxtb	r3, r3
}
 8004590:	4618      	mov	r0, r3
 8004592:	370c      	adds	r7, #12
 8004594:	46bd      	mov	sp, r7
 8004596:	f85d 7b04 	ldr.w	r7, [sp], #4
 800459a:	4770      	bx	lr

0800459c <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 800459c:	b480      	push	{r7}
 800459e:	b085      	sub	sp, #20
 80045a0:	af00      	add	r7, sp, #0
 80045a2:	60f8      	str	r0, [r7, #12]
 80045a4:	60b9      	str	r1, [r7, #8]
 80045a6:	607a      	str	r2, [r7, #4]
 80045a8:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 80045aa:	68fb      	ldr	r3, [r7, #12]
 80045ac:	681b      	ldr	r3, [r3, #0]
 80045ae:	681a      	ldr	r2, [r3, #0]
 80045b0:	68fb      	ldr	r3, [r7, #12]
 80045b2:	681b      	ldr	r3, [r3, #0]
 80045b4:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 80045b8:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 80045ba:	68fb      	ldr	r3, [r7, #12]
 80045bc:	681b      	ldr	r3, [r3, #0]
 80045be:	683a      	ldr	r2, [r7, #0]
 80045c0:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 80045c2:	68fb      	ldr	r3, [r7, #12]
 80045c4:	689b      	ldr	r3, [r3, #8]
 80045c6:	2b40      	cmp	r3, #64	; 0x40
 80045c8:	d108      	bne.n	80045dc <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 80045ca:	68fb      	ldr	r3, [r7, #12]
 80045cc:	681b      	ldr	r3, [r3, #0]
 80045ce:	687a      	ldr	r2, [r7, #4]
 80045d0:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 80045d2:	68fb      	ldr	r3, [r7, #12]
 80045d4:	681b      	ldr	r3, [r3, #0]
 80045d6:	68ba      	ldr	r2, [r7, #8]
 80045d8:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 80045da:	e007      	b.n	80045ec <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 80045dc:	68fb      	ldr	r3, [r7, #12]
 80045de:	681b      	ldr	r3, [r3, #0]
 80045e0:	68ba      	ldr	r2, [r7, #8]
 80045e2:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 80045e4:	68fb      	ldr	r3, [r7, #12]
 80045e6:	681b      	ldr	r3, [r3, #0]
 80045e8:	687a      	ldr	r2, [r7, #4]
 80045ea:	60da      	str	r2, [r3, #12]
}
 80045ec:	bf00      	nop
 80045ee:	3714      	adds	r7, #20
 80045f0:	46bd      	mov	sp, r7
 80045f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045f6:	4770      	bx	lr

080045f8 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 80045f8:	b480      	push	{r7}
 80045fa:	b085      	sub	sp, #20
 80045fc:	af00      	add	r7, sp, #0
 80045fe:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8004600:	687b      	ldr	r3, [r7, #4]
 8004602:	681b      	ldr	r3, [r3, #0]
 8004604:	b2db      	uxtb	r3, r3
 8004606:	3b10      	subs	r3, #16
 8004608:	4a14      	ldr	r2, [pc, #80]	; (800465c <DMA_CalcBaseAndBitshift+0x64>)
 800460a:	fba2 2303 	umull	r2, r3, r2, r3
 800460e:	091b      	lsrs	r3, r3, #4
 8004610:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8004612:	4a13      	ldr	r2, [pc, #76]	; (8004660 <DMA_CalcBaseAndBitshift+0x68>)
 8004614:	68fb      	ldr	r3, [r7, #12]
 8004616:	4413      	add	r3, r2
 8004618:	781b      	ldrb	r3, [r3, #0]
 800461a:	461a      	mov	r2, r3
 800461c:	687b      	ldr	r3, [r7, #4]
 800461e:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8004620:	68fb      	ldr	r3, [r7, #12]
 8004622:	2b03      	cmp	r3, #3
 8004624:	d909      	bls.n	800463a <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 800462e:	f023 0303 	bic.w	r3, r3, #3
 8004632:	1d1a      	adds	r2, r3, #4
 8004634:	687b      	ldr	r3, [r7, #4]
 8004636:	659a      	str	r2, [r3, #88]	; 0x58
 8004638:	e007      	b.n	800464a <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	681b      	ldr	r3, [r3, #0]
 800463e:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8004642:	f023 0303 	bic.w	r3, r3, #3
 8004646:	687a      	ldr	r2, [r7, #4]
 8004648:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 800464a:	687b      	ldr	r3, [r7, #4]
 800464c:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 800464e:	4618      	mov	r0, r3
 8004650:	3714      	adds	r7, #20
 8004652:	46bd      	mov	sp, r7
 8004654:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004658:	4770      	bx	lr
 800465a:	bf00      	nop
 800465c:	aaaaaaab 	.word	0xaaaaaaab
 8004660:	0800a1f0 	.word	0x0800a1f0

08004664 <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8004664:	b480      	push	{r7}
 8004666:	b085      	sub	sp, #20
 8004668:	af00      	add	r7, sp, #0
 800466a:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 800466c:	2300      	movs	r3, #0
 800466e:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8004670:	687b      	ldr	r3, [r7, #4]
 8004672:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8004674:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8004676:	687b      	ldr	r3, [r7, #4]
 8004678:	699b      	ldr	r3, [r3, #24]
 800467a:	2b00      	cmp	r3, #0
 800467c:	d11f      	bne.n	80046be <DMA_CheckFifoParam+0x5a>
 800467e:	68bb      	ldr	r3, [r7, #8]
 8004680:	2b03      	cmp	r3, #3
 8004682:	d856      	bhi.n	8004732 <DMA_CheckFifoParam+0xce>
 8004684:	a201      	add	r2, pc, #4	; (adr r2, 800468c <DMA_CheckFifoParam+0x28>)
 8004686:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 800468a:	bf00      	nop
 800468c:	0800469d 	.word	0x0800469d
 8004690:	080046af 	.word	0x080046af
 8004694:	0800469d 	.word	0x0800469d
 8004698:	08004733 	.word	0x08004733
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 800469c:	687b      	ldr	r3, [r7, #4]
 800469e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046a0:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046a4:	2b00      	cmp	r3, #0
 80046a6:	d046      	beq.n	8004736 <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 80046a8:	2301      	movs	r3, #1
 80046aa:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046ac:	e043      	b.n	8004736 <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046ae:	687b      	ldr	r3, [r7, #4]
 80046b0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046b2:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 80046b6:	d140      	bne.n	800473a <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 80046b8:	2301      	movs	r3, #1
 80046ba:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046bc:	e03d      	b.n	800473a <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 80046be:	687b      	ldr	r3, [r7, #4]
 80046c0:	699b      	ldr	r3, [r3, #24]
 80046c2:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 80046c6:	d121      	bne.n	800470c <DMA_CheckFifoParam+0xa8>
 80046c8:	68bb      	ldr	r3, [r7, #8]
 80046ca:	2b03      	cmp	r3, #3
 80046cc:	d837      	bhi.n	800473e <DMA_CheckFifoParam+0xda>
 80046ce:	a201      	add	r2, pc, #4	; (adr r2, 80046d4 <DMA_CheckFifoParam+0x70>)
 80046d0:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 80046d4:	080046e5 	.word	0x080046e5
 80046d8:	080046eb 	.word	0x080046eb
 80046dc:	080046e5 	.word	0x080046e5
 80046e0:	080046fd 	.word	0x080046fd
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 80046e4:	2301      	movs	r3, #1
 80046e6:	73fb      	strb	r3, [r7, #15]
      break;
 80046e8:	e030      	b.n	800474c <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 80046ea:	687b      	ldr	r3, [r7, #4]
 80046ec:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80046ee:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 80046f2:	2b00      	cmp	r3, #0
 80046f4:	d025      	beq.n	8004742 <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 80046f6:	2301      	movs	r3, #1
 80046f8:	73fb      	strb	r3, [r7, #15]
      }
      break;
 80046fa:	e022      	b.n	8004742 <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 80046fc:	687b      	ldr	r3, [r7, #4]
 80046fe:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004700:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8004704:	d11f      	bne.n	8004746 <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8004706:	2301      	movs	r3, #1
 8004708:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 800470a:	e01c      	b.n	8004746 <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 800470c:	68bb      	ldr	r3, [r7, #8]
 800470e:	2b02      	cmp	r3, #2
 8004710:	d903      	bls.n	800471a <DMA_CheckFifoParam+0xb6>
 8004712:	68bb      	ldr	r3, [r7, #8]
 8004714:	2b03      	cmp	r3, #3
 8004716:	d003      	beq.n	8004720 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8004718:	e018      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 800471a:	2301      	movs	r3, #1
 800471c:	73fb      	strb	r3, [r7, #15]
      break;
 800471e:	e015      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8004720:	687b      	ldr	r3, [r7, #4]
 8004722:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004724:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8004728:	2b00      	cmp	r3, #0
 800472a:	d00e      	beq.n	800474a <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 800472c:	2301      	movs	r3, #1
 800472e:	73fb      	strb	r3, [r7, #15]
      break;
 8004730:	e00b      	b.n	800474a <DMA_CheckFifoParam+0xe6>
      break;
 8004732:	bf00      	nop
 8004734:	e00a      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 8004736:	bf00      	nop
 8004738:	e008      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 800473a:	bf00      	nop
 800473c:	e006      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 800473e:	bf00      	nop
 8004740:	e004      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 8004742:	bf00      	nop
 8004744:	e002      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;   
 8004746:	bf00      	nop
 8004748:	e000      	b.n	800474c <DMA_CheckFifoParam+0xe8>
      break;
 800474a:	bf00      	nop
    }
  } 
  
  return status; 
 800474c:	7bfb      	ldrb	r3, [r7, #15]
}
 800474e:	4618      	mov	r0, r3
 8004750:	3714      	adds	r7, #20
 8004752:	46bd      	mov	sp, r7
 8004754:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004758:	4770      	bx	lr
 800475a:	bf00      	nop

0800475c <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 800475c:	b480      	push	{r7}
 800475e:	b089      	sub	sp, #36	; 0x24
 8004760:	af00      	add	r7, sp, #0
 8004762:	6078      	str	r0, [r7, #4]
 8004764:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8004766:	2300      	movs	r3, #0
 8004768:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 800476a:	2300      	movs	r3, #0
 800476c:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 800476e:	2300      	movs	r3, #0
 8004770:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004772:	2300      	movs	r3, #0
 8004774:	61fb      	str	r3, [r7, #28]
 8004776:	e159      	b.n	8004a2c <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8004778:	2201      	movs	r2, #1
 800477a:	69fb      	ldr	r3, [r7, #28]
 800477c:	fa02 f303 	lsl.w	r3, r2, r3
 8004780:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8004782:	683b      	ldr	r3, [r7, #0]
 8004784:	681b      	ldr	r3, [r3, #0]
 8004786:	697a      	ldr	r2, [r7, #20]
 8004788:	4013      	ands	r3, r2
 800478a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 800478c:	693a      	ldr	r2, [r7, #16]
 800478e:	697b      	ldr	r3, [r7, #20]
 8004790:	429a      	cmp	r2, r3
 8004792:	f040 8148 	bne.w	8004a26 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8004796:	683b      	ldr	r3, [r7, #0]
 8004798:	685b      	ldr	r3, [r3, #4]
 800479a:	f003 0303 	and.w	r3, r3, #3
 800479e:	2b01      	cmp	r3, #1
 80047a0:	d005      	beq.n	80047ae <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 80047a2:	683b      	ldr	r3, [r7, #0]
 80047a4:	685b      	ldr	r3, [r3, #4]
 80047a6:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 80047aa:	2b02      	cmp	r3, #2
 80047ac:	d130      	bne.n	8004810 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 80047ae:	687b      	ldr	r3, [r7, #4]
 80047b0:	689b      	ldr	r3, [r3, #8]
 80047b2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 80047b4:	69fb      	ldr	r3, [r7, #28]
 80047b6:	005b      	lsls	r3, r3, #1
 80047b8:	2203      	movs	r2, #3
 80047ba:	fa02 f303 	lsl.w	r3, r2, r3
 80047be:	43db      	mvns	r3, r3
 80047c0:	69ba      	ldr	r2, [r7, #24]
 80047c2:	4013      	ands	r3, r2
 80047c4:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 80047c6:	683b      	ldr	r3, [r7, #0]
 80047c8:	68da      	ldr	r2, [r3, #12]
 80047ca:	69fb      	ldr	r3, [r7, #28]
 80047cc:	005b      	lsls	r3, r3, #1
 80047ce:	fa02 f303 	lsl.w	r3, r2, r3
 80047d2:	69ba      	ldr	r2, [r7, #24]
 80047d4:	4313      	orrs	r3, r2
 80047d6:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 80047d8:	687b      	ldr	r3, [r7, #4]
 80047da:	69ba      	ldr	r2, [r7, #24]
 80047dc:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 80047de:	687b      	ldr	r3, [r7, #4]
 80047e0:	685b      	ldr	r3, [r3, #4]
 80047e2:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 80047e4:	2201      	movs	r2, #1
 80047e6:	69fb      	ldr	r3, [r7, #28]
 80047e8:	fa02 f303 	lsl.w	r3, r2, r3
 80047ec:	43db      	mvns	r3, r3
 80047ee:	69ba      	ldr	r2, [r7, #24]
 80047f0:	4013      	ands	r3, r2
 80047f2:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 80047f4:	683b      	ldr	r3, [r7, #0]
 80047f6:	685b      	ldr	r3, [r3, #4]
 80047f8:	091b      	lsrs	r3, r3, #4
 80047fa:	f003 0201 	and.w	r2, r3, #1
 80047fe:	69fb      	ldr	r3, [r7, #28]
 8004800:	fa02 f303 	lsl.w	r3, r2, r3
 8004804:	69ba      	ldr	r2, [r7, #24]
 8004806:	4313      	orrs	r3, r2
 8004808:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 800480a:	687b      	ldr	r3, [r7, #4]
 800480c:	69ba      	ldr	r2, [r7, #24]
 800480e:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8004810:	683b      	ldr	r3, [r7, #0]
 8004812:	685b      	ldr	r3, [r3, #4]
 8004814:	f003 0303 	and.w	r3, r3, #3
 8004818:	2b03      	cmp	r3, #3
 800481a:	d017      	beq.n	800484c <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 800481c:	687b      	ldr	r3, [r7, #4]
 800481e:	68db      	ldr	r3, [r3, #12]
 8004820:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8004822:	69fb      	ldr	r3, [r7, #28]
 8004824:	005b      	lsls	r3, r3, #1
 8004826:	2203      	movs	r2, #3
 8004828:	fa02 f303 	lsl.w	r3, r2, r3
 800482c:	43db      	mvns	r3, r3
 800482e:	69ba      	ldr	r2, [r7, #24]
 8004830:	4013      	ands	r3, r2
 8004832:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8004834:	683b      	ldr	r3, [r7, #0]
 8004836:	689a      	ldr	r2, [r3, #8]
 8004838:	69fb      	ldr	r3, [r7, #28]
 800483a:	005b      	lsls	r3, r3, #1
 800483c:	fa02 f303 	lsl.w	r3, r2, r3
 8004840:	69ba      	ldr	r2, [r7, #24]
 8004842:	4313      	orrs	r3, r2
 8004844:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8004846:	687b      	ldr	r3, [r7, #4]
 8004848:	69ba      	ldr	r2, [r7, #24]
 800484a:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 800484c:	683b      	ldr	r3, [r7, #0]
 800484e:	685b      	ldr	r3, [r3, #4]
 8004850:	f003 0303 	and.w	r3, r3, #3
 8004854:	2b02      	cmp	r3, #2
 8004856:	d123      	bne.n	80048a0 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8004858:	69fb      	ldr	r3, [r7, #28]
 800485a:	08da      	lsrs	r2, r3, #3
 800485c:	687b      	ldr	r3, [r7, #4]
 800485e:	3208      	adds	r2, #8
 8004860:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8004864:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8004866:	69fb      	ldr	r3, [r7, #28]
 8004868:	f003 0307 	and.w	r3, r3, #7
 800486c:	009b      	lsls	r3, r3, #2
 800486e:	220f      	movs	r2, #15
 8004870:	fa02 f303 	lsl.w	r3, r2, r3
 8004874:	43db      	mvns	r3, r3
 8004876:	69ba      	ldr	r2, [r7, #24]
 8004878:	4013      	ands	r3, r2
 800487a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 800487c:	683b      	ldr	r3, [r7, #0]
 800487e:	691a      	ldr	r2, [r3, #16]
 8004880:	69fb      	ldr	r3, [r7, #28]
 8004882:	f003 0307 	and.w	r3, r3, #7
 8004886:	009b      	lsls	r3, r3, #2
 8004888:	fa02 f303 	lsl.w	r3, r2, r3
 800488c:	69ba      	ldr	r2, [r7, #24]
 800488e:	4313      	orrs	r3, r2
 8004890:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8004892:	69fb      	ldr	r3, [r7, #28]
 8004894:	08da      	lsrs	r2, r3, #3
 8004896:	687b      	ldr	r3, [r7, #4]
 8004898:	3208      	adds	r2, #8
 800489a:	69b9      	ldr	r1, [r7, #24]
 800489c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 80048a0:	687b      	ldr	r3, [r7, #4]
 80048a2:	681b      	ldr	r3, [r3, #0]
 80048a4:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 80048a6:	69fb      	ldr	r3, [r7, #28]
 80048a8:	005b      	lsls	r3, r3, #1
 80048aa:	2203      	movs	r2, #3
 80048ac:	fa02 f303 	lsl.w	r3, r2, r3
 80048b0:	43db      	mvns	r3, r3
 80048b2:	69ba      	ldr	r2, [r7, #24]
 80048b4:	4013      	ands	r3, r2
 80048b6:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 80048b8:	683b      	ldr	r3, [r7, #0]
 80048ba:	685b      	ldr	r3, [r3, #4]
 80048bc:	f003 0203 	and.w	r2, r3, #3
 80048c0:	69fb      	ldr	r3, [r7, #28]
 80048c2:	005b      	lsls	r3, r3, #1
 80048c4:	fa02 f303 	lsl.w	r3, r2, r3
 80048c8:	69ba      	ldr	r2, [r7, #24]
 80048ca:	4313      	orrs	r3, r2
 80048cc:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 80048ce:	687b      	ldr	r3, [r7, #4]
 80048d0:	69ba      	ldr	r2, [r7, #24]
 80048d2:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 80048d4:	683b      	ldr	r3, [r7, #0]
 80048d6:	685b      	ldr	r3, [r3, #4]
 80048d8:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80048dc:	2b00      	cmp	r3, #0
 80048de:	f000 80a2 	beq.w	8004a26 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 80048e2:	2300      	movs	r3, #0
 80048e4:	60fb      	str	r3, [r7, #12]
 80048e6:	4b57      	ldr	r3, [pc, #348]	; (8004a44 <HAL_GPIO_Init+0x2e8>)
 80048e8:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048ea:	4a56      	ldr	r2, [pc, #344]	; (8004a44 <HAL_GPIO_Init+0x2e8>)
 80048ec:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 80048f0:	6453      	str	r3, [r2, #68]	; 0x44
 80048f2:	4b54      	ldr	r3, [pc, #336]	; (8004a44 <HAL_GPIO_Init+0x2e8>)
 80048f4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80048f6:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 80048fa:	60fb      	str	r3, [r7, #12]
 80048fc:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 80048fe:	4a52      	ldr	r2, [pc, #328]	; (8004a48 <HAL_GPIO_Init+0x2ec>)
 8004900:	69fb      	ldr	r3, [r7, #28]
 8004902:	089b      	lsrs	r3, r3, #2
 8004904:	3302      	adds	r3, #2
 8004906:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 800490a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 800490c:	69fb      	ldr	r3, [r7, #28]
 800490e:	f003 0303 	and.w	r3, r3, #3
 8004912:	009b      	lsls	r3, r3, #2
 8004914:	220f      	movs	r2, #15
 8004916:	fa02 f303 	lsl.w	r3, r2, r3
 800491a:	43db      	mvns	r3, r3
 800491c:	69ba      	ldr	r2, [r7, #24]
 800491e:	4013      	ands	r3, r2
 8004920:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8004922:	687b      	ldr	r3, [r7, #4]
 8004924:	4a49      	ldr	r2, [pc, #292]	; (8004a4c <HAL_GPIO_Init+0x2f0>)
 8004926:	4293      	cmp	r3, r2
 8004928:	d019      	beq.n	800495e <HAL_GPIO_Init+0x202>
 800492a:	687b      	ldr	r3, [r7, #4]
 800492c:	4a48      	ldr	r2, [pc, #288]	; (8004a50 <HAL_GPIO_Init+0x2f4>)
 800492e:	4293      	cmp	r3, r2
 8004930:	d013      	beq.n	800495a <HAL_GPIO_Init+0x1fe>
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	4a47      	ldr	r2, [pc, #284]	; (8004a54 <HAL_GPIO_Init+0x2f8>)
 8004936:	4293      	cmp	r3, r2
 8004938:	d00d      	beq.n	8004956 <HAL_GPIO_Init+0x1fa>
 800493a:	687b      	ldr	r3, [r7, #4]
 800493c:	4a46      	ldr	r2, [pc, #280]	; (8004a58 <HAL_GPIO_Init+0x2fc>)
 800493e:	4293      	cmp	r3, r2
 8004940:	d007      	beq.n	8004952 <HAL_GPIO_Init+0x1f6>
 8004942:	687b      	ldr	r3, [r7, #4]
 8004944:	4a45      	ldr	r2, [pc, #276]	; (8004a5c <HAL_GPIO_Init+0x300>)
 8004946:	4293      	cmp	r3, r2
 8004948:	d101      	bne.n	800494e <HAL_GPIO_Init+0x1f2>
 800494a:	2304      	movs	r3, #4
 800494c:	e008      	b.n	8004960 <HAL_GPIO_Init+0x204>
 800494e:	2307      	movs	r3, #7
 8004950:	e006      	b.n	8004960 <HAL_GPIO_Init+0x204>
 8004952:	2303      	movs	r3, #3
 8004954:	e004      	b.n	8004960 <HAL_GPIO_Init+0x204>
 8004956:	2302      	movs	r3, #2
 8004958:	e002      	b.n	8004960 <HAL_GPIO_Init+0x204>
 800495a:	2301      	movs	r3, #1
 800495c:	e000      	b.n	8004960 <HAL_GPIO_Init+0x204>
 800495e:	2300      	movs	r3, #0
 8004960:	69fa      	ldr	r2, [r7, #28]
 8004962:	f002 0203 	and.w	r2, r2, #3
 8004966:	0092      	lsls	r2, r2, #2
 8004968:	4093      	lsls	r3, r2
 800496a:	69ba      	ldr	r2, [r7, #24]
 800496c:	4313      	orrs	r3, r2
 800496e:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8004970:	4935      	ldr	r1, [pc, #212]	; (8004a48 <HAL_GPIO_Init+0x2ec>)
 8004972:	69fb      	ldr	r3, [r7, #28]
 8004974:	089b      	lsrs	r3, r3, #2
 8004976:	3302      	adds	r3, #2
 8004978:	69ba      	ldr	r2, [r7, #24]
 800497a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 800497e:	4b38      	ldr	r3, [pc, #224]	; (8004a60 <HAL_GPIO_Init+0x304>)
 8004980:	681b      	ldr	r3, [r3, #0]
 8004982:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004984:	693b      	ldr	r3, [r7, #16]
 8004986:	43db      	mvns	r3, r3
 8004988:	69ba      	ldr	r2, [r7, #24]
 800498a:	4013      	ands	r3, r2
 800498c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 800498e:	683b      	ldr	r3, [r7, #0]
 8004990:	685b      	ldr	r3, [r3, #4]
 8004992:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8004996:	2b00      	cmp	r3, #0
 8004998:	d003      	beq.n	80049a2 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 800499a:	69ba      	ldr	r2, [r7, #24]
 800499c:	693b      	ldr	r3, [r7, #16]
 800499e:	4313      	orrs	r3, r2
 80049a0:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 80049a2:	4a2f      	ldr	r2, [pc, #188]	; (8004a60 <HAL_GPIO_Init+0x304>)
 80049a4:	69bb      	ldr	r3, [r7, #24]
 80049a6:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 80049a8:	4b2d      	ldr	r3, [pc, #180]	; (8004a60 <HAL_GPIO_Init+0x304>)
 80049aa:	685b      	ldr	r3, [r3, #4]
 80049ac:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049ae:	693b      	ldr	r3, [r7, #16]
 80049b0:	43db      	mvns	r3, r3
 80049b2:	69ba      	ldr	r2, [r7, #24]
 80049b4:	4013      	ands	r3, r2
 80049b6:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 80049b8:	683b      	ldr	r3, [r7, #0]
 80049ba:	685b      	ldr	r3, [r3, #4]
 80049bc:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80049c0:	2b00      	cmp	r3, #0
 80049c2:	d003      	beq.n	80049cc <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 80049c4:	69ba      	ldr	r2, [r7, #24]
 80049c6:	693b      	ldr	r3, [r7, #16]
 80049c8:	4313      	orrs	r3, r2
 80049ca:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 80049cc:	4a24      	ldr	r2, [pc, #144]	; (8004a60 <HAL_GPIO_Init+0x304>)
 80049ce:	69bb      	ldr	r3, [r7, #24]
 80049d0:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 80049d2:	4b23      	ldr	r3, [pc, #140]	; (8004a60 <HAL_GPIO_Init+0x304>)
 80049d4:	689b      	ldr	r3, [r3, #8]
 80049d6:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 80049d8:	693b      	ldr	r3, [r7, #16]
 80049da:	43db      	mvns	r3, r3
 80049dc:	69ba      	ldr	r2, [r7, #24]
 80049de:	4013      	ands	r3, r2
 80049e0:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 80049e2:	683b      	ldr	r3, [r7, #0]
 80049e4:	685b      	ldr	r3, [r3, #4]
 80049e6:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 80049ea:	2b00      	cmp	r3, #0
 80049ec:	d003      	beq.n	80049f6 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 80049ee:	69ba      	ldr	r2, [r7, #24]
 80049f0:	693b      	ldr	r3, [r7, #16]
 80049f2:	4313      	orrs	r3, r2
 80049f4:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 80049f6:	4a1a      	ldr	r2, [pc, #104]	; (8004a60 <HAL_GPIO_Init+0x304>)
 80049f8:	69bb      	ldr	r3, [r7, #24]
 80049fa:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 80049fc:	4b18      	ldr	r3, [pc, #96]	; (8004a60 <HAL_GPIO_Init+0x304>)
 80049fe:	68db      	ldr	r3, [r3, #12]
 8004a00:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8004a02:	693b      	ldr	r3, [r7, #16]
 8004a04:	43db      	mvns	r3, r3
 8004a06:	69ba      	ldr	r2, [r7, #24]
 8004a08:	4013      	ands	r3, r2
 8004a0a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8004a0c:	683b      	ldr	r3, [r7, #0]
 8004a0e:	685b      	ldr	r3, [r3, #4]
 8004a10:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8004a14:	2b00      	cmp	r3, #0
 8004a16:	d003      	beq.n	8004a20 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8004a18:	69ba      	ldr	r2, [r7, #24]
 8004a1a:	693b      	ldr	r3, [r7, #16]
 8004a1c:	4313      	orrs	r3, r2
 8004a1e:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8004a20:	4a0f      	ldr	r2, [pc, #60]	; (8004a60 <HAL_GPIO_Init+0x304>)
 8004a22:	69bb      	ldr	r3, [r7, #24]
 8004a24:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8004a26:	69fb      	ldr	r3, [r7, #28]
 8004a28:	3301      	adds	r3, #1
 8004a2a:	61fb      	str	r3, [r7, #28]
 8004a2c:	69fb      	ldr	r3, [r7, #28]
 8004a2e:	2b0f      	cmp	r3, #15
 8004a30:	f67f aea2 	bls.w	8004778 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8004a34:	bf00      	nop
 8004a36:	bf00      	nop
 8004a38:	3724      	adds	r7, #36	; 0x24
 8004a3a:	46bd      	mov	sp, r7
 8004a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a40:	4770      	bx	lr
 8004a42:	bf00      	nop
 8004a44:	40023800 	.word	0x40023800
 8004a48:	40013800 	.word	0x40013800
 8004a4c:	40020000 	.word	0x40020000
 8004a50:	40020400 	.word	0x40020400
 8004a54:	40020800 	.word	0x40020800
 8004a58:	40020c00 	.word	0x40020c00
 8004a5c:	40021000 	.word	0x40021000
 8004a60:	40013c00 	.word	0x40013c00

08004a64 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8004a64:	b480      	push	{r7}
 8004a66:	b083      	sub	sp, #12
 8004a68:	af00      	add	r7, sp, #0
 8004a6a:	6078      	str	r0, [r7, #4]
 8004a6c:	460b      	mov	r3, r1
 8004a6e:	807b      	strh	r3, [r7, #2]
 8004a70:	4613      	mov	r3, r2
 8004a72:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8004a74:	787b      	ldrb	r3, [r7, #1]
 8004a76:	2b00      	cmp	r3, #0
 8004a78:	d003      	beq.n	8004a82 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8004a7a:	887a      	ldrh	r2, [r7, #2]
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8004a80:	e003      	b.n	8004a8a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8004a82:	887b      	ldrh	r3, [r7, #2]
 8004a84:	041a      	lsls	r2, r3, #16
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	619a      	str	r2, [r3, #24]
}
 8004a8a:	bf00      	nop
 8004a8c:	370c      	adds	r7, #12
 8004a8e:	46bd      	mov	sp, r7
 8004a90:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004a94:	4770      	bx	lr
	...

08004a98 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8004a98:	b580      	push	{r7, lr}
 8004a9a:	b082      	sub	sp, #8
 8004a9c:	af00      	add	r7, sp, #0
 8004a9e:	4603      	mov	r3, r0
 8004aa0:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8004aa2:	4b08      	ldr	r3, [pc, #32]	; (8004ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004aa4:	695a      	ldr	r2, [r3, #20]
 8004aa6:	88fb      	ldrh	r3, [r7, #6]
 8004aa8:	4013      	ands	r3, r2
 8004aaa:	2b00      	cmp	r3, #0
 8004aac:	d006      	beq.n	8004abc <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8004aae:	4a05      	ldr	r2, [pc, #20]	; (8004ac4 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8004ab0:	88fb      	ldrh	r3, [r7, #6]
 8004ab2:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8004ab4:	88fb      	ldrh	r3, [r7, #6]
 8004ab6:	4618      	mov	r0, r3
 8004ab8:	f7fd fc32 	bl	8002320 <HAL_GPIO_EXTI_Callback>
  }
}
 8004abc:	bf00      	nop
 8004abe:	3708      	adds	r7, #8
 8004ac0:	46bd      	mov	sp, r7
 8004ac2:	bd80      	pop	{r7, pc}
 8004ac4:	40013c00 	.word	0x40013c00

08004ac8 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8004ac8:	b580      	push	{r7, lr}
 8004aca:	b084      	sub	sp, #16
 8004acc:	af00      	add	r7, sp, #0
 8004ace:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8004ad0:	687b      	ldr	r3, [r7, #4]
 8004ad2:	2b00      	cmp	r3, #0
 8004ad4:	d101      	bne.n	8004ada <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8004ad6:	2301      	movs	r3, #1
 8004ad8:	e12b      	b.n	8004d32 <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8004ada:	687b      	ldr	r3, [r7, #4]
 8004adc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004ae0:	b2db      	uxtb	r3, r3
 8004ae2:	2b00      	cmp	r3, #0
 8004ae4:	d106      	bne.n	8004af4 <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8004ae6:	687b      	ldr	r3, [r7, #4]
 8004ae8:	2200      	movs	r2, #0
 8004aea:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8004aee:	6878      	ldr	r0, [r7, #4]
 8004af0:	f7fe fd56 	bl	80035a0 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	2224      	movs	r2, #36	; 0x24
 8004af8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8004afc:	687b      	ldr	r3, [r7, #4]
 8004afe:	681b      	ldr	r3, [r3, #0]
 8004b00:	681a      	ldr	r2, [r3, #0]
 8004b02:	687b      	ldr	r3, [r7, #4]
 8004b04:	681b      	ldr	r3, [r3, #0]
 8004b06:	f022 0201 	bic.w	r2, r2, #1
 8004b0a:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8004b0c:	687b      	ldr	r3, [r7, #4]
 8004b0e:	681b      	ldr	r3, [r3, #0]
 8004b10:	681a      	ldr	r2, [r3, #0]
 8004b12:	687b      	ldr	r3, [r7, #4]
 8004b14:	681b      	ldr	r3, [r3, #0]
 8004b16:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8004b1a:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8004b1c:	687b      	ldr	r3, [r7, #4]
 8004b1e:	681b      	ldr	r3, [r3, #0]
 8004b20:	681a      	ldr	r2, [r3, #0]
 8004b22:	687b      	ldr	r3, [r7, #4]
 8004b24:	681b      	ldr	r3, [r3, #0]
 8004b26:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8004b2a:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8004b2c:	f002 fa12 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
 8004b30:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8004b32:	687b      	ldr	r3, [r7, #4]
 8004b34:	685b      	ldr	r3, [r3, #4]
 8004b36:	4a81      	ldr	r2, [pc, #516]	; (8004d3c <HAL_I2C_Init+0x274>)
 8004b38:	4293      	cmp	r3, r2
 8004b3a:	d807      	bhi.n	8004b4c <HAL_I2C_Init+0x84>
 8004b3c:	68fb      	ldr	r3, [r7, #12]
 8004b3e:	4a80      	ldr	r2, [pc, #512]	; (8004d40 <HAL_I2C_Init+0x278>)
 8004b40:	4293      	cmp	r3, r2
 8004b42:	bf94      	ite	ls
 8004b44:	2301      	movls	r3, #1
 8004b46:	2300      	movhi	r3, #0
 8004b48:	b2db      	uxtb	r3, r3
 8004b4a:	e006      	b.n	8004b5a <HAL_I2C_Init+0x92>
 8004b4c:	68fb      	ldr	r3, [r7, #12]
 8004b4e:	4a7d      	ldr	r2, [pc, #500]	; (8004d44 <HAL_I2C_Init+0x27c>)
 8004b50:	4293      	cmp	r3, r2
 8004b52:	bf94      	ite	ls
 8004b54:	2301      	movls	r3, #1
 8004b56:	2300      	movhi	r3, #0
 8004b58:	b2db      	uxtb	r3, r3
 8004b5a:	2b00      	cmp	r3, #0
 8004b5c:	d001      	beq.n	8004b62 <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004b5e:	2301      	movs	r3, #1
 8004b60:	e0e7      	b.n	8004d32 <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 8004b62:	68fb      	ldr	r3, [r7, #12]
 8004b64:	4a78      	ldr	r2, [pc, #480]	; (8004d48 <HAL_I2C_Init+0x280>)
 8004b66:	fba2 2303 	umull	r2, r3, r2, r3
 8004b6a:	0c9b      	lsrs	r3, r3, #18
 8004b6c:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004b6e:	687b      	ldr	r3, [r7, #4]
 8004b70:	681b      	ldr	r3, [r3, #0]
 8004b72:	685b      	ldr	r3, [r3, #4]
 8004b74:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	681b      	ldr	r3, [r3, #0]
 8004b7c:	68ba      	ldr	r2, [r7, #8]
 8004b7e:	430a      	orrs	r2, r1
 8004b80:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 8004b82:	687b      	ldr	r3, [r7, #4]
 8004b84:	681b      	ldr	r3, [r3, #0]
 8004b86:	6a1b      	ldr	r3, [r3, #32]
 8004b88:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	685b      	ldr	r3, [r3, #4]
 8004b90:	4a6a      	ldr	r2, [pc, #424]	; (8004d3c <HAL_I2C_Init+0x274>)
 8004b92:	4293      	cmp	r3, r2
 8004b94:	d802      	bhi.n	8004b9c <HAL_I2C_Init+0xd4>
 8004b96:	68bb      	ldr	r3, [r7, #8]
 8004b98:	3301      	adds	r3, #1
 8004b9a:	e009      	b.n	8004bb0 <HAL_I2C_Init+0xe8>
 8004b9c:	68bb      	ldr	r3, [r7, #8]
 8004b9e:	f44f 7296 	mov.w	r2, #300	; 0x12c
 8004ba2:	fb02 f303 	mul.w	r3, r2, r3
 8004ba6:	4a69      	ldr	r2, [pc, #420]	; (8004d4c <HAL_I2C_Init+0x284>)
 8004ba8:	fba2 2303 	umull	r2, r3, r2, r3
 8004bac:	099b      	lsrs	r3, r3, #6
 8004bae:	3301      	adds	r3, #1
 8004bb0:	687a      	ldr	r2, [r7, #4]
 8004bb2:	6812      	ldr	r2, [r2, #0]
 8004bb4:	430b      	orrs	r3, r1
 8004bb6:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	69db      	ldr	r3, [r3, #28]
 8004bbe:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 8004bc2:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 8004bc6:	687b      	ldr	r3, [r7, #4]
 8004bc8:	685b      	ldr	r3, [r3, #4]
 8004bca:	495c      	ldr	r1, [pc, #368]	; (8004d3c <HAL_I2C_Init+0x274>)
 8004bcc:	428b      	cmp	r3, r1
 8004bce:	d819      	bhi.n	8004c04 <HAL_I2C_Init+0x13c>
 8004bd0:	68fb      	ldr	r3, [r7, #12]
 8004bd2:	1e59      	subs	r1, r3, #1
 8004bd4:	687b      	ldr	r3, [r7, #4]
 8004bd6:	685b      	ldr	r3, [r3, #4]
 8004bd8:	005b      	lsls	r3, r3, #1
 8004bda:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bde:	1c59      	adds	r1, r3, #1
 8004be0:	f640 73fc 	movw	r3, #4092	; 0xffc
 8004be4:	400b      	ands	r3, r1
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d00a      	beq.n	8004c00 <HAL_I2C_Init+0x138>
 8004bea:	68fb      	ldr	r3, [r7, #12]
 8004bec:	1e59      	subs	r1, r3, #1
 8004bee:	687b      	ldr	r3, [r7, #4]
 8004bf0:	685b      	ldr	r3, [r3, #4]
 8004bf2:	005b      	lsls	r3, r3, #1
 8004bf4:	fbb1 f3f3 	udiv	r3, r1, r3
 8004bf8:	3301      	adds	r3, #1
 8004bfa:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004bfe:	e051      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c00:	2304      	movs	r3, #4
 8004c02:	e04f      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c04:	687b      	ldr	r3, [r7, #4]
 8004c06:	689b      	ldr	r3, [r3, #8]
 8004c08:	2b00      	cmp	r3, #0
 8004c0a:	d111      	bne.n	8004c30 <HAL_I2C_Init+0x168>
 8004c0c:	68fb      	ldr	r3, [r7, #12]
 8004c0e:	1e58      	subs	r0, r3, #1
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6859      	ldr	r1, [r3, #4]
 8004c14:	460b      	mov	r3, r1
 8004c16:	005b      	lsls	r3, r3, #1
 8004c18:	440b      	add	r3, r1
 8004c1a:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c1e:	3301      	adds	r3, #1
 8004c20:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c24:	2b00      	cmp	r3, #0
 8004c26:	bf0c      	ite	eq
 8004c28:	2301      	moveq	r3, #1
 8004c2a:	2300      	movne	r3, #0
 8004c2c:	b2db      	uxtb	r3, r3
 8004c2e:	e012      	b.n	8004c56 <HAL_I2C_Init+0x18e>
 8004c30:	68fb      	ldr	r3, [r7, #12]
 8004c32:	1e58      	subs	r0, r3, #1
 8004c34:	687b      	ldr	r3, [r7, #4]
 8004c36:	6859      	ldr	r1, [r3, #4]
 8004c38:	460b      	mov	r3, r1
 8004c3a:	009b      	lsls	r3, r3, #2
 8004c3c:	440b      	add	r3, r1
 8004c3e:	0099      	lsls	r1, r3, #2
 8004c40:	440b      	add	r3, r1
 8004c42:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c46:	3301      	adds	r3, #1
 8004c48:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c4c:	2b00      	cmp	r3, #0
 8004c4e:	bf0c      	ite	eq
 8004c50:	2301      	moveq	r3, #1
 8004c52:	2300      	movne	r3, #0
 8004c54:	b2db      	uxtb	r3, r3
 8004c56:	2b00      	cmp	r3, #0
 8004c58:	d001      	beq.n	8004c5e <HAL_I2C_Init+0x196>
 8004c5a:	2301      	movs	r3, #1
 8004c5c:	e022      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c5e:	687b      	ldr	r3, [r7, #4]
 8004c60:	689b      	ldr	r3, [r3, #8]
 8004c62:	2b00      	cmp	r3, #0
 8004c64:	d10e      	bne.n	8004c84 <HAL_I2C_Init+0x1bc>
 8004c66:	68fb      	ldr	r3, [r7, #12]
 8004c68:	1e58      	subs	r0, r3, #1
 8004c6a:	687b      	ldr	r3, [r7, #4]
 8004c6c:	6859      	ldr	r1, [r3, #4]
 8004c6e:	460b      	mov	r3, r1
 8004c70:	005b      	lsls	r3, r3, #1
 8004c72:	440b      	add	r3, r1
 8004c74:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c78:	3301      	adds	r3, #1
 8004c7a:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004c7e:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 8004c82:	e00f      	b.n	8004ca4 <HAL_I2C_Init+0x1dc>
 8004c84:	68fb      	ldr	r3, [r7, #12]
 8004c86:	1e58      	subs	r0, r3, #1
 8004c88:	687b      	ldr	r3, [r7, #4]
 8004c8a:	6859      	ldr	r1, [r3, #4]
 8004c8c:	460b      	mov	r3, r1
 8004c8e:	009b      	lsls	r3, r3, #2
 8004c90:	440b      	add	r3, r1
 8004c92:	0099      	lsls	r1, r3, #2
 8004c94:	440b      	add	r3, r1
 8004c96:	fbb0 f3f3 	udiv	r3, r0, r3
 8004c9a:	3301      	adds	r3, #1
 8004c9c:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004ca0:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 8004ca4:	6879      	ldr	r1, [r7, #4]
 8004ca6:	6809      	ldr	r1, [r1, #0]
 8004ca8:	4313      	orrs	r3, r2
 8004caa:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004cac:	687b      	ldr	r3, [r7, #4]
 8004cae:	681b      	ldr	r3, [r3, #0]
 8004cb0:	681b      	ldr	r3, [r3, #0]
 8004cb2:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 8004cb6:	687b      	ldr	r3, [r7, #4]
 8004cb8:	69da      	ldr	r2, [r3, #28]
 8004cba:	687b      	ldr	r3, [r7, #4]
 8004cbc:	6a1b      	ldr	r3, [r3, #32]
 8004cbe:	431a      	orrs	r2, r3
 8004cc0:	687b      	ldr	r3, [r7, #4]
 8004cc2:	681b      	ldr	r3, [r3, #0]
 8004cc4:	430a      	orrs	r2, r1
 8004cc6:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004cc8:	687b      	ldr	r3, [r7, #4]
 8004cca:	681b      	ldr	r3, [r3, #0]
 8004ccc:	689b      	ldr	r3, [r3, #8]
 8004cce:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 8004cd2:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 8004cd6:	687a      	ldr	r2, [r7, #4]
 8004cd8:	6911      	ldr	r1, [r2, #16]
 8004cda:	687a      	ldr	r2, [r7, #4]
 8004cdc:	68d2      	ldr	r2, [r2, #12]
 8004cde:	4311      	orrs	r1, r2
 8004ce0:	687a      	ldr	r2, [r7, #4]
 8004ce2:	6812      	ldr	r2, [r2, #0]
 8004ce4:	430b      	orrs	r3, r1
 8004ce6:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004ce8:	687b      	ldr	r3, [r7, #4]
 8004cea:	681b      	ldr	r3, [r3, #0]
 8004cec:	68db      	ldr	r3, [r3, #12]
 8004cee:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	695a      	ldr	r2, [r3, #20]
 8004cf6:	687b      	ldr	r3, [r7, #4]
 8004cf8:	699b      	ldr	r3, [r3, #24]
 8004cfa:	431a      	orrs	r2, r3
 8004cfc:	687b      	ldr	r3, [r7, #4]
 8004cfe:	681b      	ldr	r3, [r3, #0]
 8004d00:	430a      	orrs	r2, r1
 8004d02:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	681b      	ldr	r3, [r3, #0]
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	687b      	ldr	r3, [r7, #4]
 8004d0c:	681b      	ldr	r3, [r3, #0]
 8004d0e:	f042 0201 	orr.w	r2, r2, #1
 8004d12:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	2200      	movs	r2, #0
 8004d18:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 8004d1a:	687b      	ldr	r3, [r7, #4]
 8004d1c:	2220      	movs	r2, #32
 8004d1e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 8004d22:	687b      	ldr	r3, [r7, #4]
 8004d24:	2200      	movs	r2, #0
 8004d26:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 8004d28:	687b      	ldr	r3, [r7, #4]
 8004d2a:	2200      	movs	r2, #0
 8004d2c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 8004d30:	2300      	movs	r3, #0
}
 8004d32:	4618      	mov	r0, r3
 8004d34:	3710      	adds	r7, #16
 8004d36:	46bd      	mov	sp, r7
 8004d38:	bd80      	pop	{r7, pc}
 8004d3a:	bf00      	nop
 8004d3c:	000186a0 	.word	0x000186a0
 8004d40:	001e847f 	.word	0x001e847f
 8004d44:	003d08ff 	.word	0x003d08ff
 8004d48:	431bde83 	.word	0x431bde83
 8004d4c:	10624dd3 	.word	0x10624dd3

08004d50 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004d50:	b580      	push	{r7, lr}
 8004d52:	b088      	sub	sp, #32
 8004d54:	af00      	add	r7, sp, #0
 8004d56:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 8004d58:	2300      	movs	r3, #0
 8004d5a:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004d5c:	687b      	ldr	r3, [r7, #4]
 8004d5e:	681b      	ldr	r3, [r3, #0]
 8004d60:	685b      	ldr	r3, [r3, #4]
 8004d62:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004d64:	687b      	ldr	r3, [r7, #4]
 8004d66:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004d68:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8004d6a:	687b      	ldr	r3, [r7, #4]
 8004d6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004d70:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004d78:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004d7a:	7bfb      	ldrb	r3, [r7, #15]
 8004d7c:	2b10      	cmp	r3, #16
 8004d7e:	d003      	beq.n	8004d88 <HAL_I2C_EV_IRQHandler+0x38>
 8004d80:	7bfb      	ldrb	r3, [r7, #15]
 8004d82:	2b40      	cmp	r3, #64	; 0x40
 8004d84:	f040 80bd 	bne.w	8004f02 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	699b      	ldr	r3, [r3, #24]
 8004d8e:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004d90:	687b      	ldr	r3, [r7, #4]
 8004d92:	681b      	ldr	r3, [r3, #0]
 8004d94:	695b      	ldr	r3, [r3, #20]
 8004d96:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 8004d98:	69fb      	ldr	r3, [r7, #28]
 8004d9a:	f003 0301 	and.w	r3, r3, #1
 8004d9e:	2b00      	cmp	r3, #0
 8004da0:	d10d      	bne.n	8004dbe <HAL_I2C_EV_IRQHandler+0x6e>
 8004da2:	693b      	ldr	r3, [r7, #16]
 8004da4:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8004da8:	d003      	beq.n	8004db2 <HAL_I2C_EV_IRQHandler+0x62>
 8004daa:	693b      	ldr	r3, [r7, #16]
 8004dac:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8004db0:	d101      	bne.n	8004db6 <HAL_I2C_EV_IRQHandler+0x66>
 8004db2:	2301      	movs	r3, #1
 8004db4:	e000      	b.n	8004db8 <HAL_I2C_EV_IRQHandler+0x68>
 8004db6:	2300      	movs	r3, #0
 8004db8:	2b01      	cmp	r3, #1
 8004dba:	f000 812e 	beq.w	800501a <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004dbe:	69fb      	ldr	r3, [r7, #28]
 8004dc0:	f003 0301 	and.w	r3, r3, #1
 8004dc4:	2b00      	cmp	r3, #0
 8004dc6:	d00c      	beq.n	8004de2 <HAL_I2C_EV_IRQHandler+0x92>
 8004dc8:	697b      	ldr	r3, [r7, #20]
 8004dca:	0a5b      	lsrs	r3, r3, #9
 8004dcc:	f003 0301 	and.w	r3, r3, #1
 8004dd0:	2b00      	cmp	r3, #0
 8004dd2:	d006      	beq.n	8004de2 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 8004dd4:	6878      	ldr	r0, [r7, #4]
 8004dd6:	f001 fc55 	bl	8006684 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 8004dda:	6878      	ldr	r0, [r7, #4]
 8004ddc:	f000 fd62 	bl	80058a4 <I2C_Master_SB>
 8004de0:	e08e      	b.n	8004f00 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004de2:	69fb      	ldr	r3, [r7, #28]
 8004de4:	08db      	lsrs	r3, r3, #3
 8004de6:	f003 0301 	and.w	r3, r3, #1
 8004dea:	2b00      	cmp	r3, #0
 8004dec:	d009      	beq.n	8004e02 <HAL_I2C_EV_IRQHandler+0xb2>
 8004dee:	697b      	ldr	r3, [r7, #20]
 8004df0:	0a5b      	lsrs	r3, r3, #9
 8004df2:	f003 0301 	and.w	r3, r3, #1
 8004df6:	2b00      	cmp	r3, #0
 8004df8:	d003      	beq.n	8004e02 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 8004dfa:	6878      	ldr	r0, [r7, #4]
 8004dfc:	f000 fdd8 	bl	80059b0 <I2C_Master_ADD10>
 8004e00:	e07e      	b.n	8004f00 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e02:	69fb      	ldr	r3, [r7, #28]
 8004e04:	085b      	lsrs	r3, r3, #1
 8004e06:	f003 0301 	and.w	r3, r3, #1
 8004e0a:	2b00      	cmp	r3, #0
 8004e0c:	d009      	beq.n	8004e22 <HAL_I2C_EV_IRQHandler+0xd2>
 8004e0e:	697b      	ldr	r3, [r7, #20]
 8004e10:	0a5b      	lsrs	r3, r3, #9
 8004e12:	f003 0301 	and.w	r3, r3, #1
 8004e16:	2b00      	cmp	r3, #0
 8004e18:	d003      	beq.n	8004e22 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 8004e1a:	6878      	ldr	r0, [r7, #4]
 8004e1c:	f000 fdf2 	bl	8005a04 <I2C_Master_ADDR>
 8004e20:	e06e      	b.n	8004f00 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004e22:	69bb      	ldr	r3, [r7, #24]
 8004e24:	089b      	lsrs	r3, r3, #2
 8004e26:	f003 0301 	and.w	r3, r3, #1
 8004e2a:	2b00      	cmp	r3, #0
 8004e2c:	d037      	beq.n	8004e9e <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e2e:	687b      	ldr	r3, [r7, #4]
 8004e30:	681b      	ldr	r3, [r3, #0]
 8004e32:	685b      	ldr	r3, [r3, #4]
 8004e34:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004e38:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004e3c:	f000 80ef 	beq.w	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004e40:	69fb      	ldr	r3, [r7, #28]
 8004e42:	09db      	lsrs	r3, r3, #7
 8004e44:	f003 0301 	and.w	r3, r3, #1
 8004e48:	2b00      	cmp	r3, #0
 8004e4a:	d00f      	beq.n	8004e6c <HAL_I2C_EV_IRQHandler+0x11c>
 8004e4c:	697b      	ldr	r3, [r7, #20]
 8004e4e:	0a9b      	lsrs	r3, r3, #10
 8004e50:	f003 0301 	and.w	r3, r3, #1
 8004e54:	2b00      	cmp	r3, #0
 8004e56:	d009      	beq.n	8004e6c <HAL_I2C_EV_IRQHandler+0x11c>
 8004e58:	69fb      	ldr	r3, [r7, #28]
 8004e5a:	089b      	lsrs	r3, r3, #2
 8004e5c:	f003 0301 	and.w	r3, r3, #1
 8004e60:	2b00      	cmp	r3, #0
 8004e62:	d103      	bne.n	8004e6c <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004e64:	6878      	ldr	r0, [r7, #4]
 8004e66:	f000 f9ef 	bl	8005248 <I2C_MasterTransmit_TXE>
 8004e6a:	e049      	b.n	8004f00 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e6c:	69fb      	ldr	r3, [r7, #28]
 8004e6e:	089b      	lsrs	r3, r3, #2
 8004e70:	f003 0301 	and.w	r3, r3, #1
 8004e74:	2b00      	cmp	r3, #0
 8004e76:	f000 80d2 	beq.w	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004e7a:	697b      	ldr	r3, [r7, #20]
 8004e7c:	0a5b      	lsrs	r3, r3, #9
 8004e7e:	f003 0301 	and.w	r3, r3, #1
 8004e82:	2b00      	cmp	r3, #0
 8004e84:	f000 80cb 	beq.w	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 8004e88:	7bfb      	ldrb	r3, [r7, #15]
 8004e8a:	2b10      	cmp	r3, #16
 8004e8c:	d103      	bne.n	8004e96 <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004e8e:	6878      	ldr	r0, [r7, #4]
 8004e90:	f000 fa76 	bl	8005380 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e94:	e0c3      	b.n	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 8004e96:	6878      	ldr	r0, [r7, #4]
 8004e98:	f000 fada 	bl	8005450 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004e9c:	e0bf      	b.n	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004e9e:	687b      	ldr	r3, [r7, #4]
 8004ea0:	681b      	ldr	r3, [r3, #0]
 8004ea2:	685b      	ldr	r3, [r3, #4]
 8004ea4:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8004ea8:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004eac:	f000 80b7 	beq.w	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004eb0:	69fb      	ldr	r3, [r7, #28]
 8004eb2:	099b      	lsrs	r3, r3, #6
 8004eb4:	f003 0301 	and.w	r3, r3, #1
 8004eb8:	2b00      	cmp	r3, #0
 8004eba:	d00f      	beq.n	8004edc <HAL_I2C_EV_IRQHandler+0x18c>
 8004ebc:	697b      	ldr	r3, [r7, #20]
 8004ebe:	0a9b      	lsrs	r3, r3, #10
 8004ec0:	f003 0301 	and.w	r3, r3, #1
 8004ec4:	2b00      	cmp	r3, #0
 8004ec6:	d009      	beq.n	8004edc <HAL_I2C_EV_IRQHandler+0x18c>
 8004ec8:	69fb      	ldr	r3, [r7, #28]
 8004eca:	089b      	lsrs	r3, r3, #2
 8004ecc:	f003 0301 	and.w	r3, r3, #1
 8004ed0:	2b00      	cmp	r3, #0
 8004ed2:	d103      	bne.n	8004edc <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 8004ed4:	6878      	ldr	r0, [r7, #4]
 8004ed6:	f000 fb4a 	bl	800556e <I2C_MasterReceive_RXNE>
 8004eda:	e011      	b.n	8004f00 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004edc:	69fb      	ldr	r3, [r7, #28]
 8004ede:	089b      	lsrs	r3, r3, #2
 8004ee0:	f003 0301 	and.w	r3, r3, #1
 8004ee4:	2b00      	cmp	r3, #0
 8004ee6:	f000 809a 	beq.w	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004eea:	697b      	ldr	r3, [r7, #20]
 8004eec:	0a5b      	lsrs	r3, r3, #9
 8004eee:	f003 0301 	and.w	r3, r3, #1
 8004ef2:	2b00      	cmp	r3, #0
 8004ef4:	f000 8093 	beq.w	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 8004ef8:	6878      	ldr	r0, [r7, #4]
 8004efa:	f000 fbe9 	bl	80056d0 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004efe:	e08e      	b.n	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
 8004f00:	e08d      	b.n	800501e <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f02:	687b      	ldr	r3, [r7, #4]
 8004f04:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f06:	2b00      	cmp	r3, #0
 8004f08:	d004      	beq.n	8004f14 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f0a:	687b      	ldr	r3, [r7, #4]
 8004f0c:	681b      	ldr	r3, [r3, #0]
 8004f0e:	695b      	ldr	r3, [r3, #20]
 8004f10:	61fb      	str	r3, [r7, #28]
 8004f12:	e007      	b.n	8004f24 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f14:	687b      	ldr	r3, [r7, #4]
 8004f16:	681b      	ldr	r3, [r3, #0]
 8004f18:	699b      	ldr	r3, [r3, #24]
 8004f1a:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004f1c:	687b      	ldr	r3, [r7, #4]
 8004f1e:	681b      	ldr	r3, [r3, #0]
 8004f20:	695b      	ldr	r3, [r3, #20]
 8004f22:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f24:	69fb      	ldr	r3, [r7, #28]
 8004f26:	085b      	lsrs	r3, r3, #1
 8004f28:	f003 0301 	and.w	r3, r3, #1
 8004f2c:	2b00      	cmp	r3, #0
 8004f2e:	d012      	beq.n	8004f56 <HAL_I2C_EV_IRQHandler+0x206>
 8004f30:	697b      	ldr	r3, [r7, #20]
 8004f32:	0a5b      	lsrs	r3, r3, #9
 8004f34:	f003 0301 	and.w	r3, r3, #1
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d00c      	beq.n	8004f56 <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004f40:	2b00      	cmp	r3, #0
 8004f42:	d003      	beq.n	8004f4c <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004f44:	687b      	ldr	r3, [r7, #4]
 8004f46:	681b      	ldr	r3, [r3, #0]
 8004f48:	699b      	ldr	r3, [r3, #24]
 8004f4a:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004f4c:	69b9      	ldr	r1, [r7, #24]
 8004f4e:	6878      	ldr	r0, [r7, #4]
 8004f50:	f000 ffa7 	bl	8005ea2 <I2C_Slave_ADDR>
 8004f54:	e066      	b.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004f56:	69fb      	ldr	r3, [r7, #28]
 8004f58:	091b      	lsrs	r3, r3, #4
 8004f5a:	f003 0301 	and.w	r3, r3, #1
 8004f5e:	2b00      	cmp	r3, #0
 8004f60:	d009      	beq.n	8004f76 <HAL_I2C_EV_IRQHandler+0x226>
 8004f62:	697b      	ldr	r3, [r7, #20]
 8004f64:	0a5b      	lsrs	r3, r3, #9
 8004f66:	f003 0301 	and.w	r3, r3, #1
 8004f6a:	2b00      	cmp	r3, #0
 8004f6c:	d003      	beq.n	8004f76 <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004f6e:	6878      	ldr	r0, [r7, #4]
 8004f70:	f000 ffdc 	bl	8005f2c <I2C_Slave_STOPF>
 8004f74:	e056      	b.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8004f76:	7bbb      	ldrb	r3, [r7, #14]
 8004f78:	2b21      	cmp	r3, #33	; 0x21
 8004f7a:	d002      	beq.n	8004f82 <HAL_I2C_EV_IRQHandler+0x232>
 8004f7c:	7bbb      	ldrb	r3, [r7, #14]
 8004f7e:	2b29      	cmp	r3, #41	; 0x29
 8004f80:	d125      	bne.n	8004fce <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004f82:	69fb      	ldr	r3, [r7, #28]
 8004f84:	09db      	lsrs	r3, r3, #7
 8004f86:	f003 0301 	and.w	r3, r3, #1
 8004f8a:	2b00      	cmp	r3, #0
 8004f8c:	d00f      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0x25e>
 8004f8e:	697b      	ldr	r3, [r7, #20]
 8004f90:	0a9b      	lsrs	r3, r3, #10
 8004f92:	f003 0301 	and.w	r3, r3, #1
 8004f96:	2b00      	cmp	r3, #0
 8004f98:	d009      	beq.n	8004fae <HAL_I2C_EV_IRQHandler+0x25e>
 8004f9a:	69fb      	ldr	r3, [r7, #28]
 8004f9c:	089b      	lsrs	r3, r3, #2
 8004f9e:	f003 0301 	and.w	r3, r3, #1
 8004fa2:	2b00      	cmp	r3, #0
 8004fa4:	d103      	bne.n	8004fae <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 8004fa6:	6878      	ldr	r0, [r7, #4]
 8004fa8:	f000 febd 	bl	8005d26 <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fac:	e039      	b.n	8005022 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004fae:	69fb      	ldr	r3, [r7, #28]
 8004fb0:	089b      	lsrs	r3, r3, #2
 8004fb2:	f003 0301 	and.w	r3, r3, #1
 8004fb6:	2b00      	cmp	r3, #0
 8004fb8:	d033      	beq.n	8005022 <HAL_I2C_EV_IRQHandler+0x2d2>
 8004fba:	697b      	ldr	r3, [r7, #20]
 8004fbc:	0a5b      	lsrs	r3, r3, #9
 8004fbe:	f003 0301 	and.w	r3, r3, #1
 8004fc2:	2b00      	cmp	r3, #0
 8004fc4:	d02d      	beq.n	8005022 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 8004fc6:	6878      	ldr	r0, [r7, #4]
 8004fc8:	f000 feea 	bl	8005da0 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fcc:	e029      	b.n	8005022 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004fce:	69fb      	ldr	r3, [r7, #28]
 8004fd0:	099b      	lsrs	r3, r3, #6
 8004fd2:	f003 0301 	and.w	r3, r3, #1
 8004fd6:	2b00      	cmp	r3, #0
 8004fd8:	d00f      	beq.n	8004ffa <HAL_I2C_EV_IRQHandler+0x2aa>
 8004fda:	697b      	ldr	r3, [r7, #20]
 8004fdc:	0a9b      	lsrs	r3, r3, #10
 8004fde:	f003 0301 	and.w	r3, r3, #1
 8004fe2:	2b00      	cmp	r3, #0
 8004fe4:	d009      	beq.n	8004ffa <HAL_I2C_EV_IRQHandler+0x2aa>
 8004fe6:	69fb      	ldr	r3, [r7, #28]
 8004fe8:	089b      	lsrs	r3, r3, #2
 8004fea:	f003 0301 	and.w	r3, r3, #1
 8004fee:	2b00      	cmp	r3, #0
 8004ff0:	d103      	bne.n	8004ffa <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 8004ff2:	6878      	ldr	r0, [r7, #4]
 8004ff4:	f000 fef5 	bl	8005de2 <I2C_SlaveReceive_RXNE>
 8004ff8:	e014      	b.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004ffa:	69fb      	ldr	r3, [r7, #28]
 8004ffc:	089b      	lsrs	r3, r3, #2
 8004ffe:	f003 0301 	and.w	r3, r3, #1
 8005002:	2b00      	cmp	r3, #0
 8005004:	d00e      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
 8005006:	697b      	ldr	r3, [r7, #20]
 8005008:	0a5b      	lsrs	r3, r3, #9
 800500a:	f003 0301 	and.w	r3, r3, #1
 800500e:	2b00      	cmp	r3, #0
 8005010:	d008      	beq.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8005012:	6878      	ldr	r0, [r7, #4]
 8005014:	f000 ff23 	bl	8005e5e <I2C_SlaveReceive_BTF>
 8005018:	e004      	b.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800501a:	bf00      	nop
 800501c:	e002      	b.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800501e:	bf00      	nop
 8005020:	e000      	b.n	8005024 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8005022:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8005024:	3720      	adds	r7, #32
 8005026:	46bd      	mov	sp, r7
 8005028:	bd80      	pop	{r7, pc}

0800502a <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800502a:	b580      	push	{r7, lr}
 800502c:	b08a      	sub	sp, #40	; 0x28
 800502e:	af00      	add	r7, sp, #0
 8005030:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8005032:	687b      	ldr	r3, [r7, #4]
 8005034:	681b      	ldr	r3, [r3, #0]
 8005036:	695b      	ldr	r3, [r3, #20]
 8005038:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800503a:	687b      	ldr	r3, [r7, #4]
 800503c:	681b      	ldr	r3, [r3, #0]
 800503e:	685b      	ldr	r3, [r3, #4]
 8005040:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8005042:	2300      	movs	r3, #0
 8005044:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005046:	687b      	ldr	r3, [r7, #4]
 8005048:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800504c:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800504e:	6a3b      	ldr	r3, [r7, #32]
 8005050:	0a1b      	lsrs	r3, r3, #8
 8005052:	f003 0301 	and.w	r3, r3, #1
 8005056:	2b00      	cmp	r3, #0
 8005058:	d00e      	beq.n	8005078 <HAL_I2C_ER_IRQHandler+0x4e>
 800505a:	69fb      	ldr	r3, [r7, #28]
 800505c:	0a1b      	lsrs	r3, r3, #8
 800505e:	f003 0301 	and.w	r3, r3, #1
 8005062:	2b00      	cmp	r3, #0
 8005064:	d008      	beq.n	8005078 <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 8005066:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005068:	f043 0301 	orr.w	r3, r3, #1
 800506c:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 800506e:	687b      	ldr	r3, [r7, #4]
 8005070:	681b      	ldr	r3, [r3, #0]
 8005072:	f46f 7280 	mvn.w	r2, #256	; 0x100
 8005076:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8005078:	6a3b      	ldr	r3, [r7, #32]
 800507a:	0a5b      	lsrs	r3, r3, #9
 800507c:	f003 0301 	and.w	r3, r3, #1
 8005080:	2b00      	cmp	r3, #0
 8005082:	d00e      	beq.n	80050a2 <HAL_I2C_ER_IRQHandler+0x78>
 8005084:	69fb      	ldr	r3, [r7, #28]
 8005086:	0a1b      	lsrs	r3, r3, #8
 8005088:	f003 0301 	and.w	r3, r3, #1
 800508c:	2b00      	cmp	r3, #0
 800508e:	d008      	beq.n	80050a2 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8005090:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005092:	f043 0302 	orr.w	r3, r3, #2
 8005096:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 8005098:	687b      	ldr	r3, [r7, #4]
 800509a:	681b      	ldr	r3, [r3, #0]
 800509c:	f46f 7200 	mvn.w	r2, #512	; 0x200
 80050a0:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 80050a2:	6a3b      	ldr	r3, [r7, #32]
 80050a4:	0a9b      	lsrs	r3, r3, #10
 80050a6:	f003 0301 	and.w	r3, r3, #1
 80050aa:	2b00      	cmp	r3, #0
 80050ac:	d03f      	beq.n	800512e <HAL_I2C_ER_IRQHandler+0x104>
 80050ae:	69fb      	ldr	r3, [r7, #28]
 80050b0:	0a1b      	lsrs	r3, r3, #8
 80050b2:	f003 0301 	and.w	r3, r3, #1
 80050b6:	2b00      	cmp	r3, #0
 80050b8:	d039      	beq.n	800512e <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80050ba:	7efb      	ldrb	r3, [r7, #27]
 80050bc:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80050be:	687b      	ldr	r3, [r7, #4]
 80050c0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c2:	b29b      	uxth	r3, r3
 80050c4:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80050c6:	687b      	ldr	r3, [r7, #4]
 80050c8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80050cc:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80050ce:	687b      	ldr	r3, [r7, #4]
 80050d0:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80050d2:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80050d4:	7ebb      	ldrb	r3, [r7, #26]
 80050d6:	2b20      	cmp	r3, #32
 80050d8:	d112      	bne.n	8005100 <HAL_I2C_ER_IRQHandler+0xd6>
 80050da:	697b      	ldr	r3, [r7, #20]
 80050dc:	2b00      	cmp	r3, #0
 80050de:	d10f      	bne.n	8005100 <HAL_I2C_ER_IRQHandler+0xd6>
 80050e0:	7cfb      	ldrb	r3, [r7, #19]
 80050e2:	2b21      	cmp	r3, #33	; 0x21
 80050e4:	d008      	beq.n	80050f8 <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80050e6:	7cfb      	ldrb	r3, [r7, #19]
 80050e8:	2b29      	cmp	r3, #41	; 0x29
 80050ea:	d005      	beq.n	80050f8 <HAL_I2C_ER_IRQHandler+0xce>
 80050ec:	7cfb      	ldrb	r3, [r7, #19]
 80050ee:	2b28      	cmp	r3, #40	; 0x28
 80050f0:	d106      	bne.n	8005100 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80050f2:	68fb      	ldr	r3, [r7, #12]
 80050f4:	2b21      	cmp	r3, #33	; 0x21
 80050f6:	d103      	bne.n	8005100 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80050f8:	6878      	ldr	r0, [r7, #4]
 80050fa:	f001 f847 	bl	800618c <I2C_Slave_AF>
 80050fe:	e016      	b.n	800512e <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005100:	687b      	ldr	r3, [r7, #4]
 8005102:	681b      	ldr	r3, [r3, #0]
 8005104:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005108:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 800510a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800510c:	f043 0304 	orr.w	r3, r3, #4
 8005110:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8005112:	7efb      	ldrb	r3, [r7, #27]
 8005114:	2b10      	cmp	r3, #16
 8005116:	d002      	beq.n	800511e <HAL_I2C_ER_IRQHandler+0xf4>
 8005118:	7efb      	ldrb	r3, [r7, #27]
 800511a:	2b40      	cmp	r3, #64	; 0x40
 800511c:	d107      	bne.n	800512e <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800511e:	687b      	ldr	r3, [r7, #4]
 8005120:	681b      	ldr	r3, [r3, #0]
 8005122:	681a      	ldr	r2, [r3, #0]
 8005124:	687b      	ldr	r3, [r7, #4]
 8005126:	681b      	ldr	r3, [r3, #0]
 8005128:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800512c:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800512e:	6a3b      	ldr	r3, [r7, #32]
 8005130:	0adb      	lsrs	r3, r3, #11
 8005132:	f003 0301 	and.w	r3, r3, #1
 8005136:	2b00      	cmp	r3, #0
 8005138:	d00e      	beq.n	8005158 <HAL_I2C_ER_IRQHandler+0x12e>
 800513a:	69fb      	ldr	r3, [r7, #28]
 800513c:	0a1b      	lsrs	r3, r3, #8
 800513e:	f003 0301 	and.w	r3, r3, #1
 8005142:	2b00      	cmp	r3, #0
 8005144:	d008      	beq.n	8005158 <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 8005146:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005148:	f043 0308 	orr.w	r3, r3, #8
 800514c:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 800514e:	687b      	ldr	r3, [r7, #4]
 8005150:	681b      	ldr	r3, [r3, #0]
 8005152:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 8005156:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 8005158:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800515a:	2b00      	cmp	r3, #0
 800515c:	d008      	beq.n	8005170 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 800515e:	687b      	ldr	r3, [r7, #4]
 8005160:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8005162:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005164:	431a      	orrs	r2, r3
 8005166:	687b      	ldr	r3, [r7, #4]
 8005168:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800516a:	6878      	ldr	r0, [r7, #4]
 800516c:	f001 f87e 	bl	800626c <I2C_ITError>
  }
}
 8005170:	bf00      	nop
 8005172:	3728      	adds	r7, #40	; 0x28
 8005174:	46bd      	mov	sp, r7
 8005176:	bd80      	pop	{r7, pc}

08005178 <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005178:	b480      	push	{r7}
 800517a:	b083      	sub	sp, #12
 800517c:	af00      	add	r7, sp, #0
 800517e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8005180:	bf00      	nop
 8005182:	370c      	adds	r7, #12
 8005184:	46bd      	mov	sp, r7
 8005186:	f85d 7b04 	ldr.w	r7, [sp], #4
 800518a:	4770      	bx	lr

0800518c <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800518c:	b480      	push	{r7}
 800518e:	b083      	sub	sp, #12
 8005190:	af00      	add	r7, sp, #0
 8005192:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8005194:	bf00      	nop
 8005196:	370c      	adds	r7, #12
 8005198:	46bd      	mov	sp, r7
 800519a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800519e:	4770      	bx	lr

080051a0 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051a0:	b480      	push	{r7}
 80051a2:	b083      	sub	sp, #12
 80051a4:	af00      	add	r7, sp, #0
 80051a6:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 80051a8:	bf00      	nop
 80051aa:	370c      	adds	r7, #12
 80051ac:	46bd      	mov	sp, r7
 80051ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051b2:	4770      	bx	lr

080051b4 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051b4:	b480      	push	{r7}
 80051b6:	b083      	sub	sp, #12
 80051b8:	af00      	add	r7, sp, #0
 80051ba:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80051bc:	bf00      	nop
 80051be:	370c      	adds	r7, #12
 80051c0:	46bd      	mov	sp, r7
 80051c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051c6:	4770      	bx	lr

080051c8 <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80051c8:	b480      	push	{r7}
 80051ca:	b083      	sub	sp, #12
 80051cc:	af00      	add	r7, sp, #0
 80051ce:	6078      	str	r0, [r7, #4]
 80051d0:	460b      	mov	r3, r1
 80051d2:	70fb      	strb	r3, [r7, #3]
 80051d4:	4613      	mov	r3, r2
 80051d6:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80051d8:	bf00      	nop
 80051da:	370c      	adds	r7, #12
 80051dc:	46bd      	mov	sp, r7
 80051de:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051e2:	4770      	bx	lr

080051e4 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051e4:	b480      	push	{r7}
 80051e6:	b083      	sub	sp, #12
 80051e8:	af00      	add	r7, sp, #0
 80051ea:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80051ec:	bf00      	nop
 80051ee:	370c      	adds	r7, #12
 80051f0:	46bd      	mov	sp, r7
 80051f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80051f6:	4770      	bx	lr

080051f8 <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80051f8:	b480      	push	{r7}
 80051fa:	b083      	sub	sp, #12
 80051fc:	af00      	add	r7, sp, #0
 80051fe:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 8005200:	bf00      	nop
 8005202:	370c      	adds	r7, #12
 8005204:	46bd      	mov	sp, r7
 8005206:	f85d 7b04 	ldr.w	r7, [sp], #4
 800520a:	4770      	bx	lr

0800520c <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800520c:	b480      	push	{r7}
 800520e:	b083      	sub	sp, #12
 8005210:	af00      	add	r7, sp, #0
 8005212:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8005214:	bf00      	nop
 8005216:	370c      	adds	r7, #12
 8005218:	46bd      	mov	sp, r7
 800521a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800521e:	4770      	bx	lr

08005220 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8005220:	b480      	push	{r7}
 8005222:	b083      	sub	sp, #12
 8005224:	af00      	add	r7, sp, #0
 8005226:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 8005228:	bf00      	nop
 800522a:	370c      	adds	r7, #12
 800522c:	46bd      	mov	sp, r7
 800522e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005232:	4770      	bx	lr

08005234 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8005234:	b480      	push	{r7}
 8005236:	b083      	sub	sp, #12
 8005238:	af00      	add	r7, sp, #0
 800523a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 800523c:	bf00      	nop
 800523e:	370c      	adds	r7, #12
 8005240:	46bd      	mov	sp, r7
 8005242:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005246:	4770      	bx	lr

08005248 <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005248:	b580      	push	{r7, lr}
 800524a:	b084      	sub	sp, #16
 800524c:	af00      	add	r7, sp, #0
 800524e:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005250:	687b      	ldr	r3, [r7, #4]
 8005252:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005256:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 8005258:	687b      	ldr	r3, [r7, #4]
 800525a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800525e:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005264:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800526a:	2b00      	cmp	r3, #0
 800526c:	d150      	bne.n	8005310 <I2C_MasterTransmit_TXE+0xc8>
 800526e:	7bfb      	ldrb	r3, [r7, #15]
 8005270:	2b21      	cmp	r3, #33	; 0x21
 8005272:	d14d      	bne.n	8005310 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8005274:	68bb      	ldr	r3, [r7, #8]
 8005276:	2b08      	cmp	r3, #8
 8005278:	d01d      	beq.n	80052b6 <I2C_MasterTransmit_TXE+0x6e>
 800527a:	68bb      	ldr	r3, [r7, #8]
 800527c:	2b20      	cmp	r3, #32
 800527e:	d01a      	beq.n	80052b6 <I2C_MasterTransmit_TXE+0x6e>
 8005280:	68bb      	ldr	r3, [r7, #8]
 8005282:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005286:	d016      	beq.n	80052b6 <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	685a      	ldr	r2, [r3, #4]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005296:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	2211      	movs	r2, #17
 800529c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800529e:	687b      	ldr	r3, [r7, #4]
 80052a0:	2200      	movs	r2, #0
 80052a2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 80052a6:	687b      	ldr	r3, [r7, #4]
 80052a8:	2220      	movs	r2, #32
 80052aa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80052ae:	6878      	ldr	r0, [r7, #4]
 80052b0:	f7ff ff62 	bl	8005178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052b4:	e060      	b.n	8005378 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80052b6:	687b      	ldr	r3, [r7, #4]
 80052b8:	681b      	ldr	r3, [r3, #0]
 80052ba:	685a      	ldr	r2, [r3, #4]
 80052bc:	687b      	ldr	r3, [r7, #4]
 80052be:	681b      	ldr	r3, [r3, #0]
 80052c0:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80052c4:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80052c6:	687b      	ldr	r3, [r7, #4]
 80052c8:	681b      	ldr	r3, [r3, #0]
 80052ca:	681a      	ldr	r2, [r3, #0]
 80052cc:	687b      	ldr	r3, [r7, #4]
 80052ce:	681b      	ldr	r3, [r3, #0]
 80052d0:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80052d4:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80052d6:	687b      	ldr	r3, [r7, #4]
 80052d8:	2200      	movs	r2, #0
 80052da:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	2220      	movs	r2, #32
 80052e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80052ea:	b2db      	uxtb	r3, r3
 80052ec:	2b40      	cmp	r3, #64	; 0x40
 80052ee:	d107      	bne.n	8005300 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80052f0:	687b      	ldr	r3, [r7, #4]
 80052f2:	2200      	movs	r2, #0
 80052f4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80052f8:	6878      	ldr	r0, [r7, #4]
 80052fa:	f7ff ff7d 	bl	80051f8 <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80052fe:	e03b      	b.n	8005378 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005300:	687b      	ldr	r3, [r7, #4]
 8005302:	2200      	movs	r2, #0
 8005304:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005308:	6878      	ldr	r0, [r7, #4]
 800530a:	f7ff ff35 	bl	8005178 <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 800530e:	e033      	b.n	8005378 <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8005310:	7bfb      	ldrb	r3, [r7, #15]
 8005312:	2b21      	cmp	r3, #33	; 0x21
 8005314:	d005      	beq.n	8005322 <I2C_MasterTransmit_TXE+0xda>
 8005316:	7bbb      	ldrb	r3, [r7, #14]
 8005318:	2b40      	cmp	r3, #64	; 0x40
 800531a:	d12d      	bne.n	8005378 <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 800531c:	7bfb      	ldrb	r3, [r7, #15]
 800531e:	2b22      	cmp	r3, #34	; 0x22
 8005320:	d12a      	bne.n	8005378 <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005326:	b29b      	uxth	r3, r3
 8005328:	2b00      	cmp	r3, #0
 800532a:	d108      	bne.n	800533e <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800532c:	687b      	ldr	r3, [r7, #4]
 800532e:	681b      	ldr	r3, [r3, #0]
 8005330:	685a      	ldr	r2, [r3, #4]
 8005332:	687b      	ldr	r3, [r7, #4]
 8005334:	681b      	ldr	r3, [r3, #0]
 8005336:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800533a:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 800533c:	e01c      	b.n	8005378 <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800533e:	687b      	ldr	r3, [r7, #4]
 8005340:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005344:	b2db      	uxtb	r3, r3
 8005346:	2b40      	cmp	r3, #64	; 0x40
 8005348:	d103      	bne.n	8005352 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800534a:	6878      	ldr	r0, [r7, #4]
 800534c:	f000 f880 	bl	8005450 <I2C_MemoryTransmit_TXE_BTF>
}
 8005350:	e012      	b.n	8005378 <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005352:	687b      	ldr	r3, [r7, #4]
 8005354:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005356:	781a      	ldrb	r2, [r3, #0]
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	681b      	ldr	r3, [r3, #0]
 800535c:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 800535e:	687b      	ldr	r3, [r7, #4]
 8005360:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005362:	1c5a      	adds	r2, r3, #1
 8005364:	687b      	ldr	r3, [r7, #4]
 8005366:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800536c:	b29b      	uxth	r3, r3
 800536e:	3b01      	subs	r3, #1
 8005370:	b29a      	uxth	r2, r3
 8005372:	687b      	ldr	r3, [r7, #4]
 8005374:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005376:	e7ff      	b.n	8005378 <I2C_MasterTransmit_TXE+0x130>
 8005378:	bf00      	nop
 800537a:	3710      	adds	r7, #16
 800537c:	46bd      	mov	sp, r7
 800537e:	bd80      	pop	{r7, pc}

08005380 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005380:	b580      	push	{r7, lr}
 8005382:	b084      	sub	sp, #16
 8005384:	af00      	add	r7, sp, #0
 8005386:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8005388:	687b      	ldr	r3, [r7, #4]
 800538a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800538c:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 800538e:	687b      	ldr	r3, [r7, #4]
 8005390:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005394:	b2db      	uxtb	r3, r3
 8005396:	2b21      	cmp	r3, #33	; 0x21
 8005398:	d156      	bne.n	8005448 <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800539a:	687b      	ldr	r3, [r7, #4]
 800539c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800539e:	b29b      	uxth	r3, r3
 80053a0:	2b00      	cmp	r3, #0
 80053a2:	d012      	beq.n	80053ca <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a4:	687b      	ldr	r3, [r7, #4]
 80053a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053a8:	781a      	ldrb	r2, [r3, #0]
 80053aa:	687b      	ldr	r3, [r7, #4]
 80053ac:	681b      	ldr	r3, [r3, #0]
 80053ae:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80053b0:	687b      	ldr	r3, [r7, #4]
 80053b2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b4:	1c5a      	adds	r2, r3, #1
 80053b6:	687b      	ldr	r3, [r7, #4]
 80053b8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80053ba:	687b      	ldr	r3, [r7, #4]
 80053bc:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053be:	b29b      	uxth	r3, r3
 80053c0:	3b01      	subs	r3, #1
 80053c2:	b29a      	uxth	r2, r3
 80053c4:	687b      	ldr	r3, [r7, #4]
 80053c6:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80053c8:	e03e      	b.n	8005448 <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80053ca:	68fb      	ldr	r3, [r7, #12]
 80053cc:	2b08      	cmp	r3, #8
 80053ce:	d01d      	beq.n	800540c <I2C_MasterTransmit_BTF+0x8c>
 80053d0:	68fb      	ldr	r3, [r7, #12]
 80053d2:	2b20      	cmp	r3, #32
 80053d4:	d01a      	beq.n	800540c <I2C_MasterTransmit_BTF+0x8c>
 80053d6:	68fb      	ldr	r3, [r7, #12]
 80053d8:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80053dc:	d016      	beq.n	800540c <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	681b      	ldr	r3, [r3, #0]
 80053e2:	685a      	ldr	r2, [r3, #4]
 80053e4:	687b      	ldr	r3, [r7, #4]
 80053e6:	681b      	ldr	r3, [r3, #0]
 80053e8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80053ec:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80053ee:	687b      	ldr	r3, [r7, #4]
 80053f0:	2211      	movs	r2, #17
 80053f2:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80053f4:	687b      	ldr	r3, [r7, #4]
 80053f6:	2200      	movs	r2, #0
 80053f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80053fc:	687b      	ldr	r3, [r7, #4]
 80053fe:	2220      	movs	r2, #32
 8005400:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005404:	6878      	ldr	r0, [r7, #4]
 8005406:	f7ff feb7 	bl	8005178 <HAL_I2C_MasterTxCpltCallback>
}
 800540a:	e01d      	b.n	8005448 <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800540c:	687b      	ldr	r3, [r7, #4]
 800540e:	681b      	ldr	r3, [r3, #0]
 8005410:	685a      	ldr	r2, [r3, #4]
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	681b      	ldr	r3, [r3, #0]
 8005416:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800541a:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800541c:	687b      	ldr	r3, [r7, #4]
 800541e:	681b      	ldr	r3, [r3, #0]
 8005420:	681a      	ldr	r2, [r3, #0]
 8005422:	687b      	ldr	r3, [r7, #4]
 8005424:	681b      	ldr	r3, [r3, #0]
 8005426:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 800542a:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	2200      	movs	r2, #0
 8005430:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8005432:	687b      	ldr	r3, [r7, #4]
 8005434:	2220      	movs	r2, #32
 8005436:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800543a:	687b      	ldr	r3, [r7, #4]
 800543c:	2200      	movs	r2, #0
 800543e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8005442:	6878      	ldr	r0, [r7, #4]
 8005444:	f7ff fe98 	bl	8005178 <HAL_I2C_MasterTxCpltCallback>
}
 8005448:	bf00      	nop
 800544a:	3710      	adds	r7, #16
 800544c:	46bd      	mov	sp, r7
 800544e:	bd80      	pop	{r7, pc}

08005450 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8005450:	b580      	push	{r7, lr}
 8005452:	b084      	sub	sp, #16
 8005454:	af00      	add	r7, sp, #0
 8005456:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005458:	687b      	ldr	r3, [r7, #4]
 800545a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800545e:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8005460:	687b      	ldr	r3, [r7, #4]
 8005462:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005464:	2b00      	cmp	r3, #0
 8005466:	d11d      	bne.n	80054a4 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8005468:	687b      	ldr	r3, [r7, #4]
 800546a:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 800546c:	2b01      	cmp	r3, #1
 800546e:	d10b      	bne.n	8005488 <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8005470:	687b      	ldr	r3, [r7, #4]
 8005472:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8005474:	b2da      	uxtb	r2, r3
 8005476:	687b      	ldr	r3, [r7, #4]
 8005478:	681b      	ldr	r3, [r3, #0]
 800547a:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005480:	1c9a      	adds	r2, r3, #2
 8005482:	687b      	ldr	r3, [r7, #4]
 8005484:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8005486:	e06e      	b.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8005488:	687b      	ldr	r3, [r7, #4]
 800548a:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800548c:	b29b      	uxth	r3, r3
 800548e:	121b      	asrs	r3, r3, #8
 8005490:	b2da      	uxtb	r2, r3
 8005492:	687b      	ldr	r3, [r7, #4]
 8005494:	681b      	ldr	r3, [r3, #0]
 8005496:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8005498:	687b      	ldr	r3, [r7, #4]
 800549a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800549c:	1c5a      	adds	r2, r3, #1
 800549e:	687b      	ldr	r3, [r7, #4]
 80054a0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054a2:	e060      	b.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054a8:	2b01      	cmp	r3, #1
 80054aa:	d10b      	bne.n	80054c4 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 80054ac:	687b      	ldr	r3, [r7, #4]
 80054ae:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80054b0:	b2da      	uxtb	r2, r3
 80054b2:	687b      	ldr	r3, [r7, #4]
 80054b4:	681b      	ldr	r3, [r3, #0]
 80054b6:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 80054b8:	687b      	ldr	r3, [r7, #4]
 80054ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054bc:	1c5a      	adds	r2, r3, #1
 80054be:	687b      	ldr	r3, [r7, #4]
 80054c0:	651a      	str	r2, [r3, #80]	; 0x50
}
 80054c2:	e050      	b.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 80054c4:	687b      	ldr	r3, [r7, #4]
 80054c6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80054c8:	2b02      	cmp	r3, #2
 80054ca:	d14c      	bne.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 80054cc:	7bfb      	ldrb	r3, [r7, #15]
 80054ce:	2b22      	cmp	r3, #34	; 0x22
 80054d0:	d108      	bne.n	80054e4 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 80054d2:	687b      	ldr	r3, [r7, #4]
 80054d4:	681b      	ldr	r3, [r3, #0]
 80054d6:	681a      	ldr	r2, [r3, #0]
 80054d8:	687b      	ldr	r3, [r7, #4]
 80054da:	681b      	ldr	r3, [r3, #0]
 80054dc:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 80054e0:	601a      	str	r2, [r3, #0]
}
 80054e2:	e040      	b.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 80054e4:	687b      	ldr	r3, [r7, #4]
 80054e6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80054e8:	b29b      	uxth	r3, r3
 80054ea:	2b00      	cmp	r3, #0
 80054ec:	d015      	beq.n	800551a <I2C_MemoryTransmit_TXE_BTF+0xca>
 80054ee:	7bfb      	ldrb	r3, [r7, #15]
 80054f0:	2b21      	cmp	r3, #33	; 0x21
 80054f2:	d112      	bne.n	800551a <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 80054f4:	687b      	ldr	r3, [r7, #4]
 80054f6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80054f8:	781a      	ldrb	r2, [r3, #0]
 80054fa:	687b      	ldr	r3, [r7, #4]
 80054fc:	681b      	ldr	r3, [r3, #0]
 80054fe:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8005500:	687b      	ldr	r3, [r7, #4]
 8005502:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005504:	1c5a      	adds	r2, r3, #1
 8005506:	687b      	ldr	r3, [r7, #4]
 8005508:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 800550a:	687b      	ldr	r3, [r7, #4]
 800550c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800550e:	b29b      	uxth	r3, r3
 8005510:	3b01      	subs	r3, #1
 8005512:	b29a      	uxth	r2, r3
 8005514:	687b      	ldr	r3, [r7, #4]
 8005516:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8005518:	e025      	b.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800551a:	687b      	ldr	r3, [r7, #4]
 800551c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800551e:	b29b      	uxth	r3, r3
 8005520:	2b00      	cmp	r3, #0
 8005522:	d120      	bne.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
 8005524:	7bfb      	ldrb	r3, [r7, #15]
 8005526:	2b21      	cmp	r3, #33	; 0x21
 8005528:	d11d      	bne.n	8005566 <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800552a:	687b      	ldr	r3, [r7, #4]
 800552c:	681b      	ldr	r3, [r3, #0]
 800552e:	685a      	ldr	r2, [r3, #4]
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005538:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 800553a:	687b      	ldr	r3, [r7, #4]
 800553c:	681b      	ldr	r3, [r3, #0]
 800553e:	681a      	ldr	r2, [r3, #0]
 8005540:	687b      	ldr	r3, [r7, #4]
 8005542:	681b      	ldr	r3, [r3, #0]
 8005544:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005548:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 800554a:	687b      	ldr	r3, [r7, #4]
 800554c:	2200      	movs	r2, #0
 800554e:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8005550:	687b      	ldr	r3, [r7, #4]
 8005552:	2220      	movs	r2, #32
 8005554:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005558:	687b      	ldr	r3, [r7, #4]
 800555a:	2200      	movs	r2, #0
 800555c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8005560:	6878      	ldr	r0, [r7, #4]
 8005562:	f7ff fe49 	bl	80051f8 <HAL_I2C_MemTxCpltCallback>
}
 8005566:	bf00      	nop
 8005568:	3710      	adds	r7, #16
 800556a:	46bd      	mov	sp, r7
 800556c:	bd80      	pop	{r7, pc}

0800556e <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 800556e:	b580      	push	{r7, lr}
 8005570:	b084      	sub	sp, #16
 8005572:	af00      	add	r7, sp, #0
 8005574:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005576:	687b      	ldr	r3, [r7, #4]
 8005578:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800557c:	b2db      	uxtb	r3, r3
 800557e:	2b22      	cmp	r3, #34	; 0x22
 8005580:	f040 80a2 	bne.w	80056c8 <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8005584:	687b      	ldr	r3, [r7, #4]
 8005586:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005588:	b29b      	uxth	r3, r3
 800558a:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 800558c:	68fb      	ldr	r3, [r7, #12]
 800558e:	2b03      	cmp	r3, #3
 8005590:	d921      	bls.n	80055d6 <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005592:	687b      	ldr	r3, [r7, #4]
 8005594:	681b      	ldr	r3, [r3, #0]
 8005596:	691a      	ldr	r2, [r3, #16]
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800559c:	b2d2      	uxtb	r2, r2
 800559e:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80055a0:	687b      	ldr	r3, [r7, #4]
 80055a2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80055a4:	1c5a      	adds	r2, r3, #1
 80055a6:	687b      	ldr	r3, [r7, #4]
 80055a8:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055ae:	b29b      	uxth	r3, r3
 80055b0:	3b01      	subs	r3, #1
 80055b2:	b29a      	uxth	r2, r3
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 80055b8:	687b      	ldr	r3, [r7, #4]
 80055ba:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80055bc:	b29b      	uxth	r3, r3
 80055be:	2b03      	cmp	r3, #3
 80055c0:	f040 8082 	bne.w	80056c8 <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80055c4:	687b      	ldr	r3, [r7, #4]
 80055c6:	681b      	ldr	r3, [r3, #0]
 80055c8:	685a      	ldr	r2, [r3, #4]
 80055ca:	687b      	ldr	r3, [r7, #4]
 80055cc:	681b      	ldr	r3, [r3, #0]
 80055ce:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80055d2:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 80055d4:	e078      	b.n	80056c8 <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80055da:	2b02      	cmp	r3, #2
 80055dc:	d074      	beq.n	80056c8 <I2C_MasterReceive_RXNE+0x15a>
 80055de:	68fb      	ldr	r3, [r7, #12]
 80055e0:	2b01      	cmp	r3, #1
 80055e2:	d002      	beq.n	80055ea <I2C_MasterReceive_RXNE+0x7c>
 80055e4:	68fb      	ldr	r3, [r7, #12]
 80055e6:	2b00      	cmp	r3, #0
 80055e8:	d16e      	bne.n	80056c8 <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 80055ea:	6878      	ldr	r0, [r7, #4]
 80055ec:	f001 f818 	bl	8006620 <I2C_WaitOnSTOPRequestThroughIT>
 80055f0:	4603      	mov	r3, r0
 80055f2:	2b00      	cmp	r3, #0
 80055f4:	d142      	bne.n	800567c <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	681b      	ldr	r3, [r3, #0]
 80055fa:	681a      	ldr	r2, [r3, #0]
 80055fc:	687b      	ldr	r3, [r7, #4]
 80055fe:	681b      	ldr	r3, [r3, #0]
 8005600:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005604:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005606:	687b      	ldr	r3, [r7, #4]
 8005608:	681b      	ldr	r3, [r3, #0]
 800560a:	685a      	ldr	r2, [r3, #4]
 800560c:	687b      	ldr	r3, [r7, #4]
 800560e:	681b      	ldr	r3, [r3, #0]
 8005610:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005614:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	681b      	ldr	r3, [r3, #0]
 800561a:	691a      	ldr	r2, [r3, #16]
 800561c:	687b      	ldr	r3, [r7, #4]
 800561e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005620:	b2d2      	uxtb	r2, r2
 8005622:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8005624:	687b      	ldr	r3, [r7, #4]
 8005626:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005628:	1c5a      	adds	r2, r3, #1
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800562e:	687b      	ldr	r3, [r7, #4]
 8005630:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005632:	b29b      	uxth	r3, r3
 8005634:	3b01      	subs	r3, #1
 8005636:	b29a      	uxth	r2, r3
 8005638:	687b      	ldr	r3, [r7, #4]
 800563a:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 800563c:	687b      	ldr	r3, [r7, #4]
 800563e:	2220      	movs	r2, #32
 8005640:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8005644:	687b      	ldr	r3, [r7, #4]
 8005646:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800564a:	b2db      	uxtb	r3, r3
 800564c:	2b40      	cmp	r3, #64	; 0x40
 800564e:	d10a      	bne.n	8005666 <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005650:	687b      	ldr	r3, [r7, #4]
 8005652:	2200      	movs	r2, #0
 8005654:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8005658:	687b      	ldr	r3, [r7, #4]
 800565a:	2200      	movs	r2, #0
 800565c:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 800565e:	6878      	ldr	r0, [r7, #4]
 8005660:	f7ff fdd4 	bl	800520c <HAL_I2C_MemRxCpltCallback>
}
 8005664:	e030      	b.n	80056c8 <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8005666:	687b      	ldr	r3, [r7, #4]
 8005668:	2200      	movs	r2, #0
 800566a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	2212      	movs	r2, #18
 8005672:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8005674:	6878      	ldr	r0, [r7, #4]
 8005676:	f7ff fd89 	bl	800518c <HAL_I2C_MasterRxCpltCallback>
}
 800567a:	e025      	b.n	80056c8 <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	685a      	ldr	r2, [r3, #4]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	681b      	ldr	r3, [r3, #0]
 8005686:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800568a:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800568c:	687b      	ldr	r3, [r7, #4]
 800568e:	681b      	ldr	r3, [r3, #0]
 8005690:	691a      	ldr	r2, [r3, #16]
 8005692:	687b      	ldr	r3, [r7, #4]
 8005694:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005696:	b2d2      	uxtb	r2, r2
 8005698:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 800569a:	687b      	ldr	r3, [r7, #4]
 800569c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800569e:	1c5a      	adds	r2, r3, #1
 80056a0:	687b      	ldr	r3, [r7, #4]
 80056a2:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 80056a4:	687b      	ldr	r3, [r7, #4]
 80056a6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056a8:	b29b      	uxth	r3, r3
 80056aa:	3b01      	subs	r3, #1
 80056ac:	b29a      	uxth	r2, r3
 80056ae:	687b      	ldr	r3, [r7, #4]
 80056b0:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 80056b2:	687b      	ldr	r3, [r7, #4]
 80056b4:	2220      	movs	r2, #32
 80056b6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80056ba:	687b      	ldr	r3, [r7, #4]
 80056bc:	2200      	movs	r2, #0
 80056be:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 80056c2:	6878      	ldr	r0, [r7, #4]
 80056c4:	f7ff fdac 	bl	8005220 <HAL_I2C_ErrorCallback>
}
 80056c8:	bf00      	nop
 80056ca:	3710      	adds	r7, #16
 80056cc:	46bd      	mov	sp, r7
 80056ce:	bd80      	pop	{r7, pc}

080056d0 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 80056d0:	b580      	push	{r7, lr}
 80056d2:	b084      	sub	sp, #16
 80056d4:	af00      	add	r7, sp, #0
 80056d6:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 80056d8:	687b      	ldr	r3, [r7, #4]
 80056da:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80056dc:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 80056de:	687b      	ldr	r3, [r7, #4]
 80056e0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056e2:	b29b      	uxth	r3, r3
 80056e4:	2b04      	cmp	r3, #4
 80056e6:	d11b      	bne.n	8005720 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	681b      	ldr	r3, [r3, #0]
 80056ec:	685a      	ldr	r2, [r3, #4]
 80056ee:	687b      	ldr	r3, [r7, #4]
 80056f0:	681b      	ldr	r3, [r3, #0]
 80056f2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80056f6:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056f8:	687b      	ldr	r3, [r7, #4]
 80056fa:	681b      	ldr	r3, [r3, #0]
 80056fc:	691a      	ldr	r2, [r3, #16]
 80056fe:	687b      	ldr	r3, [r7, #4]
 8005700:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005702:	b2d2      	uxtb	r2, r2
 8005704:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005706:	687b      	ldr	r3, [r7, #4]
 8005708:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800570a:	1c5a      	adds	r2, r3, #1
 800570c:	687b      	ldr	r3, [r7, #4]
 800570e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005710:	687b      	ldr	r3, [r7, #4]
 8005712:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005714:	b29b      	uxth	r3, r3
 8005716:	3b01      	subs	r3, #1
 8005718:	b29a      	uxth	r2, r3
 800571a:	687b      	ldr	r3, [r7, #4]
 800571c:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 800571e:	e0bd      	b.n	800589c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8005720:	687b      	ldr	r3, [r7, #4]
 8005722:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005724:	b29b      	uxth	r3, r3
 8005726:	2b03      	cmp	r3, #3
 8005728:	d129      	bne.n	800577e <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 800572a:	687b      	ldr	r3, [r7, #4]
 800572c:	681b      	ldr	r3, [r3, #0]
 800572e:	685a      	ldr	r2, [r3, #4]
 8005730:	687b      	ldr	r3, [r7, #4]
 8005732:	681b      	ldr	r3, [r3, #0]
 8005734:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005738:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 800573a:	68fb      	ldr	r3, [r7, #12]
 800573c:	2b04      	cmp	r3, #4
 800573e:	d00a      	beq.n	8005756 <I2C_MasterReceive_BTF+0x86>
 8005740:	68fb      	ldr	r3, [r7, #12]
 8005742:	2b02      	cmp	r3, #2
 8005744:	d007      	beq.n	8005756 <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	681b      	ldr	r3, [r3, #0]
 800574a:	681a      	ldr	r2, [r3, #0]
 800574c:	687b      	ldr	r3, [r7, #4]
 800574e:	681b      	ldr	r3, [r3, #0]
 8005750:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005754:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005756:	687b      	ldr	r3, [r7, #4]
 8005758:	681b      	ldr	r3, [r3, #0]
 800575a:	691a      	ldr	r2, [r3, #16]
 800575c:	687b      	ldr	r3, [r7, #4]
 800575e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005760:	b2d2      	uxtb	r2, r2
 8005762:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005764:	687b      	ldr	r3, [r7, #4]
 8005766:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005768:	1c5a      	adds	r2, r3, #1
 800576a:	687b      	ldr	r3, [r7, #4]
 800576c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800576e:	687b      	ldr	r3, [r7, #4]
 8005770:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005772:	b29b      	uxth	r3, r3
 8005774:	3b01      	subs	r3, #1
 8005776:	b29a      	uxth	r2, r3
 8005778:	687b      	ldr	r3, [r7, #4]
 800577a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800577c:	e08e      	b.n	800589c <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 800577e:	687b      	ldr	r3, [r7, #4]
 8005780:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005782:	b29b      	uxth	r3, r3
 8005784:	2b02      	cmp	r3, #2
 8005786:	d176      	bne.n	8005876 <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8005788:	68fb      	ldr	r3, [r7, #12]
 800578a:	2b01      	cmp	r3, #1
 800578c:	d002      	beq.n	8005794 <I2C_MasterReceive_BTF+0xc4>
 800578e:	68fb      	ldr	r3, [r7, #12]
 8005790:	2b10      	cmp	r3, #16
 8005792:	d108      	bne.n	80057a6 <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005794:	687b      	ldr	r3, [r7, #4]
 8005796:	681b      	ldr	r3, [r3, #0]
 8005798:	681a      	ldr	r2, [r3, #0]
 800579a:	687b      	ldr	r3, [r7, #4]
 800579c:	681b      	ldr	r3, [r3, #0]
 800579e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057a2:	601a      	str	r2, [r3, #0]
 80057a4:	e019      	b.n	80057da <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 80057a6:	68fb      	ldr	r3, [r7, #12]
 80057a8:	2b04      	cmp	r3, #4
 80057aa:	d002      	beq.n	80057b2 <I2C_MasterReceive_BTF+0xe2>
 80057ac:	68fb      	ldr	r3, [r7, #12]
 80057ae:	2b02      	cmp	r3, #2
 80057b0:	d108      	bne.n	80057c4 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057b2:	687b      	ldr	r3, [r7, #4]
 80057b4:	681b      	ldr	r3, [r3, #0]
 80057b6:	681a      	ldr	r2, [r3, #0]
 80057b8:	687b      	ldr	r3, [r7, #4]
 80057ba:	681b      	ldr	r3, [r3, #0]
 80057bc:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80057c0:	601a      	str	r2, [r3, #0]
 80057c2:	e00a      	b.n	80057da <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 80057c4:	68fb      	ldr	r3, [r7, #12]
 80057c6:	2b10      	cmp	r3, #16
 80057c8:	d007      	beq.n	80057da <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80057ca:	687b      	ldr	r3, [r7, #4]
 80057cc:	681b      	ldr	r3, [r3, #0]
 80057ce:	681a      	ldr	r2, [r3, #0]
 80057d0:	687b      	ldr	r3, [r7, #4]
 80057d2:	681b      	ldr	r3, [r3, #0]
 80057d4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80057d8:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80057da:	687b      	ldr	r3, [r7, #4]
 80057dc:	681b      	ldr	r3, [r3, #0]
 80057de:	691a      	ldr	r2, [r3, #16]
 80057e0:	687b      	ldr	r3, [r7, #4]
 80057e2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057e4:	b2d2      	uxtb	r2, r2
 80057e6:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 80057e8:	687b      	ldr	r3, [r7, #4]
 80057ea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80057ec:	1c5a      	adds	r2, r3, #1
 80057ee:	687b      	ldr	r3, [r7, #4]
 80057f0:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 80057f2:	687b      	ldr	r3, [r7, #4]
 80057f4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80057f6:	b29b      	uxth	r3, r3
 80057f8:	3b01      	subs	r3, #1
 80057fa:	b29a      	uxth	r2, r3
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005800:	687b      	ldr	r3, [r7, #4]
 8005802:	681b      	ldr	r3, [r3, #0]
 8005804:	691a      	ldr	r2, [r3, #16]
 8005806:	687b      	ldr	r3, [r7, #4]
 8005808:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800580a:	b2d2      	uxtb	r2, r2
 800580c:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 800580e:	687b      	ldr	r3, [r7, #4]
 8005810:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005812:	1c5a      	adds	r2, r3, #1
 8005814:	687b      	ldr	r3, [r7, #4]
 8005816:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800581c:	b29b      	uxth	r3, r3
 800581e:	3b01      	subs	r3, #1
 8005820:	b29a      	uxth	r2, r3
 8005822:	687b      	ldr	r3, [r7, #4]
 8005824:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8005826:	687b      	ldr	r3, [r7, #4]
 8005828:	681b      	ldr	r3, [r3, #0]
 800582a:	685a      	ldr	r2, [r3, #4]
 800582c:	687b      	ldr	r3, [r7, #4]
 800582e:	681b      	ldr	r3, [r3, #0]
 8005830:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8005834:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8005836:	687b      	ldr	r3, [r7, #4]
 8005838:	2220      	movs	r2, #32
 800583a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 800583e:	687b      	ldr	r3, [r7, #4]
 8005840:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005844:	b2db      	uxtb	r3, r3
 8005846:	2b40      	cmp	r3, #64	; 0x40
 8005848:	d10a      	bne.n	8005860 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	2200      	movs	r2, #0
 800584e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8005852:	687b      	ldr	r3, [r7, #4]
 8005854:	2200      	movs	r2, #0
 8005856:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8005858:	6878      	ldr	r0, [r7, #4]
 800585a:	f7ff fcd7 	bl	800520c <HAL_I2C_MemRxCpltCallback>
}
 800585e:	e01d      	b.n	800589c <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005860:	687b      	ldr	r3, [r7, #4]
 8005862:	2200      	movs	r2, #0
 8005864:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	2212      	movs	r2, #18
 800586c:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 800586e:	6878      	ldr	r0, [r7, #4]
 8005870:	f7ff fc8c 	bl	800518c <HAL_I2C_MasterRxCpltCallback>
}
 8005874:	e012      	b.n	800589c <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005876:	687b      	ldr	r3, [r7, #4]
 8005878:	681b      	ldr	r3, [r3, #0]
 800587a:	691a      	ldr	r2, [r3, #16]
 800587c:	687b      	ldr	r3, [r7, #4]
 800587e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005880:	b2d2      	uxtb	r2, r2
 8005882:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8005884:	687b      	ldr	r3, [r7, #4]
 8005886:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005888:	1c5a      	adds	r2, r3, #1
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 800588e:	687b      	ldr	r3, [r7, #4]
 8005890:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005892:	b29b      	uxth	r3, r3
 8005894:	3b01      	subs	r3, #1
 8005896:	b29a      	uxth	r2, r3
 8005898:	687b      	ldr	r3, [r7, #4]
 800589a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800589c:	bf00      	nop
 800589e:	3710      	adds	r7, #16
 80058a0:	46bd      	mov	sp, r7
 80058a2:	bd80      	pop	{r7, pc}

080058a4 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 80058a4:	b480      	push	{r7}
 80058a6:	b083      	sub	sp, #12
 80058a8:	af00      	add	r7, sp, #0
 80058aa:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80058ac:	687b      	ldr	r3, [r7, #4]
 80058ae:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80058b2:	b2db      	uxtb	r3, r3
 80058b4:	2b40      	cmp	r3, #64	; 0x40
 80058b6:	d117      	bne.n	80058e8 <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 80058b8:	687b      	ldr	r3, [r7, #4]
 80058ba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80058bc:	2b00      	cmp	r3, #0
 80058be:	d109      	bne.n	80058d4 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058c0:	687b      	ldr	r3, [r7, #4]
 80058c2:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058c4:	b2db      	uxtb	r3, r3
 80058c6:	461a      	mov	r2, r3
 80058c8:	687b      	ldr	r3, [r7, #4]
 80058ca:	681b      	ldr	r3, [r3, #0]
 80058cc:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 80058d0:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 80058d2:	e067      	b.n	80059a4 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 80058d4:	687b      	ldr	r3, [r7, #4]
 80058d6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80058d8:	b2db      	uxtb	r3, r3
 80058da:	f043 0301 	orr.w	r3, r3, #1
 80058de:	b2da      	uxtb	r2, r3
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	611a      	str	r2, [r3, #16]
}
 80058e6:	e05d      	b.n	80059a4 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 80058e8:	687b      	ldr	r3, [r7, #4]
 80058ea:	691b      	ldr	r3, [r3, #16]
 80058ec:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 80058f0:	d133      	bne.n	800595a <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 80058f2:	687b      	ldr	r3, [r7, #4]
 80058f4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80058f8:	b2db      	uxtb	r3, r3
 80058fa:	2b21      	cmp	r3, #33	; 0x21
 80058fc:	d109      	bne.n	8005912 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 80058fe:	687b      	ldr	r3, [r7, #4]
 8005900:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005902:	b2db      	uxtb	r3, r3
 8005904:	461a      	mov	r2, r3
 8005906:	687b      	ldr	r3, [r7, #4]
 8005908:	681b      	ldr	r3, [r3, #0]
 800590a:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 800590e:	611a      	str	r2, [r3, #16]
 8005910:	e008      	b.n	8005924 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8005912:	687b      	ldr	r3, [r7, #4]
 8005914:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005916:	b2db      	uxtb	r3, r3
 8005918:	f043 0301 	orr.w	r3, r3, #1
 800591c:	b2da      	uxtb	r2, r3
 800591e:	687b      	ldr	r3, [r7, #4]
 8005920:	681b      	ldr	r3, [r3, #0]
 8005922:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8005924:	687b      	ldr	r3, [r7, #4]
 8005926:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005928:	2b00      	cmp	r3, #0
 800592a:	d004      	beq.n	8005936 <I2C_Master_SB+0x92>
 800592c:	687b      	ldr	r3, [r7, #4]
 800592e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005930:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005932:	2b00      	cmp	r3, #0
 8005934:	d108      	bne.n	8005948 <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8005936:	687b      	ldr	r3, [r7, #4]
 8005938:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800593a:	2b00      	cmp	r3, #0
 800593c:	d032      	beq.n	80059a4 <I2C_Master_SB+0x100>
 800593e:	687b      	ldr	r3, [r7, #4]
 8005940:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005942:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8005944:	2b00      	cmp	r3, #0
 8005946:	d02d      	beq.n	80059a4 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005948:	687b      	ldr	r3, [r7, #4]
 800594a:	681b      	ldr	r3, [r3, #0]
 800594c:	685a      	ldr	r2, [r3, #4]
 800594e:	687b      	ldr	r3, [r7, #4]
 8005950:	681b      	ldr	r3, [r3, #0]
 8005952:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005956:	605a      	str	r2, [r3, #4]
}
 8005958:	e024      	b.n	80059a4 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 800595a:	687b      	ldr	r3, [r7, #4]
 800595c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800595e:	2b00      	cmp	r3, #0
 8005960:	d10e      	bne.n	8005980 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8005962:	687b      	ldr	r3, [r7, #4]
 8005964:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8005966:	b29b      	uxth	r3, r3
 8005968:	11db      	asrs	r3, r3, #7
 800596a:	b2db      	uxtb	r3, r3
 800596c:	f003 0306 	and.w	r3, r3, #6
 8005970:	b2db      	uxtb	r3, r3
 8005972:	f063 030f 	orn	r3, r3, #15
 8005976:	b2da      	uxtb	r2, r3
 8005978:	687b      	ldr	r3, [r7, #4]
 800597a:	681b      	ldr	r3, [r3, #0]
 800597c:	611a      	str	r2, [r3, #16]
}
 800597e:	e011      	b.n	80059a4 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8005980:	687b      	ldr	r3, [r7, #4]
 8005982:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005984:	2b01      	cmp	r3, #1
 8005986:	d10d      	bne.n	80059a4 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8005988:	687b      	ldr	r3, [r7, #4]
 800598a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800598c:	b29b      	uxth	r3, r3
 800598e:	11db      	asrs	r3, r3, #7
 8005990:	b2db      	uxtb	r3, r3
 8005992:	f003 0306 	and.w	r3, r3, #6
 8005996:	b2db      	uxtb	r3, r3
 8005998:	f063 030e 	orn	r3, r3, #14
 800599c:	b2da      	uxtb	r2, r3
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	681b      	ldr	r3, [r3, #0]
 80059a2:	611a      	str	r2, [r3, #16]
}
 80059a4:	bf00      	nop
 80059a6:	370c      	adds	r7, #12
 80059a8:	46bd      	mov	sp, r7
 80059aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80059ae:	4770      	bx	lr

080059b0 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 80059b0:	b480      	push	{r7}
 80059b2:	b083      	sub	sp, #12
 80059b4:	af00      	add	r7, sp, #0
 80059b6:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 80059b8:	687b      	ldr	r3, [r7, #4]
 80059ba:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 80059bc:	b2da      	uxtb	r2, r3
 80059be:	687b      	ldr	r3, [r7, #4]
 80059c0:	681b      	ldr	r3, [r3, #0]
 80059c2:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 80059c4:	687b      	ldr	r3, [r7, #4]
 80059c6:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059c8:	2b00      	cmp	r3, #0
 80059ca:	d004      	beq.n	80059d6 <I2C_Master_ADD10+0x26>
 80059cc:	687b      	ldr	r3, [r7, #4]
 80059ce:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80059d0:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059d2:	2b00      	cmp	r3, #0
 80059d4:	d108      	bne.n	80059e8 <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 80059d6:	687b      	ldr	r3, [r7, #4]
 80059d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059da:	2b00      	cmp	r3, #0
 80059dc:	d00c      	beq.n	80059f8 <I2C_Master_ADD10+0x48>
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059e2:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80059e4:	2b00      	cmp	r3, #0
 80059e6:	d007      	beq.n	80059f8 <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80059e8:	687b      	ldr	r3, [r7, #4]
 80059ea:	681b      	ldr	r3, [r3, #0]
 80059ec:	685a      	ldr	r2, [r3, #4]
 80059ee:	687b      	ldr	r3, [r7, #4]
 80059f0:	681b      	ldr	r3, [r3, #0]
 80059f2:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 80059f6:	605a      	str	r2, [r3, #4]
  }
}
 80059f8:	bf00      	nop
 80059fa:	370c      	adds	r7, #12
 80059fc:	46bd      	mov	sp, r7
 80059fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005a02:	4770      	bx	lr

08005a04 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8005a04:	b480      	push	{r7}
 8005a06:	b091      	sub	sp, #68	; 0x44
 8005a08:	af00      	add	r7, sp, #0
 8005a0a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005a0c:	687b      	ldr	r3, [r7, #4]
 8005a0e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005a12:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 8005a16:	687b      	ldr	r3, [r7, #4]
 8005a18:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005a1a:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005a20:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a28:	b2db      	uxtb	r3, r3
 8005a2a:	2b22      	cmp	r3, #34	; 0x22
 8005a2c:	f040 8169 	bne.w	8005d02 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a34:	2b00      	cmp	r3, #0
 8005a36:	d10f      	bne.n	8005a58 <I2C_Master_ADDR+0x54>
 8005a38:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005a3c:	2b40      	cmp	r3, #64	; 0x40
 8005a3e:	d10b      	bne.n	8005a58 <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a40:	2300      	movs	r3, #0
 8005a42:	633b      	str	r3, [r7, #48]	; 0x30
 8005a44:	687b      	ldr	r3, [r7, #4]
 8005a46:	681b      	ldr	r3, [r3, #0]
 8005a48:	695b      	ldr	r3, [r3, #20]
 8005a4a:	633b      	str	r3, [r7, #48]	; 0x30
 8005a4c:	687b      	ldr	r3, [r7, #4]
 8005a4e:	681b      	ldr	r3, [r3, #0]
 8005a50:	699b      	ldr	r3, [r3, #24]
 8005a52:	633b      	str	r3, [r7, #48]	; 0x30
 8005a54:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 8005a56:	e160      	b.n	8005d1a <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 8005a58:	687b      	ldr	r3, [r7, #4]
 8005a5a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a5c:	2b00      	cmp	r3, #0
 8005a5e:	d11d      	bne.n	8005a9c <I2C_Master_ADDR+0x98>
 8005a60:	687b      	ldr	r3, [r7, #4]
 8005a62:	691b      	ldr	r3, [r3, #16]
 8005a64:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 8005a68:	d118      	bne.n	8005a9c <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005a6a:	2300      	movs	r3, #0
 8005a6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	695b      	ldr	r3, [r3, #20]
 8005a74:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a76:	687b      	ldr	r3, [r7, #4]
 8005a78:	681b      	ldr	r3, [r3, #0]
 8005a7a:	699b      	ldr	r3, [r3, #24]
 8005a7c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005a7e:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	681b      	ldr	r3, [r3, #0]
 8005a84:	681a      	ldr	r2, [r3, #0]
 8005a86:	687b      	ldr	r3, [r7, #4]
 8005a88:	681b      	ldr	r3, [r3, #0]
 8005a8a:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005a8e:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005a90:	687b      	ldr	r3, [r7, #4]
 8005a92:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005a94:	1c5a      	adds	r2, r3, #1
 8005a96:	687b      	ldr	r3, [r7, #4]
 8005a98:	651a      	str	r2, [r3, #80]	; 0x50
 8005a9a:	e13e      	b.n	8005d1a <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005a9c:	687b      	ldr	r3, [r7, #4]
 8005a9e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005aa0:	b29b      	uxth	r3, r3
 8005aa2:	2b00      	cmp	r3, #0
 8005aa4:	d113      	bne.n	8005ace <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005aa6:	2300      	movs	r3, #0
 8005aa8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aaa:	687b      	ldr	r3, [r7, #4]
 8005aac:	681b      	ldr	r3, [r3, #0]
 8005aae:	695b      	ldr	r3, [r3, #20]
 8005ab0:	62bb      	str	r3, [r7, #40]	; 0x28
 8005ab2:	687b      	ldr	r3, [r7, #4]
 8005ab4:	681b      	ldr	r3, [r3, #0]
 8005ab6:	699b      	ldr	r3, [r3, #24]
 8005ab8:	62bb      	str	r3, [r7, #40]	; 0x28
 8005aba:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005abc:	687b      	ldr	r3, [r7, #4]
 8005abe:	681b      	ldr	r3, [r3, #0]
 8005ac0:	681a      	ldr	r2, [r3, #0]
 8005ac2:	687b      	ldr	r3, [r7, #4]
 8005ac4:	681b      	ldr	r3, [r3, #0]
 8005ac6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005aca:	601a      	str	r2, [r3, #0]
 8005acc:	e115      	b.n	8005cfa <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 8005ace:	687b      	ldr	r3, [r7, #4]
 8005ad0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005ad2:	b29b      	uxth	r3, r3
 8005ad4:	2b01      	cmp	r3, #1
 8005ad6:	f040 808a 	bne.w	8005bee <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 8005ada:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005adc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005ae0:	d137      	bne.n	8005b52 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005ae2:	687b      	ldr	r3, [r7, #4]
 8005ae4:	681b      	ldr	r3, [r3, #0]
 8005ae6:	681a      	ldr	r2, [r3, #0]
 8005ae8:	687b      	ldr	r3, [r7, #4]
 8005aea:	681b      	ldr	r3, [r3, #0]
 8005aec:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005af0:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005af2:	687b      	ldr	r3, [r7, #4]
 8005af4:	681b      	ldr	r3, [r3, #0]
 8005af6:	685b      	ldr	r3, [r3, #4]
 8005af8:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005afc:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005b00:	d113      	bne.n	8005b2a <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b02:	687b      	ldr	r3, [r7, #4]
 8005b04:	681b      	ldr	r3, [r3, #0]
 8005b06:	681a      	ldr	r2, [r3, #0]
 8005b08:	687b      	ldr	r3, [r7, #4]
 8005b0a:	681b      	ldr	r3, [r3, #0]
 8005b0c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b10:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b12:	2300      	movs	r3, #0
 8005b14:	627b      	str	r3, [r7, #36]	; 0x24
 8005b16:	687b      	ldr	r3, [r7, #4]
 8005b18:	681b      	ldr	r3, [r3, #0]
 8005b1a:	695b      	ldr	r3, [r3, #20]
 8005b1c:	627b      	str	r3, [r7, #36]	; 0x24
 8005b1e:	687b      	ldr	r3, [r7, #4]
 8005b20:	681b      	ldr	r3, [r3, #0]
 8005b22:	699b      	ldr	r3, [r3, #24]
 8005b24:	627b      	str	r3, [r7, #36]	; 0x24
 8005b26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8005b28:	e0e7      	b.n	8005cfa <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b2a:	2300      	movs	r3, #0
 8005b2c:	623b      	str	r3, [r7, #32]
 8005b2e:	687b      	ldr	r3, [r7, #4]
 8005b30:	681b      	ldr	r3, [r3, #0]
 8005b32:	695b      	ldr	r3, [r3, #20]
 8005b34:	623b      	str	r3, [r7, #32]
 8005b36:	687b      	ldr	r3, [r7, #4]
 8005b38:	681b      	ldr	r3, [r3, #0]
 8005b3a:	699b      	ldr	r3, [r3, #24]
 8005b3c:	623b      	str	r3, [r7, #32]
 8005b3e:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005b40:	687b      	ldr	r3, [r7, #4]
 8005b42:	681b      	ldr	r3, [r3, #0]
 8005b44:	681a      	ldr	r2, [r3, #0]
 8005b46:	687b      	ldr	r3, [r7, #4]
 8005b48:	681b      	ldr	r3, [r3, #0]
 8005b4a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005b4e:	601a      	str	r2, [r3, #0]
 8005b50:	e0d3      	b.n	8005cfa <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005b52:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b54:	2b08      	cmp	r3, #8
 8005b56:	d02e      	beq.n	8005bb6 <I2C_Master_ADDR+0x1b2>
 8005b58:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b5a:	2b20      	cmp	r3, #32
 8005b5c:	d02b      	beq.n	8005bb6 <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005b5e:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005b60:	2b12      	cmp	r3, #18
 8005b62:	d102      	bne.n	8005b6a <I2C_Master_ADDR+0x166>
 8005b64:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b66:	2b01      	cmp	r3, #1
 8005b68:	d125      	bne.n	8005bb6 <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005b6a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b6c:	2b04      	cmp	r3, #4
 8005b6e:	d00e      	beq.n	8005b8e <I2C_Master_ADDR+0x18a>
 8005b70:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b72:	2b02      	cmp	r3, #2
 8005b74:	d00b      	beq.n	8005b8e <I2C_Master_ADDR+0x18a>
 8005b76:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005b78:	2b10      	cmp	r3, #16
 8005b7a:	d008      	beq.n	8005b8e <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b7c:	687b      	ldr	r3, [r7, #4]
 8005b7e:	681b      	ldr	r3, [r3, #0]
 8005b80:	681a      	ldr	r2, [r3, #0]
 8005b82:	687b      	ldr	r3, [r7, #4]
 8005b84:	681b      	ldr	r3, [r3, #0]
 8005b86:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b8a:	601a      	str	r2, [r3, #0]
 8005b8c:	e007      	b.n	8005b9e <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b8e:	687b      	ldr	r3, [r7, #4]
 8005b90:	681b      	ldr	r3, [r3, #0]
 8005b92:	681a      	ldr	r2, [r3, #0]
 8005b94:	687b      	ldr	r3, [r7, #4]
 8005b96:	681b      	ldr	r3, [r3, #0]
 8005b98:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005b9c:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005b9e:	2300      	movs	r3, #0
 8005ba0:	61fb      	str	r3, [r7, #28]
 8005ba2:	687b      	ldr	r3, [r7, #4]
 8005ba4:	681b      	ldr	r3, [r3, #0]
 8005ba6:	695b      	ldr	r3, [r3, #20]
 8005ba8:	61fb      	str	r3, [r7, #28]
 8005baa:	687b      	ldr	r3, [r7, #4]
 8005bac:	681b      	ldr	r3, [r3, #0]
 8005bae:	699b      	ldr	r3, [r3, #24]
 8005bb0:	61fb      	str	r3, [r7, #28]
 8005bb2:	69fb      	ldr	r3, [r7, #28]
 8005bb4:	e0a1      	b.n	8005cfa <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bb6:	687b      	ldr	r3, [r7, #4]
 8005bb8:	681b      	ldr	r3, [r3, #0]
 8005bba:	681a      	ldr	r2, [r3, #0]
 8005bbc:	687b      	ldr	r3, [r7, #4]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005bc4:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005bc6:	2300      	movs	r3, #0
 8005bc8:	61bb      	str	r3, [r7, #24]
 8005bca:	687b      	ldr	r3, [r7, #4]
 8005bcc:	681b      	ldr	r3, [r3, #0]
 8005bce:	695b      	ldr	r3, [r3, #20]
 8005bd0:	61bb      	str	r3, [r7, #24]
 8005bd2:	687b      	ldr	r3, [r7, #4]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	699b      	ldr	r3, [r3, #24]
 8005bd8:	61bb      	str	r3, [r7, #24]
 8005bda:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005bdc:	687b      	ldr	r3, [r7, #4]
 8005bde:	681b      	ldr	r3, [r3, #0]
 8005be0:	681a      	ldr	r2, [r3, #0]
 8005be2:	687b      	ldr	r3, [r7, #4]
 8005be4:	681b      	ldr	r3, [r3, #0]
 8005be6:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005bea:	601a      	str	r2, [r3, #0]
 8005bec:	e085      	b.n	8005cfa <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 8005bee:	687b      	ldr	r3, [r7, #4]
 8005bf0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005bf2:	b29b      	uxth	r3, r3
 8005bf4:	2b02      	cmp	r3, #2
 8005bf6:	d14d      	bne.n	8005c94 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 8005bf8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005bfa:	2b04      	cmp	r3, #4
 8005bfc:	d016      	beq.n	8005c2c <I2C_Master_ADDR+0x228>
 8005bfe:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c00:	2b02      	cmp	r3, #2
 8005c02:	d013      	beq.n	8005c2c <I2C_Master_ADDR+0x228>
 8005c04:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c06:	2b10      	cmp	r3, #16
 8005c08:	d010      	beq.n	8005c2c <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c0a:	687b      	ldr	r3, [r7, #4]
 8005c0c:	681b      	ldr	r3, [r3, #0]
 8005c0e:	681a      	ldr	r2, [r3, #0]
 8005c10:	687b      	ldr	r3, [r7, #4]
 8005c12:	681b      	ldr	r3, [r3, #0]
 8005c14:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005c18:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 8005c1a:	687b      	ldr	r3, [r7, #4]
 8005c1c:	681b      	ldr	r3, [r3, #0]
 8005c1e:	681a      	ldr	r2, [r3, #0]
 8005c20:	687b      	ldr	r3, [r7, #4]
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8005c28:	601a      	str	r2, [r3, #0]
 8005c2a:	e007      	b.n	8005c3c <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c2c:	687b      	ldr	r3, [r7, #4]
 8005c2e:	681b      	ldr	r3, [r3, #0]
 8005c30:	681a      	ldr	r2, [r3, #0]
 8005c32:	687b      	ldr	r3, [r7, #4]
 8005c34:	681b      	ldr	r3, [r3, #0]
 8005c36:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005c3a:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005c3c:	687b      	ldr	r3, [r7, #4]
 8005c3e:	681b      	ldr	r3, [r3, #0]
 8005c40:	685b      	ldr	r3, [r3, #4]
 8005c42:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005c46:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005c4a:	d117      	bne.n	8005c7c <I2C_Master_ADDR+0x278>
 8005c4c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c4e:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005c52:	d00b      	beq.n	8005c6c <I2C_Master_ADDR+0x268>
 8005c54:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c56:	2b01      	cmp	r3, #1
 8005c58:	d008      	beq.n	8005c6c <I2C_Master_ADDR+0x268>
 8005c5a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c5c:	2b08      	cmp	r3, #8
 8005c5e:	d005      	beq.n	8005c6c <I2C_Master_ADDR+0x268>
 8005c60:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c62:	2b10      	cmp	r3, #16
 8005c64:	d002      	beq.n	8005c6c <I2C_Master_ADDR+0x268>
 8005c66:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005c68:	2b20      	cmp	r3, #32
 8005c6a:	d107      	bne.n	8005c7c <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005c6c:	687b      	ldr	r3, [r7, #4]
 8005c6e:	681b      	ldr	r3, [r3, #0]
 8005c70:	685a      	ldr	r2, [r3, #4]
 8005c72:	687b      	ldr	r3, [r7, #4]
 8005c74:	681b      	ldr	r3, [r3, #0]
 8005c76:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005c7a:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005c7c:	2300      	movs	r3, #0
 8005c7e:	617b      	str	r3, [r7, #20]
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	681b      	ldr	r3, [r3, #0]
 8005c84:	695b      	ldr	r3, [r3, #20]
 8005c86:	617b      	str	r3, [r7, #20]
 8005c88:	687b      	ldr	r3, [r7, #4]
 8005c8a:	681b      	ldr	r3, [r3, #0]
 8005c8c:	699b      	ldr	r3, [r3, #24]
 8005c8e:	617b      	str	r3, [r7, #20]
 8005c90:	697b      	ldr	r3, [r7, #20]
 8005c92:	e032      	b.n	8005cfa <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005c94:	687b      	ldr	r3, [r7, #4]
 8005c96:	681b      	ldr	r3, [r3, #0]
 8005c98:	681a      	ldr	r2, [r3, #0]
 8005c9a:	687b      	ldr	r3, [r7, #4]
 8005c9c:	681b      	ldr	r3, [r3, #0]
 8005c9e:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005ca2:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005ca4:	687b      	ldr	r3, [r7, #4]
 8005ca6:	681b      	ldr	r3, [r3, #0]
 8005ca8:	685b      	ldr	r3, [r3, #4]
 8005caa:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005cae:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005cb2:	d117      	bne.n	8005ce4 <I2C_Master_ADDR+0x2e0>
 8005cb4:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cb6:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005cba:	d00b      	beq.n	8005cd4 <I2C_Master_ADDR+0x2d0>
 8005cbc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cbe:	2b01      	cmp	r3, #1
 8005cc0:	d008      	beq.n	8005cd4 <I2C_Master_ADDR+0x2d0>
 8005cc2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cc4:	2b08      	cmp	r3, #8
 8005cc6:	d005      	beq.n	8005cd4 <I2C_Master_ADDR+0x2d0>
 8005cc8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cca:	2b10      	cmp	r3, #16
 8005ccc:	d002      	beq.n	8005cd4 <I2C_Master_ADDR+0x2d0>
 8005cce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005cd0:	2b20      	cmp	r3, #32
 8005cd2:	d107      	bne.n	8005ce4 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005cd4:	687b      	ldr	r3, [r7, #4]
 8005cd6:	681b      	ldr	r3, [r3, #0]
 8005cd8:	685a      	ldr	r2, [r3, #4]
 8005cda:	687b      	ldr	r3, [r7, #4]
 8005cdc:	681b      	ldr	r3, [r3, #0]
 8005cde:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 8005ce2:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005ce4:	2300      	movs	r3, #0
 8005ce6:	613b      	str	r3, [r7, #16]
 8005ce8:	687b      	ldr	r3, [r7, #4]
 8005cea:	681b      	ldr	r3, [r3, #0]
 8005cec:	695b      	ldr	r3, [r3, #20]
 8005cee:	613b      	str	r3, [r7, #16]
 8005cf0:	687b      	ldr	r3, [r7, #4]
 8005cf2:	681b      	ldr	r3, [r3, #0]
 8005cf4:	699b      	ldr	r3, [r3, #24]
 8005cf6:	613b      	str	r3, [r7, #16]
 8005cf8:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 8005cfa:	687b      	ldr	r3, [r7, #4]
 8005cfc:	2200      	movs	r2, #0
 8005cfe:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 8005d00:	e00b      	b.n	8005d1a <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005d02:	2300      	movs	r3, #0
 8005d04:	60fb      	str	r3, [r7, #12]
 8005d06:	687b      	ldr	r3, [r7, #4]
 8005d08:	681b      	ldr	r3, [r3, #0]
 8005d0a:	695b      	ldr	r3, [r3, #20]
 8005d0c:	60fb      	str	r3, [r7, #12]
 8005d0e:	687b      	ldr	r3, [r7, #4]
 8005d10:	681b      	ldr	r3, [r3, #0]
 8005d12:	699b      	ldr	r3, [r3, #24]
 8005d14:	60fb      	str	r3, [r7, #12]
 8005d16:	68fb      	ldr	r3, [r7, #12]
}
 8005d18:	e7ff      	b.n	8005d1a <I2C_Master_ADDR+0x316>
 8005d1a:	bf00      	nop
 8005d1c:	3744      	adds	r7, #68	; 0x44
 8005d1e:	46bd      	mov	sp, r7
 8005d20:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005d24:	4770      	bx	lr

08005d26 <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 8005d26:	b580      	push	{r7, lr}
 8005d28:	b084      	sub	sp, #16
 8005d2a:	af00      	add	r7, sp, #0
 8005d2c:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005d2e:	687b      	ldr	r3, [r7, #4]
 8005d30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005d34:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005d36:	687b      	ldr	r3, [r7, #4]
 8005d38:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d3a:	b29b      	uxth	r3, r3
 8005d3c:	2b00      	cmp	r3, #0
 8005d3e:	d02b      	beq.n	8005d98 <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005d40:	687b      	ldr	r3, [r7, #4]
 8005d42:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d44:	781a      	ldrb	r2, [r3, #0]
 8005d46:	687b      	ldr	r3, [r7, #4]
 8005d48:	681b      	ldr	r3, [r3, #0]
 8005d4a:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005d4c:	687b      	ldr	r3, [r7, #4]
 8005d4e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005d50:	1c5a      	adds	r2, r3, #1
 8005d52:	687b      	ldr	r3, [r7, #4]
 8005d54:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005d56:	687b      	ldr	r3, [r7, #4]
 8005d58:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d5a:	b29b      	uxth	r3, r3
 8005d5c:	3b01      	subs	r3, #1
 8005d5e:	b29a      	uxth	r2, r3
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005d64:	687b      	ldr	r3, [r7, #4]
 8005d66:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005d68:	b29b      	uxth	r3, r3
 8005d6a:	2b00      	cmp	r3, #0
 8005d6c:	d114      	bne.n	8005d98 <I2C_SlaveTransmit_TXE+0x72>
 8005d6e:	7bfb      	ldrb	r3, [r7, #15]
 8005d70:	2b29      	cmp	r3, #41	; 0x29
 8005d72:	d111      	bne.n	8005d98 <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005d74:	687b      	ldr	r3, [r7, #4]
 8005d76:	681b      	ldr	r3, [r3, #0]
 8005d78:	685a      	ldr	r2, [r3, #4]
 8005d7a:	687b      	ldr	r3, [r7, #4]
 8005d7c:	681b      	ldr	r3, [r3, #0]
 8005d7e:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005d82:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005d84:	687b      	ldr	r3, [r7, #4]
 8005d86:	2221      	movs	r2, #33	; 0x21
 8005d88:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005d8a:	687b      	ldr	r3, [r7, #4]
 8005d8c:	2228      	movs	r2, #40	; 0x28
 8005d8e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005d92:	6878      	ldr	r0, [r7, #4]
 8005d94:	f7ff fa04 	bl	80051a0 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005d98:	bf00      	nop
 8005d9a:	3710      	adds	r7, #16
 8005d9c:	46bd      	mov	sp, r7
 8005d9e:	bd80      	pop	{r7, pc}

08005da0 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005da0:	b480      	push	{r7}
 8005da2:	b083      	sub	sp, #12
 8005da4:	af00      	add	r7, sp, #0
 8005da6:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005da8:	687b      	ldr	r3, [r7, #4]
 8005daa:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dac:	b29b      	uxth	r3, r3
 8005dae:	2b00      	cmp	r3, #0
 8005db0:	d011      	beq.n	8005dd6 <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005db2:	687b      	ldr	r3, [r7, #4]
 8005db4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005db6:	781a      	ldrb	r2, [r3, #0]
 8005db8:	687b      	ldr	r3, [r7, #4]
 8005dba:	681b      	ldr	r3, [r3, #0]
 8005dbc:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005dbe:	687b      	ldr	r3, [r7, #4]
 8005dc0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005dc2:	1c5a      	adds	r2, r3, #1
 8005dc4:	687b      	ldr	r3, [r7, #4]
 8005dc6:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005dc8:	687b      	ldr	r3, [r7, #4]
 8005dca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005dcc:	b29b      	uxth	r3, r3
 8005dce:	3b01      	subs	r3, #1
 8005dd0:	b29a      	uxth	r2, r3
 8005dd2:	687b      	ldr	r3, [r7, #4]
 8005dd4:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005dd6:	bf00      	nop
 8005dd8:	370c      	adds	r7, #12
 8005dda:	46bd      	mov	sp, r7
 8005ddc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005de0:	4770      	bx	lr

08005de2 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8005de2:	b580      	push	{r7, lr}
 8005de4:	b084      	sub	sp, #16
 8005de6:	af00      	add	r7, sp, #0
 8005de8:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005dea:	687b      	ldr	r3, [r7, #4]
 8005dec:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005df0:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 8005df2:	687b      	ldr	r3, [r7, #4]
 8005df4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005df6:	b29b      	uxth	r3, r3
 8005df8:	2b00      	cmp	r3, #0
 8005dfa:	d02c      	beq.n	8005e56 <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005dfc:	687b      	ldr	r3, [r7, #4]
 8005dfe:	681b      	ldr	r3, [r3, #0]
 8005e00:	691a      	ldr	r2, [r3, #16]
 8005e02:	687b      	ldr	r3, [r7, #4]
 8005e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e06:	b2d2      	uxtb	r2, r2
 8005e08:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e0e:	1c5a      	adds	r2, r3, #1
 8005e10:	687b      	ldr	r3, [r7, #4]
 8005e12:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e14:	687b      	ldr	r3, [r7, #4]
 8005e16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e18:	b29b      	uxth	r3, r3
 8005e1a:	3b01      	subs	r3, #1
 8005e1c:	b29a      	uxth	r2, r3
 8005e1e:	687b      	ldr	r3, [r7, #4]
 8005e20:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005e22:	687b      	ldr	r3, [r7, #4]
 8005e24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e26:	b29b      	uxth	r3, r3
 8005e28:	2b00      	cmp	r3, #0
 8005e2a:	d114      	bne.n	8005e56 <I2C_SlaveReceive_RXNE+0x74>
 8005e2c:	7bfb      	ldrb	r3, [r7, #15]
 8005e2e:	2b2a      	cmp	r3, #42	; 0x2a
 8005e30:	d111      	bne.n	8005e56 <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005e32:	687b      	ldr	r3, [r7, #4]
 8005e34:	681b      	ldr	r3, [r3, #0]
 8005e36:	685a      	ldr	r2, [r3, #4]
 8005e38:	687b      	ldr	r3, [r7, #4]
 8005e3a:	681b      	ldr	r3, [r3, #0]
 8005e3c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005e40:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005e42:	687b      	ldr	r3, [r7, #4]
 8005e44:	2222      	movs	r2, #34	; 0x22
 8005e46:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005e48:	687b      	ldr	r3, [r7, #4]
 8005e4a:	2228      	movs	r2, #40	; 0x28
 8005e4c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005e50:	6878      	ldr	r0, [r7, #4]
 8005e52:	f7ff f9af 	bl	80051b4 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 8005e56:	bf00      	nop
 8005e58:	3710      	adds	r7, #16
 8005e5a:	46bd      	mov	sp, r7
 8005e5c:	bd80      	pop	{r7, pc}

08005e5e <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005e5e:	b480      	push	{r7}
 8005e60:	b083      	sub	sp, #12
 8005e62:	af00      	add	r7, sp, #0
 8005e64:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 8005e66:	687b      	ldr	r3, [r7, #4]
 8005e68:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e6a:	b29b      	uxth	r3, r3
 8005e6c:	2b00      	cmp	r3, #0
 8005e6e:	d012      	beq.n	8005e96 <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005e70:	687b      	ldr	r3, [r7, #4]
 8005e72:	681b      	ldr	r3, [r3, #0]
 8005e74:	691a      	ldr	r2, [r3, #16]
 8005e76:	687b      	ldr	r3, [r7, #4]
 8005e78:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e7a:	b2d2      	uxtb	r2, r2
 8005e7c:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005e7e:	687b      	ldr	r3, [r7, #4]
 8005e80:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005e82:	1c5a      	adds	r2, r3, #1
 8005e84:	687b      	ldr	r3, [r7, #4]
 8005e86:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005e88:	687b      	ldr	r3, [r7, #4]
 8005e8a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005e8c:	b29b      	uxth	r3, r3
 8005e8e:	3b01      	subs	r3, #1
 8005e90:	b29a      	uxth	r2, r3
 8005e92:	687b      	ldr	r3, [r7, #4]
 8005e94:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 8005e96:	bf00      	nop
 8005e98:	370c      	adds	r7, #12
 8005e9a:	46bd      	mov	sp, r7
 8005e9c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005ea0:	4770      	bx	lr

08005ea2 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005ea2:	b580      	push	{r7, lr}
 8005ea4:	b084      	sub	sp, #16
 8005ea6:	af00      	add	r7, sp, #0
 8005ea8:	6078      	str	r0, [r7, #4]
 8005eaa:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 8005eac:	2300      	movs	r3, #0
 8005eae:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005eb0:	687b      	ldr	r3, [r7, #4]
 8005eb2:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005eb6:	b2db      	uxtb	r3, r3
 8005eb8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005ebc:	2b28      	cmp	r3, #40	; 0x28
 8005ebe:	d127      	bne.n	8005f10 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 8005ec0:	687b      	ldr	r3, [r7, #4]
 8005ec2:	681b      	ldr	r3, [r3, #0]
 8005ec4:	685a      	ldr	r2, [r3, #4]
 8005ec6:	687b      	ldr	r3, [r7, #4]
 8005ec8:	681b      	ldr	r3, [r3, #0]
 8005eca:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005ece:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 8005ed0:	683b      	ldr	r3, [r7, #0]
 8005ed2:	089b      	lsrs	r3, r3, #2
 8005ed4:	f003 0301 	and.w	r3, r3, #1
 8005ed8:	2b00      	cmp	r3, #0
 8005eda:	d101      	bne.n	8005ee0 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 8005edc:	2301      	movs	r3, #1
 8005ede:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 8005ee0:	683b      	ldr	r3, [r7, #0]
 8005ee2:	09db      	lsrs	r3, r3, #7
 8005ee4:	f003 0301 	and.w	r3, r3, #1
 8005ee8:	2b00      	cmp	r3, #0
 8005eea:	d103      	bne.n	8005ef4 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 8005eec:	687b      	ldr	r3, [r7, #4]
 8005eee:	68db      	ldr	r3, [r3, #12]
 8005ef0:	81bb      	strh	r3, [r7, #12]
 8005ef2:	e002      	b.n	8005efa <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 8005ef4:	687b      	ldr	r3, [r7, #4]
 8005ef6:	699b      	ldr	r3, [r3, #24]
 8005ef8:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 8005efa:	687b      	ldr	r3, [r7, #4]
 8005efc:	2200      	movs	r2, #0
 8005efe:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 8005f02:	89ba      	ldrh	r2, [r7, #12]
 8005f04:	7bfb      	ldrb	r3, [r7, #15]
 8005f06:	4619      	mov	r1, r3
 8005f08:	6878      	ldr	r0, [r7, #4]
 8005f0a:	f7ff f95d 	bl	80051c8 <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005f0e:	e008      	b.n	8005f22 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005f10:	687b      	ldr	r3, [r7, #4]
 8005f12:	681b      	ldr	r3, [r3, #0]
 8005f14:	f06f 0202 	mvn.w	r2, #2
 8005f18:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 8005f1a:	687b      	ldr	r3, [r7, #4]
 8005f1c:	2200      	movs	r2, #0
 8005f1e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005f22:	bf00      	nop
 8005f24:	3710      	adds	r7, #16
 8005f26:	46bd      	mov	sp, r7
 8005f28:	bd80      	pop	{r7, pc}
	...

08005f2c <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005f2c:	b580      	push	{r7, lr}
 8005f2e:	b084      	sub	sp, #16
 8005f30:	af00      	add	r7, sp, #0
 8005f32:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005f34:	687b      	ldr	r3, [r7, #4]
 8005f36:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005f3a:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005f3c:	687b      	ldr	r3, [r7, #4]
 8005f3e:	681b      	ldr	r3, [r3, #0]
 8005f40:	685a      	ldr	r2, [r3, #4]
 8005f42:	687b      	ldr	r3, [r7, #4]
 8005f44:	681b      	ldr	r3, [r3, #0]
 8005f46:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005f4a:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005f4c:	2300      	movs	r3, #0
 8005f4e:	60bb      	str	r3, [r7, #8]
 8005f50:	687b      	ldr	r3, [r7, #4]
 8005f52:	681b      	ldr	r3, [r3, #0]
 8005f54:	695b      	ldr	r3, [r3, #20]
 8005f56:	60bb      	str	r3, [r7, #8]
 8005f58:	687b      	ldr	r3, [r7, #4]
 8005f5a:	681b      	ldr	r3, [r3, #0]
 8005f5c:	681a      	ldr	r2, [r3, #0]
 8005f5e:	687b      	ldr	r3, [r7, #4]
 8005f60:	681b      	ldr	r3, [r3, #0]
 8005f62:	f042 0201 	orr.w	r2, r2, #1
 8005f66:	601a      	str	r2, [r3, #0]
 8005f68:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005f6a:	687b      	ldr	r3, [r7, #4]
 8005f6c:	681b      	ldr	r3, [r3, #0]
 8005f6e:	681a      	ldr	r2, [r3, #0]
 8005f70:	687b      	ldr	r3, [r7, #4]
 8005f72:	681b      	ldr	r3, [r3, #0]
 8005f74:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005f78:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 8005f7a:	687b      	ldr	r3, [r7, #4]
 8005f7c:	681b      	ldr	r3, [r3, #0]
 8005f7e:	685b      	ldr	r3, [r3, #4]
 8005f80:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005f84:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8005f88:	d172      	bne.n	8006070 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005f8a:	7bfb      	ldrb	r3, [r7, #15]
 8005f8c:	2b22      	cmp	r3, #34	; 0x22
 8005f8e:	d002      	beq.n	8005f96 <I2C_Slave_STOPF+0x6a>
 8005f90:	7bfb      	ldrb	r3, [r7, #15]
 8005f92:	2b2a      	cmp	r3, #42	; 0x2a
 8005f94:	d135      	bne.n	8006002 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 8005f96:	687b      	ldr	r3, [r7, #4]
 8005f98:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005f9a:	681b      	ldr	r3, [r3, #0]
 8005f9c:	685b      	ldr	r3, [r3, #4]
 8005f9e:	b29a      	uxth	r2, r3
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005fa4:	687b      	ldr	r3, [r7, #4]
 8005fa6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005fa8:	b29b      	uxth	r3, r3
 8005faa:	2b00      	cmp	r3, #0
 8005fac:	d005      	beq.n	8005fba <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 8005fae:	687b      	ldr	r3, [r7, #4]
 8005fb0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005fb2:	f043 0204 	orr.w	r2, r3, #4
 8005fb6:	687b      	ldr	r3, [r7, #4]
 8005fb8:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8005fba:	687b      	ldr	r3, [r7, #4]
 8005fbc:	681b      	ldr	r3, [r3, #0]
 8005fbe:	685a      	ldr	r2, [r3, #4]
 8005fc0:	687b      	ldr	r3, [r7, #4]
 8005fc2:	681b      	ldr	r3, [r3, #0]
 8005fc4:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005fc8:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005fca:	687b      	ldr	r3, [r7, #4]
 8005fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fce:	4618      	mov	r0, r3
 8005fd0:	f7fe fad6 	bl	8004580 <HAL_DMA_GetState>
 8005fd4:	4603      	mov	r3, r0
 8005fd6:	2b01      	cmp	r3, #1
 8005fd8:	d049      	beq.n	800606e <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fde:	4a69      	ldr	r2, [pc, #420]	; (8006184 <I2C_Slave_STOPF+0x258>)
 8005fe0:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005fe2:	687b      	ldr	r3, [r7, #4]
 8005fe4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005fe6:	4618      	mov	r0, r3
 8005fe8:	f7fe f91e 	bl	8004228 <HAL_DMA_Abort_IT>
 8005fec:	4603      	mov	r3, r0
 8005fee:	2b00      	cmp	r3, #0
 8005ff0:	d03d      	beq.n	800606e <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 8005ff2:	687b      	ldr	r3, [r7, #4]
 8005ff4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ff6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005ff8:	687a      	ldr	r2, [r7, #4]
 8005ffa:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8005ffc:	4610      	mov	r0, r2
 8005ffe:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8006000:	e035      	b.n	800606e <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 8006002:	687b      	ldr	r3, [r7, #4]
 8006004:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006006:	681b      	ldr	r3, [r3, #0]
 8006008:	685b      	ldr	r3, [r3, #4]
 800600a:	b29a      	uxth	r2, r3
 800600c:	687b      	ldr	r3, [r7, #4]
 800600e:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8006010:	687b      	ldr	r3, [r7, #4]
 8006012:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006014:	b29b      	uxth	r3, r3
 8006016:	2b00      	cmp	r3, #0
 8006018:	d005      	beq.n	8006026 <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800601a:	687b      	ldr	r3, [r7, #4]
 800601c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800601e:	f043 0204 	orr.w	r2, r3, #4
 8006022:	687b      	ldr	r3, [r7, #4]
 8006024:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8006026:	687b      	ldr	r3, [r7, #4]
 8006028:	681b      	ldr	r3, [r3, #0]
 800602a:	685a      	ldr	r2, [r3, #4]
 800602c:	687b      	ldr	r3, [r7, #4]
 800602e:	681b      	ldr	r3, [r3, #0]
 8006030:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8006034:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 8006036:	687b      	ldr	r3, [r7, #4]
 8006038:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800603a:	4618      	mov	r0, r3
 800603c:	f7fe faa0 	bl	8004580 <HAL_DMA_GetState>
 8006040:	4603      	mov	r3, r0
 8006042:	2b01      	cmp	r3, #1
 8006044:	d014      	beq.n	8006070 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 8006046:	687b      	ldr	r3, [r7, #4]
 8006048:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800604a:	4a4e      	ldr	r2, [pc, #312]	; (8006184 <I2C_Slave_STOPF+0x258>)
 800604c:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 800604e:	687b      	ldr	r3, [r7, #4]
 8006050:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006052:	4618      	mov	r0, r3
 8006054:	f7fe f8e8 	bl	8004228 <HAL_DMA_Abort_IT>
 8006058:	4603      	mov	r3, r0
 800605a:	2b00      	cmp	r3, #0
 800605c:	d008      	beq.n	8006070 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800605e:	687b      	ldr	r3, [r7, #4]
 8006060:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006062:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006064:	687a      	ldr	r2, [r7, #4]
 8006066:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006068:	4610      	mov	r0, r2
 800606a:	4798      	blx	r3
 800606c:	e000      	b.n	8006070 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 800606e:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8006070:	687b      	ldr	r3, [r7, #4]
 8006072:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8006074:	b29b      	uxth	r3, r3
 8006076:	2b00      	cmp	r3, #0
 8006078:	d03e      	beq.n	80060f8 <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800607a:	687b      	ldr	r3, [r7, #4]
 800607c:	681b      	ldr	r3, [r3, #0]
 800607e:	695b      	ldr	r3, [r3, #20]
 8006080:	f003 0304 	and.w	r3, r3, #4
 8006084:	2b04      	cmp	r3, #4
 8006086:	d112      	bne.n	80060ae <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006088:	687b      	ldr	r3, [r7, #4]
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	691a      	ldr	r2, [r3, #16]
 800608e:	687b      	ldr	r3, [r7, #4]
 8006090:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006092:	b2d2      	uxtb	r2, r2
 8006094:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006096:	687b      	ldr	r3, [r7, #4]
 8006098:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800609a:	1c5a      	adds	r2, r3, #1
 800609c:	687b      	ldr	r3, [r7, #4]
 800609e:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060a0:	687b      	ldr	r3, [r7, #4]
 80060a2:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060a4:	b29b      	uxth	r3, r3
 80060a6:	3b01      	subs	r3, #1
 80060a8:	b29a      	uxth	r2, r3
 80060aa:	687b      	ldr	r3, [r7, #4]
 80060ac:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80060ae:	687b      	ldr	r3, [r7, #4]
 80060b0:	681b      	ldr	r3, [r3, #0]
 80060b2:	695b      	ldr	r3, [r3, #20]
 80060b4:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80060b8:	2b40      	cmp	r3, #64	; 0x40
 80060ba:	d112      	bne.n	80060e2 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80060bc:	687b      	ldr	r3, [r7, #4]
 80060be:	681b      	ldr	r3, [r3, #0]
 80060c0:	691a      	ldr	r2, [r3, #16]
 80060c2:	687b      	ldr	r3, [r7, #4]
 80060c4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060c6:	b2d2      	uxtb	r2, r2
 80060c8:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80060ca:	687b      	ldr	r3, [r7, #4]
 80060cc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060ce:	1c5a      	adds	r2, r3, #1
 80060d0:	687b      	ldr	r3, [r7, #4]
 80060d2:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80060d4:	687b      	ldr	r3, [r7, #4]
 80060d6:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060d8:	b29b      	uxth	r3, r3
 80060da:	3b01      	subs	r3, #1
 80060dc:	b29a      	uxth	r2, r3
 80060de:	687b      	ldr	r3, [r7, #4]
 80060e0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80060e2:	687b      	ldr	r3, [r7, #4]
 80060e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80060e6:	b29b      	uxth	r3, r3
 80060e8:	2b00      	cmp	r3, #0
 80060ea:	d005      	beq.n	80060f8 <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80060ec:	687b      	ldr	r3, [r7, #4]
 80060ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060f0:	f043 0204 	orr.w	r2, r3, #4
 80060f4:	687b      	ldr	r3, [r7, #4]
 80060f6:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80060f8:	687b      	ldr	r3, [r7, #4]
 80060fa:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80060fc:	2b00      	cmp	r3, #0
 80060fe:	d003      	beq.n	8006108 <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 8006100:	6878      	ldr	r0, [r7, #4]
 8006102:	f000 f8b3 	bl	800626c <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 8006106:	e039      	b.n	800617c <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 8006108:	7bfb      	ldrb	r3, [r7, #15]
 800610a:	2b2a      	cmp	r3, #42	; 0x2a
 800610c:	d109      	bne.n	8006122 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 800610e:	687b      	ldr	r3, [r7, #4]
 8006110:	2200      	movs	r2, #0
 8006112:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8006114:	687b      	ldr	r3, [r7, #4]
 8006116:	2228      	movs	r2, #40	; 0x28
 8006118:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 800611c:	6878      	ldr	r0, [r7, #4]
 800611e:	f7ff f849 	bl	80051b4 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8006122:	687b      	ldr	r3, [r7, #4]
 8006124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006128:	b2db      	uxtb	r3, r3
 800612a:	2b28      	cmp	r3, #40	; 0x28
 800612c:	d111      	bne.n	8006152 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 800612e:	687b      	ldr	r3, [r7, #4]
 8006130:	4a15      	ldr	r2, [pc, #84]	; (8006188 <I2C_Slave_STOPF+0x25c>)
 8006132:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8006134:	687b      	ldr	r3, [r7, #4]
 8006136:	2200      	movs	r2, #0
 8006138:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	2220      	movs	r2, #32
 800613e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006142:	687b      	ldr	r3, [r7, #4]
 8006144:	2200      	movs	r2, #0
 8006146:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800614a:	6878      	ldr	r0, [r7, #4]
 800614c:	f7ff f84a 	bl	80051e4 <HAL_I2C_ListenCpltCallback>
}
 8006150:	e014      	b.n	800617c <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006152:	687b      	ldr	r3, [r7, #4]
 8006154:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8006156:	2b22      	cmp	r3, #34	; 0x22
 8006158:	d002      	beq.n	8006160 <I2C_Slave_STOPF+0x234>
 800615a:	7bfb      	ldrb	r3, [r7, #15]
 800615c:	2b22      	cmp	r3, #34	; 0x22
 800615e:	d10d      	bne.n	800617c <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8006160:	687b      	ldr	r3, [r7, #4]
 8006162:	2200      	movs	r2, #0
 8006164:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8006166:	687b      	ldr	r3, [r7, #4]
 8006168:	2220      	movs	r2, #32
 800616a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 800616e:	687b      	ldr	r3, [r7, #4]
 8006170:	2200      	movs	r2, #0
 8006172:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 8006176:	6878      	ldr	r0, [r7, #4]
 8006178:	f7ff f81c 	bl	80051b4 <HAL_I2C_SlaveRxCpltCallback>
}
 800617c:	bf00      	nop
 800617e:	3710      	adds	r7, #16
 8006180:	46bd      	mov	sp, r7
 8006182:	bd80      	pop	{r7, pc}
 8006184:	080064d1 	.word	0x080064d1
 8006188:	ffff0000 	.word	0xffff0000

0800618c <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 800618c:	b580      	push	{r7, lr}
 800618e:	b084      	sub	sp, #16
 8006190:	af00      	add	r7, sp, #0
 8006192:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006194:	687b      	ldr	r3, [r7, #4]
 8006196:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800619a:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 800619c:	687b      	ldr	r3, [r7, #4]
 800619e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80061a0:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 80061a2:	68bb      	ldr	r3, [r7, #8]
 80061a4:	2b08      	cmp	r3, #8
 80061a6:	d002      	beq.n	80061ae <I2C_Slave_AF+0x22>
 80061a8:	68bb      	ldr	r3, [r7, #8]
 80061aa:	2b20      	cmp	r3, #32
 80061ac:	d129      	bne.n	8006202 <I2C_Slave_AF+0x76>
 80061ae:	7bfb      	ldrb	r3, [r7, #15]
 80061b0:	2b28      	cmp	r3, #40	; 0x28
 80061b2:	d126      	bne.n	8006202 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80061b4:	687b      	ldr	r3, [r7, #4]
 80061b6:	4a2c      	ldr	r2, [pc, #176]	; (8006268 <I2C_Slave_AF+0xdc>)
 80061b8:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80061ba:	687b      	ldr	r3, [r7, #4]
 80061bc:	681b      	ldr	r3, [r3, #0]
 80061be:	685a      	ldr	r2, [r3, #4]
 80061c0:	687b      	ldr	r3, [r7, #4]
 80061c2:	681b      	ldr	r3, [r3, #0]
 80061c4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80061c8:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80061ca:	687b      	ldr	r3, [r7, #4]
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80061d2:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80061d4:	687b      	ldr	r3, [r7, #4]
 80061d6:	681b      	ldr	r3, [r3, #0]
 80061d8:	681a      	ldr	r2, [r3, #0]
 80061da:	687b      	ldr	r3, [r7, #4]
 80061dc:	681b      	ldr	r3, [r3, #0]
 80061de:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80061e2:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80061e4:	687b      	ldr	r3, [r7, #4]
 80061e6:	2200      	movs	r2, #0
 80061e8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80061ea:	687b      	ldr	r3, [r7, #4]
 80061ec:	2220      	movs	r2, #32
 80061ee:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80061f2:	687b      	ldr	r3, [r7, #4]
 80061f4:	2200      	movs	r2, #0
 80061f6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80061fa:	6878      	ldr	r0, [r7, #4]
 80061fc:	f7fe fff2 	bl	80051e4 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 8006200:	e02e      	b.n	8006260 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 8006202:	7bfb      	ldrb	r3, [r7, #15]
 8006204:	2b21      	cmp	r3, #33	; 0x21
 8006206:	d126      	bne.n	8006256 <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8006208:	687b      	ldr	r3, [r7, #4]
 800620a:	4a17      	ldr	r2, [pc, #92]	; (8006268 <I2C_Slave_AF+0xdc>)
 800620c:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 800620e:	687b      	ldr	r3, [r7, #4]
 8006210:	2221      	movs	r2, #33	; 0x21
 8006212:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8006214:	687b      	ldr	r3, [r7, #4]
 8006216:	2220      	movs	r2, #32
 8006218:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 800621c:	687b      	ldr	r3, [r7, #4]
 800621e:	2200      	movs	r2, #0
 8006220:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006224:	687b      	ldr	r3, [r7, #4]
 8006226:	681b      	ldr	r3, [r3, #0]
 8006228:	685a      	ldr	r2, [r3, #4]
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006232:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006234:	687b      	ldr	r3, [r7, #4]
 8006236:	681b      	ldr	r3, [r3, #0]
 8006238:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800623c:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800623e:	687b      	ldr	r3, [r7, #4]
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	681a      	ldr	r2, [r3, #0]
 8006244:	687b      	ldr	r3, [r7, #4]
 8006246:	681b      	ldr	r3, [r3, #0]
 8006248:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800624c:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 800624e:	6878      	ldr	r0, [r7, #4]
 8006250:	f7fe ffa6 	bl	80051a0 <HAL_I2C_SlaveTxCpltCallback>
}
 8006254:	e004      	b.n	8006260 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	681b      	ldr	r3, [r3, #0]
 800625a:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 800625e:	615a      	str	r2, [r3, #20]
}
 8006260:	bf00      	nop
 8006262:	3710      	adds	r7, #16
 8006264:	46bd      	mov	sp, r7
 8006266:	bd80      	pop	{r7, pc}
 8006268:	ffff0000 	.word	0xffff0000

0800626c <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 800626c:	b580      	push	{r7, lr}
 800626e:	b084      	sub	sp, #16
 8006270:	af00      	add	r7, sp, #0
 8006272:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8006274:	687b      	ldr	r3, [r7, #4]
 8006276:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800627a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 800627c:	687b      	ldr	r3, [r7, #4]
 800627e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006282:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8006284:	7bbb      	ldrb	r3, [r7, #14]
 8006286:	2b10      	cmp	r3, #16
 8006288:	d002      	beq.n	8006290 <I2C_ITError+0x24>
 800628a:	7bbb      	ldrb	r3, [r7, #14]
 800628c:	2b40      	cmp	r3, #64	; 0x40
 800628e:	d10a      	bne.n	80062a6 <I2C_ITError+0x3a>
 8006290:	7bfb      	ldrb	r3, [r7, #15]
 8006292:	2b22      	cmp	r3, #34	; 0x22
 8006294:	d107      	bne.n	80062a6 <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 8006296:	687b      	ldr	r3, [r7, #4]
 8006298:	681b      	ldr	r3, [r3, #0]
 800629a:	681a      	ldr	r2, [r3, #0]
 800629c:	687b      	ldr	r3, [r7, #4]
 800629e:	681b      	ldr	r3, [r3, #0]
 80062a0:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80062a4:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80062a6:	7bfb      	ldrb	r3, [r7, #15]
 80062a8:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80062ac:	2b28      	cmp	r3, #40	; 0x28
 80062ae:	d107      	bne.n	80062c0 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80062b0:	687b      	ldr	r3, [r7, #4]
 80062b2:	2200      	movs	r2, #0
 80062b4:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	2228      	movs	r2, #40	; 0x28
 80062ba:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80062be:	e015      	b.n	80062ec <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80062c0:	687b      	ldr	r3, [r7, #4]
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	685b      	ldr	r3, [r3, #4]
 80062c6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062ca:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062ce:	d00a      	beq.n	80062e6 <I2C_ITError+0x7a>
 80062d0:	7bfb      	ldrb	r3, [r7, #15]
 80062d2:	2b60      	cmp	r3, #96	; 0x60
 80062d4:	d007      	beq.n	80062e6 <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80062d6:	687b      	ldr	r3, [r7, #4]
 80062d8:	2220      	movs	r2, #32
 80062da:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80062de:	687b      	ldr	r3, [r7, #4]
 80062e0:	2200      	movs	r2, #0
 80062e2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80062e6:	687b      	ldr	r3, [r7, #4]
 80062e8:	2200      	movs	r2, #0
 80062ea:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80062ec:	687b      	ldr	r3, [r7, #4]
 80062ee:	681b      	ldr	r3, [r3, #0]
 80062f0:	685b      	ldr	r3, [r3, #4]
 80062f2:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80062f6:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80062fa:	d162      	bne.n	80063c2 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	681b      	ldr	r3, [r3, #0]
 8006300:	685a      	ldr	r2, [r3, #4]
 8006302:	687b      	ldr	r3, [r7, #4]
 8006304:	681b      	ldr	r3, [r3, #0]
 8006306:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 800630a:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 800630c:	687b      	ldr	r3, [r7, #4]
 800630e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006310:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8006314:	b2db      	uxtb	r3, r3
 8006316:	2b01      	cmp	r3, #1
 8006318:	d020      	beq.n	800635c <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800631e:	4a6a      	ldr	r2, [pc, #424]	; (80064c8 <I2C_ITError+0x25c>)
 8006320:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8006322:	687b      	ldr	r3, [r7, #4]
 8006324:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006326:	4618      	mov	r0, r3
 8006328:	f7fd ff7e 	bl	8004228 <HAL_DMA_Abort_IT>
 800632c:	4603      	mov	r3, r0
 800632e:	2b00      	cmp	r3, #0
 8006330:	f000 8089 	beq.w	8006446 <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8006334:	687b      	ldr	r3, [r7, #4]
 8006336:	681b      	ldr	r3, [r3, #0]
 8006338:	681a      	ldr	r2, [r3, #0]
 800633a:	687b      	ldr	r3, [r7, #4]
 800633c:	681b      	ldr	r3, [r3, #0]
 800633e:	f022 0201 	bic.w	r2, r2, #1
 8006342:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8006344:	687b      	ldr	r3, [r7, #4]
 8006346:	2220      	movs	r2, #32
 8006348:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 800634c:	687b      	ldr	r3, [r7, #4]
 800634e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006350:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8006352:	687a      	ldr	r2, [r7, #4]
 8006354:	6b52      	ldr	r2, [r2, #52]	; 0x34
 8006356:	4610      	mov	r0, r2
 8006358:	4798      	blx	r3
 800635a:	e074      	b.n	8006446 <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 800635c:	687b      	ldr	r3, [r7, #4]
 800635e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006360:	4a59      	ldr	r2, [pc, #356]	; (80064c8 <I2C_ITError+0x25c>)
 8006362:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8006364:	687b      	ldr	r3, [r7, #4]
 8006366:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006368:	4618      	mov	r0, r3
 800636a:	f7fd ff5d 	bl	8004228 <HAL_DMA_Abort_IT>
 800636e:	4603      	mov	r3, r0
 8006370:	2b00      	cmp	r3, #0
 8006372:	d068      	beq.n	8006446 <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8006374:	687b      	ldr	r3, [r7, #4]
 8006376:	681b      	ldr	r3, [r3, #0]
 8006378:	695b      	ldr	r3, [r3, #20]
 800637a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800637e:	2b40      	cmp	r3, #64	; 0x40
 8006380:	d10b      	bne.n	800639a <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006382:	687b      	ldr	r3, [r7, #4]
 8006384:	681b      	ldr	r3, [r3, #0]
 8006386:	691a      	ldr	r2, [r3, #16]
 8006388:	687b      	ldr	r3, [r7, #4]
 800638a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800638c:	b2d2      	uxtb	r2, r2
 800638e:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8006390:	687b      	ldr	r3, [r7, #4]
 8006392:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006394:	1c5a      	adds	r2, r3, #1
 8006396:	687b      	ldr	r3, [r7, #4]
 8006398:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800639a:	687b      	ldr	r3, [r7, #4]
 800639c:	681b      	ldr	r3, [r3, #0]
 800639e:	681a      	ldr	r2, [r3, #0]
 80063a0:	687b      	ldr	r3, [r7, #4]
 80063a2:	681b      	ldr	r3, [r3, #0]
 80063a4:	f022 0201 	bic.w	r2, r2, #1
 80063a8:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 80063aa:	687b      	ldr	r3, [r7, #4]
 80063ac:	2220      	movs	r2, #32
 80063ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80063b2:	687b      	ldr	r3, [r7, #4]
 80063b4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80063b6:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80063b8:	687a      	ldr	r2, [r7, #4]
 80063ba:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80063bc:	4610      	mov	r0, r2
 80063be:	4798      	blx	r3
 80063c0:	e041      	b.n	8006446 <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80063c2:	687b      	ldr	r3, [r7, #4]
 80063c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80063c8:	b2db      	uxtb	r3, r3
 80063ca:	2b60      	cmp	r3, #96	; 0x60
 80063cc:	d125      	bne.n	800641a <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80063ce:	687b      	ldr	r3, [r7, #4]
 80063d0:	2220      	movs	r2, #32
 80063d2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80063d6:	687b      	ldr	r3, [r7, #4]
 80063d8:	2200      	movs	r2, #0
 80063da:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80063dc:	687b      	ldr	r3, [r7, #4]
 80063de:	681b      	ldr	r3, [r3, #0]
 80063e0:	695b      	ldr	r3, [r3, #20]
 80063e2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80063e6:	2b40      	cmp	r3, #64	; 0x40
 80063e8:	d10b      	bne.n	8006402 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80063ea:	687b      	ldr	r3, [r7, #4]
 80063ec:	681b      	ldr	r3, [r3, #0]
 80063ee:	691a      	ldr	r2, [r3, #16]
 80063f0:	687b      	ldr	r3, [r7, #4]
 80063f2:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063f4:	b2d2      	uxtb	r2, r2
 80063f6:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80063f8:	687b      	ldr	r3, [r7, #4]
 80063fa:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80063fc:	1c5a      	adds	r2, r3, #1
 80063fe:	687b      	ldr	r3, [r7, #4]
 8006400:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 8006402:	687b      	ldr	r3, [r7, #4]
 8006404:	681b      	ldr	r3, [r3, #0]
 8006406:	681a      	ldr	r2, [r3, #0]
 8006408:	687b      	ldr	r3, [r7, #4]
 800640a:	681b      	ldr	r3, [r3, #0]
 800640c:	f022 0201 	bic.w	r2, r2, #1
 8006410:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8006412:	6878      	ldr	r0, [r7, #4]
 8006414:	f7fe ff0e 	bl	8005234 <HAL_I2C_AbortCpltCallback>
 8006418:	e015      	b.n	8006446 <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 800641a:	687b      	ldr	r3, [r7, #4]
 800641c:	681b      	ldr	r3, [r3, #0]
 800641e:	695b      	ldr	r3, [r3, #20]
 8006420:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006424:	2b40      	cmp	r3, #64	; 0x40
 8006426:	d10b      	bne.n	8006440 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8006428:	687b      	ldr	r3, [r7, #4]
 800642a:	681b      	ldr	r3, [r3, #0]
 800642c:	691a      	ldr	r2, [r3, #16]
 800642e:	687b      	ldr	r3, [r7, #4]
 8006430:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006432:	b2d2      	uxtb	r2, r2
 8006434:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8006436:	687b      	ldr	r3, [r7, #4]
 8006438:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800643a:	1c5a      	adds	r2, r3, #1
 800643c:	687b      	ldr	r3, [r7, #4]
 800643e:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8006440:	6878      	ldr	r0, [r7, #4]
 8006442:	f7fe feed 	bl	8005220 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8006446:	687b      	ldr	r3, [r7, #4]
 8006448:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800644a:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800644c:	68bb      	ldr	r3, [r7, #8]
 800644e:	f003 0301 	and.w	r3, r3, #1
 8006452:	2b00      	cmp	r3, #0
 8006454:	d10e      	bne.n	8006474 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006456:	68bb      	ldr	r3, [r7, #8]
 8006458:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 800645c:	2b00      	cmp	r3, #0
 800645e:	d109      	bne.n	8006474 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006460:	68bb      	ldr	r3, [r7, #8]
 8006462:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8006466:	2b00      	cmp	r3, #0
 8006468:	d104      	bne.n	8006474 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 800646a:	68bb      	ldr	r3, [r7, #8]
 800646c:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8006470:	2b00      	cmp	r3, #0
 8006472:	d007      	beq.n	8006484 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8006474:	687b      	ldr	r3, [r7, #4]
 8006476:	681b      	ldr	r3, [r3, #0]
 8006478:	685a      	ldr	r2, [r3, #4]
 800647a:	687b      	ldr	r3, [r7, #4]
 800647c:	681b      	ldr	r3, [r3, #0]
 800647e:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8006482:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8006484:	687b      	ldr	r3, [r7, #4]
 8006486:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800648a:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 800648c:	687b      	ldr	r3, [r7, #4]
 800648e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006490:	f003 0304 	and.w	r3, r3, #4
 8006494:	2b04      	cmp	r3, #4
 8006496:	d113      	bne.n	80064c0 <I2C_ITError+0x254>
 8006498:	7bfb      	ldrb	r3, [r7, #15]
 800649a:	2b28      	cmp	r3, #40	; 0x28
 800649c:	d110      	bne.n	80064c0 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 800649e:	687b      	ldr	r3, [r7, #4]
 80064a0:	4a0a      	ldr	r2, [pc, #40]	; (80064cc <I2C_ITError+0x260>)
 80064a2:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 80064a4:	687b      	ldr	r3, [r7, #4]
 80064a6:	2200      	movs	r2, #0
 80064a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80064aa:	687b      	ldr	r3, [r7, #4]
 80064ac:	2220      	movs	r2, #32
 80064ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80064b2:	687b      	ldr	r3, [r7, #4]
 80064b4:	2200      	movs	r2, #0
 80064b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80064ba:	6878      	ldr	r0, [r7, #4]
 80064bc:	f7fe fe92 	bl	80051e4 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80064c0:	bf00      	nop
 80064c2:	3710      	adds	r7, #16
 80064c4:	46bd      	mov	sp, r7
 80064c6:	bd80      	pop	{r7, pc}
 80064c8:	080064d1 	.word	0x080064d1
 80064cc:	ffff0000 	.word	0xffff0000

080064d0 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 80064d0:	b580      	push	{r7, lr}
 80064d2:	b086      	sub	sp, #24
 80064d4:	af00      	add	r7, sp, #0
 80064d6:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 80064d8:	2300      	movs	r3, #0
 80064da:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 80064dc:	687b      	ldr	r3, [r7, #4]
 80064de:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80064e0:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80064e2:	697b      	ldr	r3, [r7, #20]
 80064e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80064e8:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 80064ea:	4b4b      	ldr	r3, [pc, #300]	; (8006618 <I2C_DMAAbort+0x148>)
 80064ec:	681b      	ldr	r3, [r3, #0]
 80064ee:	08db      	lsrs	r3, r3, #3
 80064f0:	4a4a      	ldr	r2, [pc, #296]	; (800661c <I2C_DMAAbort+0x14c>)
 80064f2:	fba2 2303 	umull	r2, r3, r2, r3
 80064f6:	0a1a      	lsrs	r2, r3, #8
 80064f8:	4613      	mov	r3, r2
 80064fa:	009b      	lsls	r3, r3, #2
 80064fc:	4413      	add	r3, r2
 80064fe:	00da      	lsls	r2, r3, #3
 8006500:	1ad3      	subs	r3, r2, r3
 8006502:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8006504:	68fb      	ldr	r3, [r7, #12]
 8006506:	2b00      	cmp	r3, #0
 8006508:	d106      	bne.n	8006518 <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 800650a:	697b      	ldr	r3, [r7, #20]
 800650c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800650e:	f043 0220 	orr.w	r2, r3, #32
 8006512:	697b      	ldr	r3, [r7, #20]
 8006514:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8006516:	e00a      	b.n	800652e <I2C_DMAAbort+0x5e>
    }
    count--;
 8006518:	68fb      	ldr	r3, [r7, #12]
 800651a:	3b01      	subs	r3, #1
 800651c:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800651e:	697b      	ldr	r3, [r7, #20]
 8006520:	681b      	ldr	r3, [r3, #0]
 8006522:	681b      	ldr	r3, [r3, #0]
 8006524:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006528:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800652c:	d0ea      	beq.n	8006504 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 800652e:	697b      	ldr	r3, [r7, #20]
 8006530:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006532:	2b00      	cmp	r3, #0
 8006534:	d003      	beq.n	800653e <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8006536:	697b      	ldr	r3, [r7, #20]
 8006538:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800653a:	2200      	movs	r2, #0
 800653c:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 800653e:	697b      	ldr	r3, [r7, #20]
 8006540:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006542:	2b00      	cmp	r3, #0
 8006544:	d003      	beq.n	800654e <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8006546:	697b      	ldr	r3, [r7, #20]
 8006548:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800654a:	2200      	movs	r2, #0
 800654c:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800654e:	697b      	ldr	r3, [r7, #20]
 8006550:	681b      	ldr	r3, [r3, #0]
 8006552:	681a      	ldr	r2, [r3, #0]
 8006554:	697b      	ldr	r3, [r7, #20]
 8006556:	681b      	ldr	r3, [r3, #0]
 8006558:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800655c:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 800655e:	697b      	ldr	r3, [r7, #20]
 8006560:	2200      	movs	r2, #0
 8006562:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8006564:	697b      	ldr	r3, [r7, #20]
 8006566:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006568:	2b00      	cmp	r3, #0
 800656a:	d003      	beq.n	8006574 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 800656c:	697b      	ldr	r3, [r7, #20]
 800656e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8006570:	2200      	movs	r2, #0
 8006572:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8006574:	697b      	ldr	r3, [r7, #20]
 8006576:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006578:	2b00      	cmp	r3, #0
 800657a:	d003      	beq.n	8006584 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 800657c:	697b      	ldr	r3, [r7, #20]
 800657e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8006580:	2200      	movs	r2, #0
 8006582:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8006584:	697b      	ldr	r3, [r7, #20]
 8006586:	681b      	ldr	r3, [r3, #0]
 8006588:	681a      	ldr	r2, [r3, #0]
 800658a:	697b      	ldr	r3, [r7, #20]
 800658c:	681b      	ldr	r3, [r3, #0]
 800658e:	f022 0201 	bic.w	r2, r2, #1
 8006592:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8006594:	697b      	ldr	r3, [r7, #20]
 8006596:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800659a:	b2db      	uxtb	r3, r3
 800659c:	2b60      	cmp	r3, #96	; 0x60
 800659e:	d10e      	bne.n	80065be <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 80065a0:	697b      	ldr	r3, [r7, #20]
 80065a2:	2220      	movs	r2, #32
 80065a4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80065a8:	697b      	ldr	r3, [r7, #20]
 80065aa:	2200      	movs	r2, #0
 80065ac:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 80065b0:	697b      	ldr	r3, [r7, #20]
 80065b2:	2200      	movs	r2, #0
 80065b4:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 80065b6:	6978      	ldr	r0, [r7, #20]
 80065b8:	f7fe fe3c 	bl	8005234 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 80065bc:	e027      	b.n	800660e <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80065be:	7cfb      	ldrb	r3, [r7, #19]
 80065c0:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80065c4:	2b28      	cmp	r3, #40	; 0x28
 80065c6:	d117      	bne.n	80065f8 <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 80065c8:	697b      	ldr	r3, [r7, #20]
 80065ca:	681b      	ldr	r3, [r3, #0]
 80065cc:	681a      	ldr	r2, [r3, #0]
 80065ce:	697b      	ldr	r3, [r7, #20]
 80065d0:	681b      	ldr	r3, [r3, #0]
 80065d2:	f042 0201 	orr.w	r2, r2, #1
 80065d6:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80065d8:	697b      	ldr	r3, [r7, #20]
 80065da:	681b      	ldr	r3, [r3, #0]
 80065dc:	681a      	ldr	r2, [r3, #0]
 80065de:	697b      	ldr	r3, [r7, #20]
 80065e0:	681b      	ldr	r3, [r3, #0]
 80065e2:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 80065e6:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 80065e8:	697b      	ldr	r3, [r7, #20]
 80065ea:	2200      	movs	r2, #0
 80065ec:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 80065ee:	697b      	ldr	r3, [r7, #20]
 80065f0:	2228      	movs	r2, #40	; 0x28
 80065f2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80065f6:	e007      	b.n	8006608 <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 80065f8:	697b      	ldr	r3, [r7, #20]
 80065fa:	2220      	movs	r2, #32
 80065fc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8006600:	697b      	ldr	r3, [r7, #20]
 8006602:	2200      	movs	r2, #0
 8006604:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8006608:	6978      	ldr	r0, [r7, #20]
 800660a:	f7fe fe09 	bl	8005220 <HAL_I2C_ErrorCallback>
}
 800660e:	bf00      	nop
 8006610:	3718      	adds	r7, #24
 8006612:	46bd      	mov	sp, r7
 8006614:	bd80      	pop	{r7, pc}
 8006616:	bf00      	nop
 8006618:	20000030 	.word	0x20000030
 800661c:	14f8b589 	.word	0x14f8b589

08006620 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8006620:	b480      	push	{r7}
 8006622:	b085      	sub	sp, #20
 8006624:	af00      	add	r7, sp, #0
 8006626:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8006628:	2300      	movs	r3, #0
 800662a:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 800662c:	4b13      	ldr	r3, [pc, #76]	; (800667c <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 800662e:	681b      	ldr	r3, [r3, #0]
 8006630:	08db      	lsrs	r3, r3, #3
 8006632:	4a13      	ldr	r2, [pc, #76]	; (8006680 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8006634:	fba2 2303 	umull	r2, r3, r2, r3
 8006638:	0a1a      	lsrs	r2, r3, #8
 800663a:	4613      	mov	r3, r2
 800663c:	009b      	lsls	r3, r3, #2
 800663e:	4413      	add	r3, r2
 8006640:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8006642:	68fb      	ldr	r3, [r7, #12]
 8006644:	3b01      	subs	r3, #1
 8006646:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8006648:	68fb      	ldr	r3, [r7, #12]
 800664a:	2b00      	cmp	r3, #0
 800664c:	d107      	bne.n	800665e <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800664e:	687b      	ldr	r3, [r7, #4]
 8006650:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006652:	f043 0220 	orr.w	r2, r3, #32
 8006656:	687b      	ldr	r3, [r7, #4]
 8006658:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 800665a:	2301      	movs	r3, #1
 800665c:	e008      	b.n	8006670 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 800665e:	687b      	ldr	r3, [r7, #4]
 8006660:	681b      	ldr	r3, [r3, #0]
 8006662:	681b      	ldr	r3, [r3, #0]
 8006664:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8006668:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 800666c:	d0e9      	beq.n	8006642 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 800666e:	2300      	movs	r3, #0
}
 8006670:	4618      	mov	r0, r3
 8006672:	3714      	adds	r7, #20
 8006674:	46bd      	mov	sp, r7
 8006676:	f85d 7b04 	ldr.w	r7, [sp], #4
 800667a:	4770      	bx	lr
 800667c:	20000030 	.word	0x20000030
 8006680:	14f8b589 	.word	0x14f8b589

08006684 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8006684:	b480      	push	{r7}
 8006686:	b083      	sub	sp, #12
 8006688:	af00      	add	r7, sp, #0
 800668a:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 800668c:	687b      	ldr	r3, [r7, #4]
 800668e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006690:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8006694:	d103      	bne.n	800669e <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8006696:	687b      	ldr	r3, [r7, #4]
 8006698:	2201      	movs	r2, #1
 800669a:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 800669c:	e007      	b.n	80066ae <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 800669e:	687b      	ldr	r3, [r7, #4]
 80066a0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80066a2:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80066a6:	d102      	bne.n	80066ae <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 80066a8:	687b      	ldr	r3, [r7, #4]
 80066aa:	2208      	movs	r2, #8
 80066ac:	62da      	str	r2, [r3, #44]	; 0x2c
}
 80066ae:	bf00      	nop
 80066b0:	370c      	adds	r7, #12
 80066b2:	46bd      	mov	sp, r7
 80066b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066b8:	4770      	bx	lr
	...

080066bc <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 80066bc:	b580      	push	{r7, lr}
 80066be:	b086      	sub	sp, #24
 80066c0:	af00      	add	r7, sp, #0
 80066c2:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 80066c4:	687b      	ldr	r3, [r7, #4]
 80066c6:	2b00      	cmp	r3, #0
 80066c8:	d101      	bne.n	80066ce <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 80066ca:	2301      	movs	r3, #1
 80066cc:	e264      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 80066ce:	687b      	ldr	r3, [r7, #4]
 80066d0:	681b      	ldr	r3, [r3, #0]
 80066d2:	f003 0301 	and.w	r3, r3, #1
 80066d6:	2b00      	cmp	r3, #0
 80066d8:	d075      	beq.n	80067c6 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066da:	4ba3      	ldr	r3, [pc, #652]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80066dc:	689b      	ldr	r3, [r3, #8]
 80066de:	f003 030c 	and.w	r3, r3, #12
 80066e2:	2b04      	cmp	r3, #4
 80066e4:	d00c      	beq.n	8006700 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066e6:	4ba0      	ldr	r3, [pc, #640]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80066e8:	689b      	ldr	r3, [r3, #8]
 80066ea:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 80066ee:	2b08      	cmp	r3, #8
 80066f0:	d112      	bne.n	8006718 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 80066f2:	4b9d      	ldr	r3, [pc, #628]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80066f4:	685b      	ldr	r3, [r3, #4]
 80066f6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80066fa:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 80066fe:	d10b      	bne.n	8006718 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8006700:	4b99      	ldr	r3, [pc, #612]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006702:	681b      	ldr	r3, [r3, #0]
 8006704:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006708:	2b00      	cmp	r3, #0
 800670a:	d05b      	beq.n	80067c4 <HAL_RCC_OscConfig+0x108>
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	685b      	ldr	r3, [r3, #4]
 8006710:	2b00      	cmp	r3, #0
 8006712:	d157      	bne.n	80067c4 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8006714:	2301      	movs	r3, #1
 8006716:	e23f      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8006718:	687b      	ldr	r3, [r7, #4]
 800671a:	685b      	ldr	r3, [r3, #4]
 800671c:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8006720:	d106      	bne.n	8006730 <HAL_RCC_OscConfig+0x74>
 8006722:	4b91      	ldr	r3, [pc, #580]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006724:	681b      	ldr	r3, [r3, #0]
 8006726:	4a90      	ldr	r2, [pc, #576]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006728:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 800672c:	6013      	str	r3, [r2, #0]
 800672e:	e01d      	b.n	800676c <HAL_RCC_OscConfig+0xb0>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	685b      	ldr	r3, [r3, #4]
 8006734:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8006738:	d10c      	bne.n	8006754 <HAL_RCC_OscConfig+0x98>
 800673a:	4b8b      	ldr	r3, [pc, #556]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a8a      	ldr	r2, [pc, #552]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006740:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8006744:	6013      	str	r3, [r2, #0]
 8006746:	4b88      	ldr	r3, [pc, #544]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006748:	681b      	ldr	r3, [r3, #0]
 800674a:	4a87      	ldr	r2, [pc, #540]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800674c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8006750:	6013      	str	r3, [r2, #0]
 8006752:	e00b      	b.n	800676c <HAL_RCC_OscConfig+0xb0>
 8006754:	4b84      	ldr	r3, [pc, #528]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006756:	681b      	ldr	r3, [r3, #0]
 8006758:	4a83      	ldr	r2, [pc, #524]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800675a:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 800675e:	6013      	str	r3, [r2, #0]
 8006760:	4b81      	ldr	r3, [pc, #516]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006762:	681b      	ldr	r3, [r3, #0]
 8006764:	4a80      	ldr	r2, [pc, #512]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006766:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 800676a:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 800676c:	687b      	ldr	r3, [r7, #4]
 800676e:	685b      	ldr	r3, [r3, #4]
 8006770:	2b00      	cmp	r3, #0
 8006772:	d013      	beq.n	800679c <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006774:	f7fd fa6e 	bl	8003c54 <HAL_GetTick>
 8006778:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800677a:	e008      	b.n	800678e <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 800677c:	f7fd fa6a 	bl	8003c54 <HAL_GetTick>
 8006780:	4602      	mov	r2, r0
 8006782:	693b      	ldr	r3, [r7, #16]
 8006784:	1ad3      	subs	r3, r2, r3
 8006786:	2b64      	cmp	r3, #100	; 0x64
 8006788:	d901      	bls.n	800678e <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 800678a:	2303      	movs	r3, #3
 800678c:	e204      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800678e:	4b76      	ldr	r3, [pc, #472]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006790:	681b      	ldr	r3, [r3, #0]
 8006792:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006796:	2b00      	cmp	r3, #0
 8006798:	d0f0      	beq.n	800677c <HAL_RCC_OscConfig+0xc0>
 800679a:	e014      	b.n	80067c6 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800679c:	f7fd fa5a 	bl	8003c54 <HAL_GetTick>
 80067a0:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067a2:	e008      	b.n	80067b6 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 80067a4:	f7fd fa56 	bl	8003c54 <HAL_GetTick>
 80067a8:	4602      	mov	r2, r0
 80067aa:	693b      	ldr	r3, [r7, #16]
 80067ac:	1ad3      	subs	r3, r2, r3
 80067ae:	2b64      	cmp	r3, #100	; 0x64
 80067b0:	d901      	bls.n	80067b6 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 80067b2:	2303      	movs	r3, #3
 80067b4:	e1f0      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 80067b6:	4b6c      	ldr	r3, [pc, #432]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80067b8:	681b      	ldr	r3, [r3, #0]
 80067ba:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80067be:	2b00      	cmp	r3, #0
 80067c0:	d1f0      	bne.n	80067a4 <HAL_RCC_OscConfig+0xe8>
 80067c2:	e000      	b.n	80067c6 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 80067c4:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 80067c6:	687b      	ldr	r3, [r7, #4]
 80067c8:	681b      	ldr	r3, [r3, #0]
 80067ca:	f003 0302 	and.w	r3, r3, #2
 80067ce:	2b00      	cmp	r3, #0
 80067d0:	d063      	beq.n	800689a <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067d2:	4b65      	ldr	r3, [pc, #404]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80067d4:	689b      	ldr	r3, [r3, #8]
 80067d6:	f003 030c 	and.w	r3, r3, #12
 80067da:	2b00      	cmp	r3, #0
 80067dc:	d00b      	beq.n	80067f6 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067de:	4b62      	ldr	r3, [pc, #392]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80067e0:	689b      	ldr	r3, [r3, #8]
 80067e2:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 80067e6:	2b08      	cmp	r3, #8
 80067e8:	d11c      	bne.n	8006824 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 80067ea:	4b5f      	ldr	r3, [pc, #380]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80067ec:	685b      	ldr	r3, [r3, #4]
 80067ee:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80067f2:	2b00      	cmp	r3, #0
 80067f4:	d116      	bne.n	8006824 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80067f6:	4b5c      	ldr	r3, [pc, #368]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80067f8:	681b      	ldr	r3, [r3, #0]
 80067fa:	f003 0302 	and.w	r3, r3, #2
 80067fe:	2b00      	cmp	r3, #0
 8006800:	d005      	beq.n	800680e <HAL_RCC_OscConfig+0x152>
 8006802:	687b      	ldr	r3, [r7, #4]
 8006804:	68db      	ldr	r3, [r3, #12]
 8006806:	2b01      	cmp	r3, #1
 8006808:	d001      	beq.n	800680e <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 800680a:	2301      	movs	r3, #1
 800680c:	e1c4      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 800680e:	4b56      	ldr	r3, [pc, #344]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006810:	681b      	ldr	r3, [r3, #0]
 8006812:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006816:	687b      	ldr	r3, [r7, #4]
 8006818:	691b      	ldr	r3, [r3, #16]
 800681a:	00db      	lsls	r3, r3, #3
 800681c:	4952      	ldr	r1, [pc, #328]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800681e:	4313      	orrs	r3, r2
 8006820:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8006822:	e03a      	b.n	800689a <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	68db      	ldr	r3, [r3, #12]
 8006828:	2b00      	cmp	r3, #0
 800682a:	d020      	beq.n	800686e <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 800682c:	4b4f      	ldr	r3, [pc, #316]	; (800696c <HAL_RCC_OscConfig+0x2b0>)
 800682e:	2201      	movs	r2, #1
 8006830:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006832:	f7fd fa0f 	bl	8003c54 <HAL_GetTick>
 8006836:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006838:	e008      	b.n	800684c <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800683a:	f7fd fa0b 	bl	8003c54 <HAL_GetTick>
 800683e:	4602      	mov	r2, r0
 8006840:	693b      	ldr	r3, [r7, #16]
 8006842:	1ad3      	subs	r3, r2, r3
 8006844:	2b02      	cmp	r3, #2
 8006846:	d901      	bls.n	800684c <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8006848:	2303      	movs	r3, #3
 800684a:	e1a5      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800684c:	4b46      	ldr	r3, [pc, #280]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800684e:	681b      	ldr	r3, [r3, #0]
 8006850:	f003 0302 	and.w	r3, r3, #2
 8006854:	2b00      	cmp	r3, #0
 8006856:	d0f0      	beq.n	800683a <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8006858:	4b43      	ldr	r3, [pc, #268]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800685a:	681b      	ldr	r3, [r3, #0]
 800685c:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8006860:	687b      	ldr	r3, [r7, #4]
 8006862:	691b      	ldr	r3, [r3, #16]
 8006864:	00db      	lsls	r3, r3, #3
 8006866:	4940      	ldr	r1, [pc, #256]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006868:	4313      	orrs	r3, r2
 800686a:	600b      	str	r3, [r1, #0]
 800686c:	e015      	b.n	800689a <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800686e:	4b3f      	ldr	r3, [pc, #252]	; (800696c <HAL_RCC_OscConfig+0x2b0>)
 8006870:	2200      	movs	r2, #0
 8006872:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8006874:	f7fd f9ee 	bl	8003c54 <HAL_GetTick>
 8006878:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800687a:	e008      	b.n	800688e <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 800687c:	f7fd f9ea 	bl	8003c54 <HAL_GetTick>
 8006880:	4602      	mov	r2, r0
 8006882:	693b      	ldr	r3, [r7, #16]
 8006884:	1ad3      	subs	r3, r2, r3
 8006886:	2b02      	cmp	r3, #2
 8006888:	d901      	bls.n	800688e <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 800688a:	2303      	movs	r3, #3
 800688c:	e184      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800688e:	4b36      	ldr	r3, [pc, #216]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006890:	681b      	ldr	r3, [r3, #0]
 8006892:	f003 0302 	and.w	r3, r3, #2
 8006896:	2b00      	cmp	r3, #0
 8006898:	d1f0      	bne.n	800687c <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 800689a:	687b      	ldr	r3, [r7, #4]
 800689c:	681b      	ldr	r3, [r3, #0]
 800689e:	f003 0308 	and.w	r3, r3, #8
 80068a2:	2b00      	cmp	r3, #0
 80068a4:	d030      	beq.n	8006908 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 80068a6:	687b      	ldr	r3, [r7, #4]
 80068a8:	695b      	ldr	r3, [r3, #20]
 80068aa:	2b00      	cmp	r3, #0
 80068ac:	d016      	beq.n	80068dc <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 80068ae:	4b30      	ldr	r3, [pc, #192]	; (8006970 <HAL_RCC_OscConfig+0x2b4>)
 80068b0:	2201      	movs	r2, #1
 80068b2:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80068b4:	f7fd f9ce 	bl	8003c54 <HAL_GetTick>
 80068b8:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ba:	e008      	b.n	80068ce <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068bc:	f7fd f9ca 	bl	8003c54 <HAL_GetTick>
 80068c0:	4602      	mov	r2, r0
 80068c2:	693b      	ldr	r3, [r7, #16]
 80068c4:	1ad3      	subs	r3, r2, r3
 80068c6:	2b02      	cmp	r3, #2
 80068c8:	d901      	bls.n	80068ce <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 80068ca:	2303      	movs	r3, #3
 80068cc:	e164      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 80068ce:	4b26      	ldr	r3, [pc, #152]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80068d0:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 80068d2:	f003 0302 	and.w	r3, r3, #2
 80068d6:	2b00      	cmp	r3, #0
 80068d8:	d0f0      	beq.n	80068bc <HAL_RCC_OscConfig+0x200>
 80068da:	e015      	b.n	8006908 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 80068dc:	4b24      	ldr	r3, [pc, #144]	; (8006970 <HAL_RCC_OscConfig+0x2b4>)
 80068de:	2200      	movs	r2, #0
 80068e0:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80068e2:	f7fd f9b7 	bl	8003c54 <HAL_GetTick>
 80068e6:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068e8:	e008      	b.n	80068fc <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 80068ea:	f7fd f9b3 	bl	8003c54 <HAL_GetTick>
 80068ee:	4602      	mov	r2, r0
 80068f0:	693b      	ldr	r3, [r7, #16]
 80068f2:	1ad3      	subs	r3, r2, r3
 80068f4:	2b02      	cmp	r3, #2
 80068f6:	d901      	bls.n	80068fc <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 80068f8:	2303      	movs	r3, #3
 80068fa:	e14d      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 80068fc:	4b1a      	ldr	r3, [pc, #104]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 80068fe:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8006900:	f003 0302 	and.w	r3, r3, #2
 8006904:	2b00      	cmp	r3, #0
 8006906:	d1f0      	bne.n	80068ea <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8006908:	687b      	ldr	r3, [r7, #4]
 800690a:	681b      	ldr	r3, [r3, #0]
 800690c:	f003 0304 	and.w	r3, r3, #4
 8006910:	2b00      	cmp	r3, #0
 8006912:	f000 80a0 	beq.w	8006a56 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8006916:	2300      	movs	r3, #0
 8006918:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 800691a:	4b13      	ldr	r3, [pc, #76]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800691c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800691e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8006922:	2b00      	cmp	r3, #0
 8006924:	d10f      	bne.n	8006946 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8006926:	2300      	movs	r3, #0
 8006928:	60bb      	str	r3, [r7, #8]
 800692a:	4b0f      	ldr	r3, [pc, #60]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 800692c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800692e:	4a0e      	ldr	r2, [pc, #56]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006930:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8006934:	6413      	str	r3, [r2, #64]	; 0x40
 8006936:	4b0c      	ldr	r3, [pc, #48]	; (8006968 <HAL_RCC_OscConfig+0x2ac>)
 8006938:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800693a:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 800693e:	60bb      	str	r3, [r7, #8]
 8006940:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8006942:	2301      	movs	r3, #1
 8006944:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006946:	4b0b      	ldr	r3, [pc, #44]	; (8006974 <HAL_RCC_OscConfig+0x2b8>)
 8006948:	681b      	ldr	r3, [r3, #0]
 800694a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800694e:	2b00      	cmp	r3, #0
 8006950:	d121      	bne.n	8006996 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8006952:	4b08      	ldr	r3, [pc, #32]	; (8006974 <HAL_RCC_OscConfig+0x2b8>)
 8006954:	681b      	ldr	r3, [r3, #0]
 8006956:	4a07      	ldr	r2, [pc, #28]	; (8006974 <HAL_RCC_OscConfig+0x2b8>)
 8006958:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800695c:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 800695e:	f7fd f979 	bl	8003c54 <HAL_GetTick>
 8006962:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8006964:	e011      	b.n	800698a <HAL_RCC_OscConfig+0x2ce>
 8006966:	bf00      	nop
 8006968:	40023800 	.word	0x40023800
 800696c:	42470000 	.word	0x42470000
 8006970:	42470e80 	.word	0x42470e80
 8006974:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8006978:	f7fd f96c 	bl	8003c54 <HAL_GetTick>
 800697c:	4602      	mov	r2, r0
 800697e:	693b      	ldr	r3, [r7, #16]
 8006980:	1ad3      	subs	r3, r2, r3
 8006982:	2b02      	cmp	r3, #2
 8006984:	d901      	bls.n	800698a <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8006986:	2303      	movs	r3, #3
 8006988:	e106      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 800698a:	4b85      	ldr	r3, [pc, #532]	; (8006ba0 <HAL_RCC_OscConfig+0x4e4>)
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8006992:	2b00      	cmp	r3, #0
 8006994:	d0f0      	beq.n	8006978 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	689b      	ldr	r3, [r3, #8]
 800699a:	2b01      	cmp	r3, #1
 800699c:	d106      	bne.n	80069ac <HAL_RCC_OscConfig+0x2f0>
 800699e:	4b81      	ldr	r3, [pc, #516]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069a0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069a2:	4a80      	ldr	r2, [pc, #512]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069a4:	f043 0301 	orr.w	r3, r3, #1
 80069a8:	6713      	str	r3, [r2, #112]	; 0x70
 80069aa:	e01c      	b.n	80069e6 <HAL_RCC_OscConfig+0x32a>
 80069ac:	687b      	ldr	r3, [r7, #4]
 80069ae:	689b      	ldr	r3, [r3, #8]
 80069b0:	2b05      	cmp	r3, #5
 80069b2:	d10c      	bne.n	80069ce <HAL_RCC_OscConfig+0x312>
 80069b4:	4b7b      	ldr	r3, [pc, #492]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069b6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069b8:	4a7a      	ldr	r2, [pc, #488]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069ba:	f043 0304 	orr.w	r3, r3, #4
 80069be:	6713      	str	r3, [r2, #112]	; 0x70
 80069c0:	4b78      	ldr	r3, [pc, #480]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069c2:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069c4:	4a77      	ldr	r2, [pc, #476]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069c6:	f043 0301 	orr.w	r3, r3, #1
 80069ca:	6713      	str	r3, [r2, #112]	; 0x70
 80069cc:	e00b      	b.n	80069e6 <HAL_RCC_OscConfig+0x32a>
 80069ce:	4b75      	ldr	r3, [pc, #468]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069d0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069d2:	4a74      	ldr	r2, [pc, #464]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069d4:	f023 0301 	bic.w	r3, r3, #1
 80069d8:	6713      	str	r3, [r2, #112]	; 0x70
 80069da:	4b72      	ldr	r3, [pc, #456]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069dc:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80069de:	4a71      	ldr	r2, [pc, #452]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 80069e0:	f023 0304 	bic.w	r3, r3, #4
 80069e4:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 80069e6:	687b      	ldr	r3, [r7, #4]
 80069e8:	689b      	ldr	r3, [r3, #8]
 80069ea:	2b00      	cmp	r3, #0
 80069ec:	d015      	beq.n	8006a1a <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 80069ee:	f7fd f931 	bl	8003c54 <HAL_GetTick>
 80069f2:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80069f4:	e00a      	b.n	8006a0c <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80069f6:	f7fd f92d 	bl	8003c54 <HAL_GetTick>
 80069fa:	4602      	mov	r2, r0
 80069fc:	693b      	ldr	r3, [r7, #16]
 80069fe:	1ad3      	subs	r3, r2, r3
 8006a00:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a04:	4293      	cmp	r3, r2
 8006a06:	d901      	bls.n	8006a0c <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8006a08:	2303      	movs	r3, #3
 8006a0a:	e0c5      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006a0c:	4b65      	ldr	r3, [pc, #404]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006a0e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a10:	f003 0302 	and.w	r3, r3, #2
 8006a14:	2b00      	cmp	r3, #0
 8006a16:	d0ee      	beq.n	80069f6 <HAL_RCC_OscConfig+0x33a>
 8006a18:	e014      	b.n	8006a44 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8006a1a:	f7fd f91b 	bl	8003c54 <HAL_GetTick>
 8006a1e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a20:	e00a      	b.n	8006a38 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006a22:	f7fd f917 	bl	8003c54 <HAL_GetTick>
 8006a26:	4602      	mov	r2, r0
 8006a28:	693b      	ldr	r3, [r7, #16]
 8006a2a:	1ad3      	subs	r3, r2, r3
 8006a2c:	f241 3288 	movw	r2, #5000	; 0x1388
 8006a30:	4293      	cmp	r3, r2
 8006a32:	d901      	bls.n	8006a38 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006a34:	2303      	movs	r3, #3
 8006a36:	e0af      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006a38:	4b5a      	ldr	r3, [pc, #360]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006a3a:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006a3c:	f003 0302 	and.w	r3, r3, #2
 8006a40:	2b00      	cmp	r3, #0
 8006a42:	d1ee      	bne.n	8006a22 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006a44:	7dfb      	ldrb	r3, [r7, #23]
 8006a46:	2b01      	cmp	r3, #1
 8006a48:	d105      	bne.n	8006a56 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 8006a4a:	4b56      	ldr	r3, [pc, #344]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006a4c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006a4e:	4a55      	ldr	r2, [pc, #340]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006a50:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006a54:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 8006a56:	687b      	ldr	r3, [r7, #4]
 8006a58:	699b      	ldr	r3, [r3, #24]
 8006a5a:	2b00      	cmp	r3, #0
 8006a5c:	f000 809b 	beq.w	8006b96 <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006a60:	4b50      	ldr	r3, [pc, #320]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006a62:	689b      	ldr	r3, [r3, #8]
 8006a64:	f003 030c 	and.w	r3, r3, #12
 8006a68:	2b08      	cmp	r3, #8
 8006a6a:	d05c      	beq.n	8006b26 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006a6c:	687b      	ldr	r3, [r7, #4]
 8006a6e:	699b      	ldr	r3, [r3, #24]
 8006a70:	2b02      	cmp	r3, #2
 8006a72:	d141      	bne.n	8006af8 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006a74:	4b4c      	ldr	r3, [pc, #304]	; (8006ba8 <HAL_RCC_OscConfig+0x4ec>)
 8006a76:	2200      	movs	r2, #0
 8006a78:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006a7a:	f7fd f8eb 	bl	8003c54 <HAL_GetTick>
 8006a7e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a80:	e008      	b.n	8006a94 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006a82:	f7fd f8e7 	bl	8003c54 <HAL_GetTick>
 8006a86:	4602      	mov	r2, r0
 8006a88:	693b      	ldr	r3, [r7, #16]
 8006a8a:	1ad3      	subs	r3, r2, r3
 8006a8c:	2b02      	cmp	r3, #2
 8006a8e:	d901      	bls.n	8006a94 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006a90:	2303      	movs	r3, #3
 8006a92:	e081      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006a94:	4b43      	ldr	r3, [pc, #268]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006a96:	681b      	ldr	r3, [r3, #0]
 8006a98:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006a9c:	2b00      	cmp	r3, #0
 8006a9e:	d1f0      	bne.n	8006a82 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006aa0:	687b      	ldr	r3, [r7, #4]
 8006aa2:	69da      	ldr	r2, [r3, #28]
 8006aa4:	687b      	ldr	r3, [r7, #4]
 8006aa6:	6a1b      	ldr	r3, [r3, #32]
 8006aa8:	431a      	orrs	r2, r3
 8006aaa:	687b      	ldr	r3, [r7, #4]
 8006aac:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8006aae:	019b      	lsls	r3, r3, #6
 8006ab0:	431a      	orrs	r2, r3
 8006ab2:	687b      	ldr	r3, [r7, #4]
 8006ab4:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006ab6:	085b      	lsrs	r3, r3, #1
 8006ab8:	3b01      	subs	r3, #1
 8006aba:	041b      	lsls	r3, r3, #16
 8006abc:	431a      	orrs	r2, r3
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006ac2:	061b      	lsls	r3, r3, #24
 8006ac4:	4937      	ldr	r1, [pc, #220]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006ac6:	4313      	orrs	r3, r2
 8006ac8:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8006aca:	4b37      	ldr	r3, [pc, #220]	; (8006ba8 <HAL_RCC_OscConfig+0x4ec>)
 8006acc:	2201      	movs	r2, #1
 8006ace:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006ad0:	f7fd f8c0 	bl	8003c54 <HAL_GetTick>
 8006ad4:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006ad6:	e008      	b.n	8006aea <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006ad8:	f7fd f8bc 	bl	8003c54 <HAL_GetTick>
 8006adc:	4602      	mov	r2, r0
 8006ade:	693b      	ldr	r3, [r7, #16]
 8006ae0:	1ad3      	subs	r3, r2, r3
 8006ae2:	2b02      	cmp	r3, #2
 8006ae4:	d901      	bls.n	8006aea <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8006ae6:	2303      	movs	r3, #3
 8006ae8:	e056      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006aea:	4b2e      	ldr	r3, [pc, #184]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006aec:	681b      	ldr	r3, [r3, #0]
 8006aee:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006af2:	2b00      	cmp	r3, #0
 8006af4:	d0f0      	beq.n	8006ad8 <HAL_RCC_OscConfig+0x41c>
 8006af6:	e04e      	b.n	8006b96 <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006af8:	4b2b      	ldr	r3, [pc, #172]	; (8006ba8 <HAL_RCC_OscConfig+0x4ec>)
 8006afa:	2200      	movs	r2, #0
 8006afc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8006afe:	f7fd f8a9 	bl	8003c54 <HAL_GetTick>
 8006b02:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b04:	e008      	b.n	8006b18 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006b06:	f7fd f8a5 	bl	8003c54 <HAL_GetTick>
 8006b0a:	4602      	mov	r2, r0
 8006b0c:	693b      	ldr	r3, [r7, #16]
 8006b0e:	1ad3      	subs	r3, r2, r3
 8006b10:	2b02      	cmp	r3, #2
 8006b12:	d901      	bls.n	8006b18 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006b14:	2303      	movs	r3, #3
 8006b16:	e03f      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006b18:	4b22      	ldr	r3, [pc, #136]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006b1a:	681b      	ldr	r3, [r3, #0]
 8006b1c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006b20:	2b00      	cmp	r3, #0
 8006b22:	d1f0      	bne.n	8006b06 <HAL_RCC_OscConfig+0x44a>
 8006b24:	e037      	b.n	8006b96 <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 8006b26:	687b      	ldr	r3, [r7, #4]
 8006b28:	699b      	ldr	r3, [r3, #24]
 8006b2a:	2b01      	cmp	r3, #1
 8006b2c:	d101      	bne.n	8006b32 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006b2e:	2301      	movs	r3, #1
 8006b30:	e032      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006b32:	4b1c      	ldr	r3, [pc, #112]	; (8006ba4 <HAL_RCC_OscConfig+0x4e8>)
 8006b34:	685b      	ldr	r3, [r3, #4]
 8006b36:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b38:	687b      	ldr	r3, [r7, #4]
 8006b3a:	699b      	ldr	r3, [r3, #24]
 8006b3c:	2b01      	cmp	r3, #1
 8006b3e:	d028      	beq.n	8006b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b40:	68fb      	ldr	r3, [r7, #12]
 8006b42:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 8006b46:	687b      	ldr	r3, [r7, #4]
 8006b48:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 8006b4a:	429a      	cmp	r2, r3
 8006b4c:	d121      	bne.n	8006b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b4e:	68fb      	ldr	r3, [r7, #12]
 8006b50:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006b54:	687b      	ldr	r3, [r7, #4]
 8006b56:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006b58:	429a      	cmp	r2, r3
 8006b5a:	d11a      	bne.n	8006b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b5c:	68fa      	ldr	r2, [r7, #12]
 8006b5e:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006b62:	4013      	ands	r3, r2
 8006b64:	687a      	ldr	r2, [r7, #4]
 8006b66:	6a52      	ldr	r2, [r2, #36]	; 0x24
 8006b68:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006b6a:	4293      	cmp	r3, r2
 8006b6c:	d111      	bne.n	8006b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b6e:	68fb      	ldr	r3, [r7, #12]
 8006b70:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006b74:	687b      	ldr	r3, [r7, #4]
 8006b76:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8006b78:	085b      	lsrs	r3, r3, #1
 8006b7a:	3b01      	subs	r3, #1
 8006b7c:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006b7e:	429a      	cmp	r2, r3
 8006b80:	d107      	bne.n	8006b92 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006b82:	68fb      	ldr	r3, [r7, #12]
 8006b84:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8006b88:	687b      	ldr	r3, [r7, #4]
 8006b8a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006b8c:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006b8e:	429a      	cmp	r2, r3
 8006b90:	d001      	beq.n	8006b96 <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006b92:	2301      	movs	r3, #1
 8006b94:	e000      	b.n	8006b98 <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 8006b96:	2300      	movs	r3, #0
}
 8006b98:	4618      	mov	r0, r3
 8006b9a:	3718      	adds	r7, #24
 8006b9c:	46bd      	mov	sp, r7
 8006b9e:	bd80      	pop	{r7, pc}
 8006ba0:	40007000 	.word	0x40007000
 8006ba4:	40023800 	.word	0x40023800
 8006ba8:	42470060 	.word	0x42470060

08006bac <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8006bac:	b580      	push	{r7, lr}
 8006bae:	b084      	sub	sp, #16
 8006bb0:	af00      	add	r7, sp, #0
 8006bb2:	6078      	str	r0, [r7, #4]
 8006bb4:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2b00      	cmp	r3, #0
 8006bba:	d101      	bne.n	8006bc0 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8006bbc:	2301      	movs	r3, #1
 8006bbe:	e0cc      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 8006bc0:	4b68      	ldr	r3, [pc, #416]	; (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006bc2:	681b      	ldr	r3, [r3, #0]
 8006bc4:	f003 0307 	and.w	r3, r3, #7
 8006bc8:	683a      	ldr	r2, [r7, #0]
 8006bca:	429a      	cmp	r2, r3
 8006bcc:	d90c      	bls.n	8006be8 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006bce:	4b65      	ldr	r3, [pc, #404]	; (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd0:	683a      	ldr	r2, [r7, #0]
 8006bd2:	b2d2      	uxtb	r2, r2
 8006bd4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006bd6:	4b63      	ldr	r3, [pc, #396]	; (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006bd8:	681b      	ldr	r3, [r3, #0]
 8006bda:	f003 0307 	and.w	r3, r3, #7
 8006bde:	683a      	ldr	r2, [r7, #0]
 8006be0:	429a      	cmp	r2, r3
 8006be2:	d001      	beq.n	8006be8 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8006be4:	2301      	movs	r3, #1
 8006be6:	e0b8      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8006be8:	687b      	ldr	r3, [r7, #4]
 8006bea:	681b      	ldr	r3, [r3, #0]
 8006bec:	f003 0302 	and.w	r3, r3, #2
 8006bf0:	2b00      	cmp	r3, #0
 8006bf2:	d020      	beq.n	8006c36 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	f003 0304 	and.w	r3, r3, #4
 8006bfc:	2b00      	cmp	r3, #0
 8006bfe:	d005      	beq.n	8006c0c <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 8006c00:	4b59      	ldr	r3, [pc, #356]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c02:	689b      	ldr	r3, [r3, #8]
 8006c04:	4a58      	ldr	r2, [pc, #352]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c06:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8006c0a:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006c0c:	687b      	ldr	r3, [r7, #4]
 8006c0e:	681b      	ldr	r3, [r3, #0]
 8006c10:	f003 0308 	and.w	r3, r3, #8
 8006c14:	2b00      	cmp	r3, #0
 8006c16:	d005      	beq.n	8006c24 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 8006c18:	4b53      	ldr	r3, [pc, #332]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1a:	689b      	ldr	r3, [r3, #8]
 8006c1c:	4a52      	ldr	r2, [pc, #328]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c1e:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006c22:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006c24:	4b50      	ldr	r3, [pc, #320]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c26:	689b      	ldr	r3, [r3, #8]
 8006c28:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006c2c:	687b      	ldr	r3, [r7, #4]
 8006c2e:	689b      	ldr	r3, [r3, #8]
 8006c30:	494d      	ldr	r1, [pc, #308]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c32:	4313      	orrs	r3, r2
 8006c34:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 8006c36:	687b      	ldr	r3, [r7, #4]
 8006c38:	681b      	ldr	r3, [r3, #0]
 8006c3a:	f003 0301 	and.w	r3, r3, #1
 8006c3e:	2b00      	cmp	r3, #0
 8006c40:	d044      	beq.n	8006ccc <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	685b      	ldr	r3, [r3, #4]
 8006c46:	2b01      	cmp	r3, #1
 8006c48:	d107      	bne.n	8006c5a <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8006c4a:	4b47      	ldr	r3, [pc, #284]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c4c:	681b      	ldr	r3, [r3, #0]
 8006c4e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006c52:	2b00      	cmp	r3, #0
 8006c54:	d119      	bne.n	8006c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c56:	2301      	movs	r3, #1
 8006c58:	e07f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	685b      	ldr	r3, [r3, #4]
 8006c5e:	2b02      	cmp	r3, #2
 8006c60:	d003      	beq.n	8006c6a <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006c62:	687b      	ldr	r3, [r7, #4]
 8006c64:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 8006c66:	2b03      	cmp	r3, #3
 8006c68:	d107      	bne.n	8006c7a <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8006c6a:	4b3f      	ldr	r3, [pc, #252]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c6c:	681b      	ldr	r3, [r3, #0]
 8006c6e:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006c72:	2b00      	cmp	r3, #0
 8006c74:	d109      	bne.n	8006c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c76:	2301      	movs	r3, #1
 8006c78:	e06f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8006c7a:	4b3b      	ldr	r3, [pc, #236]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c7c:	681b      	ldr	r3, [r3, #0]
 8006c7e:	f003 0302 	and.w	r3, r3, #2
 8006c82:	2b00      	cmp	r3, #0
 8006c84:	d101      	bne.n	8006c8a <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8006c86:	2301      	movs	r3, #1
 8006c88:	e067      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8006c8a:	4b37      	ldr	r3, [pc, #220]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c8c:	689b      	ldr	r3, [r3, #8]
 8006c8e:	f023 0203 	bic.w	r2, r3, #3
 8006c92:	687b      	ldr	r3, [r7, #4]
 8006c94:	685b      	ldr	r3, [r3, #4]
 8006c96:	4934      	ldr	r1, [pc, #208]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006c98:	4313      	orrs	r3, r2
 8006c9a:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006c9c:	f7fc ffda 	bl	8003c54 <HAL_GetTick>
 8006ca0:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006ca2:	e00a      	b.n	8006cba <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006ca4:	f7fc ffd6 	bl	8003c54 <HAL_GetTick>
 8006ca8:	4602      	mov	r2, r0
 8006caa:	68fb      	ldr	r3, [r7, #12]
 8006cac:	1ad3      	subs	r3, r2, r3
 8006cae:	f241 3288 	movw	r2, #5000	; 0x1388
 8006cb2:	4293      	cmp	r3, r2
 8006cb4:	d901      	bls.n	8006cba <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8006cb6:	2303      	movs	r3, #3
 8006cb8:	e04f      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006cba:	4b2b      	ldr	r3, [pc, #172]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006cbc:	689b      	ldr	r3, [r3, #8]
 8006cbe:	f003 020c 	and.w	r2, r3, #12
 8006cc2:	687b      	ldr	r3, [r7, #4]
 8006cc4:	685b      	ldr	r3, [r3, #4]
 8006cc6:	009b      	lsls	r3, r3, #2
 8006cc8:	429a      	cmp	r2, r3
 8006cca:	d1eb      	bne.n	8006ca4 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8006ccc:	4b25      	ldr	r3, [pc, #148]	; (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006cce:	681b      	ldr	r3, [r3, #0]
 8006cd0:	f003 0307 	and.w	r3, r3, #7
 8006cd4:	683a      	ldr	r2, [r7, #0]
 8006cd6:	429a      	cmp	r2, r3
 8006cd8:	d20c      	bcs.n	8006cf4 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8006cda:	4b22      	ldr	r3, [pc, #136]	; (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006cdc:	683a      	ldr	r2, [r7, #0]
 8006cde:	b2d2      	uxtb	r2, r2
 8006ce0:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8006ce2:	4b20      	ldr	r3, [pc, #128]	; (8006d64 <HAL_RCC_ClockConfig+0x1b8>)
 8006ce4:	681b      	ldr	r3, [r3, #0]
 8006ce6:	f003 0307 	and.w	r3, r3, #7
 8006cea:	683a      	ldr	r2, [r7, #0]
 8006cec:	429a      	cmp	r2, r3
 8006cee:	d001      	beq.n	8006cf4 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 8006cf0:	2301      	movs	r3, #1
 8006cf2:	e032      	b.n	8006d5a <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8006cf4:	687b      	ldr	r3, [r7, #4]
 8006cf6:	681b      	ldr	r3, [r3, #0]
 8006cf8:	f003 0304 	and.w	r3, r3, #4
 8006cfc:	2b00      	cmp	r3, #0
 8006cfe:	d008      	beq.n	8006d12 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 8006d00:	4b19      	ldr	r3, [pc, #100]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d02:	689b      	ldr	r3, [r3, #8]
 8006d04:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	68db      	ldr	r3, [r3, #12]
 8006d0c:	4916      	ldr	r1, [pc, #88]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d0e:	4313      	orrs	r3, r2
 8006d10:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006d12:	687b      	ldr	r3, [r7, #4]
 8006d14:	681b      	ldr	r3, [r3, #0]
 8006d16:	f003 0308 	and.w	r3, r3, #8
 8006d1a:	2b00      	cmp	r3, #0
 8006d1c:	d009      	beq.n	8006d32 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006d1e:	4b12      	ldr	r3, [pc, #72]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d20:	689b      	ldr	r3, [r3, #8]
 8006d22:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 8006d26:	687b      	ldr	r3, [r7, #4]
 8006d28:	691b      	ldr	r3, [r3, #16]
 8006d2a:	00db      	lsls	r3, r3, #3
 8006d2c:	490e      	ldr	r1, [pc, #56]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d2e:	4313      	orrs	r3, r2
 8006d30:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006d32:	f000 f821 	bl	8006d78 <HAL_RCC_GetSysClockFreq>
 8006d36:	4602      	mov	r2, r0
 8006d38:	4b0b      	ldr	r3, [pc, #44]	; (8006d68 <HAL_RCC_ClockConfig+0x1bc>)
 8006d3a:	689b      	ldr	r3, [r3, #8]
 8006d3c:	091b      	lsrs	r3, r3, #4
 8006d3e:	f003 030f 	and.w	r3, r3, #15
 8006d42:	490a      	ldr	r1, [pc, #40]	; (8006d6c <HAL_RCC_ClockConfig+0x1c0>)
 8006d44:	5ccb      	ldrb	r3, [r1, r3]
 8006d46:	fa22 f303 	lsr.w	r3, r2, r3
 8006d4a:	4a09      	ldr	r2, [pc, #36]	; (8006d70 <HAL_RCC_ClockConfig+0x1c4>)
 8006d4c:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006d4e:	4b09      	ldr	r3, [pc, #36]	; (8006d74 <HAL_RCC_ClockConfig+0x1c8>)
 8006d50:	681b      	ldr	r3, [r3, #0]
 8006d52:	4618      	mov	r0, r3
 8006d54:	f7fc ff3a 	bl	8003bcc <HAL_InitTick>

  return HAL_OK;
 8006d58:	2300      	movs	r3, #0
}
 8006d5a:	4618      	mov	r0, r3
 8006d5c:	3710      	adds	r7, #16
 8006d5e:	46bd      	mov	sp, r7
 8006d60:	bd80      	pop	{r7, pc}
 8006d62:	bf00      	nop
 8006d64:	40023c00 	.word	0x40023c00
 8006d68:	40023800 	.word	0x40023800
 8006d6c:	0800a1d8 	.word	0x0800a1d8
 8006d70:	20000030 	.word	0x20000030
 8006d74:	20000034 	.word	0x20000034

08006d78 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8006d78:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006d7c:	b084      	sub	sp, #16
 8006d7e:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006d80:	2300      	movs	r3, #0
 8006d82:	607b      	str	r3, [r7, #4]
 8006d84:	2300      	movs	r3, #0
 8006d86:	60fb      	str	r3, [r7, #12]
 8006d88:	2300      	movs	r3, #0
 8006d8a:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006d8c:	2300      	movs	r3, #0
 8006d8e:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006d90:	4b67      	ldr	r3, [pc, #412]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006d92:	689b      	ldr	r3, [r3, #8]
 8006d94:	f003 030c 	and.w	r3, r3, #12
 8006d98:	2b08      	cmp	r3, #8
 8006d9a:	d00d      	beq.n	8006db8 <HAL_RCC_GetSysClockFreq+0x40>
 8006d9c:	2b08      	cmp	r3, #8
 8006d9e:	f200 80bd 	bhi.w	8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>
 8006da2:	2b00      	cmp	r3, #0
 8006da4:	d002      	beq.n	8006dac <HAL_RCC_GetSysClockFreq+0x34>
 8006da6:	2b04      	cmp	r3, #4
 8006da8:	d003      	beq.n	8006db2 <HAL_RCC_GetSysClockFreq+0x3a>
 8006daa:	e0b7      	b.n	8006f1c <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8006dac:	4b61      	ldr	r3, [pc, #388]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006dae:	60bb      	str	r3, [r7, #8]
       break;
 8006db0:	e0b7      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 8006db2:	4b61      	ldr	r3, [pc, #388]	; (8006f38 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8006db4:	60bb      	str	r3, [r7, #8]
      break;
 8006db6:	e0b4      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8006db8:	4b5d      	ldr	r3, [pc, #372]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dba:	685b      	ldr	r3, [r3, #4]
 8006dbc:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 8006dc0:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 8006dc2:	4b5b      	ldr	r3, [pc, #364]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dc4:	685b      	ldr	r3, [r3, #4]
 8006dc6:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8006dca:	2b00      	cmp	r3, #0
 8006dcc:	d04d      	beq.n	8006e6a <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006dce:	4b58      	ldr	r3, [pc, #352]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006dd0:	685b      	ldr	r3, [r3, #4]
 8006dd2:	099b      	lsrs	r3, r3, #6
 8006dd4:	461a      	mov	r2, r3
 8006dd6:	f04f 0300 	mov.w	r3, #0
 8006dda:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006dde:	f04f 0100 	mov.w	r1, #0
 8006de2:	ea02 0800 	and.w	r8, r2, r0
 8006de6:	ea03 0901 	and.w	r9, r3, r1
 8006dea:	4640      	mov	r0, r8
 8006dec:	4649      	mov	r1, r9
 8006dee:	f04f 0200 	mov.w	r2, #0
 8006df2:	f04f 0300 	mov.w	r3, #0
 8006df6:	014b      	lsls	r3, r1, #5
 8006df8:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006dfc:	0142      	lsls	r2, r0, #5
 8006dfe:	4610      	mov	r0, r2
 8006e00:	4619      	mov	r1, r3
 8006e02:	ebb0 0008 	subs.w	r0, r0, r8
 8006e06:	eb61 0109 	sbc.w	r1, r1, r9
 8006e0a:	f04f 0200 	mov.w	r2, #0
 8006e0e:	f04f 0300 	mov.w	r3, #0
 8006e12:	018b      	lsls	r3, r1, #6
 8006e14:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006e18:	0182      	lsls	r2, r0, #6
 8006e1a:	1a12      	subs	r2, r2, r0
 8006e1c:	eb63 0301 	sbc.w	r3, r3, r1
 8006e20:	f04f 0000 	mov.w	r0, #0
 8006e24:	f04f 0100 	mov.w	r1, #0
 8006e28:	00d9      	lsls	r1, r3, #3
 8006e2a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006e2e:	00d0      	lsls	r0, r2, #3
 8006e30:	4602      	mov	r2, r0
 8006e32:	460b      	mov	r3, r1
 8006e34:	eb12 0208 	adds.w	r2, r2, r8
 8006e38:	eb43 0309 	adc.w	r3, r3, r9
 8006e3c:	f04f 0000 	mov.w	r0, #0
 8006e40:	f04f 0100 	mov.w	r1, #0
 8006e44:	0259      	lsls	r1, r3, #9
 8006e46:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 8006e4a:	0250      	lsls	r0, r2, #9
 8006e4c:	4602      	mov	r2, r0
 8006e4e:	460b      	mov	r3, r1
 8006e50:	4610      	mov	r0, r2
 8006e52:	4619      	mov	r1, r3
 8006e54:	687b      	ldr	r3, [r7, #4]
 8006e56:	461a      	mov	r2, r3
 8006e58:	f04f 0300 	mov.w	r3, #0
 8006e5c:	f7f9 ff86 	bl	8000d6c <__aeabi_uldivmod>
 8006e60:	4602      	mov	r2, r0
 8006e62:	460b      	mov	r3, r1
 8006e64:	4613      	mov	r3, r2
 8006e66:	60fb      	str	r3, [r7, #12]
 8006e68:	e04a      	b.n	8006f00 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 8006e6a:	4b31      	ldr	r3, [pc, #196]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006e6c:	685b      	ldr	r3, [r3, #4]
 8006e6e:	099b      	lsrs	r3, r3, #6
 8006e70:	461a      	mov	r2, r3
 8006e72:	f04f 0300 	mov.w	r3, #0
 8006e76:	f240 10ff 	movw	r0, #511	; 0x1ff
 8006e7a:	f04f 0100 	mov.w	r1, #0
 8006e7e:	ea02 0400 	and.w	r4, r2, r0
 8006e82:	ea03 0501 	and.w	r5, r3, r1
 8006e86:	4620      	mov	r0, r4
 8006e88:	4629      	mov	r1, r5
 8006e8a:	f04f 0200 	mov.w	r2, #0
 8006e8e:	f04f 0300 	mov.w	r3, #0
 8006e92:	014b      	lsls	r3, r1, #5
 8006e94:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8006e98:	0142      	lsls	r2, r0, #5
 8006e9a:	4610      	mov	r0, r2
 8006e9c:	4619      	mov	r1, r3
 8006e9e:	1b00      	subs	r0, r0, r4
 8006ea0:	eb61 0105 	sbc.w	r1, r1, r5
 8006ea4:	f04f 0200 	mov.w	r2, #0
 8006ea8:	f04f 0300 	mov.w	r3, #0
 8006eac:	018b      	lsls	r3, r1, #6
 8006eae:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 8006eb2:	0182      	lsls	r2, r0, #6
 8006eb4:	1a12      	subs	r2, r2, r0
 8006eb6:	eb63 0301 	sbc.w	r3, r3, r1
 8006eba:	f04f 0000 	mov.w	r0, #0
 8006ebe:	f04f 0100 	mov.w	r1, #0
 8006ec2:	00d9      	lsls	r1, r3, #3
 8006ec4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006ec8:	00d0      	lsls	r0, r2, #3
 8006eca:	4602      	mov	r2, r0
 8006ecc:	460b      	mov	r3, r1
 8006ece:	1912      	adds	r2, r2, r4
 8006ed0:	eb45 0303 	adc.w	r3, r5, r3
 8006ed4:	f04f 0000 	mov.w	r0, #0
 8006ed8:	f04f 0100 	mov.w	r1, #0
 8006edc:	0299      	lsls	r1, r3, #10
 8006ede:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 8006ee2:	0290      	lsls	r0, r2, #10
 8006ee4:	4602      	mov	r2, r0
 8006ee6:	460b      	mov	r3, r1
 8006ee8:	4610      	mov	r0, r2
 8006eea:	4619      	mov	r1, r3
 8006eec:	687b      	ldr	r3, [r7, #4]
 8006eee:	461a      	mov	r2, r3
 8006ef0:	f04f 0300 	mov.w	r3, #0
 8006ef4:	f7f9 ff3a 	bl	8000d6c <__aeabi_uldivmod>
 8006ef8:	4602      	mov	r2, r0
 8006efa:	460b      	mov	r3, r1
 8006efc:	4613      	mov	r3, r2
 8006efe:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 8006f00:	4b0b      	ldr	r3, [pc, #44]	; (8006f30 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006f02:	685b      	ldr	r3, [r3, #4]
 8006f04:	0c1b      	lsrs	r3, r3, #16
 8006f06:	f003 0303 	and.w	r3, r3, #3
 8006f0a:	3301      	adds	r3, #1
 8006f0c:	005b      	lsls	r3, r3, #1
 8006f0e:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006f10:	68fa      	ldr	r2, [r7, #12]
 8006f12:	683b      	ldr	r3, [r7, #0]
 8006f14:	fbb2 f3f3 	udiv	r3, r2, r3
 8006f18:	60bb      	str	r3, [r7, #8]
      break;
 8006f1a:	e002      	b.n	8006f22 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006f1c:	4b05      	ldr	r3, [pc, #20]	; (8006f34 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006f1e:	60bb      	str	r3, [r7, #8]
      break;
 8006f20:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006f22:	68bb      	ldr	r3, [r7, #8]
}
 8006f24:	4618      	mov	r0, r3
 8006f26:	3710      	adds	r7, #16
 8006f28:	46bd      	mov	sp, r7
 8006f2a:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006f2e:	bf00      	nop
 8006f30:	40023800 	.word	0x40023800
 8006f34:	00f42400 	.word	0x00f42400
 8006f38:	007a1200 	.word	0x007a1200

08006f3c <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006f3c:	b480      	push	{r7}
 8006f3e:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006f40:	4b03      	ldr	r3, [pc, #12]	; (8006f50 <HAL_RCC_GetHCLKFreq+0x14>)
 8006f42:	681b      	ldr	r3, [r3, #0]
}
 8006f44:	4618      	mov	r0, r3
 8006f46:	46bd      	mov	sp, r7
 8006f48:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006f4c:	4770      	bx	lr
 8006f4e:	bf00      	nop
 8006f50:	20000030 	.word	0x20000030

08006f54 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006f54:	b580      	push	{r7, lr}
 8006f56:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 8006f58:	f7ff fff0 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f5c:	4602      	mov	r2, r0
 8006f5e:	4b05      	ldr	r3, [pc, #20]	; (8006f74 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006f60:	689b      	ldr	r3, [r3, #8]
 8006f62:	0a9b      	lsrs	r3, r3, #10
 8006f64:	f003 0307 	and.w	r3, r3, #7
 8006f68:	4903      	ldr	r1, [pc, #12]	; (8006f78 <HAL_RCC_GetPCLK1Freq+0x24>)
 8006f6a:	5ccb      	ldrb	r3, [r1, r3]
 8006f6c:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f70:	4618      	mov	r0, r3
 8006f72:	bd80      	pop	{r7, pc}
 8006f74:	40023800 	.word	0x40023800
 8006f78:	0800a1e8 	.word	0x0800a1e8

08006f7c <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006f7c:	b580      	push	{r7, lr}
 8006f7e:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006f80:	f7ff ffdc 	bl	8006f3c <HAL_RCC_GetHCLKFreq>
 8006f84:	4602      	mov	r2, r0
 8006f86:	4b05      	ldr	r3, [pc, #20]	; (8006f9c <HAL_RCC_GetPCLK2Freq+0x20>)
 8006f88:	689b      	ldr	r3, [r3, #8]
 8006f8a:	0b5b      	lsrs	r3, r3, #13
 8006f8c:	f003 0307 	and.w	r3, r3, #7
 8006f90:	4903      	ldr	r1, [pc, #12]	; (8006fa0 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006f92:	5ccb      	ldrb	r3, [r1, r3]
 8006f94:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006f98:	4618      	mov	r0, r3
 8006f9a:	bd80      	pop	{r7, pc}
 8006f9c:	40023800 	.word	0x40023800
 8006fa0:	0800a1e8 	.word	0x0800a1e8

08006fa4 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006fa4:	b580      	push	{r7, lr}
 8006fa6:	b082      	sub	sp, #8
 8006fa8:	af00      	add	r7, sp, #0
 8006faa:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8006fac:	687b      	ldr	r3, [r7, #4]
 8006fae:	2b00      	cmp	r3, #0
 8006fb0:	d101      	bne.n	8006fb6 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 8006fb2:	2301      	movs	r3, #1
 8006fb4:	e041      	b.n	800703a <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8006fb6:	687b      	ldr	r3, [r7, #4]
 8006fb8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006fbc:	b2db      	uxtb	r3, r3
 8006fbe:	2b00      	cmp	r3, #0
 8006fc0:	d106      	bne.n	8006fd0 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	2200      	movs	r2, #0
 8006fc6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8006fca:	6878      	ldr	r0, [r7, #4]
 8006fcc:	f7fc fb88 	bl	80036e0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2202      	movs	r2, #2
 8006fd4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	681a      	ldr	r2, [r3, #0]
 8006fdc:	687b      	ldr	r3, [r7, #4]
 8006fde:	3304      	adds	r3, #4
 8006fe0:	4619      	mov	r1, r3
 8006fe2:	4610      	mov	r0, r2
 8006fe4:	f000 fdda 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006fe8:	687b      	ldr	r3, [r7, #4]
 8006fea:	2201      	movs	r2, #1
 8006fec:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006ff0:	687b      	ldr	r3, [r7, #4]
 8006ff2:	2201      	movs	r2, #1
 8006ff4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	2201      	movs	r2, #1
 8006ffc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007000:	687b      	ldr	r3, [r7, #4]
 8007002:	2201      	movs	r2, #1
 8007004:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007008:	687b      	ldr	r3, [r7, #4]
 800700a:	2201      	movs	r2, #1
 800700c:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007010:	687b      	ldr	r3, [r7, #4]
 8007012:	2201      	movs	r2, #1
 8007014:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007018:	687b      	ldr	r3, [r7, #4]
 800701a:	2201      	movs	r2, #1
 800701c:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007020:	687b      	ldr	r3, [r7, #4]
 8007022:	2201      	movs	r2, #1
 8007024:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007028:	687b      	ldr	r3, [r7, #4]
 800702a:	2201      	movs	r2, #1
 800702c:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007030:	687b      	ldr	r3, [r7, #4]
 8007032:	2201      	movs	r2, #1
 8007034:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007038:	2300      	movs	r3, #0
}
 800703a:	4618      	mov	r0, r3
 800703c:	3708      	adds	r7, #8
 800703e:	46bd      	mov	sp, r7
 8007040:	bd80      	pop	{r7, pc}
	...

08007044 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8007044:	b480      	push	{r7}
 8007046:	b085      	sub	sp, #20
 8007048:	af00      	add	r7, sp, #0
 800704a:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 800704c:	687b      	ldr	r3, [r7, #4]
 800704e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007052:	b2db      	uxtb	r3, r3
 8007054:	2b01      	cmp	r3, #1
 8007056:	d001      	beq.n	800705c <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 8007058:	2301      	movs	r3, #1
 800705a:	e03c      	b.n	80070d6 <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800705c:	687b      	ldr	r3, [r7, #4]
 800705e:	2202      	movs	r2, #2
 8007060:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007064:	687b      	ldr	r3, [r7, #4]
 8007066:	681b      	ldr	r3, [r3, #0]
 8007068:	4a1e      	ldr	r2, [pc, #120]	; (80070e4 <HAL_TIM_Base_Start+0xa0>)
 800706a:	4293      	cmp	r3, r2
 800706c:	d018      	beq.n	80070a0 <HAL_TIM_Base_Start+0x5c>
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007076:	d013      	beq.n	80070a0 <HAL_TIM_Base_Start+0x5c>
 8007078:	687b      	ldr	r3, [r7, #4]
 800707a:	681b      	ldr	r3, [r3, #0]
 800707c:	4a1a      	ldr	r2, [pc, #104]	; (80070e8 <HAL_TIM_Base_Start+0xa4>)
 800707e:	4293      	cmp	r3, r2
 8007080:	d00e      	beq.n	80070a0 <HAL_TIM_Base_Start+0x5c>
 8007082:	687b      	ldr	r3, [r7, #4]
 8007084:	681b      	ldr	r3, [r3, #0]
 8007086:	4a19      	ldr	r2, [pc, #100]	; (80070ec <HAL_TIM_Base_Start+0xa8>)
 8007088:	4293      	cmp	r3, r2
 800708a:	d009      	beq.n	80070a0 <HAL_TIM_Base_Start+0x5c>
 800708c:	687b      	ldr	r3, [r7, #4]
 800708e:	681b      	ldr	r3, [r3, #0]
 8007090:	4a17      	ldr	r2, [pc, #92]	; (80070f0 <HAL_TIM_Base_Start+0xac>)
 8007092:	4293      	cmp	r3, r2
 8007094:	d004      	beq.n	80070a0 <HAL_TIM_Base_Start+0x5c>
 8007096:	687b      	ldr	r3, [r7, #4]
 8007098:	681b      	ldr	r3, [r3, #0]
 800709a:	4a16      	ldr	r2, [pc, #88]	; (80070f4 <HAL_TIM_Base_Start+0xb0>)
 800709c:	4293      	cmp	r3, r2
 800709e:	d111      	bne.n	80070c4 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80070a0:	687b      	ldr	r3, [r7, #4]
 80070a2:	681b      	ldr	r3, [r3, #0]
 80070a4:	689b      	ldr	r3, [r3, #8]
 80070a6:	f003 0307 	and.w	r3, r3, #7
 80070aa:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070ac:	68fb      	ldr	r3, [r7, #12]
 80070ae:	2b06      	cmp	r3, #6
 80070b0:	d010      	beq.n	80070d4 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80070b2:	687b      	ldr	r3, [r7, #4]
 80070b4:	681b      	ldr	r3, [r3, #0]
 80070b6:	681a      	ldr	r2, [r3, #0]
 80070b8:	687b      	ldr	r3, [r7, #4]
 80070ba:	681b      	ldr	r3, [r3, #0]
 80070bc:	f042 0201 	orr.w	r2, r2, #1
 80070c0:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80070c2:	e007      	b.n	80070d4 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80070c4:	687b      	ldr	r3, [r7, #4]
 80070c6:	681b      	ldr	r3, [r3, #0]
 80070c8:	681a      	ldr	r2, [r3, #0]
 80070ca:	687b      	ldr	r3, [r7, #4]
 80070cc:	681b      	ldr	r3, [r3, #0]
 80070ce:	f042 0201 	orr.w	r2, r2, #1
 80070d2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80070d4:	2300      	movs	r3, #0
}
 80070d6:	4618      	mov	r0, r3
 80070d8:	3714      	adds	r7, #20
 80070da:	46bd      	mov	sp, r7
 80070dc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80070e0:	4770      	bx	lr
 80070e2:	bf00      	nop
 80070e4:	40010000 	.word	0x40010000
 80070e8:	40000400 	.word	0x40000400
 80070ec:	40000800 	.word	0x40000800
 80070f0:	40000c00 	.word	0x40000c00
 80070f4:	40014000 	.word	0x40014000

080070f8 <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80070f8:	b480      	push	{r7}
 80070fa:	b085      	sub	sp, #20
 80070fc:	af00      	add	r7, sp, #0
 80070fe:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007106:	b2db      	uxtb	r3, r3
 8007108:	2b01      	cmp	r3, #1
 800710a:	d001      	beq.n	8007110 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 800710c:	2301      	movs	r3, #1
 800710e:	e044      	b.n	800719a <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007110:	687b      	ldr	r3, [r7, #4]
 8007112:	2202      	movs	r2, #2
 8007114:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 8007118:	687b      	ldr	r3, [r7, #4]
 800711a:	681b      	ldr	r3, [r3, #0]
 800711c:	68da      	ldr	r2, [r3, #12]
 800711e:	687b      	ldr	r3, [r7, #4]
 8007120:	681b      	ldr	r3, [r3, #0]
 8007122:	f042 0201 	orr.w	r2, r2, #1
 8007126:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007128:	687b      	ldr	r3, [r7, #4]
 800712a:	681b      	ldr	r3, [r3, #0]
 800712c:	4a1e      	ldr	r2, [pc, #120]	; (80071a8 <HAL_TIM_Base_Start_IT+0xb0>)
 800712e:	4293      	cmp	r3, r2
 8007130:	d018      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x6c>
 8007132:	687b      	ldr	r3, [r7, #4]
 8007134:	681b      	ldr	r3, [r3, #0]
 8007136:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800713a:	d013      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x6c>
 800713c:	687b      	ldr	r3, [r7, #4]
 800713e:	681b      	ldr	r3, [r3, #0]
 8007140:	4a1a      	ldr	r2, [pc, #104]	; (80071ac <HAL_TIM_Base_Start_IT+0xb4>)
 8007142:	4293      	cmp	r3, r2
 8007144:	d00e      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x6c>
 8007146:	687b      	ldr	r3, [r7, #4]
 8007148:	681b      	ldr	r3, [r3, #0]
 800714a:	4a19      	ldr	r2, [pc, #100]	; (80071b0 <HAL_TIM_Base_Start_IT+0xb8>)
 800714c:	4293      	cmp	r3, r2
 800714e:	d009      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x6c>
 8007150:	687b      	ldr	r3, [r7, #4]
 8007152:	681b      	ldr	r3, [r3, #0]
 8007154:	4a17      	ldr	r2, [pc, #92]	; (80071b4 <HAL_TIM_Base_Start_IT+0xbc>)
 8007156:	4293      	cmp	r3, r2
 8007158:	d004      	beq.n	8007164 <HAL_TIM_Base_Start_IT+0x6c>
 800715a:	687b      	ldr	r3, [r7, #4]
 800715c:	681b      	ldr	r3, [r3, #0]
 800715e:	4a16      	ldr	r2, [pc, #88]	; (80071b8 <HAL_TIM_Base_Start_IT+0xc0>)
 8007160:	4293      	cmp	r3, r2
 8007162:	d111      	bne.n	8007188 <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8007164:	687b      	ldr	r3, [r7, #4]
 8007166:	681b      	ldr	r3, [r3, #0]
 8007168:	689b      	ldr	r3, [r3, #8]
 800716a:	f003 0307 	and.w	r3, r3, #7
 800716e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007170:	68fb      	ldr	r3, [r7, #12]
 8007172:	2b06      	cmp	r3, #6
 8007174:	d010      	beq.n	8007198 <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 8007176:	687b      	ldr	r3, [r7, #4]
 8007178:	681b      	ldr	r3, [r3, #0]
 800717a:	681a      	ldr	r2, [r3, #0]
 800717c:	687b      	ldr	r3, [r7, #4]
 800717e:	681b      	ldr	r3, [r3, #0]
 8007180:	f042 0201 	orr.w	r2, r2, #1
 8007184:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8007186:	e007      	b.n	8007198 <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8007188:	687b      	ldr	r3, [r7, #4]
 800718a:	681b      	ldr	r3, [r3, #0]
 800718c:	681a      	ldr	r2, [r3, #0]
 800718e:	687b      	ldr	r3, [r7, #4]
 8007190:	681b      	ldr	r3, [r3, #0]
 8007192:	f042 0201 	orr.w	r2, r2, #1
 8007196:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8007198:	2300      	movs	r3, #0
}
 800719a:	4618      	mov	r0, r3
 800719c:	3714      	adds	r7, #20
 800719e:	46bd      	mov	sp, r7
 80071a0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80071a4:	4770      	bx	lr
 80071a6:	bf00      	nop
 80071a8:	40010000 	.word	0x40010000
 80071ac:	40000400 	.word	0x40000400
 80071b0:	40000800 	.word	0x40000800
 80071b4:	40000c00 	.word	0x40000c00
 80071b8:	40014000 	.word	0x40014000

080071bc <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80071bc:	b580      	push	{r7, lr}
 80071be:	b082      	sub	sp, #8
 80071c0:	af00      	add	r7, sp, #0
 80071c2:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80071c4:	687b      	ldr	r3, [r7, #4]
 80071c6:	2b00      	cmp	r3, #0
 80071c8:	d101      	bne.n	80071ce <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80071ca:	2301      	movs	r3, #1
 80071cc:	e041      	b.n	8007252 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80071ce:	687b      	ldr	r3, [r7, #4]
 80071d0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80071d4:	b2db      	uxtb	r3, r3
 80071d6:	2b00      	cmp	r3, #0
 80071d8:	d106      	bne.n	80071e8 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	2200      	movs	r2, #0
 80071de:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80071e2:	6878      	ldr	r0, [r7, #4]
 80071e4:	f000 f839 	bl	800725a <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80071e8:	687b      	ldr	r3, [r7, #4]
 80071ea:	2202      	movs	r2, #2
 80071ec:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80071f0:	687b      	ldr	r3, [r7, #4]
 80071f2:	681a      	ldr	r2, [r3, #0]
 80071f4:	687b      	ldr	r3, [r7, #4]
 80071f6:	3304      	adds	r3, #4
 80071f8:	4619      	mov	r1, r3
 80071fa:	4610      	mov	r0, r2
 80071fc:	f000 fcce 	bl	8007b9c <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8007200:	687b      	ldr	r3, [r7, #4]
 8007202:	2201      	movs	r2, #1
 8007204:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007208:	687b      	ldr	r3, [r7, #4]
 800720a:	2201      	movs	r2, #1
 800720c:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8007210:	687b      	ldr	r3, [r7, #4]
 8007212:	2201      	movs	r2, #1
 8007214:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007218:	687b      	ldr	r3, [r7, #4]
 800721a:	2201      	movs	r2, #1
 800721c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007220:	687b      	ldr	r3, [r7, #4]
 8007222:	2201      	movs	r2, #1
 8007224:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8007228:	687b      	ldr	r3, [r7, #4]
 800722a:	2201      	movs	r2, #1
 800722c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8007230:	687b      	ldr	r3, [r7, #4]
 8007232:	2201      	movs	r2, #1
 8007234:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007238:	687b      	ldr	r3, [r7, #4]
 800723a:	2201      	movs	r2, #1
 800723c:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8007240:	687b      	ldr	r3, [r7, #4]
 8007242:	2201      	movs	r2, #1
 8007244:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8007248:	687b      	ldr	r3, [r7, #4]
 800724a:	2201      	movs	r2, #1
 800724c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007250:	2300      	movs	r3, #0
}
 8007252:	4618      	mov	r0, r3
 8007254:	3708      	adds	r7, #8
 8007256:	46bd      	mov	sp, r7
 8007258:	bd80      	pop	{r7, pc}

0800725a <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800725a:	b480      	push	{r7}
 800725c:	b083      	sub	sp, #12
 800725e:	af00      	add	r7, sp, #0
 8007260:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8007262:	bf00      	nop
 8007264:	370c      	adds	r7, #12
 8007266:	46bd      	mov	sp, r7
 8007268:	f85d 7b04 	ldr.w	r7, [sp], #4
 800726c:	4770      	bx	lr
	...

08007270 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8007270:	b580      	push	{r7, lr}
 8007272:	b084      	sub	sp, #16
 8007274:	af00      	add	r7, sp, #0
 8007276:	6078      	str	r0, [r7, #4]
 8007278:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800727a:	683b      	ldr	r3, [r7, #0]
 800727c:	2b00      	cmp	r3, #0
 800727e:	d109      	bne.n	8007294 <HAL_TIM_PWM_Start+0x24>
 8007280:	687b      	ldr	r3, [r7, #4]
 8007282:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007286:	b2db      	uxtb	r3, r3
 8007288:	2b01      	cmp	r3, #1
 800728a:	bf14      	ite	ne
 800728c:	2301      	movne	r3, #1
 800728e:	2300      	moveq	r3, #0
 8007290:	b2db      	uxtb	r3, r3
 8007292:	e022      	b.n	80072da <HAL_TIM_PWM_Start+0x6a>
 8007294:	683b      	ldr	r3, [r7, #0]
 8007296:	2b04      	cmp	r3, #4
 8007298:	d109      	bne.n	80072ae <HAL_TIM_PWM_Start+0x3e>
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 80072a0:	b2db      	uxtb	r3, r3
 80072a2:	2b01      	cmp	r3, #1
 80072a4:	bf14      	ite	ne
 80072a6:	2301      	movne	r3, #1
 80072a8:	2300      	moveq	r3, #0
 80072aa:	b2db      	uxtb	r3, r3
 80072ac:	e015      	b.n	80072da <HAL_TIM_PWM_Start+0x6a>
 80072ae:	683b      	ldr	r3, [r7, #0]
 80072b0:	2b08      	cmp	r3, #8
 80072b2:	d109      	bne.n	80072c8 <HAL_TIM_PWM_Start+0x58>
 80072b4:	687b      	ldr	r3, [r7, #4]
 80072b6:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80072ba:	b2db      	uxtb	r3, r3
 80072bc:	2b01      	cmp	r3, #1
 80072be:	bf14      	ite	ne
 80072c0:	2301      	movne	r3, #1
 80072c2:	2300      	moveq	r3, #0
 80072c4:	b2db      	uxtb	r3, r3
 80072c6:	e008      	b.n	80072da <HAL_TIM_PWM_Start+0x6a>
 80072c8:	687b      	ldr	r3, [r7, #4]
 80072ca:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80072ce:	b2db      	uxtb	r3, r3
 80072d0:	2b01      	cmp	r3, #1
 80072d2:	bf14      	ite	ne
 80072d4:	2301      	movne	r3, #1
 80072d6:	2300      	moveq	r3, #0
 80072d8:	b2db      	uxtb	r3, r3
 80072da:	2b00      	cmp	r3, #0
 80072dc:	d001      	beq.n	80072e2 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80072de:	2301      	movs	r3, #1
 80072e0:	e068      	b.n	80073b4 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80072e2:	683b      	ldr	r3, [r7, #0]
 80072e4:	2b00      	cmp	r3, #0
 80072e6:	d104      	bne.n	80072f2 <HAL_TIM_PWM_Start+0x82>
 80072e8:	687b      	ldr	r3, [r7, #4]
 80072ea:	2202      	movs	r2, #2
 80072ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80072f0:	e013      	b.n	800731a <HAL_TIM_PWM_Start+0xaa>
 80072f2:	683b      	ldr	r3, [r7, #0]
 80072f4:	2b04      	cmp	r3, #4
 80072f6:	d104      	bne.n	8007302 <HAL_TIM_PWM_Start+0x92>
 80072f8:	687b      	ldr	r3, [r7, #4]
 80072fa:	2202      	movs	r2, #2
 80072fc:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 8007300:	e00b      	b.n	800731a <HAL_TIM_PWM_Start+0xaa>
 8007302:	683b      	ldr	r3, [r7, #0]
 8007304:	2b08      	cmp	r3, #8
 8007306:	d104      	bne.n	8007312 <HAL_TIM_PWM_Start+0xa2>
 8007308:	687b      	ldr	r3, [r7, #4]
 800730a:	2202      	movs	r2, #2
 800730c:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8007310:	e003      	b.n	800731a <HAL_TIM_PWM_Start+0xaa>
 8007312:	687b      	ldr	r3, [r7, #4]
 8007314:	2202      	movs	r2, #2
 8007316:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800731a:	687b      	ldr	r3, [r7, #4]
 800731c:	681b      	ldr	r3, [r3, #0]
 800731e:	2201      	movs	r2, #1
 8007320:	6839      	ldr	r1, [r7, #0]
 8007322:	4618      	mov	r0, r3
 8007324:	f000 fee0 	bl	80080e8 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8007328:	687b      	ldr	r3, [r7, #4]
 800732a:	681b      	ldr	r3, [r3, #0]
 800732c:	4a23      	ldr	r2, [pc, #140]	; (80073bc <HAL_TIM_PWM_Start+0x14c>)
 800732e:	4293      	cmp	r3, r2
 8007330:	d107      	bne.n	8007342 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	681b      	ldr	r3, [r3, #0]
 8007336:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	681b      	ldr	r3, [r3, #0]
 800733c:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8007340:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	681b      	ldr	r3, [r3, #0]
 8007346:	4a1d      	ldr	r2, [pc, #116]	; (80073bc <HAL_TIM_PWM_Start+0x14c>)
 8007348:	4293      	cmp	r3, r2
 800734a:	d018      	beq.n	800737e <HAL_TIM_PWM_Start+0x10e>
 800734c:	687b      	ldr	r3, [r7, #4]
 800734e:	681b      	ldr	r3, [r3, #0]
 8007350:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007354:	d013      	beq.n	800737e <HAL_TIM_PWM_Start+0x10e>
 8007356:	687b      	ldr	r3, [r7, #4]
 8007358:	681b      	ldr	r3, [r3, #0]
 800735a:	4a19      	ldr	r2, [pc, #100]	; (80073c0 <HAL_TIM_PWM_Start+0x150>)
 800735c:	4293      	cmp	r3, r2
 800735e:	d00e      	beq.n	800737e <HAL_TIM_PWM_Start+0x10e>
 8007360:	687b      	ldr	r3, [r7, #4]
 8007362:	681b      	ldr	r3, [r3, #0]
 8007364:	4a17      	ldr	r2, [pc, #92]	; (80073c4 <HAL_TIM_PWM_Start+0x154>)
 8007366:	4293      	cmp	r3, r2
 8007368:	d009      	beq.n	800737e <HAL_TIM_PWM_Start+0x10e>
 800736a:	687b      	ldr	r3, [r7, #4]
 800736c:	681b      	ldr	r3, [r3, #0]
 800736e:	4a16      	ldr	r2, [pc, #88]	; (80073c8 <HAL_TIM_PWM_Start+0x158>)
 8007370:	4293      	cmp	r3, r2
 8007372:	d004      	beq.n	800737e <HAL_TIM_PWM_Start+0x10e>
 8007374:	687b      	ldr	r3, [r7, #4]
 8007376:	681b      	ldr	r3, [r3, #0]
 8007378:	4a14      	ldr	r2, [pc, #80]	; (80073cc <HAL_TIM_PWM_Start+0x15c>)
 800737a:	4293      	cmp	r3, r2
 800737c:	d111      	bne.n	80073a2 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	681b      	ldr	r3, [r3, #0]
 8007382:	689b      	ldr	r3, [r3, #8]
 8007384:	f003 0307 	and.w	r3, r3, #7
 8007388:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800738a:	68fb      	ldr	r3, [r7, #12]
 800738c:	2b06      	cmp	r3, #6
 800738e:	d010      	beq.n	80073b2 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8007390:	687b      	ldr	r3, [r7, #4]
 8007392:	681b      	ldr	r3, [r3, #0]
 8007394:	681a      	ldr	r2, [r3, #0]
 8007396:	687b      	ldr	r3, [r7, #4]
 8007398:	681b      	ldr	r3, [r3, #0]
 800739a:	f042 0201 	orr.w	r2, r2, #1
 800739e:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80073a0:	e007      	b.n	80073b2 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80073a2:	687b      	ldr	r3, [r7, #4]
 80073a4:	681b      	ldr	r3, [r3, #0]
 80073a6:	681a      	ldr	r2, [r3, #0]
 80073a8:	687b      	ldr	r3, [r7, #4]
 80073aa:	681b      	ldr	r3, [r3, #0]
 80073ac:	f042 0201 	orr.w	r2, r2, #1
 80073b0:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80073b2:	2300      	movs	r3, #0
}
 80073b4:	4618      	mov	r0, r3
 80073b6:	3710      	adds	r7, #16
 80073b8:	46bd      	mov	sp, r7
 80073ba:	bd80      	pop	{r7, pc}
 80073bc:	40010000 	.word	0x40010000
 80073c0:	40000400 	.word	0x40000400
 80073c4:	40000800 	.word	0x40000800
 80073c8:	40000c00 	.word	0x40000c00
 80073cc:	40014000 	.word	0x40014000

080073d0 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80073d0:	b580      	push	{r7, lr}
 80073d2:	b086      	sub	sp, #24
 80073d4:	af00      	add	r7, sp, #0
 80073d6:	6078      	str	r0, [r7, #4]
 80073d8:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80073da:	687b      	ldr	r3, [r7, #4]
 80073dc:	2b00      	cmp	r3, #0
 80073de:	d101      	bne.n	80073e4 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80073e0:	2301      	movs	r3, #1
 80073e2:	e097      	b.n	8007514 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80073e4:	687b      	ldr	r3, [r7, #4]
 80073e6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80073ea:	b2db      	uxtb	r3, r3
 80073ec:	2b00      	cmp	r3, #0
 80073ee:	d106      	bne.n	80073fe <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80073f0:	687b      	ldr	r3, [r7, #4]
 80073f2:	2200      	movs	r2, #0
 80073f4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80073f8:	6878      	ldr	r0, [r7, #4]
 80073fa:	f7fc f929 	bl	8003650 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80073fe:	687b      	ldr	r3, [r7, #4]
 8007400:	2202      	movs	r2, #2
 8007402:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8007406:	687b      	ldr	r3, [r7, #4]
 8007408:	681b      	ldr	r3, [r3, #0]
 800740a:	689b      	ldr	r3, [r3, #8]
 800740c:	687a      	ldr	r2, [r7, #4]
 800740e:	6812      	ldr	r2, [r2, #0]
 8007410:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007414:	f023 0307 	bic.w	r3, r3, #7
 8007418:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 800741a:	687b      	ldr	r3, [r7, #4]
 800741c:	681a      	ldr	r2, [r3, #0]
 800741e:	687b      	ldr	r3, [r7, #4]
 8007420:	3304      	adds	r3, #4
 8007422:	4619      	mov	r1, r3
 8007424:	4610      	mov	r0, r2
 8007426:	f000 fbb9 	bl	8007b9c <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 800742a:	687b      	ldr	r3, [r7, #4]
 800742c:	681b      	ldr	r3, [r3, #0]
 800742e:	689b      	ldr	r3, [r3, #8]
 8007430:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8007432:	687b      	ldr	r3, [r7, #4]
 8007434:	681b      	ldr	r3, [r3, #0]
 8007436:	699b      	ldr	r3, [r3, #24]
 8007438:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 800743a:	687b      	ldr	r3, [r7, #4]
 800743c:	681b      	ldr	r3, [r3, #0]
 800743e:	6a1b      	ldr	r3, [r3, #32]
 8007440:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8007442:	683b      	ldr	r3, [r7, #0]
 8007444:	681b      	ldr	r3, [r3, #0]
 8007446:	697a      	ldr	r2, [r7, #20]
 8007448:	4313      	orrs	r3, r2
 800744a:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 800744c:	693b      	ldr	r3, [r7, #16]
 800744e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007452:	f023 0303 	bic.w	r3, r3, #3
 8007456:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8007458:	683b      	ldr	r3, [r7, #0]
 800745a:	689a      	ldr	r2, [r3, #8]
 800745c:	683b      	ldr	r3, [r7, #0]
 800745e:	699b      	ldr	r3, [r3, #24]
 8007460:	021b      	lsls	r3, r3, #8
 8007462:	4313      	orrs	r3, r2
 8007464:	693a      	ldr	r2, [r7, #16]
 8007466:	4313      	orrs	r3, r2
 8007468:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 800746a:	693b      	ldr	r3, [r7, #16]
 800746c:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8007470:	f023 030c 	bic.w	r3, r3, #12
 8007474:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8007476:	693b      	ldr	r3, [r7, #16]
 8007478:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800747c:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007480:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8007482:	683b      	ldr	r3, [r7, #0]
 8007484:	68da      	ldr	r2, [r3, #12]
 8007486:	683b      	ldr	r3, [r7, #0]
 8007488:	69db      	ldr	r3, [r3, #28]
 800748a:	021b      	lsls	r3, r3, #8
 800748c:	4313      	orrs	r3, r2
 800748e:	693a      	ldr	r2, [r7, #16]
 8007490:	4313      	orrs	r3, r2
 8007492:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8007494:	683b      	ldr	r3, [r7, #0]
 8007496:	691b      	ldr	r3, [r3, #16]
 8007498:	011a      	lsls	r2, r3, #4
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	6a1b      	ldr	r3, [r3, #32]
 800749e:	031b      	lsls	r3, r3, #12
 80074a0:	4313      	orrs	r3, r2
 80074a2:	693a      	ldr	r2, [r7, #16]
 80074a4:	4313      	orrs	r3, r2
 80074a6:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 80074a8:	68fb      	ldr	r3, [r7, #12]
 80074aa:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 80074ae:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 80074b0:	68fb      	ldr	r3, [r7, #12]
 80074b2:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 80074b6:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 80074b8:	683b      	ldr	r3, [r7, #0]
 80074ba:	685a      	ldr	r2, [r3, #4]
 80074bc:	683b      	ldr	r3, [r7, #0]
 80074be:	695b      	ldr	r3, [r3, #20]
 80074c0:	011b      	lsls	r3, r3, #4
 80074c2:	4313      	orrs	r3, r2
 80074c4:	68fa      	ldr	r2, [r7, #12]
 80074c6:	4313      	orrs	r3, r2
 80074c8:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 80074ca:	687b      	ldr	r3, [r7, #4]
 80074cc:	681b      	ldr	r3, [r3, #0]
 80074ce:	697a      	ldr	r2, [r7, #20]
 80074d0:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 80074d2:	687b      	ldr	r3, [r7, #4]
 80074d4:	681b      	ldr	r3, [r3, #0]
 80074d6:	693a      	ldr	r2, [r7, #16]
 80074d8:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 80074da:	687b      	ldr	r3, [r7, #4]
 80074dc:	681b      	ldr	r3, [r3, #0]
 80074de:	68fa      	ldr	r2, [r7, #12]
 80074e0:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80074e2:	687b      	ldr	r3, [r7, #4]
 80074e4:	2201      	movs	r2, #1
 80074e6:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074ea:	687b      	ldr	r3, [r7, #4]
 80074ec:	2201      	movs	r2, #1
 80074ee:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	2201      	movs	r2, #1
 80074f6:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 80074fa:	687b      	ldr	r3, [r7, #4]
 80074fc:	2201      	movs	r2, #1
 80074fe:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8007502:	687b      	ldr	r3, [r7, #4]
 8007504:	2201      	movs	r2, #1
 8007506:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800750a:	687b      	ldr	r3, [r7, #4]
 800750c:	2201      	movs	r2, #1
 800750e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8007512:	2300      	movs	r3, #0
}
 8007514:	4618      	mov	r0, r3
 8007516:	3718      	adds	r7, #24
 8007518:	46bd      	mov	sp, r7
 800751a:	bd80      	pop	{r7, pc}

0800751c <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 800751c:	b580      	push	{r7, lr}
 800751e:	b084      	sub	sp, #16
 8007520:	af00      	add	r7, sp, #0
 8007522:	6078      	str	r0, [r7, #4]
 8007524:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8007526:	687b      	ldr	r3, [r7, #4]
 8007528:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800752c:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 800752e:	687b      	ldr	r3, [r7, #4]
 8007530:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8007534:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8007536:	687b      	ldr	r3, [r7, #4]
 8007538:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 800753c:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 800753e:	687b      	ldr	r3, [r7, #4]
 8007540:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8007544:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8007546:	683b      	ldr	r3, [r7, #0]
 8007548:	2b00      	cmp	r3, #0
 800754a:	d110      	bne.n	800756e <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 800754c:	7bfb      	ldrb	r3, [r7, #15]
 800754e:	2b01      	cmp	r3, #1
 8007550:	d102      	bne.n	8007558 <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8007552:	7b7b      	ldrb	r3, [r7, #13]
 8007554:	2b01      	cmp	r3, #1
 8007556:	d001      	beq.n	800755c <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8007558:	2301      	movs	r3, #1
 800755a:	e069      	b.n	8007630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 800755c:	687b      	ldr	r3, [r7, #4]
 800755e:	2202      	movs	r2, #2
 8007560:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8007564:	687b      	ldr	r3, [r7, #4]
 8007566:	2202      	movs	r2, #2
 8007568:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800756c:	e031      	b.n	80075d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 800756e:	683b      	ldr	r3, [r7, #0]
 8007570:	2b04      	cmp	r3, #4
 8007572:	d110      	bne.n	8007596 <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8007574:	7bbb      	ldrb	r3, [r7, #14]
 8007576:	2b01      	cmp	r3, #1
 8007578:	d102      	bne.n	8007580 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 800757a:	7b3b      	ldrb	r3, [r7, #12]
 800757c:	2b01      	cmp	r3, #1
 800757e:	d001      	beq.n	8007584 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8007580:	2301      	movs	r3, #1
 8007582:	e055      	b.n	8007630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8007584:	687b      	ldr	r3, [r7, #4]
 8007586:	2202      	movs	r2, #2
 8007588:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	2202      	movs	r2, #2
 8007590:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8007594:	e01d      	b.n	80075d2 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8007596:	7bfb      	ldrb	r3, [r7, #15]
 8007598:	2b01      	cmp	r3, #1
 800759a:	d108      	bne.n	80075ae <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 800759c:	7bbb      	ldrb	r3, [r7, #14]
 800759e:	2b01      	cmp	r3, #1
 80075a0:	d105      	bne.n	80075ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 80075a2:	7b7b      	ldrb	r3, [r7, #13]
 80075a4:	2b01      	cmp	r3, #1
 80075a6:	d102      	bne.n	80075ae <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 80075a8:	7b3b      	ldrb	r3, [r7, #12]
 80075aa:	2b01      	cmp	r3, #1
 80075ac:	d001      	beq.n	80075b2 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 80075ae:	2301      	movs	r3, #1
 80075b0:	e03e      	b.n	8007630 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075b2:	687b      	ldr	r3, [r7, #4]
 80075b4:	2202      	movs	r2, #2
 80075b6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ba:	687b      	ldr	r3, [r7, #4]
 80075bc:	2202      	movs	r2, #2
 80075be:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 80075c2:	687b      	ldr	r3, [r7, #4]
 80075c4:	2202      	movs	r2, #2
 80075c6:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 80075ca:	687b      	ldr	r3, [r7, #4]
 80075cc:	2202      	movs	r2, #2
 80075ce:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 80075d2:	683b      	ldr	r3, [r7, #0]
 80075d4:	2b00      	cmp	r3, #0
 80075d6:	d003      	beq.n	80075e0 <HAL_TIM_Encoder_Start+0xc4>
 80075d8:	683b      	ldr	r3, [r7, #0]
 80075da:	2b04      	cmp	r3, #4
 80075dc:	d008      	beq.n	80075f0 <HAL_TIM_Encoder_Start+0xd4>
 80075de:	e00f      	b.n	8007600 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 80075e0:	687b      	ldr	r3, [r7, #4]
 80075e2:	681b      	ldr	r3, [r3, #0]
 80075e4:	2201      	movs	r2, #1
 80075e6:	2100      	movs	r1, #0
 80075e8:	4618      	mov	r0, r3
 80075ea:	f000 fd7d 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 80075ee:	e016      	b.n	800761e <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 80075f0:	687b      	ldr	r3, [r7, #4]
 80075f2:	681b      	ldr	r3, [r3, #0]
 80075f4:	2201      	movs	r2, #1
 80075f6:	2104      	movs	r1, #4
 80075f8:	4618      	mov	r0, r3
 80075fa:	f000 fd75 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 80075fe:	e00e      	b.n	800761e <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8007600:	687b      	ldr	r3, [r7, #4]
 8007602:	681b      	ldr	r3, [r3, #0]
 8007604:	2201      	movs	r2, #1
 8007606:	2100      	movs	r1, #0
 8007608:	4618      	mov	r0, r3
 800760a:	f000 fd6d 	bl	80080e8 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 800760e:	687b      	ldr	r3, [r7, #4]
 8007610:	681b      	ldr	r3, [r3, #0]
 8007612:	2201      	movs	r2, #1
 8007614:	2104      	movs	r1, #4
 8007616:	4618      	mov	r0, r3
 8007618:	f000 fd66 	bl	80080e8 <TIM_CCxChannelCmd>
      break;
 800761c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 800761e:	687b      	ldr	r3, [r7, #4]
 8007620:	681b      	ldr	r3, [r3, #0]
 8007622:	681a      	ldr	r2, [r3, #0]
 8007624:	687b      	ldr	r3, [r7, #4]
 8007626:	681b      	ldr	r3, [r3, #0]
 8007628:	f042 0201 	orr.w	r2, r2, #1
 800762c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 800762e:	2300      	movs	r3, #0
}
 8007630:	4618      	mov	r0, r3
 8007632:	3710      	adds	r7, #16
 8007634:	46bd      	mov	sp, r7
 8007636:	bd80      	pop	{r7, pc}

08007638 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8007638:	b580      	push	{r7, lr}
 800763a:	b082      	sub	sp, #8
 800763c:	af00      	add	r7, sp, #0
 800763e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8007640:	687b      	ldr	r3, [r7, #4]
 8007642:	681b      	ldr	r3, [r3, #0]
 8007644:	691b      	ldr	r3, [r3, #16]
 8007646:	f003 0302 	and.w	r3, r3, #2
 800764a:	2b02      	cmp	r3, #2
 800764c:	d122      	bne.n	8007694 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 800764e:	687b      	ldr	r3, [r7, #4]
 8007650:	681b      	ldr	r3, [r3, #0]
 8007652:	68db      	ldr	r3, [r3, #12]
 8007654:	f003 0302 	and.w	r3, r3, #2
 8007658:	2b02      	cmp	r3, #2
 800765a:	d11b      	bne.n	8007694 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 800765c:	687b      	ldr	r3, [r7, #4]
 800765e:	681b      	ldr	r3, [r3, #0]
 8007660:	f06f 0202 	mvn.w	r2, #2
 8007664:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8007666:	687b      	ldr	r3, [r7, #4]
 8007668:	2201      	movs	r2, #1
 800766a:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 800766c:	687b      	ldr	r3, [r7, #4]
 800766e:	681b      	ldr	r3, [r3, #0]
 8007670:	699b      	ldr	r3, [r3, #24]
 8007672:	f003 0303 	and.w	r3, r3, #3
 8007676:	2b00      	cmp	r3, #0
 8007678:	d003      	beq.n	8007682 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 800767a:	6878      	ldr	r0, [r7, #4]
 800767c:	f000 fa70 	bl	8007b60 <HAL_TIM_IC_CaptureCallback>
 8007680:	e005      	b.n	800768e <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8007682:	6878      	ldr	r0, [r7, #4]
 8007684:	f000 fa62 	bl	8007b4c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007688:	6878      	ldr	r0, [r7, #4]
 800768a:	f000 fa73 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800768e:	687b      	ldr	r3, [r7, #4]
 8007690:	2200      	movs	r2, #0
 8007692:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8007694:	687b      	ldr	r3, [r7, #4]
 8007696:	681b      	ldr	r3, [r3, #0]
 8007698:	691b      	ldr	r3, [r3, #16]
 800769a:	f003 0304 	and.w	r3, r3, #4
 800769e:	2b04      	cmp	r3, #4
 80076a0:	d122      	bne.n	80076e8 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 80076a2:	687b      	ldr	r3, [r7, #4]
 80076a4:	681b      	ldr	r3, [r3, #0]
 80076a6:	68db      	ldr	r3, [r3, #12]
 80076a8:	f003 0304 	and.w	r3, r3, #4
 80076ac:	2b04      	cmp	r3, #4
 80076ae:	d11b      	bne.n	80076e8 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 80076b0:	687b      	ldr	r3, [r7, #4]
 80076b2:	681b      	ldr	r3, [r3, #0]
 80076b4:	f06f 0204 	mvn.w	r2, #4
 80076b8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 80076ba:	687b      	ldr	r3, [r7, #4]
 80076bc:	2202      	movs	r2, #2
 80076be:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 80076c0:	687b      	ldr	r3, [r7, #4]
 80076c2:	681b      	ldr	r3, [r3, #0]
 80076c4:	699b      	ldr	r3, [r3, #24]
 80076c6:	f403 7340 	and.w	r3, r3, #768	; 0x300
 80076ca:	2b00      	cmp	r3, #0
 80076cc:	d003      	beq.n	80076d6 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 80076ce:	6878      	ldr	r0, [r7, #4]
 80076d0:	f000 fa46 	bl	8007b60 <HAL_TIM_IC_CaptureCallback>
 80076d4:	e005      	b.n	80076e2 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 80076d6:	6878      	ldr	r0, [r7, #4]
 80076d8:	f000 fa38 	bl	8007b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 80076dc:	6878      	ldr	r0, [r7, #4]
 80076de:	f000 fa49 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 80076e2:	687b      	ldr	r3, [r7, #4]
 80076e4:	2200      	movs	r2, #0
 80076e6:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 80076e8:	687b      	ldr	r3, [r7, #4]
 80076ea:	681b      	ldr	r3, [r3, #0]
 80076ec:	691b      	ldr	r3, [r3, #16]
 80076ee:	f003 0308 	and.w	r3, r3, #8
 80076f2:	2b08      	cmp	r3, #8
 80076f4:	d122      	bne.n	800773c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 80076f6:	687b      	ldr	r3, [r7, #4]
 80076f8:	681b      	ldr	r3, [r3, #0]
 80076fa:	68db      	ldr	r3, [r3, #12]
 80076fc:	f003 0308 	and.w	r3, r3, #8
 8007700:	2b08      	cmp	r3, #8
 8007702:	d11b      	bne.n	800773c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8007704:	687b      	ldr	r3, [r7, #4]
 8007706:	681b      	ldr	r3, [r3, #0]
 8007708:	f06f 0208 	mvn.w	r2, #8
 800770c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 800770e:	687b      	ldr	r3, [r7, #4]
 8007710:	2204      	movs	r2, #4
 8007712:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8007714:	687b      	ldr	r3, [r7, #4]
 8007716:	681b      	ldr	r3, [r3, #0]
 8007718:	69db      	ldr	r3, [r3, #28]
 800771a:	f003 0303 	and.w	r3, r3, #3
 800771e:	2b00      	cmp	r3, #0
 8007720:	d003      	beq.n	800772a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007722:	6878      	ldr	r0, [r7, #4]
 8007724:	f000 fa1c 	bl	8007b60 <HAL_TIM_IC_CaptureCallback>
 8007728:	e005      	b.n	8007736 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800772a:	6878      	ldr	r0, [r7, #4]
 800772c:	f000 fa0e 	bl	8007b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007730:	6878      	ldr	r0, [r7, #4]
 8007732:	f000 fa1f 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8007736:	687b      	ldr	r3, [r7, #4]
 8007738:	2200      	movs	r2, #0
 800773a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 800773c:	687b      	ldr	r3, [r7, #4]
 800773e:	681b      	ldr	r3, [r3, #0]
 8007740:	691b      	ldr	r3, [r3, #16]
 8007742:	f003 0310 	and.w	r3, r3, #16
 8007746:	2b10      	cmp	r3, #16
 8007748:	d122      	bne.n	8007790 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 800774a:	687b      	ldr	r3, [r7, #4]
 800774c:	681b      	ldr	r3, [r3, #0]
 800774e:	68db      	ldr	r3, [r3, #12]
 8007750:	f003 0310 	and.w	r3, r3, #16
 8007754:	2b10      	cmp	r3, #16
 8007756:	d11b      	bne.n	8007790 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	f06f 0210 	mvn.w	r2, #16
 8007760:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8007762:	687b      	ldr	r3, [r7, #4]
 8007764:	2208      	movs	r2, #8
 8007766:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8007768:	687b      	ldr	r3, [r7, #4]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	69db      	ldr	r3, [r3, #28]
 800776e:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8007772:	2b00      	cmp	r3, #0
 8007774:	d003      	beq.n	800777e <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8007776:	6878      	ldr	r0, [r7, #4]
 8007778:	f000 f9f2 	bl	8007b60 <HAL_TIM_IC_CaptureCallback>
 800777c:	e005      	b.n	800778a <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 800777e:	6878      	ldr	r0, [r7, #4]
 8007780:	f000 f9e4 	bl	8007b4c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8007784:	6878      	ldr	r0, [r7, #4]
 8007786:	f000 f9f5 	bl	8007b74 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 800778a:	687b      	ldr	r3, [r7, #4]
 800778c:	2200      	movs	r2, #0
 800778e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8007790:	687b      	ldr	r3, [r7, #4]
 8007792:	681b      	ldr	r3, [r3, #0]
 8007794:	691b      	ldr	r3, [r3, #16]
 8007796:	f003 0301 	and.w	r3, r3, #1
 800779a:	2b01      	cmp	r3, #1
 800779c:	d10e      	bne.n	80077bc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 800779e:	687b      	ldr	r3, [r7, #4]
 80077a0:	681b      	ldr	r3, [r3, #0]
 80077a2:	68db      	ldr	r3, [r3, #12]
 80077a4:	f003 0301 	and.w	r3, r3, #1
 80077a8:	2b01      	cmp	r3, #1
 80077aa:	d107      	bne.n	80077bc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	f06f 0201 	mvn.w	r2, #1
 80077b4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 80077b6:	6878      	ldr	r0, [r7, #4]
 80077b8:	f7fb fe8e 	bl	80034d8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 80077bc:	687b      	ldr	r3, [r7, #4]
 80077be:	681b      	ldr	r3, [r3, #0]
 80077c0:	691b      	ldr	r3, [r3, #16]
 80077c2:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077c6:	2b80      	cmp	r3, #128	; 0x80
 80077c8:	d10e      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 80077ca:	687b      	ldr	r3, [r7, #4]
 80077cc:	681b      	ldr	r3, [r3, #0]
 80077ce:	68db      	ldr	r3, [r3, #12]
 80077d0:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80077d4:	2b80      	cmp	r3, #128	; 0x80
 80077d6:	d107      	bne.n	80077e8 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	681b      	ldr	r3, [r3, #0]
 80077dc:	f06f 0280 	mvn.w	r2, #128	; 0x80
 80077e0:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 80077e2:	6878      	ldr	r0, [r7, #4]
 80077e4:	f000 fd1e 	bl	8008224 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 80077e8:	687b      	ldr	r3, [r7, #4]
 80077ea:	681b      	ldr	r3, [r3, #0]
 80077ec:	691b      	ldr	r3, [r3, #16]
 80077ee:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80077f2:	2b40      	cmp	r3, #64	; 0x40
 80077f4:	d10e      	bne.n	8007814 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 80077f6:	687b      	ldr	r3, [r7, #4]
 80077f8:	681b      	ldr	r3, [r3, #0]
 80077fa:	68db      	ldr	r3, [r3, #12]
 80077fc:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007800:	2b40      	cmp	r3, #64	; 0x40
 8007802:	d107      	bne.n	8007814 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8007804:	687b      	ldr	r3, [r7, #4]
 8007806:	681b      	ldr	r3, [r3, #0]
 8007808:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800780c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 800780e:	6878      	ldr	r0, [r7, #4]
 8007810:	f000 f9ba 	bl	8007b88 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8007814:	687b      	ldr	r3, [r7, #4]
 8007816:	681b      	ldr	r3, [r3, #0]
 8007818:	691b      	ldr	r3, [r3, #16]
 800781a:	f003 0320 	and.w	r3, r3, #32
 800781e:	2b20      	cmp	r3, #32
 8007820:	d10e      	bne.n	8007840 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8007822:	687b      	ldr	r3, [r7, #4]
 8007824:	681b      	ldr	r3, [r3, #0]
 8007826:	68db      	ldr	r3, [r3, #12]
 8007828:	f003 0320 	and.w	r3, r3, #32
 800782c:	2b20      	cmp	r3, #32
 800782e:	d107      	bne.n	8007840 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8007830:	687b      	ldr	r3, [r7, #4]
 8007832:	681b      	ldr	r3, [r3, #0]
 8007834:	f06f 0220 	mvn.w	r2, #32
 8007838:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 800783a:	6878      	ldr	r0, [r7, #4]
 800783c:	f000 fce8 	bl	8008210 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8007840:	bf00      	nop
 8007842:	3708      	adds	r7, #8
 8007844:	46bd      	mov	sp, r7
 8007846:	bd80      	pop	{r7, pc}

08007848 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8007848:	b580      	push	{r7, lr}
 800784a:	b084      	sub	sp, #16
 800784c:	af00      	add	r7, sp, #0
 800784e:	60f8      	str	r0, [r7, #12]
 8007850:	60b9      	str	r1, [r7, #8]
 8007852:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8007854:	68fb      	ldr	r3, [r7, #12]
 8007856:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 800785a:	2b01      	cmp	r3, #1
 800785c:	d101      	bne.n	8007862 <HAL_TIM_PWM_ConfigChannel+0x1a>
 800785e:	2302      	movs	r3, #2
 8007860:	e0ac      	b.n	80079bc <HAL_TIM_PWM_ConfigChannel+0x174>
 8007862:	68fb      	ldr	r3, [r7, #12]
 8007864:	2201      	movs	r2, #1
 8007866:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 800786a:	687b      	ldr	r3, [r7, #4]
 800786c:	2b0c      	cmp	r3, #12
 800786e:	f200 809f 	bhi.w	80079b0 <HAL_TIM_PWM_ConfigChannel+0x168>
 8007872:	a201      	add	r2, pc, #4	; (adr r2, 8007878 <HAL_TIM_PWM_ConfigChannel+0x30>)
 8007874:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8007878:	080078ad 	.word	0x080078ad
 800787c:	080079b1 	.word	0x080079b1
 8007880:	080079b1 	.word	0x080079b1
 8007884:	080079b1 	.word	0x080079b1
 8007888:	080078ed 	.word	0x080078ed
 800788c:	080079b1 	.word	0x080079b1
 8007890:	080079b1 	.word	0x080079b1
 8007894:	080079b1 	.word	0x080079b1
 8007898:	0800792f 	.word	0x0800792f
 800789c:	080079b1 	.word	0x080079b1
 80078a0:	080079b1 	.word	0x080079b1
 80078a4:	080079b1 	.word	0x080079b1
 80078a8:	0800796f 	.word	0x0800796f
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 80078ac:	68fb      	ldr	r3, [r7, #12]
 80078ae:	681b      	ldr	r3, [r3, #0]
 80078b0:	68b9      	ldr	r1, [r7, #8]
 80078b2:	4618      	mov	r0, r3
 80078b4:	f000 f9f2 	bl	8007c9c <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 80078b8:	68fb      	ldr	r3, [r7, #12]
 80078ba:	681b      	ldr	r3, [r3, #0]
 80078bc:	699a      	ldr	r2, [r3, #24]
 80078be:	68fb      	ldr	r3, [r7, #12]
 80078c0:	681b      	ldr	r3, [r3, #0]
 80078c2:	f042 0208 	orr.w	r2, r2, #8
 80078c6:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 80078c8:	68fb      	ldr	r3, [r7, #12]
 80078ca:	681b      	ldr	r3, [r3, #0]
 80078cc:	699a      	ldr	r2, [r3, #24]
 80078ce:	68fb      	ldr	r3, [r7, #12]
 80078d0:	681b      	ldr	r3, [r3, #0]
 80078d2:	f022 0204 	bic.w	r2, r2, #4
 80078d6:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 80078d8:	68fb      	ldr	r3, [r7, #12]
 80078da:	681b      	ldr	r3, [r3, #0]
 80078dc:	6999      	ldr	r1, [r3, #24]
 80078de:	68bb      	ldr	r3, [r7, #8]
 80078e0:	691a      	ldr	r2, [r3, #16]
 80078e2:	68fb      	ldr	r3, [r7, #12]
 80078e4:	681b      	ldr	r3, [r3, #0]
 80078e6:	430a      	orrs	r2, r1
 80078e8:	619a      	str	r2, [r3, #24]
      break;
 80078ea:	e062      	b.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 80078ec:	68fb      	ldr	r3, [r7, #12]
 80078ee:	681b      	ldr	r3, [r3, #0]
 80078f0:	68b9      	ldr	r1, [r7, #8]
 80078f2:	4618      	mov	r0, r3
 80078f4:	f000 fa38 	bl	8007d68 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 80078f8:	68fb      	ldr	r3, [r7, #12]
 80078fa:	681b      	ldr	r3, [r3, #0]
 80078fc:	699a      	ldr	r2, [r3, #24]
 80078fe:	68fb      	ldr	r3, [r7, #12]
 8007900:	681b      	ldr	r3, [r3, #0]
 8007902:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007906:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8007908:	68fb      	ldr	r3, [r7, #12]
 800790a:	681b      	ldr	r3, [r3, #0]
 800790c:	699a      	ldr	r2, [r3, #24]
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	681b      	ldr	r3, [r3, #0]
 8007912:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007916:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8007918:	68fb      	ldr	r3, [r7, #12]
 800791a:	681b      	ldr	r3, [r3, #0]
 800791c:	6999      	ldr	r1, [r3, #24]
 800791e:	68bb      	ldr	r3, [r7, #8]
 8007920:	691b      	ldr	r3, [r3, #16]
 8007922:	021a      	lsls	r2, r3, #8
 8007924:	68fb      	ldr	r3, [r7, #12]
 8007926:	681b      	ldr	r3, [r3, #0]
 8007928:	430a      	orrs	r2, r1
 800792a:	619a      	str	r2, [r3, #24]
      break;
 800792c:	e041      	b.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 800792e:	68fb      	ldr	r3, [r7, #12]
 8007930:	681b      	ldr	r3, [r3, #0]
 8007932:	68b9      	ldr	r1, [r7, #8]
 8007934:	4618      	mov	r0, r3
 8007936:	f000 fa83 	bl	8007e40 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 800793a:	68fb      	ldr	r3, [r7, #12]
 800793c:	681b      	ldr	r3, [r3, #0]
 800793e:	69da      	ldr	r2, [r3, #28]
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	681b      	ldr	r3, [r3, #0]
 8007944:	f042 0208 	orr.w	r2, r2, #8
 8007948:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 800794a:	68fb      	ldr	r3, [r7, #12]
 800794c:	681b      	ldr	r3, [r3, #0]
 800794e:	69da      	ldr	r2, [r3, #28]
 8007950:	68fb      	ldr	r3, [r7, #12]
 8007952:	681b      	ldr	r3, [r3, #0]
 8007954:	f022 0204 	bic.w	r2, r2, #4
 8007958:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 800795a:	68fb      	ldr	r3, [r7, #12]
 800795c:	681b      	ldr	r3, [r3, #0]
 800795e:	69d9      	ldr	r1, [r3, #28]
 8007960:	68bb      	ldr	r3, [r7, #8]
 8007962:	691a      	ldr	r2, [r3, #16]
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	430a      	orrs	r2, r1
 800796a:	61da      	str	r2, [r3, #28]
      break;
 800796c:	e021      	b.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	681b      	ldr	r3, [r3, #0]
 8007972:	68b9      	ldr	r1, [r7, #8]
 8007974:	4618      	mov	r0, r3
 8007976:	f000 facd 	bl	8007f14 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 800797a:	68fb      	ldr	r3, [r7, #12]
 800797c:	681b      	ldr	r3, [r3, #0]
 800797e:	69da      	ldr	r2, [r3, #28]
 8007980:	68fb      	ldr	r3, [r7, #12]
 8007982:	681b      	ldr	r3, [r3, #0]
 8007984:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8007988:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 800798a:	68fb      	ldr	r3, [r7, #12]
 800798c:	681b      	ldr	r3, [r3, #0]
 800798e:	69da      	ldr	r2, [r3, #28]
 8007990:	68fb      	ldr	r3, [r7, #12]
 8007992:	681b      	ldr	r3, [r3, #0]
 8007994:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8007998:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 800799a:	68fb      	ldr	r3, [r7, #12]
 800799c:	681b      	ldr	r3, [r3, #0]
 800799e:	69d9      	ldr	r1, [r3, #28]
 80079a0:	68bb      	ldr	r3, [r7, #8]
 80079a2:	691b      	ldr	r3, [r3, #16]
 80079a4:	021a      	lsls	r2, r3, #8
 80079a6:	68fb      	ldr	r3, [r7, #12]
 80079a8:	681b      	ldr	r3, [r3, #0]
 80079aa:	430a      	orrs	r2, r1
 80079ac:	61da      	str	r2, [r3, #28]
      break;
 80079ae:	e000      	b.n	80079b2 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 80079b0:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 80079b2:	68fb      	ldr	r3, [r7, #12]
 80079b4:	2200      	movs	r2, #0
 80079b6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80079ba:	2300      	movs	r3, #0
}
 80079bc:	4618      	mov	r0, r3
 80079be:	3710      	adds	r7, #16
 80079c0:	46bd      	mov	sp, r7
 80079c2:	bd80      	pop	{r7, pc}

080079c4 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 80079c4:	b580      	push	{r7, lr}
 80079c6:	b084      	sub	sp, #16
 80079c8:	af00      	add	r7, sp, #0
 80079ca:	6078      	str	r0, [r7, #4]
 80079cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 80079ce:	687b      	ldr	r3, [r7, #4]
 80079d0:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d4:	2b01      	cmp	r3, #1
 80079d6:	d101      	bne.n	80079dc <HAL_TIM_ConfigClockSource+0x18>
 80079d8:	2302      	movs	r3, #2
 80079da:	e0b3      	b.n	8007b44 <HAL_TIM_ConfigClockSource+0x180>
 80079dc:	687b      	ldr	r3, [r7, #4]
 80079de:	2201      	movs	r2, #1
 80079e0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 80079e4:	687b      	ldr	r3, [r7, #4]
 80079e6:	2202      	movs	r2, #2
 80079e8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 80079ec:	687b      	ldr	r3, [r7, #4]
 80079ee:	681b      	ldr	r3, [r3, #0]
 80079f0:	689b      	ldr	r3, [r3, #8]
 80079f2:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 80079f4:	68fb      	ldr	r3, [r7, #12]
 80079f6:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 80079fa:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80079fc:	68fb      	ldr	r3, [r7, #12]
 80079fe:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8007a02:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8007a04:	687b      	ldr	r3, [r7, #4]
 8007a06:	681b      	ldr	r3, [r3, #0]
 8007a08:	68fa      	ldr	r2, [r7, #12]
 8007a0a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007a0c:	683b      	ldr	r3, [r7, #0]
 8007a0e:	681b      	ldr	r3, [r3, #0]
 8007a10:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a14:	d03e      	beq.n	8007a94 <HAL_TIM_ConfigClockSource+0xd0>
 8007a16:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007a1a:	f200 8087 	bhi.w	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a1e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a22:	f000 8085 	beq.w	8007b30 <HAL_TIM_ConfigClockSource+0x16c>
 8007a26:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007a2a:	d87f      	bhi.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a2c:	2b70      	cmp	r3, #112	; 0x70
 8007a2e:	d01a      	beq.n	8007a66 <HAL_TIM_ConfigClockSource+0xa2>
 8007a30:	2b70      	cmp	r3, #112	; 0x70
 8007a32:	d87b      	bhi.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a34:	2b60      	cmp	r3, #96	; 0x60
 8007a36:	d050      	beq.n	8007ada <HAL_TIM_ConfigClockSource+0x116>
 8007a38:	2b60      	cmp	r3, #96	; 0x60
 8007a3a:	d877      	bhi.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a3c:	2b50      	cmp	r3, #80	; 0x50
 8007a3e:	d03c      	beq.n	8007aba <HAL_TIM_ConfigClockSource+0xf6>
 8007a40:	2b50      	cmp	r3, #80	; 0x50
 8007a42:	d873      	bhi.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a44:	2b40      	cmp	r3, #64	; 0x40
 8007a46:	d058      	beq.n	8007afa <HAL_TIM_ConfigClockSource+0x136>
 8007a48:	2b40      	cmp	r3, #64	; 0x40
 8007a4a:	d86f      	bhi.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a4c:	2b30      	cmp	r3, #48	; 0x30
 8007a4e:	d064      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x156>
 8007a50:	2b30      	cmp	r3, #48	; 0x30
 8007a52:	d86b      	bhi.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a54:	2b20      	cmp	r3, #32
 8007a56:	d060      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x156>
 8007a58:	2b20      	cmp	r3, #32
 8007a5a:	d867      	bhi.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
 8007a5c:	2b00      	cmp	r3, #0
 8007a5e:	d05c      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x156>
 8007a60:	2b10      	cmp	r3, #16
 8007a62:	d05a      	beq.n	8007b1a <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007a64:	e062      	b.n	8007b2c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 8007a66:	687b      	ldr	r3, [r7, #4]
 8007a68:	6818      	ldr	r0, [r3, #0]
 8007a6a:	683b      	ldr	r3, [r7, #0]
 8007a6c:	6899      	ldr	r1, [r3, #8]
 8007a6e:	683b      	ldr	r3, [r7, #0]
 8007a70:	685a      	ldr	r2, [r3, #4]
 8007a72:	683b      	ldr	r3, [r7, #0]
 8007a74:	68db      	ldr	r3, [r3, #12]
 8007a76:	f000 fb17 	bl	80080a8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 8007a7a:	687b      	ldr	r3, [r7, #4]
 8007a7c:	681b      	ldr	r3, [r3, #0]
 8007a7e:	689b      	ldr	r3, [r3, #8]
 8007a80:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007a82:	68fb      	ldr	r3, [r7, #12]
 8007a84:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 8007a88:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 8007a8a:	687b      	ldr	r3, [r7, #4]
 8007a8c:	681b      	ldr	r3, [r3, #0]
 8007a8e:	68fa      	ldr	r2, [r7, #12]
 8007a90:	609a      	str	r2, [r3, #8]
      break;
 8007a92:	e04e      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007a94:	687b      	ldr	r3, [r7, #4]
 8007a96:	6818      	ldr	r0, [r3, #0]
 8007a98:	683b      	ldr	r3, [r7, #0]
 8007a9a:	6899      	ldr	r1, [r3, #8]
 8007a9c:	683b      	ldr	r3, [r7, #0]
 8007a9e:	685a      	ldr	r2, [r3, #4]
 8007aa0:	683b      	ldr	r3, [r7, #0]
 8007aa2:	68db      	ldr	r3, [r3, #12]
 8007aa4:	f000 fb00 	bl	80080a8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 8007aa8:	687b      	ldr	r3, [r7, #4]
 8007aaa:	681b      	ldr	r3, [r3, #0]
 8007aac:	689a      	ldr	r2, [r3, #8]
 8007aae:	687b      	ldr	r3, [r7, #4]
 8007ab0:	681b      	ldr	r3, [r3, #0]
 8007ab2:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8007ab6:	609a      	str	r2, [r3, #8]
      break;
 8007ab8:	e03b      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007aba:	687b      	ldr	r3, [r7, #4]
 8007abc:	6818      	ldr	r0, [r3, #0]
 8007abe:	683b      	ldr	r3, [r7, #0]
 8007ac0:	6859      	ldr	r1, [r3, #4]
 8007ac2:	683b      	ldr	r3, [r7, #0]
 8007ac4:	68db      	ldr	r3, [r3, #12]
 8007ac6:	461a      	mov	r2, r3
 8007ac8:	f000 fa74 	bl	8007fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	681b      	ldr	r3, [r3, #0]
 8007ad0:	2150      	movs	r1, #80	; 0x50
 8007ad2:	4618      	mov	r0, r3
 8007ad4:	f000 facd 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007ad8:	e02b      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 8007ada:	687b      	ldr	r3, [r7, #4]
 8007adc:	6818      	ldr	r0, [r3, #0]
 8007ade:	683b      	ldr	r3, [r7, #0]
 8007ae0:	6859      	ldr	r1, [r3, #4]
 8007ae2:	683b      	ldr	r3, [r7, #0]
 8007ae4:	68db      	ldr	r3, [r3, #12]
 8007ae6:	461a      	mov	r2, r3
 8007ae8:	f000 fa93 	bl	8008012 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 8007aec:	687b      	ldr	r3, [r7, #4]
 8007aee:	681b      	ldr	r3, [r3, #0]
 8007af0:	2160      	movs	r1, #96	; 0x60
 8007af2:	4618      	mov	r0, r3
 8007af4:	f000 fabd 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007af8:	e01b      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6818      	ldr	r0, [r3, #0]
 8007afe:	683b      	ldr	r3, [r7, #0]
 8007b00:	6859      	ldr	r1, [r3, #4]
 8007b02:	683b      	ldr	r3, [r7, #0]
 8007b04:	68db      	ldr	r3, [r3, #12]
 8007b06:	461a      	mov	r2, r3
 8007b08:	f000 fa54 	bl	8007fb4 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007b0c:	687b      	ldr	r3, [r7, #4]
 8007b0e:	681b      	ldr	r3, [r3, #0]
 8007b10:	2140      	movs	r1, #64	; 0x40
 8007b12:	4618      	mov	r0, r3
 8007b14:	f000 faad 	bl	8008072 <TIM_ITRx_SetConfig>
      break;
 8007b18:	e00b      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 8007b1a:	687b      	ldr	r3, [r7, #4]
 8007b1c:	681a      	ldr	r2, [r3, #0]
 8007b1e:	683b      	ldr	r3, [r7, #0]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	4619      	mov	r1, r3
 8007b24:	4610      	mov	r0, r2
 8007b26:	f000 faa4 	bl	8008072 <TIM_ITRx_SetConfig>
        break;
 8007b2a:	e002      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b2c:	bf00      	nop
 8007b2e:	e000      	b.n	8007b32 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007b30:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007b32:	687b      	ldr	r3, [r7, #4]
 8007b34:	2201      	movs	r2, #1
 8007b36:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8007b3a:	687b      	ldr	r3, [r7, #4]
 8007b3c:	2200      	movs	r2, #0
 8007b3e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007b42:	2300      	movs	r3, #0
}
 8007b44:	4618      	mov	r0, r3
 8007b46:	3710      	adds	r7, #16
 8007b48:	46bd      	mov	sp, r7
 8007b4a:	bd80      	pop	{r7, pc}

08007b4c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007b4c:	b480      	push	{r7}
 8007b4e:	b083      	sub	sp, #12
 8007b50:	af00      	add	r7, sp, #0
 8007b52:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007b54:	bf00      	nop
 8007b56:	370c      	adds	r7, #12
 8007b58:	46bd      	mov	sp, r7
 8007b5a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b5e:	4770      	bx	lr

08007b60 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007b60:	b480      	push	{r7}
 8007b62:	b083      	sub	sp, #12
 8007b64:	af00      	add	r7, sp, #0
 8007b66:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 8007b68:	bf00      	nop
 8007b6a:	370c      	adds	r7, #12
 8007b6c:	46bd      	mov	sp, r7
 8007b6e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b72:	4770      	bx	lr

08007b74 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007b74:	b480      	push	{r7}
 8007b76:	b083      	sub	sp, #12
 8007b78:	af00      	add	r7, sp, #0
 8007b7a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007b7c:	bf00      	nop
 8007b7e:	370c      	adds	r7, #12
 8007b80:	46bd      	mov	sp, r7
 8007b82:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b86:	4770      	bx	lr

08007b88 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 8007b88:	b480      	push	{r7}
 8007b8a:	b083      	sub	sp, #12
 8007b8c:	af00      	add	r7, sp, #0
 8007b8e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007b90:	bf00      	nop
 8007b92:	370c      	adds	r7, #12
 8007b94:	46bd      	mov	sp, r7
 8007b96:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007b9a:	4770      	bx	lr

08007b9c <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007b9c:	b480      	push	{r7}
 8007b9e:	b085      	sub	sp, #20
 8007ba0:	af00      	add	r7, sp, #0
 8007ba2:	6078      	str	r0, [r7, #4]
 8007ba4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 8007ba6:	687b      	ldr	r3, [r7, #4]
 8007ba8:	681b      	ldr	r3, [r3, #0]
 8007baa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 8007bac:	687b      	ldr	r3, [r7, #4]
 8007bae:	4a34      	ldr	r2, [pc, #208]	; (8007c80 <TIM_Base_SetConfig+0xe4>)
 8007bb0:	4293      	cmp	r3, r2
 8007bb2:	d00f      	beq.n	8007bd4 <TIM_Base_SetConfig+0x38>
 8007bb4:	687b      	ldr	r3, [r7, #4]
 8007bb6:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bba:	d00b      	beq.n	8007bd4 <TIM_Base_SetConfig+0x38>
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	4a31      	ldr	r2, [pc, #196]	; (8007c84 <TIM_Base_SetConfig+0xe8>)
 8007bc0:	4293      	cmp	r3, r2
 8007bc2:	d007      	beq.n	8007bd4 <TIM_Base_SetConfig+0x38>
 8007bc4:	687b      	ldr	r3, [r7, #4]
 8007bc6:	4a30      	ldr	r2, [pc, #192]	; (8007c88 <TIM_Base_SetConfig+0xec>)
 8007bc8:	4293      	cmp	r3, r2
 8007bca:	d003      	beq.n	8007bd4 <TIM_Base_SetConfig+0x38>
 8007bcc:	687b      	ldr	r3, [r7, #4]
 8007bce:	4a2f      	ldr	r2, [pc, #188]	; (8007c8c <TIM_Base_SetConfig+0xf0>)
 8007bd0:	4293      	cmp	r3, r2
 8007bd2:	d108      	bne.n	8007be6 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8007bd4:	68fb      	ldr	r3, [r7, #12]
 8007bd6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007bda:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 8007bdc:	683b      	ldr	r3, [r7, #0]
 8007bde:	685b      	ldr	r3, [r3, #4]
 8007be0:	68fa      	ldr	r2, [r7, #12]
 8007be2:	4313      	orrs	r3, r2
 8007be4:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8007be6:	687b      	ldr	r3, [r7, #4]
 8007be8:	4a25      	ldr	r2, [pc, #148]	; (8007c80 <TIM_Base_SetConfig+0xe4>)
 8007bea:	4293      	cmp	r3, r2
 8007bec:	d01b      	beq.n	8007c26 <TIM_Base_SetConfig+0x8a>
 8007bee:	687b      	ldr	r3, [r7, #4]
 8007bf0:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8007bf4:	d017      	beq.n	8007c26 <TIM_Base_SetConfig+0x8a>
 8007bf6:	687b      	ldr	r3, [r7, #4]
 8007bf8:	4a22      	ldr	r2, [pc, #136]	; (8007c84 <TIM_Base_SetConfig+0xe8>)
 8007bfa:	4293      	cmp	r3, r2
 8007bfc:	d013      	beq.n	8007c26 <TIM_Base_SetConfig+0x8a>
 8007bfe:	687b      	ldr	r3, [r7, #4]
 8007c00:	4a21      	ldr	r2, [pc, #132]	; (8007c88 <TIM_Base_SetConfig+0xec>)
 8007c02:	4293      	cmp	r3, r2
 8007c04:	d00f      	beq.n	8007c26 <TIM_Base_SetConfig+0x8a>
 8007c06:	687b      	ldr	r3, [r7, #4]
 8007c08:	4a20      	ldr	r2, [pc, #128]	; (8007c8c <TIM_Base_SetConfig+0xf0>)
 8007c0a:	4293      	cmp	r3, r2
 8007c0c:	d00b      	beq.n	8007c26 <TIM_Base_SetConfig+0x8a>
 8007c0e:	687b      	ldr	r3, [r7, #4]
 8007c10:	4a1f      	ldr	r2, [pc, #124]	; (8007c90 <TIM_Base_SetConfig+0xf4>)
 8007c12:	4293      	cmp	r3, r2
 8007c14:	d007      	beq.n	8007c26 <TIM_Base_SetConfig+0x8a>
 8007c16:	687b      	ldr	r3, [r7, #4]
 8007c18:	4a1e      	ldr	r2, [pc, #120]	; (8007c94 <TIM_Base_SetConfig+0xf8>)
 8007c1a:	4293      	cmp	r3, r2
 8007c1c:	d003      	beq.n	8007c26 <TIM_Base_SetConfig+0x8a>
 8007c1e:	687b      	ldr	r3, [r7, #4]
 8007c20:	4a1d      	ldr	r2, [pc, #116]	; (8007c98 <TIM_Base_SetConfig+0xfc>)
 8007c22:	4293      	cmp	r3, r2
 8007c24:	d108      	bne.n	8007c38 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8007c26:	68fb      	ldr	r3, [r7, #12]
 8007c28:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007c2c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007c2e:	683b      	ldr	r3, [r7, #0]
 8007c30:	68db      	ldr	r3, [r3, #12]
 8007c32:	68fa      	ldr	r2, [r7, #12]
 8007c34:	4313      	orrs	r3, r2
 8007c36:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8007c38:	68fb      	ldr	r3, [r7, #12]
 8007c3a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007c3e:	683b      	ldr	r3, [r7, #0]
 8007c40:	695b      	ldr	r3, [r3, #20]
 8007c42:	4313      	orrs	r3, r2
 8007c44:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8007c46:	687b      	ldr	r3, [r7, #4]
 8007c48:	68fa      	ldr	r2, [r7, #12]
 8007c4a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007c4c:	683b      	ldr	r3, [r7, #0]
 8007c4e:	689a      	ldr	r2, [r3, #8]
 8007c50:	687b      	ldr	r3, [r7, #4]
 8007c52:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007c54:	683b      	ldr	r3, [r7, #0]
 8007c56:	681a      	ldr	r2, [r3, #0]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007c5c:	687b      	ldr	r3, [r7, #4]
 8007c5e:	4a08      	ldr	r2, [pc, #32]	; (8007c80 <TIM_Base_SetConfig+0xe4>)
 8007c60:	4293      	cmp	r3, r2
 8007c62:	d103      	bne.n	8007c6c <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007c64:	683b      	ldr	r3, [r7, #0]
 8007c66:	691a      	ldr	r2, [r3, #16]
 8007c68:	687b      	ldr	r3, [r7, #4]
 8007c6a:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007c6c:	687b      	ldr	r3, [r7, #4]
 8007c6e:	2201      	movs	r2, #1
 8007c70:	615a      	str	r2, [r3, #20]
}
 8007c72:	bf00      	nop
 8007c74:	3714      	adds	r7, #20
 8007c76:	46bd      	mov	sp, r7
 8007c78:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007c7c:	4770      	bx	lr
 8007c7e:	bf00      	nop
 8007c80:	40010000 	.word	0x40010000
 8007c84:	40000400 	.word	0x40000400
 8007c88:	40000800 	.word	0x40000800
 8007c8c:	40000c00 	.word	0x40000c00
 8007c90:	40014000 	.word	0x40014000
 8007c94:	40014400 	.word	0x40014400
 8007c98:	40014800 	.word	0x40014800

08007c9c <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007c9c:	b480      	push	{r7}
 8007c9e:	b087      	sub	sp, #28
 8007ca0:	af00      	add	r7, sp, #0
 8007ca2:	6078      	str	r0, [r7, #4]
 8007ca4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	6a1b      	ldr	r3, [r3, #32]
 8007caa:	f023 0201 	bic.w	r2, r3, #1
 8007cae:	687b      	ldr	r3, [r7, #4]
 8007cb0:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007cb2:	687b      	ldr	r3, [r7, #4]
 8007cb4:	6a1b      	ldr	r3, [r3, #32]
 8007cb6:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007cb8:	687b      	ldr	r3, [r7, #4]
 8007cba:	685b      	ldr	r3, [r3, #4]
 8007cbc:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007cbe:	687b      	ldr	r3, [r7, #4]
 8007cc0:	699b      	ldr	r3, [r3, #24]
 8007cc2:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8007cc4:	68fb      	ldr	r3, [r7, #12]
 8007cc6:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007cca:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 8007ccc:	68fb      	ldr	r3, [r7, #12]
 8007cce:	f023 0303 	bic.w	r3, r3, #3
 8007cd2:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007cd4:	683b      	ldr	r3, [r7, #0]
 8007cd6:	681b      	ldr	r3, [r3, #0]
 8007cd8:	68fa      	ldr	r2, [r7, #12]
 8007cda:	4313      	orrs	r3, r2
 8007cdc:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 8007cde:	697b      	ldr	r3, [r7, #20]
 8007ce0:	f023 0302 	bic.w	r3, r3, #2
 8007ce4:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8007ce6:	683b      	ldr	r3, [r7, #0]
 8007ce8:	689b      	ldr	r3, [r3, #8]
 8007cea:	697a      	ldr	r2, [r7, #20]
 8007cec:	4313      	orrs	r3, r2
 8007cee:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8007cf0:	687b      	ldr	r3, [r7, #4]
 8007cf2:	4a1c      	ldr	r2, [pc, #112]	; (8007d64 <TIM_OC1_SetConfig+0xc8>)
 8007cf4:	4293      	cmp	r3, r2
 8007cf6:	d10c      	bne.n	8007d12 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8007cf8:	697b      	ldr	r3, [r7, #20]
 8007cfa:	f023 0308 	bic.w	r3, r3, #8
 8007cfe:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8007d00:	683b      	ldr	r3, [r7, #0]
 8007d02:	68db      	ldr	r3, [r3, #12]
 8007d04:	697a      	ldr	r2, [r7, #20]
 8007d06:	4313      	orrs	r3, r2
 8007d08:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 8007d0a:	697b      	ldr	r3, [r7, #20]
 8007d0c:	f023 0304 	bic.w	r3, r3, #4
 8007d10:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007d12:	687b      	ldr	r3, [r7, #4]
 8007d14:	4a13      	ldr	r2, [pc, #76]	; (8007d64 <TIM_OC1_SetConfig+0xc8>)
 8007d16:	4293      	cmp	r3, r2
 8007d18:	d111      	bne.n	8007d3e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 8007d1a:	693b      	ldr	r3, [r7, #16]
 8007d1c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007d20:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007d22:	693b      	ldr	r3, [r7, #16]
 8007d24:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007d28:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 8007d2a:	683b      	ldr	r3, [r7, #0]
 8007d2c:	695b      	ldr	r3, [r3, #20]
 8007d2e:	693a      	ldr	r2, [r7, #16]
 8007d30:	4313      	orrs	r3, r2
 8007d32:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007d34:	683b      	ldr	r3, [r7, #0]
 8007d36:	699b      	ldr	r3, [r3, #24]
 8007d38:	693a      	ldr	r2, [r7, #16]
 8007d3a:	4313      	orrs	r3, r2
 8007d3c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007d3e:	687b      	ldr	r3, [r7, #4]
 8007d40:	693a      	ldr	r2, [r7, #16]
 8007d42:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007d44:	687b      	ldr	r3, [r7, #4]
 8007d46:	68fa      	ldr	r2, [r7, #12]
 8007d48:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 8007d4a:	683b      	ldr	r3, [r7, #0]
 8007d4c:	685a      	ldr	r2, [r3, #4]
 8007d4e:	687b      	ldr	r3, [r7, #4]
 8007d50:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007d52:	687b      	ldr	r3, [r7, #4]
 8007d54:	697a      	ldr	r2, [r7, #20]
 8007d56:	621a      	str	r2, [r3, #32]
}
 8007d58:	bf00      	nop
 8007d5a:	371c      	adds	r7, #28
 8007d5c:	46bd      	mov	sp, r7
 8007d5e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d62:	4770      	bx	lr
 8007d64:	40010000 	.word	0x40010000

08007d68 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007d68:	b480      	push	{r7}
 8007d6a:	b087      	sub	sp, #28
 8007d6c:	af00      	add	r7, sp, #0
 8007d6e:	6078      	str	r0, [r7, #4]
 8007d70:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007d72:	687b      	ldr	r3, [r7, #4]
 8007d74:	6a1b      	ldr	r3, [r3, #32]
 8007d76:	f023 0210 	bic.w	r2, r3, #16
 8007d7a:	687b      	ldr	r3, [r7, #4]
 8007d7c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007d7e:	687b      	ldr	r3, [r7, #4]
 8007d80:	6a1b      	ldr	r3, [r3, #32]
 8007d82:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007d84:	687b      	ldr	r3, [r7, #4]
 8007d86:	685b      	ldr	r3, [r3, #4]
 8007d88:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 8007d8a:	687b      	ldr	r3, [r7, #4]
 8007d8c:	699b      	ldr	r3, [r3, #24]
 8007d8e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007d90:	68fb      	ldr	r3, [r7, #12]
 8007d92:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007d96:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 8007d98:	68fb      	ldr	r3, [r7, #12]
 8007d9a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007d9e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007da0:	683b      	ldr	r3, [r7, #0]
 8007da2:	681b      	ldr	r3, [r3, #0]
 8007da4:	021b      	lsls	r3, r3, #8
 8007da6:	68fa      	ldr	r2, [r7, #12]
 8007da8:	4313      	orrs	r3, r2
 8007daa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 8007dac:	697b      	ldr	r3, [r7, #20]
 8007dae:	f023 0320 	bic.w	r3, r3, #32
 8007db2:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8007db4:	683b      	ldr	r3, [r7, #0]
 8007db6:	689b      	ldr	r3, [r3, #8]
 8007db8:	011b      	lsls	r3, r3, #4
 8007dba:	697a      	ldr	r2, [r7, #20]
 8007dbc:	4313      	orrs	r3, r2
 8007dbe:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8007dc0:	687b      	ldr	r3, [r7, #4]
 8007dc2:	4a1e      	ldr	r2, [pc, #120]	; (8007e3c <TIM_OC2_SetConfig+0xd4>)
 8007dc4:	4293      	cmp	r3, r2
 8007dc6:	d10d      	bne.n	8007de4 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8007dc8:	697b      	ldr	r3, [r7, #20]
 8007dca:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8007dce:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8007dd0:	683b      	ldr	r3, [r7, #0]
 8007dd2:	68db      	ldr	r3, [r3, #12]
 8007dd4:	011b      	lsls	r3, r3, #4
 8007dd6:	697a      	ldr	r2, [r7, #20]
 8007dd8:	4313      	orrs	r3, r2
 8007dda:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 8007ddc:	697b      	ldr	r3, [r7, #20]
 8007dde:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8007de2:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007de4:	687b      	ldr	r3, [r7, #4]
 8007de6:	4a15      	ldr	r2, [pc, #84]	; (8007e3c <TIM_OC2_SetConfig+0xd4>)
 8007de8:	4293      	cmp	r3, r2
 8007dea:	d113      	bne.n	8007e14 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 8007dec:	693b      	ldr	r3, [r7, #16]
 8007dee:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007df2:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8007df4:	693b      	ldr	r3, [r7, #16]
 8007df6:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007dfa:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 8007dfc:	683b      	ldr	r3, [r7, #0]
 8007dfe:	695b      	ldr	r3, [r3, #20]
 8007e00:	009b      	lsls	r3, r3, #2
 8007e02:	693a      	ldr	r2, [r7, #16]
 8007e04:	4313      	orrs	r3, r2
 8007e06:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8007e08:	683b      	ldr	r3, [r7, #0]
 8007e0a:	699b      	ldr	r3, [r3, #24]
 8007e0c:	009b      	lsls	r3, r3, #2
 8007e0e:	693a      	ldr	r2, [r7, #16]
 8007e10:	4313      	orrs	r3, r2
 8007e12:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007e14:	687b      	ldr	r3, [r7, #4]
 8007e16:	693a      	ldr	r2, [r7, #16]
 8007e18:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007e1a:	687b      	ldr	r3, [r7, #4]
 8007e1c:	68fa      	ldr	r2, [r7, #12]
 8007e1e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007e20:	683b      	ldr	r3, [r7, #0]
 8007e22:	685a      	ldr	r2, [r3, #4]
 8007e24:	687b      	ldr	r3, [r7, #4]
 8007e26:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007e28:	687b      	ldr	r3, [r7, #4]
 8007e2a:	697a      	ldr	r2, [r7, #20]
 8007e2c:	621a      	str	r2, [r3, #32]
}
 8007e2e:	bf00      	nop
 8007e30:	371c      	adds	r7, #28
 8007e32:	46bd      	mov	sp, r7
 8007e34:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007e38:	4770      	bx	lr
 8007e3a:	bf00      	nop
 8007e3c:	40010000 	.word	0x40010000

08007e40 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007e40:	b480      	push	{r7}
 8007e42:	b087      	sub	sp, #28
 8007e44:	af00      	add	r7, sp, #0
 8007e46:	6078      	str	r0, [r7, #4]
 8007e48:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6a1b      	ldr	r3, [r3, #32]
 8007e4e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007e52:	687b      	ldr	r3, [r7, #4]
 8007e54:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007e56:	687b      	ldr	r3, [r7, #4]
 8007e58:	6a1b      	ldr	r3, [r3, #32]
 8007e5a:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007e5c:	687b      	ldr	r3, [r7, #4]
 8007e5e:	685b      	ldr	r3, [r3, #4]
 8007e60:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007e62:	687b      	ldr	r3, [r7, #4]
 8007e64:	69db      	ldr	r3, [r3, #28]
 8007e66:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 8007e68:	68fb      	ldr	r3, [r7, #12]
 8007e6a:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007e6e:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007e70:	68fb      	ldr	r3, [r7, #12]
 8007e72:	f023 0303 	bic.w	r3, r3, #3
 8007e76:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8007e78:	683b      	ldr	r3, [r7, #0]
 8007e7a:	681b      	ldr	r3, [r3, #0]
 8007e7c:	68fa      	ldr	r2, [r7, #12]
 8007e7e:	4313      	orrs	r3, r2
 8007e80:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007e82:	697b      	ldr	r3, [r7, #20]
 8007e84:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8007e88:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 8007e8a:	683b      	ldr	r3, [r7, #0]
 8007e8c:	689b      	ldr	r3, [r3, #8]
 8007e8e:	021b      	lsls	r3, r3, #8
 8007e90:	697a      	ldr	r2, [r7, #20]
 8007e92:	4313      	orrs	r3, r2
 8007e94:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 8007e96:	687b      	ldr	r3, [r7, #4]
 8007e98:	4a1d      	ldr	r2, [pc, #116]	; (8007f10 <TIM_OC3_SetConfig+0xd0>)
 8007e9a:	4293      	cmp	r3, r2
 8007e9c:	d10d      	bne.n	8007eba <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007e9e:	697b      	ldr	r3, [r7, #20]
 8007ea0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007ea4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 8007ea6:	683b      	ldr	r3, [r7, #0]
 8007ea8:	68db      	ldr	r3, [r3, #12]
 8007eaa:	021b      	lsls	r3, r3, #8
 8007eac:	697a      	ldr	r2, [r7, #20]
 8007eae:	4313      	orrs	r3, r2
 8007eb0:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8007eb2:	697b      	ldr	r3, [r7, #20]
 8007eb4:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8007eb8:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007eba:	687b      	ldr	r3, [r7, #4]
 8007ebc:	4a14      	ldr	r2, [pc, #80]	; (8007f10 <TIM_OC3_SetConfig+0xd0>)
 8007ebe:	4293      	cmp	r3, r2
 8007ec0:	d113      	bne.n	8007eea <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8007ec2:	693b      	ldr	r3, [r7, #16]
 8007ec4:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8007ec8:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 8007eca:	693b      	ldr	r3, [r7, #16]
 8007ecc:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007ed0:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8007ed2:	683b      	ldr	r3, [r7, #0]
 8007ed4:	695b      	ldr	r3, [r3, #20]
 8007ed6:	011b      	lsls	r3, r3, #4
 8007ed8:	693a      	ldr	r2, [r7, #16]
 8007eda:	4313      	orrs	r3, r2
 8007edc:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 8007ede:	683b      	ldr	r3, [r7, #0]
 8007ee0:	699b      	ldr	r3, [r3, #24]
 8007ee2:	011b      	lsls	r3, r3, #4
 8007ee4:	693a      	ldr	r2, [r7, #16]
 8007ee6:	4313      	orrs	r3, r2
 8007ee8:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007eea:	687b      	ldr	r3, [r7, #4]
 8007eec:	693a      	ldr	r2, [r7, #16]
 8007eee:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007ef0:	687b      	ldr	r3, [r7, #4]
 8007ef2:	68fa      	ldr	r2, [r7, #12]
 8007ef4:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8007ef6:	683b      	ldr	r3, [r7, #0]
 8007ef8:	685a      	ldr	r2, [r3, #4]
 8007efa:	687b      	ldr	r3, [r7, #4]
 8007efc:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007efe:	687b      	ldr	r3, [r7, #4]
 8007f00:	697a      	ldr	r2, [r7, #20]
 8007f02:	621a      	str	r2, [r3, #32]
}
 8007f04:	bf00      	nop
 8007f06:	371c      	adds	r7, #28
 8007f08:	46bd      	mov	sp, r7
 8007f0a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007f0e:	4770      	bx	lr
 8007f10:	40010000 	.word	0x40010000

08007f14 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007f14:	b480      	push	{r7}
 8007f16:	b087      	sub	sp, #28
 8007f18:	af00      	add	r7, sp, #0
 8007f1a:	6078      	str	r0, [r7, #4]
 8007f1c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007f1e:	687b      	ldr	r3, [r7, #4]
 8007f20:	6a1b      	ldr	r3, [r3, #32]
 8007f22:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8007f26:	687b      	ldr	r3, [r7, #4]
 8007f28:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007f2a:	687b      	ldr	r3, [r7, #4]
 8007f2c:	6a1b      	ldr	r3, [r3, #32]
 8007f2e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007f30:	687b      	ldr	r3, [r7, #4]
 8007f32:	685b      	ldr	r3, [r3, #4]
 8007f34:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007f36:	687b      	ldr	r3, [r7, #4]
 8007f38:	69db      	ldr	r3, [r3, #28]
 8007f3a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007f3c:	68fb      	ldr	r3, [r7, #12]
 8007f3e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007f42:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007f44:	68fb      	ldr	r3, [r7, #12]
 8007f46:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007f4a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007f4c:	683b      	ldr	r3, [r7, #0]
 8007f4e:	681b      	ldr	r3, [r3, #0]
 8007f50:	021b      	lsls	r3, r3, #8
 8007f52:	68fa      	ldr	r2, [r7, #12]
 8007f54:	4313      	orrs	r3, r2
 8007f56:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 8007f58:	693b      	ldr	r3, [r7, #16]
 8007f5a:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007f5e:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007f60:	683b      	ldr	r3, [r7, #0]
 8007f62:	689b      	ldr	r3, [r3, #8]
 8007f64:	031b      	lsls	r3, r3, #12
 8007f66:	693a      	ldr	r2, [r7, #16]
 8007f68:	4313      	orrs	r3, r2
 8007f6a:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007f6c:	687b      	ldr	r3, [r7, #4]
 8007f6e:	4a10      	ldr	r2, [pc, #64]	; (8007fb0 <TIM_OC4_SetConfig+0x9c>)
 8007f70:	4293      	cmp	r3, r2
 8007f72:	d109      	bne.n	8007f88 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007f74:	697b      	ldr	r3, [r7, #20]
 8007f76:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8007f7a:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007f7c:	683b      	ldr	r3, [r7, #0]
 8007f7e:	695b      	ldr	r3, [r3, #20]
 8007f80:	019b      	lsls	r3, r3, #6
 8007f82:	697a      	ldr	r2, [r7, #20]
 8007f84:	4313      	orrs	r3, r2
 8007f86:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007f88:	687b      	ldr	r3, [r7, #4]
 8007f8a:	697a      	ldr	r2, [r7, #20]
 8007f8c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007f8e:	687b      	ldr	r3, [r7, #4]
 8007f90:	68fa      	ldr	r2, [r7, #12]
 8007f92:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007f94:	683b      	ldr	r3, [r7, #0]
 8007f96:	685a      	ldr	r2, [r3, #4]
 8007f98:	687b      	ldr	r3, [r7, #4]
 8007f9a:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007f9c:	687b      	ldr	r3, [r7, #4]
 8007f9e:	693a      	ldr	r2, [r7, #16]
 8007fa0:	621a      	str	r2, [r3, #32]
}
 8007fa2:	bf00      	nop
 8007fa4:	371c      	adds	r7, #28
 8007fa6:	46bd      	mov	sp, r7
 8007fa8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007fac:	4770      	bx	lr
 8007fae:	bf00      	nop
 8007fb0:	40010000 	.word	0x40010000

08007fb4 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007fb4:	b480      	push	{r7}
 8007fb6:	b087      	sub	sp, #28
 8007fb8:	af00      	add	r7, sp, #0
 8007fba:	60f8      	str	r0, [r7, #12]
 8007fbc:	60b9      	str	r1, [r7, #8]
 8007fbe:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8007fc0:	68fb      	ldr	r3, [r7, #12]
 8007fc2:	6a1b      	ldr	r3, [r3, #32]
 8007fc4:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8007fc6:	68fb      	ldr	r3, [r7, #12]
 8007fc8:	6a1b      	ldr	r3, [r3, #32]
 8007fca:	f023 0201 	bic.w	r2, r3, #1
 8007fce:	68fb      	ldr	r3, [r7, #12]
 8007fd0:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8007fd2:	68fb      	ldr	r3, [r7, #12]
 8007fd4:	699b      	ldr	r3, [r3, #24]
 8007fd6:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8007fd8:	693b      	ldr	r3, [r7, #16]
 8007fda:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8007fde:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8007fe0:	687b      	ldr	r3, [r7, #4]
 8007fe2:	011b      	lsls	r3, r3, #4
 8007fe4:	693a      	ldr	r2, [r7, #16]
 8007fe6:	4313      	orrs	r3, r2
 8007fe8:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 8007fea:	697b      	ldr	r3, [r7, #20]
 8007fec:	f023 030a 	bic.w	r3, r3, #10
 8007ff0:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8007ff2:	697a      	ldr	r2, [r7, #20]
 8007ff4:	68bb      	ldr	r3, [r7, #8]
 8007ff6:	4313      	orrs	r3, r2
 8007ff8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 8007ffa:	68fb      	ldr	r3, [r7, #12]
 8007ffc:	693a      	ldr	r2, [r7, #16]
 8007ffe:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008000:	68fb      	ldr	r3, [r7, #12]
 8008002:	697a      	ldr	r2, [r7, #20]
 8008004:	621a      	str	r2, [r3, #32]
}
 8008006:	bf00      	nop
 8008008:	371c      	adds	r7, #28
 800800a:	46bd      	mov	sp, r7
 800800c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008010:	4770      	bx	lr

08008012 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8008012:	b480      	push	{r7}
 8008014:	b087      	sub	sp, #28
 8008016:	af00      	add	r7, sp, #0
 8008018:	60f8      	str	r0, [r7, #12]
 800801a:	60b9      	str	r1, [r7, #8]
 800801c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	6a1b      	ldr	r3, [r3, #32]
 8008022:	f023 0210 	bic.w	r2, r3, #16
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800802a:	68fb      	ldr	r3, [r7, #12]
 800802c:	699b      	ldr	r3, [r3, #24]
 800802e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8008030:	68fb      	ldr	r3, [r7, #12]
 8008032:	6a1b      	ldr	r3, [r3, #32]
 8008034:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8008036:	697b      	ldr	r3, [r7, #20]
 8008038:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800803c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800803e:	687b      	ldr	r3, [r7, #4]
 8008040:	031b      	lsls	r3, r3, #12
 8008042:	697a      	ldr	r2, [r7, #20]
 8008044:	4313      	orrs	r3, r2
 8008046:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8008048:	693b      	ldr	r3, [r7, #16]
 800804a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800804e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8008050:	68bb      	ldr	r3, [r7, #8]
 8008052:	011b      	lsls	r3, r3, #4
 8008054:	693a      	ldr	r2, [r7, #16]
 8008056:	4313      	orrs	r3, r2
 8008058:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800805a:	68fb      	ldr	r3, [r7, #12]
 800805c:	697a      	ldr	r2, [r7, #20]
 800805e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8008060:	68fb      	ldr	r3, [r7, #12]
 8008062:	693a      	ldr	r2, [r7, #16]
 8008064:	621a      	str	r2, [r3, #32]
}
 8008066:	bf00      	nop
 8008068:	371c      	adds	r7, #28
 800806a:	46bd      	mov	sp, r7
 800806c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008070:	4770      	bx	lr

08008072 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8008072:	b480      	push	{r7}
 8008074:	b085      	sub	sp, #20
 8008076:	af00      	add	r7, sp, #0
 8008078:	6078      	str	r0, [r7, #4]
 800807a:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 800807c:	687b      	ldr	r3, [r7, #4]
 800807e:	689b      	ldr	r3, [r3, #8]
 8008080:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8008082:	68fb      	ldr	r3, [r7, #12]
 8008084:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008088:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800808a:	683a      	ldr	r2, [r7, #0]
 800808c:	68fb      	ldr	r3, [r7, #12]
 800808e:	4313      	orrs	r3, r2
 8008090:	f043 0307 	orr.w	r3, r3, #7
 8008094:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8008096:	687b      	ldr	r3, [r7, #4]
 8008098:	68fa      	ldr	r2, [r7, #12]
 800809a:	609a      	str	r2, [r3, #8]
}
 800809c:	bf00      	nop
 800809e:	3714      	adds	r7, #20
 80080a0:	46bd      	mov	sp, r7
 80080a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080a6:	4770      	bx	lr

080080a8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80080a8:	b480      	push	{r7}
 80080aa:	b087      	sub	sp, #28
 80080ac:	af00      	add	r7, sp, #0
 80080ae:	60f8      	str	r0, [r7, #12]
 80080b0:	60b9      	str	r1, [r7, #8]
 80080b2:	607a      	str	r2, [r7, #4]
 80080b4:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80080b6:	68fb      	ldr	r3, [r7, #12]
 80080b8:	689b      	ldr	r3, [r3, #8]
 80080ba:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80080bc:	697b      	ldr	r3, [r7, #20]
 80080be:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80080c2:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80080c4:	683b      	ldr	r3, [r7, #0]
 80080c6:	021a      	lsls	r2, r3, #8
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	431a      	orrs	r2, r3
 80080cc:	68bb      	ldr	r3, [r7, #8]
 80080ce:	4313      	orrs	r3, r2
 80080d0:	697a      	ldr	r2, [r7, #20]
 80080d2:	4313      	orrs	r3, r2
 80080d4:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80080d6:	68fb      	ldr	r3, [r7, #12]
 80080d8:	697a      	ldr	r2, [r7, #20]
 80080da:	609a      	str	r2, [r3, #8]
}
 80080dc:	bf00      	nop
 80080de:	371c      	adds	r7, #28
 80080e0:	46bd      	mov	sp, r7
 80080e2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080e6:	4770      	bx	lr

080080e8 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80080e8:	b480      	push	{r7}
 80080ea:	b087      	sub	sp, #28
 80080ec:	af00      	add	r7, sp, #0
 80080ee:	60f8      	str	r0, [r7, #12]
 80080f0:	60b9      	str	r1, [r7, #8]
 80080f2:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80080f4:	68bb      	ldr	r3, [r7, #8]
 80080f6:	f003 031f 	and.w	r3, r3, #31
 80080fa:	2201      	movs	r2, #1
 80080fc:	fa02 f303 	lsl.w	r3, r2, r3
 8008100:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8008102:	68fb      	ldr	r3, [r7, #12]
 8008104:	6a1a      	ldr	r2, [r3, #32]
 8008106:	697b      	ldr	r3, [r7, #20]
 8008108:	43db      	mvns	r3, r3
 800810a:	401a      	ands	r2, r3
 800810c:	68fb      	ldr	r3, [r7, #12]
 800810e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8008110:	68fb      	ldr	r3, [r7, #12]
 8008112:	6a1a      	ldr	r2, [r3, #32]
 8008114:	68bb      	ldr	r3, [r7, #8]
 8008116:	f003 031f 	and.w	r3, r3, #31
 800811a:	6879      	ldr	r1, [r7, #4]
 800811c:	fa01 f303 	lsl.w	r3, r1, r3
 8008120:	431a      	orrs	r2, r3
 8008122:	68fb      	ldr	r3, [r7, #12]
 8008124:	621a      	str	r2, [r3, #32]
}
 8008126:	bf00      	nop
 8008128:	371c      	adds	r7, #28
 800812a:	46bd      	mov	sp, r7
 800812c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008130:	4770      	bx	lr
	...

08008134 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8008134:	b480      	push	{r7}
 8008136:	b085      	sub	sp, #20
 8008138:	af00      	add	r7, sp, #0
 800813a:	6078      	str	r0, [r7, #4]
 800813c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800813e:	687b      	ldr	r3, [r7, #4]
 8008140:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008144:	2b01      	cmp	r3, #1
 8008146:	d101      	bne.n	800814c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8008148:	2302      	movs	r3, #2
 800814a:	e050      	b.n	80081ee <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	2201      	movs	r2, #1
 8008150:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8008154:	687b      	ldr	r3, [r7, #4]
 8008156:	2202      	movs	r2, #2
 8008158:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	681b      	ldr	r3, [r3, #0]
 8008160:	685b      	ldr	r3, [r3, #4]
 8008162:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8008164:	687b      	ldr	r3, [r7, #4]
 8008166:	681b      	ldr	r3, [r3, #0]
 8008168:	689b      	ldr	r3, [r3, #8]
 800816a:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 800816c:	68fb      	ldr	r3, [r7, #12]
 800816e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8008172:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8008174:	683b      	ldr	r3, [r7, #0]
 8008176:	681b      	ldr	r3, [r3, #0]
 8008178:	68fa      	ldr	r2, [r7, #12]
 800817a:	4313      	orrs	r3, r2
 800817c:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 800817e:	687b      	ldr	r3, [r7, #4]
 8008180:	681b      	ldr	r3, [r3, #0]
 8008182:	68fa      	ldr	r2, [r7, #12]
 8008184:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8008186:	687b      	ldr	r3, [r7, #4]
 8008188:	681b      	ldr	r3, [r3, #0]
 800818a:	4a1c      	ldr	r2, [pc, #112]	; (80081fc <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 800818c:	4293      	cmp	r3, r2
 800818e:	d018      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8008190:	687b      	ldr	r3, [r7, #4]
 8008192:	681b      	ldr	r3, [r3, #0]
 8008194:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8008198:	d013      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800819a:	687b      	ldr	r3, [r7, #4]
 800819c:	681b      	ldr	r3, [r3, #0]
 800819e:	4a18      	ldr	r2, [pc, #96]	; (8008200 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80081a0:	4293      	cmp	r3, r2
 80081a2:	d00e      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081a4:	687b      	ldr	r3, [r7, #4]
 80081a6:	681b      	ldr	r3, [r3, #0]
 80081a8:	4a16      	ldr	r2, [pc, #88]	; (8008204 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80081aa:	4293      	cmp	r3, r2
 80081ac:	d009      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081ae:	687b      	ldr	r3, [r7, #4]
 80081b0:	681b      	ldr	r3, [r3, #0]
 80081b2:	4a15      	ldr	r2, [pc, #84]	; (8008208 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80081b4:	4293      	cmp	r3, r2
 80081b6:	d004      	beq.n	80081c2 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80081b8:	687b      	ldr	r3, [r7, #4]
 80081ba:	681b      	ldr	r3, [r3, #0]
 80081bc:	4a13      	ldr	r2, [pc, #76]	; (800820c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80081be:	4293      	cmp	r3, r2
 80081c0:	d10c      	bne.n	80081dc <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80081c2:	68bb      	ldr	r3, [r7, #8]
 80081c4:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80081c8:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80081ca:	683b      	ldr	r3, [r7, #0]
 80081cc:	685b      	ldr	r3, [r3, #4]
 80081ce:	68ba      	ldr	r2, [r7, #8]
 80081d0:	4313      	orrs	r3, r2
 80081d2:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80081d4:	687b      	ldr	r3, [r7, #4]
 80081d6:	681b      	ldr	r3, [r3, #0]
 80081d8:	68ba      	ldr	r2, [r7, #8]
 80081da:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80081dc:	687b      	ldr	r3, [r7, #4]
 80081de:	2201      	movs	r2, #1
 80081e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80081e4:	687b      	ldr	r3, [r7, #4]
 80081e6:	2200      	movs	r2, #0
 80081e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80081ec:	2300      	movs	r3, #0
}
 80081ee:	4618      	mov	r0, r3
 80081f0:	3714      	adds	r7, #20
 80081f2:	46bd      	mov	sp, r7
 80081f4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081f8:	4770      	bx	lr
 80081fa:	bf00      	nop
 80081fc:	40010000 	.word	0x40010000
 8008200:	40000400 	.word	0x40000400
 8008204:	40000800 	.word	0x40000800
 8008208:	40000c00 	.word	0x40000c00
 800820c:	40014000 	.word	0x40014000

08008210 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8008210:	b480      	push	{r7}
 8008212:	b083      	sub	sp, #12
 8008214:	af00      	add	r7, sp, #0
 8008216:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8008218:	bf00      	nop
 800821a:	370c      	adds	r7, #12
 800821c:	46bd      	mov	sp, r7
 800821e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008222:	4770      	bx	lr

08008224 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8008224:	b480      	push	{r7}
 8008226:	b083      	sub	sp, #12
 8008228:	af00      	add	r7, sp, #0
 800822a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800822c:	bf00      	nop
 800822e:	370c      	adds	r7, #12
 8008230:	46bd      	mov	sp, r7
 8008232:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008236:	4770      	bx	lr

08008238 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8008238:	b580      	push	{r7, lr}
 800823a:	b082      	sub	sp, #8
 800823c:	af00      	add	r7, sp, #0
 800823e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8008240:	687b      	ldr	r3, [r7, #4]
 8008242:	2b00      	cmp	r3, #0
 8008244:	d101      	bne.n	800824a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8008246:	2301      	movs	r3, #1
 8008248:	e03f      	b.n	80082ca <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800824a:	687b      	ldr	r3, [r7, #4]
 800824c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008250:	b2db      	uxtb	r3, r3
 8008252:	2b00      	cmp	r3, #0
 8008254:	d106      	bne.n	8008264 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	2200      	movs	r2, #0
 800825a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 800825e:	6878      	ldr	r0, [r7, #4]
 8008260:	f7fb fabc 	bl	80037dc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8008264:	687b      	ldr	r3, [r7, #4]
 8008266:	2224      	movs	r2, #36	; 0x24
 8008268:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	68da      	ldr	r2, [r3, #12]
 8008272:	687b      	ldr	r3, [r7, #4]
 8008274:	681b      	ldr	r3, [r3, #0]
 8008276:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800827a:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 800827c:	6878      	ldr	r0, [r7, #4]
 800827e:	f000 fd51 	bl	8008d24 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8008282:	687b      	ldr	r3, [r7, #4]
 8008284:	681b      	ldr	r3, [r3, #0]
 8008286:	691a      	ldr	r2, [r3, #16]
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	681b      	ldr	r3, [r3, #0]
 800828c:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8008290:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8008292:	687b      	ldr	r3, [r7, #4]
 8008294:	681b      	ldr	r3, [r3, #0]
 8008296:	695a      	ldr	r2, [r3, #20]
 8008298:	687b      	ldr	r3, [r7, #4]
 800829a:	681b      	ldr	r3, [r3, #0]
 800829c:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80082a0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	68da      	ldr	r2, [r3, #12]
 80082a8:	687b      	ldr	r3, [r7, #4]
 80082aa:	681b      	ldr	r3, [r3, #0]
 80082ac:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80082b0:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	2200      	movs	r2, #0
 80082b6:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80082b8:	687b      	ldr	r3, [r7, #4]
 80082ba:	2220      	movs	r2, #32
 80082bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80082c0:	687b      	ldr	r3, [r7, #4]
 80082c2:	2220      	movs	r2, #32
 80082c4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80082c8:	2300      	movs	r3, #0
}
 80082ca:	4618      	mov	r0, r3
 80082cc:	3708      	adds	r7, #8
 80082ce:	46bd      	mov	sp, r7
 80082d0:	bd80      	pop	{r7, pc}
	...

080082d4 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80082d4:	b580      	push	{r7, lr}
 80082d6:	b086      	sub	sp, #24
 80082d8:	af00      	add	r7, sp, #0
 80082da:	60f8      	str	r0, [r7, #12]
 80082dc:	60b9      	str	r1, [r7, #8]
 80082de:	4613      	mov	r3, r2
 80082e0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80082e2:	68fb      	ldr	r3, [r7, #12]
 80082e4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80082e8:	b2db      	uxtb	r3, r3
 80082ea:	2b20      	cmp	r3, #32
 80082ec:	d153      	bne.n	8008396 <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80082ee:	68bb      	ldr	r3, [r7, #8]
 80082f0:	2b00      	cmp	r3, #0
 80082f2:	d002      	beq.n	80082fa <HAL_UART_Transmit_DMA+0x26>
 80082f4:	88fb      	ldrh	r3, [r7, #6]
 80082f6:	2b00      	cmp	r3, #0
 80082f8:	d101      	bne.n	80082fe <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80082fa:	2301      	movs	r3, #1
 80082fc:	e04c      	b.n	8008398 <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80082fe:	68fb      	ldr	r3, [r7, #12]
 8008300:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8008304:	2b01      	cmp	r3, #1
 8008306:	d101      	bne.n	800830c <HAL_UART_Transmit_DMA+0x38>
 8008308:	2302      	movs	r3, #2
 800830a:	e045      	b.n	8008398 <HAL_UART_Transmit_DMA+0xc4>
 800830c:	68fb      	ldr	r3, [r7, #12]
 800830e:	2201      	movs	r2, #1
 8008310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8008314:	68ba      	ldr	r2, [r7, #8]
 8008316:	68fb      	ldr	r3, [r7, #12]
 8008318:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800831a:	68fb      	ldr	r3, [r7, #12]
 800831c:	88fa      	ldrh	r2, [r7, #6]
 800831e:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8008320:	68fb      	ldr	r3, [r7, #12]
 8008322:	88fa      	ldrh	r2, [r7, #6]
 8008324:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 8008326:	68fb      	ldr	r3, [r7, #12]
 8008328:	2200      	movs	r2, #0
 800832a:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 800832c:	68fb      	ldr	r3, [r7, #12]
 800832e:	2221      	movs	r2, #33	; 0x21
 8008330:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8008334:	68fb      	ldr	r3, [r7, #12]
 8008336:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008338:	4a19      	ldr	r2, [pc, #100]	; (80083a0 <HAL_UART_Transmit_DMA+0xcc>)
 800833a:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 800833c:	68fb      	ldr	r3, [r7, #12]
 800833e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008340:	4a18      	ldr	r2, [pc, #96]	; (80083a4 <HAL_UART_Transmit_DMA+0xd0>)
 8008342:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8008344:	68fb      	ldr	r3, [r7, #12]
 8008346:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008348:	4a17      	ldr	r2, [pc, #92]	; (80083a8 <HAL_UART_Transmit_DMA+0xd4>)
 800834a:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 800834c:	68fb      	ldr	r3, [r7, #12]
 800834e:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8008350:	2200      	movs	r2, #0
 8008352:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8008354:	f107 0308 	add.w	r3, r7, #8
 8008358:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800835a:	68fb      	ldr	r3, [r7, #12]
 800835c:	6b58      	ldr	r0, [r3, #52]	; 0x34
 800835e:	697b      	ldr	r3, [r7, #20]
 8008360:	6819      	ldr	r1, [r3, #0]
 8008362:	68fb      	ldr	r3, [r7, #12]
 8008364:	681b      	ldr	r3, [r3, #0]
 8008366:	3304      	adds	r3, #4
 8008368:	461a      	mov	r2, r3
 800836a:	88fb      	ldrh	r3, [r7, #6]
 800836c:	f7fb fe94 	bl	8004098 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8008370:	68fb      	ldr	r3, [r7, #12]
 8008372:	681b      	ldr	r3, [r3, #0]
 8008374:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8008378:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800837a:	68fb      	ldr	r3, [r7, #12]
 800837c:	2200      	movs	r2, #0
 800837e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008382:	68fb      	ldr	r3, [r7, #12]
 8008384:	681b      	ldr	r3, [r3, #0]
 8008386:	695a      	ldr	r2, [r3, #20]
 8008388:	68fb      	ldr	r3, [r7, #12]
 800838a:	681b      	ldr	r3, [r3, #0]
 800838c:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8008390:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8008392:	2300      	movs	r3, #0
 8008394:	e000      	b.n	8008398 <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 8008396:	2302      	movs	r3, #2
  }
}
 8008398:	4618      	mov	r0, r3
 800839a:	3718      	adds	r7, #24
 800839c:	46bd      	mov	sp, r7
 800839e:	bd80      	pop	{r7, pc}
 80083a0:	080087e1 	.word	0x080087e1
 80083a4:	08008833 	.word	0x08008833
 80083a8:	0800891b 	.word	0x0800891b

080083ac <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80083ac:	b580      	push	{r7, lr}
 80083ae:	b084      	sub	sp, #16
 80083b0:	af00      	add	r7, sp, #0
 80083b2:	60f8      	str	r0, [r7, #12]
 80083b4:	60b9      	str	r1, [r7, #8]
 80083b6:	4613      	mov	r3, r2
 80083b8:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80083ba:	68fb      	ldr	r3, [r7, #12]
 80083bc:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80083c0:	b2db      	uxtb	r3, r3
 80083c2:	2b20      	cmp	r3, #32
 80083c4:	d11d      	bne.n	8008402 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80083c6:	68bb      	ldr	r3, [r7, #8]
 80083c8:	2b00      	cmp	r3, #0
 80083ca:	d002      	beq.n	80083d2 <HAL_UART_Receive_DMA+0x26>
 80083cc:	88fb      	ldrh	r3, [r7, #6]
 80083ce:	2b00      	cmp	r3, #0
 80083d0:	d101      	bne.n	80083d6 <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80083d2:	2301      	movs	r3, #1
 80083d4:	e016      	b.n	8008404 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80083d6:	68fb      	ldr	r3, [r7, #12]
 80083d8:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80083dc:	2b01      	cmp	r3, #1
 80083de:	d101      	bne.n	80083e4 <HAL_UART_Receive_DMA+0x38>
 80083e0:	2302      	movs	r3, #2
 80083e2:	e00f      	b.n	8008404 <HAL_UART_Receive_DMA+0x58>
 80083e4:	68fb      	ldr	r3, [r7, #12]
 80083e6:	2201      	movs	r2, #1
 80083e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80083ec:	68fb      	ldr	r3, [r7, #12]
 80083ee:	2200      	movs	r2, #0
 80083f0:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80083f2:	88fb      	ldrh	r3, [r7, #6]
 80083f4:	461a      	mov	r2, r3
 80083f6:	68b9      	ldr	r1, [r7, #8]
 80083f8:	68f8      	ldr	r0, [r7, #12]
 80083fa:	f000 fad9 	bl	80089b0 <UART_Start_Receive_DMA>
 80083fe:	4603      	mov	r3, r0
 8008400:	e000      	b.n	8008404 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 8008402:	2302      	movs	r3, #2
  }
}
 8008404:	4618      	mov	r0, r3
 8008406:	3710      	adds	r7, #16
 8008408:	46bd      	mov	sp, r7
 800840a:	bd80      	pop	{r7, pc}

0800840c <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 800840c:	b580      	push	{r7, lr}
 800840e:	b08a      	sub	sp, #40	; 0x28
 8008410:	af00      	add	r7, sp, #0
 8008412:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8008414:	687b      	ldr	r3, [r7, #4]
 8008416:	681b      	ldr	r3, [r3, #0]
 8008418:	681b      	ldr	r3, [r3, #0]
 800841a:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 800841c:	687b      	ldr	r3, [r7, #4]
 800841e:	681b      	ldr	r3, [r3, #0]
 8008420:	68db      	ldr	r3, [r3, #12]
 8008422:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8008424:	687b      	ldr	r3, [r7, #4]
 8008426:	681b      	ldr	r3, [r3, #0]
 8008428:	695b      	ldr	r3, [r3, #20]
 800842a:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 800842c:	2300      	movs	r3, #0
 800842e:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8008430:	2300      	movs	r3, #0
 8008432:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8008434:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008436:	f003 030f 	and.w	r3, r3, #15
 800843a:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 800843c:	69bb      	ldr	r3, [r7, #24]
 800843e:	2b00      	cmp	r3, #0
 8008440:	d10d      	bne.n	800845e <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008442:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008444:	f003 0320 	and.w	r3, r3, #32
 8008448:	2b00      	cmp	r3, #0
 800844a:	d008      	beq.n	800845e <HAL_UART_IRQHandler+0x52>
 800844c:	6a3b      	ldr	r3, [r7, #32]
 800844e:	f003 0320 	and.w	r3, r3, #32
 8008452:	2b00      	cmp	r3, #0
 8008454:	d003      	beq.n	800845e <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8008456:	6878      	ldr	r0, [r7, #4]
 8008458:	f000 fbcd 	bl	8008bf6 <UART_Receive_IT>
      return;
 800845c:	e17c      	b.n	8008758 <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 800845e:	69bb      	ldr	r3, [r7, #24]
 8008460:	2b00      	cmp	r3, #0
 8008462:	f000 80b1 	beq.w	80085c8 <HAL_UART_IRQHandler+0x1bc>
 8008466:	69fb      	ldr	r3, [r7, #28]
 8008468:	f003 0301 	and.w	r3, r3, #1
 800846c:	2b00      	cmp	r3, #0
 800846e:	d105      	bne.n	800847c <HAL_UART_IRQHandler+0x70>
 8008470:	6a3b      	ldr	r3, [r7, #32]
 8008472:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8008476:	2b00      	cmp	r3, #0
 8008478:	f000 80a6 	beq.w	80085c8 <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 800847c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800847e:	f003 0301 	and.w	r3, r3, #1
 8008482:	2b00      	cmp	r3, #0
 8008484:	d00a      	beq.n	800849c <HAL_UART_IRQHandler+0x90>
 8008486:	6a3b      	ldr	r3, [r7, #32]
 8008488:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800848c:	2b00      	cmp	r3, #0
 800848e:	d005      	beq.n	800849c <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8008490:	687b      	ldr	r3, [r7, #4]
 8008492:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008494:	f043 0201 	orr.w	r2, r3, #1
 8008498:	687b      	ldr	r3, [r7, #4]
 800849a:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 800849c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800849e:	f003 0304 	and.w	r3, r3, #4
 80084a2:	2b00      	cmp	r3, #0
 80084a4:	d00a      	beq.n	80084bc <HAL_UART_IRQHandler+0xb0>
 80084a6:	69fb      	ldr	r3, [r7, #28]
 80084a8:	f003 0301 	and.w	r3, r3, #1
 80084ac:	2b00      	cmp	r3, #0
 80084ae:	d005      	beq.n	80084bc <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 80084b0:	687b      	ldr	r3, [r7, #4]
 80084b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084b4:	f043 0202 	orr.w	r2, r3, #2
 80084b8:	687b      	ldr	r3, [r7, #4]
 80084ba:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 80084bc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084be:	f003 0302 	and.w	r3, r3, #2
 80084c2:	2b00      	cmp	r3, #0
 80084c4:	d00a      	beq.n	80084dc <HAL_UART_IRQHandler+0xd0>
 80084c6:	69fb      	ldr	r3, [r7, #28]
 80084c8:	f003 0301 	and.w	r3, r3, #1
 80084cc:	2b00      	cmp	r3, #0
 80084ce:	d005      	beq.n	80084dc <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 80084d0:	687b      	ldr	r3, [r7, #4]
 80084d2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084d4:	f043 0204 	orr.w	r2, r3, #4
 80084d8:	687b      	ldr	r3, [r7, #4]
 80084da:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 80084dc:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80084de:	f003 0308 	and.w	r3, r3, #8
 80084e2:	2b00      	cmp	r3, #0
 80084e4:	d00f      	beq.n	8008506 <HAL_UART_IRQHandler+0xfa>
 80084e6:	6a3b      	ldr	r3, [r7, #32]
 80084e8:	f003 0320 	and.w	r3, r3, #32
 80084ec:	2b00      	cmp	r3, #0
 80084ee:	d104      	bne.n	80084fa <HAL_UART_IRQHandler+0xee>
 80084f0:	69fb      	ldr	r3, [r7, #28]
 80084f2:	f003 0301 	and.w	r3, r3, #1
 80084f6:	2b00      	cmp	r3, #0
 80084f8:	d005      	beq.n	8008506 <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 80084fa:	687b      	ldr	r3, [r7, #4]
 80084fc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80084fe:	f043 0208 	orr.w	r2, r3, #8
 8008502:	687b      	ldr	r3, [r7, #4]
 8008504:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8008506:	687b      	ldr	r3, [r7, #4]
 8008508:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800850a:	2b00      	cmp	r3, #0
 800850c:	f000 811f 	beq.w	800874e <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8008510:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008512:	f003 0320 	and.w	r3, r3, #32
 8008516:	2b00      	cmp	r3, #0
 8008518:	d007      	beq.n	800852a <HAL_UART_IRQHandler+0x11e>
 800851a:	6a3b      	ldr	r3, [r7, #32]
 800851c:	f003 0320 	and.w	r3, r3, #32
 8008520:	2b00      	cmp	r3, #0
 8008522:	d002      	beq.n	800852a <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8008524:	6878      	ldr	r0, [r7, #4]
 8008526:	f000 fb66 	bl	8008bf6 <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 800852a:	687b      	ldr	r3, [r7, #4]
 800852c:	681b      	ldr	r3, [r3, #0]
 800852e:	695b      	ldr	r3, [r3, #20]
 8008530:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008534:	2b40      	cmp	r3, #64	; 0x40
 8008536:	bf0c      	ite	eq
 8008538:	2301      	moveq	r3, #1
 800853a:	2300      	movne	r3, #0
 800853c:	b2db      	uxtb	r3, r3
 800853e:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8008540:	687b      	ldr	r3, [r7, #4]
 8008542:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008544:	f003 0308 	and.w	r3, r3, #8
 8008548:	2b00      	cmp	r3, #0
 800854a:	d102      	bne.n	8008552 <HAL_UART_IRQHandler+0x146>
 800854c:	697b      	ldr	r3, [r7, #20]
 800854e:	2b00      	cmp	r3, #0
 8008550:	d031      	beq.n	80085b6 <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8008552:	6878      	ldr	r0, [r7, #4]
 8008554:	f000 faa6 	bl	8008aa4 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008558:	687b      	ldr	r3, [r7, #4]
 800855a:	681b      	ldr	r3, [r3, #0]
 800855c:	695b      	ldr	r3, [r3, #20]
 800855e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008562:	2b40      	cmp	r3, #64	; 0x40
 8008564:	d123      	bne.n	80085ae <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008566:	687b      	ldr	r3, [r7, #4]
 8008568:	681b      	ldr	r3, [r3, #0]
 800856a:	695a      	ldr	r2, [r3, #20]
 800856c:	687b      	ldr	r3, [r7, #4]
 800856e:	681b      	ldr	r3, [r3, #0]
 8008570:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008574:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8008576:	687b      	ldr	r3, [r7, #4]
 8008578:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800857a:	2b00      	cmp	r3, #0
 800857c:	d013      	beq.n	80085a6 <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 800857e:	687b      	ldr	r3, [r7, #4]
 8008580:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008582:	4a77      	ldr	r2, [pc, #476]	; (8008760 <HAL_UART_IRQHandler+0x354>)
 8008584:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8008586:	687b      	ldr	r3, [r7, #4]
 8008588:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800858a:	4618      	mov	r0, r3
 800858c:	f7fb fe4c 	bl	8004228 <HAL_DMA_Abort_IT>
 8008590:	4603      	mov	r3, r0
 8008592:	2b00      	cmp	r3, #0
 8008594:	d016      	beq.n	80085c4 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8008596:	687b      	ldr	r3, [r7, #4]
 8008598:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800859a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800859c:	687a      	ldr	r2, [r7, #4]
 800859e:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80085a0:	4610      	mov	r0, r2
 80085a2:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085a4:	e00e      	b.n	80085c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 80085a6:	6878      	ldr	r0, [r7, #4]
 80085a8:	f000 f904 	bl	80087b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085ac:	e00a      	b.n	80085c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 80085ae:	6878      	ldr	r0, [r7, #4]
 80085b0:	f000 f900 	bl	80087b4 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085b4:	e006      	b.n	80085c4 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 80085b6:	6878      	ldr	r0, [r7, #4]
 80085b8:	f000 f8fc 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 80085bc:	687b      	ldr	r3, [r7, #4]
 80085be:	2200      	movs	r2, #0
 80085c0:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 80085c2:	e0c4      	b.n	800874e <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 80085c4:	bf00      	nop
    return;
 80085c6:	e0c2      	b.n	800874e <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80085c8:	687b      	ldr	r3, [r7, #4]
 80085ca:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80085cc:	2b01      	cmp	r3, #1
 80085ce:	f040 80a2 	bne.w	8008716 <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 80085d2:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 80085d4:	f003 0310 	and.w	r3, r3, #16
 80085d8:	2b00      	cmp	r3, #0
 80085da:	f000 809c 	beq.w	8008716 <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 80085de:	6a3b      	ldr	r3, [r7, #32]
 80085e0:	f003 0310 	and.w	r3, r3, #16
 80085e4:	2b00      	cmp	r3, #0
 80085e6:	f000 8096 	beq.w	8008716 <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 80085ea:	2300      	movs	r3, #0
 80085ec:	60fb      	str	r3, [r7, #12]
 80085ee:	687b      	ldr	r3, [r7, #4]
 80085f0:	681b      	ldr	r3, [r3, #0]
 80085f2:	681b      	ldr	r3, [r3, #0]
 80085f4:	60fb      	str	r3, [r7, #12]
 80085f6:	687b      	ldr	r3, [r7, #4]
 80085f8:	681b      	ldr	r3, [r3, #0]
 80085fa:	685b      	ldr	r3, [r3, #4]
 80085fc:	60fb      	str	r3, [r7, #12]
 80085fe:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8008600:	687b      	ldr	r3, [r7, #4]
 8008602:	681b      	ldr	r3, [r3, #0]
 8008604:	695b      	ldr	r3, [r3, #20]
 8008606:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800860a:	2b40      	cmp	r3, #64	; 0x40
 800860c:	d14f      	bne.n	80086ae <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 800860e:	687b      	ldr	r3, [r7, #4]
 8008610:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008612:	681b      	ldr	r3, [r3, #0]
 8008614:	685b      	ldr	r3, [r3, #4]
 8008616:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8008618:	8a3b      	ldrh	r3, [r7, #16]
 800861a:	2b00      	cmp	r3, #0
 800861c:	f000 8099 	beq.w	8008752 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8008620:	687b      	ldr	r3, [r7, #4]
 8008622:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008624:	8a3a      	ldrh	r2, [r7, #16]
 8008626:	429a      	cmp	r2, r3
 8008628:	f080 8093 	bcs.w	8008752 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 800862c:	687b      	ldr	r3, [r7, #4]
 800862e:	8a3a      	ldrh	r2, [r7, #16]
 8008630:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8008632:	687b      	ldr	r3, [r7, #4]
 8008634:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008636:	69db      	ldr	r3, [r3, #28]
 8008638:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 800863c:	d02b      	beq.n	8008696 <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 800863e:	687b      	ldr	r3, [r7, #4]
 8008640:	681b      	ldr	r3, [r3, #0]
 8008642:	68da      	ldr	r2, [r3, #12]
 8008644:	687b      	ldr	r3, [r7, #4]
 8008646:	681b      	ldr	r3, [r3, #0]
 8008648:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800864c:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 800864e:	687b      	ldr	r3, [r7, #4]
 8008650:	681b      	ldr	r3, [r3, #0]
 8008652:	695a      	ldr	r2, [r3, #20]
 8008654:	687b      	ldr	r3, [r7, #4]
 8008656:	681b      	ldr	r3, [r3, #0]
 8008658:	f022 0201 	bic.w	r2, r2, #1
 800865c:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 800865e:	687b      	ldr	r3, [r7, #4]
 8008660:	681b      	ldr	r3, [r3, #0]
 8008662:	695a      	ldr	r2, [r3, #20]
 8008664:	687b      	ldr	r3, [r7, #4]
 8008666:	681b      	ldr	r3, [r3, #0]
 8008668:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800866c:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 800866e:	687b      	ldr	r3, [r7, #4]
 8008670:	2220      	movs	r2, #32
 8008672:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008676:	687b      	ldr	r3, [r7, #4]
 8008678:	2200      	movs	r2, #0
 800867a:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 800867c:	687b      	ldr	r3, [r7, #4]
 800867e:	681b      	ldr	r3, [r3, #0]
 8008680:	68da      	ldr	r2, [r3, #12]
 8008682:	687b      	ldr	r3, [r7, #4]
 8008684:	681b      	ldr	r3, [r3, #0]
 8008686:	f022 0210 	bic.w	r2, r2, #16
 800868a:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 800868c:	687b      	ldr	r3, [r7, #4]
 800868e:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008690:	4618      	mov	r0, r3
 8008692:	f7fb fd59 	bl	8004148 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8008696:	687b      	ldr	r3, [r7, #4]
 8008698:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 800869a:	687b      	ldr	r3, [r7, #4]
 800869c:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800869e:	b29b      	uxth	r3, r3
 80086a0:	1ad3      	subs	r3, r2, r3
 80086a2:	b29b      	uxth	r3, r3
 80086a4:	4619      	mov	r1, r3
 80086a6:	6878      	ldr	r0, [r7, #4]
 80086a8:	f000 f88e 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 80086ac:	e051      	b.n	8008752 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 80086ae:	687b      	ldr	r3, [r7, #4]
 80086b0:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 80086b2:	687b      	ldr	r3, [r7, #4]
 80086b4:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086b6:	b29b      	uxth	r3, r3
 80086b8:	1ad3      	subs	r3, r2, r3
 80086ba:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 80086bc:	687b      	ldr	r3, [r7, #4]
 80086be:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 80086c0:	b29b      	uxth	r3, r3
 80086c2:	2b00      	cmp	r3, #0
 80086c4:	d047      	beq.n	8008756 <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 80086c6:	8a7b      	ldrh	r3, [r7, #18]
 80086c8:	2b00      	cmp	r3, #0
 80086ca:	d044      	beq.n	8008756 <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80086cc:	687b      	ldr	r3, [r7, #4]
 80086ce:	681b      	ldr	r3, [r3, #0]
 80086d0:	68da      	ldr	r2, [r3, #12]
 80086d2:	687b      	ldr	r3, [r7, #4]
 80086d4:	681b      	ldr	r3, [r3, #0]
 80086d6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80086da:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80086dc:	687b      	ldr	r3, [r7, #4]
 80086de:	681b      	ldr	r3, [r3, #0]
 80086e0:	695a      	ldr	r2, [r3, #20]
 80086e2:	687b      	ldr	r3, [r7, #4]
 80086e4:	681b      	ldr	r3, [r3, #0]
 80086e6:	f022 0201 	bic.w	r2, r2, #1
 80086ea:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 80086ec:	687b      	ldr	r3, [r7, #4]
 80086ee:	2220      	movs	r2, #32
 80086f0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80086f4:	687b      	ldr	r3, [r7, #4]
 80086f6:	2200      	movs	r2, #0
 80086f8:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80086fa:	687b      	ldr	r3, [r7, #4]
 80086fc:	681b      	ldr	r3, [r3, #0]
 80086fe:	68da      	ldr	r2, [r3, #12]
 8008700:	687b      	ldr	r3, [r7, #4]
 8008702:	681b      	ldr	r3, [r3, #0]
 8008704:	f022 0210 	bic.w	r2, r2, #16
 8008708:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 800870a:	8a7b      	ldrh	r3, [r7, #18]
 800870c:	4619      	mov	r1, r3
 800870e:	6878      	ldr	r0, [r7, #4]
 8008710:	f000 f85a 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8008714:	e01f      	b.n	8008756 <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8008716:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008718:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800871c:	2b00      	cmp	r3, #0
 800871e:	d008      	beq.n	8008732 <HAL_UART_IRQHandler+0x326>
 8008720:	6a3b      	ldr	r3, [r7, #32]
 8008722:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008726:	2b00      	cmp	r3, #0
 8008728:	d003      	beq.n	8008732 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 800872a:	6878      	ldr	r0, [r7, #4]
 800872c:	f000 f9fb 	bl	8008b26 <UART_Transmit_IT>
    return;
 8008730:	e012      	b.n	8008758 <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8008732:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8008734:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008738:	2b00      	cmp	r3, #0
 800873a:	d00d      	beq.n	8008758 <HAL_UART_IRQHandler+0x34c>
 800873c:	6a3b      	ldr	r3, [r7, #32]
 800873e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8008742:	2b00      	cmp	r3, #0
 8008744:	d008      	beq.n	8008758 <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8008746:	6878      	ldr	r0, [r7, #4]
 8008748:	f000 fa3d 	bl	8008bc6 <UART_EndTransmit_IT>
    return;
 800874c:	e004      	b.n	8008758 <HAL_UART_IRQHandler+0x34c>
    return;
 800874e:	bf00      	nop
 8008750:	e002      	b.n	8008758 <HAL_UART_IRQHandler+0x34c>
      return;
 8008752:	bf00      	nop
 8008754:	e000      	b.n	8008758 <HAL_UART_IRQHandler+0x34c>
      return;
 8008756:	bf00      	nop
  }
}
 8008758:	3728      	adds	r7, #40	; 0x28
 800875a:	46bd      	mov	sp, r7
 800875c:	bd80      	pop	{r7, pc}
 800875e:	bf00      	nop
 8008760:	08008aff 	.word	0x08008aff

08008764 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8008764:	b480      	push	{r7}
 8008766:	b083      	sub	sp, #12
 8008768:	af00      	add	r7, sp, #0
 800876a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 800876c:	bf00      	nop
 800876e:	370c      	adds	r7, #12
 8008770:	46bd      	mov	sp, r7
 8008772:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008776:	4770      	bx	lr

08008778 <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8008778:	b480      	push	{r7}
 800877a:	b083      	sub	sp, #12
 800877c:	af00      	add	r7, sp, #0
 800877e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8008780:	bf00      	nop
 8008782:	370c      	adds	r7, #12
 8008784:	46bd      	mov	sp, r7
 8008786:	f85d 7b04 	ldr.w	r7, [sp], #4
 800878a:	4770      	bx	lr

0800878c <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 800878c:	b480      	push	{r7}
 800878e:	b083      	sub	sp, #12
 8008790:	af00      	add	r7, sp, #0
 8008792:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8008794:	bf00      	nop
 8008796:	370c      	adds	r7, #12
 8008798:	46bd      	mov	sp, r7
 800879a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800879e:	4770      	bx	lr

080087a0 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 80087a0:	b480      	push	{r7}
 80087a2:	b083      	sub	sp, #12
 80087a4:	af00      	add	r7, sp, #0
 80087a6:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 80087a8:	bf00      	nop
 80087aa:	370c      	adds	r7, #12
 80087ac:	46bd      	mov	sp, r7
 80087ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087b2:	4770      	bx	lr

080087b4 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 80087b4:	b480      	push	{r7}
 80087b6:	b083      	sub	sp, #12
 80087b8:	af00      	add	r7, sp, #0
 80087ba:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 80087bc:	bf00      	nop
 80087be:	370c      	adds	r7, #12
 80087c0:	46bd      	mov	sp, r7
 80087c2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087c6:	4770      	bx	lr

080087c8 <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 80087c8:	b480      	push	{r7}
 80087ca:	b083      	sub	sp, #12
 80087cc:	af00      	add	r7, sp, #0
 80087ce:	6078      	str	r0, [r7, #4]
 80087d0:	460b      	mov	r3, r1
 80087d2:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 80087d4:	bf00      	nop
 80087d6:	370c      	adds	r7, #12
 80087d8:	46bd      	mov	sp, r7
 80087da:	f85d 7b04 	ldr.w	r7, [sp], #4
 80087de:	4770      	bx	lr

080087e0 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 80087e0:	b580      	push	{r7, lr}
 80087e2:	b084      	sub	sp, #16
 80087e4:	af00      	add	r7, sp, #0
 80087e6:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80087e8:	687b      	ldr	r3, [r7, #4]
 80087ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80087ec:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 80087ee:	687b      	ldr	r3, [r7, #4]
 80087f0:	681b      	ldr	r3, [r3, #0]
 80087f2:	681b      	ldr	r3, [r3, #0]
 80087f4:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80087f8:	2b00      	cmp	r3, #0
 80087fa:	d113      	bne.n	8008824 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 80087fc:	68fb      	ldr	r3, [r7, #12]
 80087fe:	2200      	movs	r2, #0
 8008800:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8008802:	68fb      	ldr	r3, [r7, #12]
 8008804:	681b      	ldr	r3, [r3, #0]
 8008806:	695a      	ldr	r2, [r3, #20]
 8008808:	68fb      	ldr	r3, [r7, #12]
 800880a:	681b      	ldr	r3, [r3, #0]
 800880c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008810:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8008812:	68fb      	ldr	r3, [r7, #12]
 8008814:	681b      	ldr	r3, [r3, #0]
 8008816:	68da      	ldr	r2, [r3, #12]
 8008818:	68fb      	ldr	r3, [r7, #12]
 800881a:	681b      	ldr	r3, [r3, #0]
 800881c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008820:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8008822:	e002      	b.n	800882a <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8008824:	68f8      	ldr	r0, [r7, #12]
 8008826:	f7ff ff9d 	bl	8008764 <HAL_UART_TxCpltCallback>
}
 800882a:	bf00      	nop
 800882c:	3710      	adds	r7, #16
 800882e:	46bd      	mov	sp, r7
 8008830:	bd80      	pop	{r7, pc}

08008832 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8008832:	b580      	push	{r7, lr}
 8008834:	b084      	sub	sp, #16
 8008836:	af00      	add	r7, sp, #0
 8008838:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 800883a:	687b      	ldr	r3, [r7, #4]
 800883c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800883e:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8008840:	68f8      	ldr	r0, [r7, #12]
 8008842:	f7ff ff99 	bl	8008778 <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008846:	bf00      	nop
 8008848:	3710      	adds	r7, #16
 800884a:	46bd      	mov	sp, r7
 800884c:	bd80      	pop	{r7, pc}

0800884e <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 800884e:	b580      	push	{r7, lr}
 8008850:	b084      	sub	sp, #16
 8008852:	af00      	add	r7, sp, #0
 8008854:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008856:	687b      	ldr	r3, [r7, #4]
 8008858:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800885a:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 800885c:	687b      	ldr	r3, [r7, #4]
 800885e:	681b      	ldr	r3, [r3, #0]
 8008860:	681b      	ldr	r3, [r3, #0]
 8008862:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8008866:	2b00      	cmp	r3, #0
 8008868:	d12a      	bne.n	80088c0 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 800886a:	68fb      	ldr	r3, [r7, #12]
 800886c:	2200      	movs	r2, #0
 800886e:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008870:	68fb      	ldr	r3, [r7, #12]
 8008872:	681b      	ldr	r3, [r3, #0]
 8008874:	68da      	ldr	r2, [r3, #12]
 8008876:	68fb      	ldr	r3, [r7, #12]
 8008878:	681b      	ldr	r3, [r3, #0]
 800887a:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 800887e:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008880:	68fb      	ldr	r3, [r7, #12]
 8008882:	681b      	ldr	r3, [r3, #0]
 8008884:	695a      	ldr	r2, [r3, #20]
 8008886:	68fb      	ldr	r3, [r7, #12]
 8008888:	681b      	ldr	r3, [r3, #0]
 800888a:	f022 0201 	bic.w	r2, r2, #1
 800888e:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008890:	68fb      	ldr	r3, [r7, #12]
 8008892:	681b      	ldr	r3, [r3, #0]
 8008894:	695a      	ldr	r2, [r3, #20]
 8008896:	68fb      	ldr	r3, [r7, #12]
 8008898:	681b      	ldr	r3, [r3, #0]
 800889a:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 800889e:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 80088a0:	68fb      	ldr	r3, [r7, #12]
 80088a2:	2220      	movs	r2, #32
 80088a4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088a8:	68fb      	ldr	r3, [r7, #12]
 80088aa:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088ac:	2b01      	cmp	r3, #1
 80088ae:	d107      	bne.n	80088c0 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80088b0:	68fb      	ldr	r3, [r7, #12]
 80088b2:	681b      	ldr	r3, [r3, #0]
 80088b4:	68da      	ldr	r2, [r3, #12]
 80088b6:	68fb      	ldr	r3, [r7, #12]
 80088b8:	681b      	ldr	r3, [r3, #0]
 80088ba:	f022 0210 	bic.w	r2, r2, #16
 80088be:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088c0:	68fb      	ldr	r3, [r7, #12]
 80088c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088c4:	2b01      	cmp	r3, #1
 80088c6:	d106      	bne.n	80088d6 <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80088c8:	68fb      	ldr	r3, [r7, #12]
 80088ca:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088cc:	4619      	mov	r1, r3
 80088ce:	68f8      	ldr	r0, [r7, #12]
 80088d0:	f7ff ff7a 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 80088d4:	e002      	b.n	80088dc <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 80088d6:	68f8      	ldr	r0, [r7, #12]
 80088d8:	f7ff ff58 	bl	800878c <HAL_UART_RxCpltCallback>
}
 80088dc:	bf00      	nop
 80088de:	3710      	adds	r7, #16
 80088e0:	46bd      	mov	sp, r7
 80088e2:	bd80      	pop	{r7, pc}

080088e4 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 80088e4:	b580      	push	{r7, lr}
 80088e6:	b084      	sub	sp, #16
 80088e8:	af00      	add	r7, sp, #0
 80088ea:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80088ec:	687b      	ldr	r3, [r7, #4]
 80088ee:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80088f0:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80088f2:	68fb      	ldr	r3, [r7, #12]
 80088f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80088f6:	2b01      	cmp	r3, #1
 80088f8:	d108      	bne.n	800890c <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 80088fa:	68fb      	ldr	r3, [r7, #12]
 80088fc:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80088fe:	085b      	lsrs	r3, r3, #1
 8008900:	b29b      	uxth	r3, r3
 8008902:	4619      	mov	r1, r3
 8008904:	68f8      	ldr	r0, [r7, #12]
 8008906:	f7ff ff5f 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 800890a:	e002      	b.n	8008912 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 800890c:	68f8      	ldr	r0, [r7, #12]
 800890e:	f7ff ff47 	bl	80087a0 <HAL_UART_RxHalfCpltCallback>
}
 8008912:	bf00      	nop
 8008914:	3710      	adds	r7, #16
 8008916:	46bd      	mov	sp, r7
 8008918:	bd80      	pop	{r7, pc}

0800891a <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 800891a:	b580      	push	{r7, lr}
 800891c:	b084      	sub	sp, #16
 800891e:	af00      	add	r7, sp, #0
 8008920:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8008922:	2300      	movs	r3, #0
 8008924:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008926:	687b      	ldr	r3, [r7, #4]
 8008928:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800892a:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 800892c:	68bb      	ldr	r3, [r7, #8]
 800892e:	681b      	ldr	r3, [r3, #0]
 8008930:	695b      	ldr	r3, [r3, #20]
 8008932:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8008936:	2b80      	cmp	r3, #128	; 0x80
 8008938:	bf0c      	ite	eq
 800893a:	2301      	moveq	r3, #1
 800893c:	2300      	movne	r3, #0
 800893e:	b2db      	uxtb	r3, r3
 8008940:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8008942:	68bb      	ldr	r3, [r7, #8]
 8008944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008948:	b2db      	uxtb	r3, r3
 800894a:	2b21      	cmp	r3, #33	; 0x21
 800894c:	d108      	bne.n	8008960 <UART_DMAError+0x46>
 800894e:	68fb      	ldr	r3, [r7, #12]
 8008950:	2b00      	cmp	r3, #0
 8008952:	d005      	beq.n	8008960 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8008954:	68bb      	ldr	r3, [r7, #8]
 8008956:	2200      	movs	r2, #0
 8008958:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 800895a:	68b8      	ldr	r0, [r7, #8]
 800895c:	f000 f88c 	bl	8008a78 <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8008960:	68bb      	ldr	r3, [r7, #8]
 8008962:	681b      	ldr	r3, [r3, #0]
 8008964:	695b      	ldr	r3, [r3, #20]
 8008966:	f003 0340 	and.w	r3, r3, #64	; 0x40
 800896a:	2b40      	cmp	r3, #64	; 0x40
 800896c:	bf0c      	ite	eq
 800896e:	2301      	moveq	r3, #1
 8008970:	2300      	movne	r3, #0
 8008972:	b2db      	uxtb	r3, r3
 8008974:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8008976:	68bb      	ldr	r3, [r7, #8]
 8008978:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800897c:	b2db      	uxtb	r3, r3
 800897e:	2b22      	cmp	r3, #34	; 0x22
 8008980:	d108      	bne.n	8008994 <UART_DMAError+0x7a>
 8008982:	68fb      	ldr	r3, [r7, #12]
 8008984:	2b00      	cmp	r3, #0
 8008986:	d005      	beq.n	8008994 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8008988:	68bb      	ldr	r3, [r7, #8]
 800898a:	2200      	movs	r2, #0
 800898c:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 800898e:	68b8      	ldr	r0, [r7, #8]
 8008990:	f000 f888 	bl	8008aa4 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8008994:	68bb      	ldr	r3, [r7, #8]
 8008996:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8008998:	f043 0210 	orr.w	r2, r3, #16
 800899c:	68bb      	ldr	r3, [r7, #8]
 800899e:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 80089a0:	68b8      	ldr	r0, [r7, #8]
 80089a2:	f7ff ff07 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 80089a6:	bf00      	nop
 80089a8:	3710      	adds	r7, #16
 80089aa:	46bd      	mov	sp, r7
 80089ac:	bd80      	pop	{r7, pc}
	...

080089b0 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80089b0:	b580      	push	{r7, lr}
 80089b2:	b086      	sub	sp, #24
 80089b4:	af00      	add	r7, sp, #0
 80089b6:	60f8      	str	r0, [r7, #12]
 80089b8:	60b9      	str	r1, [r7, #8]
 80089ba:	4613      	mov	r3, r2
 80089bc:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 80089be:	68ba      	ldr	r2, [r7, #8]
 80089c0:	68fb      	ldr	r3, [r7, #12]
 80089c2:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 80089c4:	68fb      	ldr	r3, [r7, #12]
 80089c6:	88fa      	ldrh	r2, [r7, #6]
 80089c8:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80089ca:	68fb      	ldr	r3, [r7, #12]
 80089cc:	2200      	movs	r2, #0
 80089ce:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 80089d0:	68fb      	ldr	r3, [r7, #12]
 80089d2:	2222      	movs	r2, #34	; 0x22
 80089d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 80089d8:	68fb      	ldr	r3, [r7, #12]
 80089da:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089dc:	4a23      	ldr	r2, [pc, #140]	; (8008a6c <UART_Start_Receive_DMA+0xbc>)
 80089de:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 80089e0:	68fb      	ldr	r3, [r7, #12]
 80089e2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089e4:	4a22      	ldr	r2, [pc, #136]	; (8008a70 <UART_Start_Receive_DMA+0xc0>)
 80089e6:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 80089e8:	68fb      	ldr	r3, [r7, #12]
 80089ea:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089ec:	4a21      	ldr	r2, [pc, #132]	; (8008a74 <UART_Start_Receive_DMA+0xc4>)
 80089ee:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 80089f0:	68fb      	ldr	r3, [r7, #12]
 80089f2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80089f4:	2200      	movs	r2, #0
 80089f6:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 80089f8:	f107 0308 	add.w	r3, r7, #8
 80089fc:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 80089fe:	68fb      	ldr	r3, [r7, #12]
 8008a00:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8008a02:	68fb      	ldr	r3, [r7, #12]
 8008a04:	681b      	ldr	r3, [r3, #0]
 8008a06:	3304      	adds	r3, #4
 8008a08:	4619      	mov	r1, r3
 8008a0a:	697b      	ldr	r3, [r7, #20]
 8008a0c:	681a      	ldr	r2, [r3, #0]
 8008a0e:	88fb      	ldrh	r3, [r7, #6]
 8008a10:	f7fb fb42 	bl	8004098 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008a14:	2300      	movs	r3, #0
 8008a16:	613b      	str	r3, [r7, #16]
 8008a18:	68fb      	ldr	r3, [r7, #12]
 8008a1a:	681b      	ldr	r3, [r3, #0]
 8008a1c:	681b      	ldr	r3, [r3, #0]
 8008a1e:	613b      	str	r3, [r7, #16]
 8008a20:	68fb      	ldr	r3, [r7, #12]
 8008a22:	681b      	ldr	r3, [r3, #0]
 8008a24:	685b      	ldr	r3, [r3, #4]
 8008a26:	613b      	str	r3, [r7, #16]
 8008a28:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 8008a2a:	68fb      	ldr	r3, [r7, #12]
 8008a2c:	2200      	movs	r2, #0
 8008a2e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008a32:	68fb      	ldr	r3, [r7, #12]
 8008a34:	681b      	ldr	r3, [r3, #0]
 8008a36:	68da      	ldr	r2, [r3, #12]
 8008a38:	68fb      	ldr	r3, [r7, #12]
 8008a3a:	681b      	ldr	r3, [r3, #0]
 8008a3c:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008a40:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008a42:	68fb      	ldr	r3, [r7, #12]
 8008a44:	681b      	ldr	r3, [r3, #0]
 8008a46:	695a      	ldr	r2, [r3, #20]
 8008a48:	68fb      	ldr	r3, [r7, #12]
 8008a4a:	681b      	ldr	r3, [r3, #0]
 8008a4c:	f042 0201 	orr.w	r2, r2, #1
 8008a50:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008a52:	68fb      	ldr	r3, [r7, #12]
 8008a54:	681b      	ldr	r3, [r3, #0]
 8008a56:	695a      	ldr	r2, [r3, #20]
 8008a58:	68fb      	ldr	r3, [r7, #12]
 8008a5a:	681b      	ldr	r3, [r3, #0]
 8008a5c:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008a60:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008a62:	2300      	movs	r3, #0
}
 8008a64:	4618      	mov	r0, r3
 8008a66:	3718      	adds	r7, #24
 8008a68:	46bd      	mov	sp, r7
 8008a6a:	bd80      	pop	{r7, pc}
 8008a6c:	0800884f 	.word	0x0800884f
 8008a70:	080088e5 	.word	0x080088e5
 8008a74:	0800891b 	.word	0x0800891b

08008a78 <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 8008a78:	b480      	push	{r7}
 8008a7a:	b083      	sub	sp, #12
 8008a7c:	af00      	add	r7, sp, #0
 8008a7e:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008a80:	687b      	ldr	r3, [r7, #4]
 8008a82:	681b      	ldr	r3, [r3, #0]
 8008a84:	68da      	ldr	r2, [r3, #12]
 8008a86:	687b      	ldr	r3, [r7, #4]
 8008a88:	681b      	ldr	r3, [r3, #0]
 8008a8a:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008a8e:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008a90:	687b      	ldr	r3, [r7, #4]
 8008a92:	2220      	movs	r2, #32
 8008a94:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 8008a98:	bf00      	nop
 8008a9a:	370c      	adds	r7, #12
 8008a9c:	46bd      	mov	sp, r7
 8008a9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008aa2:	4770      	bx	lr

08008aa4 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008aa4:	b480      	push	{r7}
 8008aa6:	b083      	sub	sp, #12
 8008aa8:	af00      	add	r7, sp, #0
 8008aaa:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8008aac:	687b      	ldr	r3, [r7, #4]
 8008aae:	681b      	ldr	r3, [r3, #0]
 8008ab0:	68da      	ldr	r2, [r3, #12]
 8008ab2:	687b      	ldr	r3, [r7, #4]
 8008ab4:	681b      	ldr	r3, [r3, #0]
 8008ab6:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8008aba:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008abc:	687b      	ldr	r3, [r7, #4]
 8008abe:	681b      	ldr	r3, [r3, #0]
 8008ac0:	695a      	ldr	r2, [r3, #20]
 8008ac2:	687b      	ldr	r3, [r7, #4]
 8008ac4:	681b      	ldr	r3, [r3, #0]
 8008ac6:	f022 0201 	bic.w	r2, r2, #1
 8008aca:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008acc:	687b      	ldr	r3, [r7, #4]
 8008ace:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ad0:	2b01      	cmp	r3, #1
 8008ad2:	d107      	bne.n	8008ae4 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ad4:	687b      	ldr	r3, [r7, #4]
 8008ad6:	681b      	ldr	r3, [r3, #0]
 8008ad8:	68da      	ldr	r2, [r3, #12]
 8008ada:	687b      	ldr	r3, [r7, #4]
 8008adc:	681b      	ldr	r3, [r3, #0]
 8008ade:	f022 0210 	bic.w	r2, r2, #16
 8008ae2:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 8008ae4:	687b      	ldr	r3, [r7, #4]
 8008ae6:	2220      	movs	r2, #32
 8008ae8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008aec:	687b      	ldr	r3, [r7, #4]
 8008aee:	2200      	movs	r2, #0
 8008af0:	631a      	str	r2, [r3, #48]	; 0x30
}
 8008af2:	bf00      	nop
 8008af4:	370c      	adds	r7, #12
 8008af6:	46bd      	mov	sp, r7
 8008af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008afc:	4770      	bx	lr

08008afe <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 8008afe:	b580      	push	{r7, lr}
 8008b00:	b084      	sub	sp, #16
 8008b02:	af00      	add	r7, sp, #0
 8008b04:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8008b06:	687b      	ldr	r3, [r7, #4]
 8008b08:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8008b0a:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008b0c:	68fb      	ldr	r3, [r7, #12]
 8008b0e:	2200      	movs	r2, #0
 8008b10:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008b12:	68fb      	ldr	r3, [r7, #12]
 8008b14:	2200      	movs	r2, #0
 8008b16:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8008b18:	68f8      	ldr	r0, [r7, #12]
 8008b1a:	f7ff fe4b 	bl	80087b4 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008b1e:	bf00      	nop
 8008b20:	3710      	adds	r7, #16
 8008b22:	46bd      	mov	sp, r7
 8008b24:	bd80      	pop	{r7, pc}

08008b26 <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 8008b26:	b480      	push	{r7}
 8008b28:	b085      	sub	sp, #20
 8008b2a:	af00      	add	r7, sp, #0
 8008b2c:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008b2e:	687b      	ldr	r3, [r7, #4]
 8008b30:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008b34:	b2db      	uxtb	r3, r3
 8008b36:	2b21      	cmp	r3, #33	; 0x21
 8008b38:	d13e      	bne.n	8008bb8 <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008b3a:	687b      	ldr	r3, [r7, #4]
 8008b3c:	689b      	ldr	r3, [r3, #8]
 8008b3e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008b42:	d114      	bne.n	8008b6e <UART_Transmit_IT+0x48>
 8008b44:	687b      	ldr	r3, [r7, #4]
 8008b46:	691b      	ldr	r3, [r3, #16]
 8008b48:	2b00      	cmp	r3, #0
 8008b4a:	d110      	bne.n	8008b6e <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008b4c:	687b      	ldr	r3, [r7, #4]
 8008b4e:	6a1b      	ldr	r3, [r3, #32]
 8008b50:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008b52:	68fb      	ldr	r3, [r7, #12]
 8008b54:	881b      	ldrh	r3, [r3, #0]
 8008b56:	461a      	mov	r2, r3
 8008b58:	687b      	ldr	r3, [r7, #4]
 8008b5a:	681b      	ldr	r3, [r3, #0]
 8008b5c:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008b60:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008b62:	687b      	ldr	r3, [r7, #4]
 8008b64:	6a1b      	ldr	r3, [r3, #32]
 8008b66:	1c9a      	adds	r2, r3, #2
 8008b68:	687b      	ldr	r3, [r7, #4]
 8008b6a:	621a      	str	r2, [r3, #32]
 8008b6c:	e008      	b.n	8008b80 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008b6e:	687b      	ldr	r3, [r7, #4]
 8008b70:	6a1b      	ldr	r3, [r3, #32]
 8008b72:	1c59      	adds	r1, r3, #1
 8008b74:	687a      	ldr	r2, [r7, #4]
 8008b76:	6211      	str	r1, [r2, #32]
 8008b78:	781a      	ldrb	r2, [r3, #0]
 8008b7a:	687b      	ldr	r3, [r7, #4]
 8008b7c:	681b      	ldr	r3, [r3, #0]
 8008b7e:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008b80:	687b      	ldr	r3, [r7, #4]
 8008b82:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008b84:	b29b      	uxth	r3, r3
 8008b86:	3b01      	subs	r3, #1
 8008b88:	b29b      	uxth	r3, r3
 8008b8a:	687a      	ldr	r2, [r7, #4]
 8008b8c:	4619      	mov	r1, r3
 8008b8e:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008b90:	2b00      	cmp	r3, #0
 8008b92:	d10f      	bne.n	8008bb4 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008b94:	687b      	ldr	r3, [r7, #4]
 8008b96:	681b      	ldr	r3, [r3, #0]
 8008b98:	68da      	ldr	r2, [r3, #12]
 8008b9a:	687b      	ldr	r3, [r7, #4]
 8008b9c:	681b      	ldr	r3, [r3, #0]
 8008b9e:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008ba2:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008ba4:	687b      	ldr	r3, [r7, #4]
 8008ba6:	681b      	ldr	r3, [r3, #0]
 8008ba8:	68da      	ldr	r2, [r3, #12]
 8008baa:	687b      	ldr	r3, [r7, #4]
 8008bac:	681b      	ldr	r3, [r3, #0]
 8008bae:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008bb2:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 8008bb4:	2300      	movs	r3, #0
 8008bb6:	e000      	b.n	8008bba <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 8008bb8:	2302      	movs	r3, #2
  }
}
 8008bba:	4618      	mov	r0, r3
 8008bbc:	3714      	adds	r7, #20
 8008bbe:	46bd      	mov	sp, r7
 8008bc0:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008bc4:	4770      	bx	lr

08008bc6 <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 8008bc6:	b580      	push	{r7, lr}
 8008bc8:	b082      	sub	sp, #8
 8008bca:	af00      	add	r7, sp, #0
 8008bcc:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 8008bce:	687b      	ldr	r3, [r7, #4]
 8008bd0:	681b      	ldr	r3, [r3, #0]
 8008bd2:	68da      	ldr	r2, [r3, #12]
 8008bd4:	687b      	ldr	r3, [r7, #4]
 8008bd6:	681b      	ldr	r3, [r3, #0]
 8008bd8:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8008bdc:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008bde:	687b      	ldr	r3, [r7, #4]
 8008be0:	2220      	movs	r2, #32
 8008be2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 8008be6:	6878      	ldr	r0, [r7, #4]
 8008be8:	f7ff fdbc 	bl	8008764 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 8008bec:	2300      	movs	r3, #0
}
 8008bee:	4618      	mov	r0, r3
 8008bf0:	3708      	adds	r7, #8
 8008bf2:	46bd      	mov	sp, r7
 8008bf4:	bd80      	pop	{r7, pc}

08008bf6 <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 8008bf6:	b580      	push	{r7, lr}
 8008bf8:	b084      	sub	sp, #16
 8008bfa:	af00      	add	r7, sp, #0
 8008bfc:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 8008bfe:	687b      	ldr	r3, [r7, #4]
 8008c00:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8008c04:	b2db      	uxtb	r3, r3
 8008c06:	2b22      	cmp	r3, #34	; 0x22
 8008c08:	f040 8087 	bne.w	8008d1a <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008c0c:	687b      	ldr	r3, [r7, #4]
 8008c0e:	689b      	ldr	r3, [r3, #8]
 8008c10:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c14:	d117      	bne.n	8008c46 <UART_Receive_IT+0x50>
 8008c16:	687b      	ldr	r3, [r7, #4]
 8008c18:	691b      	ldr	r3, [r3, #16]
 8008c1a:	2b00      	cmp	r3, #0
 8008c1c:	d113      	bne.n	8008c46 <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008c1e:	2300      	movs	r3, #0
 8008c20:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008c22:	687b      	ldr	r3, [r7, #4]
 8008c24:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c26:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 8008c28:	687b      	ldr	r3, [r7, #4]
 8008c2a:	681b      	ldr	r3, [r3, #0]
 8008c2c:	685b      	ldr	r3, [r3, #4]
 8008c2e:	b29b      	uxth	r3, r3
 8008c30:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008c34:	b29a      	uxth	r2, r3
 8008c36:	68bb      	ldr	r3, [r7, #8]
 8008c38:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 8008c3a:	687b      	ldr	r3, [r7, #4]
 8008c3c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c3e:	1c9a      	adds	r2, r3, #2
 8008c40:	687b      	ldr	r3, [r7, #4]
 8008c42:	629a      	str	r2, [r3, #40]	; 0x28
 8008c44:	e026      	b.n	8008c94 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 8008c46:	687b      	ldr	r3, [r7, #4]
 8008c48:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c4a:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008c4c:	2300      	movs	r3, #0
 8008c4e:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008c50:	687b      	ldr	r3, [r7, #4]
 8008c52:	689b      	ldr	r3, [r3, #8]
 8008c54:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008c58:	d007      	beq.n	8008c6a <UART_Receive_IT+0x74>
 8008c5a:	687b      	ldr	r3, [r7, #4]
 8008c5c:	689b      	ldr	r3, [r3, #8]
 8008c5e:	2b00      	cmp	r3, #0
 8008c60:	d10a      	bne.n	8008c78 <UART_Receive_IT+0x82>
 8008c62:	687b      	ldr	r3, [r7, #4]
 8008c64:	691b      	ldr	r3, [r3, #16]
 8008c66:	2b00      	cmp	r3, #0
 8008c68:	d106      	bne.n	8008c78 <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 8008c6a:	687b      	ldr	r3, [r7, #4]
 8008c6c:	681b      	ldr	r3, [r3, #0]
 8008c6e:	685b      	ldr	r3, [r3, #4]
 8008c70:	b2da      	uxtb	r2, r3
 8008c72:	68fb      	ldr	r3, [r7, #12]
 8008c74:	701a      	strb	r2, [r3, #0]
 8008c76:	e008      	b.n	8008c8a <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 8008c78:	687b      	ldr	r3, [r7, #4]
 8008c7a:	681b      	ldr	r3, [r3, #0]
 8008c7c:	685b      	ldr	r3, [r3, #4]
 8008c7e:	b2db      	uxtb	r3, r3
 8008c80:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008c84:	b2da      	uxtb	r2, r3
 8008c86:	68fb      	ldr	r3, [r7, #12]
 8008c88:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 8008c8a:	687b      	ldr	r3, [r7, #4]
 8008c8c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008c8e:	1c5a      	adds	r2, r3, #1
 8008c90:	687b      	ldr	r3, [r7, #4]
 8008c92:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008c94:	687b      	ldr	r3, [r7, #4]
 8008c96:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8008c98:	b29b      	uxth	r3, r3
 8008c9a:	3b01      	subs	r3, #1
 8008c9c:	b29b      	uxth	r3, r3
 8008c9e:	687a      	ldr	r2, [r7, #4]
 8008ca0:	4619      	mov	r1, r3
 8008ca2:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008ca4:	2b00      	cmp	r3, #0
 8008ca6:	d136      	bne.n	8008d16 <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 8008ca8:	687b      	ldr	r3, [r7, #4]
 8008caa:	681b      	ldr	r3, [r3, #0]
 8008cac:	68da      	ldr	r2, [r3, #12]
 8008cae:	687b      	ldr	r3, [r7, #4]
 8008cb0:	681b      	ldr	r3, [r3, #0]
 8008cb2:	f022 0220 	bic.w	r2, r2, #32
 8008cb6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 8008cb8:	687b      	ldr	r3, [r7, #4]
 8008cba:	681b      	ldr	r3, [r3, #0]
 8008cbc:	68da      	ldr	r2, [r3, #12]
 8008cbe:	687b      	ldr	r3, [r7, #4]
 8008cc0:	681b      	ldr	r3, [r3, #0]
 8008cc2:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8008cc6:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 8008cc8:	687b      	ldr	r3, [r7, #4]
 8008cca:	681b      	ldr	r3, [r3, #0]
 8008ccc:	695a      	ldr	r2, [r3, #20]
 8008cce:	687b      	ldr	r3, [r7, #4]
 8008cd0:	681b      	ldr	r3, [r3, #0]
 8008cd2:	f022 0201 	bic.w	r2, r2, #1
 8008cd6:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 8008cd8:	687b      	ldr	r3, [r7, #4]
 8008cda:	2220      	movs	r2, #32
 8008cdc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8008ce0:	687b      	ldr	r3, [r7, #4]
 8008ce2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8008ce4:	2b01      	cmp	r3, #1
 8008ce6:	d10e      	bne.n	8008d06 <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8008ce8:	687b      	ldr	r3, [r7, #4]
 8008cea:	681b      	ldr	r3, [r3, #0]
 8008cec:	68da      	ldr	r2, [r3, #12]
 8008cee:	687b      	ldr	r3, [r7, #4]
 8008cf0:	681b      	ldr	r3, [r3, #0]
 8008cf2:	f022 0210 	bic.w	r2, r2, #16
 8008cf6:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8008cf8:	687b      	ldr	r3, [r7, #4]
 8008cfa:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8008cfc:	4619      	mov	r1, r3
 8008cfe:	6878      	ldr	r0, [r7, #4]
 8008d00:	f7ff fd62 	bl	80087c8 <HAL_UARTEx_RxEventCallback>
 8008d04:	e002      	b.n	8008d0c <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 8008d06:	6878      	ldr	r0, [r7, #4]
 8008d08:	f7ff fd40 	bl	800878c <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008d0c:	687b      	ldr	r3, [r7, #4]
 8008d0e:	2200      	movs	r2, #0
 8008d10:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008d12:	2300      	movs	r3, #0
 8008d14:	e002      	b.n	8008d1c <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 8008d16:	2300      	movs	r3, #0
 8008d18:	e000      	b.n	8008d1c <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 8008d1a:	2302      	movs	r3, #2
  }
}
 8008d1c:	4618      	mov	r0, r3
 8008d1e:	3710      	adds	r7, #16
 8008d20:	46bd      	mov	sp, r7
 8008d22:	bd80      	pop	{r7, pc}

08008d24 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008d24:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008d28:	b09f      	sub	sp, #124	; 0x7c
 8008d2a:	af00      	add	r7, sp, #0
 8008d2c:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008d2e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d30:	681b      	ldr	r3, [r3, #0]
 8008d32:	691b      	ldr	r3, [r3, #16]
 8008d34:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 8008d38:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3a:	68d9      	ldr	r1, [r3, #12]
 8008d3c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d3e:	681a      	ldr	r2, [r3, #0]
 8008d40:	ea40 0301 	orr.w	r3, r0, r1
 8008d44:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 8008d46:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d48:	689a      	ldr	r2, [r3, #8]
 8008d4a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d4c:	691b      	ldr	r3, [r3, #16]
 8008d4e:	431a      	orrs	r2, r3
 8008d50:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d52:	695b      	ldr	r3, [r3, #20]
 8008d54:	431a      	orrs	r2, r3
 8008d56:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d58:	69db      	ldr	r3, [r3, #28]
 8008d5a:	4313      	orrs	r3, r2
 8008d5c:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008d5e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d60:	681b      	ldr	r3, [r3, #0]
 8008d62:	68db      	ldr	r3, [r3, #12]
 8008d64:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 8008d68:	f021 010c 	bic.w	r1, r1, #12
 8008d6c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d6e:	681a      	ldr	r2, [r3, #0]
 8008d70:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008d72:	430b      	orrs	r3, r1
 8008d74:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 8008d76:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d78:	681b      	ldr	r3, [r3, #0]
 8008d7a:	695b      	ldr	r3, [r3, #20]
 8008d7c:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008d80:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d82:	6999      	ldr	r1, [r3, #24]
 8008d84:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d86:	681a      	ldr	r2, [r3, #0]
 8008d88:	ea40 0301 	orr.w	r3, r0, r1
 8008d8c:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008d8e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d90:	681a      	ldr	r2, [r3, #0]
 8008d92:	4bc5      	ldr	r3, [pc, #788]	; (80090a8 <UART_SetConfig+0x384>)
 8008d94:	429a      	cmp	r2, r3
 8008d96:	d004      	beq.n	8008da2 <UART_SetConfig+0x7e>
 8008d98:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008d9a:	681a      	ldr	r2, [r3, #0]
 8008d9c:	4bc3      	ldr	r3, [pc, #780]	; (80090ac <UART_SetConfig+0x388>)
 8008d9e:	429a      	cmp	r2, r3
 8008da0:	d103      	bne.n	8008daa <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008da2:	f7fe f8eb 	bl	8006f7c <HAL_RCC_GetPCLK2Freq>
 8008da6:	6778      	str	r0, [r7, #116]	; 0x74
 8008da8:	e002      	b.n	8008db0 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8008daa:	f7fe f8d3 	bl	8006f54 <HAL_RCC_GetPCLK1Freq>
 8008dae:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 8008db0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008db2:	69db      	ldr	r3, [r3, #28]
 8008db4:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 8008db8:	f040 80b6 	bne.w	8008f28 <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8008dbc:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008dbe:	461c      	mov	r4, r3
 8008dc0:	f04f 0500 	mov.w	r5, #0
 8008dc4:	4622      	mov	r2, r4
 8008dc6:	462b      	mov	r3, r5
 8008dc8:	1891      	adds	r1, r2, r2
 8008dca:	6439      	str	r1, [r7, #64]	; 0x40
 8008dcc:	415b      	adcs	r3, r3
 8008dce:	647b      	str	r3, [r7, #68]	; 0x44
 8008dd0:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8008dd4:	1912      	adds	r2, r2, r4
 8008dd6:	eb45 0303 	adc.w	r3, r5, r3
 8008dda:	f04f 0000 	mov.w	r0, #0
 8008dde:	f04f 0100 	mov.w	r1, #0
 8008de2:	00d9      	lsls	r1, r3, #3
 8008de4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008de8:	00d0      	lsls	r0, r2, #3
 8008dea:	4602      	mov	r2, r0
 8008dec:	460b      	mov	r3, r1
 8008dee:	1911      	adds	r1, r2, r4
 8008df0:	6639      	str	r1, [r7, #96]	; 0x60
 8008df2:	416b      	adcs	r3, r5
 8008df4:	667b      	str	r3, [r7, #100]	; 0x64
 8008df6:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008df8:	685b      	ldr	r3, [r3, #4]
 8008dfa:	461a      	mov	r2, r3
 8008dfc:	f04f 0300 	mov.w	r3, #0
 8008e00:	1891      	adds	r1, r2, r2
 8008e02:	63b9      	str	r1, [r7, #56]	; 0x38
 8008e04:	415b      	adcs	r3, r3
 8008e06:	63fb      	str	r3, [r7, #60]	; 0x3c
 8008e08:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008e0c:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008e10:	f7f7 ffac 	bl	8000d6c <__aeabi_uldivmod>
 8008e14:	4602      	mov	r2, r0
 8008e16:	460b      	mov	r3, r1
 8008e18:	4ba5      	ldr	r3, [pc, #660]	; (80090b0 <UART_SetConfig+0x38c>)
 8008e1a:	fba3 2302 	umull	r2, r3, r3, r2
 8008e1e:	095b      	lsrs	r3, r3, #5
 8008e20:	011e      	lsls	r6, r3, #4
 8008e22:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008e24:	461c      	mov	r4, r3
 8008e26:	f04f 0500 	mov.w	r5, #0
 8008e2a:	4622      	mov	r2, r4
 8008e2c:	462b      	mov	r3, r5
 8008e2e:	1891      	adds	r1, r2, r2
 8008e30:	6339      	str	r1, [r7, #48]	; 0x30
 8008e32:	415b      	adcs	r3, r3
 8008e34:	637b      	str	r3, [r7, #52]	; 0x34
 8008e36:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8008e3a:	1912      	adds	r2, r2, r4
 8008e3c:	eb45 0303 	adc.w	r3, r5, r3
 8008e40:	f04f 0000 	mov.w	r0, #0
 8008e44:	f04f 0100 	mov.w	r1, #0
 8008e48:	00d9      	lsls	r1, r3, #3
 8008e4a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008e4e:	00d0      	lsls	r0, r2, #3
 8008e50:	4602      	mov	r2, r0
 8008e52:	460b      	mov	r3, r1
 8008e54:	1911      	adds	r1, r2, r4
 8008e56:	65b9      	str	r1, [r7, #88]	; 0x58
 8008e58:	416b      	adcs	r3, r5
 8008e5a:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008e5c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008e5e:	685b      	ldr	r3, [r3, #4]
 8008e60:	461a      	mov	r2, r3
 8008e62:	f04f 0300 	mov.w	r3, #0
 8008e66:	1891      	adds	r1, r2, r2
 8008e68:	62b9      	str	r1, [r7, #40]	; 0x28
 8008e6a:	415b      	adcs	r3, r3
 8008e6c:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008e6e:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008e72:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 8008e76:	f7f7 ff79 	bl	8000d6c <__aeabi_uldivmod>
 8008e7a:	4602      	mov	r2, r0
 8008e7c:	460b      	mov	r3, r1
 8008e7e:	4b8c      	ldr	r3, [pc, #560]	; (80090b0 <UART_SetConfig+0x38c>)
 8008e80:	fba3 1302 	umull	r1, r3, r3, r2
 8008e84:	095b      	lsrs	r3, r3, #5
 8008e86:	2164      	movs	r1, #100	; 0x64
 8008e88:	fb01 f303 	mul.w	r3, r1, r3
 8008e8c:	1ad3      	subs	r3, r2, r3
 8008e8e:	00db      	lsls	r3, r3, #3
 8008e90:	3332      	adds	r3, #50	; 0x32
 8008e92:	4a87      	ldr	r2, [pc, #540]	; (80090b0 <UART_SetConfig+0x38c>)
 8008e94:	fba2 2303 	umull	r2, r3, r2, r3
 8008e98:	095b      	lsrs	r3, r3, #5
 8008e9a:	005b      	lsls	r3, r3, #1
 8008e9c:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008ea0:	441e      	add	r6, r3
 8008ea2:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008ea4:	4618      	mov	r0, r3
 8008ea6:	f04f 0100 	mov.w	r1, #0
 8008eaa:	4602      	mov	r2, r0
 8008eac:	460b      	mov	r3, r1
 8008eae:	1894      	adds	r4, r2, r2
 8008eb0:	623c      	str	r4, [r7, #32]
 8008eb2:	415b      	adcs	r3, r3
 8008eb4:	627b      	str	r3, [r7, #36]	; 0x24
 8008eb6:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8008eba:	1812      	adds	r2, r2, r0
 8008ebc:	eb41 0303 	adc.w	r3, r1, r3
 8008ec0:	f04f 0400 	mov.w	r4, #0
 8008ec4:	f04f 0500 	mov.w	r5, #0
 8008ec8:	00dd      	lsls	r5, r3, #3
 8008eca:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008ece:	00d4      	lsls	r4, r2, #3
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	1814      	adds	r4, r2, r0
 8008ed6:	653c      	str	r4, [r7, #80]	; 0x50
 8008ed8:	414b      	adcs	r3, r1
 8008eda:	657b      	str	r3, [r7, #84]	; 0x54
 8008edc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008ede:	685b      	ldr	r3, [r3, #4]
 8008ee0:	461a      	mov	r2, r3
 8008ee2:	f04f 0300 	mov.w	r3, #0
 8008ee6:	1891      	adds	r1, r2, r2
 8008ee8:	61b9      	str	r1, [r7, #24]
 8008eea:	415b      	adcs	r3, r3
 8008eec:	61fb      	str	r3, [r7, #28]
 8008eee:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8008ef2:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 8008ef6:	f7f7 ff39 	bl	8000d6c <__aeabi_uldivmod>
 8008efa:	4602      	mov	r2, r0
 8008efc:	460b      	mov	r3, r1
 8008efe:	4b6c      	ldr	r3, [pc, #432]	; (80090b0 <UART_SetConfig+0x38c>)
 8008f00:	fba3 1302 	umull	r1, r3, r3, r2
 8008f04:	095b      	lsrs	r3, r3, #5
 8008f06:	2164      	movs	r1, #100	; 0x64
 8008f08:	fb01 f303 	mul.w	r3, r1, r3
 8008f0c:	1ad3      	subs	r3, r2, r3
 8008f0e:	00db      	lsls	r3, r3, #3
 8008f10:	3332      	adds	r3, #50	; 0x32
 8008f12:	4a67      	ldr	r2, [pc, #412]	; (80090b0 <UART_SetConfig+0x38c>)
 8008f14:	fba2 2303 	umull	r2, r3, r2, r3
 8008f18:	095b      	lsrs	r3, r3, #5
 8008f1a:	f003 0207 	and.w	r2, r3, #7
 8008f1e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f20:	681b      	ldr	r3, [r3, #0]
 8008f22:	4432      	add	r2, r6
 8008f24:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 8008f26:	e0b9      	b.n	800909c <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8008f28:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f2a:	461c      	mov	r4, r3
 8008f2c:	f04f 0500 	mov.w	r5, #0
 8008f30:	4622      	mov	r2, r4
 8008f32:	462b      	mov	r3, r5
 8008f34:	1891      	adds	r1, r2, r2
 8008f36:	6139      	str	r1, [r7, #16]
 8008f38:	415b      	adcs	r3, r3
 8008f3a:	617b      	str	r3, [r7, #20]
 8008f3c:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008f40:	1912      	adds	r2, r2, r4
 8008f42:	eb45 0303 	adc.w	r3, r5, r3
 8008f46:	f04f 0000 	mov.w	r0, #0
 8008f4a:	f04f 0100 	mov.w	r1, #0
 8008f4e:	00d9      	lsls	r1, r3, #3
 8008f50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008f54:	00d0      	lsls	r0, r2, #3
 8008f56:	4602      	mov	r2, r0
 8008f58:	460b      	mov	r3, r1
 8008f5a:	eb12 0804 	adds.w	r8, r2, r4
 8008f5e:	eb43 0905 	adc.w	r9, r3, r5
 8008f62:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008f64:	685b      	ldr	r3, [r3, #4]
 8008f66:	4618      	mov	r0, r3
 8008f68:	f04f 0100 	mov.w	r1, #0
 8008f6c:	f04f 0200 	mov.w	r2, #0
 8008f70:	f04f 0300 	mov.w	r3, #0
 8008f74:	008b      	lsls	r3, r1, #2
 8008f76:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008f7a:	0082      	lsls	r2, r0, #2
 8008f7c:	4640      	mov	r0, r8
 8008f7e:	4649      	mov	r1, r9
 8008f80:	f7f7 fef4 	bl	8000d6c <__aeabi_uldivmod>
 8008f84:	4602      	mov	r2, r0
 8008f86:	460b      	mov	r3, r1
 8008f88:	4b49      	ldr	r3, [pc, #292]	; (80090b0 <UART_SetConfig+0x38c>)
 8008f8a:	fba3 2302 	umull	r2, r3, r3, r2
 8008f8e:	095b      	lsrs	r3, r3, #5
 8008f90:	011e      	lsls	r6, r3, #4
 8008f92:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008f94:	4618      	mov	r0, r3
 8008f96:	f04f 0100 	mov.w	r1, #0
 8008f9a:	4602      	mov	r2, r0
 8008f9c:	460b      	mov	r3, r1
 8008f9e:	1894      	adds	r4, r2, r2
 8008fa0:	60bc      	str	r4, [r7, #8]
 8008fa2:	415b      	adcs	r3, r3
 8008fa4:	60fb      	str	r3, [r7, #12]
 8008fa6:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8008faa:	1812      	adds	r2, r2, r0
 8008fac:	eb41 0303 	adc.w	r3, r1, r3
 8008fb0:	f04f 0400 	mov.w	r4, #0
 8008fb4:	f04f 0500 	mov.w	r5, #0
 8008fb8:	00dd      	lsls	r5, r3, #3
 8008fba:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008fbe:	00d4      	lsls	r4, r2, #3
 8008fc0:	4622      	mov	r2, r4
 8008fc2:	462b      	mov	r3, r5
 8008fc4:	1814      	adds	r4, r2, r0
 8008fc6:	64bc      	str	r4, [r7, #72]	; 0x48
 8008fc8:	414b      	adcs	r3, r1
 8008fca:	64fb      	str	r3, [r7, #76]	; 0x4c
 8008fcc:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008fce:	685b      	ldr	r3, [r3, #4]
 8008fd0:	4618      	mov	r0, r3
 8008fd2:	f04f 0100 	mov.w	r1, #0
 8008fd6:	f04f 0200 	mov.w	r2, #0
 8008fda:	f04f 0300 	mov.w	r3, #0
 8008fde:	008b      	lsls	r3, r1, #2
 8008fe0:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8008fe4:	0082      	lsls	r2, r0, #2
 8008fe6:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 8008fea:	f7f7 febf 	bl	8000d6c <__aeabi_uldivmod>
 8008fee:	4602      	mov	r2, r0
 8008ff0:	460b      	mov	r3, r1
 8008ff2:	4b2f      	ldr	r3, [pc, #188]	; (80090b0 <UART_SetConfig+0x38c>)
 8008ff4:	fba3 1302 	umull	r1, r3, r3, r2
 8008ff8:	095b      	lsrs	r3, r3, #5
 8008ffa:	2164      	movs	r1, #100	; 0x64
 8008ffc:	fb01 f303 	mul.w	r3, r1, r3
 8009000:	1ad3      	subs	r3, r2, r3
 8009002:	011b      	lsls	r3, r3, #4
 8009004:	3332      	adds	r3, #50	; 0x32
 8009006:	4a2a      	ldr	r2, [pc, #168]	; (80090b0 <UART_SetConfig+0x38c>)
 8009008:	fba2 2303 	umull	r2, r3, r2, r3
 800900c:	095b      	lsrs	r3, r3, #5
 800900e:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8009012:	441e      	add	r6, r3
 8009014:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8009016:	4618      	mov	r0, r3
 8009018:	f04f 0100 	mov.w	r1, #0
 800901c:	4602      	mov	r2, r0
 800901e:	460b      	mov	r3, r1
 8009020:	1894      	adds	r4, r2, r2
 8009022:	603c      	str	r4, [r7, #0]
 8009024:	415b      	adcs	r3, r3
 8009026:	607b      	str	r3, [r7, #4]
 8009028:	e9d7 2300 	ldrd	r2, r3, [r7]
 800902c:	1812      	adds	r2, r2, r0
 800902e:	eb41 0303 	adc.w	r3, r1, r3
 8009032:	f04f 0400 	mov.w	r4, #0
 8009036:	f04f 0500 	mov.w	r5, #0
 800903a:	00dd      	lsls	r5, r3, #3
 800903c:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8009040:	00d4      	lsls	r4, r2, #3
 8009042:	4622      	mov	r2, r4
 8009044:	462b      	mov	r3, r5
 8009046:	eb12 0a00 	adds.w	sl, r2, r0
 800904a:	eb43 0b01 	adc.w	fp, r3, r1
 800904e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009050:	685b      	ldr	r3, [r3, #4]
 8009052:	4618      	mov	r0, r3
 8009054:	f04f 0100 	mov.w	r1, #0
 8009058:	f04f 0200 	mov.w	r2, #0
 800905c:	f04f 0300 	mov.w	r3, #0
 8009060:	008b      	lsls	r3, r1, #2
 8009062:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8009066:	0082      	lsls	r2, r0, #2
 8009068:	4650      	mov	r0, sl
 800906a:	4659      	mov	r1, fp
 800906c:	f7f7 fe7e 	bl	8000d6c <__aeabi_uldivmod>
 8009070:	4602      	mov	r2, r0
 8009072:	460b      	mov	r3, r1
 8009074:	4b0e      	ldr	r3, [pc, #56]	; (80090b0 <UART_SetConfig+0x38c>)
 8009076:	fba3 1302 	umull	r1, r3, r3, r2
 800907a:	095b      	lsrs	r3, r3, #5
 800907c:	2164      	movs	r1, #100	; 0x64
 800907e:	fb01 f303 	mul.w	r3, r1, r3
 8009082:	1ad3      	subs	r3, r2, r3
 8009084:	011b      	lsls	r3, r3, #4
 8009086:	3332      	adds	r3, #50	; 0x32
 8009088:	4a09      	ldr	r2, [pc, #36]	; (80090b0 <UART_SetConfig+0x38c>)
 800908a:	fba2 2303 	umull	r2, r3, r2, r3
 800908e:	095b      	lsrs	r3, r3, #5
 8009090:	f003 020f 	and.w	r2, r3, #15
 8009094:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8009096:	681b      	ldr	r3, [r3, #0]
 8009098:	4432      	add	r2, r6
 800909a:	609a      	str	r2, [r3, #8]
}
 800909c:	bf00      	nop
 800909e:	377c      	adds	r7, #124	; 0x7c
 80090a0:	46bd      	mov	sp, r7
 80090a2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80090a6:	bf00      	nop
 80090a8:	40011000 	.word	0x40011000
 80090ac:	40011400 	.word	0x40011400
 80090b0:	51eb851f 	.word	0x51eb851f

080090b4 <calloc>:
 80090b4:	4b02      	ldr	r3, [pc, #8]	; (80090c0 <calloc+0xc>)
 80090b6:	460a      	mov	r2, r1
 80090b8:	4601      	mov	r1, r0
 80090ba:	6818      	ldr	r0, [r3, #0]
 80090bc:	f000 b842 	b.w	8009144 <_calloc_r>
 80090c0:	2000003c 	.word	0x2000003c

080090c4 <__errno>:
 80090c4:	4b01      	ldr	r3, [pc, #4]	; (80090cc <__errno+0x8>)
 80090c6:	6818      	ldr	r0, [r3, #0]
 80090c8:	4770      	bx	lr
 80090ca:	bf00      	nop
 80090cc:	2000003c 	.word	0x2000003c

080090d0 <__libc_init_array>:
 80090d0:	b570      	push	{r4, r5, r6, lr}
 80090d2:	4d0d      	ldr	r5, [pc, #52]	; (8009108 <__libc_init_array+0x38>)
 80090d4:	4c0d      	ldr	r4, [pc, #52]	; (800910c <__libc_init_array+0x3c>)
 80090d6:	1b64      	subs	r4, r4, r5
 80090d8:	10a4      	asrs	r4, r4, #2
 80090da:	2600      	movs	r6, #0
 80090dc:	42a6      	cmp	r6, r4
 80090de:	d109      	bne.n	80090f4 <__libc_init_array+0x24>
 80090e0:	4d0b      	ldr	r5, [pc, #44]	; (8009110 <__libc_init_array+0x40>)
 80090e2:	4c0c      	ldr	r4, [pc, #48]	; (8009114 <__libc_init_array+0x44>)
 80090e4:	f001 f86a 	bl	800a1bc <_init>
 80090e8:	1b64      	subs	r4, r4, r5
 80090ea:	10a4      	asrs	r4, r4, #2
 80090ec:	2600      	movs	r6, #0
 80090ee:	42a6      	cmp	r6, r4
 80090f0:	d105      	bne.n	80090fe <__libc_init_array+0x2e>
 80090f2:	bd70      	pop	{r4, r5, r6, pc}
 80090f4:	f855 3b04 	ldr.w	r3, [r5], #4
 80090f8:	4798      	blx	r3
 80090fa:	3601      	adds	r6, #1
 80090fc:	e7ee      	b.n	80090dc <__libc_init_array+0xc>
 80090fe:	f855 3b04 	ldr.w	r3, [r5], #4
 8009102:	4798      	blx	r3
 8009104:	3601      	adds	r6, #1
 8009106:	e7f2      	b.n	80090ee <__libc_init_array+0x1e>
 8009108:	0800a248 	.word	0x0800a248
 800910c:	0800a248 	.word	0x0800a248
 8009110:	0800a248 	.word	0x0800a248
 8009114:	0800a24c 	.word	0x0800a24c

08009118 <memcpy>:
 8009118:	440a      	add	r2, r1
 800911a:	4291      	cmp	r1, r2
 800911c:	f100 33ff 	add.w	r3, r0, #4294967295
 8009120:	d100      	bne.n	8009124 <memcpy+0xc>
 8009122:	4770      	bx	lr
 8009124:	b510      	push	{r4, lr}
 8009126:	f811 4b01 	ldrb.w	r4, [r1], #1
 800912a:	f803 4f01 	strb.w	r4, [r3, #1]!
 800912e:	4291      	cmp	r1, r2
 8009130:	d1f9      	bne.n	8009126 <memcpy+0xe>
 8009132:	bd10      	pop	{r4, pc}

08009134 <memset>:
 8009134:	4402      	add	r2, r0
 8009136:	4603      	mov	r3, r0
 8009138:	4293      	cmp	r3, r2
 800913a:	d100      	bne.n	800913e <memset+0xa>
 800913c:	4770      	bx	lr
 800913e:	f803 1b01 	strb.w	r1, [r3], #1
 8009142:	e7f9      	b.n	8009138 <memset+0x4>

08009144 <_calloc_r>:
 8009144:	b513      	push	{r0, r1, r4, lr}
 8009146:	434a      	muls	r2, r1
 8009148:	4611      	mov	r1, r2
 800914a:	9201      	str	r2, [sp, #4]
 800914c:	f000 f80a 	bl	8009164 <_malloc_r>
 8009150:	4604      	mov	r4, r0
 8009152:	b118      	cbz	r0, 800915c <_calloc_r+0x18>
 8009154:	9a01      	ldr	r2, [sp, #4]
 8009156:	2100      	movs	r1, #0
 8009158:	f7ff ffec 	bl	8009134 <memset>
 800915c:	4620      	mov	r0, r4
 800915e:	b002      	add	sp, #8
 8009160:	bd10      	pop	{r4, pc}
	...

08009164 <_malloc_r>:
 8009164:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009166:	1ccd      	adds	r5, r1, #3
 8009168:	f025 0503 	bic.w	r5, r5, #3
 800916c:	3508      	adds	r5, #8
 800916e:	2d0c      	cmp	r5, #12
 8009170:	bf38      	it	cc
 8009172:	250c      	movcc	r5, #12
 8009174:	2d00      	cmp	r5, #0
 8009176:	4606      	mov	r6, r0
 8009178:	db01      	blt.n	800917e <_malloc_r+0x1a>
 800917a:	42a9      	cmp	r1, r5
 800917c:	d903      	bls.n	8009186 <_malloc_r+0x22>
 800917e:	230c      	movs	r3, #12
 8009180:	6033      	str	r3, [r6, #0]
 8009182:	2000      	movs	r0, #0
 8009184:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 8009186:	f000 f857 	bl	8009238 <__malloc_lock>
 800918a:	4921      	ldr	r1, [pc, #132]	; (8009210 <_malloc_r+0xac>)
 800918c:	680a      	ldr	r2, [r1, #0]
 800918e:	4614      	mov	r4, r2
 8009190:	b99c      	cbnz	r4, 80091ba <_malloc_r+0x56>
 8009192:	4f20      	ldr	r7, [pc, #128]	; (8009214 <_malloc_r+0xb0>)
 8009194:	683b      	ldr	r3, [r7, #0]
 8009196:	b923      	cbnz	r3, 80091a2 <_malloc_r+0x3e>
 8009198:	4621      	mov	r1, r4
 800919a:	4630      	mov	r0, r6
 800919c:	f000 f83c 	bl	8009218 <_sbrk_r>
 80091a0:	6038      	str	r0, [r7, #0]
 80091a2:	4629      	mov	r1, r5
 80091a4:	4630      	mov	r0, r6
 80091a6:	f000 f837 	bl	8009218 <_sbrk_r>
 80091aa:	1c43      	adds	r3, r0, #1
 80091ac:	d123      	bne.n	80091f6 <_malloc_r+0x92>
 80091ae:	230c      	movs	r3, #12
 80091b0:	6033      	str	r3, [r6, #0]
 80091b2:	4630      	mov	r0, r6
 80091b4:	f000 f846 	bl	8009244 <__malloc_unlock>
 80091b8:	e7e3      	b.n	8009182 <_malloc_r+0x1e>
 80091ba:	6823      	ldr	r3, [r4, #0]
 80091bc:	1b5b      	subs	r3, r3, r5
 80091be:	d417      	bmi.n	80091f0 <_malloc_r+0x8c>
 80091c0:	2b0b      	cmp	r3, #11
 80091c2:	d903      	bls.n	80091cc <_malloc_r+0x68>
 80091c4:	6023      	str	r3, [r4, #0]
 80091c6:	441c      	add	r4, r3
 80091c8:	6025      	str	r5, [r4, #0]
 80091ca:	e004      	b.n	80091d6 <_malloc_r+0x72>
 80091cc:	6863      	ldr	r3, [r4, #4]
 80091ce:	42a2      	cmp	r2, r4
 80091d0:	bf0c      	ite	eq
 80091d2:	600b      	streq	r3, [r1, #0]
 80091d4:	6053      	strne	r3, [r2, #4]
 80091d6:	4630      	mov	r0, r6
 80091d8:	f000 f834 	bl	8009244 <__malloc_unlock>
 80091dc:	f104 000b 	add.w	r0, r4, #11
 80091e0:	1d23      	adds	r3, r4, #4
 80091e2:	f020 0007 	bic.w	r0, r0, #7
 80091e6:	1ac2      	subs	r2, r0, r3
 80091e8:	d0cc      	beq.n	8009184 <_malloc_r+0x20>
 80091ea:	1a1b      	subs	r3, r3, r0
 80091ec:	50a3      	str	r3, [r4, r2]
 80091ee:	e7c9      	b.n	8009184 <_malloc_r+0x20>
 80091f0:	4622      	mov	r2, r4
 80091f2:	6864      	ldr	r4, [r4, #4]
 80091f4:	e7cc      	b.n	8009190 <_malloc_r+0x2c>
 80091f6:	1cc4      	adds	r4, r0, #3
 80091f8:	f024 0403 	bic.w	r4, r4, #3
 80091fc:	42a0      	cmp	r0, r4
 80091fe:	d0e3      	beq.n	80091c8 <_malloc_r+0x64>
 8009200:	1a21      	subs	r1, r4, r0
 8009202:	4630      	mov	r0, r6
 8009204:	f000 f808 	bl	8009218 <_sbrk_r>
 8009208:	3001      	adds	r0, #1
 800920a:	d1dd      	bne.n	80091c8 <_malloc_r+0x64>
 800920c:	e7cf      	b.n	80091ae <_malloc_r+0x4a>
 800920e:	bf00      	nop
 8009210:	200007c8 	.word	0x200007c8
 8009214:	200007cc 	.word	0x200007cc

08009218 <_sbrk_r>:
 8009218:	b538      	push	{r3, r4, r5, lr}
 800921a:	4d06      	ldr	r5, [pc, #24]	; (8009234 <_sbrk_r+0x1c>)
 800921c:	2300      	movs	r3, #0
 800921e:	4604      	mov	r4, r0
 8009220:	4608      	mov	r0, r1
 8009222:	602b      	str	r3, [r5, #0]
 8009224:	f7fa fc3e 	bl	8003aa4 <_sbrk>
 8009228:	1c43      	adds	r3, r0, #1
 800922a:	d102      	bne.n	8009232 <_sbrk_r+0x1a>
 800922c:	682b      	ldr	r3, [r5, #0]
 800922e:	b103      	cbz	r3, 8009232 <_sbrk_r+0x1a>
 8009230:	6023      	str	r3, [r4, #0]
 8009232:	bd38      	pop	{r3, r4, r5, pc}
 8009234:	20000a48 	.word	0x20000a48

08009238 <__malloc_lock>:
 8009238:	4801      	ldr	r0, [pc, #4]	; (8009240 <__malloc_lock+0x8>)
 800923a:	f000 b809 	b.w	8009250 <__retarget_lock_acquire_recursive>
 800923e:	bf00      	nop
 8009240:	20000a50 	.word	0x20000a50

08009244 <__malloc_unlock>:
 8009244:	4801      	ldr	r0, [pc, #4]	; (800924c <__malloc_unlock+0x8>)
 8009246:	f000 b804 	b.w	8009252 <__retarget_lock_release_recursive>
 800924a:	bf00      	nop
 800924c:	20000a50 	.word	0x20000a50

08009250 <__retarget_lock_acquire_recursive>:
 8009250:	4770      	bx	lr

08009252 <__retarget_lock_release_recursive>:
 8009252:	4770      	bx	lr

08009254 <pow>:
 8009254:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8009258:	ec59 8b10 	vmov	r8, r9, d0
 800925c:	ec57 6b11 	vmov	r6, r7, d1
 8009260:	f000 f8a6 	bl	80093b0 <__ieee754_pow>
 8009264:	4b4e      	ldr	r3, [pc, #312]	; (80093a0 <pow+0x14c>)
 8009266:	f993 3000 	ldrsb.w	r3, [r3]
 800926a:	3301      	adds	r3, #1
 800926c:	ec55 4b10 	vmov	r4, r5, d0
 8009270:	d015      	beq.n	800929e <pow+0x4a>
 8009272:	4632      	mov	r2, r6
 8009274:	463b      	mov	r3, r7
 8009276:	4630      	mov	r0, r6
 8009278:	4639      	mov	r1, r7
 800927a:	f7f7 fc03 	bl	8000a84 <__aeabi_dcmpun>
 800927e:	b970      	cbnz	r0, 800929e <pow+0x4a>
 8009280:	4642      	mov	r2, r8
 8009282:	464b      	mov	r3, r9
 8009284:	4640      	mov	r0, r8
 8009286:	4649      	mov	r1, r9
 8009288:	f7f7 fbfc 	bl	8000a84 <__aeabi_dcmpun>
 800928c:	2200      	movs	r2, #0
 800928e:	2300      	movs	r3, #0
 8009290:	b148      	cbz	r0, 80092a6 <pow+0x52>
 8009292:	4630      	mov	r0, r6
 8009294:	4639      	mov	r1, r7
 8009296:	f7f7 fbc3 	bl	8000a20 <__aeabi_dcmpeq>
 800929a:	2800      	cmp	r0, #0
 800929c:	d17d      	bne.n	800939a <pow+0x146>
 800929e:	ec45 4b10 	vmov	d0, r4, r5
 80092a2:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 80092a6:	4640      	mov	r0, r8
 80092a8:	4649      	mov	r1, r9
 80092aa:	f7f7 fbb9 	bl	8000a20 <__aeabi_dcmpeq>
 80092ae:	b1e0      	cbz	r0, 80092ea <pow+0x96>
 80092b0:	2200      	movs	r2, #0
 80092b2:	2300      	movs	r3, #0
 80092b4:	4630      	mov	r0, r6
 80092b6:	4639      	mov	r1, r7
 80092b8:	f7f7 fbb2 	bl	8000a20 <__aeabi_dcmpeq>
 80092bc:	2800      	cmp	r0, #0
 80092be:	d16c      	bne.n	800939a <pow+0x146>
 80092c0:	ec47 6b10 	vmov	d0, r6, r7
 80092c4:	f000 fe53 	bl	8009f6e <finite>
 80092c8:	2800      	cmp	r0, #0
 80092ca:	d0e8      	beq.n	800929e <pow+0x4a>
 80092cc:	2200      	movs	r2, #0
 80092ce:	2300      	movs	r3, #0
 80092d0:	4630      	mov	r0, r6
 80092d2:	4639      	mov	r1, r7
 80092d4:	f7f7 fbae 	bl	8000a34 <__aeabi_dcmplt>
 80092d8:	2800      	cmp	r0, #0
 80092da:	d0e0      	beq.n	800929e <pow+0x4a>
 80092dc:	f7ff fef2 	bl	80090c4 <__errno>
 80092e0:	2321      	movs	r3, #33	; 0x21
 80092e2:	6003      	str	r3, [r0, #0]
 80092e4:	2400      	movs	r4, #0
 80092e6:	4d2f      	ldr	r5, [pc, #188]	; (80093a4 <pow+0x150>)
 80092e8:	e7d9      	b.n	800929e <pow+0x4a>
 80092ea:	ec45 4b10 	vmov	d0, r4, r5
 80092ee:	f000 fe3e 	bl	8009f6e <finite>
 80092f2:	bbb8      	cbnz	r0, 8009364 <pow+0x110>
 80092f4:	ec49 8b10 	vmov	d0, r8, r9
 80092f8:	f000 fe39 	bl	8009f6e <finite>
 80092fc:	b390      	cbz	r0, 8009364 <pow+0x110>
 80092fe:	ec47 6b10 	vmov	d0, r6, r7
 8009302:	f000 fe34 	bl	8009f6e <finite>
 8009306:	b368      	cbz	r0, 8009364 <pow+0x110>
 8009308:	4622      	mov	r2, r4
 800930a:	462b      	mov	r3, r5
 800930c:	4620      	mov	r0, r4
 800930e:	4629      	mov	r1, r5
 8009310:	f7f7 fbb8 	bl	8000a84 <__aeabi_dcmpun>
 8009314:	b160      	cbz	r0, 8009330 <pow+0xdc>
 8009316:	f7ff fed5 	bl	80090c4 <__errno>
 800931a:	2321      	movs	r3, #33	; 0x21
 800931c:	6003      	str	r3, [r0, #0]
 800931e:	2200      	movs	r2, #0
 8009320:	2300      	movs	r3, #0
 8009322:	4610      	mov	r0, r2
 8009324:	4619      	mov	r1, r3
 8009326:	f7f7 fa3d 	bl	80007a4 <__aeabi_ddiv>
 800932a:	4604      	mov	r4, r0
 800932c:	460d      	mov	r5, r1
 800932e:	e7b6      	b.n	800929e <pow+0x4a>
 8009330:	f7ff fec8 	bl	80090c4 <__errno>
 8009334:	2322      	movs	r3, #34	; 0x22
 8009336:	6003      	str	r3, [r0, #0]
 8009338:	2200      	movs	r2, #0
 800933a:	2300      	movs	r3, #0
 800933c:	4640      	mov	r0, r8
 800933e:	4649      	mov	r1, r9
 8009340:	f7f7 fb78 	bl	8000a34 <__aeabi_dcmplt>
 8009344:	2400      	movs	r4, #0
 8009346:	b158      	cbz	r0, 8009360 <pow+0x10c>
 8009348:	ec47 6b10 	vmov	d0, r6, r7
 800934c:	f000 fe24 	bl	8009f98 <rint>
 8009350:	4632      	mov	r2, r6
 8009352:	ec51 0b10 	vmov	r0, r1, d0
 8009356:	463b      	mov	r3, r7
 8009358:	f7f7 fb62 	bl	8000a20 <__aeabi_dcmpeq>
 800935c:	2800      	cmp	r0, #0
 800935e:	d0c2      	beq.n	80092e6 <pow+0x92>
 8009360:	4d11      	ldr	r5, [pc, #68]	; (80093a8 <pow+0x154>)
 8009362:	e79c      	b.n	800929e <pow+0x4a>
 8009364:	2200      	movs	r2, #0
 8009366:	2300      	movs	r3, #0
 8009368:	4620      	mov	r0, r4
 800936a:	4629      	mov	r1, r5
 800936c:	f7f7 fb58 	bl	8000a20 <__aeabi_dcmpeq>
 8009370:	2800      	cmp	r0, #0
 8009372:	d094      	beq.n	800929e <pow+0x4a>
 8009374:	ec49 8b10 	vmov	d0, r8, r9
 8009378:	f000 fdf9 	bl	8009f6e <finite>
 800937c:	2800      	cmp	r0, #0
 800937e:	d08e      	beq.n	800929e <pow+0x4a>
 8009380:	ec47 6b10 	vmov	d0, r6, r7
 8009384:	f000 fdf3 	bl	8009f6e <finite>
 8009388:	2800      	cmp	r0, #0
 800938a:	d088      	beq.n	800929e <pow+0x4a>
 800938c:	f7ff fe9a 	bl	80090c4 <__errno>
 8009390:	2322      	movs	r3, #34	; 0x22
 8009392:	6003      	str	r3, [r0, #0]
 8009394:	2400      	movs	r4, #0
 8009396:	2500      	movs	r5, #0
 8009398:	e781      	b.n	800929e <pow+0x4a>
 800939a:	4d04      	ldr	r5, [pc, #16]	; (80093ac <pow+0x158>)
 800939c:	2400      	movs	r4, #0
 800939e:	e77e      	b.n	800929e <pow+0x4a>
 80093a0:	200000a0 	.word	0x200000a0
 80093a4:	fff00000 	.word	0xfff00000
 80093a8:	7ff00000 	.word	0x7ff00000
 80093ac:	3ff00000 	.word	0x3ff00000

080093b0 <__ieee754_pow>:
 80093b0:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80093b4:	ed2d 8b06 	vpush	{d8-d10}
 80093b8:	b08d      	sub	sp, #52	; 0x34
 80093ba:	ed8d 1b02 	vstr	d1, [sp, #8]
 80093be:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 80093c2:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 80093c6:	ea56 0100 	orrs.w	r1, r6, r0
 80093ca:	ec53 2b10 	vmov	r2, r3, d0
 80093ce:	f000 84d1 	beq.w	8009d74 <__ieee754_pow+0x9c4>
 80093d2:	497f      	ldr	r1, [pc, #508]	; (80095d0 <__ieee754_pow+0x220>)
 80093d4:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80093d8:	428c      	cmp	r4, r1
 80093da:	ee10 8a10 	vmov	r8, s0
 80093de:	4699      	mov	r9, r3
 80093e0:	dc09      	bgt.n	80093f6 <__ieee754_pow+0x46>
 80093e2:	d103      	bne.n	80093ec <__ieee754_pow+0x3c>
 80093e4:	b97a      	cbnz	r2, 8009406 <__ieee754_pow+0x56>
 80093e6:	42a6      	cmp	r6, r4
 80093e8:	dd02      	ble.n	80093f0 <__ieee754_pow+0x40>
 80093ea:	e00c      	b.n	8009406 <__ieee754_pow+0x56>
 80093ec:	428e      	cmp	r6, r1
 80093ee:	dc02      	bgt.n	80093f6 <__ieee754_pow+0x46>
 80093f0:	428e      	cmp	r6, r1
 80093f2:	d110      	bne.n	8009416 <__ieee754_pow+0x66>
 80093f4:	b178      	cbz	r0, 8009416 <__ieee754_pow+0x66>
 80093f6:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80093fa:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80093fe:	ea54 0308 	orrs.w	r3, r4, r8
 8009402:	f000 84b7 	beq.w	8009d74 <__ieee754_pow+0x9c4>
 8009406:	4873      	ldr	r0, [pc, #460]	; (80095d4 <__ieee754_pow+0x224>)
 8009408:	b00d      	add	sp, #52	; 0x34
 800940a:	ecbd 8b06 	vpop	{d8-d10}
 800940e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009412:	f000 bdb9 	b.w	8009f88 <nan>
 8009416:	f1b9 0f00 	cmp.w	r9, #0
 800941a:	da36      	bge.n	800948a <__ieee754_pow+0xda>
 800941c:	496e      	ldr	r1, [pc, #440]	; (80095d8 <__ieee754_pow+0x228>)
 800941e:	428e      	cmp	r6, r1
 8009420:	dc51      	bgt.n	80094c6 <__ieee754_pow+0x116>
 8009422:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8009426:	428e      	cmp	r6, r1
 8009428:	f340 84af 	ble.w	8009d8a <__ieee754_pow+0x9da>
 800942c:	1531      	asrs	r1, r6, #20
 800942e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8009432:	2914      	cmp	r1, #20
 8009434:	dd0f      	ble.n	8009456 <__ieee754_pow+0xa6>
 8009436:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 800943a:	fa20 fc01 	lsr.w	ip, r0, r1
 800943e:	fa0c f101 	lsl.w	r1, ip, r1
 8009442:	4281      	cmp	r1, r0
 8009444:	f040 84a1 	bne.w	8009d8a <__ieee754_pow+0x9da>
 8009448:	f00c 0c01 	and.w	ip, ip, #1
 800944c:	f1cc 0102 	rsb	r1, ip, #2
 8009450:	9100      	str	r1, [sp, #0]
 8009452:	b180      	cbz	r0, 8009476 <__ieee754_pow+0xc6>
 8009454:	e059      	b.n	800950a <__ieee754_pow+0x15a>
 8009456:	2800      	cmp	r0, #0
 8009458:	d155      	bne.n	8009506 <__ieee754_pow+0x156>
 800945a:	f1c1 0114 	rsb	r1, r1, #20
 800945e:	fa46 fc01 	asr.w	ip, r6, r1
 8009462:	fa0c f101 	lsl.w	r1, ip, r1
 8009466:	42b1      	cmp	r1, r6
 8009468:	f040 848c 	bne.w	8009d84 <__ieee754_pow+0x9d4>
 800946c:	f00c 0c01 	and.w	ip, ip, #1
 8009470:	f1cc 0102 	rsb	r1, ip, #2
 8009474:	9100      	str	r1, [sp, #0]
 8009476:	4959      	ldr	r1, [pc, #356]	; (80095dc <__ieee754_pow+0x22c>)
 8009478:	428e      	cmp	r6, r1
 800947a:	d12d      	bne.n	80094d8 <__ieee754_pow+0x128>
 800947c:	2f00      	cmp	r7, #0
 800947e:	da79      	bge.n	8009574 <__ieee754_pow+0x1c4>
 8009480:	4956      	ldr	r1, [pc, #344]	; (80095dc <__ieee754_pow+0x22c>)
 8009482:	2000      	movs	r0, #0
 8009484:	f7f7 f98e 	bl	80007a4 <__aeabi_ddiv>
 8009488:	e016      	b.n	80094b8 <__ieee754_pow+0x108>
 800948a:	2100      	movs	r1, #0
 800948c:	9100      	str	r1, [sp, #0]
 800948e:	2800      	cmp	r0, #0
 8009490:	d13b      	bne.n	800950a <__ieee754_pow+0x15a>
 8009492:	494f      	ldr	r1, [pc, #316]	; (80095d0 <__ieee754_pow+0x220>)
 8009494:	428e      	cmp	r6, r1
 8009496:	d1ee      	bne.n	8009476 <__ieee754_pow+0xc6>
 8009498:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800949c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 80094a0:	ea53 0308 	orrs.w	r3, r3, r8
 80094a4:	f000 8466 	beq.w	8009d74 <__ieee754_pow+0x9c4>
 80094a8:	4b4d      	ldr	r3, [pc, #308]	; (80095e0 <__ieee754_pow+0x230>)
 80094aa:	429c      	cmp	r4, r3
 80094ac:	dd0d      	ble.n	80094ca <__ieee754_pow+0x11a>
 80094ae:	2f00      	cmp	r7, #0
 80094b0:	f280 8464 	bge.w	8009d7c <__ieee754_pow+0x9cc>
 80094b4:	2000      	movs	r0, #0
 80094b6:	2100      	movs	r1, #0
 80094b8:	ec41 0b10 	vmov	d0, r0, r1
 80094bc:	b00d      	add	sp, #52	; 0x34
 80094be:	ecbd 8b06 	vpop	{d8-d10}
 80094c2:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 80094c6:	2102      	movs	r1, #2
 80094c8:	e7e0      	b.n	800948c <__ieee754_pow+0xdc>
 80094ca:	2f00      	cmp	r7, #0
 80094cc:	daf2      	bge.n	80094b4 <__ieee754_pow+0x104>
 80094ce:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 80094d2:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 80094d6:	e7ef      	b.n	80094b8 <__ieee754_pow+0x108>
 80094d8:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 80094dc:	d104      	bne.n	80094e8 <__ieee754_pow+0x138>
 80094de:	4610      	mov	r0, r2
 80094e0:	4619      	mov	r1, r3
 80094e2:	f7f7 f835 	bl	8000550 <__aeabi_dmul>
 80094e6:	e7e7      	b.n	80094b8 <__ieee754_pow+0x108>
 80094e8:	493e      	ldr	r1, [pc, #248]	; (80095e4 <__ieee754_pow+0x234>)
 80094ea:	428f      	cmp	r7, r1
 80094ec:	d10d      	bne.n	800950a <__ieee754_pow+0x15a>
 80094ee:	f1b9 0f00 	cmp.w	r9, #0
 80094f2:	db0a      	blt.n	800950a <__ieee754_pow+0x15a>
 80094f4:	ec43 2b10 	vmov	d0, r2, r3
 80094f8:	b00d      	add	sp, #52	; 0x34
 80094fa:	ecbd 8b06 	vpop	{d8-d10}
 80094fe:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8009502:	f000 bc77 	b.w	8009df4 <__ieee754_sqrt>
 8009506:	2100      	movs	r1, #0
 8009508:	9100      	str	r1, [sp, #0]
 800950a:	ec43 2b10 	vmov	d0, r2, r3
 800950e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009512:	f000 fd23 	bl	8009f5c <fabs>
 8009516:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800951a:	ec51 0b10 	vmov	r0, r1, d0
 800951e:	f1b8 0f00 	cmp.w	r8, #0
 8009522:	d12a      	bne.n	800957a <__ieee754_pow+0x1ca>
 8009524:	b12c      	cbz	r4, 8009532 <__ieee754_pow+0x182>
 8009526:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 80095dc <__ieee754_pow+0x22c>
 800952a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800952e:	45e6      	cmp	lr, ip
 8009530:	d123      	bne.n	800957a <__ieee754_pow+0x1ca>
 8009532:	2f00      	cmp	r7, #0
 8009534:	da05      	bge.n	8009542 <__ieee754_pow+0x192>
 8009536:	4602      	mov	r2, r0
 8009538:	460b      	mov	r3, r1
 800953a:	2000      	movs	r0, #0
 800953c:	4927      	ldr	r1, [pc, #156]	; (80095dc <__ieee754_pow+0x22c>)
 800953e:	f7f7 f931 	bl	80007a4 <__aeabi_ddiv>
 8009542:	f1b9 0f00 	cmp.w	r9, #0
 8009546:	dab7      	bge.n	80094b8 <__ieee754_pow+0x108>
 8009548:	9b00      	ldr	r3, [sp, #0]
 800954a:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800954e:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8009552:	4323      	orrs	r3, r4
 8009554:	d108      	bne.n	8009568 <__ieee754_pow+0x1b8>
 8009556:	4602      	mov	r2, r0
 8009558:	460b      	mov	r3, r1
 800955a:	4610      	mov	r0, r2
 800955c:	4619      	mov	r1, r3
 800955e:	f7f6 fe3f 	bl	80001e0 <__aeabi_dsub>
 8009562:	4602      	mov	r2, r0
 8009564:	460b      	mov	r3, r1
 8009566:	e78d      	b.n	8009484 <__ieee754_pow+0xd4>
 8009568:	9b00      	ldr	r3, [sp, #0]
 800956a:	2b01      	cmp	r3, #1
 800956c:	d1a4      	bne.n	80094b8 <__ieee754_pow+0x108>
 800956e:	4602      	mov	r2, r0
 8009570:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8009574:	4610      	mov	r0, r2
 8009576:	4619      	mov	r1, r3
 8009578:	e79e      	b.n	80094b8 <__ieee754_pow+0x108>
 800957a:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 800957e:	f10c 35ff 	add.w	r5, ip, #4294967295
 8009582:	950a      	str	r5, [sp, #40]	; 0x28
 8009584:	9d00      	ldr	r5, [sp, #0]
 8009586:	46ac      	mov	ip, r5
 8009588:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 800958a:	ea5c 0505 	orrs.w	r5, ip, r5
 800958e:	d0e4      	beq.n	800955a <__ieee754_pow+0x1aa>
 8009590:	4b15      	ldr	r3, [pc, #84]	; (80095e8 <__ieee754_pow+0x238>)
 8009592:	429e      	cmp	r6, r3
 8009594:	f340 80fc 	ble.w	8009790 <__ieee754_pow+0x3e0>
 8009598:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800959c:	429e      	cmp	r6, r3
 800959e:	4b10      	ldr	r3, [pc, #64]	; (80095e0 <__ieee754_pow+0x230>)
 80095a0:	dd07      	ble.n	80095b2 <__ieee754_pow+0x202>
 80095a2:	429c      	cmp	r4, r3
 80095a4:	dc0a      	bgt.n	80095bc <__ieee754_pow+0x20c>
 80095a6:	2f00      	cmp	r7, #0
 80095a8:	da84      	bge.n	80094b4 <__ieee754_pow+0x104>
 80095aa:	a307      	add	r3, pc, #28	; (adr r3, 80095c8 <__ieee754_pow+0x218>)
 80095ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095b0:	e795      	b.n	80094de <__ieee754_pow+0x12e>
 80095b2:	429c      	cmp	r4, r3
 80095b4:	dbf7      	blt.n	80095a6 <__ieee754_pow+0x1f6>
 80095b6:	4b09      	ldr	r3, [pc, #36]	; (80095dc <__ieee754_pow+0x22c>)
 80095b8:	429c      	cmp	r4, r3
 80095ba:	dd17      	ble.n	80095ec <__ieee754_pow+0x23c>
 80095bc:	2f00      	cmp	r7, #0
 80095be:	dcf4      	bgt.n	80095aa <__ieee754_pow+0x1fa>
 80095c0:	e778      	b.n	80094b4 <__ieee754_pow+0x104>
 80095c2:	bf00      	nop
 80095c4:	f3af 8000 	nop.w
 80095c8:	8800759c 	.word	0x8800759c
 80095cc:	7e37e43c 	.word	0x7e37e43c
 80095d0:	7ff00000 	.word	0x7ff00000
 80095d4:	0800a1f8 	.word	0x0800a1f8
 80095d8:	433fffff 	.word	0x433fffff
 80095dc:	3ff00000 	.word	0x3ff00000
 80095e0:	3fefffff 	.word	0x3fefffff
 80095e4:	3fe00000 	.word	0x3fe00000
 80095e8:	41e00000 	.word	0x41e00000
 80095ec:	4b64      	ldr	r3, [pc, #400]	; (8009780 <__ieee754_pow+0x3d0>)
 80095ee:	2200      	movs	r2, #0
 80095f0:	f7f6 fdf6 	bl	80001e0 <__aeabi_dsub>
 80095f4:	a356      	add	r3, pc, #344	; (adr r3, 8009750 <__ieee754_pow+0x3a0>)
 80095f6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80095fa:	4604      	mov	r4, r0
 80095fc:	460d      	mov	r5, r1
 80095fe:	f7f6 ffa7 	bl	8000550 <__aeabi_dmul>
 8009602:	a355      	add	r3, pc, #340	; (adr r3, 8009758 <__ieee754_pow+0x3a8>)
 8009604:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009608:	4606      	mov	r6, r0
 800960a:	460f      	mov	r7, r1
 800960c:	4620      	mov	r0, r4
 800960e:	4629      	mov	r1, r5
 8009610:	f7f6 ff9e 	bl	8000550 <__aeabi_dmul>
 8009614:	4b5b      	ldr	r3, [pc, #364]	; (8009784 <__ieee754_pow+0x3d4>)
 8009616:	4682      	mov	sl, r0
 8009618:	468b      	mov	fp, r1
 800961a:	2200      	movs	r2, #0
 800961c:	4620      	mov	r0, r4
 800961e:	4629      	mov	r1, r5
 8009620:	f7f6 ff96 	bl	8000550 <__aeabi_dmul>
 8009624:	4602      	mov	r2, r0
 8009626:	460b      	mov	r3, r1
 8009628:	a14d      	add	r1, pc, #308	; (adr r1, 8009760 <__ieee754_pow+0x3b0>)
 800962a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800962e:	f7f6 fdd7 	bl	80001e0 <__aeabi_dsub>
 8009632:	4622      	mov	r2, r4
 8009634:	462b      	mov	r3, r5
 8009636:	f7f6 ff8b 	bl	8000550 <__aeabi_dmul>
 800963a:	4602      	mov	r2, r0
 800963c:	460b      	mov	r3, r1
 800963e:	2000      	movs	r0, #0
 8009640:	4951      	ldr	r1, [pc, #324]	; (8009788 <__ieee754_pow+0x3d8>)
 8009642:	f7f6 fdcd 	bl	80001e0 <__aeabi_dsub>
 8009646:	4622      	mov	r2, r4
 8009648:	4680      	mov	r8, r0
 800964a:	4689      	mov	r9, r1
 800964c:	462b      	mov	r3, r5
 800964e:	4620      	mov	r0, r4
 8009650:	4629      	mov	r1, r5
 8009652:	f7f6 ff7d 	bl	8000550 <__aeabi_dmul>
 8009656:	4602      	mov	r2, r0
 8009658:	460b      	mov	r3, r1
 800965a:	4640      	mov	r0, r8
 800965c:	4649      	mov	r1, r9
 800965e:	f7f6 ff77 	bl	8000550 <__aeabi_dmul>
 8009662:	a341      	add	r3, pc, #260	; (adr r3, 8009768 <__ieee754_pow+0x3b8>)
 8009664:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009668:	f7f6 ff72 	bl	8000550 <__aeabi_dmul>
 800966c:	4602      	mov	r2, r0
 800966e:	460b      	mov	r3, r1
 8009670:	4650      	mov	r0, sl
 8009672:	4659      	mov	r1, fp
 8009674:	f7f6 fdb4 	bl	80001e0 <__aeabi_dsub>
 8009678:	4602      	mov	r2, r0
 800967a:	460b      	mov	r3, r1
 800967c:	4680      	mov	r8, r0
 800967e:	4689      	mov	r9, r1
 8009680:	4630      	mov	r0, r6
 8009682:	4639      	mov	r1, r7
 8009684:	f7f6 fdae 	bl	80001e4 <__adddf3>
 8009688:	2400      	movs	r4, #0
 800968a:	4632      	mov	r2, r6
 800968c:	463b      	mov	r3, r7
 800968e:	4620      	mov	r0, r4
 8009690:	460d      	mov	r5, r1
 8009692:	f7f6 fda5 	bl	80001e0 <__aeabi_dsub>
 8009696:	4602      	mov	r2, r0
 8009698:	460b      	mov	r3, r1
 800969a:	4640      	mov	r0, r8
 800969c:	4649      	mov	r1, r9
 800969e:	f7f6 fd9f 	bl	80001e0 <__aeabi_dsub>
 80096a2:	9b00      	ldr	r3, [sp, #0]
 80096a4:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 80096a6:	3b01      	subs	r3, #1
 80096a8:	4313      	orrs	r3, r2
 80096aa:	4682      	mov	sl, r0
 80096ac:	468b      	mov	fp, r1
 80096ae:	f040 81f1 	bne.w	8009a94 <__ieee754_pow+0x6e4>
 80096b2:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8009770 <__ieee754_pow+0x3c0>
 80096b6:	eeb0 8a47 	vmov.f32	s16, s14
 80096ba:	eef0 8a67 	vmov.f32	s17, s15
 80096be:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 80096c2:	2600      	movs	r6, #0
 80096c4:	4632      	mov	r2, r6
 80096c6:	463b      	mov	r3, r7
 80096c8:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 80096cc:	f7f6 fd88 	bl	80001e0 <__aeabi_dsub>
 80096d0:	4622      	mov	r2, r4
 80096d2:	462b      	mov	r3, r5
 80096d4:	f7f6 ff3c 	bl	8000550 <__aeabi_dmul>
 80096d8:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 80096dc:	4680      	mov	r8, r0
 80096de:	4689      	mov	r9, r1
 80096e0:	4650      	mov	r0, sl
 80096e2:	4659      	mov	r1, fp
 80096e4:	f7f6 ff34 	bl	8000550 <__aeabi_dmul>
 80096e8:	4602      	mov	r2, r0
 80096ea:	460b      	mov	r3, r1
 80096ec:	4640      	mov	r0, r8
 80096ee:	4649      	mov	r1, r9
 80096f0:	f7f6 fd78 	bl	80001e4 <__adddf3>
 80096f4:	4632      	mov	r2, r6
 80096f6:	463b      	mov	r3, r7
 80096f8:	4680      	mov	r8, r0
 80096fa:	4689      	mov	r9, r1
 80096fc:	4620      	mov	r0, r4
 80096fe:	4629      	mov	r1, r5
 8009700:	f7f6 ff26 	bl	8000550 <__aeabi_dmul>
 8009704:	460b      	mov	r3, r1
 8009706:	4604      	mov	r4, r0
 8009708:	460d      	mov	r5, r1
 800970a:	4602      	mov	r2, r0
 800970c:	4649      	mov	r1, r9
 800970e:	4640      	mov	r0, r8
 8009710:	f7f6 fd68 	bl	80001e4 <__adddf3>
 8009714:	4b1d      	ldr	r3, [pc, #116]	; (800978c <__ieee754_pow+0x3dc>)
 8009716:	4299      	cmp	r1, r3
 8009718:	ec45 4b19 	vmov	d9, r4, r5
 800971c:	4606      	mov	r6, r0
 800971e:	460f      	mov	r7, r1
 8009720:	468b      	mov	fp, r1
 8009722:	f340 82fe 	ble.w	8009d22 <__ieee754_pow+0x972>
 8009726:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800972a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800972e:	4303      	orrs	r3, r0
 8009730:	f000 81f0 	beq.w	8009b14 <__ieee754_pow+0x764>
 8009734:	a310      	add	r3, pc, #64	; (adr r3, 8009778 <__ieee754_pow+0x3c8>)
 8009736:	e9d3 2300 	ldrd	r2, r3, [r3]
 800973a:	ec51 0b18 	vmov	r0, r1, d8
 800973e:	f7f6 ff07 	bl	8000550 <__aeabi_dmul>
 8009742:	a30d      	add	r3, pc, #52	; (adr r3, 8009778 <__ieee754_pow+0x3c8>)
 8009744:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009748:	e6cb      	b.n	80094e2 <__ieee754_pow+0x132>
 800974a:	bf00      	nop
 800974c:	f3af 8000 	nop.w
 8009750:	60000000 	.word	0x60000000
 8009754:	3ff71547 	.word	0x3ff71547
 8009758:	f85ddf44 	.word	0xf85ddf44
 800975c:	3e54ae0b 	.word	0x3e54ae0b
 8009760:	55555555 	.word	0x55555555
 8009764:	3fd55555 	.word	0x3fd55555
 8009768:	652b82fe 	.word	0x652b82fe
 800976c:	3ff71547 	.word	0x3ff71547
 8009770:	00000000 	.word	0x00000000
 8009774:	bff00000 	.word	0xbff00000
 8009778:	8800759c 	.word	0x8800759c
 800977c:	7e37e43c 	.word	0x7e37e43c
 8009780:	3ff00000 	.word	0x3ff00000
 8009784:	3fd00000 	.word	0x3fd00000
 8009788:	3fe00000 	.word	0x3fe00000
 800978c:	408fffff 	.word	0x408fffff
 8009790:	4bd7      	ldr	r3, [pc, #860]	; (8009af0 <__ieee754_pow+0x740>)
 8009792:	ea03 0309 	and.w	r3, r3, r9
 8009796:	2200      	movs	r2, #0
 8009798:	b92b      	cbnz	r3, 80097a6 <__ieee754_pow+0x3f6>
 800979a:	4bd6      	ldr	r3, [pc, #856]	; (8009af4 <__ieee754_pow+0x744>)
 800979c:	f7f6 fed8 	bl	8000550 <__aeabi_dmul>
 80097a0:	f06f 0234 	mvn.w	r2, #52	; 0x34
 80097a4:	460c      	mov	r4, r1
 80097a6:	1523      	asrs	r3, r4, #20
 80097a8:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 80097ac:	4413      	add	r3, r2
 80097ae:	9309      	str	r3, [sp, #36]	; 0x24
 80097b0:	4bd1      	ldr	r3, [pc, #836]	; (8009af8 <__ieee754_pow+0x748>)
 80097b2:	f3c4 0413 	ubfx	r4, r4, #0, #20
 80097b6:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 80097ba:	429c      	cmp	r4, r3
 80097bc:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 80097c0:	dd08      	ble.n	80097d4 <__ieee754_pow+0x424>
 80097c2:	4bce      	ldr	r3, [pc, #824]	; (8009afc <__ieee754_pow+0x74c>)
 80097c4:	429c      	cmp	r4, r3
 80097c6:	f340 8163 	ble.w	8009a90 <__ieee754_pow+0x6e0>
 80097ca:	9b09      	ldr	r3, [sp, #36]	; 0x24
 80097cc:	3301      	adds	r3, #1
 80097ce:	9309      	str	r3, [sp, #36]	; 0x24
 80097d0:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 80097d4:	2400      	movs	r4, #0
 80097d6:	00e3      	lsls	r3, r4, #3
 80097d8:	930b      	str	r3, [sp, #44]	; 0x2c
 80097da:	4bc9      	ldr	r3, [pc, #804]	; (8009b00 <__ieee754_pow+0x750>)
 80097dc:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 80097e0:	ed93 7b00 	vldr	d7, [r3]
 80097e4:	4629      	mov	r1, r5
 80097e6:	ec53 2b17 	vmov	r2, r3, d7
 80097ea:	eeb0 8a47 	vmov.f32	s16, s14
 80097ee:	eef0 8a67 	vmov.f32	s17, s15
 80097f2:	4682      	mov	sl, r0
 80097f4:	f7f6 fcf4 	bl	80001e0 <__aeabi_dsub>
 80097f8:	4652      	mov	r2, sl
 80097fa:	4606      	mov	r6, r0
 80097fc:	460f      	mov	r7, r1
 80097fe:	462b      	mov	r3, r5
 8009800:	ec51 0b18 	vmov	r0, r1, d8
 8009804:	f7f6 fcee 	bl	80001e4 <__adddf3>
 8009808:	4602      	mov	r2, r0
 800980a:	460b      	mov	r3, r1
 800980c:	2000      	movs	r0, #0
 800980e:	49bd      	ldr	r1, [pc, #756]	; (8009b04 <__ieee754_pow+0x754>)
 8009810:	f7f6 ffc8 	bl	80007a4 <__aeabi_ddiv>
 8009814:	ec41 0b19 	vmov	d9, r0, r1
 8009818:	4602      	mov	r2, r0
 800981a:	460b      	mov	r3, r1
 800981c:	4630      	mov	r0, r6
 800981e:	4639      	mov	r1, r7
 8009820:	f7f6 fe96 	bl	8000550 <__aeabi_dmul>
 8009824:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8009828:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800982c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8009830:	2300      	movs	r3, #0
 8009832:	9304      	str	r3, [sp, #16]
 8009834:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8009838:	46ab      	mov	fp, r5
 800983a:	106d      	asrs	r5, r5, #1
 800983c:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8009840:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8009844:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8009848:	2200      	movs	r2, #0
 800984a:	4640      	mov	r0, r8
 800984c:	4649      	mov	r1, r9
 800984e:	4614      	mov	r4, r2
 8009850:	461d      	mov	r5, r3
 8009852:	f7f6 fe7d 	bl	8000550 <__aeabi_dmul>
 8009856:	4602      	mov	r2, r0
 8009858:	460b      	mov	r3, r1
 800985a:	4630      	mov	r0, r6
 800985c:	4639      	mov	r1, r7
 800985e:	f7f6 fcbf 	bl	80001e0 <__aeabi_dsub>
 8009862:	ec53 2b18 	vmov	r2, r3, d8
 8009866:	4606      	mov	r6, r0
 8009868:	460f      	mov	r7, r1
 800986a:	4620      	mov	r0, r4
 800986c:	4629      	mov	r1, r5
 800986e:	f7f6 fcb7 	bl	80001e0 <__aeabi_dsub>
 8009872:	4602      	mov	r2, r0
 8009874:	460b      	mov	r3, r1
 8009876:	4650      	mov	r0, sl
 8009878:	4659      	mov	r1, fp
 800987a:	f7f6 fcb1 	bl	80001e0 <__aeabi_dsub>
 800987e:	4642      	mov	r2, r8
 8009880:	464b      	mov	r3, r9
 8009882:	f7f6 fe65 	bl	8000550 <__aeabi_dmul>
 8009886:	4602      	mov	r2, r0
 8009888:	460b      	mov	r3, r1
 800988a:	4630      	mov	r0, r6
 800988c:	4639      	mov	r1, r7
 800988e:	f7f6 fca7 	bl	80001e0 <__aeabi_dsub>
 8009892:	ec53 2b19 	vmov	r2, r3, d9
 8009896:	f7f6 fe5b 	bl	8000550 <__aeabi_dmul>
 800989a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800989e:	ec41 0b18 	vmov	d8, r0, r1
 80098a2:	4610      	mov	r0, r2
 80098a4:	4619      	mov	r1, r3
 80098a6:	f7f6 fe53 	bl	8000550 <__aeabi_dmul>
 80098aa:	a37d      	add	r3, pc, #500	; (adr r3, 8009aa0 <__ieee754_pow+0x6f0>)
 80098ac:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098b0:	4604      	mov	r4, r0
 80098b2:	460d      	mov	r5, r1
 80098b4:	f7f6 fe4c 	bl	8000550 <__aeabi_dmul>
 80098b8:	a37b      	add	r3, pc, #492	; (adr r3, 8009aa8 <__ieee754_pow+0x6f8>)
 80098ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098be:	f7f6 fc91 	bl	80001e4 <__adddf3>
 80098c2:	4622      	mov	r2, r4
 80098c4:	462b      	mov	r3, r5
 80098c6:	f7f6 fe43 	bl	8000550 <__aeabi_dmul>
 80098ca:	a379      	add	r3, pc, #484	; (adr r3, 8009ab0 <__ieee754_pow+0x700>)
 80098cc:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098d0:	f7f6 fc88 	bl	80001e4 <__adddf3>
 80098d4:	4622      	mov	r2, r4
 80098d6:	462b      	mov	r3, r5
 80098d8:	f7f6 fe3a 	bl	8000550 <__aeabi_dmul>
 80098dc:	a376      	add	r3, pc, #472	; (adr r3, 8009ab8 <__ieee754_pow+0x708>)
 80098de:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098e2:	f7f6 fc7f 	bl	80001e4 <__adddf3>
 80098e6:	4622      	mov	r2, r4
 80098e8:	462b      	mov	r3, r5
 80098ea:	f7f6 fe31 	bl	8000550 <__aeabi_dmul>
 80098ee:	a374      	add	r3, pc, #464	; (adr r3, 8009ac0 <__ieee754_pow+0x710>)
 80098f0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80098f4:	f7f6 fc76 	bl	80001e4 <__adddf3>
 80098f8:	4622      	mov	r2, r4
 80098fa:	462b      	mov	r3, r5
 80098fc:	f7f6 fe28 	bl	8000550 <__aeabi_dmul>
 8009900:	a371      	add	r3, pc, #452	; (adr r3, 8009ac8 <__ieee754_pow+0x718>)
 8009902:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009906:	f7f6 fc6d 	bl	80001e4 <__adddf3>
 800990a:	4622      	mov	r2, r4
 800990c:	4606      	mov	r6, r0
 800990e:	460f      	mov	r7, r1
 8009910:	462b      	mov	r3, r5
 8009912:	4620      	mov	r0, r4
 8009914:	4629      	mov	r1, r5
 8009916:	f7f6 fe1b 	bl	8000550 <__aeabi_dmul>
 800991a:	4602      	mov	r2, r0
 800991c:	460b      	mov	r3, r1
 800991e:	4630      	mov	r0, r6
 8009920:	4639      	mov	r1, r7
 8009922:	f7f6 fe15 	bl	8000550 <__aeabi_dmul>
 8009926:	4642      	mov	r2, r8
 8009928:	4604      	mov	r4, r0
 800992a:	460d      	mov	r5, r1
 800992c:	464b      	mov	r3, r9
 800992e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8009932:	f7f6 fc57 	bl	80001e4 <__adddf3>
 8009936:	ec53 2b18 	vmov	r2, r3, d8
 800993a:	f7f6 fe09 	bl	8000550 <__aeabi_dmul>
 800993e:	4622      	mov	r2, r4
 8009940:	462b      	mov	r3, r5
 8009942:	f7f6 fc4f 	bl	80001e4 <__adddf3>
 8009946:	4642      	mov	r2, r8
 8009948:	4682      	mov	sl, r0
 800994a:	468b      	mov	fp, r1
 800994c:	464b      	mov	r3, r9
 800994e:	4640      	mov	r0, r8
 8009950:	4649      	mov	r1, r9
 8009952:	f7f6 fdfd 	bl	8000550 <__aeabi_dmul>
 8009956:	4b6c      	ldr	r3, [pc, #432]	; (8009b08 <__ieee754_pow+0x758>)
 8009958:	2200      	movs	r2, #0
 800995a:	4606      	mov	r6, r0
 800995c:	460f      	mov	r7, r1
 800995e:	f7f6 fc41 	bl	80001e4 <__adddf3>
 8009962:	4652      	mov	r2, sl
 8009964:	465b      	mov	r3, fp
 8009966:	f7f6 fc3d 	bl	80001e4 <__adddf3>
 800996a:	9c04      	ldr	r4, [sp, #16]
 800996c:	460d      	mov	r5, r1
 800996e:	4622      	mov	r2, r4
 8009970:	460b      	mov	r3, r1
 8009972:	4640      	mov	r0, r8
 8009974:	4649      	mov	r1, r9
 8009976:	f7f6 fdeb 	bl	8000550 <__aeabi_dmul>
 800997a:	4b63      	ldr	r3, [pc, #396]	; (8009b08 <__ieee754_pow+0x758>)
 800997c:	4680      	mov	r8, r0
 800997e:	4689      	mov	r9, r1
 8009980:	2200      	movs	r2, #0
 8009982:	4620      	mov	r0, r4
 8009984:	4629      	mov	r1, r5
 8009986:	f7f6 fc2b 	bl	80001e0 <__aeabi_dsub>
 800998a:	4632      	mov	r2, r6
 800998c:	463b      	mov	r3, r7
 800998e:	f7f6 fc27 	bl	80001e0 <__aeabi_dsub>
 8009992:	4602      	mov	r2, r0
 8009994:	460b      	mov	r3, r1
 8009996:	4650      	mov	r0, sl
 8009998:	4659      	mov	r1, fp
 800999a:	f7f6 fc21 	bl	80001e0 <__aeabi_dsub>
 800999e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 80099a2:	f7f6 fdd5 	bl	8000550 <__aeabi_dmul>
 80099a6:	4622      	mov	r2, r4
 80099a8:	4606      	mov	r6, r0
 80099aa:	460f      	mov	r7, r1
 80099ac:	462b      	mov	r3, r5
 80099ae:	ec51 0b18 	vmov	r0, r1, d8
 80099b2:	f7f6 fdcd 	bl	8000550 <__aeabi_dmul>
 80099b6:	4602      	mov	r2, r0
 80099b8:	460b      	mov	r3, r1
 80099ba:	4630      	mov	r0, r6
 80099bc:	4639      	mov	r1, r7
 80099be:	f7f6 fc11 	bl	80001e4 <__adddf3>
 80099c2:	4606      	mov	r6, r0
 80099c4:	460f      	mov	r7, r1
 80099c6:	4602      	mov	r2, r0
 80099c8:	460b      	mov	r3, r1
 80099ca:	4640      	mov	r0, r8
 80099cc:	4649      	mov	r1, r9
 80099ce:	f7f6 fc09 	bl	80001e4 <__adddf3>
 80099d2:	9c04      	ldr	r4, [sp, #16]
 80099d4:	a33e      	add	r3, pc, #248	; (adr r3, 8009ad0 <__ieee754_pow+0x720>)
 80099d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80099da:	4620      	mov	r0, r4
 80099dc:	460d      	mov	r5, r1
 80099de:	f7f6 fdb7 	bl	8000550 <__aeabi_dmul>
 80099e2:	4642      	mov	r2, r8
 80099e4:	ec41 0b18 	vmov	d8, r0, r1
 80099e8:	464b      	mov	r3, r9
 80099ea:	4620      	mov	r0, r4
 80099ec:	4629      	mov	r1, r5
 80099ee:	f7f6 fbf7 	bl	80001e0 <__aeabi_dsub>
 80099f2:	4602      	mov	r2, r0
 80099f4:	460b      	mov	r3, r1
 80099f6:	4630      	mov	r0, r6
 80099f8:	4639      	mov	r1, r7
 80099fa:	f7f6 fbf1 	bl	80001e0 <__aeabi_dsub>
 80099fe:	a336      	add	r3, pc, #216	; (adr r3, 8009ad8 <__ieee754_pow+0x728>)
 8009a00:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a04:	f7f6 fda4 	bl	8000550 <__aeabi_dmul>
 8009a08:	a335      	add	r3, pc, #212	; (adr r3, 8009ae0 <__ieee754_pow+0x730>)
 8009a0a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a0e:	4606      	mov	r6, r0
 8009a10:	460f      	mov	r7, r1
 8009a12:	4620      	mov	r0, r4
 8009a14:	4629      	mov	r1, r5
 8009a16:	f7f6 fd9b 	bl	8000550 <__aeabi_dmul>
 8009a1a:	4602      	mov	r2, r0
 8009a1c:	460b      	mov	r3, r1
 8009a1e:	4630      	mov	r0, r6
 8009a20:	4639      	mov	r1, r7
 8009a22:	f7f6 fbdf 	bl	80001e4 <__adddf3>
 8009a26:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a28:	4b38      	ldr	r3, [pc, #224]	; (8009b0c <__ieee754_pow+0x75c>)
 8009a2a:	4413      	add	r3, r2
 8009a2c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009a30:	f7f6 fbd8 	bl	80001e4 <__adddf3>
 8009a34:	4682      	mov	sl, r0
 8009a36:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009a38:	468b      	mov	fp, r1
 8009a3a:	f7f6 fd1f 	bl	800047c <__aeabi_i2d>
 8009a3e:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009a40:	4b33      	ldr	r3, [pc, #204]	; (8009b10 <__ieee754_pow+0x760>)
 8009a42:	4413      	add	r3, r2
 8009a44:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009a48:	4606      	mov	r6, r0
 8009a4a:	460f      	mov	r7, r1
 8009a4c:	4652      	mov	r2, sl
 8009a4e:	465b      	mov	r3, fp
 8009a50:	ec51 0b18 	vmov	r0, r1, d8
 8009a54:	f7f6 fbc6 	bl	80001e4 <__adddf3>
 8009a58:	4642      	mov	r2, r8
 8009a5a:	464b      	mov	r3, r9
 8009a5c:	f7f6 fbc2 	bl	80001e4 <__adddf3>
 8009a60:	4632      	mov	r2, r6
 8009a62:	463b      	mov	r3, r7
 8009a64:	f7f6 fbbe 	bl	80001e4 <__adddf3>
 8009a68:	9c04      	ldr	r4, [sp, #16]
 8009a6a:	4632      	mov	r2, r6
 8009a6c:	463b      	mov	r3, r7
 8009a6e:	4620      	mov	r0, r4
 8009a70:	460d      	mov	r5, r1
 8009a72:	f7f6 fbb5 	bl	80001e0 <__aeabi_dsub>
 8009a76:	4642      	mov	r2, r8
 8009a78:	464b      	mov	r3, r9
 8009a7a:	f7f6 fbb1 	bl	80001e0 <__aeabi_dsub>
 8009a7e:	ec53 2b18 	vmov	r2, r3, d8
 8009a82:	f7f6 fbad 	bl	80001e0 <__aeabi_dsub>
 8009a86:	4602      	mov	r2, r0
 8009a88:	460b      	mov	r3, r1
 8009a8a:	4650      	mov	r0, sl
 8009a8c:	4659      	mov	r1, fp
 8009a8e:	e606      	b.n	800969e <__ieee754_pow+0x2ee>
 8009a90:	2401      	movs	r4, #1
 8009a92:	e6a0      	b.n	80097d6 <__ieee754_pow+0x426>
 8009a94:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8009ae8 <__ieee754_pow+0x738>
 8009a98:	e60d      	b.n	80096b6 <__ieee754_pow+0x306>
 8009a9a:	bf00      	nop
 8009a9c:	f3af 8000 	nop.w
 8009aa0:	4a454eef 	.word	0x4a454eef
 8009aa4:	3fca7e28 	.word	0x3fca7e28
 8009aa8:	93c9db65 	.word	0x93c9db65
 8009aac:	3fcd864a 	.word	0x3fcd864a
 8009ab0:	a91d4101 	.word	0xa91d4101
 8009ab4:	3fd17460 	.word	0x3fd17460
 8009ab8:	518f264d 	.word	0x518f264d
 8009abc:	3fd55555 	.word	0x3fd55555
 8009ac0:	db6fabff 	.word	0xdb6fabff
 8009ac4:	3fdb6db6 	.word	0x3fdb6db6
 8009ac8:	33333303 	.word	0x33333303
 8009acc:	3fe33333 	.word	0x3fe33333
 8009ad0:	e0000000 	.word	0xe0000000
 8009ad4:	3feec709 	.word	0x3feec709
 8009ad8:	dc3a03fd 	.word	0xdc3a03fd
 8009adc:	3feec709 	.word	0x3feec709
 8009ae0:	145b01f5 	.word	0x145b01f5
 8009ae4:	be3e2fe0 	.word	0xbe3e2fe0
 8009ae8:	00000000 	.word	0x00000000
 8009aec:	3ff00000 	.word	0x3ff00000
 8009af0:	7ff00000 	.word	0x7ff00000
 8009af4:	43400000 	.word	0x43400000
 8009af8:	0003988e 	.word	0x0003988e
 8009afc:	000bb679 	.word	0x000bb679
 8009b00:	0800a200 	.word	0x0800a200
 8009b04:	3ff00000 	.word	0x3ff00000
 8009b08:	40080000 	.word	0x40080000
 8009b0c:	0800a220 	.word	0x0800a220
 8009b10:	0800a210 	.word	0x0800a210
 8009b14:	a3b5      	add	r3, pc, #724	; (adr r3, 8009dec <__ieee754_pow+0xa3c>)
 8009b16:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009b1a:	4640      	mov	r0, r8
 8009b1c:	4649      	mov	r1, r9
 8009b1e:	f7f6 fb61 	bl	80001e4 <__adddf3>
 8009b22:	4622      	mov	r2, r4
 8009b24:	ec41 0b1a 	vmov	d10, r0, r1
 8009b28:	462b      	mov	r3, r5
 8009b2a:	4630      	mov	r0, r6
 8009b2c:	4639      	mov	r1, r7
 8009b2e:	f7f6 fb57 	bl	80001e0 <__aeabi_dsub>
 8009b32:	4602      	mov	r2, r0
 8009b34:	460b      	mov	r3, r1
 8009b36:	ec51 0b1a 	vmov	r0, r1, d10
 8009b3a:	f7f6 ff99 	bl	8000a70 <__aeabi_dcmpgt>
 8009b3e:	2800      	cmp	r0, #0
 8009b40:	f47f adf8 	bne.w	8009734 <__ieee754_pow+0x384>
 8009b44:	4aa4      	ldr	r2, [pc, #656]	; (8009dd8 <__ieee754_pow+0xa28>)
 8009b46:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009b4a:	4293      	cmp	r3, r2
 8009b4c:	f340 810b 	ble.w	8009d66 <__ieee754_pow+0x9b6>
 8009b50:	151b      	asrs	r3, r3, #20
 8009b52:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 8009b56:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009b5a:	fa4a f303 	asr.w	r3, sl, r3
 8009b5e:	445b      	add	r3, fp
 8009b60:	f3c3 520a 	ubfx	r2, r3, #20, #11
 8009b64:	4e9d      	ldr	r6, [pc, #628]	; (8009ddc <__ieee754_pow+0xa2c>)
 8009b66:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009b6a:	4116      	asrs	r6, r2
 8009b6c:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009b70:	2000      	movs	r0, #0
 8009b72:	ea23 0106 	bic.w	r1, r3, r6
 8009b76:	f1c2 0214 	rsb	r2, r2, #20
 8009b7a:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009b7e:	fa4a fa02 	asr.w	sl, sl, r2
 8009b82:	f1bb 0f00 	cmp.w	fp, #0
 8009b86:	4602      	mov	r2, r0
 8009b88:	460b      	mov	r3, r1
 8009b8a:	4620      	mov	r0, r4
 8009b8c:	4629      	mov	r1, r5
 8009b8e:	bfb8      	it	lt
 8009b90:	f1ca 0a00 	rsblt	sl, sl, #0
 8009b94:	f7f6 fb24 	bl	80001e0 <__aeabi_dsub>
 8009b98:	ec41 0b19 	vmov	d9, r0, r1
 8009b9c:	4642      	mov	r2, r8
 8009b9e:	464b      	mov	r3, r9
 8009ba0:	ec51 0b19 	vmov	r0, r1, d9
 8009ba4:	f7f6 fb1e 	bl	80001e4 <__adddf3>
 8009ba8:	2400      	movs	r4, #0
 8009baa:	a379      	add	r3, pc, #484	; (adr r3, 8009d90 <__ieee754_pow+0x9e0>)
 8009bac:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bb0:	4620      	mov	r0, r4
 8009bb2:	460d      	mov	r5, r1
 8009bb4:	f7f6 fccc 	bl	8000550 <__aeabi_dmul>
 8009bb8:	ec53 2b19 	vmov	r2, r3, d9
 8009bbc:	4606      	mov	r6, r0
 8009bbe:	460f      	mov	r7, r1
 8009bc0:	4620      	mov	r0, r4
 8009bc2:	4629      	mov	r1, r5
 8009bc4:	f7f6 fb0c 	bl	80001e0 <__aeabi_dsub>
 8009bc8:	4602      	mov	r2, r0
 8009bca:	460b      	mov	r3, r1
 8009bcc:	4640      	mov	r0, r8
 8009bce:	4649      	mov	r1, r9
 8009bd0:	f7f6 fb06 	bl	80001e0 <__aeabi_dsub>
 8009bd4:	a370      	add	r3, pc, #448	; (adr r3, 8009d98 <__ieee754_pow+0x9e8>)
 8009bd6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009bda:	f7f6 fcb9 	bl	8000550 <__aeabi_dmul>
 8009bde:	a370      	add	r3, pc, #448	; (adr r3, 8009da0 <__ieee754_pow+0x9f0>)
 8009be0:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009be4:	4680      	mov	r8, r0
 8009be6:	4689      	mov	r9, r1
 8009be8:	4620      	mov	r0, r4
 8009bea:	4629      	mov	r1, r5
 8009bec:	f7f6 fcb0 	bl	8000550 <__aeabi_dmul>
 8009bf0:	4602      	mov	r2, r0
 8009bf2:	460b      	mov	r3, r1
 8009bf4:	4640      	mov	r0, r8
 8009bf6:	4649      	mov	r1, r9
 8009bf8:	f7f6 faf4 	bl	80001e4 <__adddf3>
 8009bfc:	4604      	mov	r4, r0
 8009bfe:	460d      	mov	r5, r1
 8009c00:	4602      	mov	r2, r0
 8009c02:	460b      	mov	r3, r1
 8009c04:	4630      	mov	r0, r6
 8009c06:	4639      	mov	r1, r7
 8009c08:	f7f6 faec 	bl	80001e4 <__adddf3>
 8009c0c:	4632      	mov	r2, r6
 8009c0e:	463b      	mov	r3, r7
 8009c10:	4680      	mov	r8, r0
 8009c12:	4689      	mov	r9, r1
 8009c14:	f7f6 fae4 	bl	80001e0 <__aeabi_dsub>
 8009c18:	4602      	mov	r2, r0
 8009c1a:	460b      	mov	r3, r1
 8009c1c:	4620      	mov	r0, r4
 8009c1e:	4629      	mov	r1, r5
 8009c20:	f7f6 fade 	bl	80001e0 <__aeabi_dsub>
 8009c24:	4642      	mov	r2, r8
 8009c26:	4606      	mov	r6, r0
 8009c28:	460f      	mov	r7, r1
 8009c2a:	464b      	mov	r3, r9
 8009c2c:	4640      	mov	r0, r8
 8009c2e:	4649      	mov	r1, r9
 8009c30:	f7f6 fc8e 	bl	8000550 <__aeabi_dmul>
 8009c34:	a35c      	add	r3, pc, #368	; (adr r3, 8009da8 <__ieee754_pow+0x9f8>)
 8009c36:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c3a:	4604      	mov	r4, r0
 8009c3c:	460d      	mov	r5, r1
 8009c3e:	f7f6 fc87 	bl	8000550 <__aeabi_dmul>
 8009c42:	a35b      	add	r3, pc, #364	; (adr r3, 8009db0 <__ieee754_pow+0xa00>)
 8009c44:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c48:	f7f6 faca 	bl	80001e0 <__aeabi_dsub>
 8009c4c:	4622      	mov	r2, r4
 8009c4e:	462b      	mov	r3, r5
 8009c50:	f7f6 fc7e 	bl	8000550 <__aeabi_dmul>
 8009c54:	a358      	add	r3, pc, #352	; (adr r3, 8009db8 <__ieee754_pow+0xa08>)
 8009c56:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c5a:	f7f6 fac3 	bl	80001e4 <__adddf3>
 8009c5e:	4622      	mov	r2, r4
 8009c60:	462b      	mov	r3, r5
 8009c62:	f7f6 fc75 	bl	8000550 <__aeabi_dmul>
 8009c66:	a356      	add	r3, pc, #344	; (adr r3, 8009dc0 <__ieee754_pow+0xa10>)
 8009c68:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c6c:	f7f6 fab8 	bl	80001e0 <__aeabi_dsub>
 8009c70:	4622      	mov	r2, r4
 8009c72:	462b      	mov	r3, r5
 8009c74:	f7f6 fc6c 	bl	8000550 <__aeabi_dmul>
 8009c78:	a353      	add	r3, pc, #332	; (adr r3, 8009dc8 <__ieee754_pow+0xa18>)
 8009c7a:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009c7e:	f7f6 fab1 	bl	80001e4 <__adddf3>
 8009c82:	4622      	mov	r2, r4
 8009c84:	462b      	mov	r3, r5
 8009c86:	f7f6 fc63 	bl	8000550 <__aeabi_dmul>
 8009c8a:	4602      	mov	r2, r0
 8009c8c:	460b      	mov	r3, r1
 8009c8e:	4640      	mov	r0, r8
 8009c90:	4649      	mov	r1, r9
 8009c92:	f7f6 faa5 	bl	80001e0 <__aeabi_dsub>
 8009c96:	4604      	mov	r4, r0
 8009c98:	460d      	mov	r5, r1
 8009c9a:	4602      	mov	r2, r0
 8009c9c:	460b      	mov	r3, r1
 8009c9e:	4640      	mov	r0, r8
 8009ca0:	4649      	mov	r1, r9
 8009ca2:	f7f6 fc55 	bl	8000550 <__aeabi_dmul>
 8009ca6:	2200      	movs	r2, #0
 8009ca8:	ec41 0b19 	vmov	d9, r0, r1
 8009cac:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009cb0:	4620      	mov	r0, r4
 8009cb2:	4629      	mov	r1, r5
 8009cb4:	f7f6 fa94 	bl	80001e0 <__aeabi_dsub>
 8009cb8:	4602      	mov	r2, r0
 8009cba:	460b      	mov	r3, r1
 8009cbc:	ec51 0b19 	vmov	r0, r1, d9
 8009cc0:	f7f6 fd70 	bl	80007a4 <__aeabi_ddiv>
 8009cc4:	4632      	mov	r2, r6
 8009cc6:	4604      	mov	r4, r0
 8009cc8:	460d      	mov	r5, r1
 8009cca:	463b      	mov	r3, r7
 8009ccc:	4640      	mov	r0, r8
 8009cce:	4649      	mov	r1, r9
 8009cd0:	f7f6 fc3e 	bl	8000550 <__aeabi_dmul>
 8009cd4:	4632      	mov	r2, r6
 8009cd6:	463b      	mov	r3, r7
 8009cd8:	f7f6 fa84 	bl	80001e4 <__adddf3>
 8009cdc:	4602      	mov	r2, r0
 8009cde:	460b      	mov	r3, r1
 8009ce0:	4620      	mov	r0, r4
 8009ce2:	4629      	mov	r1, r5
 8009ce4:	f7f6 fa7c 	bl	80001e0 <__aeabi_dsub>
 8009ce8:	4642      	mov	r2, r8
 8009cea:	464b      	mov	r3, r9
 8009cec:	f7f6 fa78 	bl	80001e0 <__aeabi_dsub>
 8009cf0:	460b      	mov	r3, r1
 8009cf2:	4602      	mov	r2, r0
 8009cf4:	493a      	ldr	r1, [pc, #232]	; (8009de0 <__ieee754_pow+0xa30>)
 8009cf6:	2000      	movs	r0, #0
 8009cf8:	f7f6 fa72 	bl	80001e0 <__aeabi_dsub>
 8009cfc:	e9cd 0100 	strd	r0, r1, [sp]
 8009d00:	9b01      	ldr	r3, [sp, #4]
 8009d02:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8009d06:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8009d0a:	da2f      	bge.n	8009d6c <__ieee754_pow+0x9bc>
 8009d0c:	4650      	mov	r0, sl
 8009d0e:	ed9d 0b00 	vldr	d0, [sp]
 8009d12:	f000 f9cd 	bl	800a0b0 <scalbn>
 8009d16:	ec51 0b10 	vmov	r0, r1, d0
 8009d1a:	ec53 2b18 	vmov	r2, r3, d8
 8009d1e:	f7ff bbe0 	b.w	80094e2 <__ieee754_pow+0x132>
 8009d22:	4b30      	ldr	r3, [pc, #192]	; (8009de4 <__ieee754_pow+0xa34>)
 8009d24:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009d28:	429e      	cmp	r6, r3
 8009d2a:	f77f af0b 	ble.w	8009b44 <__ieee754_pow+0x794>
 8009d2e:	4b2e      	ldr	r3, [pc, #184]	; (8009de8 <__ieee754_pow+0xa38>)
 8009d30:	440b      	add	r3, r1
 8009d32:	4303      	orrs	r3, r0
 8009d34:	d00b      	beq.n	8009d4e <__ieee754_pow+0x99e>
 8009d36:	a326      	add	r3, pc, #152	; (adr r3, 8009dd0 <__ieee754_pow+0xa20>)
 8009d38:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d3c:	ec51 0b18 	vmov	r0, r1, d8
 8009d40:	f7f6 fc06 	bl	8000550 <__aeabi_dmul>
 8009d44:	a322      	add	r3, pc, #136	; (adr r3, 8009dd0 <__ieee754_pow+0xa20>)
 8009d46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009d4a:	f7ff bbca 	b.w	80094e2 <__ieee754_pow+0x132>
 8009d4e:	4622      	mov	r2, r4
 8009d50:	462b      	mov	r3, r5
 8009d52:	f7f6 fa45 	bl	80001e0 <__aeabi_dsub>
 8009d56:	4642      	mov	r2, r8
 8009d58:	464b      	mov	r3, r9
 8009d5a:	f7f6 fe7f 	bl	8000a5c <__aeabi_dcmpge>
 8009d5e:	2800      	cmp	r0, #0
 8009d60:	f43f aef0 	beq.w	8009b44 <__ieee754_pow+0x794>
 8009d64:	e7e7      	b.n	8009d36 <__ieee754_pow+0x986>
 8009d66:	f04f 0a00 	mov.w	sl, #0
 8009d6a:	e717      	b.n	8009b9c <__ieee754_pow+0x7ec>
 8009d6c:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009d70:	4619      	mov	r1, r3
 8009d72:	e7d2      	b.n	8009d1a <__ieee754_pow+0x96a>
 8009d74:	491a      	ldr	r1, [pc, #104]	; (8009de0 <__ieee754_pow+0xa30>)
 8009d76:	2000      	movs	r0, #0
 8009d78:	f7ff bb9e 	b.w	80094b8 <__ieee754_pow+0x108>
 8009d7c:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009d80:	f7ff bb9a 	b.w	80094b8 <__ieee754_pow+0x108>
 8009d84:	9000      	str	r0, [sp, #0]
 8009d86:	f7ff bb76 	b.w	8009476 <__ieee754_pow+0xc6>
 8009d8a:	2100      	movs	r1, #0
 8009d8c:	f7ff bb60 	b.w	8009450 <__ieee754_pow+0xa0>
 8009d90:	00000000 	.word	0x00000000
 8009d94:	3fe62e43 	.word	0x3fe62e43
 8009d98:	fefa39ef 	.word	0xfefa39ef
 8009d9c:	3fe62e42 	.word	0x3fe62e42
 8009da0:	0ca86c39 	.word	0x0ca86c39
 8009da4:	be205c61 	.word	0xbe205c61
 8009da8:	72bea4d0 	.word	0x72bea4d0
 8009dac:	3e663769 	.word	0x3e663769
 8009db0:	c5d26bf1 	.word	0xc5d26bf1
 8009db4:	3ebbbd41 	.word	0x3ebbbd41
 8009db8:	af25de2c 	.word	0xaf25de2c
 8009dbc:	3f11566a 	.word	0x3f11566a
 8009dc0:	16bebd93 	.word	0x16bebd93
 8009dc4:	3f66c16c 	.word	0x3f66c16c
 8009dc8:	5555553e 	.word	0x5555553e
 8009dcc:	3fc55555 	.word	0x3fc55555
 8009dd0:	c2f8f359 	.word	0xc2f8f359
 8009dd4:	01a56e1f 	.word	0x01a56e1f
 8009dd8:	3fe00000 	.word	0x3fe00000
 8009ddc:	000fffff 	.word	0x000fffff
 8009de0:	3ff00000 	.word	0x3ff00000
 8009de4:	4090cbff 	.word	0x4090cbff
 8009de8:	3f6f3400 	.word	0x3f6f3400
 8009dec:	652b82fe 	.word	0x652b82fe
 8009df0:	3c971547 	.word	0x3c971547

08009df4 <__ieee754_sqrt>:
 8009df4:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8009df8:	ec55 4b10 	vmov	r4, r5, d0
 8009dfc:	4e56      	ldr	r6, [pc, #344]	; (8009f58 <__ieee754_sqrt+0x164>)
 8009dfe:	43ae      	bics	r6, r5
 8009e00:	ee10 0a10 	vmov	r0, s0
 8009e04:	ee10 3a10 	vmov	r3, s0
 8009e08:	4629      	mov	r1, r5
 8009e0a:	462a      	mov	r2, r5
 8009e0c:	d110      	bne.n	8009e30 <__ieee754_sqrt+0x3c>
 8009e0e:	ee10 2a10 	vmov	r2, s0
 8009e12:	462b      	mov	r3, r5
 8009e14:	f7f6 fb9c 	bl	8000550 <__aeabi_dmul>
 8009e18:	4602      	mov	r2, r0
 8009e1a:	460b      	mov	r3, r1
 8009e1c:	4620      	mov	r0, r4
 8009e1e:	4629      	mov	r1, r5
 8009e20:	f7f6 f9e0 	bl	80001e4 <__adddf3>
 8009e24:	4604      	mov	r4, r0
 8009e26:	460d      	mov	r5, r1
 8009e28:	ec45 4b10 	vmov	d0, r4, r5
 8009e2c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009e30:	2d00      	cmp	r5, #0
 8009e32:	dc10      	bgt.n	8009e56 <__ieee754_sqrt+0x62>
 8009e34:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009e38:	4330      	orrs	r0, r6
 8009e3a:	d0f5      	beq.n	8009e28 <__ieee754_sqrt+0x34>
 8009e3c:	b15d      	cbz	r5, 8009e56 <__ieee754_sqrt+0x62>
 8009e3e:	ee10 2a10 	vmov	r2, s0
 8009e42:	462b      	mov	r3, r5
 8009e44:	ee10 0a10 	vmov	r0, s0
 8009e48:	f7f6 f9ca 	bl	80001e0 <__aeabi_dsub>
 8009e4c:	4602      	mov	r2, r0
 8009e4e:	460b      	mov	r3, r1
 8009e50:	f7f6 fca8 	bl	80007a4 <__aeabi_ddiv>
 8009e54:	e7e6      	b.n	8009e24 <__ieee754_sqrt+0x30>
 8009e56:	1509      	asrs	r1, r1, #20
 8009e58:	d076      	beq.n	8009f48 <__ieee754_sqrt+0x154>
 8009e5a:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009e5e:	07ce      	lsls	r6, r1, #31
 8009e60:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8009e64:	bf5e      	ittt	pl
 8009e66:	0fda      	lsrpl	r2, r3, #31
 8009e68:	005b      	lslpl	r3, r3, #1
 8009e6a:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009e6e:	0fda      	lsrs	r2, r3, #31
 8009e70:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8009e74:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009e78:	2000      	movs	r0, #0
 8009e7a:	106d      	asrs	r5, r5, #1
 8009e7c:	005b      	lsls	r3, r3, #1
 8009e7e:	f04f 0e16 	mov.w	lr, #22
 8009e82:	4684      	mov	ip, r0
 8009e84:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009e88:	eb0c 0401 	add.w	r4, ip, r1
 8009e8c:	4294      	cmp	r4, r2
 8009e8e:	bfde      	ittt	le
 8009e90:	1b12      	suble	r2, r2, r4
 8009e92:	eb04 0c01 	addle.w	ip, r4, r1
 8009e96:	1840      	addle	r0, r0, r1
 8009e98:	0052      	lsls	r2, r2, #1
 8009e9a:	f1be 0e01 	subs.w	lr, lr, #1
 8009e9e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009ea2:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8009ea6:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009eaa:	d1ed      	bne.n	8009e88 <__ieee754_sqrt+0x94>
 8009eac:	4671      	mov	r1, lr
 8009eae:	2720      	movs	r7, #32
 8009eb0:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8009eb4:	4562      	cmp	r2, ip
 8009eb6:	eb04 060e 	add.w	r6, r4, lr
 8009eba:	dc02      	bgt.n	8009ec2 <__ieee754_sqrt+0xce>
 8009ebc:	d113      	bne.n	8009ee6 <__ieee754_sqrt+0xf2>
 8009ebe:	429e      	cmp	r6, r3
 8009ec0:	d811      	bhi.n	8009ee6 <__ieee754_sqrt+0xf2>
 8009ec2:	2e00      	cmp	r6, #0
 8009ec4:	eb06 0e04 	add.w	lr, r6, r4
 8009ec8:	da43      	bge.n	8009f52 <__ieee754_sqrt+0x15e>
 8009eca:	f1be 0f00 	cmp.w	lr, #0
 8009ece:	db40      	blt.n	8009f52 <__ieee754_sqrt+0x15e>
 8009ed0:	f10c 0801 	add.w	r8, ip, #1
 8009ed4:	eba2 020c 	sub.w	r2, r2, ip
 8009ed8:	429e      	cmp	r6, r3
 8009eda:	bf88      	it	hi
 8009edc:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8009ee0:	1b9b      	subs	r3, r3, r6
 8009ee2:	4421      	add	r1, r4
 8009ee4:	46c4      	mov	ip, r8
 8009ee6:	0052      	lsls	r2, r2, #1
 8009ee8:	3f01      	subs	r7, #1
 8009eea:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8009eee:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8009ef2:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009ef6:	d1dd      	bne.n	8009eb4 <__ieee754_sqrt+0xc0>
 8009ef8:	4313      	orrs	r3, r2
 8009efa:	d006      	beq.n	8009f0a <__ieee754_sqrt+0x116>
 8009efc:	1c4c      	adds	r4, r1, #1
 8009efe:	bf13      	iteet	ne
 8009f00:	3101      	addne	r1, #1
 8009f02:	3001      	addeq	r0, #1
 8009f04:	4639      	moveq	r1, r7
 8009f06:	f021 0101 	bicne.w	r1, r1, #1
 8009f0a:	1043      	asrs	r3, r0, #1
 8009f0c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8009f10:	0849      	lsrs	r1, r1, #1
 8009f12:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8009f16:	07c2      	lsls	r2, r0, #31
 8009f18:	bf48      	it	mi
 8009f1a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8009f1e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8009f22:	460c      	mov	r4, r1
 8009f24:	463d      	mov	r5, r7
 8009f26:	e77f      	b.n	8009e28 <__ieee754_sqrt+0x34>
 8009f28:	0ada      	lsrs	r2, r3, #11
 8009f2a:	3815      	subs	r0, #21
 8009f2c:	055b      	lsls	r3, r3, #21
 8009f2e:	2a00      	cmp	r2, #0
 8009f30:	d0fa      	beq.n	8009f28 <__ieee754_sqrt+0x134>
 8009f32:	02d7      	lsls	r7, r2, #11
 8009f34:	d50a      	bpl.n	8009f4c <__ieee754_sqrt+0x158>
 8009f36:	f1c1 0420 	rsb	r4, r1, #32
 8009f3a:	fa23 f404 	lsr.w	r4, r3, r4
 8009f3e:	1e4d      	subs	r5, r1, #1
 8009f40:	408b      	lsls	r3, r1
 8009f42:	4322      	orrs	r2, r4
 8009f44:	1b41      	subs	r1, r0, r5
 8009f46:	e788      	b.n	8009e5a <__ieee754_sqrt+0x66>
 8009f48:	4608      	mov	r0, r1
 8009f4a:	e7f0      	b.n	8009f2e <__ieee754_sqrt+0x13a>
 8009f4c:	0052      	lsls	r2, r2, #1
 8009f4e:	3101      	adds	r1, #1
 8009f50:	e7ef      	b.n	8009f32 <__ieee754_sqrt+0x13e>
 8009f52:	46e0      	mov	r8, ip
 8009f54:	e7be      	b.n	8009ed4 <__ieee754_sqrt+0xe0>
 8009f56:	bf00      	nop
 8009f58:	7ff00000 	.word	0x7ff00000

08009f5c <fabs>:
 8009f5c:	ec51 0b10 	vmov	r0, r1, d0
 8009f60:	ee10 2a10 	vmov	r2, s0
 8009f64:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009f68:	ec43 2b10 	vmov	d0, r2, r3
 8009f6c:	4770      	bx	lr

08009f6e <finite>:
 8009f6e:	b082      	sub	sp, #8
 8009f70:	ed8d 0b00 	vstr	d0, [sp]
 8009f74:	9801      	ldr	r0, [sp, #4]
 8009f76:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009f7a:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009f7e:	0fc0      	lsrs	r0, r0, #31
 8009f80:	b002      	add	sp, #8
 8009f82:	4770      	bx	lr
 8009f84:	0000      	movs	r0, r0
	...

08009f88 <nan>:
 8009f88:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009f90 <nan+0x8>
 8009f8c:	4770      	bx	lr
 8009f8e:	bf00      	nop
 8009f90:	00000000 	.word	0x00000000
 8009f94:	7ff80000 	.word	0x7ff80000

08009f98 <rint>:
 8009f98:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009f9a:	ec51 0b10 	vmov	r0, r1, d0
 8009f9e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8009fa2:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8009fa6:	2e13      	cmp	r6, #19
 8009fa8:	ee10 4a10 	vmov	r4, s0
 8009fac:	460b      	mov	r3, r1
 8009fae:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8009fb2:	dc58      	bgt.n	800a066 <rint+0xce>
 8009fb4:	2e00      	cmp	r6, #0
 8009fb6:	da2b      	bge.n	800a010 <rint+0x78>
 8009fb8:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009fbc:	4302      	orrs	r2, r0
 8009fbe:	d023      	beq.n	800a008 <rint+0x70>
 8009fc0:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8009fc4:	4302      	orrs	r2, r0
 8009fc6:	4254      	negs	r4, r2
 8009fc8:	4314      	orrs	r4, r2
 8009fca:	0c4b      	lsrs	r3, r1, #17
 8009fcc:	0b24      	lsrs	r4, r4, #12
 8009fce:	045b      	lsls	r3, r3, #17
 8009fd0:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8009fd4:	ea44 0103 	orr.w	r1, r4, r3
 8009fd8:	4b32      	ldr	r3, [pc, #200]	; (800a0a4 <rint+0x10c>)
 8009fda:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8009fde:	e9d3 6700 	ldrd	r6, r7, [r3]
 8009fe2:	4602      	mov	r2, r0
 8009fe4:	460b      	mov	r3, r1
 8009fe6:	4630      	mov	r0, r6
 8009fe8:	4639      	mov	r1, r7
 8009fea:	f7f6 f8fb 	bl	80001e4 <__adddf3>
 8009fee:	e9cd 0100 	strd	r0, r1, [sp]
 8009ff2:	463b      	mov	r3, r7
 8009ff4:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009ff8:	4632      	mov	r2, r6
 8009ffa:	f7f6 f8f1 	bl	80001e0 <__aeabi_dsub>
 8009ffe:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 800a002:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 800a006:	4639      	mov	r1, r7
 800a008:	ec41 0b10 	vmov	d0, r0, r1
 800a00c:	b003      	add	sp, #12
 800a00e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 800a010:	4a25      	ldr	r2, [pc, #148]	; (800a0a8 <rint+0x110>)
 800a012:	4132      	asrs	r2, r6
 800a014:	ea01 0702 	and.w	r7, r1, r2
 800a018:	4307      	orrs	r7, r0
 800a01a:	d0f5      	beq.n	800a008 <rint+0x70>
 800a01c:	0851      	lsrs	r1, r2, #1
 800a01e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 800a022:	4314      	orrs	r4, r2
 800a024:	d00c      	beq.n	800a040 <rint+0xa8>
 800a026:	ea23 0201 	bic.w	r2, r3, r1
 800a02a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 800a02e:	2e13      	cmp	r6, #19
 800a030:	fa43 f606 	asr.w	r6, r3, r6
 800a034:	bf0c      	ite	eq
 800a036:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 800a03a:	2400      	movne	r4, #0
 800a03c:	ea42 0306 	orr.w	r3, r2, r6
 800a040:	4918      	ldr	r1, [pc, #96]	; (800a0a4 <rint+0x10c>)
 800a042:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800a046:	4622      	mov	r2, r4
 800a048:	e9d5 4500 	ldrd	r4, r5, [r5]
 800a04c:	4620      	mov	r0, r4
 800a04e:	4629      	mov	r1, r5
 800a050:	f7f6 f8c8 	bl	80001e4 <__adddf3>
 800a054:	e9cd 0100 	strd	r0, r1, [sp]
 800a058:	e9dd 0100 	ldrd	r0, r1, [sp]
 800a05c:	4622      	mov	r2, r4
 800a05e:	462b      	mov	r3, r5
 800a060:	f7f6 f8be 	bl	80001e0 <__aeabi_dsub>
 800a064:	e7d0      	b.n	800a008 <rint+0x70>
 800a066:	2e33      	cmp	r6, #51	; 0x33
 800a068:	dd07      	ble.n	800a07a <rint+0xe2>
 800a06a:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 800a06e:	d1cb      	bne.n	800a008 <rint+0x70>
 800a070:	ee10 2a10 	vmov	r2, s0
 800a074:	f7f6 f8b6 	bl	80001e4 <__adddf3>
 800a078:	e7c6      	b.n	800a008 <rint+0x70>
 800a07a:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 800a07e:	f04f 36ff 	mov.w	r6, #4294967295
 800a082:	40d6      	lsrs	r6, r2
 800a084:	4230      	tst	r0, r6
 800a086:	d0bf      	beq.n	800a008 <rint+0x70>
 800a088:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 800a08c:	ea4f 0156 	mov.w	r1, r6, lsr #1
 800a090:	bf1f      	itttt	ne
 800a092:	ea24 0101 	bicne.w	r1, r4, r1
 800a096:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 800a09a:	fa44 f202 	asrne.w	r2, r4, r2
 800a09e:	ea41 0402 	orrne.w	r4, r1, r2
 800a0a2:	e7cd      	b.n	800a040 <rint+0xa8>
 800a0a4:	0800a230 	.word	0x0800a230
 800a0a8:	000fffff 	.word	0x000fffff
 800a0ac:	00000000 	.word	0x00000000

0800a0b0 <scalbn>:
 800a0b0:	b570      	push	{r4, r5, r6, lr}
 800a0b2:	ec55 4b10 	vmov	r4, r5, d0
 800a0b6:	f3c5 520a 	ubfx	r2, r5, #20, #11
 800a0ba:	4606      	mov	r6, r0
 800a0bc:	462b      	mov	r3, r5
 800a0be:	b99a      	cbnz	r2, 800a0e8 <scalbn+0x38>
 800a0c0:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800a0c4:	4323      	orrs	r3, r4
 800a0c6:	d036      	beq.n	800a136 <scalbn+0x86>
 800a0c8:	4b39      	ldr	r3, [pc, #228]	; (800a1b0 <scalbn+0x100>)
 800a0ca:	4629      	mov	r1, r5
 800a0cc:	ee10 0a10 	vmov	r0, s0
 800a0d0:	2200      	movs	r2, #0
 800a0d2:	f7f6 fa3d 	bl	8000550 <__aeabi_dmul>
 800a0d6:	4b37      	ldr	r3, [pc, #220]	; (800a1b4 <scalbn+0x104>)
 800a0d8:	429e      	cmp	r6, r3
 800a0da:	4604      	mov	r4, r0
 800a0dc:	460d      	mov	r5, r1
 800a0de:	da10      	bge.n	800a102 <scalbn+0x52>
 800a0e0:	a32b      	add	r3, pc, #172	; (adr r3, 800a190 <scalbn+0xe0>)
 800a0e2:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a0e6:	e03a      	b.n	800a15e <scalbn+0xae>
 800a0e8:	f240 71ff 	movw	r1, #2047	; 0x7ff
 800a0ec:	428a      	cmp	r2, r1
 800a0ee:	d10c      	bne.n	800a10a <scalbn+0x5a>
 800a0f0:	ee10 2a10 	vmov	r2, s0
 800a0f4:	4620      	mov	r0, r4
 800a0f6:	4629      	mov	r1, r5
 800a0f8:	f7f6 f874 	bl	80001e4 <__adddf3>
 800a0fc:	4604      	mov	r4, r0
 800a0fe:	460d      	mov	r5, r1
 800a100:	e019      	b.n	800a136 <scalbn+0x86>
 800a102:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800a106:	460b      	mov	r3, r1
 800a108:	3a36      	subs	r2, #54	; 0x36
 800a10a:	4432      	add	r2, r6
 800a10c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 800a110:	428a      	cmp	r2, r1
 800a112:	dd08      	ble.n	800a126 <scalbn+0x76>
 800a114:	2d00      	cmp	r5, #0
 800a116:	a120      	add	r1, pc, #128	; (adr r1, 800a198 <scalbn+0xe8>)
 800a118:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a11c:	da1c      	bge.n	800a158 <scalbn+0xa8>
 800a11e:	a120      	add	r1, pc, #128	; (adr r1, 800a1a0 <scalbn+0xf0>)
 800a120:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a124:	e018      	b.n	800a158 <scalbn+0xa8>
 800a126:	2a00      	cmp	r2, #0
 800a128:	dd08      	ble.n	800a13c <scalbn+0x8c>
 800a12a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a12e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a132:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800a136:	ec45 4b10 	vmov	d0, r4, r5
 800a13a:	bd70      	pop	{r4, r5, r6, pc}
 800a13c:	f112 0f35 	cmn.w	r2, #53	; 0x35
 800a140:	da19      	bge.n	800a176 <scalbn+0xc6>
 800a142:	f24c 3350 	movw	r3, #50000	; 0xc350
 800a146:	429e      	cmp	r6, r3
 800a148:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 800a14c:	dd0a      	ble.n	800a164 <scalbn+0xb4>
 800a14e:	a112      	add	r1, pc, #72	; (adr r1, 800a198 <scalbn+0xe8>)
 800a150:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a154:	2b00      	cmp	r3, #0
 800a156:	d1e2      	bne.n	800a11e <scalbn+0x6e>
 800a158:	a30f      	add	r3, pc, #60	; (adr r3, 800a198 <scalbn+0xe8>)
 800a15a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800a15e:	f7f6 f9f7 	bl	8000550 <__aeabi_dmul>
 800a162:	e7cb      	b.n	800a0fc <scalbn+0x4c>
 800a164:	a10a      	add	r1, pc, #40	; (adr r1, 800a190 <scalbn+0xe0>)
 800a166:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a16a:	2b00      	cmp	r3, #0
 800a16c:	d0b8      	beq.n	800a0e0 <scalbn+0x30>
 800a16e:	a10e      	add	r1, pc, #56	; (adr r1, 800a1a8 <scalbn+0xf8>)
 800a170:	e9d1 0100 	ldrd	r0, r1, [r1]
 800a174:	e7b4      	b.n	800a0e0 <scalbn+0x30>
 800a176:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 800a17a:	3236      	adds	r2, #54	; 0x36
 800a17c:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800a180:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800a184:	4620      	mov	r0, r4
 800a186:	4b0c      	ldr	r3, [pc, #48]	; (800a1b8 <scalbn+0x108>)
 800a188:	2200      	movs	r2, #0
 800a18a:	e7e8      	b.n	800a15e <scalbn+0xae>
 800a18c:	f3af 8000 	nop.w
 800a190:	c2f8f359 	.word	0xc2f8f359
 800a194:	01a56e1f 	.word	0x01a56e1f
 800a198:	8800759c 	.word	0x8800759c
 800a19c:	7e37e43c 	.word	0x7e37e43c
 800a1a0:	8800759c 	.word	0x8800759c
 800a1a4:	fe37e43c 	.word	0xfe37e43c
 800a1a8:	c2f8f359 	.word	0xc2f8f359
 800a1ac:	81a56e1f 	.word	0x81a56e1f
 800a1b0:	43500000 	.word	0x43500000
 800a1b4:	ffff3cb0 	.word	0xffff3cb0
 800a1b8:	3c900000 	.word	0x3c900000

0800a1bc <_init>:
 800a1bc:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1be:	bf00      	nop
 800a1c0:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1c2:	bc08      	pop	{r3}
 800a1c4:	469e      	mov	lr, r3
 800a1c6:	4770      	bx	lr

0800a1c8 <_fini>:
 800a1c8:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800a1ca:	bf00      	nop
 800a1cc:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800a1ce:	bc08      	pop	{r3}
 800a1d0:	469e      	mov	lr, r3
 800a1d2:	4770      	bx	lr


week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00009614  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000068  080097b0  080097b0  000197b0  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  08009818  08009818  000200a8  2**0
                  CONTENTS
  4 .ARM          00000008  08009818  08009818  00019818  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  08009820  08009820  000200a8  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  08009820  08009820  00019820  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  08009824  08009824  00019824  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         000000a8  20000000  08009828  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          00000398  200000a8  080098d0  000200a8  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000440  080098d0  00020440  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  000200a8  2**0
                  CONTENTS, READONLY
 12 .debug_info   0001110c  00000000  00000000  000200d8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000020eb  00000000  00000000  000311e4  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000fc0  00000000  00000000  000332d0  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000f30  00000000  00000000  00034290  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00016a0f  00000000  00000000  000351c0  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   00011648  00000000  00000000  0004bbcf  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    00090876  00000000  00000000  0005d217  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000eda8d  2**0
                  CONTENTS, READONLY
 20 .debug_frame  000049b8  00000000  00000000  000edae0  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	200000a8 	.word	0x200000a8
 80001b4:	00000000 	.word	0x00000000
 80001b8:	08009794 	.word	0x08009794

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	200000ac 	.word	0x200000ac
 80001d4:	08009794 	.word	0x08009794

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295	; 0xffffffff
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295	; 0xffffffff
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295	; 0xffffffff
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295	; 0xffffffff
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295	; 0xffffffff
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295	; 0xffffffff
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295	; 0xffffffff
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295	; 0xffffffff
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295	; 0xffffffff
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295	; 0xffffffff
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
  * @brief  The application entry point.
  * @retval int
  */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	af00      	add	r7, sp, #0
  /* USER CODE END 1 */

  /* MCU Configuration--------------------------------------------------------*/

  /* Reset of all peripherals, Initializes the Flash interface and the Systick. */
  HAL_Init();
 8001068:	f002 f806 	bl	8003078 <HAL_Init>
  /* USER CODE BEGIN Init */

  /* USER CODE END Init */

  /* Configure the system clock */
  SystemClock_Config();
 800106c:	f000 f872 	bl	8001154 <SystemClock_Config>
  /* USER CODE BEGIN SysInit */

  /* USER CODE END SysInit */

  /* Initialize all configured peripherals */
  MX_GPIO_Init();
 8001070:	f000 fa9e 	bl	80015b0 <MX_GPIO_Init>
  MX_DMA_Init();
 8001074:	f000 fa74 	bl	8001560 <MX_DMA_Init>
  MX_USART2_UART_Init();
 8001078:	f000 fa1c 	bl	80014b4 <MX_USART2_UART_Init>
  MX_TIM1_Init();
 800107c:	f000 f900 	bl	8001280 <MX_TIM1_Init>
  MX_TIM2_Init();
 8001080:	f000 f956 	bl	8001330 <MX_TIM2_Init>
  MX_TIM3_Init();
 8001084:	f000 f9a0 	bl	80013c8 <MX_TIM3_Init>
  MX_USART6_UART_Init();
 8001088:	f000 fa40 	bl	800150c <MX_USART6_UART_Init>
  MX_I2C1_Init();
 800108c:	f000 f8ca 	bl	8001224 <MX_I2C1_Init>
  /* USER CODE BEGIN 2 */
  	UART2.huart = &huart2;
 8001090:	4b28      	ldr	r3, [pc, #160]	; (8001134 <main+0xd0>)
 8001092:	4a29      	ldr	r2, [pc, #164]	; (8001138 <main+0xd4>)
 8001094:	601a      	str	r2, [r3, #0]
  	UART2.RxLen = 255;
 8001096:	4b27      	ldr	r3, [pc, #156]	; (8001134 <main+0xd0>)
 8001098:	22ff      	movs	r2, #255	; 0xff
 800109a:	80da      	strh	r2, [r3, #6]
  	UART2.TxLen = 255;
 800109c:	4b25      	ldr	r3, [pc, #148]	; (8001134 <main+0xd0>)
 800109e:	22ff      	movs	r2, #255	; 0xff
 80010a0:	809a      	strh	r2, [r3, #4]
  	UARTInit(&UART2);
 80010a2:	4824      	ldr	r0, [pc, #144]	; (8001134 <main+0xd0>)
 80010a4:	f000 fb1e 	bl	80016e4 <UARTInit>
  	UARTResetStart(&UART2);
 80010a8:	4822      	ldr	r0, [pc, #136]	; (8001134 <main+0xd0>)
 80010aa:	f000 fb43 	bl	8001734 <UARTResetStart>
	//start micros
	HAL_TIM_Base_Start_IT(&htim2);
 80010ae:	4823      	ldr	r0, [pc, #140]	; (800113c <main+0xd8>)
 80010b0:	f005 fb1c 	bl	80066ec <HAL_TIM_Base_Start_IT>
	//Encoder start
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 80010b4:	213c      	movs	r1, #60	; 0x3c
 80010b6:	4822      	ldr	r0, [pc, #136]	; (8001140 <main+0xdc>)
 80010b8:	f005 fd2a 	bl	8006b10 <HAL_TIM_Encoder_Start>
	//PWM start AIN1
	HAL_TIM_Base_Start(&htim3);
 80010bc:	4821      	ldr	r0, [pc, #132]	; (8001144 <main+0xe0>)
 80010be:	f005 fabb 	bl	8006638 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 80010c2:	2100      	movs	r1, #0
 80010c4:	481f      	ldr	r0, [pc, #124]	; (8001144 <main+0xe0>)
 80010c6:	f005 fbcd 	bl	8006864 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 5000;
 80010ca:	4b1e      	ldr	r3, [pc, #120]	; (8001144 <main+0xe0>)
 80010cc:	681b      	ldr	r3, [r3, #0]
 80010ce:	f241 3288 	movw	r2, #5000	; 0x1388
 80010d2:	635a      	str	r2, [r3, #52]	; 0x34
	I2C();
 80010d4:	f000 fbb0 	bl	8001838 <I2C>
//		int16_t inputChar = UARTReadChar(&UART2);
//		if (inputChar != -1)
//		{
//			DynamixelProtocal2(MainMemory, 1, inputChar, &UART2);
//		}
		if (checkI2C == 1){
 80010d8:	4b1b      	ldr	r3, [pc, #108]	; (8001148 <main+0xe4>)
 80010da:	781b      	ldrb	r3, [r3, #0]
 80010dc:	2b00      	cmp	r3, #0
 80010de:	d001      	beq.n	80010e4 <main+0x80>
			I2C();
 80010e0:	f000 fbaa 	bl	8001838 <I2C>
		}
		gotoSethome();
 80010e4:	f001 f896 	bl	8002214 <gotoSethome>
		if (micros() - Timestamp >= dt){
 80010e8:	f001 fc8a 	bl	8002a00 <micros>
 80010ec:	4b17      	ldr	r3, [pc, #92]	; (800114c <main+0xe8>)
 80010ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010f2:	1a84      	subs	r4, r0, r2
 80010f4:	eb61 0503 	sbc.w	r5, r1, r3
 80010f8:	4b15      	ldr	r3, [pc, #84]	; (8001150 <main+0xec>)
 80010fa:	881b      	ldrh	r3, [r3, #0]
 80010fc:	b29a      	uxth	r2, r3
 80010fe:	f04f 0300 	mov.w	r3, #0
 8001102:	429d      	cmp	r5, r3
 8001104:	bf08      	it	eq
 8001106:	4294      	cmpeq	r4, r2
 8001108:	d30f      	bcc.n	800112a <main+0xc6>
			Timestamp = micros();
 800110a:	f001 fc79 	bl	8002a00 <micros>
 800110e:	4602      	mov	r2, r0
 8001110:	460b      	mov	r3, r1
 8001112:	490e      	ldr	r1, [pc, #56]	; (800114c <main+0xe8>)
 8001114:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory(Timestamp);
 8001118:	4b0c      	ldr	r3, [pc, #48]	; (800114c <main+0xe8>)
 800111a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800111e:	4610      	mov	r0, r2
 8001120:	4619      	mov	r1, r3
 8001122:	f000 fc15 	bl	8001950 <trajectory>
			//			piVelocity();
			kalman();
 8001126:	f001 f88b 	bl	8002240 <kalman>
		}
		UARTTxDumpBuffer(&UART2);
 800112a:	4802      	ldr	r0, [pc, #8]	; (8001134 <main+0xd0>)
 800112c:	f000 fb14 	bl	8001758 <UARTTxDumpBuffer>
		if (checkI2C == 1){
 8001130:	e7d2      	b.n	80010d8 <main+0x74>
 8001132:	bf00      	nop
 8001134:	200000c4 	.word	0x200000c4
 8001138:	200003e8 	.word	0x200003e8
 800113c:	200003a0 	.word	0x200003a0
 8001140:	20000314 	.word	0x20000314
 8001144:	2000026c 	.word	0x2000026c
 8001148:	200000dc 	.word	0x200000dc
 800114c:	20000120 	.word	0x20000120
 8001150:	2000000c 	.word	0x2000000c

08001154 <SystemClock_Config>:
/**
  * @brief System Clock Configuration
  * @retval None
  */
void SystemClock_Config(void)
{
 8001154:	b580      	push	{r7, lr}
 8001156:	b094      	sub	sp, #80	; 0x50
 8001158:	af00      	add	r7, sp, #0
  RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800115a:	f107 0320 	add.w	r3, r7, #32
 800115e:	2230      	movs	r2, #48	; 0x30
 8001160:	2100      	movs	r1, #0
 8001162:	4618      	mov	r0, r3
 8001164:	f007 fad2 	bl	800870c <memset>
  RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 8001168:	f107 030c 	add.w	r3, r7, #12
 800116c:	2200      	movs	r2, #0
 800116e:	601a      	str	r2, [r3, #0]
 8001170:	605a      	str	r2, [r3, #4]
 8001172:	609a      	str	r2, [r3, #8]
 8001174:	60da      	str	r2, [r3, #12]
 8001176:	611a      	str	r2, [r3, #16]

  /** Configure the main internal regulator output voltage
  */
  __HAL_RCC_PWR_CLK_ENABLE();
 8001178:	2300      	movs	r3, #0
 800117a:	60bb      	str	r3, [r7, #8]
 800117c:	4b27      	ldr	r3, [pc, #156]	; (800121c <SystemClock_Config+0xc8>)
 800117e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8001180:	4a26      	ldr	r2, [pc, #152]	; (800121c <SystemClock_Config+0xc8>)
 8001182:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8001186:	6413      	str	r3, [r2, #64]	; 0x40
 8001188:	4b24      	ldr	r3, [pc, #144]	; (800121c <SystemClock_Config+0xc8>)
 800118a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800118c:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8001190:	60bb      	str	r3, [r7, #8]
 8001192:	68bb      	ldr	r3, [r7, #8]
  __HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 8001194:	2300      	movs	r3, #0
 8001196:	607b      	str	r3, [r7, #4]
 8001198:	4b21      	ldr	r3, [pc, #132]	; (8001220 <SystemClock_Config+0xcc>)
 800119a:	681b      	ldr	r3, [r3, #0]
 800119c:	4a20      	ldr	r2, [pc, #128]	; (8001220 <SystemClock_Config+0xcc>)
 800119e:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011a2:	6013      	str	r3, [r2, #0]
 80011a4:	4b1e      	ldr	r3, [pc, #120]	; (8001220 <SystemClock_Config+0xcc>)
 80011a6:	681b      	ldr	r3, [r3, #0]
 80011a8:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011ac:	607b      	str	r3, [r7, #4]
 80011ae:	687b      	ldr	r3, [r7, #4]
  /** Initializes the RCC Oscillators according to the specified parameters
  * in the RCC_OscInitTypeDef structure.
  */
  RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011b0:	2302      	movs	r3, #2
 80011b2:	623b      	str	r3, [r7, #32]
  RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011b4:	2301      	movs	r3, #1
 80011b6:	62fb      	str	r3, [r7, #44]	; 0x2c
  RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011b8:	2310      	movs	r3, #16
 80011ba:	633b      	str	r3, [r7, #48]	; 0x30
  RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011bc:	2302      	movs	r3, #2
 80011be:	63bb      	str	r3, [r7, #56]	; 0x38
  RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011c0:	2300      	movs	r3, #0
 80011c2:	63fb      	str	r3, [r7, #60]	; 0x3c
  RCC_OscInitStruct.PLL.PLLM = 8;
 80011c4:	2308      	movs	r3, #8
 80011c6:	643b      	str	r3, [r7, #64]	; 0x40
  RCC_OscInitStruct.PLL.PLLN = 100;
 80011c8:	2364      	movs	r3, #100	; 0x64
 80011ca:	647b      	str	r3, [r7, #68]	; 0x44
  RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 80011cc:	2302      	movs	r3, #2
 80011ce:	64bb      	str	r3, [r7, #72]	; 0x48
  RCC_OscInitStruct.PLL.PLLQ = 4;
 80011d0:	2304      	movs	r3, #4
 80011d2:	64fb      	str	r3, [r7, #76]	; 0x4c
  if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 80011d4:	f107 0320 	add.w	r3, r7, #32
 80011d8:	4618      	mov	r0, r3
 80011da:	f004 fd69 	bl	8005cb0 <HAL_RCC_OscConfig>
 80011de:	4603      	mov	r3, r0
 80011e0:	2b00      	cmp	r3, #0
 80011e2:	d001      	beq.n	80011e8 <SystemClock_Config+0x94>
  {
    Error_Handler();
 80011e4:	f001 fc26 	bl	8002a34 <Error_Handler>
  }
  /** Initializes the CPU, AHB and APB buses clocks
  */
  RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 80011e8:	230f      	movs	r3, #15
 80011ea:	60fb      	str	r3, [r7, #12]
                              |RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
  RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 80011ec:	2302      	movs	r3, #2
 80011ee:	613b      	str	r3, [r7, #16]
  RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 80011f0:	2300      	movs	r3, #0
 80011f2:	617b      	str	r3, [r7, #20]
  RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 80011f4:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 80011f8:	61bb      	str	r3, [r7, #24]
  RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 80011fa:	2300      	movs	r3, #0
 80011fc:	61fb      	str	r3, [r7, #28]

  if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 80011fe:	f107 030c 	add.w	r3, r7, #12
 8001202:	2103      	movs	r1, #3
 8001204:	4618      	mov	r0, r3
 8001206:	f004 ffcb 	bl	80061a0 <HAL_RCC_ClockConfig>
 800120a:	4603      	mov	r3, r0
 800120c:	2b00      	cmp	r3, #0
 800120e:	d001      	beq.n	8001214 <SystemClock_Config+0xc0>
  {
    Error_Handler();
 8001210:	f001 fc10 	bl	8002a34 <Error_Handler>
  }
}
 8001214:	bf00      	nop
 8001216:	3750      	adds	r7, #80	; 0x50
 8001218:	46bd      	mov	sp, r7
 800121a:	bd80      	pop	{r7, pc}
 800121c:	40023800 	.word	0x40023800
 8001220:	40007000 	.word	0x40007000

08001224 <MX_I2C1_Init>:
  * @brief I2C1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_I2C1_Init(void)
{
 8001224:	b580      	push	{r7, lr}
 8001226:	af00      	add	r7, sp, #0
  /* USER CODE END I2C1_Init 0 */

  /* USER CODE BEGIN I2C1_Init 1 */

  /* USER CODE END I2C1_Init 1 */
  hi2c1.Instance = I2C1;
 8001228:	4b12      	ldr	r3, [pc, #72]	; (8001274 <MX_I2C1_Init+0x50>)
 800122a:	4a13      	ldr	r2, [pc, #76]	; (8001278 <MX_I2C1_Init+0x54>)
 800122c:	601a      	str	r2, [r3, #0]
  hi2c1.Init.ClockSpeed = 100000;
 800122e:	4b11      	ldr	r3, [pc, #68]	; (8001274 <MX_I2C1_Init+0x50>)
 8001230:	4a12      	ldr	r2, [pc, #72]	; (800127c <MX_I2C1_Init+0x58>)
 8001232:	605a      	str	r2, [r3, #4]
  hi2c1.Init.DutyCycle = I2C_DUTYCYCLE_2;
 8001234:	4b0f      	ldr	r3, [pc, #60]	; (8001274 <MX_I2C1_Init+0x50>)
 8001236:	2200      	movs	r2, #0
 8001238:	609a      	str	r2, [r3, #8]
  hi2c1.Init.OwnAddress1 = 0;
 800123a:	4b0e      	ldr	r3, [pc, #56]	; (8001274 <MX_I2C1_Init+0x50>)
 800123c:	2200      	movs	r2, #0
 800123e:	60da      	str	r2, [r3, #12]
  hi2c1.Init.AddressingMode = I2C_ADDRESSINGMODE_7BIT;
 8001240:	4b0c      	ldr	r3, [pc, #48]	; (8001274 <MX_I2C1_Init+0x50>)
 8001242:	f44f 4280 	mov.w	r2, #16384	; 0x4000
 8001246:	611a      	str	r2, [r3, #16]
  hi2c1.Init.DualAddressMode = I2C_DUALADDRESS_DISABLE;
 8001248:	4b0a      	ldr	r3, [pc, #40]	; (8001274 <MX_I2C1_Init+0x50>)
 800124a:	2200      	movs	r2, #0
 800124c:	615a      	str	r2, [r3, #20]
  hi2c1.Init.OwnAddress2 = 0;
 800124e:	4b09      	ldr	r3, [pc, #36]	; (8001274 <MX_I2C1_Init+0x50>)
 8001250:	2200      	movs	r2, #0
 8001252:	619a      	str	r2, [r3, #24]
  hi2c1.Init.GeneralCallMode = I2C_GENERALCALL_DISABLE;
 8001254:	4b07      	ldr	r3, [pc, #28]	; (8001274 <MX_I2C1_Init+0x50>)
 8001256:	2200      	movs	r2, #0
 8001258:	61da      	str	r2, [r3, #28]
  hi2c1.Init.NoStretchMode = I2C_NOSTRETCH_DISABLE;
 800125a:	4b06      	ldr	r3, [pc, #24]	; (8001274 <MX_I2C1_Init+0x50>)
 800125c:	2200      	movs	r2, #0
 800125e:	621a      	str	r2, [r3, #32]
  if (HAL_I2C_Init(&hi2c1) != HAL_OK)
 8001260:	4804      	ldr	r0, [pc, #16]	; (8001274 <MX_I2C1_Init+0x50>)
 8001262:	f002 fe85 	bl	8003f70 <HAL_I2C_Init>
 8001266:	4603      	mov	r3, r0
 8001268:	2b00      	cmp	r3, #0
 800126a:	d001      	beq.n	8001270 <MX_I2C1_Init+0x4c>
  {
    Error_Handler();
 800126c:	f001 fbe2 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN I2C1_Init 2 */

  /* USER CODE END I2C1_Init 2 */

}
 8001270:	bf00      	nop
 8001272:	bd80      	pop	{r7, pc}
 8001274:	20000218 	.word	0x20000218
 8001278:	40005400 	.word	0x40005400
 800127c:	000186a0 	.word	0x000186a0

08001280 <MX_TIM1_Init>:
  * @brief TIM1 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM1_Init(void)
{
 8001280:	b580      	push	{r7, lr}
 8001282:	b08c      	sub	sp, #48	; 0x30
 8001284:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM1_Init 0 */

  /* USER CODE END TIM1_Init 0 */

  TIM_Encoder_InitTypeDef sConfig = {0};
 8001286:	f107 030c 	add.w	r3, r7, #12
 800128a:	2224      	movs	r2, #36	; 0x24
 800128c:	2100      	movs	r1, #0
 800128e:	4618      	mov	r0, r3
 8001290:	f007 fa3c 	bl	800870c <memset>
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001294:	1d3b      	adds	r3, r7, #4
 8001296:	2200      	movs	r2, #0
 8001298:	601a      	str	r2, [r3, #0]
 800129a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM1_Init 1 */

  /* USER CODE END TIM1_Init 1 */
  htim1.Instance = TIM1;
 800129c:	4b22      	ldr	r3, [pc, #136]	; (8001328 <MX_TIM1_Init+0xa8>)
 800129e:	4a23      	ldr	r2, [pc, #140]	; (800132c <MX_TIM1_Init+0xac>)
 80012a0:	601a      	str	r2, [r3, #0]
  htim1.Init.Prescaler = 0;
 80012a2:	4b21      	ldr	r3, [pc, #132]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012a4:	2200      	movs	r2, #0
 80012a6:	605a      	str	r2, [r3, #4]
  htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 80012a8:	4b1f      	ldr	r3, [pc, #124]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012aa:	2200      	movs	r2, #0
 80012ac:	609a      	str	r2, [r3, #8]
  htim1.Init.Period = 2047;
 80012ae:	4b1e      	ldr	r3, [pc, #120]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012b0:	f240 72ff 	movw	r2, #2047	; 0x7ff
 80012b4:	60da      	str	r2, [r3, #12]
  htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80012b6:	4b1c      	ldr	r3, [pc, #112]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012b8:	2200      	movs	r2, #0
 80012ba:	611a      	str	r2, [r3, #16]
  htim1.Init.RepetitionCounter = 0;
 80012bc:	4b1a      	ldr	r3, [pc, #104]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012be:	2200      	movs	r2, #0
 80012c0:	615a      	str	r2, [r3, #20]
  htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80012c2:	4b19      	ldr	r3, [pc, #100]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012c4:	2200      	movs	r2, #0
 80012c6:	619a      	str	r2, [r3, #24]
  sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012c8:	2303      	movs	r3, #3
 80012ca:	60fb      	str	r3, [r7, #12]
  sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012cc:	2300      	movs	r3, #0
 80012ce:	613b      	str	r3, [r7, #16]
  sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012d0:	2301      	movs	r3, #1
 80012d2:	617b      	str	r3, [r7, #20]
  sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012d4:	2300      	movs	r3, #0
 80012d6:	61bb      	str	r3, [r7, #24]
  sConfig.IC1Filter = 3;
 80012d8:	2303      	movs	r3, #3
 80012da:	61fb      	str	r3, [r7, #28]
  sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012dc:	2300      	movs	r3, #0
 80012de:	623b      	str	r3, [r7, #32]
  sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012e0:	2301      	movs	r3, #1
 80012e2:	627b      	str	r3, [r7, #36]	; 0x24
  sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012e4:	2300      	movs	r3, #0
 80012e6:	62bb      	str	r3, [r7, #40]	; 0x28
  sConfig.IC2Filter = 5;
 80012e8:	2305      	movs	r3, #5
 80012ea:	62fb      	str	r3, [r7, #44]	; 0x2c
  if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012ec:	f107 030c 	add.w	r3, r7, #12
 80012f0:	4619      	mov	r1, r3
 80012f2:	480d      	ldr	r0, [pc, #52]	; (8001328 <MX_TIM1_Init+0xa8>)
 80012f4:	f005 fb66 	bl	80069c4 <HAL_TIM_Encoder_Init>
 80012f8:	4603      	mov	r3, r0
 80012fa:	2b00      	cmp	r3, #0
 80012fc:	d001      	beq.n	8001302 <MX_TIM1_Init+0x82>
  {
    Error_Handler();
 80012fe:	f001 fb99 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001302:	2300      	movs	r3, #0
 8001304:	607b      	str	r3, [r7, #4]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001306:	2300      	movs	r3, #0
 8001308:	60bb      	str	r3, [r7, #8]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 800130a:	1d3b      	adds	r3, r7, #4
 800130c:	4619      	mov	r1, r3
 800130e:	4806      	ldr	r0, [pc, #24]	; (8001328 <MX_TIM1_Init+0xa8>)
 8001310:	f006 fa0a 	bl	8007728 <HAL_TIMEx_MasterConfigSynchronization>
 8001314:	4603      	mov	r3, r0
 8001316:	2b00      	cmp	r3, #0
 8001318:	d001      	beq.n	800131e <MX_TIM1_Init+0x9e>
  {
    Error_Handler();
 800131a:	f001 fb8b 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM1_Init 2 */

  /* USER CODE END TIM1_Init 2 */

}
 800131e:	bf00      	nop
 8001320:	3730      	adds	r7, #48	; 0x30
 8001322:	46bd      	mov	sp, r7
 8001324:	bd80      	pop	{r7, pc}
 8001326:	bf00      	nop
 8001328:	20000314 	.word	0x20000314
 800132c:	40010000 	.word	0x40010000

08001330 <MX_TIM2_Init>:
  * @brief TIM2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM2_Init(void)
{
 8001330:	b580      	push	{r7, lr}
 8001332:	b086      	sub	sp, #24
 8001334:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM2_Init 0 */

  /* USER CODE END TIM2_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 8001336:	f107 0308 	add.w	r3, r7, #8
 800133a:	2200      	movs	r2, #0
 800133c:	601a      	str	r2, [r3, #0]
 800133e:	605a      	str	r2, [r3, #4]
 8001340:	609a      	str	r2, [r3, #8]
 8001342:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 8001344:	463b      	mov	r3, r7
 8001346:	2200      	movs	r2, #0
 8001348:	601a      	str	r2, [r3, #0]
 800134a:	605a      	str	r2, [r3, #4]

  /* USER CODE BEGIN TIM2_Init 1 */

  /* USER CODE END TIM2_Init 1 */
  htim2.Instance = TIM2;
 800134c:	4b1d      	ldr	r3, [pc, #116]	; (80013c4 <MX_TIM2_Init+0x94>)
 800134e:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8001352:	601a      	str	r2, [r3, #0]
  htim2.Init.Prescaler = 99;
 8001354:	4b1b      	ldr	r3, [pc, #108]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001356:	2263      	movs	r2, #99	; 0x63
 8001358:	605a      	str	r2, [r3, #4]
  htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 800135a:	4b1a      	ldr	r3, [pc, #104]	; (80013c4 <MX_TIM2_Init+0x94>)
 800135c:	2200      	movs	r2, #0
 800135e:	609a      	str	r2, [r3, #8]
  htim2.Init.Period = 4294967295;
 8001360:	4b18      	ldr	r3, [pc, #96]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001362:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 8001366:	60da      	str	r2, [r3, #12]
  htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001368:	4b16      	ldr	r3, [pc, #88]	; (80013c4 <MX_TIM2_Init+0x94>)
 800136a:	2200      	movs	r2, #0
 800136c:	611a      	str	r2, [r3, #16]
  htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800136e:	4b15      	ldr	r3, [pc, #84]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001370:	2200      	movs	r2, #0
 8001372:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 8001374:	4813      	ldr	r0, [pc, #76]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001376:	f005 f90f 	bl	8006598 <HAL_TIM_Base_Init>
 800137a:	4603      	mov	r3, r0
 800137c:	2b00      	cmp	r3, #0
 800137e:	d001      	beq.n	8001384 <MX_TIM2_Init+0x54>
  {
    Error_Handler();
 8001380:	f001 fb58 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001384:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001388:	60bb      	str	r3, [r7, #8]
  if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 800138a:	f107 0308 	add.w	r3, r7, #8
 800138e:	4619      	mov	r1, r3
 8001390:	480c      	ldr	r0, [pc, #48]	; (80013c4 <MX_TIM2_Init+0x94>)
 8001392:	f005 fe11 	bl	8006fb8 <HAL_TIM_ConfigClockSource>
 8001396:	4603      	mov	r3, r0
 8001398:	2b00      	cmp	r3, #0
 800139a:	d001      	beq.n	80013a0 <MX_TIM2_Init+0x70>
  {
    Error_Handler();
 800139c:	f001 fb4a 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80013a0:	2300      	movs	r3, #0
 80013a2:	603b      	str	r3, [r7, #0]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80013a4:	2300      	movs	r3, #0
 80013a6:	607b      	str	r3, [r7, #4]
  if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 80013a8:	463b      	mov	r3, r7
 80013aa:	4619      	mov	r1, r3
 80013ac:	4805      	ldr	r0, [pc, #20]	; (80013c4 <MX_TIM2_Init+0x94>)
 80013ae:	f006 f9bb 	bl	8007728 <HAL_TIMEx_MasterConfigSynchronization>
 80013b2:	4603      	mov	r3, r0
 80013b4:	2b00      	cmp	r3, #0
 80013b6:	d001      	beq.n	80013bc <MX_TIM2_Init+0x8c>
  {
    Error_Handler();
 80013b8:	f001 fb3c 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM2_Init 2 */

  /* USER CODE END TIM2_Init 2 */

}
 80013bc:	bf00      	nop
 80013be:	3718      	adds	r7, #24
 80013c0:	46bd      	mov	sp, r7
 80013c2:	bd80      	pop	{r7, pc}
 80013c4:	200003a0 	.word	0x200003a0

080013c8 <MX_TIM3_Init>:
  * @brief TIM3 Initialization Function
  * @param None
  * @retval None
  */
static void MX_TIM3_Init(void)
{
 80013c8:	b580      	push	{r7, lr}
 80013ca:	b08e      	sub	sp, #56	; 0x38
 80013cc:	af00      	add	r7, sp, #0

  /* USER CODE BEGIN TIM3_Init 0 */

  /* USER CODE END TIM3_Init 0 */

  TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013ce:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013d2:	2200      	movs	r2, #0
 80013d4:	601a      	str	r2, [r3, #0]
 80013d6:	605a      	str	r2, [r3, #4]
 80013d8:	609a      	str	r2, [r3, #8]
 80013da:	60da      	str	r2, [r3, #12]
  TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013dc:	f107 0320 	add.w	r3, r7, #32
 80013e0:	2200      	movs	r2, #0
 80013e2:	601a      	str	r2, [r3, #0]
 80013e4:	605a      	str	r2, [r3, #4]
  TIM_OC_InitTypeDef sConfigOC = {0};
 80013e6:	1d3b      	adds	r3, r7, #4
 80013e8:	2200      	movs	r2, #0
 80013ea:	601a      	str	r2, [r3, #0]
 80013ec:	605a      	str	r2, [r3, #4]
 80013ee:	609a      	str	r2, [r3, #8]
 80013f0:	60da      	str	r2, [r3, #12]
 80013f2:	611a      	str	r2, [r3, #16]
 80013f4:	615a      	str	r2, [r3, #20]
 80013f6:	619a      	str	r2, [r3, #24]

  /* USER CODE BEGIN TIM3_Init 1 */

  /* USER CODE END TIM3_Init 1 */
  htim3.Instance = TIM3;
 80013f8:	4b2c      	ldr	r3, [pc, #176]	; (80014ac <MX_TIM3_Init+0xe4>)
 80013fa:	4a2d      	ldr	r2, [pc, #180]	; (80014b0 <MX_TIM3_Init+0xe8>)
 80013fc:	601a      	str	r2, [r3, #0]
  htim3.Init.Prescaler = 99;
 80013fe:	4b2b      	ldr	r3, [pc, #172]	; (80014ac <MX_TIM3_Init+0xe4>)
 8001400:	2263      	movs	r2, #99	; 0x63
 8001402:	605a      	str	r2, [r3, #4]
  htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001404:	4b29      	ldr	r3, [pc, #164]	; (80014ac <MX_TIM3_Init+0xe4>)
 8001406:	2200      	movs	r2, #0
 8001408:	609a      	str	r2, [r3, #8]
  htim3.Init.Period = 10000;
 800140a:	4b28      	ldr	r3, [pc, #160]	; (80014ac <MX_TIM3_Init+0xe4>)
 800140c:	f242 7210 	movw	r2, #10000	; 0x2710
 8001410:	60da      	str	r2, [r3, #12]
  htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001412:	4b26      	ldr	r3, [pc, #152]	; (80014ac <MX_TIM3_Init+0xe4>)
 8001414:	2200      	movs	r2, #0
 8001416:	611a      	str	r2, [r3, #16]
  htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001418:	4b24      	ldr	r3, [pc, #144]	; (80014ac <MX_TIM3_Init+0xe4>)
 800141a:	2200      	movs	r2, #0
 800141c:	619a      	str	r2, [r3, #24]
  if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 800141e:	4823      	ldr	r0, [pc, #140]	; (80014ac <MX_TIM3_Init+0xe4>)
 8001420:	f005 f8ba 	bl	8006598 <HAL_TIM_Base_Init>
 8001424:	4603      	mov	r3, r0
 8001426:	2b00      	cmp	r3, #0
 8001428:	d001      	beq.n	800142e <MX_TIM3_Init+0x66>
  {
    Error_Handler();
 800142a:	f001 fb03 	bl	8002a34 <Error_Handler>
  }
  sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800142e:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001432:	62bb      	str	r3, [r7, #40]	; 0x28
  if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 8001434:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001438:	4619      	mov	r1, r3
 800143a:	481c      	ldr	r0, [pc, #112]	; (80014ac <MX_TIM3_Init+0xe4>)
 800143c:	f005 fdbc 	bl	8006fb8 <HAL_TIM_ConfigClockSource>
 8001440:	4603      	mov	r3, r0
 8001442:	2b00      	cmp	r3, #0
 8001444:	d001      	beq.n	800144a <MX_TIM3_Init+0x82>
  {
    Error_Handler();
 8001446:	f001 faf5 	bl	8002a34 <Error_Handler>
  }
  if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 800144a:	4818      	ldr	r0, [pc, #96]	; (80014ac <MX_TIM3_Init+0xe4>)
 800144c:	f005 f9b0 	bl	80067b0 <HAL_TIM_PWM_Init>
 8001450:	4603      	mov	r3, r0
 8001452:	2b00      	cmp	r3, #0
 8001454:	d001      	beq.n	800145a <MX_TIM3_Init+0x92>
  {
    Error_Handler();
 8001456:	f001 faed 	bl	8002a34 <Error_Handler>
  }
  sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 800145a:	2300      	movs	r3, #0
 800145c:	623b      	str	r3, [r7, #32]
  sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800145e:	2300      	movs	r3, #0
 8001460:	627b      	str	r3, [r7, #36]	; 0x24
  if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 8001462:	f107 0320 	add.w	r3, r7, #32
 8001466:	4619      	mov	r1, r3
 8001468:	4810      	ldr	r0, [pc, #64]	; (80014ac <MX_TIM3_Init+0xe4>)
 800146a:	f006 f95d 	bl	8007728 <HAL_TIMEx_MasterConfigSynchronization>
 800146e:	4603      	mov	r3, r0
 8001470:	2b00      	cmp	r3, #0
 8001472:	d001      	beq.n	8001478 <MX_TIM3_Init+0xb0>
  {
    Error_Handler();
 8001474:	f001 fade 	bl	8002a34 <Error_Handler>
  }
  sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001478:	2360      	movs	r3, #96	; 0x60
 800147a:	607b      	str	r3, [r7, #4]
  sConfigOC.Pulse = 0;
 800147c:	2300      	movs	r3, #0
 800147e:	60bb      	str	r3, [r7, #8]
  sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001480:	2300      	movs	r3, #0
 8001482:	60fb      	str	r3, [r7, #12]
  sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 8001484:	2300      	movs	r3, #0
 8001486:	617b      	str	r3, [r7, #20]
  if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001488:	1d3b      	adds	r3, r7, #4
 800148a:	2200      	movs	r2, #0
 800148c:	4619      	mov	r1, r3
 800148e:	4807      	ldr	r0, [pc, #28]	; (80014ac <MX_TIM3_Init+0xe4>)
 8001490:	f005 fcd4 	bl	8006e3c <HAL_TIM_PWM_ConfigChannel>
 8001494:	4603      	mov	r3, r0
 8001496:	2b00      	cmp	r3, #0
 8001498:	d001      	beq.n	800149e <MX_TIM3_Init+0xd6>
  {
    Error_Handler();
 800149a:	f001 facb 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN TIM3_Init 2 */

  /* USER CODE END TIM3_Init 2 */
  HAL_TIM_MspPostInit(&htim3);
 800149e:	4803      	ldr	r0, [pc, #12]	; (80014ac <MX_TIM3_Init+0xe4>)
 80014a0:	f001 fbda 	bl	8002c58 <HAL_TIM_MspPostInit>

}
 80014a4:	bf00      	nop
 80014a6:	3738      	adds	r7, #56	; 0x38
 80014a8:	46bd      	mov	sp, r7
 80014aa:	bd80      	pop	{r7, pc}
 80014ac:	2000026c 	.word	0x2000026c
 80014b0:	40000400 	.word	0x40000400

080014b4 <MX_USART2_UART_Init>:
  * @brief USART2 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART2_UART_Init(void)
{
 80014b4:	b580      	push	{r7, lr}
 80014b6:	af00      	add	r7, sp, #0
  /* USER CODE END USART2_Init 0 */

  /* USER CODE BEGIN USART2_Init 1 */

  /* USER CODE END USART2_Init 1 */
  huart2.Instance = USART2;
 80014b8:	4b12      	ldr	r3, [pc, #72]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014ba:	4a13      	ldr	r2, [pc, #76]	; (8001508 <MX_USART2_UART_Init+0x54>)
 80014bc:	601a      	str	r2, [r3, #0]
  huart2.Init.BaudRate = 512000;
 80014be:	4b11      	ldr	r3, [pc, #68]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014c0:	f44f 22fa 	mov.w	r2, #512000	; 0x7d000
 80014c4:	605a      	str	r2, [r3, #4]
  huart2.Init.WordLength = UART_WORDLENGTH_9B;
 80014c6:	4b0f      	ldr	r3, [pc, #60]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014c8:	f44f 5280 	mov.w	r2, #4096	; 0x1000
 80014cc:	609a      	str	r2, [r3, #8]
  huart2.Init.StopBits = UART_STOPBITS_1;
 80014ce:	4b0d      	ldr	r3, [pc, #52]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014d0:	2200      	movs	r2, #0
 80014d2:	60da      	str	r2, [r3, #12]
  huart2.Init.Parity = UART_PARITY_EVEN;
 80014d4:	4b0b      	ldr	r3, [pc, #44]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014d6:	f44f 6280 	mov.w	r2, #1024	; 0x400
 80014da:	611a      	str	r2, [r3, #16]
  huart2.Init.Mode = UART_MODE_TX_RX;
 80014dc:	4b09      	ldr	r3, [pc, #36]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014de:	220c      	movs	r2, #12
 80014e0:	615a      	str	r2, [r3, #20]
  huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014e2:	4b08      	ldr	r3, [pc, #32]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014e4:	2200      	movs	r2, #0
 80014e6:	619a      	str	r2, [r3, #24]
  huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014e8:	4b06      	ldr	r3, [pc, #24]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014ea:	2200      	movs	r2, #0
 80014ec:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart2) != HAL_OK)
 80014ee:	4805      	ldr	r0, [pc, #20]	; (8001504 <MX_USART2_UART_Init+0x50>)
 80014f0:	f006 f99c 	bl	800782c <HAL_UART_Init>
 80014f4:	4603      	mov	r3, r0
 80014f6:	2b00      	cmp	r3, #0
 80014f8:	d001      	beq.n	80014fe <MX_USART2_UART_Init+0x4a>
  {
    Error_Handler();
 80014fa:	f001 fa9b 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART2_Init 2 */

  /* USER CODE END USART2_Init 2 */

}
 80014fe:	bf00      	nop
 8001500:	bd80      	pop	{r7, pc}
 8001502:	bf00      	nop
 8001504:	200003e8 	.word	0x200003e8
 8001508:	40004400 	.word	0x40004400

0800150c <MX_USART6_UART_Init>:
  * @brief USART6 Initialization Function
  * @param None
  * @retval None
  */
static void MX_USART6_UART_Init(void)
{
 800150c:	b580      	push	{r7, lr}
 800150e:	af00      	add	r7, sp, #0
  /* USER CODE END USART6_Init 0 */

  /* USER CODE BEGIN USART6_Init 1 */

  /* USER CODE END USART6_Init 1 */
  huart6.Instance = USART6;
 8001510:	4b11      	ldr	r3, [pc, #68]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001512:	4a12      	ldr	r2, [pc, #72]	; (800155c <MX_USART6_UART_Init+0x50>)
 8001514:	601a      	str	r2, [r3, #0]
  huart6.Init.BaudRate = 115200;
 8001516:	4b10      	ldr	r3, [pc, #64]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001518:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800151c:	605a      	str	r2, [r3, #4]
  huart6.Init.WordLength = UART_WORDLENGTH_8B;
 800151e:	4b0e      	ldr	r3, [pc, #56]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001520:	2200      	movs	r2, #0
 8001522:	609a      	str	r2, [r3, #8]
  huart6.Init.StopBits = UART_STOPBITS_1;
 8001524:	4b0c      	ldr	r3, [pc, #48]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001526:	2200      	movs	r2, #0
 8001528:	60da      	str	r2, [r3, #12]
  huart6.Init.Parity = UART_PARITY_NONE;
 800152a:	4b0b      	ldr	r3, [pc, #44]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 800152c:	2200      	movs	r2, #0
 800152e:	611a      	str	r2, [r3, #16]
  huart6.Init.Mode = UART_MODE_TX_RX;
 8001530:	4b09      	ldr	r3, [pc, #36]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001532:	220c      	movs	r2, #12
 8001534:	615a      	str	r2, [r3, #20]
  huart6.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 8001536:	4b08      	ldr	r3, [pc, #32]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001538:	2200      	movs	r2, #0
 800153a:	619a      	str	r2, [r3, #24]
  huart6.Init.OverSampling = UART_OVERSAMPLING_16;
 800153c:	4b06      	ldr	r3, [pc, #24]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 800153e:	2200      	movs	r2, #0
 8001540:	61da      	str	r2, [r3, #28]
  if (HAL_UART_Init(&huart6) != HAL_OK)
 8001542:	4805      	ldr	r0, [pc, #20]	; (8001558 <MX_USART6_UART_Init+0x4c>)
 8001544:	f006 f972 	bl	800782c <HAL_UART_Init>
 8001548:	4603      	mov	r3, r0
 800154a:	2b00      	cmp	r3, #0
 800154c:	d001      	beq.n	8001552 <MX_USART6_UART_Init+0x46>
  {
    Error_Handler();
 800154e:	f001 fa71 	bl	8002a34 <Error_Handler>
  }
  /* USER CODE BEGIN USART6_Init 2 */

  /* USER CODE END USART6_Init 2 */

}
 8001552:	bf00      	nop
 8001554:	bd80      	pop	{r7, pc}
 8001556:	bf00      	nop
 8001558:	2000035c 	.word	0x2000035c
 800155c:	40011400 	.word	0x40011400

08001560 <MX_DMA_Init>:

/**
  * Enable DMA controller clock
  */
static void MX_DMA_Init(void)
{
 8001560:	b580      	push	{r7, lr}
 8001562:	b082      	sub	sp, #8
 8001564:	af00      	add	r7, sp, #0

  /* DMA controller clock enable */
  __HAL_RCC_DMA1_CLK_ENABLE();
 8001566:	2300      	movs	r3, #0
 8001568:	607b      	str	r3, [r7, #4]
 800156a:	4b10      	ldr	r3, [pc, #64]	; (80015ac <MX_DMA_Init+0x4c>)
 800156c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800156e:	4a0f      	ldr	r2, [pc, #60]	; (80015ac <MX_DMA_Init+0x4c>)
 8001570:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8001574:	6313      	str	r3, [r2, #48]	; 0x30
 8001576:	4b0d      	ldr	r3, [pc, #52]	; (80015ac <MX_DMA_Init+0x4c>)
 8001578:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800157a:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 800157e:	607b      	str	r3, [r7, #4]
 8001580:	687b      	ldr	r3, [r7, #4]

  /* DMA interrupt init */
  /* DMA1_Stream5_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream5_IRQn, 0, 0);
 8001582:	2200      	movs	r2, #0
 8001584:	2100      	movs	r1, #0
 8001586:	2010      	movs	r0, #16
 8001588:	f001 fee7 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream5_IRQn);
 800158c:	2010      	movs	r0, #16
 800158e:	f001 ff00 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* DMA1_Stream6_IRQn interrupt configuration */
  HAL_NVIC_SetPriority(DMA1_Stream6_IRQn, 0, 0);
 8001592:	2200      	movs	r2, #0
 8001594:	2100      	movs	r1, #0
 8001596:	2011      	movs	r0, #17
 8001598:	f001 fedf 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(DMA1_Stream6_IRQn);
 800159c:	2011      	movs	r0, #17
 800159e:	f001 fef8 	bl	8003392 <HAL_NVIC_EnableIRQ>

}
 80015a2:	bf00      	nop
 80015a4:	3708      	adds	r7, #8
 80015a6:	46bd      	mov	sp, r7
 80015a8:	bd80      	pop	{r7, pc}
 80015aa:	bf00      	nop
 80015ac:	40023800 	.word	0x40023800

080015b0 <MX_GPIO_Init>:
  * @brief GPIO Initialization Function
  * @param None
  * @retval None
  */
static void MX_GPIO_Init(void)
{
 80015b0:	b580      	push	{r7, lr}
 80015b2:	b08a      	sub	sp, #40	; 0x28
 80015b4:	af00      	add	r7, sp, #0
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80015b6:	f107 0314 	add.w	r3, r7, #20
 80015ba:	2200      	movs	r2, #0
 80015bc:	601a      	str	r2, [r3, #0]
 80015be:	605a      	str	r2, [r3, #4]
 80015c0:	609a      	str	r2, [r3, #8]
 80015c2:	60da      	str	r2, [r3, #12]
 80015c4:	611a      	str	r2, [r3, #16]

  /* GPIO Ports Clock Enable */
  __HAL_RCC_GPIOC_CLK_ENABLE();
 80015c6:	2300      	movs	r3, #0
 80015c8:	613b      	str	r3, [r7, #16]
 80015ca:	4b40      	ldr	r3, [pc, #256]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015cc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ce:	4a3f      	ldr	r2, [pc, #252]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015d0:	f043 0304 	orr.w	r3, r3, #4
 80015d4:	6313      	str	r3, [r2, #48]	; 0x30
 80015d6:	4b3d      	ldr	r3, [pc, #244]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015d8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015da:	f003 0304 	and.w	r3, r3, #4
 80015de:	613b      	str	r3, [r7, #16]
 80015e0:	693b      	ldr	r3, [r7, #16]
  __HAL_RCC_GPIOH_CLK_ENABLE();
 80015e2:	2300      	movs	r3, #0
 80015e4:	60fb      	str	r3, [r7, #12]
 80015e6:	4b39      	ldr	r3, [pc, #228]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015e8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015ea:	4a38      	ldr	r2, [pc, #224]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015ec:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 80015f0:	6313      	str	r3, [r2, #48]	; 0x30
 80015f2:	4b36      	ldr	r3, [pc, #216]	; (80016cc <MX_GPIO_Init+0x11c>)
 80015f4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80015f6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 80015fa:	60fb      	str	r3, [r7, #12]
 80015fc:	68fb      	ldr	r3, [r7, #12]
  __HAL_RCC_GPIOA_CLK_ENABLE();
 80015fe:	2300      	movs	r3, #0
 8001600:	60bb      	str	r3, [r7, #8]
 8001602:	4b32      	ldr	r3, [pc, #200]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001604:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001606:	4a31      	ldr	r2, [pc, #196]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001608:	f043 0301 	orr.w	r3, r3, #1
 800160c:	6313      	str	r3, [r2, #48]	; 0x30
 800160e:	4b2f      	ldr	r3, [pc, #188]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001610:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001612:	f003 0301 	and.w	r3, r3, #1
 8001616:	60bb      	str	r3, [r7, #8]
 8001618:	68bb      	ldr	r3, [r7, #8]
  __HAL_RCC_GPIOB_CLK_ENABLE();
 800161a:	2300      	movs	r3, #0
 800161c:	607b      	str	r3, [r7, #4]
 800161e:	4b2b      	ldr	r3, [pc, #172]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001620:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001622:	4a2a      	ldr	r2, [pc, #168]	; (80016cc <MX_GPIO_Init+0x11c>)
 8001624:	f043 0302 	orr.w	r3, r3, #2
 8001628:	6313      	str	r3, [r2, #48]	; 0x30
 800162a:	4b28      	ldr	r3, [pc, #160]	; (80016cc <MX_GPIO_Init+0x11c>)
 800162c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800162e:	f003 0302 	and.w	r3, r3, #2
 8001632:	607b      	str	r3, [r7, #4]
 8001634:	687b      	ldr	r3, [r7, #4]

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001636:	2200      	movs	r2, #0
 8001638:	2120      	movs	r1, #32
 800163a:	4825      	ldr	r0, [pc, #148]	; (80016d0 <MX_GPIO_Init+0x120>)
 800163c:	f002 fc66 	bl	8003f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin Output Level */
  HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4|GPIO_PIN_5, GPIO_PIN_RESET);
 8001640:	2200      	movs	r2, #0
 8001642:	2130      	movs	r1, #48	; 0x30
 8001644:	4823      	ldr	r0, [pc, #140]	; (80016d4 <MX_GPIO_Init+0x124>)
 8001646:	f002 fc61 	bl	8003f0c <HAL_GPIO_WritePin>

  /*Configure GPIO pin : B1_Pin */
  GPIO_InitStruct.Pin = B1_Pin;
 800164a:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 800164e:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001650:	4b21      	ldr	r3, [pc, #132]	; (80016d8 <MX_GPIO_Init+0x128>)
 8001652:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001654:	2300      	movs	r3, #0
 8001656:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 8001658:	f107 0314 	add.w	r3, r7, #20
 800165c:	4619      	mov	r1, r3
 800165e:	481f      	ldr	r0, [pc, #124]	; (80016dc <MX_GPIO_Init+0x12c>)
 8001660:	f002 fad0 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : LD2_Pin */
  GPIO_InitStruct.Pin = LD2_Pin;
 8001664:	2320      	movs	r3, #32
 8001666:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 8001668:	2301      	movs	r3, #1
 800166a:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 800166c:	2300      	movs	r3, #0
 800166e:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8001670:	2300      	movs	r3, #0
 8001672:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 8001674:	f107 0314 	add.w	r3, r7, #20
 8001678:	4619      	mov	r1, r3
 800167a:	4815      	ldr	r0, [pc, #84]	; (80016d0 <MX_GPIO_Init+0x120>)
 800167c:	f002 fac2 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pin : PA7 */
  GPIO_InitStruct.Pin = GPIO_PIN_7;
 8001680:	2380      	movs	r3, #128	; 0x80
 8001682:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 8001684:	4b16      	ldr	r3, [pc, #88]	; (80016e0 <MX_GPIO_Init+0x130>)
 8001686:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001688:	2300      	movs	r3, #0
 800168a:	61fb      	str	r3, [r7, #28]
  HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 800168c:	f107 0314 	add.w	r3, r7, #20
 8001690:	4619      	mov	r1, r3
 8001692:	480f      	ldr	r0, [pc, #60]	; (80016d0 <MX_GPIO_Init+0x120>)
 8001694:	f002 fab6 	bl	8003c04 <HAL_GPIO_Init>

  /*Configure GPIO pins : PB4 PB5 */
  GPIO_InitStruct.Pin = GPIO_PIN_4|GPIO_PIN_5;
 8001698:	2330      	movs	r3, #48	; 0x30
 800169a:	617b      	str	r3, [r7, #20]
  GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 800169c:	2311      	movs	r3, #17
 800169e:	61bb      	str	r3, [r7, #24]
  GPIO_InitStruct.Pull = GPIO_PULLUP;
 80016a0:	2301      	movs	r3, #1
 80016a2:	61fb      	str	r3, [r7, #28]
  GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80016a4:	2300      	movs	r3, #0
 80016a6:	623b      	str	r3, [r7, #32]
  HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80016a8:	f107 0314 	add.w	r3, r7, #20
 80016ac:	4619      	mov	r1, r3
 80016ae:	4809      	ldr	r0, [pc, #36]	; (80016d4 <MX_GPIO_Init+0x124>)
 80016b0:	f002 faa8 	bl	8003c04 <HAL_GPIO_Init>

  /* EXTI interrupt init*/
  HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80016b4:	2200      	movs	r2, #0
 80016b6:	2100      	movs	r1, #0
 80016b8:	2017      	movs	r0, #23
 80016ba:	f001 fe4e 	bl	800335a <HAL_NVIC_SetPriority>
  HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80016be:	2017      	movs	r0, #23
 80016c0:	f001 fe67 	bl	8003392 <HAL_NVIC_EnableIRQ>

}
 80016c4:	bf00      	nop
 80016c6:	3728      	adds	r7, #40	; 0x28
 80016c8:	46bd      	mov	sp, r7
 80016ca:	bd80      	pop	{r7, pc}
 80016cc:	40023800 	.word	0x40023800
 80016d0:	40020000 	.word	0x40020000
 80016d4:	40020400 	.word	0x40020400
 80016d8:	10210000 	.word	0x10210000
 80016dc:	40020800 	.word	0x40020800
 80016e0:	10110000 	.word	0x10110000

080016e4 <UARTInit>:
/* USER CODE BEGIN 4 */
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void UARTInit(UARTStucrture *uart)
{
 80016e4:	b580      	push	{r7, lr}
 80016e6:	b082      	sub	sp, #8
 80016e8:	af00      	add	r7, sp, #0
 80016ea:	6078      	str	r0, [r7, #4]
	//dynamic memory allocate
	uart->RxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.RxLen);
 80016ec:	4b10      	ldr	r3, [pc, #64]	; (8001730 <UARTInit+0x4c>)
 80016ee:	88db      	ldrh	r3, [r3, #6]
 80016f0:	4619      	mov	r1, r3
 80016f2:	2001      	movs	r0, #1
 80016f4:	f006 ffd8 	bl	80086a8 <calloc>
 80016f8:	4603      	mov	r3, r0
 80016fa:	461a      	mov	r2, r3
 80016fc:	687b      	ldr	r3, [r7, #4]
 80016fe:	611a      	str	r2, [r3, #16]
	uart->TxBuffer = (uint8_t*) calloc(sizeof(uint8_t), UART2.TxLen);
 8001700:	4b0b      	ldr	r3, [pc, #44]	; (8001730 <UARTInit+0x4c>)
 8001702:	889b      	ldrh	r3, [r3, #4]
 8001704:	4619      	mov	r1, r3
 8001706:	2001      	movs	r0, #1
 8001708:	f006 ffce 	bl	80086a8 <calloc>
 800170c:	4603      	mov	r3, r0
 800170e:	461a      	mov	r2, r3
 8001710:	687b      	ldr	r3, [r7, #4]
 8001712:	609a      	str	r2, [r3, #8]
	uart->RxTail = 0;
 8001714:	687b      	ldr	r3, [r7, #4]
 8001716:	2200      	movs	r2, #0
 8001718:	829a      	strh	r2, [r3, #20]
	uart->TxTail = 0;
 800171a:	687b      	ldr	r3, [r7, #4]
 800171c:	2200      	movs	r2, #0
 800171e:	819a      	strh	r2, [r3, #12]
	uart->TxHead = 0;
 8001720:	687b      	ldr	r3, [r7, #4]
 8001722:	2200      	movs	r2, #0
 8001724:	81da      	strh	r2, [r3, #14]

}
 8001726:	bf00      	nop
 8001728:	3708      	adds	r7, #8
 800172a:	46bd      	mov	sp, r7
 800172c:	bd80      	pop	{r7, pc}
 800172e:	bf00      	nop
 8001730:	200000c4 	.word	0x200000c4

08001734 <UARTResetStart>:

void UARTResetStart(UARTStucrture *uart)
{
 8001734:	b580      	push	{r7, lr}
 8001736:	b082      	sub	sp, #8
 8001738:	af00      	add	r7, sp, #0
 800173a:	6078      	str	r0, [r7, #4]
	HAL_UART_Receive_DMA(uart->huart, uart->RxBuffer, uart->RxLen);
 800173c:	687b      	ldr	r3, [r7, #4]
 800173e:	6818      	ldr	r0, [r3, #0]
 8001740:	687b      	ldr	r3, [r7, #4]
 8001742:	6919      	ldr	r1, [r3, #16]
 8001744:	687b      	ldr	r3, [r7, #4]
 8001746:	88db      	ldrh	r3, [r3, #6]
 8001748:	461a      	mov	r2, r3
 800174a:	f006 f929 	bl	80079a0 <HAL_UART_Receive_DMA>
}
 800174e:	bf00      	nop
 8001750:	3708      	adds	r7, #8
 8001752:	46bd      	mov	sp, r7
 8001754:	bd80      	pop	{r7, pc}
	...

08001758 <UARTTxDumpBuffer>:
	}
	return Result;

}
void UARTTxDumpBuffer(UARTStucrture *uart)
{
 8001758:	b580      	push	{r7, lr}
 800175a:	b084      	sub	sp, #16
 800175c:	af00      	add	r7, sp, #0
 800175e:	6078      	str	r0, [r7, #4]
	static uint8_t MultiProcessBlocker = 0;

	if (uart->huart->gState == HAL_UART_STATE_READY && !MultiProcessBlocker)
 8001760:	687b      	ldr	r3, [r7, #4]
 8001762:	681b      	ldr	r3, [r3, #0]
 8001764:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8001768:	b2db      	uxtb	r3, r3
 800176a:	2b20      	cmp	r3, #32
 800176c:	d13d      	bne.n	80017ea <UARTTxDumpBuffer+0x92>
 800176e:	4b21      	ldr	r3, [pc, #132]	; (80017f4 <UARTTxDumpBuffer+0x9c>)
 8001770:	781b      	ldrb	r3, [r3, #0]
 8001772:	2b00      	cmp	r3, #0
 8001774:	d139      	bne.n	80017ea <UARTTxDumpBuffer+0x92>
	{
		MultiProcessBlocker = 1;
 8001776:	4b1f      	ldr	r3, [pc, #124]	; (80017f4 <UARTTxDumpBuffer+0x9c>)
 8001778:	2201      	movs	r2, #1
 800177a:	701a      	strb	r2, [r3, #0]

		if (uart->TxHead != uart->TxTail)
 800177c:	687b      	ldr	r3, [r7, #4]
 800177e:	89da      	ldrh	r2, [r3, #14]
 8001780:	687b      	ldr	r3, [r7, #4]
 8001782:	899b      	ldrh	r3, [r3, #12]
 8001784:	429a      	cmp	r2, r3
 8001786:	d02d      	beq.n	80017e4 <UARTTxDumpBuffer+0x8c>
		{
			//find len of data in buffer (Circular buffer but do in one way)
			uint16_t sentingLen =
					uart->TxHead > uart->TxTail ?
 8001788:	687b      	ldr	r3, [r7, #4]
 800178a:	89da      	ldrh	r2, [r3, #14]
 800178c:	687b      	ldr	r3, [r7, #4]
 800178e:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 8001790:	429a      	cmp	r2, r3
 8001792:	d906      	bls.n	80017a2 <UARTTxDumpBuffer+0x4a>
							uart->TxHead - uart->TxTail :
 8001794:	687b      	ldr	r3, [r7, #4]
 8001796:	89da      	ldrh	r2, [r3, #14]
 8001798:	687b      	ldr	r3, [r7, #4]
 800179a:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 800179c:	1ad3      	subs	r3, r2, r3
 800179e:	b29b      	uxth	r3, r3
 80017a0:	e005      	b.n	80017ae <UARTTxDumpBuffer+0x56>
							uart->TxLen - uart->TxTail;
 80017a2:	687b      	ldr	r3, [r7, #4]
 80017a4:	889a      	ldrh	r2, [r3, #4]
 80017a6:	687b      	ldr	r3, [r7, #4]
 80017a8:	899b      	ldrh	r3, [r3, #12]
			uint16_t sentingLen =
 80017aa:	1ad3      	subs	r3, r2, r3
 80017ac:	b29b      	uxth	r3, r3
 80017ae:	81fb      	strh	r3, [r7, #14]

			//sent data via DMA
			HAL_UART_Transmit_DMA(uart->huart, &(uart->TxBuffer[uart->TxTail]),
 80017b0:	687b      	ldr	r3, [r7, #4]
 80017b2:	6818      	ldr	r0, [r3, #0]
 80017b4:	687b      	ldr	r3, [r7, #4]
 80017b6:	689b      	ldr	r3, [r3, #8]
 80017b8:	687a      	ldr	r2, [r7, #4]
 80017ba:	8992      	ldrh	r2, [r2, #12]
 80017bc:	4413      	add	r3, r2
 80017be:	89fa      	ldrh	r2, [r7, #14]
 80017c0:	4619      	mov	r1, r3
 80017c2:	f006 f881 	bl	80078c8 <HAL_UART_Transmit_DMA>
					sentingLen);
			//move tail to new position
			uart->TxTail = (uart->TxTail + sentingLen) % uart->TxLen;
 80017c6:	687b      	ldr	r3, [r7, #4]
 80017c8:	899b      	ldrh	r3, [r3, #12]
 80017ca:	461a      	mov	r2, r3
 80017cc:	89fb      	ldrh	r3, [r7, #14]
 80017ce:	4413      	add	r3, r2
 80017d0:	687a      	ldr	r2, [r7, #4]
 80017d2:	8892      	ldrh	r2, [r2, #4]
 80017d4:	fb93 f1f2 	sdiv	r1, r3, r2
 80017d8:	fb02 f201 	mul.w	r2, r2, r1
 80017dc:	1a9b      	subs	r3, r3, r2
 80017de:	b29a      	uxth	r2, r3
 80017e0:	687b      	ldr	r3, [r7, #4]
 80017e2:	819a      	strh	r2, [r3, #12]

		}
		MultiProcessBlocker = 0;
 80017e4:	4b03      	ldr	r3, [pc, #12]	; (80017f4 <UARTTxDumpBuffer+0x9c>)
 80017e6:	2200      	movs	r2, #0
 80017e8:	701a      	strb	r2, [r3, #0]
	}
}
 80017ea:	bf00      	nop
 80017ec:	3710      	adds	r7, #16
 80017ee:	46bd      	mov	sp, r7
 80017f0:	bd80      	pop	{r7, pc}
 80017f2:	bf00      	nop
 80017f4:	20000134 	.word	0x20000134

080017f8 <HAL_GPIO_EXTI_Callback>:
		State = S_idle;
		break;
	}
}

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 80017f8:	b580      	push	{r7, lr}
 80017fa:	b082      	sub	sp, #8
 80017fc:	af00      	add	r7, sp, #0
 80017fe:	4603      	mov	r3, r0
 8001800:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){
 8001802:	88fb      	ldrh	r3, [r7, #6]
 8001804:	2b80      	cmp	r3, #128	; 0x80
 8001806:	d10c      	bne.n	8001822 <HAL_GPIO_EXTI_Callback+0x2a>
		cP = 0;
 8001808:	4b08      	ldr	r3, [pc, #32]	; (800182c <HAL_GPIO_EXTI_Callback+0x34>)
 800180a:	2200      	movs	r2, #0
 800180c:	701a      	strb	r2, [r3, #0]
		velocity = 0;
 800180e:	4b08      	ldr	r3, [pc, #32]	; (8001830 <HAL_GPIO_EXTI_Callback+0x38>)
 8001810:	f04f 0200 	mov.w	r2, #0
 8001814:	601a      	str	r2, [r3, #0]
		SetHome = 0;
 8001816:	4b07      	ldr	r3, [pc, #28]	; (8001834 <HAL_GPIO_EXTI_Callback+0x3c>)
 8001818:	2200      	movs	r2, #0
 800181a:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 800181c:	2017      	movs	r0, #23
 800181e:	f001 fdc6 	bl	80033ae <HAL_NVIC_DisableIRQ>
	}
}
 8001822:	bf00      	nop
 8001824:	3708      	adds	r7, #8
 8001826:	46bd      	mov	sp, r7
 8001828:	bd80      	pop	{r7, pc}
 800182a:	bf00      	nop
 800182c:	200000e8 	.word	0x200000e8
 8001830:	200000f4 	.word	0x200000f4
 8001834:	20000104 	.word	0x20000104

08001838 <I2C>:
void I2C(){
 8001838:	b580      	push	{r7, lr}
 800183a:	b082      	sub	sp, #8
 800183c:	af00      	add	r7, sp, #0
	const uint8_t laserAddress = 0x23<<1;
 800183e:	2346      	movs	r3, #70	; 0x46
 8001840:	71fb      	strb	r3, [r7, #7]
	static uint8_t pdataStart[1] = {0x45};
	HAL_I2C_Master_Transmit_IT(&hi2c1, laserAddress, pdataStart, 1);
 8001842:	79fb      	ldrb	r3, [r7, #7]
 8001844:	b299      	uxth	r1, r3
 8001846:	2301      	movs	r3, #1
 8001848:	4a03      	ldr	r2, [pc, #12]	; (8001858 <I2C+0x20>)
 800184a:	4804      	ldr	r0, [pc, #16]	; (800185c <I2C+0x24>)
 800184c:	f002 fcd4 	bl	80041f8 <HAL_I2C_Master_Transmit_IT>
}
 8001850:	bf00      	nop
 8001852:	3708      	adds	r7, #8
 8001854:	46bd      	mov	sp, r7
 8001856:	bd80      	pop	{r7, pc}
 8001858:	20000030 	.word	0x20000030
 800185c:	20000218 	.word	0x20000218

08001860 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 8001860:	b5b0      	push	{r4, r5, r7, lr}
 8001862:	b086      	sub	sp, #24
 8001864:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001866:	4b36      	ldr	r3, [pc, #216]	; (8001940 <EncoderVelocity_Update+0xe0>)
 8001868:	681b      	ldr	r3, [r3, #0]
 800186a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800186c:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800186e:	f001 f8c7 	bl	8002a00 <micros>
 8001872:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001876:	4b33      	ldr	r3, [pc, #204]	; (8001944 <EncoderVelocity_Update+0xe4>)
 8001878:	e9d3 2300 	ldrd	r2, r3, [r3]
 800187c:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 8001880:	1a84      	subs	r4, r0, r2
 8001882:	eb61 0503 	sbc.w	r5, r1, r3
 8001886:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 800188a:	4b2f      	ldr	r3, [pc, #188]	; (8001948 <EncoderVelocity_Update+0xe8>)
 800188c:	681b      	ldr	r3, [r3, #0]
 800188e:	693a      	ldr	r2, [r7, #16]
 8001890:	1ad3      	subs	r3, r2, r3
 8001892:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 8001894:	697b      	ldr	r3, [r7, #20]
 8001896:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 800189a:	db04      	blt.n	80018a6 <EncoderVelocity_Update+0x46>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 800189c:	697b      	ldr	r3, [r7, #20]
 800189e:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80018a2:	617b      	str	r3, [r7, #20]
 80018a4:	e007      	b.n	80018b6 <EncoderVelocity_Update+0x56>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80018a6:	697b      	ldr	r3, [r7, #20]
 80018a8:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 80018ac:	dc03      	bgt.n	80018b6 <EncoderVelocity_Update+0x56>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80018ae:	697b      	ldr	r3, [r7, #20]
 80018b0:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80018b4:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80018b6:	4a24      	ldr	r2, [pc, #144]	; (8001948 <EncoderVelocity_Update+0xe8>)
 80018b8:	693b      	ldr	r3, [r7, #16]
 80018ba:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80018bc:	4921      	ldr	r1, [pc, #132]	; (8001944 <EncoderVelocity_Update+0xe4>)
 80018be:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80018c2:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000*2*3.14) / (float) (EncoderTimeDiff *2048*4);
 80018c6:	697b      	ldr	r3, [r7, #20]
 80018c8:	4a20      	ldr	r2, [pc, #128]	; (800194c <EncoderVelocity_Update+0xec>)
 80018ca:	fb02 f303 	mul.w	r3, r2, r3
 80018ce:	4618      	mov	r0, r3
 80018d0:	f7fe fdd4 	bl	800047c <__aeabi_i2d>
 80018d4:	a318      	add	r3, pc, #96	; (adr r3, 8001938 <EncoderVelocity_Update+0xd8>)
 80018d6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018da:	f7fe fe39 	bl	8000550 <__aeabi_dmul>
 80018de:	4602      	mov	r2, r0
 80018e0:	460b      	mov	r3, r1
 80018e2:	4614      	mov	r4, r2
 80018e4:	461d      	mov	r5, r3
 80018e6:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ea:	f04f 0200 	mov.w	r2, #0
 80018ee:	f04f 0300 	mov.w	r3, #0
 80018f2:	034b      	lsls	r3, r1, #13
 80018f4:	ea43 43d0 	orr.w	r3, r3, r0, lsr #19
 80018f8:	0342      	lsls	r2, r0, #13
 80018fa:	4610      	mov	r0, r2
 80018fc:	4619      	mov	r1, r3
 80018fe:	f7ff f9ef 	bl	8000ce0 <__aeabi_ul2f>
 8001902:	4603      	mov	r3, r0
 8001904:	4618      	mov	r0, r3
 8001906:	f7fe fdcb 	bl	80004a0 <__aeabi_f2d>
 800190a:	4602      	mov	r2, r0
 800190c:	460b      	mov	r3, r1
 800190e:	4620      	mov	r0, r4
 8001910:	4629      	mov	r1, r5
 8001912:	f7fe ff47 	bl	80007a4 <__aeabi_ddiv>
 8001916:	4602      	mov	r2, r0
 8001918:	460b      	mov	r3, r1
 800191a:	4610      	mov	r0, r2
 800191c:	4619      	mov	r1, r3
 800191e:	f7ff f8c7 	bl	8000ab0 <__aeabi_d2f>
 8001922:	4603      	mov	r3, r0
 8001924:	ee07 3a90 	vmov	s15, r3

}
 8001928:	eeb0 0a67 	vmov.f32	s0, s15
 800192c:	3718      	adds	r7, #24
 800192e:	46bd      	mov	sp, r7
 8001930:	bdb0      	pop	{r4, r5, r7, pc}
 8001932:	bf00      	nop
 8001934:	f3af 8000 	nop.w
 8001938:	51eb851f 	.word	0x51eb851f
 800193c:	40091eb8 	.word	0x40091eb8
 8001940:	20000314 	.word	0x20000314
 8001944:	20000138 	.word	0x20000138
 8001948:	20000140 	.word	0x20000140
 800194c:	001e8480 	.word	0x001e8480

08001950 <trajectory>:

void trajectory(uint64_t Timestamp){
 8001950:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8001954:	b082      	sub	sp, #8
 8001956:	af00      	add	r7, sp, #0
 8001958:	e9c7 0100 	strd	r0, r1, [r7]
	static float a2 = 0;
	static float a3 = 0;
	static float a4 = 0;
	static float a5 = 0;
	static uint64_t setTime = 0;
	state[0] = start;
 800195c:	4b50      	ldr	r3, [pc, #320]	; (8001aa0 <trajectory+0x150>)
 800195e:	781b      	ldrb	r3, [r3, #0]
 8001960:	461a      	mov	r2, r3
 8001962:	4b50      	ldr	r3, [pc, #320]	; (8001aa4 <trajectory+0x154>)
 8001964:	701a      	strb	r2, [r3, #0]
	if (abs(finalAngle - startAngle) > 50){
 8001966:	4b50      	ldr	r3, [pc, #320]	; (8001aa8 <trajectory+0x158>)
 8001968:	ed93 7a00 	vldr	s14, [r3]
 800196c:	4b4f      	ldr	r3, [pc, #316]	; (8001aac <trajectory+0x15c>)
 800196e:	edd3 7a00 	vldr	s15, [r3]
 8001972:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001976:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800197a:	ee17 3a90 	vmov	r3, s15
 800197e:	2b00      	cmp	r3, #0
 8001980:	bfb8      	it	lt
 8001982:	425b      	neglt	r3, r3
 8001984:	2b32      	cmp	r3, #50	; 0x32
 8001986:	dd02      	ble.n	800198e <trajectory+0x3e>
		Kp = 150;
 8001988:	4b49      	ldr	r3, [pc, #292]	; (8001ab0 <trajectory+0x160>)
 800198a:	4a4a      	ldr	r2, [pc, #296]	; (8001ab4 <trajectory+0x164>)
 800198c:	601a      	str	r2, [r3, #0]
	}
	rawPosition[0] = (float)HTIM_ENCODER.Instance->CNT*90/2048;
 800198e:	4b4a      	ldr	r3, [pc, #296]	; (8001ab8 <trajectory+0x168>)
 8001990:	681b      	ldr	r3, [r3, #0]
 8001992:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001994:	ee07 3a90 	vmov	s15, r3
 8001998:	eef8 7a67 	vcvt.f32.u32	s15, s15
 800199c:	ed9f 7a47 	vldr	s14, [pc, #284]	; 8001abc <trajectory+0x16c>
 80019a0:	ee27 7a87 	vmul.f32	s14, s15, s14
 80019a4:	eddf 6a46 	vldr	s13, [pc, #280]	; 8001ac0 <trajectory+0x170>
 80019a8:	eec7 7a26 	vdiv.f32	s15, s14, s13
 80019ac:	4b45      	ldr	r3, [pc, #276]	; (8001ac4 <trajectory+0x174>)
 80019ae:	edc3 7a00 	vstr	s15, [r3]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 80)){
 80019b2:	4b44      	ldr	r3, [pc, #272]	; (8001ac4 <trajectory+0x174>)
 80019b4:	edd3 7a00 	vldr	s15, [r3]
 80019b8:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 80019bc:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019c0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019c4:	d510      	bpl.n	80019e8 <trajectory+0x98>
 80019c6:	4b3f      	ldr	r3, [pc, #252]	; (8001ac4 <trajectory+0x174>)
 80019c8:	edd3 7a01 	vldr	s15, [r3, #4]
 80019cc:	ed9f 7a3e 	vldr	s14, [pc, #248]	; 8001ac8 <trajectory+0x178>
 80019d0:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019d4:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019d8:	dd06      	ble.n	80019e8 <trajectory+0x98>
		cP += 1;
 80019da:	4b3c      	ldr	r3, [pc, #240]	; (8001acc <trajectory+0x17c>)
 80019dc:	781b      	ldrb	r3, [r3, #0]
 80019de:	3301      	adds	r3, #1
 80019e0:	b2da      	uxtb	r2, r3
 80019e2:	4b3a      	ldr	r3, [pc, #232]	; (8001acc <trajectory+0x17c>)
 80019e4:	701a      	strb	r2, [r3, #0]
 80019e6:	e019      	b.n	8001a1c <trajectory+0xcc>
	}
	else if ((rawPosition[0] > 80 )&& (rawPosition[1] < 10)){
 80019e8:	4b36      	ldr	r3, [pc, #216]	; (8001ac4 <trajectory+0x174>)
 80019ea:	edd3 7a00 	vldr	s15, [r3]
 80019ee:	ed9f 7a36 	vldr	s14, [pc, #216]	; 8001ac8 <trajectory+0x178>
 80019f2:	eef4 7ac7 	vcmpe.f32	s15, s14
 80019f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80019fa:	dd0f      	ble.n	8001a1c <trajectory+0xcc>
 80019fc:	4b31      	ldr	r3, [pc, #196]	; (8001ac4 <trajectory+0x174>)
 80019fe:	edd3 7a01 	vldr	s15, [r3, #4]
 8001a02:	eeb2 7a04 	vmov.f32	s14, #36	; 0x41200000  10.0
 8001a06:	eef4 7ac7 	vcmpe.f32	s15, s14
 8001a0a:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001a0e:	d505      	bpl.n	8001a1c <trajectory+0xcc>
		cP -= 1;
 8001a10:	4b2e      	ldr	r3, [pc, #184]	; (8001acc <trajectory+0x17c>)
 8001a12:	781b      	ldrb	r3, [r3, #0]
 8001a14:	3b01      	subs	r3, #1
 8001a16:	b2da      	uxtb	r2, r3
 8001a18:	4b2c      	ldr	r3, [pc, #176]	; (8001acc <trajectory+0x17c>)
 8001a1a:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 8001a1c:	4b2b      	ldr	r3, [pc, #172]	; (8001acc <trajectory+0x17c>)
 8001a1e:	781b      	ldrb	r3, [r3, #0]
 8001a20:	2b03      	cmp	r3, #3
 8001a22:	d902      	bls.n	8001a2a <trajectory+0xda>
		cP = 0;
 8001a24:	4b29      	ldr	r3, [pc, #164]	; (8001acc <trajectory+0x17c>)
 8001a26:	2200      	movs	r2, #0
 8001a28:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = (float)rawPosition[0] + cP*90;
 8001a2a:	4b26      	ldr	r3, [pc, #152]	; (8001ac4 <trajectory+0x174>)
 8001a2c:	ed93 7a00 	vldr	s14, [r3]
 8001a30:	4b26      	ldr	r3, [pc, #152]	; (8001acc <trajectory+0x17c>)
 8001a32:	781b      	ldrb	r3, [r3, #0]
 8001a34:	461a      	mov	r2, r3
 8001a36:	235a      	movs	r3, #90	; 0x5a
 8001a38:	fb03 f302 	mul.w	r3, r3, r2
 8001a3c:	ee07 3a90 	vmov	s15, r3
 8001a40:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001a44:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a48:	4b21      	ldr	r3, [pc, #132]	; (8001ad0 <trajectory+0x180>)
 8001a4a:	edc3 7a00 	vstr	s15, [r3]
	if(state[0] == 1){
 8001a4e:	4b15      	ldr	r3, [pc, #84]	; (8001aa4 <trajectory+0x154>)
 8001a50:	781b      	ldrb	r3, [r3, #0]
 8001a52:	2b01      	cmp	r3, #1
 8001a54:	f040 825b 	bne.w	8001f0e <trajectory+0x5be>
		if(state[0] != state[1]){
 8001a58:	4b12      	ldr	r3, [pc, #72]	; (8001aa4 <trajectory+0x154>)
 8001a5a:	781a      	ldrb	r2, [r3, #0]
 8001a5c:	4b11      	ldr	r3, [pc, #68]	; (8001aa4 <trajectory+0x154>)
 8001a5e:	785b      	ldrb	r3, [r3, #1]
 8001a60:	429a      	cmp	r2, r3
 8001a62:	d008      	beq.n	8001a76 <trajectory+0x126>
			setTime = Timestamp;
 8001a64:	491b      	ldr	r1, [pc, #108]	; (8001ad4 <trajectory+0x184>)
 8001a66:	e9d7 2300 	ldrd	r2, r3, [r7]
 8001a6a:	e9c1 2300 	strd	r2, r3, [r1]
			startAngle = currentPosition;
 8001a6e:	4b18      	ldr	r3, [pc, #96]	; (8001ad0 <trajectory+0x180>)
 8001a70:	681b      	ldr	r3, [r3, #0]
 8001a72:	4a0e      	ldr	r2, [pc, #56]	; (8001aac <trajectory+0x15c>)
 8001a74:	6013      	str	r3, [r2, #0]
		}
		if(abs(finalAngle - startAngle) > 80){
 8001a76:	4b0c      	ldr	r3, [pc, #48]	; (8001aa8 <trajectory+0x158>)
 8001a78:	ed93 7a00 	vldr	s14, [r3]
 8001a7c:	4b0b      	ldr	r3, [pc, #44]	; (8001aac <trajectory+0x15c>)
 8001a7e:	edd3 7a00 	vldr	s15, [r3]
 8001a82:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001a86:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001a8a:	ee17 3a90 	vmov	r3, s15
 8001a8e:	2b00      	cmp	r3, #0
 8001a90:	bfb8      	it	lt
 8001a92:	425b      	neglt	r3, r3
 8001a94:	2b50      	cmp	r3, #80	; 0x50
 8001a96:	dd23      	ble.n	8001ae0 <trajectory+0x190>
			stopError = 5;
 8001a98:	4b0f      	ldr	r3, [pc, #60]	; (8001ad8 <trajectory+0x188>)
 8001a9a:	4a10      	ldr	r2, [pc, #64]	; (8001adc <trajectory+0x18c>)
 8001a9c:	601a      	str	r2, [r3, #0]
 8001a9e:	e023      	b.n	8001ae8 <trajectory+0x198>
 8001aa0:	2000011e 	.word	0x2000011e
 8001aa4:	2000011c 	.word	0x2000011c
 8001aa8:	20000008 	.word	0x20000008
 8001aac:	20000108 	.word	0x20000108
 8001ab0:	20000014 	.word	0x20000014
 8001ab4:	43160000 	.word	0x43160000
 8001ab8:	20000314 	.word	0x20000314
 8001abc:	42b40000 	.word	0x42b40000
 8001ac0:	45000000 	.word	0x45000000
 8001ac4:	20000114 	.word	0x20000114
 8001ac8:	42a00000 	.word	0x42a00000
 8001acc:	200000e8 	.word	0x200000e8
 8001ad0:	20000110 	.word	0x20000110
 8001ad4:	20000148 	.word	0x20000148
 8001ad8:	20000004 	.word	0x20000004
 8001adc:	40a00000 	.word	0x40a00000
		}
		else{
			stopError = 0;
 8001ae0:	4bd7      	ldr	r3, [pc, #860]	; (8001e40 <trajectory+0x4f0>)
 8001ae2:	f04f 0200 	mov.w	r2, #0
 8001ae6:	601a      	str	r2, [r3, #0]
		}
		tim = (float) (Timestamp-setTime)/1000000;
 8001ae8:	4bd6      	ldr	r3, [pc, #856]	; (8001e44 <trajectory+0x4f4>)
 8001aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001aee:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001af2:	1a84      	subs	r4, r0, r2
 8001af4:	eb61 0503 	sbc.w	r5, r1, r3
 8001af8:	4620      	mov	r0, r4
 8001afa:	4629      	mov	r1, r5
 8001afc:	f7ff f8f0 	bl	8000ce0 <__aeabi_ul2f>
 8001b00:	ee06 0a90 	vmov	s13, r0
 8001b04:	ed9f 7ad0 	vldr	s14, [pc, #832]	; 8001e48 <trajectory+0x4f8>
 8001b08:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b0c:	4bcf      	ldr	r3, [pc, #828]	; (8001e4c <trajectory+0x4fc>)
 8001b0e:	edc3 7a00 	vstr	s15, [r3]
		tF = (float) (250*abs(finalAngle-startAngle)/(355*vMax));
 8001b12:	4bcf      	ldr	r3, [pc, #828]	; (8001e50 <trajectory+0x500>)
 8001b14:	ed93 7a00 	vldr	s14, [r3]
 8001b18:	4bce      	ldr	r3, [pc, #824]	; (8001e54 <trajectory+0x504>)
 8001b1a:	edd3 7a00 	vldr	s15, [r3]
 8001b1e:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001b22:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001b26:	ee17 3a90 	vmov	r3, s15
 8001b2a:	2b00      	cmp	r3, #0
 8001b2c:	bfb8      	it	lt
 8001b2e:	425b      	neglt	r3, r3
 8001b30:	22fa      	movs	r2, #250	; 0xfa
 8001b32:	fb02 f303 	mul.w	r3, r2, r3
 8001b36:	ee07 3a90 	vmov	s15, r3
 8001b3a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001b3e:	4bc6      	ldr	r3, [pc, #792]	; (8001e58 <trajectory+0x508>)
 8001b40:	edd3 7a00 	vldr	s15, [r3]
 8001b44:	ed9f 7ac5 	vldr	s14, [pc, #788]	; 8001e5c <trajectory+0x50c>
 8001b48:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001b4c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b50:	4bc3      	ldr	r3, [pc, #780]	; (8001e60 <trajectory+0x510>)
 8001b52:	edc3 7a00 	vstr	s15, [r3]
		if ((tim <= tF)){
 8001b56:	4bbd      	ldr	r3, [pc, #756]	; (8001e4c <trajectory+0x4fc>)
 8001b58:	ed93 7a00 	vldr	s14, [r3]
 8001b5c:	4bc0      	ldr	r3, [pc, #768]	; (8001e60 <trajectory+0x510>)
 8001b5e:	edd3 7a00 	vldr	s15, [r3]
 8001b62:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001b66:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001b6a:	f200 8138 	bhi.w	8001dde <trajectory+0x48e>
			//cubic trajectory
			a0 = startAngle;
 8001b6e:	4bb9      	ldr	r3, [pc, #740]	; (8001e54 <trajectory+0x504>)
 8001b70:	681b      	ldr	r3, [r3, #0]
 8001b72:	4abc      	ldr	r2, [pc, #752]	; (8001e64 <trajectory+0x514>)
 8001b74:	6013      	str	r3, [r2, #0]
			a1 = 0;
 8001b76:	4bbc      	ldr	r3, [pc, #752]	; (8001e68 <trajectory+0x518>)
 8001b78:	f04f 0200 	mov.w	r2, #0
 8001b7c:	601a      	str	r2, [r3, #0]
			a2 = (float) (3/pow(tF,2))*(finalAngle-startAngle);
 8001b7e:	4bb8      	ldr	r3, [pc, #736]	; (8001e60 <trajectory+0x510>)
 8001b80:	681b      	ldr	r3, [r3, #0]
 8001b82:	4618      	mov	r0, r3
 8001b84:	f7fe fc8c 	bl	80004a0 <__aeabi_f2d>
 8001b88:	4602      	mov	r2, r0
 8001b8a:	460b      	mov	r3, r1
 8001b8c:	ed9f 1ba6 	vldr	d1, [pc, #664]	; 8001e28 <trajectory+0x4d8>
 8001b90:	ec43 2b10 	vmov	d0, r2, r3
 8001b94:	f006 fe4a 	bl	800882c <pow>
 8001b98:	ec53 2b10 	vmov	r2, r3, d0
 8001b9c:	f04f 0000 	mov.w	r0, #0
 8001ba0:	49b2      	ldr	r1, [pc, #712]	; (8001e6c <trajectory+0x51c>)
 8001ba2:	f7fe fdff 	bl	80007a4 <__aeabi_ddiv>
 8001ba6:	4602      	mov	r2, r0
 8001ba8:	460b      	mov	r3, r1
 8001baa:	4610      	mov	r0, r2
 8001bac:	4619      	mov	r1, r3
 8001bae:	f7fe ff7f 	bl	8000ab0 <__aeabi_d2f>
 8001bb2:	ee06 0a90 	vmov	s13, r0
 8001bb6:	4ba6      	ldr	r3, [pc, #664]	; (8001e50 <trajectory+0x500>)
 8001bb8:	ed93 7a00 	vldr	s14, [r3]
 8001bbc:	4ba5      	ldr	r3, [pc, #660]	; (8001e54 <trajectory+0x504>)
 8001bbe:	edd3 7a00 	vldr	s15, [r3]
 8001bc2:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001bc6:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001bca:	4ba9      	ldr	r3, [pc, #676]	; (8001e70 <trajectory+0x520>)
 8001bcc:	edc3 7a00 	vstr	s15, [r3]
			a3 = (float) -(2/pow(tF,3))*(finalAngle-startAngle);
 8001bd0:	4ba3      	ldr	r3, [pc, #652]	; (8001e60 <trajectory+0x510>)
 8001bd2:	681b      	ldr	r3, [r3, #0]
 8001bd4:	4618      	mov	r0, r3
 8001bd6:	f7fe fc63 	bl	80004a0 <__aeabi_f2d>
 8001bda:	4602      	mov	r2, r0
 8001bdc:	460b      	mov	r3, r1
 8001bde:	ed9f 1b94 	vldr	d1, [pc, #592]	; 8001e30 <trajectory+0x4e0>
 8001be2:	ec43 2b10 	vmov	d0, r2, r3
 8001be6:	f006 fe21 	bl	800882c <pow>
 8001bea:	ec53 2b10 	vmov	r2, r3, d0
 8001bee:	f04f 0000 	mov.w	r0, #0
 8001bf2:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 8001bf6:	f7fe fdd5 	bl	80007a4 <__aeabi_ddiv>
 8001bfa:	4602      	mov	r2, r0
 8001bfc:	460b      	mov	r3, r1
 8001bfe:	4610      	mov	r0, r2
 8001c00:	4619      	mov	r1, r3
 8001c02:	f7fe ff55 	bl	8000ab0 <__aeabi_d2f>
 8001c06:	4603      	mov	r3, r0
 8001c08:	ee07 3a90 	vmov	s15, r3
 8001c0c:	eeb1 7a67 	vneg.f32	s14, s15
 8001c10:	4b8f      	ldr	r3, [pc, #572]	; (8001e50 <trajectory+0x500>)
 8001c12:	edd3 6a00 	vldr	s13, [r3]
 8001c16:	4b8f      	ldr	r3, [pc, #572]	; (8001e54 <trajectory+0x504>)
 8001c18:	edd3 7a00 	vldr	s15, [r3]
 8001c1c:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001c20:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001c24:	4b93      	ldr	r3, [pc, #588]	; (8001e74 <trajectory+0x524>)
 8001c26:	edc3 7a00 	vstr	s15, [r3]
			position = (float) a0+ (a1*tim) +(a2*pow(tim,2)) +(a3*pow(tim,3));
 8001c2a:	4b8f      	ldr	r3, [pc, #572]	; (8001e68 <trajectory+0x518>)
 8001c2c:	ed93 7a00 	vldr	s14, [r3]
 8001c30:	4b86      	ldr	r3, [pc, #536]	; (8001e4c <trajectory+0x4fc>)
 8001c32:	edd3 7a00 	vldr	s15, [r3]
 8001c36:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001c3a:	4b8a      	ldr	r3, [pc, #552]	; (8001e64 <trajectory+0x514>)
 8001c3c:	edd3 7a00 	vldr	s15, [r3]
 8001c40:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001c44:	ee17 0a90 	vmov	r0, s15
 8001c48:	f7fe fc2a 	bl	80004a0 <__aeabi_f2d>
 8001c4c:	4604      	mov	r4, r0
 8001c4e:	460d      	mov	r5, r1
 8001c50:	4b87      	ldr	r3, [pc, #540]	; (8001e70 <trajectory+0x520>)
 8001c52:	681b      	ldr	r3, [r3, #0]
 8001c54:	4618      	mov	r0, r3
 8001c56:	f7fe fc23 	bl	80004a0 <__aeabi_f2d>
 8001c5a:	4680      	mov	r8, r0
 8001c5c:	4689      	mov	r9, r1
 8001c5e:	4b7b      	ldr	r3, [pc, #492]	; (8001e4c <trajectory+0x4fc>)
 8001c60:	681b      	ldr	r3, [r3, #0]
 8001c62:	4618      	mov	r0, r3
 8001c64:	f7fe fc1c 	bl	80004a0 <__aeabi_f2d>
 8001c68:	4602      	mov	r2, r0
 8001c6a:	460b      	mov	r3, r1
 8001c6c:	ed9f 1b6e 	vldr	d1, [pc, #440]	; 8001e28 <trajectory+0x4d8>
 8001c70:	ec43 2b10 	vmov	d0, r2, r3
 8001c74:	f006 fdda 	bl	800882c <pow>
 8001c78:	ec53 2b10 	vmov	r2, r3, d0
 8001c7c:	4640      	mov	r0, r8
 8001c7e:	4649      	mov	r1, r9
 8001c80:	f7fe fc66 	bl	8000550 <__aeabi_dmul>
 8001c84:	4602      	mov	r2, r0
 8001c86:	460b      	mov	r3, r1
 8001c88:	4620      	mov	r0, r4
 8001c8a:	4629      	mov	r1, r5
 8001c8c:	f7fe faaa 	bl	80001e4 <__adddf3>
 8001c90:	4602      	mov	r2, r0
 8001c92:	460b      	mov	r3, r1
 8001c94:	4690      	mov	r8, r2
 8001c96:	4699      	mov	r9, r3
 8001c98:	4b76      	ldr	r3, [pc, #472]	; (8001e74 <trajectory+0x524>)
 8001c9a:	681b      	ldr	r3, [r3, #0]
 8001c9c:	4618      	mov	r0, r3
 8001c9e:	f7fe fbff 	bl	80004a0 <__aeabi_f2d>
 8001ca2:	4604      	mov	r4, r0
 8001ca4:	460d      	mov	r5, r1
 8001ca6:	4b69      	ldr	r3, [pc, #420]	; (8001e4c <trajectory+0x4fc>)
 8001ca8:	681b      	ldr	r3, [r3, #0]
 8001caa:	4618      	mov	r0, r3
 8001cac:	f7fe fbf8 	bl	80004a0 <__aeabi_f2d>
 8001cb0:	4602      	mov	r2, r0
 8001cb2:	460b      	mov	r3, r1
 8001cb4:	ed9f 1b5e 	vldr	d1, [pc, #376]	; 8001e30 <trajectory+0x4e0>
 8001cb8:	ec43 2b10 	vmov	d0, r2, r3
 8001cbc:	f006 fdb6 	bl	800882c <pow>
 8001cc0:	ec53 2b10 	vmov	r2, r3, d0
 8001cc4:	4620      	mov	r0, r4
 8001cc6:	4629      	mov	r1, r5
 8001cc8:	f7fe fc42 	bl	8000550 <__aeabi_dmul>
 8001ccc:	4602      	mov	r2, r0
 8001cce:	460b      	mov	r3, r1
 8001cd0:	4640      	mov	r0, r8
 8001cd2:	4649      	mov	r1, r9
 8001cd4:	f7fe fa86 	bl	80001e4 <__adddf3>
 8001cd8:	4602      	mov	r2, r0
 8001cda:	460b      	mov	r3, r1
 8001cdc:	4610      	mov	r0, r2
 8001cde:	4619      	mov	r1, r3
 8001ce0:	f7fe fee6 	bl	8000ab0 <__aeabi_d2f>
 8001ce4:	4603      	mov	r3, r0
 8001ce6:	4a64      	ldr	r2, [pc, #400]	; (8001e78 <trajectory+0x528>)
 8001ce8:	6013      	str	r3, [r2, #0]
			calculatedVelocity = (float) (a1 +(2*a2*tim) +(3*a3*pow(tim,2)))/6;
 8001cea:	4b61      	ldr	r3, [pc, #388]	; (8001e70 <trajectory+0x520>)
 8001cec:	edd3 7a00 	vldr	s15, [r3]
 8001cf0:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001cf4:	4b55      	ldr	r3, [pc, #340]	; (8001e4c <trajectory+0x4fc>)
 8001cf6:	edd3 7a00 	vldr	s15, [r3]
 8001cfa:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001cfe:	4b5a      	ldr	r3, [pc, #360]	; (8001e68 <trajectory+0x518>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d08:	ee17 0a90 	vmov	r0, s15
 8001d0c:	f7fe fbc8 	bl	80004a0 <__aeabi_f2d>
 8001d10:	4604      	mov	r4, r0
 8001d12:	460d      	mov	r5, r1
 8001d14:	4b57      	ldr	r3, [pc, #348]	; (8001e74 <trajectory+0x524>)
 8001d16:	edd3 7a00 	vldr	s15, [r3]
 8001d1a:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001d1e:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001d22:	ee17 0a90 	vmov	r0, s15
 8001d26:	f7fe fbbb 	bl	80004a0 <__aeabi_f2d>
 8001d2a:	4680      	mov	r8, r0
 8001d2c:	4689      	mov	r9, r1
 8001d2e:	4b47      	ldr	r3, [pc, #284]	; (8001e4c <trajectory+0x4fc>)
 8001d30:	681b      	ldr	r3, [r3, #0]
 8001d32:	4618      	mov	r0, r3
 8001d34:	f7fe fbb4 	bl	80004a0 <__aeabi_f2d>
 8001d38:	4602      	mov	r2, r0
 8001d3a:	460b      	mov	r3, r1
 8001d3c:	ed9f 1b3a 	vldr	d1, [pc, #232]	; 8001e28 <trajectory+0x4d8>
 8001d40:	ec43 2b10 	vmov	d0, r2, r3
 8001d44:	f006 fd72 	bl	800882c <pow>
 8001d48:	ec53 2b10 	vmov	r2, r3, d0
 8001d4c:	4640      	mov	r0, r8
 8001d4e:	4649      	mov	r1, r9
 8001d50:	f7fe fbfe 	bl	8000550 <__aeabi_dmul>
 8001d54:	4602      	mov	r2, r0
 8001d56:	460b      	mov	r3, r1
 8001d58:	4620      	mov	r0, r4
 8001d5a:	4629      	mov	r1, r5
 8001d5c:	f7fe fa42 	bl	80001e4 <__adddf3>
 8001d60:	4602      	mov	r2, r0
 8001d62:	460b      	mov	r3, r1
 8001d64:	4610      	mov	r0, r2
 8001d66:	4619      	mov	r1, r3
 8001d68:	f7fe fea2 	bl	8000ab0 <__aeabi_d2f>
 8001d6c:	ee06 0a90 	vmov	s13, r0
 8001d70:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001d74:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001d78:	4b40      	ldr	r3, [pc, #256]	; (8001e7c <trajectory+0x52c>)
 8001d7a:	edc3 7a00 	vstr	s15, [r3]
			alpha = (float) ((2*a2) +(6*a3*tim))*2*3.14/360;
 8001d7e:	4b3c      	ldr	r3, [pc, #240]	; (8001e70 <trajectory+0x520>)
 8001d80:	edd3 7a00 	vldr	s15, [r3]
 8001d84:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001d88:	4b3a      	ldr	r3, [pc, #232]	; (8001e74 <trajectory+0x524>)
 8001d8a:	edd3 7a00 	vldr	s15, [r3]
 8001d8e:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001d92:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001d96:	4b2d      	ldr	r3, [pc, #180]	; (8001e4c <trajectory+0x4fc>)
 8001d98:	edd3 7a00 	vldr	s15, [r3]
 8001d9c:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001da0:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001da4:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001da8:	ee17 0a90 	vmov	r0, s15
 8001dac:	f7fe fb78 	bl	80004a0 <__aeabi_f2d>
 8001db0:	a321      	add	r3, pc, #132	; (adr r3, 8001e38 <trajectory+0x4e8>)
 8001db2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001db6:	f7fe fbcb 	bl	8000550 <__aeabi_dmul>
 8001dba:	4602      	mov	r2, r0
 8001dbc:	460b      	mov	r3, r1
 8001dbe:	4610      	mov	r0, r2
 8001dc0:	4619      	mov	r1, r3
 8001dc2:	f04f 0200 	mov.w	r2, #0
 8001dc6:	4b2e      	ldr	r3, [pc, #184]	; (8001e80 <trajectory+0x530>)
 8001dc8:	f7fe fcec 	bl	80007a4 <__aeabi_ddiv>
 8001dcc:	4602      	mov	r2, r0
 8001dce:	460b      	mov	r3, r1
 8001dd0:	4610      	mov	r0, r2
 8001dd2:	4619      	mov	r1, r3
 8001dd4:	f7fe fe6c 	bl	8000ab0 <__aeabi_d2f>
 8001dd8:	4603      	mov	r3, r0
 8001dda:	4a2a      	ldr	r2, [pc, #168]	; (8001e84 <trajectory+0x534>)
 8001ddc:	6013      	str	r3, [r2, #0]
			//		a5 = (float) 6*(finalAngle-startAngle)/pow(tF,4);
			//		position = (float) a0 + a1*tim + a2*pow(tim,2) + a3*pow(tim,3) + a4*pow(tim,4) + a5*pow(tim,5);
			//		calculatedVelocity = (float) a1+ 2*a2*tim + 3*a3*pow(tim,2) + 4*a4*pow(tim,3) + 5*a5*pow(tim,4);
			//		alpha = (float) a2 + 6*a3*tim + 12*a4*pow(tim,2) + 20*a5*pow(tim,3);
		}
		if(abs(currentPosition - finalAngle) < 8){
 8001dde:	4b2a      	ldr	r3, [pc, #168]	; (8001e88 <trajectory+0x538>)
 8001de0:	ed93 7a00 	vldr	s14, [r3]
 8001de4:	4b1a      	ldr	r3, [pc, #104]	; (8001e50 <trajectory+0x500>)
 8001de6:	edd3 7a00 	vldr	s15, [r3]
 8001dea:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001dee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001df2:	ee17 3a90 	vmov	r3, s15
 8001df6:	f113 0f07 	cmn.w	r3, #7
 8001dfa:	f2c0 8081 	blt.w	8001f00 <trajectory+0x5b0>
 8001dfe:	4b22      	ldr	r3, [pc, #136]	; (8001e88 <trajectory+0x538>)
 8001e00:	ed93 7a00 	vldr	s14, [r3]
 8001e04:	4b12      	ldr	r3, [pc, #72]	; (8001e50 <trajectory+0x500>)
 8001e06:	edd3 7a00 	vldr	s15, [r3]
 8001e0a:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e0e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001e12:	ee17 3a90 	vmov	r3, s15
 8001e16:	2b07      	cmp	r3, #7
 8001e18:	dc72      	bgt.n	8001f00 <trajectory+0x5b0>
			K = 1500;
 8001e1a:	4b1c      	ldr	r3, [pc, #112]	; (8001e8c <trajectory+0x53c>)
 8001e1c:	4a1c      	ldr	r2, [pc, #112]	; (8001e90 <trajectory+0x540>)
 8001e1e:	601a      	str	r2, [r3, #0]
			if(velocity < 0){
 8001e20:	4b1c      	ldr	r3, [pc, #112]	; (8001e94 <trajectory+0x544>)
 8001e22:	edd3 7a00 	vldr	s15, [r3]
 8001e26:	e037      	b.n	8001e98 <trajectory+0x548>
 8001e28:	00000000 	.word	0x00000000
 8001e2c:	40000000 	.word	0x40000000
 8001e30:	00000000 	.word	0x00000000
 8001e34:	40080000 	.word	0x40080000
 8001e38:	51eb851f 	.word	0x51eb851f
 8001e3c:	40091eb8 	.word	0x40091eb8
 8001e40:	20000004 	.word	0x20000004
 8001e44:	20000148 	.word	0x20000148
 8001e48:	49742400 	.word	0x49742400
 8001e4c:	20000100 	.word	0x20000100
 8001e50:	20000008 	.word	0x20000008
 8001e54:	20000108 	.word	0x20000108
 8001e58:	20000010 	.word	0x20000010
 8001e5c:	43b18000 	.word	0x43b18000
 8001e60:	20000130 	.word	0x20000130
 8001e64:	20000150 	.word	0x20000150
 8001e68:	20000154 	.word	0x20000154
 8001e6c:	40080000 	.word	0x40080000
 8001e70:	20000158 	.word	0x20000158
 8001e74:	2000015c 	.word	0x2000015c
 8001e78:	200000f8 	.word	0x200000f8
 8001e7c:	200000f0 	.word	0x200000f0
 8001e80:	40768000 	.word	0x40768000
 8001e84:	200000fc 	.word	0x200000fc
 8001e88:	20000110 	.word	0x20000110
 8001e8c:	20000024 	.word	0x20000024
 8001e90:	44bb8000 	.word	0x44bb8000
 8001e94:	200000f4 	.word	0x200000f4
 8001e98:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001e9c:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001ea0:	d503      	bpl.n	8001eaa <trajectory+0x55a>
				velocity = -1;
 8001ea2:	4b1f      	ldr	r3, [pc, #124]	; (8001f20 <trajectory+0x5d0>)
 8001ea4:	4a1f      	ldr	r2, [pc, #124]	; (8001f24 <trajectory+0x5d4>)
 8001ea6:	601a      	str	r2, [r3, #0]
 8001ea8:	e003      	b.n	8001eb2 <trajectory+0x562>
			}
			else{
				velocity = 1;
 8001eaa:	4b1d      	ldr	r3, [pc, #116]	; (8001f20 <trajectory+0x5d0>)
 8001eac:	f04f 527e 	mov.w	r2, #1065353216	; 0x3f800000
 8001eb0:	601a      	str	r2, [r3, #0]
			}
			if (abs(currentPosition - finalAngle) == 0){
 8001eb2:	4b1d      	ldr	r3, [pc, #116]	; (8001f28 <trajectory+0x5d8>)
 8001eb4:	ed93 7a00 	vldr	s14, [r3]
 8001eb8:	4b1c      	ldr	r3, [pc, #112]	; (8001f2c <trajectory+0x5dc>)
 8001eba:	edd3 7a00 	vldr	s15, [r3]
 8001ebe:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001ec2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001ec6:	ee17 3a90 	vmov	r3, s15
 8001eca:	2b00      	cmp	r3, #0
 8001ecc:	d11d      	bne.n	8001f0a <trajectory+0x5ba>
				start = 0;
 8001ece:	4b18      	ldr	r3, [pc, #96]	; (8001f30 <trajectory+0x5e0>)
 8001ed0:	2200      	movs	r2, #0
 8001ed2:	701a      	strb	r2, [r3, #0]
//				uint8_t temp2[] = {0x46,0x6E};
//				UARTTxWrite(&UART2, temp2, 2);
				velocity = 0;
 8001ed4:	4b12      	ldr	r3, [pc, #72]	; (8001f20 <trajectory+0x5d0>)
 8001ed6:	f04f 0200 	mov.w	r2, #0
 8001eda:	601a      	str	r2, [r3, #0]
				stopTime = Timestamp;
 8001edc:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001ee0:	f7fe fefe 	bl	8000ce0 <__aeabi_ul2f>
 8001ee4:	4603      	mov	r3, r0
 8001ee6:	4a13      	ldr	r2, [pc, #76]	; (8001f34 <trajectory+0x5e4>)
 8001ee8:	6013      	str	r3, [r2, #0]
				I2C();
 8001eea:	f7ff fca5 	bl	8001838 <I2C>
				state[1] = 0;
 8001eee:	4b12      	ldr	r3, [pc, #72]	; (8001f38 <trajectory+0x5e8>)
 8001ef0:	2200      	movs	r2, #0
 8001ef2:	705a      	strb	r2, [r3, #1]
				state[0] = 0;
 8001ef4:	4b10      	ldr	r3, [pc, #64]	; (8001f38 <trajectory+0x5e8>)
 8001ef6:	2200      	movs	r2, #0
 8001ef8:	701a      	strb	r2, [r3, #0]
				pidPosition();
 8001efa:	f000 f825 	bl	8001f48 <pidPosition>
			if (abs(currentPosition - finalAngle) == 0){
 8001efe:	e004      	b.n	8001f0a <trajectory+0x5ba>
			}
		}
		else{
			K = 1000;
 8001f00:	4b0e      	ldr	r3, [pc, #56]	; (8001f3c <trajectory+0x5ec>)
 8001f02:	4a0f      	ldr	r2, [pc, #60]	; (8001f40 <trajectory+0x5f0>)
 8001f04:	601a      	str	r2, [r3, #0]
			pidPosition();
 8001f06:	f000 f81f 	bl	8001f48 <pidPosition>
		}
		piVelocity();
 8001f0a:	f000 f8b5 	bl	8002078 <piVelocity>
	}
	rawPosition[1] = rawPosition[0];
 8001f0e:	4b0d      	ldr	r3, [pc, #52]	; (8001f44 <trajectory+0x5f4>)
 8001f10:	681b      	ldr	r3, [r3, #0]
 8001f12:	4a0c      	ldr	r2, [pc, #48]	; (8001f44 <trajectory+0x5f4>)
 8001f14:	6053      	str	r3, [r2, #4]
}
 8001f16:	bf00      	nop
 8001f18:	3708      	adds	r7, #8
 8001f1a:	46bd      	mov	sp, r7
 8001f1c:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001f20:	200000f4 	.word	0x200000f4
 8001f24:	bf800000 	.word	0xbf800000
 8001f28:	20000110 	.word	0x20000110
 8001f2c:	20000008 	.word	0x20000008
 8001f30:	2000011e 	.word	0x2000011e
 8001f34:	2000010c 	.word	0x2000010c
 8001f38:	2000011c 	.word	0x2000011c
 8001f3c:	20000024 	.word	0x20000024
 8001f40:	447a0000 	.word	0x447a0000
 8001f44:	20000114 	.word	0x20000114

08001f48 <pidPosition>:

void pidPosition(){
 8001f48:	b480      	push	{r7}
 8001f4a:	af00      	add	r7, sp, #0
	static float errorP = 0;
	static float integralP = 0;
	static float derivativeP = 0;
	errorP = position - currentPosition;
 8001f4c:	4b3f      	ldr	r3, [pc, #252]	; (800204c <pidPosition+0x104>)
 8001f4e:	ed93 7a00 	vldr	s14, [r3]
 8001f52:	4b3f      	ldr	r3, [pc, #252]	; (8002050 <pidPosition+0x108>)
 8001f54:	edd3 7a00 	vldr	s15, [r3]
 8001f58:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001f5c:	4b3d      	ldr	r3, [pc, #244]	; (8002054 <pidPosition+0x10c>)
 8001f5e:	edc3 7a00 	vstr	s15, [r3]
	integralP = integralP+errorP;
 8001f62:	4b3d      	ldr	r3, [pc, #244]	; (8002058 <pidPosition+0x110>)
 8001f64:	ed93 7a00 	vldr	s14, [r3]
 8001f68:	4b3a      	ldr	r3, [pc, #232]	; (8002054 <pidPosition+0x10c>)
 8001f6a:	edd3 7a00 	vldr	s15, [r3]
 8001f6e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f72:	4b39      	ldr	r3, [pc, #228]	; (8002058 <pidPosition+0x110>)
 8001f74:	edc3 7a00 	vstr	s15, [r3]
	velocity = Kp_p*errorP + Ki_p*integralP +Kd_p*(errorP-derivativeP);
 8001f78:	4b38      	ldr	r3, [pc, #224]	; (800205c <pidPosition+0x114>)
 8001f7a:	ed93 7a00 	vldr	s14, [r3]
 8001f7e:	4b35      	ldr	r3, [pc, #212]	; (8002054 <pidPosition+0x10c>)
 8001f80:	edd3 7a00 	vldr	s15, [r3]
 8001f84:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f88:	4b35      	ldr	r3, [pc, #212]	; (8002060 <pidPosition+0x118>)
 8001f8a:	edd3 6a00 	vldr	s13, [r3]
 8001f8e:	4b32      	ldr	r3, [pc, #200]	; (8002058 <pidPosition+0x110>)
 8001f90:	edd3 7a00 	vldr	s15, [r3]
 8001f94:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001f98:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001f9c:	4b2d      	ldr	r3, [pc, #180]	; (8002054 <pidPosition+0x10c>)
 8001f9e:	edd3 6a00 	vldr	s13, [r3]
 8001fa2:	4b30      	ldr	r3, [pc, #192]	; (8002064 <pidPosition+0x11c>)
 8001fa4:	edd3 7a00 	vldr	s15, [r3]
 8001fa8:	ee76 6ae7 	vsub.f32	s13, s13, s15
 8001fac:	4b2e      	ldr	r3, [pc, #184]	; (8002068 <pidPosition+0x120>)
 8001fae:	edd3 7a00 	vldr	s15, [r3]
 8001fb2:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001fb6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fba:	4b2c      	ldr	r3, [pc, #176]	; (800206c <pidPosition+0x124>)
 8001fbc:	edc3 7a00 	vstr	s15, [r3]
	derivativeP = errorP;
 8001fc0:	4b24      	ldr	r3, [pc, #144]	; (8002054 <pidPosition+0x10c>)
 8001fc2:	681b      	ldr	r3, [r3, #0]
 8001fc4:	4a27      	ldr	r2, [pc, #156]	; (8002064 <pidPosition+0x11c>)
 8001fc6:	6013      	str	r3, [r2, #0]
	if (velocity > vMax){
 8001fc8:	4b28      	ldr	r3, [pc, #160]	; (800206c <pidPosition+0x124>)
 8001fca:	ed93 7a00 	vldr	s14, [r3]
 8001fce:	4b28      	ldr	r3, [pc, #160]	; (8002070 <pidPosition+0x128>)
 8001fd0:	edd3 7a00 	vldr	s15, [r3]
 8001fd4:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001fd8:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001fdc:	dd04      	ble.n	8001fe8 <pidPosition+0xa0>
		velocity = vMax;
 8001fde:	4b24      	ldr	r3, [pc, #144]	; (8002070 <pidPosition+0x128>)
 8001fe0:	681b      	ldr	r3, [r3, #0]
 8001fe2:	4a22      	ldr	r2, [pc, #136]	; (800206c <pidPosition+0x124>)
 8001fe4:	6013      	str	r3, [r2, #0]
 8001fe6:	e014      	b.n	8002012 <pidPosition+0xca>
	}
	else if (velocity < -vMax){
 8001fe8:	4b21      	ldr	r3, [pc, #132]	; (8002070 <pidPosition+0x128>)
 8001fea:	edd3 7a00 	vldr	s15, [r3]
 8001fee:	eeb1 7a67 	vneg.f32	s14, s15
 8001ff2:	4b1e      	ldr	r3, [pc, #120]	; (800206c <pidPosition+0x124>)
 8001ff4:	edd3 7a00 	vldr	s15, [r3]
 8001ff8:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001ffc:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002000:	dd07      	ble.n	8002012 <pidPosition+0xca>
		velocity = -vMax;
 8002002:	4b1b      	ldr	r3, [pc, #108]	; (8002070 <pidPosition+0x128>)
 8002004:	edd3 7a00 	vldr	s15, [r3]
 8002008:	eef1 7a67 	vneg.f32	s15, s15
 800200c:	4b17      	ldr	r3, [pc, #92]	; (800206c <pidPosition+0x124>)
 800200e:	edc3 7a00 	vstr	s15, [r3]
	}

	if (start == 0){
 8002012:	4b18      	ldr	r3, [pc, #96]	; (8002074 <pidPosition+0x12c>)
 8002014:	781b      	ldrb	r3, [r3, #0]
 8002016:	f083 0301 	eor.w	r3, r3, #1
 800201a:	b2db      	uxtb	r3, r3
 800201c:	2b00      	cmp	r3, #0
 800201e:	d00f      	beq.n	8002040 <pidPosition+0xf8>
		velocity = 0;
 8002020:	4b12      	ldr	r3, [pc, #72]	; (800206c <pidPosition+0x124>)
 8002022:	f04f 0200 	mov.w	r2, #0
 8002026:	601a      	str	r2, [r3, #0]
		errorP = 0;
 8002028:	4b0a      	ldr	r3, [pc, #40]	; (8002054 <pidPosition+0x10c>)
 800202a:	f04f 0200 	mov.w	r2, #0
 800202e:	601a      	str	r2, [r3, #0]
		integralP = 0;
 8002030:	4b09      	ldr	r3, [pc, #36]	; (8002058 <pidPosition+0x110>)
 8002032:	f04f 0200 	mov.w	r2, #0
 8002036:	601a      	str	r2, [r3, #0]
		derivativeP = 0;
 8002038:	4b0a      	ldr	r3, [pc, #40]	; (8002064 <pidPosition+0x11c>)
 800203a:	f04f 0200 	mov.w	r2, #0
 800203e:	601a      	str	r2, [r3, #0]
	}
}
 8002040:	bf00      	nop
 8002042:	46bd      	mov	sp, r7
 8002044:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002048:	4770      	bx	lr
 800204a:	bf00      	nop
 800204c:	200000f8 	.word	0x200000f8
 8002050:	20000110 	.word	0x20000110
 8002054:	20000160 	.word	0x20000160
 8002058:	20000164 	.word	0x20000164
 800205c:	2000001c 	.word	0x2000001c
 8002060:	20000020 	.word	0x20000020
 8002064:	20000168 	.word	0x20000168
 8002068:	2000012c 	.word	0x2000012c
 800206c:	200000f4 	.word	0x200000f4
 8002070:	20000010 	.word	0x20000010
 8002074:	2000011e 	.word	0x2000011e

08002078 <piVelocity>:

void piVelocity(){
 8002078:	b580      	push	{r7, lr}
 800207a:	af00      	add	r7, sp, #0
	static float error = 0;
	static float integral = 0;
	static float derivative = 0;
	if (velocity == 0){
 800207c:	4b58      	ldr	r3, [pc, #352]	; (80021e0 <piVelocity+0x168>)
 800207e:	edd3 7a00 	vldr	s15, [r3]
 8002082:	eef5 7a40 	vcmp.f32	s15, #0.0
 8002086:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800208a:	d10f      	bne.n	80020ac <piVelocity+0x34>
			PWMOut = 0;
 800208c:	4b55      	ldr	r3, [pc, #340]	; (80021e4 <piVelocity+0x16c>)
 800208e:	2200      	movs	r2, #0
 8002090:	601a      	str	r2, [r3, #0]
			error = 0;
 8002092:	4b55      	ldr	r3, [pc, #340]	; (80021e8 <piVelocity+0x170>)
 8002094:	f04f 0200 	mov.w	r2, #0
 8002098:	601a      	str	r2, [r3, #0]
			integral = 0;
 800209a:	4b54      	ldr	r3, [pc, #336]	; (80021ec <piVelocity+0x174>)
 800209c:	f04f 0200 	mov.w	r2, #0
 80020a0:	601a      	str	r2, [r3, #0]
			derivative = 0;
 80020a2:	4b53      	ldr	r3, [pc, #332]	; (80021f0 <piVelocity+0x178>)
 80020a4:	f04f 0200 	mov.w	r2, #0
 80020a8:	601a      	str	r2, [r3, #0]
 80020aa:	e057      	b.n	800215c <piVelocity+0xe4>
		}
	else{

		error = abs(velocity) - abs(EncoderVel);
 80020ac:	4b4c      	ldr	r3, [pc, #304]	; (80021e0 <piVelocity+0x168>)
 80020ae:	edd3 7a00 	vldr	s15, [r3]
 80020b2:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020b6:	ee17 3a90 	vmov	r3, s15
 80020ba:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80020be:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80020c2:	4b4c      	ldr	r3, [pc, #304]	; (80021f4 <piVelocity+0x17c>)
 80020c4:	edd3 7a00 	vldr	s15, [r3]
 80020c8:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80020cc:	ee17 3a90 	vmov	r3, s15
 80020d0:	2b00      	cmp	r3, #0
 80020d2:	bfb8      	it	lt
 80020d4:	425b      	neglt	r3, r3
 80020d6:	1ad3      	subs	r3, r2, r3
 80020d8:	ee07 3a90 	vmov	s15, r3
 80020dc:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80020e0:	4b41      	ldr	r3, [pc, #260]	; (80021e8 <piVelocity+0x170>)
 80020e2:	edc3 7a00 	vstr	s15, [r3]
		integral = integral+error;
 80020e6:	4b41      	ldr	r3, [pc, #260]	; (80021ec <piVelocity+0x174>)
 80020e8:	ed93 7a00 	vldr	s14, [r3]
 80020ec:	4b3e      	ldr	r3, [pc, #248]	; (80021e8 <piVelocity+0x170>)
 80020ee:	edd3 7a00 	vldr	s15, [r3]
 80020f2:	ee77 7a27 	vadd.f32	s15, s14, s15
 80020f6:	4b3d      	ldr	r3, [pc, #244]	; (80021ec <piVelocity+0x174>)
 80020f8:	edc3 7a00 	vstr	s15, [r3]
		PWMOut = K + Kp*error + Ki*integral +Kd*(error-derivative);
 80020fc:	4b3e      	ldr	r3, [pc, #248]	; (80021f8 <piVelocity+0x180>)
 80020fe:	ed93 7a00 	vldr	s14, [r3]
 8002102:	4b39      	ldr	r3, [pc, #228]	; (80021e8 <piVelocity+0x170>)
 8002104:	edd3 7a00 	vldr	s15, [r3]
 8002108:	ee27 7a27 	vmul.f32	s14, s14, s15
 800210c:	4b3b      	ldr	r3, [pc, #236]	; (80021fc <piVelocity+0x184>)
 800210e:	edd3 7a00 	vldr	s15, [r3]
 8002112:	ee37 7a27 	vadd.f32	s14, s14, s15
 8002116:	4b3a      	ldr	r3, [pc, #232]	; (8002200 <piVelocity+0x188>)
 8002118:	edd3 6a00 	vldr	s13, [r3]
 800211c:	4b33      	ldr	r3, [pc, #204]	; (80021ec <piVelocity+0x174>)
 800211e:	edd3 7a00 	vldr	s15, [r3]
 8002122:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002126:	ee37 7a27 	vadd.f32	s14, s14, s15
 800212a:	4b2f      	ldr	r3, [pc, #188]	; (80021e8 <piVelocity+0x170>)
 800212c:	edd3 6a00 	vldr	s13, [r3]
 8002130:	4b2f      	ldr	r3, [pc, #188]	; (80021f0 <piVelocity+0x178>)
 8002132:	edd3 7a00 	vldr	s15, [r3]
 8002136:	ee76 6ae7 	vsub.f32	s13, s13, s15
 800213a:	4b32      	ldr	r3, [pc, #200]	; (8002204 <piVelocity+0x18c>)
 800213c:	edd3 7a00 	vldr	s15, [r3]
 8002140:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8002144:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002148:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800214c:	ee17 2a90 	vmov	r2, s15
 8002150:	4b24      	ldr	r3, [pc, #144]	; (80021e4 <piVelocity+0x16c>)
 8002152:	601a      	str	r2, [r3, #0]
		derivative = error;
 8002154:	4b24      	ldr	r3, [pc, #144]	; (80021e8 <piVelocity+0x170>)
 8002156:	681b      	ldr	r3, [r3, #0]
 8002158:	4a25      	ldr	r2, [pc, #148]	; (80021f0 <piVelocity+0x178>)
 800215a:	6013      	str	r3, [r2, #0]
	}
	if (abs(PWMOut) > 10000){
 800215c:	4b21      	ldr	r3, [pc, #132]	; (80021e4 <piVelocity+0x16c>)
 800215e:	681b      	ldr	r3, [r3, #0]
 8002160:	2b00      	cmp	r3, #0
 8002162:	bfb8      	it	lt
 8002164:	425b      	neglt	r3, r3
 8002166:	f242 7210 	movw	r2, #10000	; 0x2710
 800216a:	4293      	cmp	r3, r2
 800216c:	dd03      	ble.n	8002176 <piVelocity+0xfe>
		PWMOut = 10000;
 800216e:	4b1d      	ldr	r3, [pc, #116]	; (80021e4 <piVelocity+0x16c>)
 8002170:	f242 7210 	movw	r2, #10000	; 0x2710
 8002174:	601a      	str	r2, [r3, #0]
	}
	if(velocity < 0){
 8002176:	4b1a      	ldr	r3, [pc, #104]	; (80021e0 <piVelocity+0x168>)
 8002178:	edd3 7a00 	vldr	s15, [r3]
 800217c:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8002180:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8002184:	d50a      	bpl.n	800219c <piVelocity+0x124>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, SET);
 8002186:	2201      	movs	r2, #1
 8002188:	2110      	movs	r1, #16
 800218a:	481f      	ldr	r0, [pc, #124]	; (8002208 <piVelocity+0x190>)
 800218c:	f001 febe 	bl	8003f0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, RESET);
 8002190:	2200      	movs	r2, #0
 8002192:	2120      	movs	r1, #32
 8002194:	481c      	ldr	r0, [pc, #112]	; (8002208 <piVelocity+0x190>)
 8002196:	f001 feb9 	bl	8003f0c <HAL_GPIO_WritePin>
 800219a:	e011      	b.n	80021c0 <piVelocity+0x148>
	}
	else if (velocity > 0){
 800219c:	4b10      	ldr	r3, [pc, #64]	; (80021e0 <piVelocity+0x168>)
 800219e:	edd3 7a00 	vldr	s15, [r3]
 80021a2:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80021a6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80021aa:	dd09      	ble.n	80021c0 <piVelocity+0x148>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_5, SET);
 80021ac:	2201      	movs	r2, #1
 80021ae:	2120      	movs	r1, #32
 80021b0:	4815      	ldr	r0, [pc, #84]	; (8002208 <piVelocity+0x190>)
 80021b2:	f001 feab 	bl	8003f0c <HAL_GPIO_WritePin>
		HAL_GPIO_WritePin(GPIOB, GPIO_PIN_4, RESET);
 80021b6:	2200      	movs	r2, #0
 80021b8:	2110      	movs	r1, #16
 80021ba:	4813      	ldr	r0, [pc, #76]	; (8002208 <piVelocity+0x190>)
 80021bc:	f001 fea6 	bl	8003f0c <HAL_GPIO_WritePin>
	}
	htim3.Instance->CCR1 = abs(PWMOut);
 80021c0:	4b08      	ldr	r3, [pc, #32]	; (80021e4 <piVelocity+0x16c>)
 80021c2:	681b      	ldr	r3, [r3, #0]
 80021c4:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 80021c8:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 80021cc:	4b0f      	ldr	r3, [pc, #60]	; (800220c <piVelocity+0x194>)
 80021ce:	681b      	ldr	r3, [r3, #0]
 80021d0:	635a      	str	r2, [r3, #52]	; 0x34
	state[1] = state[0];
 80021d2:	4b0f      	ldr	r3, [pc, #60]	; (8002210 <piVelocity+0x198>)
 80021d4:	781a      	ldrb	r2, [r3, #0]
 80021d6:	4b0e      	ldr	r3, [pc, #56]	; (8002210 <piVelocity+0x198>)
 80021d8:	705a      	strb	r2, [r3, #1]
}
 80021da:	bf00      	nop
 80021dc:	bd80      	pop	{r7, pc}
 80021de:	bf00      	nop
 80021e0:	200000f4 	.word	0x200000f4
 80021e4:	20000000 	.word	0x20000000
 80021e8:	2000016c 	.word	0x2000016c
 80021ec:	20000170 	.word	0x20000170
 80021f0:	20000174 	.word	0x20000174
 80021f4:	200000ec 	.word	0x200000ec
 80021f8:	20000014 	.word	0x20000014
 80021fc:	20000024 	.word	0x20000024
 8002200:	20000018 	.word	0x20000018
 8002204:	20000128 	.word	0x20000128
 8002208:	40020400 	.word	0x40020400
 800220c:	2000026c 	.word	0x2000026c
 8002210:	2000011c 	.word	0x2000011c

08002214 <gotoSethome>:
void gotoSethome(){
 8002214:	b580      	push	{r7, lr}
 8002216:	af00      	add	r7, sp, #0
	if (SetHome == 1){
 8002218:	4b07      	ldr	r3, [pc, #28]	; (8002238 <gotoSethome+0x24>)
 800221a:	781b      	ldrb	r3, [r3, #0]
 800221c:	2b00      	cmp	r3, #0
 800221e:	d008      	beq.n	8002232 <gotoSethome+0x1e>
		velocity = 2;
 8002220:	4b06      	ldr	r3, [pc, #24]	; (800223c <gotoSethome+0x28>)
 8002222:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 8002226:	601a      	str	r2, [r3, #0]
		piVelocity();
 8002228:	f7ff ff26 	bl	8002078 <piVelocity>
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 800222c:	2017      	movs	r0, #23
 800222e:	f001 f8b0 	bl	8003392 <HAL_NVIC_EnableIRQ>
	}
}
 8002232:	bf00      	nop
 8002234:	bd80      	pop	{r7, pc}
 8002236:	bf00      	nop
 8002238:	20000104 	.word	0x20000104
 800223c:	200000f4 	.word	0x200000f4

08002240 <kalman>:
void kalman(){
 8002240:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8002244:	af00      	add	r7, sp, #0
	static float P21predictPRE = 0;
	static float P22predictPRE = 0;
	static float errorVel = 0;
	static float delt = 0;

	delt = (float) dt/1000000;
 8002246:	4bda      	ldr	r3, [pc, #872]	; (80025b0 <kalman+0x370>)
 8002248:	881b      	ldrh	r3, [r3, #0]
 800224a:	ee07 3a90 	vmov	s15, r3
 800224e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8002252:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80025b4 <kalman+0x374>
 8002256:	eec7 7a26 	vdiv.f32	s15, s14, s13
 800225a:	4bd7      	ldr	r3, [pc, #860]	; (80025b8 <kalman+0x378>)
 800225c:	edc3 7a00 	vstr	s15, [r3]
	omegaPredict =  (float) omegaPredictPre;
 8002260:	4bd6      	ldr	r3, [pc, #856]	; (80025bc <kalman+0x37c>)
 8002262:	681b      	ldr	r3, [r3, #0]
 8002264:	4ad6      	ldr	r2, [pc, #856]	; (80025c0 <kalman+0x380>)
 8002266:	6013      	str	r3, [r2, #0]
	errorVel = (float) EncoderVelocity_Update() - omegaPredict;
 8002268:	f7ff fafa 	bl	8001860 <EncoderVelocity_Update>
 800226c:	eeb0 7a40 	vmov.f32	s14, s0
 8002270:	4bd3      	ldr	r3, [pc, #844]	; (80025c0 <kalman+0x380>)
 8002272:	edd3 7a00 	vldr	s15, [r3]
 8002276:	ee77 7a67 	vsub.f32	s15, s14, s15
 800227a:	4bd2      	ldr	r3, [pc, #840]	; (80025c4 <kalman+0x384>)
 800227c:	edc3 7a00 	vstr	s15, [r3]

	P11predict = (float) P11predictPRE+delt*P21predictPRE+(pow(Gl,2)*pow(delt,4))/4+(pow(delt,2)*(P12predictPRE+delt*P22predictPRE))/delt;
 8002280:	4bcd      	ldr	r3, [pc, #820]	; (80025b8 <kalman+0x378>)
 8002282:	ed93 7a00 	vldr	s14, [r3]
 8002286:	4bd0      	ldr	r3, [pc, #832]	; (80025c8 <kalman+0x388>)
 8002288:	edd3 7a00 	vldr	s15, [r3]
 800228c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8002290:	4bce      	ldr	r3, [pc, #824]	; (80025cc <kalman+0x38c>)
 8002292:	edd3 7a00 	vldr	s15, [r3]
 8002296:	ee77 7a27 	vadd.f32	s15, s14, s15
 800229a:	ee17 0a90 	vmov	r0, s15
 800229e:	f7fe f8ff 	bl	80004a0 <__aeabi_f2d>
 80022a2:	4604      	mov	r4, r0
 80022a4:	460d      	mov	r5, r1
 80022a6:	4bca      	ldr	r3, [pc, #808]	; (80025d0 <kalman+0x390>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f8f8 	bl	80004a0 <__aeabi_f2d>
 80022b0:	4602      	mov	r2, r0
 80022b2:	460b      	mov	r3, r1
 80022b4:	ed9f 1bba 	vldr	d1, [pc, #744]	; 80025a0 <kalman+0x360>
 80022b8:	ec43 2b10 	vmov	d0, r2, r3
 80022bc:	f006 fab6 	bl	800882c <pow>
 80022c0:	ec59 8b10 	vmov	r8, r9, d0
 80022c4:	4bbc      	ldr	r3, [pc, #752]	; (80025b8 <kalman+0x378>)
 80022c6:	681b      	ldr	r3, [r3, #0]
 80022c8:	4618      	mov	r0, r3
 80022ca:	f7fe f8e9 	bl	80004a0 <__aeabi_f2d>
 80022ce:	4602      	mov	r2, r0
 80022d0:	460b      	mov	r3, r1
 80022d2:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 80025a8 <kalman+0x368>
 80022d6:	ec43 2b10 	vmov	d0, r2, r3
 80022da:	f006 faa7 	bl	800882c <pow>
 80022de:	ec53 2b10 	vmov	r2, r3, d0
 80022e2:	4640      	mov	r0, r8
 80022e4:	4649      	mov	r1, r9
 80022e6:	f7fe f933 	bl	8000550 <__aeabi_dmul>
 80022ea:	4602      	mov	r2, r0
 80022ec:	460b      	mov	r3, r1
 80022ee:	4610      	mov	r0, r2
 80022f0:	4619      	mov	r1, r3
 80022f2:	f04f 0200 	mov.w	r2, #0
 80022f6:	4bb7      	ldr	r3, [pc, #732]	; (80025d4 <kalman+0x394>)
 80022f8:	f7fe fa54 	bl	80007a4 <__aeabi_ddiv>
 80022fc:	4602      	mov	r2, r0
 80022fe:	460b      	mov	r3, r1
 8002300:	4620      	mov	r0, r4
 8002302:	4629      	mov	r1, r5
 8002304:	f7fd ff6e 	bl	80001e4 <__adddf3>
 8002308:	4602      	mov	r2, r0
 800230a:	460b      	mov	r3, r1
 800230c:	4614      	mov	r4, r2
 800230e:	461d      	mov	r5, r3
 8002310:	4ba9      	ldr	r3, [pc, #676]	; (80025b8 <kalman+0x378>)
 8002312:	681b      	ldr	r3, [r3, #0]
 8002314:	4618      	mov	r0, r3
 8002316:	f7fe f8c3 	bl	80004a0 <__aeabi_f2d>
 800231a:	4602      	mov	r2, r0
 800231c:	460b      	mov	r3, r1
 800231e:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 80025a0 <kalman+0x360>
 8002322:	ec43 2b10 	vmov	d0, r2, r3
 8002326:	f006 fa81 	bl	800882c <pow>
 800232a:	ec59 8b10 	vmov	r8, r9, d0
 800232e:	4ba2      	ldr	r3, [pc, #648]	; (80025b8 <kalman+0x378>)
 8002330:	ed93 7a00 	vldr	s14, [r3]
 8002334:	4ba8      	ldr	r3, [pc, #672]	; (80025d8 <kalman+0x398>)
 8002336:	edd3 7a00 	vldr	s15, [r3]
 800233a:	ee27 7a27 	vmul.f32	s14, s14, s15
 800233e:	4ba7      	ldr	r3, [pc, #668]	; (80025dc <kalman+0x39c>)
 8002340:	edd3 7a00 	vldr	s15, [r3]
 8002344:	ee77 7a27 	vadd.f32	s15, s14, s15
 8002348:	ee17 0a90 	vmov	r0, s15
 800234c:	f7fe f8a8 	bl	80004a0 <__aeabi_f2d>
 8002350:	4602      	mov	r2, r0
 8002352:	460b      	mov	r3, r1
 8002354:	4640      	mov	r0, r8
 8002356:	4649      	mov	r1, r9
 8002358:	f7fe f8fa 	bl	8000550 <__aeabi_dmul>
 800235c:	4602      	mov	r2, r0
 800235e:	460b      	mov	r3, r1
 8002360:	4690      	mov	r8, r2
 8002362:	4699      	mov	r9, r3
 8002364:	4b94      	ldr	r3, [pc, #592]	; (80025b8 <kalman+0x378>)
 8002366:	681b      	ldr	r3, [r3, #0]
 8002368:	4618      	mov	r0, r3
 800236a:	f7fe f899 	bl	80004a0 <__aeabi_f2d>
 800236e:	4602      	mov	r2, r0
 8002370:	460b      	mov	r3, r1
 8002372:	4640      	mov	r0, r8
 8002374:	4649      	mov	r1, r9
 8002376:	f7fe fa15 	bl	80007a4 <__aeabi_ddiv>
 800237a:	4602      	mov	r2, r0
 800237c:	460b      	mov	r3, r1
 800237e:	4620      	mov	r0, r4
 8002380:	4629      	mov	r1, r5
 8002382:	f7fd ff2f 	bl	80001e4 <__adddf3>
 8002386:	4602      	mov	r2, r0
 8002388:	460b      	mov	r3, r1
 800238a:	4610      	mov	r0, r2
 800238c:	4619      	mov	r1, r3
 800238e:	f7fe fb8f 	bl	8000ab0 <__aeabi_d2f>
 8002392:	4603      	mov	r3, r0
 8002394:	4a92      	ldr	r2, [pc, #584]	; (80025e0 <kalman+0x3a0>)
 8002396:	6013      	str	r3, [r2, #0]
	P12predict = (float) P12predictPRE+delt*P22predictPRE+(pow(Gl,2)*delt*pow(delt,2))/2;
 8002398:	4b87      	ldr	r3, [pc, #540]	; (80025b8 <kalman+0x378>)
 800239a:	ed93 7a00 	vldr	s14, [r3]
 800239e:	4b8e      	ldr	r3, [pc, #568]	; (80025d8 <kalman+0x398>)
 80023a0:	edd3 7a00 	vldr	s15, [r3]
 80023a4:	ee27 7a27 	vmul.f32	s14, s14, s15
 80023a8:	4b8c      	ldr	r3, [pc, #560]	; (80025dc <kalman+0x39c>)
 80023aa:	edd3 7a00 	vldr	s15, [r3]
 80023ae:	ee77 7a27 	vadd.f32	s15, s14, s15
 80023b2:	ee17 0a90 	vmov	r0, s15
 80023b6:	f7fe f873 	bl	80004a0 <__aeabi_f2d>
 80023ba:	4604      	mov	r4, r0
 80023bc:	460d      	mov	r5, r1
 80023be:	4b84      	ldr	r3, [pc, #528]	; (80025d0 <kalman+0x390>)
 80023c0:	681b      	ldr	r3, [r3, #0]
 80023c2:	4618      	mov	r0, r3
 80023c4:	f7fe f86c 	bl	80004a0 <__aeabi_f2d>
 80023c8:	4602      	mov	r2, r0
 80023ca:	460b      	mov	r3, r1
 80023cc:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80025a0 <kalman+0x360>
 80023d0:	ec43 2b10 	vmov	d0, r2, r3
 80023d4:	f006 fa2a 	bl	800882c <pow>
 80023d8:	ec59 8b10 	vmov	r8, r9, d0
 80023dc:	4b76      	ldr	r3, [pc, #472]	; (80025b8 <kalman+0x378>)
 80023de:	681b      	ldr	r3, [r3, #0]
 80023e0:	4618      	mov	r0, r3
 80023e2:	f7fe f85d 	bl	80004a0 <__aeabi_f2d>
 80023e6:	4602      	mov	r2, r0
 80023e8:	460b      	mov	r3, r1
 80023ea:	4640      	mov	r0, r8
 80023ec:	4649      	mov	r1, r9
 80023ee:	f7fe f8af 	bl	8000550 <__aeabi_dmul>
 80023f2:	4602      	mov	r2, r0
 80023f4:	460b      	mov	r3, r1
 80023f6:	4690      	mov	r8, r2
 80023f8:	4699      	mov	r9, r3
 80023fa:	4b6f      	ldr	r3, [pc, #444]	; (80025b8 <kalman+0x378>)
 80023fc:	681b      	ldr	r3, [r3, #0]
 80023fe:	4618      	mov	r0, r3
 8002400:	f7fe f84e 	bl	80004a0 <__aeabi_f2d>
 8002404:	4602      	mov	r2, r0
 8002406:	460b      	mov	r3, r1
 8002408:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80025a0 <kalman+0x360>
 800240c:	ec43 2b10 	vmov	d0, r2, r3
 8002410:	f006 fa0c 	bl	800882c <pow>
 8002414:	ec53 2b10 	vmov	r2, r3, d0
 8002418:	4640      	mov	r0, r8
 800241a:	4649      	mov	r1, r9
 800241c:	f7fe f898 	bl	8000550 <__aeabi_dmul>
 8002420:	4602      	mov	r2, r0
 8002422:	460b      	mov	r3, r1
 8002424:	4610      	mov	r0, r2
 8002426:	4619      	mov	r1, r3
 8002428:	f04f 0200 	mov.w	r2, #0
 800242c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002430:	f7fe f9b8 	bl	80007a4 <__aeabi_ddiv>
 8002434:	4602      	mov	r2, r0
 8002436:	460b      	mov	r3, r1
 8002438:	4620      	mov	r0, r4
 800243a:	4629      	mov	r1, r5
 800243c:	f7fd fed2 	bl	80001e4 <__adddf3>
 8002440:	4602      	mov	r2, r0
 8002442:	460b      	mov	r3, r1
 8002444:	4610      	mov	r0, r2
 8002446:	4619      	mov	r1, r3
 8002448:	f7fe fb32 	bl	8000ab0 <__aeabi_d2f>
 800244c:	4603      	mov	r3, r0
 800244e:	4a65      	ldr	r2, [pc, #404]	; (80025e4 <kalman+0x3a4>)
 8002450:	6013      	str	r3, [r2, #0]
	P21predict = (float) (2*delt*P21predictPRE+pow(Gl,2)*pow(delt,4)+2*P22predictPRE*pow(delt,2))/(2*delt);
 8002452:	4b59      	ldr	r3, [pc, #356]	; (80025b8 <kalman+0x378>)
 8002454:	edd3 7a00 	vldr	s15, [r3]
 8002458:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800245c:	4b5a      	ldr	r3, [pc, #360]	; (80025c8 <kalman+0x388>)
 800245e:	edd3 7a00 	vldr	s15, [r3]
 8002462:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002466:	ee17 0a90 	vmov	r0, s15
 800246a:	f7fe f819 	bl	80004a0 <__aeabi_f2d>
 800246e:	4604      	mov	r4, r0
 8002470:	460d      	mov	r5, r1
 8002472:	4b57      	ldr	r3, [pc, #348]	; (80025d0 <kalman+0x390>)
 8002474:	681b      	ldr	r3, [r3, #0]
 8002476:	4618      	mov	r0, r3
 8002478:	f7fe f812 	bl	80004a0 <__aeabi_f2d>
 800247c:	4602      	mov	r2, r0
 800247e:	460b      	mov	r3, r1
 8002480:	ed9f 1b47 	vldr	d1, [pc, #284]	; 80025a0 <kalman+0x360>
 8002484:	ec43 2b10 	vmov	d0, r2, r3
 8002488:	f006 f9d0 	bl	800882c <pow>
 800248c:	ec59 8b10 	vmov	r8, r9, d0
 8002490:	4b49      	ldr	r3, [pc, #292]	; (80025b8 <kalman+0x378>)
 8002492:	681b      	ldr	r3, [r3, #0]
 8002494:	4618      	mov	r0, r3
 8002496:	f7fe f803 	bl	80004a0 <__aeabi_f2d>
 800249a:	4602      	mov	r2, r0
 800249c:	460b      	mov	r3, r1
 800249e:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80025a8 <kalman+0x368>
 80024a2:	ec43 2b10 	vmov	d0, r2, r3
 80024a6:	f006 f9c1 	bl	800882c <pow>
 80024aa:	ec53 2b10 	vmov	r2, r3, d0
 80024ae:	4640      	mov	r0, r8
 80024b0:	4649      	mov	r1, r9
 80024b2:	f7fe f84d 	bl	8000550 <__aeabi_dmul>
 80024b6:	4602      	mov	r2, r0
 80024b8:	460b      	mov	r3, r1
 80024ba:	4620      	mov	r0, r4
 80024bc:	4629      	mov	r1, r5
 80024be:	f7fd fe91 	bl	80001e4 <__adddf3>
 80024c2:	4602      	mov	r2, r0
 80024c4:	460b      	mov	r3, r1
 80024c6:	4690      	mov	r8, r2
 80024c8:	4699      	mov	r9, r3
 80024ca:	4b43      	ldr	r3, [pc, #268]	; (80025d8 <kalman+0x398>)
 80024cc:	edd3 7a00 	vldr	s15, [r3]
 80024d0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80024d4:	ee17 0a90 	vmov	r0, s15
 80024d8:	f7fd ffe2 	bl	80004a0 <__aeabi_f2d>
 80024dc:	4604      	mov	r4, r0
 80024de:	460d      	mov	r5, r1
 80024e0:	4b35      	ldr	r3, [pc, #212]	; (80025b8 <kalman+0x378>)
 80024e2:	681b      	ldr	r3, [r3, #0]
 80024e4:	4618      	mov	r0, r3
 80024e6:	f7fd ffdb 	bl	80004a0 <__aeabi_f2d>
 80024ea:	4602      	mov	r2, r0
 80024ec:	460b      	mov	r3, r1
 80024ee:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80025a0 <kalman+0x360>
 80024f2:	ec43 2b10 	vmov	d0, r2, r3
 80024f6:	f006 f999 	bl	800882c <pow>
 80024fa:	ec53 2b10 	vmov	r2, r3, d0
 80024fe:	4620      	mov	r0, r4
 8002500:	4629      	mov	r1, r5
 8002502:	f7fe f825 	bl	8000550 <__aeabi_dmul>
 8002506:	4602      	mov	r2, r0
 8002508:	460b      	mov	r3, r1
 800250a:	4640      	mov	r0, r8
 800250c:	4649      	mov	r1, r9
 800250e:	f7fd fe69 	bl	80001e4 <__adddf3>
 8002512:	4602      	mov	r2, r0
 8002514:	460b      	mov	r3, r1
 8002516:	4610      	mov	r0, r2
 8002518:	4619      	mov	r1, r3
 800251a:	f7fe fac9 	bl	8000ab0 <__aeabi_d2f>
 800251e:	ee06 0a90 	vmov	s13, r0
 8002522:	4b25      	ldr	r3, [pc, #148]	; (80025b8 <kalman+0x378>)
 8002524:	edd3 7a00 	vldr	s15, [r3]
 8002528:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800252c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002530:	4b2d      	ldr	r3, [pc, #180]	; (80025e8 <kalman+0x3a8>)
 8002532:	edc3 7a00 	vstr	s15, [r3]
	P22predict = (float) pow(Gl,2)*pow(delt,2) +P22predictPRE;
 8002536:	4b26      	ldr	r3, [pc, #152]	; (80025d0 <kalman+0x390>)
 8002538:	681b      	ldr	r3, [r3, #0]
 800253a:	4618      	mov	r0, r3
 800253c:	f7fd ffb0 	bl	80004a0 <__aeabi_f2d>
 8002540:	4602      	mov	r2, r0
 8002542:	460b      	mov	r3, r1
 8002544:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80025a0 <kalman+0x360>
 8002548:	ec43 2b10 	vmov	d0, r2, r3
 800254c:	f006 f96e 	bl	800882c <pow>
 8002550:	ec53 2b10 	vmov	r2, r3, d0
 8002554:	4610      	mov	r0, r2
 8002556:	4619      	mov	r1, r3
 8002558:	f7fe faaa 	bl	8000ab0 <__aeabi_d2f>
 800255c:	4603      	mov	r3, r0
 800255e:	4618      	mov	r0, r3
 8002560:	f7fd ff9e 	bl	80004a0 <__aeabi_f2d>
 8002564:	4604      	mov	r4, r0
 8002566:	460d      	mov	r5, r1
 8002568:	4b13      	ldr	r3, [pc, #76]	; (80025b8 <kalman+0x378>)
 800256a:	681b      	ldr	r3, [r3, #0]
 800256c:	4618      	mov	r0, r3
 800256e:	f7fd ff97 	bl	80004a0 <__aeabi_f2d>
 8002572:	4602      	mov	r2, r0
 8002574:	460b      	mov	r3, r1
 8002576:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80025a0 <kalman+0x360>
 800257a:	ec43 2b10 	vmov	d0, r2, r3
 800257e:	f006 f955 	bl	800882c <pow>
 8002582:	ec53 2b10 	vmov	r2, r3, d0
 8002586:	4620      	mov	r0, r4
 8002588:	4629      	mov	r1, r5
 800258a:	f7fd ffe1 	bl	8000550 <__aeabi_dmul>
 800258e:	4602      	mov	r2, r0
 8002590:	460b      	mov	r3, r1
 8002592:	4614      	mov	r4, r2
 8002594:	461d      	mov	r5, r3
 8002596:	4b10      	ldr	r3, [pc, #64]	; (80025d8 <kalman+0x398>)
 8002598:	681b      	ldr	r3, [r3, #0]
 800259a:	4618      	mov	r0, r3
 800259c:	e026      	b.n	80025ec <kalman+0x3ac>
 800259e:	bf00      	nop
 80025a0:	00000000 	.word	0x00000000
 80025a4:	40000000 	.word	0x40000000
 80025a8:	00000000 	.word	0x00000000
 80025ac:	40100000 	.word	0x40100000
 80025b0:	2000000c 	.word	0x2000000c
 80025b4:	49742400 	.word	0x49742400
 80025b8:	20000178 	.word	0x20000178
 80025bc:	2000017c 	.word	0x2000017c
 80025c0:	20000180 	.word	0x20000180
 80025c4:	20000184 	.word	0x20000184
 80025c8:	20000188 	.word	0x20000188
 80025cc:	2000018c 	.word	0x2000018c
 80025d0:	2000002c 	.word	0x2000002c
 80025d4:	40100000 	.word	0x40100000
 80025d8:	20000190 	.word	0x20000190
 80025dc:	20000194 	.word	0x20000194
 80025e0:	20000198 	.word	0x20000198
 80025e4:	2000019c 	.word	0x2000019c
 80025e8:	200001a0 	.word	0x200001a0
 80025ec:	f7fd ff58 	bl	80004a0 <__aeabi_f2d>
 80025f0:	4602      	mov	r2, r0
 80025f2:	460b      	mov	r3, r1
 80025f4:	4620      	mov	r0, r4
 80025f6:	4629      	mov	r1, r5
 80025f8:	f7fd fdf4 	bl	80001e4 <__adddf3>
 80025fc:	4602      	mov	r2, r0
 80025fe:	460b      	mov	r3, r1
 8002600:	4610      	mov	r0, r2
 8002602:	4619      	mov	r1, r3
 8002604:	f7fe fa54 	bl	8000ab0 <__aeabi_d2f>
 8002608:	4603      	mov	r3, r0
 800260a:	4acb      	ldr	r2, [pc, #812]	; (8002938 <kalman+0x6f8>)
 800260c:	6013      	str	r3, [r2, #0]

	omega = (float) omegaPredict + (P22predict*errorVel)/(pow(R,2)+P22predict);
 800260e:	4bcb      	ldr	r3, [pc, #812]	; (800293c <kalman+0x6fc>)
 8002610:	681b      	ldr	r3, [r3, #0]
 8002612:	4618      	mov	r0, r3
 8002614:	f7fd ff44 	bl	80004a0 <__aeabi_f2d>
 8002618:	4604      	mov	r4, r0
 800261a:	460d      	mov	r5, r1
 800261c:	4bc6      	ldr	r3, [pc, #792]	; (8002938 <kalman+0x6f8>)
 800261e:	ed93 7a00 	vldr	s14, [r3]
 8002622:	4bc7      	ldr	r3, [pc, #796]	; (8002940 <kalman+0x700>)
 8002624:	edd3 7a00 	vldr	s15, [r3]
 8002628:	ee67 7a27 	vmul.f32	s15, s14, s15
 800262c:	ee17 0a90 	vmov	r0, s15
 8002630:	f7fd ff36 	bl	80004a0 <__aeabi_f2d>
 8002634:	4680      	mov	r8, r0
 8002636:	4689      	mov	r9, r1
 8002638:	4bc2      	ldr	r3, [pc, #776]	; (8002944 <kalman+0x704>)
 800263a:	681b      	ldr	r3, [r3, #0]
 800263c:	4618      	mov	r0, r3
 800263e:	f7fd ff2f 	bl	80004a0 <__aeabi_f2d>
 8002642:	4602      	mov	r2, r0
 8002644:	460b      	mov	r3, r1
 8002646:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 8002928 <kalman+0x6e8>
 800264a:	ec43 2b10 	vmov	d0, r2, r3
 800264e:	f006 f8ed 	bl	800882c <pow>
 8002652:	ec5b ab10 	vmov	sl, fp, d0
 8002656:	4bb8      	ldr	r3, [pc, #736]	; (8002938 <kalman+0x6f8>)
 8002658:	681b      	ldr	r3, [r3, #0]
 800265a:	4618      	mov	r0, r3
 800265c:	f7fd ff20 	bl	80004a0 <__aeabi_f2d>
 8002660:	4602      	mov	r2, r0
 8002662:	460b      	mov	r3, r1
 8002664:	4650      	mov	r0, sl
 8002666:	4659      	mov	r1, fp
 8002668:	f7fd fdbc 	bl	80001e4 <__adddf3>
 800266c:	4602      	mov	r2, r0
 800266e:	460b      	mov	r3, r1
 8002670:	4640      	mov	r0, r8
 8002672:	4649      	mov	r1, r9
 8002674:	f7fe f896 	bl	80007a4 <__aeabi_ddiv>
 8002678:	4602      	mov	r2, r0
 800267a:	460b      	mov	r3, r1
 800267c:	4620      	mov	r0, r4
 800267e:	4629      	mov	r1, r5
 8002680:	f7fd fdb0 	bl	80001e4 <__adddf3>
 8002684:	4602      	mov	r2, r0
 8002686:	460b      	mov	r3, r1
 8002688:	4610      	mov	r0, r2
 800268a:	4619      	mov	r1, r3
 800268c:	f7fe fa10 	bl	8000ab0 <__aeabi_d2f>
 8002690:	4603      	mov	r3, r0
 8002692:	4aad      	ldr	r2, [pc, #692]	; (8002948 <kalman+0x708>)
 8002694:	6013      	str	r3, [r2, #0]
	P11predictPRE = (float) P11predict - (P12predict*P21predict)/(pow(R,2)+P22predict);
 8002696:	4bad      	ldr	r3, [pc, #692]	; (800294c <kalman+0x70c>)
 8002698:	681b      	ldr	r3, [r3, #0]
 800269a:	4618      	mov	r0, r3
 800269c:	f7fd ff00 	bl	80004a0 <__aeabi_f2d>
 80026a0:	4604      	mov	r4, r0
 80026a2:	460d      	mov	r5, r1
 80026a4:	4baa      	ldr	r3, [pc, #680]	; (8002950 <kalman+0x710>)
 80026a6:	ed93 7a00 	vldr	s14, [r3]
 80026aa:	4baa      	ldr	r3, [pc, #680]	; (8002954 <kalman+0x714>)
 80026ac:	edd3 7a00 	vldr	s15, [r3]
 80026b0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80026b4:	ee17 0a90 	vmov	r0, s15
 80026b8:	f7fd fef2 	bl	80004a0 <__aeabi_f2d>
 80026bc:	4680      	mov	r8, r0
 80026be:	4689      	mov	r9, r1
 80026c0:	4ba0      	ldr	r3, [pc, #640]	; (8002944 <kalman+0x704>)
 80026c2:	681b      	ldr	r3, [r3, #0]
 80026c4:	4618      	mov	r0, r3
 80026c6:	f7fd feeb 	bl	80004a0 <__aeabi_f2d>
 80026ca:	4602      	mov	r2, r0
 80026cc:	460b      	mov	r3, r1
 80026ce:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8002928 <kalman+0x6e8>
 80026d2:	ec43 2b10 	vmov	d0, r2, r3
 80026d6:	f006 f8a9 	bl	800882c <pow>
 80026da:	ec5b ab10 	vmov	sl, fp, d0
 80026de:	4b96      	ldr	r3, [pc, #600]	; (8002938 <kalman+0x6f8>)
 80026e0:	681b      	ldr	r3, [r3, #0]
 80026e2:	4618      	mov	r0, r3
 80026e4:	f7fd fedc 	bl	80004a0 <__aeabi_f2d>
 80026e8:	4602      	mov	r2, r0
 80026ea:	460b      	mov	r3, r1
 80026ec:	4650      	mov	r0, sl
 80026ee:	4659      	mov	r1, fp
 80026f0:	f7fd fd78 	bl	80001e4 <__adddf3>
 80026f4:	4602      	mov	r2, r0
 80026f6:	460b      	mov	r3, r1
 80026f8:	4640      	mov	r0, r8
 80026fa:	4649      	mov	r1, r9
 80026fc:	f7fe f852 	bl	80007a4 <__aeabi_ddiv>
 8002700:	4602      	mov	r2, r0
 8002702:	460b      	mov	r3, r1
 8002704:	4620      	mov	r0, r4
 8002706:	4629      	mov	r1, r5
 8002708:	f7fd fd6a 	bl	80001e0 <__aeabi_dsub>
 800270c:	4602      	mov	r2, r0
 800270e:	460b      	mov	r3, r1
 8002710:	4610      	mov	r0, r2
 8002712:	4619      	mov	r1, r3
 8002714:	f7fe f9cc 	bl	8000ab0 <__aeabi_d2f>
 8002718:	4603      	mov	r3, r0
 800271a:	4a8f      	ldr	r2, [pc, #572]	; (8002958 <kalman+0x718>)
 800271c:	6013      	str	r3, [r2, #0]
	P12predictPRE = (float) P12predict - (P12predict*P22predict)/(pow(R,2)+P22predict);
 800271e:	4b8c      	ldr	r3, [pc, #560]	; (8002950 <kalman+0x710>)
 8002720:	681b      	ldr	r3, [r3, #0]
 8002722:	4618      	mov	r0, r3
 8002724:	f7fd febc 	bl	80004a0 <__aeabi_f2d>
 8002728:	4604      	mov	r4, r0
 800272a:	460d      	mov	r5, r1
 800272c:	4b88      	ldr	r3, [pc, #544]	; (8002950 <kalman+0x710>)
 800272e:	ed93 7a00 	vldr	s14, [r3]
 8002732:	4b81      	ldr	r3, [pc, #516]	; (8002938 <kalman+0x6f8>)
 8002734:	edd3 7a00 	vldr	s15, [r3]
 8002738:	ee67 7a27 	vmul.f32	s15, s14, s15
 800273c:	ee17 0a90 	vmov	r0, s15
 8002740:	f7fd feae 	bl	80004a0 <__aeabi_f2d>
 8002744:	4680      	mov	r8, r0
 8002746:	4689      	mov	r9, r1
 8002748:	4b7e      	ldr	r3, [pc, #504]	; (8002944 <kalman+0x704>)
 800274a:	681b      	ldr	r3, [r3, #0]
 800274c:	4618      	mov	r0, r3
 800274e:	f7fd fea7 	bl	80004a0 <__aeabi_f2d>
 8002752:	4602      	mov	r2, r0
 8002754:	460b      	mov	r3, r1
 8002756:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002928 <kalman+0x6e8>
 800275a:	ec43 2b10 	vmov	d0, r2, r3
 800275e:	f006 f865 	bl	800882c <pow>
 8002762:	ec5b ab10 	vmov	sl, fp, d0
 8002766:	4b74      	ldr	r3, [pc, #464]	; (8002938 <kalman+0x6f8>)
 8002768:	681b      	ldr	r3, [r3, #0]
 800276a:	4618      	mov	r0, r3
 800276c:	f7fd fe98 	bl	80004a0 <__aeabi_f2d>
 8002770:	4602      	mov	r2, r0
 8002772:	460b      	mov	r3, r1
 8002774:	4650      	mov	r0, sl
 8002776:	4659      	mov	r1, fp
 8002778:	f7fd fd34 	bl	80001e4 <__adddf3>
 800277c:	4602      	mov	r2, r0
 800277e:	460b      	mov	r3, r1
 8002780:	4640      	mov	r0, r8
 8002782:	4649      	mov	r1, r9
 8002784:	f7fe f80e 	bl	80007a4 <__aeabi_ddiv>
 8002788:	4602      	mov	r2, r0
 800278a:	460b      	mov	r3, r1
 800278c:	4620      	mov	r0, r4
 800278e:	4629      	mov	r1, r5
 8002790:	f7fd fd26 	bl	80001e0 <__aeabi_dsub>
 8002794:	4602      	mov	r2, r0
 8002796:	460b      	mov	r3, r1
 8002798:	4610      	mov	r0, r2
 800279a:	4619      	mov	r1, r3
 800279c:	f7fe f988 	bl	8000ab0 <__aeabi_d2f>
 80027a0:	4603      	mov	r3, r0
 80027a2:	4a6e      	ldr	r2, [pc, #440]	; (800295c <kalman+0x71c>)
 80027a4:	6013      	str	r3, [r2, #0]
	P21predictPRE = (float) P21predict*(P22predict/(pow(R,2)+P22predict)-1);
 80027a6:	4b6b      	ldr	r3, [pc, #428]	; (8002954 <kalman+0x714>)
 80027a8:	681b      	ldr	r3, [r3, #0]
 80027aa:	4618      	mov	r0, r3
 80027ac:	f7fd fe78 	bl	80004a0 <__aeabi_f2d>
 80027b0:	4604      	mov	r4, r0
 80027b2:	460d      	mov	r5, r1
 80027b4:	4b60      	ldr	r3, [pc, #384]	; (8002938 <kalman+0x6f8>)
 80027b6:	681b      	ldr	r3, [r3, #0]
 80027b8:	4618      	mov	r0, r3
 80027ba:	f7fd fe71 	bl	80004a0 <__aeabi_f2d>
 80027be:	4680      	mov	r8, r0
 80027c0:	4689      	mov	r9, r1
 80027c2:	4b60      	ldr	r3, [pc, #384]	; (8002944 <kalman+0x704>)
 80027c4:	681b      	ldr	r3, [r3, #0]
 80027c6:	4618      	mov	r0, r3
 80027c8:	f7fd fe6a 	bl	80004a0 <__aeabi_f2d>
 80027cc:	4602      	mov	r2, r0
 80027ce:	460b      	mov	r3, r1
 80027d0:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002928 <kalman+0x6e8>
 80027d4:	ec43 2b10 	vmov	d0, r2, r3
 80027d8:	f006 f828 	bl	800882c <pow>
 80027dc:	ec5b ab10 	vmov	sl, fp, d0
 80027e0:	4b55      	ldr	r3, [pc, #340]	; (8002938 <kalman+0x6f8>)
 80027e2:	681b      	ldr	r3, [r3, #0]
 80027e4:	4618      	mov	r0, r3
 80027e6:	f7fd fe5b 	bl	80004a0 <__aeabi_f2d>
 80027ea:	4602      	mov	r2, r0
 80027ec:	460b      	mov	r3, r1
 80027ee:	4650      	mov	r0, sl
 80027f0:	4659      	mov	r1, fp
 80027f2:	f7fd fcf7 	bl	80001e4 <__adddf3>
 80027f6:	4602      	mov	r2, r0
 80027f8:	460b      	mov	r3, r1
 80027fa:	4640      	mov	r0, r8
 80027fc:	4649      	mov	r1, r9
 80027fe:	f7fd ffd1 	bl	80007a4 <__aeabi_ddiv>
 8002802:	4602      	mov	r2, r0
 8002804:	460b      	mov	r3, r1
 8002806:	4610      	mov	r0, r2
 8002808:	4619      	mov	r1, r3
 800280a:	f04f 0200 	mov.w	r2, #0
 800280e:	4b54      	ldr	r3, [pc, #336]	; (8002960 <kalman+0x720>)
 8002810:	f7fd fce6 	bl	80001e0 <__aeabi_dsub>
 8002814:	4602      	mov	r2, r0
 8002816:	460b      	mov	r3, r1
 8002818:	4620      	mov	r0, r4
 800281a:	4629      	mov	r1, r5
 800281c:	f7fd fe98 	bl	8000550 <__aeabi_dmul>
 8002820:	4602      	mov	r2, r0
 8002822:	460b      	mov	r3, r1
 8002824:	4610      	mov	r0, r2
 8002826:	4619      	mov	r1, r3
 8002828:	f7fe f942 	bl	8000ab0 <__aeabi_d2f>
 800282c:	4603      	mov	r3, r0
 800282e:	4a4d      	ldr	r2, [pc, #308]	; (8002964 <kalman+0x724>)
 8002830:	6013      	str	r3, [r2, #0]
	P22predictPRE = (float) P22predict*(P22predict/(pow(R,2)+P22predict)-1);
 8002832:	4b41      	ldr	r3, [pc, #260]	; (8002938 <kalman+0x6f8>)
 8002834:	681b      	ldr	r3, [r3, #0]
 8002836:	4618      	mov	r0, r3
 8002838:	f7fd fe32 	bl	80004a0 <__aeabi_f2d>
 800283c:	4604      	mov	r4, r0
 800283e:	460d      	mov	r5, r1
 8002840:	4b3d      	ldr	r3, [pc, #244]	; (8002938 <kalman+0x6f8>)
 8002842:	681b      	ldr	r3, [r3, #0]
 8002844:	4618      	mov	r0, r3
 8002846:	f7fd fe2b 	bl	80004a0 <__aeabi_f2d>
 800284a:	4680      	mov	r8, r0
 800284c:	4689      	mov	r9, r1
 800284e:	4b3d      	ldr	r3, [pc, #244]	; (8002944 <kalman+0x704>)
 8002850:	681b      	ldr	r3, [r3, #0]
 8002852:	4618      	mov	r0, r3
 8002854:	f7fd fe24 	bl	80004a0 <__aeabi_f2d>
 8002858:	4602      	mov	r2, r0
 800285a:	460b      	mov	r3, r1
 800285c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8002928 <kalman+0x6e8>
 8002860:	ec43 2b10 	vmov	d0, r2, r3
 8002864:	f005 ffe2 	bl	800882c <pow>
 8002868:	ec5b ab10 	vmov	sl, fp, d0
 800286c:	4b32      	ldr	r3, [pc, #200]	; (8002938 <kalman+0x6f8>)
 800286e:	681b      	ldr	r3, [r3, #0]
 8002870:	4618      	mov	r0, r3
 8002872:	f7fd fe15 	bl	80004a0 <__aeabi_f2d>
 8002876:	4602      	mov	r2, r0
 8002878:	460b      	mov	r3, r1
 800287a:	4650      	mov	r0, sl
 800287c:	4659      	mov	r1, fp
 800287e:	f7fd fcb1 	bl	80001e4 <__adddf3>
 8002882:	4602      	mov	r2, r0
 8002884:	460b      	mov	r3, r1
 8002886:	4640      	mov	r0, r8
 8002888:	4649      	mov	r1, r9
 800288a:	f7fd ff8b 	bl	80007a4 <__aeabi_ddiv>
 800288e:	4602      	mov	r2, r0
 8002890:	460b      	mov	r3, r1
 8002892:	4610      	mov	r0, r2
 8002894:	4619      	mov	r1, r3
 8002896:	f04f 0200 	mov.w	r2, #0
 800289a:	4b31      	ldr	r3, [pc, #196]	; (8002960 <kalman+0x720>)
 800289c:	f7fd fca0 	bl	80001e0 <__aeabi_dsub>
 80028a0:	4602      	mov	r2, r0
 80028a2:	460b      	mov	r3, r1
 80028a4:	4620      	mov	r0, r4
 80028a6:	4629      	mov	r1, r5
 80028a8:	f7fd fe52 	bl	8000550 <__aeabi_dmul>
 80028ac:	4602      	mov	r2, r0
 80028ae:	460b      	mov	r3, r1
 80028b0:	4610      	mov	r0, r2
 80028b2:	4619      	mov	r1, r3
 80028b4:	f7fe f8fc 	bl	8000ab0 <__aeabi_d2f>
 80028b8:	4603      	mov	r3, r0
 80028ba:	4a2b      	ldr	r2, [pc, #172]	; (8002968 <kalman+0x728>)
 80028bc:	6013      	str	r3, [r2, #0]
	omegaPredictPre = omega;
 80028be:	4b22      	ldr	r3, [pc, #136]	; (8002948 <kalman+0x708>)
 80028c0:	681b      	ldr	r3, [r3, #0]
 80028c2:	4a2a      	ldr	r2, [pc, #168]	; (800296c <kalman+0x72c>)
 80028c4:	6013      	str	r3, [r2, #0]
	EncoderVel = omega/0.10472;
 80028c6:	4b20      	ldr	r3, [pc, #128]	; (8002948 <kalman+0x708>)
 80028c8:	681b      	ldr	r3, [r3, #0]
 80028ca:	4618      	mov	r0, r3
 80028cc:	f7fd fde8 	bl	80004a0 <__aeabi_f2d>
 80028d0:	a317      	add	r3, pc, #92	; (adr r3, 8002930 <kalman+0x6f0>)
 80028d2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80028d6:	f7fd ff65 	bl	80007a4 <__aeabi_ddiv>
 80028da:	4602      	mov	r2, r0
 80028dc:	460b      	mov	r3, r1
 80028de:	4610      	mov	r0, r2
 80028e0:	4619      	mov	r1, r3
 80028e2:	f7fe f8e5 	bl	8000ab0 <__aeabi_d2f>
 80028e6:	4603      	mov	r3, r0
 80028e8:	4a21      	ldr	r2, [pc, #132]	; (8002970 <kalman+0x730>)
 80028ea:	6013      	str	r3, [r2, #0]
	if (velocity == 0){
 80028ec:	4b21      	ldr	r3, [pc, #132]	; (8002974 <kalman+0x734>)
 80028ee:	edd3 7a00 	vldr	s15, [r3]
 80028f2:	eef5 7a40 	vcmp.f32	s15, #0.0
 80028f6:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80028fa:	d155      	bne.n	80029a8 <kalman+0x768>
		P11predict = 0;
 80028fc:	4b13      	ldr	r3, [pc, #76]	; (800294c <kalman+0x70c>)
 80028fe:	f04f 0200 	mov.w	r2, #0
 8002902:	601a      	str	r2, [r3, #0]
		P12predict = 0;
 8002904:	4b12      	ldr	r3, [pc, #72]	; (8002950 <kalman+0x710>)
 8002906:	f04f 0200 	mov.w	r2, #0
 800290a:	601a      	str	r2, [r3, #0]
		P21predict = 0;
 800290c:	4b11      	ldr	r3, [pc, #68]	; (8002954 <kalman+0x714>)
 800290e:	f04f 0200 	mov.w	r2, #0
 8002912:	601a      	str	r2, [r3, #0]
		P22predict = 0;
 8002914:	4b08      	ldr	r3, [pc, #32]	; (8002938 <kalman+0x6f8>)
 8002916:	f04f 0200 	mov.w	r2, #0
 800291a:	601a      	str	r2, [r3, #0]
		P11predictPRE = 0;
 800291c:	4b0e      	ldr	r3, [pc, #56]	; (8002958 <kalman+0x718>)
 800291e:	f04f 0200 	mov.w	r2, #0
 8002922:	601a      	str	r2, [r3, #0]
 8002924:	e028      	b.n	8002978 <kalman+0x738>
 8002926:	bf00      	nop
 8002928:	00000000 	.word	0x00000000
 800292c:	40000000 	.word	0x40000000
 8002930:	0f3cb3e5 	.word	0x0f3cb3e5
 8002934:	3fbaceee 	.word	0x3fbaceee
 8002938:	200001a4 	.word	0x200001a4
 800293c:	20000180 	.word	0x20000180
 8002940:	20000184 	.word	0x20000184
 8002944:	20000028 	.word	0x20000028
 8002948:	200001a8 	.word	0x200001a8
 800294c:	20000198 	.word	0x20000198
 8002950:	2000019c 	.word	0x2000019c
 8002954:	200001a0 	.word	0x200001a0
 8002958:	2000018c 	.word	0x2000018c
 800295c:	20000194 	.word	0x20000194
 8002960:	3ff00000 	.word	0x3ff00000
 8002964:	20000188 	.word	0x20000188
 8002968:	20000190 	.word	0x20000190
 800296c:	2000017c 	.word	0x2000017c
 8002970:	200000ec 	.word	0x200000ec
 8002974:	200000f4 	.word	0x200000f4
		P12predictPRE = 0;
 8002978:	4b0d      	ldr	r3, [pc, #52]	; (80029b0 <kalman+0x770>)
 800297a:	f04f 0200 	mov.w	r2, #0
 800297e:	601a      	str	r2, [r3, #0]
		P21predictPRE = 0;
 8002980:	4b0c      	ldr	r3, [pc, #48]	; (80029b4 <kalman+0x774>)
 8002982:	f04f 0200 	mov.w	r2, #0
 8002986:	601a      	str	r2, [r3, #0]
		P22predictPRE = 0;
 8002988:	4b0b      	ldr	r3, [pc, #44]	; (80029b8 <kalman+0x778>)
 800298a:	f04f 0200 	mov.w	r2, #0
 800298e:	601a      	str	r2, [r3, #0]
		omegaPredict = 0;
 8002990:	4b0a      	ldr	r3, [pc, #40]	; (80029bc <kalman+0x77c>)
 8002992:	f04f 0200 	mov.w	r2, #0
 8002996:	601a      	str	r2, [r3, #0]
		omegaPredictPre = 0;
 8002998:	4b09      	ldr	r3, [pc, #36]	; (80029c0 <kalman+0x780>)
 800299a:	f04f 0200 	mov.w	r2, #0
 800299e:	601a      	str	r2, [r3, #0]
		errorVel = 0;
 80029a0:	4b08      	ldr	r3, [pc, #32]	; (80029c4 <kalman+0x784>)
 80029a2:	f04f 0200 	mov.w	r2, #0
 80029a6:	601a      	str	r2, [r3, #0]
	}
}
 80029a8:	bf00      	nop
 80029aa:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 80029ae:	bf00      	nop
 80029b0:	20000194 	.word	0x20000194
 80029b4:	20000188 	.word	0x20000188
 80029b8:	20000190 	.word	0x20000190
 80029bc:	20000180 	.word	0x20000180
 80029c0:	2000017c 	.word	0x2000017c
 80029c4:	20000184 	.word	0x20000184

080029c8 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 80029c8:	b4b0      	push	{r4, r5, r7}
 80029ca:	b083      	sub	sp, #12
 80029cc:	af00      	add	r7, sp, #0
 80029ce:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 80029d0:	687b      	ldr	r3, [r7, #4]
 80029d2:	4a09      	ldr	r2, [pc, #36]	; (80029f8 <HAL_TIM_PeriodElapsedCallback+0x30>)
 80029d4:	4293      	cmp	r3, r2
 80029d6:	d109      	bne.n	80029ec <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80029d8:	4b08      	ldr	r3, [pc, #32]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80029da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80029de:	f112 34ff 	adds.w	r4, r2, #4294967295	; 0xffffffff
 80029e2:	f143 0500 	adc.w	r5, r3, #0
 80029e6:	4b05      	ldr	r3, [pc, #20]	; (80029fc <HAL_TIM_PeriodElapsedCallback+0x34>)
 80029e8:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80029ec:	bf00      	nop
 80029ee:	370c      	adds	r7, #12
 80029f0:	46bd      	mov	sp, r7
 80029f2:	bcb0      	pop	{r4, r5, r7}
 80029f4:	4770      	bx	lr
 80029f6:	bf00      	nop
 80029f8:	200003a0 	.word	0x200003a0
 80029fc:	200000e0 	.word	0x200000e0

08002a00 <micros>:
uint64_t micros()
{
 8002a00:	b4b0      	push	{r4, r5, r7}
 8002a02:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 8002a04:	4b09      	ldr	r3, [pc, #36]	; (8002a2c <micros+0x2c>)
 8002a06:	681b      	ldr	r3, [r3, #0]
 8002a08:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8002a0a:	4618      	mov	r0, r3
 8002a0c:	f04f 0100 	mov.w	r1, #0
 8002a10:	4b07      	ldr	r3, [pc, #28]	; (8002a30 <micros+0x30>)
 8002a12:	e9d3 2300 	ldrd	r2, r3, [r3]
 8002a16:	1884      	adds	r4, r0, r2
 8002a18:	eb41 0503 	adc.w	r5, r1, r3
 8002a1c:	4622      	mov	r2, r4
 8002a1e:	462b      	mov	r3, r5
}
 8002a20:	4610      	mov	r0, r2
 8002a22:	4619      	mov	r1, r3
 8002a24:	46bd      	mov	sp, r7
 8002a26:	bcb0      	pop	{r4, r5, r7}
 8002a28:	4770      	bx	lr
 8002a2a:	bf00      	nop
 8002a2c:	200003a0 	.word	0x200003a0
 8002a30:	200000e0 	.word	0x200000e0

08002a34 <Error_Handler>:
/**
  * @brief  This function is executed in case of error occurrence.
  * @retval None
  */
void Error_Handler(void)
{
 8002a34:	b480      	push	{r7}
 8002a36:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002a38:	b672      	cpsid	i
}
 8002a3a:	bf00      	nop
  /* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002a3c:	e7fe      	b.n	8002a3c <Error_Handler+0x8>
	...

08002a40 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002a40:	b580      	push	{r7, lr}
 8002a42:	b082      	sub	sp, #8
 8002a44:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002a46:	2300      	movs	r3, #0
 8002a48:	607b      	str	r3, [r7, #4]
 8002a4a:	4b10      	ldr	r3, [pc, #64]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a4c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a4e:	4a0f      	ldr	r2, [pc, #60]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a50:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002a54:	6453      	str	r3, [r2, #68]	; 0x44
 8002a56:	4b0d      	ldr	r3, [pc, #52]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002a5a:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002a5e:	607b      	str	r3, [r7, #4]
 8002a60:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 8002a62:	2300      	movs	r3, #0
 8002a64:	603b      	str	r3, [r7, #0]
 8002a66:	4b09      	ldr	r3, [pc, #36]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a68:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a6a:	4a08      	ldr	r2, [pc, #32]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a6c:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002a70:	6413      	str	r3, [r2, #64]	; 0x40
 8002a72:	4b06      	ldr	r3, [pc, #24]	; (8002a8c <HAL_MspInit+0x4c>)
 8002a74:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002a76:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002a7a:	603b      	str	r3, [r7, #0]
 8002a7c:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002a7e:	2007      	movs	r0, #7
 8002a80:	f000 fc60 	bl	8003344 <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 8002a84:	bf00      	nop
 8002a86:	3708      	adds	r7, #8
 8002a88:	46bd      	mov	sp, r7
 8002a8a:	bd80      	pop	{r7, pc}
 8002a8c:	40023800 	.word	0x40023800

08002a90 <HAL_I2C_MspInit>:
* This function configures the hardware resources used in this example
* @param hi2c: I2C handle pointer
* @retval None
*/
void HAL_I2C_MspInit(I2C_HandleTypeDef* hi2c)
{
 8002a90:	b580      	push	{r7, lr}
 8002a92:	b08a      	sub	sp, #40	; 0x28
 8002a94:	af00      	add	r7, sp, #0
 8002a96:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002a98:	f107 0314 	add.w	r3, r7, #20
 8002a9c:	2200      	movs	r2, #0
 8002a9e:	601a      	str	r2, [r3, #0]
 8002aa0:	605a      	str	r2, [r3, #4]
 8002aa2:	609a      	str	r2, [r3, #8]
 8002aa4:	60da      	str	r2, [r3, #12]
 8002aa6:	611a      	str	r2, [r3, #16]
  if(hi2c->Instance==I2C1)
 8002aa8:	687b      	ldr	r3, [r7, #4]
 8002aaa:	681b      	ldr	r3, [r3, #0]
 8002aac:	4a21      	ldr	r2, [pc, #132]	; (8002b34 <HAL_I2C_MspInit+0xa4>)
 8002aae:	4293      	cmp	r3, r2
 8002ab0:	d13c      	bne.n	8002b2c <HAL_I2C_MspInit+0x9c>
  {
  /* USER CODE BEGIN I2C1_MspInit 0 */

  /* USER CODE END I2C1_MspInit 0 */

    __HAL_RCC_GPIOB_CLK_ENABLE();
 8002ab2:	2300      	movs	r3, #0
 8002ab4:	613b      	str	r3, [r7, #16]
 8002ab6:	4b20      	ldr	r3, [pc, #128]	; (8002b38 <HAL_I2C_MspInit+0xa8>)
 8002ab8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002aba:	4a1f      	ldr	r2, [pc, #124]	; (8002b38 <HAL_I2C_MspInit+0xa8>)
 8002abc:	f043 0302 	orr.w	r3, r3, #2
 8002ac0:	6313      	str	r3, [r2, #48]	; 0x30
 8002ac2:	4b1d      	ldr	r3, [pc, #116]	; (8002b38 <HAL_I2C_MspInit+0xa8>)
 8002ac4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002ac6:	f003 0302 	and.w	r3, r3, #2
 8002aca:	613b      	str	r3, [r7, #16]
 8002acc:	693b      	ldr	r3, [r7, #16]
    /**I2C1 GPIO Configuration
    PB8     ------> I2C1_SCL
    PB9     ------> I2C1_SDA
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002ace:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002ad2:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_OD;
 8002ad4:	2312      	movs	r3, #18
 8002ad6:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_PULLUP;
 8002ad8:	2301      	movs	r3, #1
 8002ada:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002adc:	2303      	movs	r3, #3
 8002ade:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF4_I2C1;
 8002ae0:	2304      	movs	r3, #4
 8002ae2:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 8002ae4:	f107 0314 	add.w	r3, r7, #20
 8002ae8:	4619      	mov	r1, r3
 8002aea:	4814      	ldr	r0, [pc, #80]	; (8002b3c <HAL_I2C_MspInit+0xac>)
 8002aec:	f001 f88a 	bl	8003c04 <HAL_GPIO_Init>

    /* Peripheral clock enable */
    __HAL_RCC_I2C1_CLK_ENABLE();
 8002af0:	2300      	movs	r3, #0
 8002af2:	60fb      	str	r3, [r7, #12]
 8002af4:	4b10      	ldr	r3, [pc, #64]	; (8002b38 <HAL_I2C_MspInit+0xa8>)
 8002af6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002af8:	4a0f      	ldr	r2, [pc, #60]	; (8002b38 <HAL_I2C_MspInit+0xa8>)
 8002afa:	f443 1300 	orr.w	r3, r3, #2097152	; 0x200000
 8002afe:	6413      	str	r3, [r2, #64]	; 0x40
 8002b00:	4b0d      	ldr	r3, [pc, #52]	; (8002b38 <HAL_I2C_MspInit+0xa8>)
 8002b02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002b04:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002b08:	60fb      	str	r3, [r7, #12]
 8002b0a:	68fb      	ldr	r3, [r7, #12]
    /* I2C1 interrupt Init */
    HAL_NVIC_SetPriority(I2C1_EV_IRQn, 0, 0);
 8002b0c:	2200      	movs	r2, #0
 8002b0e:	2100      	movs	r1, #0
 8002b10:	201f      	movs	r0, #31
 8002b12:	f000 fc22 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_EV_IRQn);
 8002b16:	201f      	movs	r0, #31
 8002b18:	f000 fc3b 	bl	8003392 <HAL_NVIC_EnableIRQ>
    HAL_NVIC_SetPriority(I2C1_ER_IRQn, 0, 0);
 8002b1c:	2200      	movs	r2, #0
 8002b1e:	2100      	movs	r1, #0
 8002b20:	2020      	movs	r0, #32
 8002b22:	f000 fc1a 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(I2C1_ER_IRQn);
 8002b26:	2020      	movs	r0, #32
 8002b28:	f000 fc33 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN I2C1_MspInit 1 */

  /* USER CODE END I2C1_MspInit 1 */
  }

}
 8002b2c:	bf00      	nop
 8002b2e:	3728      	adds	r7, #40	; 0x28
 8002b30:	46bd      	mov	sp, r7
 8002b32:	bd80      	pop	{r7, pc}
 8002b34:	40005400 	.word	0x40005400
 8002b38:	40023800 	.word	0x40023800
 8002b3c:	40020400 	.word	0x40020400

08002b40 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002b40:	b580      	push	{r7, lr}
 8002b42:	b08a      	sub	sp, #40	; 0x28
 8002b44:	af00      	add	r7, sp, #0
 8002b46:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002b48:	f107 0314 	add.w	r3, r7, #20
 8002b4c:	2200      	movs	r2, #0
 8002b4e:	601a      	str	r2, [r3, #0]
 8002b50:	605a      	str	r2, [r3, #4]
 8002b52:	609a      	str	r2, [r3, #8]
 8002b54:	60da      	str	r2, [r3, #12]
 8002b56:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002b58:	687b      	ldr	r3, [r7, #4]
 8002b5a:	681b      	ldr	r3, [r3, #0]
 8002b5c:	4a19      	ldr	r2, [pc, #100]	; (8002bc4 <HAL_TIM_Encoder_MspInit+0x84>)
 8002b5e:	4293      	cmp	r3, r2
 8002b60:	d12c      	bne.n	8002bbc <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 8002b62:	2300      	movs	r3, #0
 8002b64:	613b      	str	r3, [r7, #16]
 8002b66:	4b18      	ldr	r3, [pc, #96]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b68:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b6a:	4a17      	ldr	r2, [pc, #92]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b6c:	f043 0301 	orr.w	r3, r3, #1
 8002b70:	6453      	str	r3, [r2, #68]	; 0x44
 8002b72:	4b15      	ldr	r3, [pc, #84]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b74:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002b76:	f003 0301 	and.w	r3, r3, #1
 8002b7a:	613b      	str	r3, [r7, #16]
 8002b7c:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002b7e:	2300      	movs	r3, #0
 8002b80:	60fb      	str	r3, [r7, #12]
 8002b82:	4b11      	ldr	r3, [pc, #68]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b84:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b86:	4a10      	ldr	r2, [pc, #64]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b88:	f043 0301 	orr.w	r3, r3, #1
 8002b8c:	6313      	str	r3, [r2, #48]	; 0x30
 8002b8e:	4b0e      	ldr	r3, [pc, #56]	; (8002bc8 <HAL_TIM_Encoder_MspInit+0x88>)
 8002b90:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002b92:	f003 0301 	and.w	r3, r3, #1
 8002b96:	60fb      	str	r3, [r7, #12]
 8002b98:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 8002b9a:	f44f 7340 	mov.w	r3, #768	; 0x300
 8002b9e:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002ba0:	2302      	movs	r3, #2
 8002ba2:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002ba4:	2300      	movs	r3, #0
 8002ba6:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ba8:	2300      	movs	r3, #0
 8002baa:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 8002bac:	2301      	movs	r3, #1
 8002bae:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002bb0:	f107 0314 	add.w	r3, r7, #20
 8002bb4:	4619      	mov	r1, r3
 8002bb6:	4805      	ldr	r0, [pc, #20]	; (8002bcc <HAL_TIM_Encoder_MspInit+0x8c>)
 8002bb8:	f001 f824 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 8002bbc:	bf00      	nop
 8002bbe:	3728      	adds	r7, #40	; 0x28
 8002bc0:	46bd      	mov	sp, r7
 8002bc2:	bd80      	pop	{r7, pc}
 8002bc4:	40010000 	.word	0x40010000
 8002bc8:	40023800 	.word	0x40023800
 8002bcc:	40020000 	.word	0x40020000

08002bd0 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 8002bd0:	b580      	push	{r7, lr}
 8002bd2:	b084      	sub	sp, #16
 8002bd4:	af00      	add	r7, sp, #0
 8002bd6:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 8002bd8:	687b      	ldr	r3, [r7, #4]
 8002bda:	681b      	ldr	r3, [r3, #0]
 8002bdc:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8002be0:	d116      	bne.n	8002c10 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 8002be2:	2300      	movs	r3, #0
 8002be4:	60fb      	str	r3, [r7, #12]
 8002be6:	4b1a      	ldr	r3, [pc, #104]	; (8002c50 <HAL_TIM_Base_MspInit+0x80>)
 8002be8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bea:	4a19      	ldr	r2, [pc, #100]	; (8002c50 <HAL_TIM_Base_MspInit+0x80>)
 8002bec:	f043 0301 	orr.w	r3, r3, #1
 8002bf0:	6413      	str	r3, [r2, #64]	; 0x40
 8002bf2:	4b17      	ldr	r3, [pc, #92]	; (8002c50 <HAL_TIM_Base_MspInit+0x80>)
 8002bf4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002bf6:	f003 0301 	and.w	r3, r3, #1
 8002bfa:	60fb      	str	r3, [r7, #12]
 8002bfc:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002bfe:	2200      	movs	r2, #0
 8002c00:	2100      	movs	r1, #0
 8002c02:	201c      	movs	r0, #28
 8002c04:	f000 fba9 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002c08:	201c      	movs	r0, #28
 8002c0a:	f000 fbc2 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002c0e:	e01a      	b.n	8002c46 <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	681b      	ldr	r3, [r3, #0]
 8002c14:	4a0f      	ldr	r2, [pc, #60]	; (8002c54 <HAL_TIM_Base_MspInit+0x84>)
 8002c16:	4293      	cmp	r3, r2
 8002c18:	d115      	bne.n	8002c46 <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002c1a:	2300      	movs	r3, #0
 8002c1c:	60bb      	str	r3, [r7, #8]
 8002c1e:	4b0c      	ldr	r3, [pc, #48]	; (8002c50 <HAL_TIM_Base_MspInit+0x80>)
 8002c20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c22:	4a0b      	ldr	r2, [pc, #44]	; (8002c50 <HAL_TIM_Base_MspInit+0x80>)
 8002c24:	f043 0302 	orr.w	r3, r3, #2
 8002c28:	6413      	str	r3, [r2, #64]	; 0x40
 8002c2a:	4b09      	ldr	r3, [pc, #36]	; (8002c50 <HAL_TIM_Base_MspInit+0x80>)
 8002c2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002c2e:	f003 0302 	and.w	r3, r3, #2
 8002c32:	60bb      	str	r3, [r7, #8]
 8002c34:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 8002c36:	2200      	movs	r2, #0
 8002c38:	2100      	movs	r1, #0
 8002c3a:	201d      	movs	r0, #29
 8002c3c:	f000 fb8d 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002c40:	201d      	movs	r0, #29
 8002c42:	f000 fba6 	bl	8003392 <HAL_NVIC_EnableIRQ>
}
 8002c46:	bf00      	nop
 8002c48:	3710      	adds	r7, #16
 8002c4a:	46bd      	mov	sp, r7
 8002c4c:	bd80      	pop	{r7, pc}
 8002c4e:	bf00      	nop
 8002c50:	40023800 	.word	0x40023800
 8002c54:	40000400 	.word	0x40000400

08002c58 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002c58:	b580      	push	{r7, lr}
 8002c5a:	b088      	sub	sp, #32
 8002c5c:	af00      	add	r7, sp, #0
 8002c5e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002c60:	f107 030c 	add.w	r3, r7, #12
 8002c64:	2200      	movs	r2, #0
 8002c66:	601a      	str	r2, [r3, #0]
 8002c68:	605a      	str	r2, [r3, #4]
 8002c6a:	609a      	str	r2, [r3, #8]
 8002c6c:	60da      	str	r2, [r3, #12]
 8002c6e:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002c70:	687b      	ldr	r3, [r7, #4]
 8002c72:	681b      	ldr	r3, [r3, #0]
 8002c74:	4a12      	ldr	r2, [pc, #72]	; (8002cc0 <HAL_TIM_MspPostInit+0x68>)
 8002c76:	4293      	cmp	r3, r2
 8002c78:	d11d      	bne.n	8002cb6 <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002c7a:	2300      	movs	r3, #0
 8002c7c:	60bb      	str	r3, [r7, #8]
 8002c7e:	4b11      	ldr	r3, [pc, #68]	; (8002cc4 <HAL_TIM_MspPostInit+0x6c>)
 8002c80:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c82:	4a10      	ldr	r2, [pc, #64]	; (8002cc4 <HAL_TIM_MspPostInit+0x6c>)
 8002c84:	f043 0301 	orr.w	r3, r3, #1
 8002c88:	6313      	str	r3, [r2, #48]	; 0x30
 8002c8a:	4b0e      	ldr	r3, [pc, #56]	; (8002cc4 <HAL_TIM_MspPostInit+0x6c>)
 8002c8c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002c8e:	f003 0301 	and.w	r3, r3, #1
 8002c92:	60bb      	str	r3, [r7, #8]
 8002c94:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 8002c96:	2340      	movs	r3, #64	; 0x40
 8002c98:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002c9a:	2302      	movs	r3, #2
 8002c9c:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002c9e:	2300      	movs	r3, #0
 8002ca0:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 8002ca2:	2300      	movs	r3, #0
 8002ca4:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 8002ca6:	2302      	movs	r3, #2
 8002ca8:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002caa:	f107 030c 	add.w	r3, r7, #12
 8002cae:	4619      	mov	r1, r3
 8002cb0:	4805      	ldr	r0, [pc, #20]	; (8002cc8 <HAL_TIM_MspPostInit+0x70>)
 8002cb2:	f000 ffa7 	bl	8003c04 <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 8002cb6:	bf00      	nop
 8002cb8:	3720      	adds	r7, #32
 8002cba:	46bd      	mov	sp, r7
 8002cbc:	bd80      	pop	{r7, pc}
 8002cbe:	bf00      	nop
 8002cc0:	40000400 	.word	0x40000400
 8002cc4:	40023800 	.word	0x40023800
 8002cc8:	40020000 	.word	0x40020000

08002ccc <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 8002ccc:	b580      	push	{r7, lr}
 8002cce:	b08c      	sub	sp, #48	; 0x30
 8002cd0:	af00      	add	r7, sp, #0
 8002cd2:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002cd4:	f107 031c 	add.w	r3, r7, #28
 8002cd8:	2200      	movs	r2, #0
 8002cda:	601a      	str	r2, [r3, #0]
 8002cdc:	605a      	str	r2, [r3, #4]
 8002cde:	609a      	str	r2, [r3, #8]
 8002ce0:	60da      	str	r2, [r3, #12]
 8002ce2:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 8002ce4:	687b      	ldr	r3, [r7, #4]
 8002ce6:	681b      	ldr	r3, [r3, #0]
 8002ce8:	4a65      	ldr	r2, [pc, #404]	; (8002e80 <HAL_UART_MspInit+0x1b4>)
 8002cea:	4293      	cmp	r3, r2
 8002cec:	f040 8092 	bne.w	8002e14 <HAL_UART_MspInit+0x148>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002cf0:	2300      	movs	r3, #0
 8002cf2:	61bb      	str	r3, [r7, #24]
 8002cf4:	4b63      	ldr	r3, [pc, #396]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002cf6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002cf8:	4a62      	ldr	r2, [pc, #392]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002cfa:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002cfe:	6413      	str	r3, [r2, #64]	; 0x40
 8002d00:	4b60      	ldr	r3, [pc, #384]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002d02:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002d04:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002d08:	61bb      	str	r3, [r7, #24]
 8002d0a:	69bb      	ldr	r3, [r7, #24]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002d0c:	2300      	movs	r3, #0
 8002d0e:	617b      	str	r3, [r7, #20]
 8002d10:	4b5c      	ldr	r3, [pc, #368]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002d12:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d14:	4a5b      	ldr	r2, [pc, #364]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002d16:	f043 0301 	orr.w	r3, r3, #1
 8002d1a:	6313      	str	r3, [r2, #48]	; 0x30
 8002d1c:	4b59      	ldr	r3, [pc, #356]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002d1e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002d20:	f003 0301 	and.w	r3, r3, #1
 8002d24:	617b      	str	r3, [r7, #20]
 8002d26:	697b      	ldr	r3, [r7, #20]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 8002d28:	230c      	movs	r3, #12
 8002d2a:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002d2c:	2302      	movs	r3, #2
 8002d2e:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002d30:	2300      	movs	r3, #0
 8002d32:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002d34:	2303      	movs	r3, #3
 8002d36:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 8002d38:	2307      	movs	r3, #7
 8002d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002d3c:	f107 031c 	add.w	r3, r7, #28
 8002d40:	4619      	mov	r1, r3
 8002d42:	4851      	ldr	r0, [pc, #324]	; (8002e88 <HAL_UART_MspInit+0x1bc>)
 8002d44:	f000 ff5e 	bl	8003c04 <HAL_GPIO_Init>

    /* USART2 DMA Init */
    /* USART2_RX Init */
    hdma_usart2_rx.Instance = DMA1_Stream5;
 8002d48:	4b50      	ldr	r3, [pc, #320]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d4a:	4a51      	ldr	r2, [pc, #324]	; (8002e90 <HAL_UART_MspInit+0x1c4>)
 8002d4c:	601a      	str	r2, [r3, #0]
    hdma_usart2_rx.Init.Channel = DMA_CHANNEL_4;
 8002d4e:	4b4f      	ldr	r3, [pc, #316]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d50:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002d54:	605a      	str	r2, [r3, #4]
    hdma_usart2_rx.Init.Direction = DMA_PERIPH_TO_MEMORY;
 8002d56:	4b4d      	ldr	r3, [pc, #308]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d58:	2200      	movs	r2, #0
 8002d5a:	609a      	str	r2, [r3, #8]
    hdma_usart2_rx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002d5c:	4b4b      	ldr	r3, [pc, #300]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d5e:	2200      	movs	r2, #0
 8002d60:	60da      	str	r2, [r3, #12]
    hdma_usart2_rx.Init.MemInc = DMA_MINC_ENABLE;
 8002d62:	4b4a      	ldr	r3, [pc, #296]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d64:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002d68:	611a      	str	r2, [r3, #16]
    hdma_usart2_rx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002d6a:	4b48      	ldr	r3, [pc, #288]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d6c:	2200      	movs	r2, #0
 8002d6e:	615a      	str	r2, [r3, #20]
    hdma_usart2_rx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002d70:	4b46      	ldr	r3, [pc, #280]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d72:	2200      	movs	r2, #0
 8002d74:	619a      	str	r2, [r3, #24]
    hdma_usart2_rx.Init.Mode = DMA_CIRCULAR;
 8002d76:	4b45      	ldr	r3, [pc, #276]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d78:	f44f 7280 	mov.w	r2, #256	; 0x100
 8002d7c:	61da      	str	r2, [r3, #28]
    hdma_usart2_rx.Init.Priority = DMA_PRIORITY_LOW;
 8002d7e:	4b43      	ldr	r3, [pc, #268]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d80:	2200      	movs	r2, #0
 8002d82:	621a      	str	r2, [r3, #32]
    hdma_usart2_rx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002d84:	4b41      	ldr	r3, [pc, #260]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d86:	2200      	movs	r2, #0
 8002d88:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_rx) != HAL_OK)
 8002d8a:	4840      	ldr	r0, [pc, #256]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d8c:	f000 fb2a 	bl	80033e4 <HAL_DMA_Init>
 8002d90:	4603      	mov	r3, r0
 8002d92:	2b00      	cmp	r3, #0
 8002d94:	d001      	beq.n	8002d9a <HAL_UART_MspInit+0xce>
    {
      Error_Handler();
 8002d96:	f7ff fe4d 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmarx,hdma_usart2_rx);
 8002d9a:	687b      	ldr	r3, [r7, #4]
 8002d9c:	4a3b      	ldr	r2, [pc, #236]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002d9e:	639a      	str	r2, [r3, #56]	; 0x38
 8002da0:	4a3a      	ldr	r2, [pc, #232]	; (8002e8c <HAL_UART_MspInit+0x1c0>)
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2_TX Init */
    hdma_usart2_tx.Instance = DMA1_Stream6;
 8002da6:	4b3b      	ldr	r3, [pc, #236]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002da8:	4a3b      	ldr	r2, [pc, #236]	; (8002e98 <HAL_UART_MspInit+0x1cc>)
 8002daa:	601a      	str	r2, [r3, #0]
    hdma_usart2_tx.Init.Channel = DMA_CHANNEL_4;
 8002dac:	4b39      	ldr	r3, [pc, #228]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dae:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 8002db2:	605a      	str	r2, [r3, #4]
    hdma_usart2_tx.Init.Direction = DMA_MEMORY_TO_PERIPH;
 8002db4:	4b37      	ldr	r3, [pc, #220]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002db6:	2240      	movs	r2, #64	; 0x40
 8002db8:	609a      	str	r2, [r3, #8]
    hdma_usart2_tx.Init.PeriphInc = DMA_PINC_DISABLE;
 8002dba:	4b36      	ldr	r3, [pc, #216]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dbc:	2200      	movs	r2, #0
 8002dbe:	60da      	str	r2, [r3, #12]
    hdma_usart2_tx.Init.MemInc = DMA_MINC_ENABLE;
 8002dc0:	4b34      	ldr	r3, [pc, #208]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dc2:	f44f 6280 	mov.w	r2, #1024	; 0x400
 8002dc6:	611a      	str	r2, [r3, #16]
    hdma_usart2_tx.Init.PeriphDataAlignment = DMA_PDATAALIGN_BYTE;
 8002dc8:	4b32      	ldr	r3, [pc, #200]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dca:	2200      	movs	r2, #0
 8002dcc:	615a      	str	r2, [r3, #20]
    hdma_usart2_tx.Init.MemDataAlignment = DMA_MDATAALIGN_BYTE;
 8002dce:	4b31      	ldr	r3, [pc, #196]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dd0:	2200      	movs	r2, #0
 8002dd2:	619a      	str	r2, [r3, #24]
    hdma_usart2_tx.Init.Mode = DMA_NORMAL;
 8002dd4:	4b2f      	ldr	r3, [pc, #188]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dd6:	2200      	movs	r2, #0
 8002dd8:	61da      	str	r2, [r3, #28]
    hdma_usart2_tx.Init.Priority = DMA_PRIORITY_LOW;
 8002dda:	4b2e      	ldr	r3, [pc, #184]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002ddc:	2200      	movs	r2, #0
 8002dde:	621a      	str	r2, [r3, #32]
    hdma_usart2_tx.Init.FIFOMode = DMA_FIFOMODE_DISABLE;
 8002de0:	4b2c      	ldr	r3, [pc, #176]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002de2:	2200      	movs	r2, #0
 8002de4:	625a      	str	r2, [r3, #36]	; 0x24
    if (HAL_DMA_Init(&hdma_usart2_tx) != HAL_OK)
 8002de6:	482b      	ldr	r0, [pc, #172]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002de8:	f000 fafc 	bl	80033e4 <HAL_DMA_Init>
 8002dec:	4603      	mov	r3, r0
 8002dee:	2b00      	cmp	r3, #0
 8002df0:	d001      	beq.n	8002df6 <HAL_UART_MspInit+0x12a>
    {
      Error_Handler();
 8002df2:	f7ff fe1f 	bl	8002a34 <Error_Handler>
    }

    __HAL_LINKDMA(huart,hdmatx,hdma_usart2_tx);
 8002df6:	687b      	ldr	r3, [r7, #4]
 8002df8:	4a26      	ldr	r2, [pc, #152]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dfa:	635a      	str	r2, [r3, #52]	; 0x34
 8002dfc:	4a25      	ldr	r2, [pc, #148]	; (8002e94 <HAL_UART_MspInit+0x1c8>)
 8002dfe:	687b      	ldr	r3, [r7, #4]
 8002e00:	6393      	str	r3, [r2, #56]	; 0x38

    /* USART2 interrupt Init */
    HAL_NVIC_SetPriority(USART2_IRQn, 0, 0);
 8002e02:	2200      	movs	r2, #0
 8002e04:	2100      	movs	r1, #0
 8002e06:	2026      	movs	r0, #38	; 0x26
 8002e08:	f000 faa7 	bl	800335a <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(USART2_IRQn);
 8002e0c:	2026      	movs	r0, #38	; 0x26
 8002e0e:	f000 fac0 	bl	8003392 <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN USART6_MspInit 1 */

  /* USER CODE END USART6_MspInit 1 */
  }

}
 8002e12:	e030      	b.n	8002e76 <HAL_UART_MspInit+0x1aa>
  else if(huart->Instance==USART6)
 8002e14:	687b      	ldr	r3, [r7, #4]
 8002e16:	681b      	ldr	r3, [r3, #0]
 8002e18:	4a20      	ldr	r2, [pc, #128]	; (8002e9c <HAL_UART_MspInit+0x1d0>)
 8002e1a:	4293      	cmp	r3, r2
 8002e1c:	d12b      	bne.n	8002e76 <HAL_UART_MspInit+0x1aa>
    __HAL_RCC_USART6_CLK_ENABLE();
 8002e1e:	2300      	movs	r3, #0
 8002e20:	613b      	str	r3, [r7, #16]
 8002e22:	4b18      	ldr	r3, [pc, #96]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002e24:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e26:	4a17      	ldr	r2, [pc, #92]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002e28:	f043 0320 	orr.w	r3, r3, #32
 8002e2c:	6453      	str	r3, [r2, #68]	; 0x44
 8002e2e:	4b15      	ldr	r3, [pc, #84]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002e30:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e32:	f003 0320 	and.w	r3, r3, #32
 8002e36:	613b      	str	r3, [r7, #16]
 8002e38:	693b      	ldr	r3, [r7, #16]
    __HAL_RCC_GPIOC_CLK_ENABLE();
 8002e3a:	2300      	movs	r3, #0
 8002e3c:	60fb      	str	r3, [r7, #12]
 8002e3e:	4b11      	ldr	r3, [pc, #68]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002e40:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e42:	4a10      	ldr	r2, [pc, #64]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002e44:	f043 0304 	orr.w	r3, r3, #4
 8002e48:	6313      	str	r3, [r2, #48]	; 0x30
 8002e4a:	4b0e      	ldr	r3, [pc, #56]	; (8002e84 <HAL_UART_MspInit+0x1b8>)
 8002e4c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002e4e:	f003 0304 	and.w	r3, r3, #4
 8002e52:	60fb      	str	r3, [r7, #12]
 8002e54:	68fb      	ldr	r3, [r7, #12]
    GPIO_InitStruct.Pin = GPIO_PIN_6|GPIO_PIN_7;
 8002e56:	23c0      	movs	r3, #192	; 0xc0
 8002e58:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002e5a:	2302      	movs	r3, #2
 8002e5c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002e5e:	2300      	movs	r3, #0
 8002e60:	627b      	str	r3, [r7, #36]	; 0x24
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 8002e62:	2303      	movs	r3, #3
 8002e64:	62bb      	str	r3, [r7, #40]	; 0x28
    GPIO_InitStruct.Alternate = GPIO_AF8_USART6;
 8002e66:	2308      	movs	r3, #8
 8002e68:	62fb      	str	r3, [r7, #44]	; 0x2c
    HAL_GPIO_Init(GPIOC, &GPIO_InitStruct);
 8002e6a:	f107 031c 	add.w	r3, r7, #28
 8002e6e:	4619      	mov	r1, r3
 8002e70:	480b      	ldr	r0, [pc, #44]	; (8002ea0 <HAL_UART_MspInit+0x1d4>)
 8002e72:	f000 fec7 	bl	8003c04 <HAL_GPIO_Init>
}
 8002e76:	bf00      	nop
 8002e78:	3730      	adds	r7, #48	; 0x30
 8002e7a:	46bd      	mov	sp, r7
 8002e7c:	bd80      	pop	{r7, pc}
 8002e7e:	bf00      	nop
 8002e80:	40004400 	.word	0x40004400
 8002e84:	40023800 	.word	0x40023800
 8002e88:	40020000 	.word	0x40020000
 8002e8c:	200001b8 	.word	0x200001b8
 8002e90:	40026088 	.word	0x40026088
 8002e94:	200002b4 	.word	0x200002b4
 8002e98:	400260a0 	.word	0x400260a0
 8002e9c:	40011400 	.word	0x40011400
 8002ea0:	40020800 	.word	0x40020800

08002ea4 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002ea4:	b480      	push	{r7}
 8002ea6:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002ea8:	e7fe      	b.n	8002ea8 <NMI_Handler+0x4>

08002eaa <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 8002eaa:	b480      	push	{r7}
 8002eac:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 8002eae:	e7fe      	b.n	8002eae <HardFault_Handler+0x4>

08002eb0 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002eb0:	b480      	push	{r7}
 8002eb2:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002eb4:	e7fe      	b.n	8002eb4 <MemManage_Handler+0x4>

08002eb6 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002eb6:	b480      	push	{r7}
 8002eb8:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 8002eba:	e7fe      	b.n	8002eba <BusFault_Handler+0x4>

08002ebc <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 8002ebc:	b480      	push	{r7}
 8002ebe:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002ec0:	e7fe      	b.n	8002ec0 <UsageFault_Handler+0x4>

08002ec2 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002ec2:	b480      	push	{r7}
 8002ec4:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002ec6:	bf00      	nop
 8002ec8:	46bd      	mov	sp, r7
 8002eca:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ece:	4770      	bx	lr

08002ed0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 8002ed0:	b480      	push	{r7}
 8002ed2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 8002ed4:	bf00      	nop
 8002ed6:	46bd      	mov	sp, r7
 8002ed8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002edc:	4770      	bx	lr

08002ede <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 8002ede:	b480      	push	{r7}
 8002ee0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 8002ee2:	bf00      	nop
 8002ee4:	46bd      	mov	sp, r7
 8002ee6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002eea:	4770      	bx	lr

08002eec <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 8002eec:	b580      	push	{r7, lr}
 8002eee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 8002ef0:	f000 f914 	bl	800311c <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 8002ef4:	bf00      	nop
 8002ef6:	bd80      	pop	{r7, pc}

08002ef8 <DMA1_Stream5_IRQHandler>:

/**
  * @brief This function handles DMA1 stream5 global interrupt.
  */
void DMA1_Stream5_IRQHandler(void)
{
 8002ef8:	b580      	push	{r7, lr}
 8002efa:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream5_IRQn 0 */

  /* USER CODE END DMA1_Stream5_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_rx);
 8002efc:	4802      	ldr	r0, [pc, #8]	; (8002f08 <DMA1_Stream5_IRQHandler+0x10>)
 8002efe:	f000 fc09 	bl	8003714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream5_IRQn 1 */

  /* USER CODE END DMA1_Stream5_IRQn 1 */
}
 8002f02:	bf00      	nop
 8002f04:	bd80      	pop	{r7, pc}
 8002f06:	bf00      	nop
 8002f08:	200001b8 	.word	0x200001b8

08002f0c <DMA1_Stream6_IRQHandler>:

/**
  * @brief This function handles DMA1 stream6 global interrupt.
  */
void DMA1_Stream6_IRQHandler(void)
{
 8002f0c:	b580      	push	{r7, lr}
 8002f0e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN DMA1_Stream6_IRQn 0 */

  /* USER CODE END DMA1_Stream6_IRQn 0 */
  HAL_DMA_IRQHandler(&hdma_usart2_tx);
 8002f10:	4802      	ldr	r0, [pc, #8]	; (8002f1c <DMA1_Stream6_IRQHandler+0x10>)
 8002f12:	f000 fbff 	bl	8003714 <HAL_DMA_IRQHandler>
  /* USER CODE BEGIN DMA1_Stream6_IRQn 1 */

  /* USER CODE END DMA1_Stream6_IRQn 1 */
}
 8002f16:	bf00      	nop
 8002f18:	bd80      	pop	{r7, pc}
 8002f1a:	bf00      	nop
 8002f1c:	200002b4 	.word	0x200002b4

08002f20 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 8002f20:	b580      	push	{r7, lr}
 8002f22:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 8002f24:	2080      	movs	r0, #128	; 0x80
 8002f26:	f001 f80b 	bl	8003f40 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 8002f2a:	bf00      	nop
 8002f2c:	bd80      	pop	{r7, pc}
	...

08002f30 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 8002f30:	b580      	push	{r7, lr}
 8002f32:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 8002f34:	4802      	ldr	r0, [pc, #8]	; (8002f40 <TIM2_IRQHandler+0x10>)
 8002f36:	f003 fe79 	bl	8006c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 8002f3a:	bf00      	nop
 8002f3c:	bd80      	pop	{r7, pc}
 8002f3e:	bf00      	nop
 8002f40:	200003a0 	.word	0x200003a0

08002f44 <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 8002f44:	b580      	push	{r7, lr}
 8002f46:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 8002f48:	4802      	ldr	r0, [pc, #8]	; (8002f54 <TIM3_IRQHandler+0x10>)
 8002f4a:	f003 fe6f 	bl	8006c2c <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 8002f4e:	bf00      	nop
 8002f50:	bd80      	pop	{r7, pc}
 8002f52:	bf00      	nop
 8002f54:	2000026c 	.word	0x2000026c

08002f58 <I2C1_EV_IRQHandler>:

/**
  * @brief This function handles I2C1 event interrupt.
  */
void I2C1_EV_IRQHandler(void)
{
 8002f58:	b580      	push	{r7, lr}
 8002f5a:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_EV_IRQn 0 */

  /* USER CODE END I2C1_EV_IRQn 0 */
  HAL_I2C_EV_IRQHandler(&hi2c1);
 8002f5c:	4802      	ldr	r0, [pc, #8]	; (8002f68 <I2C1_EV_IRQHandler+0x10>)
 8002f5e:	f001 f9f1 	bl	8004344 <HAL_I2C_EV_IRQHandler>
  /* USER CODE BEGIN I2C1_EV_IRQn 1 */

  /* USER CODE END I2C1_EV_IRQn 1 */
}
 8002f62:	bf00      	nop
 8002f64:	bd80      	pop	{r7, pc}
 8002f66:	bf00      	nop
 8002f68:	20000218 	.word	0x20000218

08002f6c <I2C1_ER_IRQHandler>:

/**
  * @brief This function handles I2C1 error interrupt.
  */
void I2C1_ER_IRQHandler(void)
{
 8002f6c:	b580      	push	{r7, lr}
 8002f6e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN I2C1_ER_IRQn 0 */

  /* USER CODE END I2C1_ER_IRQn 0 */
  HAL_I2C_ER_IRQHandler(&hi2c1);
 8002f70:	4802      	ldr	r0, [pc, #8]	; (8002f7c <I2C1_ER_IRQHandler+0x10>)
 8002f72:	f001 fb54 	bl	800461e <HAL_I2C_ER_IRQHandler>
  /* USER CODE BEGIN I2C1_ER_IRQn 1 */

  /* USER CODE END I2C1_ER_IRQn 1 */
}
 8002f76:	bf00      	nop
 8002f78:	bd80      	pop	{r7, pc}
 8002f7a:	bf00      	nop
 8002f7c:	20000218 	.word	0x20000218

08002f80 <USART2_IRQHandler>:

/**
  * @brief This function handles USART2 global interrupt.
  */
void USART2_IRQHandler(void)
{
 8002f80:	b580      	push	{r7, lr}
 8002f82:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN USART2_IRQn 0 */

  /* USER CODE END USART2_IRQn 0 */
  HAL_UART_IRQHandler(&huart2);
 8002f84:	4802      	ldr	r0, [pc, #8]	; (8002f90 <USART2_IRQHandler+0x10>)
 8002f86:	f004 fd3b 	bl	8007a00 <HAL_UART_IRQHandler>
  /* USER CODE BEGIN USART2_IRQn 1 */

  /* USER CODE END USART2_IRQn 1 */
}
 8002f8a:	bf00      	nop
 8002f8c:	bd80      	pop	{r7, pc}
 8002f8e:	bf00      	nop
 8002f90:	200003e8 	.word	0x200003e8

08002f94 <_sbrk>:
 *
 * @param incr Memory size
 * @return Pointer to allocated memory
 */
void *_sbrk(ptrdiff_t incr)
{
 8002f94:	b580      	push	{r7, lr}
 8002f96:	b086      	sub	sp, #24
 8002f98:	af00      	add	r7, sp, #0
 8002f9a:	6078      	str	r0, [r7, #4]
  extern uint8_t _end; /* Symbol defined in the linker script */
  extern uint8_t _estack; /* Symbol defined in the linker script */
  extern uint32_t _Min_Stack_Size; /* Symbol defined in the linker script */
  const uint32_t stack_limit = (uint32_t)&_estack - (uint32_t)&_Min_Stack_Size;
 8002f9c:	4a14      	ldr	r2, [pc, #80]	; (8002ff0 <_sbrk+0x5c>)
 8002f9e:	4b15      	ldr	r3, [pc, #84]	; (8002ff4 <_sbrk+0x60>)
 8002fa0:	1ad3      	subs	r3, r2, r3
 8002fa2:	617b      	str	r3, [r7, #20]
  const uint8_t *max_heap = (uint8_t *)stack_limit;
 8002fa4:	697b      	ldr	r3, [r7, #20]
 8002fa6:	613b      	str	r3, [r7, #16]
  uint8_t *prev_heap_end;

  /* Initialize heap end at first call */
  if (NULL == __sbrk_heap_end)
 8002fa8:	4b13      	ldr	r3, [pc, #76]	; (8002ff8 <_sbrk+0x64>)
 8002faa:	681b      	ldr	r3, [r3, #0]
 8002fac:	2b00      	cmp	r3, #0
 8002fae:	d102      	bne.n	8002fb6 <_sbrk+0x22>
  {
    __sbrk_heap_end = &_end;
 8002fb0:	4b11      	ldr	r3, [pc, #68]	; (8002ff8 <_sbrk+0x64>)
 8002fb2:	4a12      	ldr	r2, [pc, #72]	; (8002ffc <_sbrk+0x68>)
 8002fb4:	601a      	str	r2, [r3, #0]
  }

  /* Protect heap from growing into the reserved MSP stack */
  if (__sbrk_heap_end + incr > max_heap)
 8002fb6:	4b10      	ldr	r3, [pc, #64]	; (8002ff8 <_sbrk+0x64>)
 8002fb8:	681a      	ldr	r2, [r3, #0]
 8002fba:	687b      	ldr	r3, [r7, #4]
 8002fbc:	4413      	add	r3, r2
 8002fbe:	693a      	ldr	r2, [r7, #16]
 8002fc0:	429a      	cmp	r2, r3
 8002fc2:	d207      	bcs.n	8002fd4 <_sbrk+0x40>
  {
    errno = ENOMEM;
 8002fc4:	f005 fb78 	bl	80086b8 <__errno>
 8002fc8:	4603      	mov	r3, r0
 8002fca:	220c      	movs	r2, #12
 8002fcc:	601a      	str	r2, [r3, #0]
    return (void *)-1;
 8002fce:	f04f 33ff 	mov.w	r3, #4294967295	; 0xffffffff
 8002fd2:	e009      	b.n	8002fe8 <_sbrk+0x54>
  }

  prev_heap_end = __sbrk_heap_end;
 8002fd4:	4b08      	ldr	r3, [pc, #32]	; (8002ff8 <_sbrk+0x64>)
 8002fd6:	681b      	ldr	r3, [r3, #0]
 8002fd8:	60fb      	str	r3, [r7, #12]
  __sbrk_heap_end += incr;
 8002fda:	4b07      	ldr	r3, [pc, #28]	; (8002ff8 <_sbrk+0x64>)
 8002fdc:	681a      	ldr	r2, [r3, #0]
 8002fde:	687b      	ldr	r3, [r7, #4]
 8002fe0:	4413      	add	r3, r2
 8002fe2:	4a05      	ldr	r2, [pc, #20]	; (8002ff8 <_sbrk+0x64>)
 8002fe4:	6013      	str	r3, [r2, #0]

  return (void *)prev_heap_end;
 8002fe6:	68fb      	ldr	r3, [r7, #12]
}
 8002fe8:	4618      	mov	r0, r3
 8002fea:	3718      	adds	r7, #24
 8002fec:	46bd      	mov	sp, r7
 8002fee:	bd80      	pop	{r7, pc}
 8002ff0:	20020000 	.word	0x20020000
 8002ff4:	00000400 	.word	0x00000400
 8002ff8:	200001ac 	.word	0x200001ac
 8002ffc:	20000440 	.word	0x20000440

08003000 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8003000:	b480      	push	{r7}
 8003002:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8003004:	4b06      	ldr	r3, [pc, #24]	; (8003020 <SystemInit+0x20>)
 8003006:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800300a:	4a05      	ldr	r2, [pc, #20]	; (8003020 <SystemInit+0x20>)
 800300c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8003010:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location -------------------------------------*/
#if defined(USER_VECT_TAB_ADDRESS)
  SCB->VTOR = VECT_TAB_BASE_ADDRESS | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#endif /* USER_VECT_TAB_ADDRESS */
}
 8003014:	bf00      	nop
 8003016:	46bd      	mov	sp, r7
 8003018:	f85d 7b04 	ldr.w	r7, [sp], #4
 800301c:	4770      	bx	lr
 800301e:	bf00      	nop
 8003020:	e000ed00 	.word	0xe000ed00

08003024 <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
  ldr   sp, =_estack    		 /* set stack pointer */
 8003024:	f8df d034 	ldr.w	sp, [pc, #52]	; 800305c <LoopFillZerobss+0x12>

/* Copy the data segment initializers from flash to SRAM */  
  ldr r0, =_sdata
 8003028:	480d      	ldr	r0, [pc, #52]	; (8003060 <LoopFillZerobss+0x16>)
  ldr r1, =_edata
 800302a:	490e      	ldr	r1, [pc, #56]	; (8003064 <LoopFillZerobss+0x1a>)
  ldr r2, =_sidata
 800302c:	4a0e      	ldr	r2, [pc, #56]	; (8003068 <LoopFillZerobss+0x1e>)
  movs r3, #0
 800302e:	2300      	movs	r3, #0
  b LoopCopyDataInit
 8003030:	e002      	b.n	8003038 <LoopCopyDataInit>

08003032 <CopyDataInit>:

CopyDataInit:
  ldr r4, [r2, r3]
 8003032:	58d4      	ldr	r4, [r2, r3]
  str r4, [r0, r3]
 8003034:	50c4      	str	r4, [r0, r3]
  adds r3, r3, #4
 8003036:	3304      	adds	r3, #4

08003038 <LoopCopyDataInit>:

LoopCopyDataInit:
  adds r4, r0, r3
 8003038:	18c4      	adds	r4, r0, r3
  cmp r4, r1
 800303a:	428c      	cmp	r4, r1
  bcc CopyDataInit
 800303c:	d3f9      	bcc.n	8003032 <CopyDataInit>
  
/* Zero fill the bss segment. */
  ldr r2, =_sbss
 800303e:	4a0b      	ldr	r2, [pc, #44]	; (800306c <LoopFillZerobss+0x22>)
  ldr r4, =_ebss
 8003040:	4c0b      	ldr	r4, [pc, #44]	; (8003070 <LoopFillZerobss+0x26>)
  movs r3, #0
 8003042:	2300      	movs	r3, #0
  b LoopFillZerobss
 8003044:	e001      	b.n	800304a <LoopFillZerobss>

08003046 <FillZerobss>:

FillZerobss:
  str  r3, [r2]
 8003046:	6013      	str	r3, [r2, #0]
  adds r2, r2, #4
 8003048:	3204      	adds	r2, #4

0800304a <LoopFillZerobss>:

LoopFillZerobss:
  cmp r2, r4
 800304a:	42a2      	cmp	r2, r4
  bcc FillZerobss
 800304c:	d3fb      	bcc.n	8003046 <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 800304e:	f7ff ffd7 	bl	8003000 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 8003052:	f005 fb37 	bl	80086c4 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 8003056:	f7fe f805 	bl	8001064 <main>
  bx  lr    
 800305a:	4770      	bx	lr
  ldr   sp, =_estack    		 /* set stack pointer */
 800305c:	20020000 	.word	0x20020000
  ldr r0, =_sdata
 8003060:	20000000 	.word	0x20000000
  ldr r1, =_edata
 8003064:	200000a8 	.word	0x200000a8
  ldr r2, =_sidata
 8003068:	08009828 	.word	0x08009828
  ldr r2, =_sbss
 800306c:	200000a8 	.word	0x200000a8
  ldr r4, =_ebss
 8003070:	20000440 	.word	0x20000440

08003074 <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 8003074:	e7fe      	b.n	8003074 <ADC_IRQHandler>
	...

08003078 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8003078:	b580      	push	{r7, lr}
 800307a:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 800307c:	4b0e      	ldr	r3, [pc, #56]	; (80030b8 <HAL_Init+0x40>)
 800307e:	681b      	ldr	r3, [r3, #0]
 8003080:	4a0d      	ldr	r2, [pc, #52]	; (80030b8 <HAL_Init+0x40>)
 8003082:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 8003086:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8003088:	4b0b      	ldr	r3, [pc, #44]	; (80030b8 <HAL_Init+0x40>)
 800308a:	681b      	ldr	r3, [r3, #0]
 800308c:	4a0a      	ldr	r2, [pc, #40]	; (80030b8 <HAL_Init+0x40>)
 800308e:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 8003092:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 8003094:	4b08      	ldr	r3, [pc, #32]	; (80030b8 <HAL_Init+0x40>)
 8003096:	681b      	ldr	r3, [r3, #0]
 8003098:	4a07      	ldr	r2, [pc, #28]	; (80030b8 <HAL_Init+0x40>)
 800309a:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 800309e:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80030a0:	2003      	movs	r0, #3
 80030a2:	f000 f94f 	bl	8003344 <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80030a6:	2000      	movs	r0, #0
 80030a8:	f000 f808 	bl	80030bc <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80030ac:	f7ff fcc8 	bl	8002a40 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80030b0:	2300      	movs	r3, #0
}
 80030b2:	4618      	mov	r0, r3
 80030b4:	bd80      	pop	{r7, pc}
 80030b6:	bf00      	nop
 80030b8:	40023c00 	.word	0x40023c00

080030bc <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80030bc:	b580      	push	{r7, lr}
 80030be:	b082      	sub	sp, #8
 80030c0:	af00      	add	r7, sp, #0
 80030c2:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80030c4:	4b12      	ldr	r3, [pc, #72]	; (8003110 <HAL_InitTick+0x54>)
 80030c6:	681a      	ldr	r2, [r3, #0]
 80030c8:	4b12      	ldr	r3, [pc, #72]	; (8003114 <HAL_InitTick+0x58>)
 80030ca:	781b      	ldrb	r3, [r3, #0]
 80030cc:	4619      	mov	r1, r3
 80030ce:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80030d2:	fbb3 f3f1 	udiv	r3, r3, r1
 80030d6:	fbb2 f3f3 	udiv	r3, r2, r3
 80030da:	4618      	mov	r0, r3
 80030dc:	f000 f975 	bl	80033ca <HAL_SYSTICK_Config>
 80030e0:	4603      	mov	r3, r0
 80030e2:	2b00      	cmp	r3, #0
 80030e4:	d001      	beq.n	80030ea <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80030e6:	2301      	movs	r3, #1
 80030e8:	e00e      	b.n	8003108 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80030ea:	687b      	ldr	r3, [r7, #4]
 80030ec:	2b0f      	cmp	r3, #15
 80030ee:	d80a      	bhi.n	8003106 <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80030f0:	2200      	movs	r2, #0
 80030f2:	6879      	ldr	r1, [r7, #4]
 80030f4:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 80030f8:	f000 f92f 	bl	800335a <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 80030fc:	4a06      	ldr	r2, [pc, #24]	; (8003118 <HAL_InitTick+0x5c>)
 80030fe:	687b      	ldr	r3, [r7, #4]
 8003100:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8003102:	2300      	movs	r3, #0
 8003104:	e000      	b.n	8003108 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8003106:	2301      	movs	r3, #1
}
 8003108:	4618      	mov	r0, r3
 800310a:	3708      	adds	r7, #8
 800310c:	46bd      	mov	sp, r7
 800310e:	bd80      	pop	{r7, pc}
 8003110:	20000034 	.word	0x20000034
 8003114:	2000003c 	.word	0x2000003c
 8003118:	20000038 	.word	0x20000038

0800311c <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 800311c:	b480      	push	{r7}
 800311e:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8003120:	4b06      	ldr	r3, [pc, #24]	; (800313c <HAL_IncTick+0x20>)
 8003122:	781b      	ldrb	r3, [r3, #0]
 8003124:	461a      	mov	r2, r3
 8003126:	4b06      	ldr	r3, [pc, #24]	; (8003140 <HAL_IncTick+0x24>)
 8003128:	681b      	ldr	r3, [r3, #0]
 800312a:	4413      	add	r3, r2
 800312c:	4a04      	ldr	r2, [pc, #16]	; (8003140 <HAL_IncTick+0x24>)
 800312e:	6013      	str	r3, [r2, #0]
}
 8003130:	bf00      	nop
 8003132:	46bd      	mov	sp, r7
 8003134:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003138:	4770      	bx	lr
 800313a:	bf00      	nop
 800313c:	2000003c 	.word	0x2000003c
 8003140:	2000042c 	.word	0x2000042c

08003144 <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8003144:	b480      	push	{r7}
 8003146:	af00      	add	r7, sp, #0
  return uwTick;
 8003148:	4b03      	ldr	r3, [pc, #12]	; (8003158 <HAL_GetTick+0x14>)
 800314a:	681b      	ldr	r3, [r3, #0]
}
 800314c:	4618      	mov	r0, r3
 800314e:	46bd      	mov	sp, r7
 8003150:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003154:	4770      	bx	lr
 8003156:	bf00      	nop
 8003158:	2000042c 	.word	0x2000042c

0800315c <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 800315c:	b480      	push	{r7}
 800315e:	b085      	sub	sp, #20
 8003160:	af00      	add	r7, sp, #0
 8003162:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8003164:	687b      	ldr	r3, [r7, #4]
 8003166:	f003 0307 	and.w	r3, r3, #7
 800316a:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 800316c:	4b0c      	ldr	r3, [pc, #48]	; (80031a0 <__NVIC_SetPriorityGrouping+0x44>)
 800316e:	68db      	ldr	r3, [r3, #12]
 8003170:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8003172:	68ba      	ldr	r2, [r7, #8]
 8003174:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8003178:	4013      	ands	r3, r2
 800317a:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 800317c:	68fb      	ldr	r3, [r7, #12]
 800317e:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8003180:	68bb      	ldr	r3, [r7, #8]
 8003182:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8003184:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8003188:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 800318c:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 800318e:	4a04      	ldr	r2, [pc, #16]	; (80031a0 <__NVIC_SetPriorityGrouping+0x44>)
 8003190:	68bb      	ldr	r3, [r7, #8]
 8003192:	60d3      	str	r3, [r2, #12]
}
 8003194:	bf00      	nop
 8003196:	3714      	adds	r7, #20
 8003198:	46bd      	mov	sp, r7
 800319a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800319e:	4770      	bx	lr
 80031a0:	e000ed00 	.word	0xe000ed00

080031a4 <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 80031a4:	b480      	push	{r7}
 80031a6:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 80031a8:	4b04      	ldr	r3, [pc, #16]	; (80031bc <__NVIC_GetPriorityGrouping+0x18>)
 80031aa:	68db      	ldr	r3, [r3, #12]
 80031ac:	0a1b      	lsrs	r3, r3, #8
 80031ae:	f003 0307 	and.w	r3, r3, #7
}
 80031b2:	4618      	mov	r0, r3
 80031b4:	46bd      	mov	sp, r7
 80031b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031ba:	4770      	bx	lr
 80031bc:	e000ed00 	.word	0xe000ed00

080031c0 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 80031c0:	b480      	push	{r7}
 80031c2:	b083      	sub	sp, #12
 80031c4:	af00      	add	r7, sp, #0
 80031c6:	4603      	mov	r3, r0
 80031c8:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 80031ca:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031ce:	2b00      	cmp	r3, #0
 80031d0:	db0b      	blt.n	80031ea <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 80031d2:	79fb      	ldrb	r3, [r7, #7]
 80031d4:	f003 021f 	and.w	r2, r3, #31
 80031d8:	4907      	ldr	r1, [pc, #28]	; (80031f8 <__NVIC_EnableIRQ+0x38>)
 80031da:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80031de:	095b      	lsrs	r3, r3, #5
 80031e0:	2001      	movs	r0, #1
 80031e2:	fa00 f202 	lsl.w	r2, r0, r2
 80031e6:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 80031ea:	bf00      	nop
 80031ec:	370c      	adds	r7, #12
 80031ee:	46bd      	mov	sp, r7
 80031f0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80031f4:	4770      	bx	lr
 80031f6:	bf00      	nop
 80031f8:	e000e100 	.word	0xe000e100

080031fc <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80031fc:	b480      	push	{r7}
 80031fe:	b083      	sub	sp, #12
 8003200:	af00      	add	r7, sp, #0
 8003202:	4603      	mov	r3, r0
 8003204:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003206:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800320a:	2b00      	cmp	r3, #0
 800320c:	db12      	blt.n	8003234 <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 800320e:	79fb      	ldrb	r3, [r7, #7]
 8003210:	f003 021f 	and.w	r2, r3, #31
 8003214:	490a      	ldr	r1, [pc, #40]	; (8003240 <__NVIC_DisableIRQ+0x44>)
 8003216:	f997 3007 	ldrsb.w	r3, [r7, #7]
 800321a:	095b      	lsrs	r3, r3, #5
 800321c:	2001      	movs	r0, #1
 800321e:	fa00 f202 	lsl.w	r2, r0, r2
 8003222:	3320      	adds	r3, #32
 8003224:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8003228:	f3bf 8f4f 	dsb	sy
}
 800322c:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 800322e:	f3bf 8f6f 	isb	sy
}
 8003232:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8003234:	bf00      	nop
 8003236:	370c      	adds	r7, #12
 8003238:	46bd      	mov	sp, r7
 800323a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800323e:	4770      	bx	lr
 8003240:	e000e100 	.word	0xe000e100

08003244 <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8003244:	b480      	push	{r7}
 8003246:	b083      	sub	sp, #12
 8003248:	af00      	add	r7, sp, #0
 800324a:	4603      	mov	r3, r0
 800324c:	6039      	str	r1, [r7, #0]
 800324e:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8003250:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003254:	2b00      	cmp	r3, #0
 8003256:	db0a      	blt.n	800326e <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8003258:	683b      	ldr	r3, [r7, #0]
 800325a:	b2da      	uxtb	r2, r3
 800325c:	490c      	ldr	r1, [pc, #48]	; (8003290 <__NVIC_SetPriority+0x4c>)
 800325e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8003262:	0112      	lsls	r2, r2, #4
 8003264:	b2d2      	uxtb	r2, r2
 8003266:	440b      	add	r3, r1
 8003268:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 800326c:	e00a      	b.n	8003284 <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 800326e:	683b      	ldr	r3, [r7, #0]
 8003270:	b2da      	uxtb	r2, r3
 8003272:	4908      	ldr	r1, [pc, #32]	; (8003294 <__NVIC_SetPriority+0x50>)
 8003274:	79fb      	ldrb	r3, [r7, #7]
 8003276:	f003 030f 	and.w	r3, r3, #15
 800327a:	3b04      	subs	r3, #4
 800327c:	0112      	lsls	r2, r2, #4
 800327e:	b2d2      	uxtb	r2, r2
 8003280:	440b      	add	r3, r1
 8003282:	761a      	strb	r2, [r3, #24]
}
 8003284:	bf00      	nop
 8003286:	370c      	adds	r7, #12
 8003288:	46bd      	mov	sp, r7
 800328a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800328e:	4770      	bx	lr
 8003290:	e000e100 	.word	0xe000e100
 8003294:	e000ed00 	.word	0xe000ed00

08003298 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8003298:	b480      	push	{r7}
 800329a:	b089      	sub	sp, #36	; 0x24
 800329c:	af00      	add	r7, sp, #0
 800329e:	60f8      	str	r0, [r7, #12]
 80032a0:	60b9      	str	r1, [r7, #8]
 80032a2:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 80032a4:	68fb      	ldr	r3, [r7, #12]
 80032a6:	f003 0307 	and.w	r3, r3, #7
 80032aa:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 80032ac:	69fb      	ldr	r3, [r7, #28]
 80032ae:	f1c3 0307 	rsb	r3, r3, #7
 80032b2:	2b04      	cmp	r3, #4
 80032b4:	bf28      	it	cs
 80032b6:	2304      	movcs	r3, #4
 80032b8:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 80032ba:	69fb      	ldr	r3, [r7, #28]
 80032bc:	3304      	adds	r3, #4
 80032be:	2b06      	cmp	r3, #6
 80032c0:	d902      	bls.n	80032c8 <NVIC_EncodePriority+0x30>
 80032c2:	69fb      	ldr	r3, [r7, #28]
 80032c4:	3b03      	subs	r3, #3
 80032c6:	e000      	b.n	80032ca <NVIC_EncodePriority+0x32>
 80032c8:	2300      	movs	r3, #0
 80032ca:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032cc:	f04f 32ff 	mov.w	r2, #4294967295	; 0xffffffff
 80032d0:	69bb      	ldr	r3, [r7, #24]
 80032d2:	fa02 f303 	lsl.w	r3, r2, r3
 80032d6:	43da      	mvns	r2, r3
 80032d8:	68bb      	ldr	r3, [r7, #8]
 80032da:	401a      	ands	r2, r3
 80032dc:	697b      	ldr	r3, [r7, #20]
 80032de:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 80032e0:	f04f 31ff 	mov.w	r1, #4294967295	; 0xffffffff
 80032e4:	697b      	ldr	r3, [r7, #20]
 80032e6:	fa01 f303 	lsl.w	r3, r1, r3
 80032ea:	43d9      	mvns	r1, r3
 80032ec:	687b      	ldr	r3, [r7, #4]
 80032ee:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 80032f0:	4313      	orrs	r3, r2
         );
}
 80032f2:	4618      	mov	r0, r3
 80032f4:	3724      	adds	r7, #36	; 0x24
 80032f6:	46bd      	mov	sp, r7
 80032f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80032fc:	4770      	bx	lr
	...

08003300 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8003300:	b580      	push	{r7, lr}
 8003302:	b082      	sub	sp, #8
 8003304:	af00      	add	r7, sp, #0
 8003306:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8003308:	687b      	ldr	r3, [r7, #4]
 800330a:	3b01      	subs	r3, #1
 800330c:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8003310:	d301      	bcc.n	8003316 <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8003312:	2301      	movs	r3, #1
 8003314:	e00f      	b.n	8003336 <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8003316:	4a0a      	ldr	r2, [pc, #40]	; (8003340 <SysTick_Config+0x40>)
 8003318:	687b      	ldr	r3, [r7, #4]
 800331a:	3b01      	subs	r3, #1
 800331c:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 800331e:	210f      	movs	r1, #15
 8003320:	f04f 30ff 	mov.w	r0, #4294967295	; 0xffffffff
 8003324:	f7ff ff8e 	bl	8003244 <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8003328:	4b05      	ldr	r3, [pc, #20]	; (8003340 <SysTick_Config+0x40>)
 800332a:	2200      	movs	r2, #0
 800332c:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 800332e:	4b04      	ldr	r3, [pc, #16]	; (8003340 <SysTick_Config+0x40>)
 8003330:	2207      	movs	r2, #7
 8003332:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8003334:	2300      	movs	r3, #0
}
 8003336:	4618      	mov	r0, r3
 8003338:	3708      	adds	r7, #8
 800333a:	46bd      	mov	sp, r7
 800333c:	bd80      	pop	{r7, pc}
 800333e:	bf00      	nop
 8003340:	e000e010 	.word	0xe000e010

08003344 <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8003344:	b580      	push	{r7, lr}
 8003346:	b082      	sub	sp, #8
 8003348:	af00      	add	r7, sp, #0
 800334a:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 800334c:	6878      	ldr	r0, [r7, #4]
 800334e:	f7ff ff05 	bl	800315c <__NVIC_SetPriorityGrouping>
}
 8003352:	bf00      	nop
 8003354:	3708      	adds	r7, #8
 8003356:	46bd      	mov	sp, r7
 8003358:	bd80      	pop	{r7, pc}

0800335a <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 800335a:	b580      	push	{r7, lr}
 800335c:	b086      	sub	sp, #24
 800335e:	af00      	add	r7, sp, #0
 8003360:	4603      	mov	r3, r0
 8003362:	60b9      	str	r1, [r7, #8]
 8003364:	607a      	str	r2, [r7, #4]
 8003366:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8003368:	2300      	movs	r3, #0
 800336a:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 800336c:	f7ff ff1a 	bl	80031a4 <__NVIC_GetPriorityGrouping>
 8003370:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8003372:	687a      	ldr	r2, [r7, #4]
 8003374:	68b9      	ldr	r1, [r7, #8]
 8003376:	6978      	ldr	r0, [r7, #20]
 8003378:	f7ff ff8e 	bl	8003298 <NVIC_EncodePriority>
 800337c:	4602      	mov	r2, r0
 800337e:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8003382:	4611      	mov	r1, r2
 8003384:	4618      	mov	r0, r3
 8003386:	f7ff ff5d 	bl	8003244 <__NVIC_SetPriority>
}
 800338a:	bf00      	nop
 800338c:	3718      	adds	r7, #24
 800338e:	46bd      	mov	sp, r7
 8003390:	bd80      	pop	{r7, pc}

08003392 <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8003392:	b580      	push	{r7, lr}
 8003394:	b082      	sub	sp, #8
 8003396:	af00      	add	r7, sp, #0
 8003398:	4603      	mov	r3, r0
 800339a:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 800339c:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033a0:	4618      	mov	r0, r3
 80033a2:	f7ff ff0d 	bl	80031c0 <__NVIC_EnableIRQ>
}
 80033a6:	bf00      	nop
 80033a8:	3708      	adds	r7, #8
 80033aa:	46bd      	mov	sp, r7
 80033ac:	bd80      	pop	{r7, pc}

080033ae <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 80033ae:	b580      	push	{r7, lr}
 80033b0:	b082      	sub	sp, #8
 80033b2:	af00      	add	r7, sp, #0
 80033b4:	4603      	mov	r3, r0
 80033b6:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 80033b8:	f997 3007 	ldrsb.w	r3, [r7, #7]
 80033bc:	4618      	mov	r0, r3
 80033be:	f7ff ff1d 	bl	80031fc <__NVIC_DisableIRQ>
}
 80033c2:	bf00      	nop
 80033c4:	3708      	adds	r7, #8
 80033c6:	46bd      	mov	sp, r7
 80033c8:	bd80      	pop	{r7, pc}

080033ca <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 80033ca:	b580      	push	{r7, lr}
 80033cc:	b082      	sub	sp, #8
 80033ce:	af00      	add	r7, sp, #0
 80033d0:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 80033d2:	6878      	ldr	r0, [r7, #4]
 80033d4:	f7ff ff94 	bl	8003300 <SysTick_Config>
 80033d8:	4603      	mov	r3, r0
}
 80033da:	4618      	mov	r0, r3
 80033dc:	3708      	adds	r7, #8
 80033de:	46bd      	mov	sp, r7
 80033e0:	bd80      	pop	{r7, pc}
	...

080033e4 <HAL_DMA_Init>:
  * @param  hdma Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Init(DMA_HandleTypeDef *hdma)
{
 80033e4:	b580      	push	{r7, lr}
 80033e6:	b086      	sub	sp, #24
 80033e8:	af00      	add	r7, sp, #0
 80033ea:	6078      	str	r0, [r7, #4]
  uint32_t tmp = 0U;
 80033ec:	2300      	movs	r3, #0
 80033ee:	617b      	str	r3, [r7, #20]
  uint32_t tickstart = HAL_GetTick();
 80033f0:	f7ff fea8 	bl	8003144 <HAL_GetTick>
 80033f4:	6138      	str	r0, [r7, #16]
  DMA_Base_Registers *regs;

  /* Check the DMA peripheral state */
  if(hdma == NULL)
 80033f6:	687b      	ldr	r3, [r7, #4]
 80033f8:	2b00      	cmp	r3, #0
 80033fa:	d101      	bne.n	8003400 <HAL_DMA_Init+0x1c>
  {
    return HAL_ERROR;
 80033fc:	2301      	movs	r3, #1
 80033fe:	e099      	b.n	8003534 <HAL_DMA_Init+0x150>
    assert_param(IS_DMA_MEMORY_BURST(hdma->Init.MemBurst));
    assert_param(IS_DMA_PERIPHERAL_BURST(hdma->Init.PeriphBurst));
  }
  
  /* Allocate lock resource */
  __HAL_UNLOCK(hdma);
 8003400:	687b      	ldr	r3, [r7, #4]
 8003402:	2200      	movs	r2, #0
 8003404:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

  /* Change DMA peripheral state */
  hdma->State = HAL_DMA_STATE_BUSY;
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	2202      	movs	r2, #2
 800340c:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  
  /* Disable the peripheral */
  __HAL_DMA_DISABLE(hdma);
 8003410:	687b      	ldr	r3, [r7, #4]
 8003412:	681b      	ldr	r3, [r3, #0]
 8003414:	681a      	ldr	r2, [r3, #0]
 8003416:	687b      	ldr	r3, [r7, #4]
 8003418:	681b      	ldr	r3, [r3, #0]
 800341a:	f022 0201 	bic.w	r2, r2, #1
 800341e:	601a      	str	r2, [r3, #0]
  
  /* Check if the DMA Stream is effectively disabled */
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003420:	e00f      	b.n	8003442 <HAL_DMA_Init+0x5e>
  {
    /* Check for the Timeout */
    if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003422:	f7ff fe8f 	bl	8003144 <HAL_GetTick>
 8003426:	4602      	mov	r2, r0
 8003428:	693b      	ldr	r3, [r7, #16]
 800342a:	1ad3      	subs	r3, r2, r3
 800342c:	2b05      	cmp	r3, #5
 800342e:	d908      	bls.n	8003442 <HAL_DMA_Init+0x5e>
    {
      /* Update error code */
      hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003430:	687b      	ldr	r3, [r7, #4]
 8003432:	2220      	movs	r2, #32
 8003434:	655a      	str	r2, [r3, #84]	; 0x54
      
      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003436:	687b      	ldr	r3, [r7, #4]
 8003438:	2203      	movs	r2, #3
 800343a:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
      
      return HAL_TIMEOUT;
 800343e:	2303      	movs	r3, #3
 8003440:	e078      	b.n	8003534 <HAL_DMA_Init+0x150>
  while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003442:	687b      	ldr	r3, [r7, #4]
 8003444:	681b      	ldr	r3, [r3, #0]
 8003446:	681b      	ldr	r3, [r3, #0]
 8003448:	f003 0301 	and.w	r3, r3, #1
 800344c:	2b00      	cmp	r3, #0
 800344e:	d1e8      	bne.n	8003422 <HAL_DMA_Init+0x3e>
    }
  }
  
  /* Get the CR register value */
  tmp = hdma->Instance->CR;
 8003450:	687b      	ldr	r3, [r7, #4]
 8003452:	681b      	ldr	r3, [r3, #0]
 8003454:	681b      	ldr	r3, [r3, #0]
 8003456:	617b      	str	r3, [r7, #20]

  /* Clear CHSEL, MBURST, PBURST, PL, MSIZE, PSIZE, MINC, PINC, CIRC, DIR, CT and DBM bits */
  tmp &= ((uint32_t)~(DMA_SxCR_CHSEL | DMA_SxCR_MBURST | DMA_SxCR_PBURST | \
 8003458:	697a      	ldr	r2, [r7, #20]
 800345a:	4b38      	ldr	r3, [pc, #224]	; (800353c <HAL_DMA_Init+0x158>)
 800345c:	4013      	ands	r3, r2
 800345e:	617b      	str	r3, [r7, #20]
                      DMA_SxCR_PL    | DMA_SxCR_MSIZE  | DMA_SxCR_PSIZE  | \
                      DMA_SxCR_MINC  | DMA_SxCR_PINC   | DMA_SxCR_CIRC   | \
                      DMA_SxCR_DIR   | DMA_SxCR_CT     | DMA_SxCR_DBM));

  /* Prepare the DMA Stream configuration */
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 8003460:	687b      	ldr	r3, [r7, #4]
 8003462:	685a      	ldr	r2, [r3, #4]
 8003464:	687b      	ldr	r3, [r7, #4]
 8003466:	689b      	ldr	r3, [r3, #8]
 8003468:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800346a:	687b      	ldr	r3, [r7, #4]
 800346c:	68db      	ldr	r3, [r3, #12]
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800346e:	431a      	orrs	r2, r3
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 8003470:	687b      	ldr	r3, [r7, #4]
 8003472:	691b      	ldr	r3, [r3, #16]
 8003474:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003476:	687b      	ldr	r3, [r7, #4]
 8003478:	695b      	ldr	r3, [r3, #20]
          hdma->Init.PeriphInc           | hdma->Init.MemInc           |
 800347a:	431a      	orrs	r2, r3
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 800347c:	687b      	ldr	r3, [r7, #4]
 800347e:	699b      	ldr	r3, [r3, #24]
 8003480:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003482:	687b      	ldr	r3, [r7, #4]
 8003484:	69db      	ldr	r3, [r3, #28]
          hdma->Init.PeriphDataAlignment | hdma->Init.MemDataAlignment |
 8003486:	431a      	orrs	r2, r3
          hdma->Init.Mode                | hdma->Init.Priority;
 8003488:	687b      	ldr	r3, [r7, #4]
 800348a:	6a1b      	ldr	r3, [r3, #32]
 800348c:	4313      	orrs	r3, r2
  tmp |=  hdma->Init.Channel             | hdma->Init.Direction        |
 800348e:	697a      	ldr	r2, [r7, #20]
 8003490:	4313      	orrs	r3, r2
 8003492:	617b      	str	r3, [r7, #20]

  /* the Memory burst and peripheral burst are not used when the FIFO is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 8003494:	687b      	ldr	r3, [r7, #4]
 8003496:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8003498:	2b04      	cmp	r3, #4
 800349a:	d107      	bne.n	80034ac <HAL_DMA_Init+0xc8>
  {
    /* Get memory burst and peripheral burst */
    tmp |=  hdma->Init.MemBurst | hdma->Init.PeriphBurst;
 800349c:	687b      	ldr	r3, [r7, #4]
 800349e:	6ada      	ldr	r2, [r3, #44]	; 0x2c
 80034a0:	687b      	ldr	r3, [r7, #4]
 80034a2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80034a4:	4313      	orrs	r3, r2
 80034a6:	697a      	ldr	r2, [r7, #20]
 80034a8:	4313      	orrs	r3, r2
 80034aa:	617b      	str	r3, [r7, #20]
  }
  
  /* Write to DMA Stream CR register */
  hdma->Instance->CR = tmp;  
 80034ac:	687b      	ldr	r3, [r7, #4]
 80034ae:	681b      	ldr	r3, [r3, #0]
 80034b0:	697a      	ldr	r2, [r7, #20]
 80034b2:	601a      	str	r2, [r3, #0]

  /* Get the FCR register value */
  tmp = hdma->Instance->FCR;
 80034b4:	687b      	ldr	r3, [r7, #4]
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	695b      	ldr	r3, [r3, #20]
 80034ba:	617b      	str	r3, [r7, #20]

  /* Clear Direct mode and FIFO threshold bits */
  tmp &= (uint32_t)~(DMA_SxFCR_DMDIS | DMA_SxFCR_FTH);
 80034bc:	697b      	ldr	r3, [r7, #20]
 80034be:	f023 0307 	bic.w	r3, r3, #7
 80034c2:	617b      	str	r3, [r7, #20]

  /* Prepare the DMA Stream FIFO configuration */
  tmp |= hdma->Init.FIFOMode;
 80034c4:	687b      	ldr	r3, [r7, #4]
 80034c6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034c8:	697a      	ldr	r2, [r7, #20]
 80034ca:	4313      	orrs	r3, r2
 80034cc:	617b      	str	r3, [r7, #20]

  /* The FIFO threshold is not used when the FIFO mode is disabled */
  if(hdma->Init.FIFOMode == DMA_FIFOMODE_ENABLE)
 80034ce:	687b      	ldr	r3, [r7, #4]
 80034d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80034d2:	2b04      	cmp	r3, #4
 80034d4:	d117      	bne.n	8003506 <HAL_DMA_Init+0x122>
  {
    /* Get the FIFO threshold */
    tmp |= hdma->Init.FIFOThreshold;
 80034d6:	687b      	ldr	r3, [r7, #4]
 80034d8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80034da:	697a      	ldr	r2, [r7, #20]
 80034dc:	4313      	orrs	r3, r2
 80034de:	617b      	str	r3, [r7, #20]
    
    /* Check compatibility between FIFO threshold level and size of the memory burst */
    /* for INCR4, INCR8, INCR16 bursts */
    if (hdma->Init.MemBurst != DMA_MBURST_SINGLE)
 80034e0:	687b      	ldr	r3, [r7, #4]
 80034e2:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80034e4:	2b00      	cmp	r3, #0
 80034e6:	d00e      	beq.n	8003506 <HAL_DMA_Init+0x122>
    {
      if (DMA_CheckFifoParam(hdma) != HAL_OK)
 80034e8:	6878      	ldr	r0, [r7, #4]
 80034ea:	f000 fb0f 	bl	8003b0c <DMA_CheckFifoParam>
 80034ee:	4603      	mov	r3, r0
 80034f0:	2b00      	cmp	r3, #0
 80034f2:	d008      	beq.n	8003506 <HAL_DMA_Init+0x122>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_PARAM;
 80034f4:	687b      	ldr	r3, [r7, #4]
 80034f6:	2240      	movs	r2, #64	; 0x40
 80034f8:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 80034fa:	687b      	ldr	r3, [r7, #4]
 80034fc:	2201      	movs	r2, #1
 80034fe:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_ERROR; 
 8003502:	2301      	movs	r3, #1
 8003504:	e016      	b.n	8003534 <HAL_DMA_Init+0x150>
      }
    }
  }
  
  /* Write to DMA Stream FCR */
  hdma->Instance->FCR = tmp;
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	681b      	ldr	r3, [r3, #0]
 800350a:	697a      	ldr	r2, [r7, #20]
 800350c:	615a      	str	r2, [r3, #20]

  /* Initialize StreamBaseAddress and StreamIndex parameters to be used to calculate
     DMA steam Base Address needed by HAL_DMA_IRQHandler() and HAL_DMA_PollForTransfer() */
  regs = (DMA_Base_Registers *)DMA_CalcBaseAndBitshift(hdma);
 800350e:	6878      	ldr	r0, [r7, #4]
 8003510:	f000 fac6 	bl	8003aa0 <DMA_CalcBaseAndBitshift>
 8003514:	4603      	mov	r3, r0
 8003516:	60fb      	str	r3, [r7, #12]
  
  /* Clear all interrupt flags */
  regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003518:	687b      	ldr	r3, [r7, #4]
 800351a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800351c:	223f      	movs	r2, #63	; 0x3f
 800351e:	409a      	lsls	r2, r3
 8003520:	68fb      	ldr	r3, [r7, #12]
 8003522:	609a      	str	r2, [r3, #8]

  /* Initialize the error code */
  hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003524:	687b      	ldr	r3, [r7, #4]
 8003526:	2200      	movs	r2, #0
 8003528:	655a      	str	r2, [r3, #84]	; 0x54
                                                                                     
  /* Initialize the DMA state */
  hdma->State = HAL_DMA_STATE_READY;
 800352a:	687b      	ldr	r3, [r7, #4]
 800352c:	2201      	movs	r2, #1
 800352e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

  return HAL_OK;
 8003532:	2300      	movs	r3, #0
}
 8003534:	4618      	mov	r0, r3
 8003536:	3718      	adds	r7, #24
 8003538:	46bd      	mov	sp, r7
 800353a:	bd80      	pop	{r7, pc}
 800353c:	f010803f 	.word	0xf010803f

08003540 <HAL_DMA_Start_IT>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Start_IT(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003540:	b580      	push	{r7, lr}
 8003542:	b086      	sub	sp, #24
 8003544:	af00      	add	r7, sp, #0
 8003546:	60f8      	str	r0, [r7, #12]
 8003548:	60b9      	str	r1, [r7, #8]
 800354a:	607a      	str	r2, [r7, #4]
 800354c:	603b      	str	r3, [r7, #0]
  HAL_StatusTypeDef status = HAL_OK;
 800354e:	2300      	movs	r3, #0
 8003550:	75fb      	strb	r3, [r7, #23]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 8003552:	68fb      	ldr	r3, [r7, #12]
 8003554:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003556:	613b      	str	r3, [r7, #16]
  
  /* Check the parameters */
  assert_param(IS_DMA_BUFFER_SIZE(DataLength));
 
  /* Process locked */
  __HAL_LOCK(hdma);
 8003558:	68fb      	ldr	r3, [r7, #12]
 800355a:	f893 3034 	ldrb.w	r3, [r3, #52]	; 0x34
 800355e:	2b01      	cmp	r3, #1
 8003560:	d101      	bne.n	8003566 <HAL_DMA_Start_IT+0x26>
 8003562:	2302      	movs	r3, #2
 8003564:	e040      	b.n	80035e8 <HAL_DMA_Start_IT+0xa8>
 8003566:	68fb      	ldr	r3, [r7, #12]
 8003568:	2201      	movs	r2, #1
 800356a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
  
  if(HAL_DMA_STATE_READY == hdma->State)
 800356e:	68fb      	ldr	r3, [r7, #12]
 8003570:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003574:	b2db      	uxtb	r3, r3
 8003576:	2b01      	cmp	r3, #1
 8003578:	d12f      	bne.n	80035da <HAL_DMA_Start_IT+0x9a>
  {
    /* Change DMA peripheral state */
    hdma->State = HAL_DMA_STATE_BUSY;
 800357a:	68fb      	ldr	r3, [r7, #12]
 800357c:	2202      	movs	r2, #2
 800357e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Initialize the error code */
    hdma->ErrorCode = HAL_DMA_ERROR_NONE;
 8003582:	68fb      	ldr	r3, [r7, #12]
 8003584:	2200      	movs	r2, #0
 8003586:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Configure the source, destination address and the data length */
    DMA_SetConfig(hdma, SrcAddress, DstAddress, DataLength);
 8003588:	683b      	ldr	r3, [r7, #0]
 800358a:	687a      	ldr	r2, [r7, #4]
 800358c:	68b9      	ldr	r1, [r7, #8]
 800358e:	68f8      	ldr	r0, [r7, #12]
 8003590:	f000 fa58 	bl	8003a44 <DMA_SetConfig>
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 8003594:	68fb      	ldr	r3, [r7, #12]
 8003596:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003598:	223f      	movs	r2, #63	; 0x3f
 800359a:	409a      	lsls	r2, r3
 800359c:	693b      	ldr	r3, [r7, #16]
 800359e:	609a      	str	r2, [r3, #8]
    
    /* Enable Common interrupts*/
    hdma->Instance->CR  |= DMA_IT_TC | DMA_IT_TE | DMA_IT_DME;
 80035a0:	68fb      	ldr	r3, [r7, #12]
 80035a2:	681b      	ldr	r3, [r3, #0]
 80035a4:	681a      	ldr	r2, [r3, #0]
 80035a6:	68fb      	ldr	r3, [r7, #12]
 80035a8:	681b      	ldr	r3, [r3, #0]
 80035aa:	f042 0216 	orr.w	r2, r2, #22
 80035ae:	601a      	str	r2, [r3, #0]
    
    if(hdma->XferHalfCpltCallback != NULL)
 80035b0:	68fb      	ldr	r3, [r7, #12]
 80035b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80035b4:	2b00      	cmp	r3, #0
 80035b6:	d007      	beq.n	80035c8 <HAL_DMA_Start_IT+0x88>
    {
      hdma->Instance->CR  |= DMA_IT_HT;
 80035b8:	68fb      	ldr	r3, [r7, #12]
 80035ba:	681b      	ldr	r3, [r3, #0]
 80035bc:	681a      	ldr	r2, [r3, #0]
 80035be:	68fb      	ldr	r3, [r7, #12]
 80035c0:	681b      	ldr	r3, [r3, #0]
 80035c2:	f042 0208 	orr.w	r2, r2, #8
 80035c6:	601a      	str	r2, [r3, #0]
    }
    
    /* Enable the Peripheral */
    __HAL_DMA_ENABLE(hdma);
 80035c8:	68fb      	ldr	r3, [r7, #12]
 80035ca:	681b      	ldr	r3, [r3, #0]
 80035cc:	681a      	ldr	r2, [r3, #0]
 80035ce:	68fb      	ldr	r3, [r7, #12]
 80035d0:	681b      	ldr	r3, [r3, #0]
 80035d2:	f042 0201 	orr.w	r2, r2, #1
 80035d6:	601a      	str	r2, [r3, #0]
 80035d8:	e005      	b.n	80035e6 <HAL_DMA_Start_IT+0xa6>
  }
  else
  {
    /* Process unlocked */
    __HAL_UNLOCK(hdma);	  
 80035da:	68fb      	ldr	r3, [r7, #12]
 80035dc:	2200      	movs	r2, #0
 80035de:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Return error status */
    status = HAL_BUSY;
 80035e2:	2302      	movs	r3, #2
 80035e4:	75fb      	strb	r3, [r7, #23]
  }
  
  return status;
 80035e6:	7dfb      	ldrb	r3, [r7, #23]
}
 80035e8:	4618      	mov	r0, r3
 80035ea:	3718      	adds	r7, #24
 80035ec:	46bd      	mov	sp, r7
 80035ee:	bd80      	pop	{r7, pc}

080035f0 <HAL_DMA_Abort>:
  *        and the Stream will be effectively disabled only after the transfer of
  *        this single data is finished.  
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort(DMA_HandleTypeDef *hdma)
{
 80035f0:	b580      	push	{r7, lr}
 80035f2:	b084      	sub	sp, #16
 80035f4:	af00      	add	r7, sp, #0
 80035f6:	6078      	str	r0, [r7, #4]
  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 80035f8:	687b      	ldr	r3, [r7, #4]
 80035fa:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 80035fc:	60fb      	str	r3, [r7, #12]
  
  uint32_t tickstart = HAL_GetTick();
 80035fe:	f7ff fda1 	bl	8003144 <HAL_GetTick>
 8003602:	60b8      	str	r0, [r7, #8]
  
  if(hdma->State != HAL_DMA_STATE_BUSY)
 8003604:	687b      	ldr	r3, [r7, #4]
 8003606:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 800360a:	b2db      	uxtb	r3, r3
 800360c:	2b02      	cmp	r3, #2
 800360e:	d008      	beq.n	8003622 <HAL_DMA_Abort+0x32>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 8003610:	687b      	ldr	r3, [r7, #4]
 8003612:	2280      	movs	r2, #128	; 0x80
 8003614:	655a      	str	r2, [r3, #84]	; 0x54
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 8003616:	687b      	ldr	r3, [r7, #4]
 8003618:	2200      	movs	r2, #0
 800361a:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    return HAL_ERROR;
 800361e:	2301      	movs	r3, #1
 8003620:	e052      	b.n	80036c8 <HAL_DMA_Abort+0xd8>
  }
  else
  {
    /* Disable all the transfer interrupts */
    hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 8003622:	687b      	ldr	r3, [r7, #4]
 8003624:	681b      	ldr	r3, [r3, #0]
 8003626:	681a      	ldr	r2, [r3, #0]
 8003628:	687b      	ldr	r3, [r7, #4]
 800362a:	681b      	ldr	r3, [r3, #0]
 800362c:	f022 0216 	bic.w	r2, r2, #22
 8003630:	601a      	str	r2, [r3, #0]
    hdma->Instance->FCR &= ~(DMA_IT_FE);
 8003632:	687b      	ldr	r3, [r7, #4]
 8003634:	681b      	ldr	r3, [r3, #0]
 8003636:	695a      	ldr	r2, [r3, #20]
 8003638:	687b      	ldr	r3, [r7, #4]
 800363a:	681b      	ldr	r3, [r3, #0]
 800363c:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8003640:	615a      	str	r2, [r3, #20]
    
    if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 8003642:	687b      	ldr	r3, [r7, #4]
 8003644:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003646:	2b00      	cmp	r3, #0
 8003648:	d103      	bne.n	8003652 <HAL_DMA_Abort+0x62>
 800364a:	687b      	ldr	r3, [r7, #4]
 800364c:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 800364e:	2b00      	cmp	r3, #0
 8003650:	d007      	beq.n	8003662 <HAL_DMA_Abort+0x72>
    {
      hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003652:	687b      	ldr	r3, [r7, #4]
 8003654:	681b      	ldr	r3, [r3, #0]
 8003656:	681a      	ldr	r2, [r3, #0]
 8003658:	687b      	ldr	r3, [r7, #4]
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f022 0208 	bic.w	r2, r2, #8
 8003660:	601a      	str	r2, [r3, #0]
    }
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 8003662:	687b      	ldr	r3, [r7, #4]
 8003664:	681b      	ldr	r3, [r3, #0]
 8003666:	681a      	ldr	r2, [r3, #0]
 8003668:	687b      	ldr	r3, [r7, #4]
 800366a:	681b      	ldr	r3, [r3, #0]
 800366c:	f022 0201 	bic.w	r2, r2, #1
 8003670:	601a      	str	r2, [r3, #0]
    
    /* Check if the DMA Stream is effectively disabled */
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 8003672:	e013      	b.n	800369c <HAL_DMA_Abort+0xac>
    {
      /* Check for the Timeout */
      if((HAL_GetTick() - tickstart ) > HAL_TIMEOUT_DMA_ABORT)
 8003674:	f7ff fd66 	bl	8003144 <HAL_GetTick>
 8003678:	4602      	mov	r2, r0
 800367a:	68bb      	ldr	r3, [r7, #8]
 800367c:	1ad3      	subs	r3, r2, r3
 800367e:	2b05      	cmp	r3, #5
 8003680:	d90c      	bls.n	800369c <HAL_DMA_Abort+0xac>
      {
        /* Update error code */
        hdma->ErrorCode = HAL_DMA_ERROR_TIMEOUT;
 8003682:	687b      	ldr	r3, [r7, #4]
 8003684:	2220      	movs	r2, #32
 8003686:	655a      	str	r2, [r3, #84]	; 0x54
        
        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 8003688:	687b      	ldr	r3, [r7, #4]
 800368a:	2200      	movs	r2, #0
 800368c:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
        
        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_TIMEOUT;
 8003690:	687b      	ldr	r3, [r7, #4]
 8003692:	2203      	movs	r2, #3
 8003694:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        
        return HAL_TIMEOUT;
 8003698:	2303      	movs	r3, #3
 800369a:	e015      	b.n	80036c8 <HAL_DMA_Abort+0xd8>
    while((hdma->Instance->CR & DMA_SxCR_EN) != RESET)
 800369c:	687b      	ldr	r3, [r7, #4]
 800369e:	681b      	ldr	r3, [r3, #0]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0301 	and.w	r3, r3, #1
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d1e4      	bne.n	8003674 <HAL_DMA_Abort+0x84>
      }
    }
    
    /* Clear all interrupt flags at correct offset within the register */
    regs->IFCR = 0x3FU << hdma->StreamIndex;
 80036aa:	687b      	ldr	r3, [r7, #4]
 80036ac:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80036ae:	223f      	movs	r2, #63	; 0x3f
 80036b0:	409a      	lsls	r2, r3
 80036b2:	68fb      	ldr	r3, [r7, #12]
 80036b4:	609a      	str	r2, [r3, #8]
    
    /* Process Unlocked */
    __HAL_UNLOCK(hdma);
 80036b6:	687b      	ldr	r3, [r7, #4]
 80036b8:	2200      	movs	r2, #0
 80036ba:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34
    
    /* Change the DMA state*/
    hdma->State = HAL_DMA_STATE_READY;
 80036be:	687b      	ldr	r3, [r7, #4]
 80036c0:	2201      	movs	r2, #1
 80036c2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
  }
  return HAL_OK;
 80036c6:	2300      	movs	r3, #0
}
 80036c8:	4618      	mov	r0, r3
 80036ca:	3710      	adds	r7, #16
 80036cc:	46bd      	mov	sp, r7
 80036ce:	bd80      	pop	{r7, pc}

080036d0 <HAL_DMA_Abort_IT>:
  * @param  hdma   pointer to a DMA_HandleTypeDef structure that contains
  *                 the configuration information for the specified DMA Stream.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_DMA_Abort_IT(DMA_HandleTypeDef *hdma)
{
 80036d0:	b480      	push	{r7}
 80036d2:	b083      	sub	sp, #12
 80036d4:	af00      	add	r7, sp, #0
 80036d6:	6078      	str	r0, [r7, #4]
  if(hdma->State != HAL_DMA_STATE_BUSY)
 80036d8:	687b      	ldr	r3, [r7, #4]
 80036da:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80036de:	b2db      	uxtb	r3, r3
 80036e0:	2b02      	cmp	r3, #2
 80036e2:	d004      	beq.n	80036ee <HAL_DMA_Abort_IT+0x1e>
  {
    hdma->ErrorCode = HAL_DMA_ERROR_NO_XFER;
 80036e4:	687b      	ldr	r3, [r7, #4]
 80036e6:	2280      	movs	r2, #128	; 0x80
 80036e8:	655a      	str	r2, [r3, #84]	; 0x54
    return HAL_ERROR;
 80036ea:	2301      	movs	r3, #1
 80036ec:	e00c      	b.n	8003708 <HAL_DMA_Abort_IT+0x38>
  }
  else
  {
    /* Set Abort State  */
    hdma->State = HAL_DMA_STATE_ABORT;
 80036ee:	687b      	ldr	r3, [r7, #4]
 80036f0:	2205      	movs	r2, #5
 80036f2:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    
    /* Disable the stream */
    __HAL_DMA_DISABLE(hdma);
 80036f6:	687b      	ldr	r3, [r7, #4]
 80036f8:	681b      	ldr	r3, [r3, #0]
 80036fa:	681a      	ldr	r2, [r3, #0]
 80036fc:	687b      	ldr	r3, [r7, #4]
 80036fe:	681b      	ldr	r3, [r3, #0]
 8003700:	f022 0201 	bic.w	r2, r2, #1
 8003704:	601a      	str	r2, [r3, #0]
  }

  return HAL_OK;
 8003706:	2300      	movs	r3, #0
}
 8003708:	4618      	mov	r0, r3
 800370a:	370c      	adds	r7, #12
 800370c:	46bd      	mov	sp, r7
 800370e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003712:	4770      	bx	lr

08003714 <HAL_DMA_IRQHandler>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.  
  * @retval None
  */
void HAL_DMA_IRQHandler(DMA_HandleTypeDef *hdma)
{
 8003714:	b580      	push	{r7, lr}
 8003716:	b086      	sub	sp, #24
 8003718:	af00      	add	r7, sp, #0
 800371a:	6078      	str	r0, [r7, #4]
  uint32_t tmpisr;
  __IO uint32_t count = 0U;
 800371c:	2300      	movs	r3, #0
 800371e:	60bb      	str	r3, [r7, #8]
  uint32_t timeout = SystemCoreClock / 9600U;
 8003720:	4b92      	ldr	r3, [pc, #584]	; (800396c <HAL_DMA_IRQHandler+0x258>)
 8003722:	681b      	ldr	r3, [r3, #0]
 8003724:	4a92      	ldr	r2, [pc, #584]	; (8003970 <HAL_DMA_IRQHandler+0x25c>)
 8003726:	fba2 2303 	umull	r2, r3, r2, r3
 800372a:	0a9b      	lsrs	r3, r3, #10
 800372c:	617b      	str	r3, [r7, #20]

  /* calculate DMA base and stream number */
  DMA_Base_Registers *regs = (DMA_Base_Registers *)hdma->StreamBaseAddress;
 800372e:	687b      	ldr	r3, [r7, #4]
 8003730:	6d9b      	ldr	r3, [r3, #88]	; 0x58
 8003732:	613b      	str	r3, [r7, #16]

  tmpisr = regs->ISR;
 8003734:	693b      	ldr	r3, [r7, #16]
 8003736:	681b      	ldr	r3, [r3, #0]
 8003738:	60fb      	str	r3, [r7, #12]

  /* Transfer Error Interrupt management ***************************************/
  if ((tmpisr & (DMA_FLAG_TEIF0_4 << hdma->StreamIndex)) != RESET)
 800373a:	687b      	ldr	r3, [r7, #4]
 800373c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800373e:	2208      	movs	r2, #8
 8003740:	409a      	lsls	r2, r3
 8003742:	68fb      	ldr	r3, [r7, #12]
 8003744:	4013      	ands	r3, r2
 8003746:	2b00      	cmp	r3, #0
 8003748:	d01a      	beq.n	8003780 <HAL_DMA_IRQHandler+0x6c>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TE) != RESET)
 800374a:	687b      	ldr	r3, [r7, #4]
 800374c:	681b      	ldr	r3, [r3, #0]
 800374e:	681b      	ldr	r3, [r3, #0]
 8003750:	f003 0304 	and.w	r3, r3, #4
 8003754:	2b00      	cmp	r3, #0
 8003756:	d013      	beq.n	8003780 <HAL_DMA_IRQHandler+0x6c>
    {
      /* Disable the transfer error interrupt */
      hdma->Instance->CR  &= ~(DMA_IT_TE);
 8003758:	687b      	ldr	r3, [r7, #4]
 800375a:	681b      	ldr	r3, [r3, #0]
 800375c:	681a      	ldr	r2, [r3, #0]
 800375e:	687b      	ldr	r3, [r7, #4]
 8003760:	681b      	ldr	r3, [r3, #0]
 8003762:	f022 0204 	bic.w	r2, r2, #4
 8003766:	601a      	str	r2, [r3, #0]
      
      /* Clear the transfer error flag */
      regs->IFCR = DMA_FLAG_TEIF0_4 << hdma->StreamIndex;
 8003768:	687b      	ldr	r3, [r7, #4]
 800376a:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800376c:	2208      	movs	r2, #8
 800376e:	409a      	lsls	r2, r3
 8003770:	693b      	ldr	r3, [r7, #16]
 8003772:	609a      	str	r2, [r3, #8]
      
      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_TE;
 8003774:	687b      	ldr	r3, [r7, #4]
 8003776:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 8003778:	f043 0201 	orr.w	r2, r3, #1
 800377c:	687b      	ldr	r3, [r7, #4]
 800377e:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* FIFO Error Interrupt management ******************************************/
  if ((tmpisr & (DMA_FLAG_FEIF0_4 << hdma->StreamIndex)) != RESET)
 8003780:	687b      	ldr	r3, [r7, #4]
 8003782:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003784:	2201      	movs	r2, #1
 8003786:	409a      	lsls	r2, r3
 8003788:	68fb      	ldr	r3, [r7, #12]
 800378a:	4013      	ands	r3, r2
 800378c:	2b00      	cmp	r3, #0
 800378e:	d012      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xa2>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_FE) != RESET)
 8003790:	687b      	ldr	r3, [r7, #4]
 8003792:	681b      	ldr	r3, [r3, #0]
 8003794:	695b      	ldr	r3, [r3, #20]
 8003796:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800379a:	2b00      	cmp	r3, #0
 800379c:	d00b      	beq.n	80037b6 <HAL_DMA_IRQHandler+0xa2>
    {
      /* Clear the FIFO error flag */
      regs->IFCR = DMA_FLAG_FEIF0_4 << hdma->StreamIndex;
 800379e:	687b      	ldr	r3, [r7, #4]
 80037a0:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037a2:	2201      	movs	r2, #1
 80037a4:	409a      	lsls	r2, r3
 80037a6:	693b      	ldr	r3, [r7, #16]
 80037a8:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_FE;
 80037aa:	687b      	ldr	r3, [r7, #4]
 80037ac:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037ae:	f043 0202 	orr.w	r2, r3, #2
 80037b2:	687b      	ldr	r3, [r7, #4]
 80037b4:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Direct Mode Error Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_DMEIF0_4 << hdma->StreamIndex)) != RESET)
 80037b6:	687b      	ldr	r3, [r7, #4]
 80037b8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037ba:	2204      	movs	r2, #4
 80037bc:	409a      	lsls	r2, r3
 80037be:	68fb      	ldr	r3, [r7, #12]
 80037c0:	4013      	ands	r3, r2
 80037c2:	2b00      	cmp	r3, #0
 80037c4:	d012      	beq.n	80037ec <HAL_DMA_IRQHandler+0xd8>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_DME) != RESET)
 80037c6:	687b      	ldr	r3, [r7, #4]
 80037c8:	681b      	ldr	r3, [r3, #0]
 80037ca:	681b      	ldr	r3, [r3, #0]
 80037cc:	f003 0302 	and.w	r3, r3, #2
 80037d0:	2b00      	cmp	r3, #0
 80037d2:	d00b      	beq.n	80037ec <HAL_DMA_IRQHandler+0xd8>
    {
      /* Clear the direct mode error flag */
      regs->IFCR = DMA_FLAG_DMEIF0_4 << hdma->StreamIndex;
 80037d4:	687b      	ldr	r3, [r7, #4]
 80037d6:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037d8:	2204      	movs	r2, #4
 80037da:	409a      	lsls	r2, r3
 80037dc:	693b      	ldr	r3, [r7, #16]
 80037de:	609a      	str	r2, [r3, #8]

      /* Update error code */
      hdma->ErrorCode |= HAL_DMA_ERROR_DME;
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80037e4:	f043 0204 	orr.w	r2, r3, #4
 80037e8:	687b      	ldr	r3, [r7, #4]
 80037ea:	655a      	str	r2, [r3, #84]	; 0x54
    }
  }
  /* Half Transfer Complete Interrupt management ******************************/
  if ((tmpisr & (DMA_FLAG_HTIF0_4 << hdma->StreamIndex)) != RESET)
 80037ec:	687b      	ldr	r3, [r7, #4]
 80037ee:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80037f0:	2210      	movs	r2, #16
 80037f2:	409a      	lsls	r2, r3
 80037f4:	68fb      	ldr	r3, [r7, #12]
 80037f6:	4013      	ands	r3, r2
 80037f8:	2b00      	cmp	r3, #0
 80037fa:	d043      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_HT) != RESET)
 80037fc:	687b      	ldr	r3, [r7, #4]
 80037fe:	681b      	ldr	r3, [r3, #0]
 8003800:	681b      	ldr	r3, [r3, #0]
 8003802:	f003 0308 	and.w	r3, r3, #8
 8003806:	2b00      	cmp	r3, #0
 8003808:	d03c      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
    {
      /* Clear the half transfer complete flag */
      regs->IFCR = DMA_FLAG_HTIF0_4 << hdma->StreamIndex;
 800380a:	687b      	ldr	r3, [r7, #4]
 800380c:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 800380e:	2210      	movs	r2, #16
 8003810:	409a      	lsls	r2, r3
 8003812:	693b      	ldr	r3, [r7, #16]
 8003814:	609a      	str	r2, [r3, #8]
      
      /* Multi_Buffering mode enabled */
      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 8003816:	687b      	ldr	r3, [r7, #4]
 8003818:	681b      	ldr	r3, [r3, #0]
 800381a:	681b      	ldr	r3, [r3, #0]
 800381c:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003820:	2b00      	cmp	r3, #0
 8003822:	d018      	beq.n	8003856 <HAL_DMA_IRQHandler+0x142>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 8003824:	687b      	ldr	r3, [r7, #4]
 8003826:	681b      	ldr	r3, [r3, #0]
 8003828:	681b      	ldr	r3, [r3, #0]
 800382a:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 800382e:	2b00      	cmp	r3, #0
 8003830:	d108      	bne.n	8003844 <HAL_DMA_IRQHandler+0x130>
        {
          if(hdma->XferHalfCpltCallback != NULL)
 8003832:	687b      	ldr	r3, [r7, #4]
 8003834:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003836:	2b00      	cmp	r3, #0
 8003838:	d024      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferHalfCpltCallback(hdma);
 800383a:	687b      	ldr	r3, [r7, #4]
 800383c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800383e:	6878      	ldr	r0, [r7, #4]
 8003840:	4798      	blx	r3
 8003842:	e01f      	b.n	8003884 <HAL_DMA_IRQHandler+0x170>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferM1HalfCpltCallback != NULL)
 8003844:	687b      	ldr	r3, [r7, #4]
 8003846:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003848:	2b00      	cmp	r3, #0
 800384a:	d01b      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
          {
            /* Half transfer callback */
            hdma->XferM1HalfCpltCallback(hdma);
 800384c:	687b      	ldr	r3, [r7, #4]
 800384e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8003850:	6878      	ldr	r0, [r7, #4]
 8003852:	4798      	blx	r3
 8003854:	e016      	b.n	8003884 <HAL_DMA_IRQHandler+0x170>
        }
      }
      else
      {
        /* Disable the half transfer interrupt if the DMA mode is not CIRCULAR */
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003856:	687b      	ldr	r3, [r7, #4]
 8003858:	681b      	ldr	r3, [r3, #0]
 800385a:	681b      	ldr	r3, [r3, #0]
 800385c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8003860:	2b00      	cmp	r3, #0
 8003862:	d107      	bne.n	8003874 <HAL_DMA_IRQHandler+0x160>
        {
          /* Disable the half transfer interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 8003864:	687b      	ldr	r3, [r7, #4]
 8003866:	681b      	ldr	r3, [r3, #0]
 8003868:	681a      	ldr	r2, [r3, #0]
 800386a:	687b      	ldr	r3, [r7, #4]
 800386c:	681b      	ldr	r3, [r3, #0]
 800386e:	f022 0208 	bic.w	r2, r2, #8
 8003872:	601a      	str	r2, [r3, #0]
        }
        
        if(hdma->XferHalfCpltCallback != NULL)
 8003874:	687b      	ldr	r3, [r7, #4]
 8003876:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003878:	2b00      	cmp	r3, #0
 800387a:	d003      	beq.n	8003884 <HAL_DMA_IRQHandler+0x170>
        {
          /* Half transfer callback */
          hdma->XferHalfCpltCallback(hdma);
 800387c:	687b      	ldr	r3, [r7, #4]
 800387e:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8003880:	6878      	ldr	r0, [r7, #4]
 8003882:	4798      	blx	r3
        }
      }
    }
  }
  /* Transfer Complete Interrupt management ***********************************/
  if ((tmpisr & (DMA_FLAG_TCIF0_4 << hdma->StreamIndex)) != RESET)
 8003884:	687b      	ldr	r3, [r7, #4]
 8003886:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003888:	2220      	movs	r2, #32
 800388a:	409a      	lsls	r2, r3
 800388c:	68fb      	ldr	r3, [r7, #12]
 800388e:	4013      	ands	r3, r2
 8003890:	2b00      	cmp	r3, #0
 8003892:	f000 808e 	beq.w	80039b2 <HAL_DMA_IRQHandler+0x29e>
  {
    if(__HAL_DMA_GET_IT_SOURCE(hdma, DMA_IT_TC) != RESET)
 8003896:	687b      	ldr	r3, [r7, #4]
 8003898:	681b      	ldr	r3, [r3, #0]
 800389a:	681b      	ldr	r3, [r3, #0]
 800389c:	f003 0310 	and.w	r3, r3, #16
 80038a0:	2b00      	cmp	r3, #0
 80038a2:	f000 8086 	beq.w	80039b2 <HAL_DMA_IRQHandler+0x29e>
    {
      /* Clear the transfer complete flag */
      regs->IFCR = DMA_FLAG_TCIF0_4 << hdma->StreamIndex;
 80038a6:	687b      	ldr	r3, [r7, #4]
 80038a8:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 80038aa:	2220      	movs	r2, #32
 80038ac:	409a      	lsls	r2, r3
 80038ae:	693b      	ldr	r3, [r7, #16]
 80038b0:	609a      	str	r2, [r3, #8]
      
      if(HAL_DMA_STATE_ABORT == hdma->State)
 80038b2:	687b      	ldr	r3, [r7, #4]
 80038b4:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 80038b8:	b2db      	uxtb	r3, r3
 80038ba:	2b05      	cmp	r3, #5
 80038bc:	d136      	bne.n	800392c <HAL_DMA_IRQHandler+0x218>
      {
        /* Disable all the transfer interrupts */
        hdma->Instance->CR  &= ~(DMA_IT_TC | DMA_IT_TE | DMA_IT_DME);
 80038be:	687b      	ldr	r3, [r7, #4]
 80038c0:	681b      	ldr	r3, [r3, #0]
 80038c2:	681a      	ldr	r2, [r3, #0]
 80038c4:	687b      	ldr	r3, [r7, #4]
 80038c6:	681b      	ldr	r3, [r3, #0]
 80038c8:	f022 0216 	bic.w	r2, r2, #22
 80038cc:	601a      	str	r2, [r3, #0]
        hdma->Instance->FCR &= ~(DMA_IT_FE);
 80038ce:	687b      	ldr	r3, [r7, #4]
 80038d0:	681b      	ldr	r3, [r3, #0]
 80038d2:	695a      	ldr	r2, [r3, #20]
 80038d4:	687b      	ldr	r3, [r7, #4]
 80038d6:	681b      	ldr	r3, [r3, #0]
 80038d8:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 80038dc:	615a      	str	r2, [r3, #20]
        
        if((hdma->XferHalfCpltCallback != NULL) || (hdma->XferM1HalfCpltCallback != NULL))
 80038de:	687b      	ldr	r3, [r7, #4]
 80038e0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80038e2:	2b00      	cmp	r3, #0
 80038e4:	d103      	bne.n	80038ee <HAL_DMA_IRQHandler+0x1da>
 80038e6:	687b      	ldr	r3, [r7, #4]
 80038e8:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 80038ea:	2b00      	cmp	r3, #0
 80038ec:	d007      	beq.n	80038fe <HAL_DMA_IRQHandler+0x1ea>
        {
          hdma->Instance->CR  &= ~(DMA_IT_HT);
 80038ee:	687b      	ldr	r3, [r7, #4]
 80038f0:	681b      	ldr	r3, [r3, #0]
 80038f2:	681a      	ldr	r2, [r3, #0]
 80038f4:	687b      	ldr	r3, [r7, #4]
 80038f6:	681b      	ldr	r3, [r3, #0]
 80038f8:	f022 0208 	bic.w	r2, r2, #8
 80038fc:	601a      	str	r2, [r3, #0]
        }

        /* Clear all interrupt flags at correct offset within the register */
        regs->IFCR = 0x3FU << hdma->StreamIndex;
 80038fe:	687b      	ldr	r3, [r7, #4]
 8003900:	6ddb      	ldr	r3, [r3, #92]	; 0x5c
 8003902:	223f      	movs	r2, #63	; 0x3f
 8003904:	409a      	lsls	r2, r3
 8003906:	693b      	ldr	r3, [r7, #16]
 8003908:	609a      	str	r2, [r3, #8]

        /* Process Unlocked */
        __HAL_UNLOCK(hdma);
 800390a:	687b      	ldr	r3, [r7, #4]
 800390c:	2200      	movs	r2, #0
 800390e:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

        /* Change the DMA state */
        hdma->State = HAL_DMA_STATE_READY;
 8003912:	687b      	ldr	r3, [r7, #4]
 8003914:	2201      	movs	r2, #1
 8003916:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

        if(hdma->XferAbortCallback != NULL)
 800391a:	687b      	ldr	r3, [r7, #4]
 800391c:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 800391e:	2b00      	cmp	r3, #0
 8003920:	d07d      	beq.n	8003a1e <HAL_DMA_IRQHandler+0x30a>
        {
          hdma->XferAbortCallback(hdma);
 8003922:	687b      	ldr	r3, [r7, #4]
 8003924:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8003926:	6878      	ldr	r0, [r7, #4]
 8003928:	4798      	blx	r3
        }
        return;
 800392a:	e078      	b.n	8003a1e <HAL_DMA_IRQHandler+0x30a>
      }

      if(((hdma->Instance->CR) & (uint32_t)(DMA_SxCR_DBM)) != RESET)
 800392c:	687b      	ldr	r3, [r7, #4]
 800392e:	681b      	ldr	r3, [r3, #0]
 8003930:	681b      	ldr	r3, [r3, #0]
 8003932:	f403 2380 	and.w	r3, r3, #262144	; 0x40000
 8003936:	2b00      	cmp	r3, #0
 8003938:	d01c      	beq.n	8003974 <HAL_DMA_IRQHandler+0x260>
      {
        /* Current memory buffer used is Memory 0 */
        if((hdma->Instance->CR & DMA_SxCR_CT) == RESET)
 800393a:	687b      	ldr	r3, [r7, #4]
 800393c:	681b      	ldr	r3, [r3, #0]
 800393e:	681b      	ldr	r3, [r3, #0]
 8003940:	f403 2300 	and.w	r3, r3, #524288	; 0x80000
 8003944:	2b00      	cmp	r3, #0
 8003946:	d108      	bne.n	800395a <HAL_DMA_IRQHandler+0x246>
        {
          if(hdma->XferM1CpltCallback != NULL)
 8003948:	687b      	ldr	r3, [r7, #4]
 800394a:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800394c:	2b00      	cmp	r3, #0
 800394e:	d030      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory1 */
            hdma->XferM1CpltCallback(hdma);
 8003950:	687b      	ldr	r3, [r7, #4]
 8003952:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003954:	6878      	ldr	r0, [r7, #4]
 8003956:	4798      	blx	r3
 8003958:	e02b      	b.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
          }
        }
        /* Current memory buffer used is Memory 1 */
        else
        {
          if(hdma->XferCpltCallback != NULL)
 800395a:	687b      	ldr	r3, [r7, #4]
 800395c:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 800395e:	2b00      	cmp	r3, #0
 8003960:	d027      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
          {
            /* Transfer complete Callback for memory0 */
            hdma->XferCpltCallback(hdma);
 8003962:	687b      	ldr	r3, [r7, #4]
 8003964:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8003966:	6878      	ldr	r0, [r7, #4]
 8003968:	4798      	blx	r3
 800396a:	e022      	b.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
 800396c:	20000034 	.word	0x20000034
 8003970:	1b4e81b5 	.word	0x1b4e81b5
        }
      }
      /* Disable the transfer complete interrupt if the DMA mode is not CIRCULAR */
      else
      {
        if((hdma->Instance->CR & DMA_SxCR_CIRC) == RESET)
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	681b      	ldr	r3, [r3, #0]
 8003978:	681b      	ldr	r3, [r3, #0]
 800397a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800397e:	2b00      	cmp	r3, #0
 8003980:	d10f      	bne.n	80039a2 <HAL_DMA_IRQHandler+0x28e>
        {
          /* Disable the transfer complete interrupt */
          hdma->Instance->CR  &= ~(DMA_IT_TC);
 8003982:	687b      	ldr	r3, [r7, #4]
 8003984:	681b      	ldr	r3, [r3, #0]
 8003986:	681a      	ldr	r2, [r3, #0]
 8003988:	687b      	ldr	r3, [r7, #4]
 800398a:	681b      	ldr	r3, [r3, #0]
 800398c:	f022 0210 	bic.w	r2, r2, #16
 8003990:	601a      	str	r2, [r3, #0]

          /* Process Unlocked */
          __HAL_UNLOCK(hdma);
 8003992:	687b      	ldr	r3, [r7, #4]
 8003994:	2200      	movs	r2, #0
 8003996:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

          /* Change the DMA state */
          hdma->State = HAL_DMA_STATE_READY;
 800399a:	687b      	ldr	r3, [r7, #4]
 800399c:	2201      	movs	r2, #1
 800399e:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
        }

        if(hdma->XferCpltCallback != NULL)
 80039a2:	687b      	ldr	r3, [r7, #4]
 80039a4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039a6:	2b00      	cmp	r3, #0
 80039a8:	d003      	beq.n	80039b2 <HAL_DMA_IRQHandler+0x29e>
        {
          /* Transfer complete callback */
          hdma->XferCpltCallback(hdma);
 80039aa:	687b      	ldr	r3, [r7, #4]
 80039ac:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 80039ae:	6878      	ldr	r0, [r7, #4]
 80039b0:	4798      	blx	r3
      }
    }
  }
  
  /* manage error case */
  if(hdma->ErrorCode != HAL_DMA_ERROR_NONE)
 80039b2:	687b      	ldr	r3, [r7, #4]
 80039b4:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039b6:	2b00      	cmp	r3, #0
 80039b8:	d032      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x30c>
  {
    if((hdma->ErrorCode & HAL_DMA_ERROR_TE) != RESET)
 80039ba:	687b      	ldr	r3, [r7, #4]
 80039bc:	6d5b      	ldr	r3, [r3, #84]	; 0x54
 80039be:	f003 0301 	and.w	r3, r3, #1
 80039c2:	2b00      	cmp	r3, #0
 80039c4:	d022      	beq.n	8003a0c <HAL_DMA_IRQHandler+0x2f8>
    {
      hdma->State = HAL_DMA_STATE_ABORT;
 80039c6:	687b      	ldr	r3, [r7, #4]
 80039c8:	2205      	movs	r2, #5
 80039ca:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35

      /* Disable the stream */
      __HAL_DMA_DISABLE(hdma);
 80039ce:	687b      	ldr	r3, [r7, #4]
 80039d0:	681b      	ldr	r3, [r3, #0]
 80039d2:	681a      	ldr	r2, [r3, #0]
 80039d4:	687b      	ldr	r3, [r7, #4]
 80039d6:	681b      	ldr	r3, [r3, #0]
 80039d8:	f022 0201 	bic.w	r2, r2, #1
 80039dc:	601a      	str	r2, [r3, #0]

      do
      {
        if (++count > timeout)
 80039de:	68bb      	ldr	r3, [r7, #8]
 80039e0:	3301      	adds	r3, #1
 80039e2:	60bb      	str	r3, [r7, #8]
 80039e4:	697a      	ldr	r2, [r7, #20]
 80039e6:	429a      	cmp	r2, r3
 80039e8:	d307      	bcc.n	80039fa <HAL_DMA_IRQHandler+0x2e6>
        {
          break;
        }
      }
      while((hdma->Instance->CR & DMA_SxCR_EN) != RESET);
 80039ea:	687b      	ldr	r3, [r7, #4]
 80039ec:	681b      	ldr	r3, [r3, #0]
 80039ee:	681b      	ldr	r3, [r3, #0]
 80039f0:	f003 0301 	and.w	r3, r3, #1
 80039f4:	2b00      	cmp	r3, #0
 80039f6:	d1f2      	bne.n	80039de <HAL_DMA_IRQHandler+0x2ca>
 80039f8:	e000      	b.n	80039fc <HAL_DMA_IRQHandler+0x2e8>
          break;
 80039fa:	bf00      	nop

      /* Process Unlocked */
      __HAL_UNLOCK(hdma);
 80039fc:	687b      	ldr	r3, [r7, #4]
 80039fe:	2200      	movs	r2, #0
 8003a00:	f883 2034 	strb.w	r2, [r3, #52]	; 0x34

      /* Change the DMA state */
      hdma->State = HAL_DMA_STATE_READY;
 8003a04:	687b      	ldr	r3, [r7, #4]
 8003a06:	2201      	movs	r2, #1
 8003a08:	f883 2035 	strb.w	r2, [r3, #53]	; 0x35
    }

    if(hdma->XferErrorCallback != NULL)
 8003a0c:	687b      	ldr	r3, [r7, #4]
 8003a0e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a10:	2b00      	cmp	r3, #0
 8003a12:	d005      	beq.n	8003a20 <HAL_DMA_IRQHandler+0x30c>
    {
      /* Transfer error callback */
      hdma->XferErrorCallback(hdma);
 8003a14:	687b      	ldr	r3, [r7, #4]
 8003a16:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8003a18:	6878      	ldr	r0, [r7, #4]
 8003a1a:	4798      	blx	r3
 8003a1c:	e000      	b.n	8003a20 <HAL_DMA_IRQHandler+0x30c>
        return;
 8003a1e:	bf00      	nop
    }
  }
}
 8003a20:	3718      	adds	r7, #24
 8003a22:	46bd      	mov	sp, r7
 8003a24:	bd80      	pop	{r7, pc}
 8003a26:	bf00      	nop

08003a28 <HAL_DMA_GetState>:
  * @param  hdma pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA Stream.
  * @retval HAL state
  */
HAL_DMA_StateTypeDef HAL_DMA_GetState(DMA_HandleTypeDef *hdma)
{
 8003a28:	b480      	push	{r7}
 8003a2a:	b083      	sub	sp, #12
 8003a2c:	af00      	add	r7, sp, #0
 8003a2e:	6078      	str	r0, [r7, #4]
  return hdma->State;
 8003a30:	687b      	ldr	r3, [r7, #4]
 8003a32:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8003a36:	b2db      	uxtb	r3, r3
}
 8003a38:	4618      	mov	r0, r3
 8003a3a:	370c      	adds	r7, #12
 8003a3c:	46bd      	mov	sp, r7
 8003a3e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a42:	4770      	bx	lr

08003a44 <DMA_SetConfig>:
  * @param  DstAddress The destination memory Buffer address
  * @param  DataLength The length of data to be transferred from source to destination
  * @retval HAL status
  */
static void DMA_SetConfig(DMA_HandleTypeDef *hdma, uint32_t SrcAddress, uint32_t DstAddress, uint32_t DataLength)
{
 8003a44:	b480      	push	{r7}
 8003a46:	b085      	sub	sp, #20
 8003a48:	af00      	add	r7, sp, #0
 8003a4a:	60f8      	str	r0, [r7, #12]
 8003a4c:	60b9      	str	r1, [r7, #8]
 8003a4e:	607a      	str	r2, [r7, #4]
 8003a50:	603b      	str	r3, [r7, #0]
  /* Clear DBM bit */
  hdma->Instance->CR &= (uint32_t)(~DMA_SxCR_DBM);
 8003a52:	68fb      	ldr	r3, [r7, #12]
 8003a54:	681b      	ldr	r3, [r3, #0]
 8003a56:	681a      	ldr	r2, [r3, #0]
 8003a58:	68fb      	ldr	r3, [r7, #12]
 8003a5a:	681b      	ldr	r3, [r3, #0]
 8003a5c:	f422 2280 	bic.w	r2, r2, #262144	; 0x40000
 8003a60:	601a      	str	r2, [r3, #0]

  /* Configure DMA Stream data length */
  hdma->Instance->NDTR = DataLength;
 8003a62:	68fb      	ldr	r3, [r7, #12]
 8003a64:	681b      	ldr	r3, [r3, #0]
 8003a66:	683a      	ldr	r2, [r7, #0]
 8003a68:	605a      	str	r2, [r3, #4]

  /* Memory to Peripheral */
  if((hdma->Init.Direction) == DMA_MEMORY_TO_PERIPH)
 8003a6a:	68fb      	ldr	r3, [r7, #12]
 8003a6c:	689b      	ldr	r3, [r3, #8]
 8003a6e:	2b40      	cmp	r3, #64	; 0x40
 8003a70:	d108      	bne.n	8003a84 <DMA_SetConfig+0x40>
  {
    /* Configure DMA Stream destination address */
    hdma->Instance->PAR = DstAddress;
 8003a72:	68fb      	ldr	r3, [r7, #12]
 8003a74:	681b      	ldr	r3, [r3, #0]
 8003a76:	687a      	ldr	r2, [r7, #4]
 8003a78:	609a      	str	r2, [r3, #8]

    /* Configure DMA Stream source address */
    hdma->Instance->M0AR = SrcAddress;
 8003a7a:	68fb      	ldr	r3, [r7, #12]
 8003a7c:	681b      	ldr	r3, [r3, #0]
 8003a7e:	68ba      	ldr	r2, [r7, #8]
 8003a80:	60da      	str	r2, [r3, #12]
    hdma->Instance->PAR = SrcAddress;

    /* Configure DMA Stream destination address */
    hdma->Instance->M0AR = DstAddress;
  }
}
 8003a82:	e007      	b.n	8003a94 <DMA_SetConfig+0x50>
    hdma->Instance->PAR = SrcAddress;
 8003a84:	68fb      	ldr	r3, [r7, #12]
 8003a86:	681b      	ldr	r3, [r3, #0]
 8003a88:	68ba      	ldr	r2, [r7, #8]
 8003a8a:	609a      	str	r2, [r3, #8]
    hdma->Instance->M0AR = DstAddress;
 8003a8c:	68fb      	ldr	r3, [r7, #12]
 8003a8e:	681b      	ldr	r3, [r3, #0]
 8003a90:	687a      	ldr	r2, [r7, #4]
 8003a92:	60da      	str	r2, [r3, #12]
}
 8003a94:	bf00      	nop
 8003a96:	3714      	adds	r7, #20
 8003a98:	46bd      	mov	sp, r7
 8003a9a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a9e:	4770      	bx	lr

08003aa0 <DMA_CalcBaseAndBitshift>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval Stream base address
  */
static uint32_t DMA_CalcBaseAndBitshift(DMA_HandleTypeDef *hdma)
{
 8003aa0:	b480      	push	{r7}
 8003aa2:	b085      	sub	sp, #20
 8003aa4:	af00      	add	r7, sp, #0
 8003aa6:	6078      	str	r0, [r7, #4]
  uint32_t stream_number = (((uint32_t)hdma->Instance & 0xFFU) - 16U) / 24U;
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	b2db      	uxtb	r3, r3
 8003aae:	3b10      	subs	r3, #16
 8003ab0:	4a14      	ldr	r2, [pc, #80]	; (8003b04 <DMA_CalcBaseAndBitshift+0x64>)
 8003ab2:	fba2 2303 	umull	r2, r3, r2, r3
 8003ab6:	091b      	lsrs	r3, r3, #4
 8003ab8:	60fb      	str	r3, [r7, #12]
  
  /* lookup table for necessary bitshift of flags within status registers */
  static const uint8_t flagBitshiftOffset[8U] = {0U, 6U, 16U, 22U, 0U, 6U, 16U, 22U};
  hdma->StreamIndex = flagBitshiftOffset[stream_number];
 8003aba:	4a13      	ldr	r2, [pc, #76]	; (8003b08 <DMA_CalcBaseAndBitshift+0x68>)
 8003abc:	68fb      	ldr	r3, [r7, #12]
 8003abe:	4413      	add	r3, r2
 8003ac0:	781b      	ldrb	r3, [r3, #0]
 8003ac2:	461a      	mov	r2, r3
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	65da      	str	r2, [r3, #92]	; 0x5c
  
  if (stream_number > 3U)
 8003ac8:	68fb      	ldr	r3, [r7, #12]
 8003aca:	2b03      	cmp	r3, #3
 8003acc:	d909      	bls.n	8003ae2 <DMA_CalcBaseAndBitshift+0x42>
  {
    /* return pointer to HISR and HIFCR */
    hdma->StreamBaseAddress = (((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU)) + 4U);
 8003ace:	687b      	ldr	r3, [r7, #4]
 8003ad0:	681b      	ldr	r3, [r3, #0]
 8003ad2:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003ad6:	f023 0303 	bic.w	r3, r3, #3
 8003ada:	1d1a      	adds	r2, r3, #4
 8003adc:	687b      	ldr	r3, [r7, #4]
 8003ade:	659a      	str	r2, [r3, #88]	; 0x58
 8003ae0:	e007      	b.n	8003af2 <DMA_CalcBaseAndBitshift+0x52>
  }
  else
  {
    /* return pointer to LISR and LIFCR */
    hdma->StreamBaseAddress = ((uint32_t)hdma->Instance & (uint32_t)(~0x3FFU));
 8003ae2:	687b      	ldr	r3, [r7, #4]
 8003ae4:	681b      	ldr	r3, [r3, #0]
 8003ae6:	f423 737f 	bic.w	r3, r3, #1020	; 0x3fc
 8003aea:	f023 0303 	bic.w	r3, r3, #3
 8003aee:	687a      	ldr	r2, [r7, #4]
 8003af0:	6593      	str	r3, [r2, #88]	; 0x58
  }
  
  return hdma->StreamBaseAddress;
 8003af2:	687b      	ldr	r3, [r7, #4]
 8003af4:	6d9b      	ldr	r3, [r3, #88]	; 0x58
}
 8003af6:	4618      	mov	r0, r3
 8003af8:	3714      	adds	r7, #20
 8003afa:	46bd      	mov	sp, r7
 8003afc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003b00:	4770      	bx	lr
 8003b02:	bf00      	nop
 8003b04:	aaaaaaab 	.word	0xaaaaaaab
 8003b08:	080097c8 	.word	0x080097c8

08003b0c <DMA_CheckFifoParam>:
  * @param  hdma       pointer to a DMA_HandleTypeDef structure that contains
  *                     the configuration information for the specified DMA Stream. 
  * @retval HAL status
  */
static HAL_StatusTypeDef DMA_CheckFifoParam(DMA_HandleTypeDef *hdma)
{
 8003b0c:	b480      	push	{r7}
 8003b0e:	b085      	sub	sp, #20
 8003b10:	af00      	add	r7, sp, #0
 8003b12:	6078      	str	r0, [r7, #4]
  HAL_StatusTypeDef status = HAL_OK;
 8003b14:	2300      	movs	r3, #0
 8003b16:	73fb      	strb	r3, [r7, #15]
  uint32_t tmp = hdma->Init.FIFOThreshold;
 8003b18:	687b      	ldr	r3, [r7, #4]
 8003b1a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003b1c:	60bb      	str	r3, [r7, #8]
  
  /* Memory Data size equal to Byte */
  if(hdma->Init.MemDataAlignment == DMA_MDATAALIGN_BYTE)
 8003b1e:	687b      	ldr	r3, [r7, #4]
 8003b20:	699b      	ldr	r3, [r3, #24]
 8003b22:	2b00      	cmp	r3, #0
 8003b24:	d11f      	bne.n	8003b66 <DMA_CheckFifoParam+0x5a>
 8003b26:	68bb      	ldr	r3, [r7, #8]
 8003b28:	2b03      	cmp	r3, #3
 8003b2a:	d856      	bhi.n	8003bda <DMA_CheckFifoParam+0xce>
 8003b2c:	a201      	add	r2, pc, #4	; (adr r2, 8003b34 <DMA_CheckFifoParam+0x28>)
 8003b2e:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b32:	bf00      	nop
 8003b34:	08003b45 	.word	0x08003b45
 8003b38:	08003b57 	.word	0x08003b57
 8003b3c:	08003b45 	.word	0x08003b45
 8003b40:	08003bdb 	.word	0x08003bdb
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b44:	687b      	ldr	r3, [r7, #4]
 8003b46:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b48:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b4c:	2b00      	cmp	r3, #0
 8003b4e:	d046      	beq.n	8003bde <DMA_CheckFifoParam+0xd2>
      {
        status = HAL_ERROR;
 8003b50:	2301      	movs	r3, #1
 8003b52:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b54:	e043      	b.n	8003bde <DMA_CheckFifoParam+0xd2>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003b56:	687b      	ldr	r3, [r7, #4]
 8003b58:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b5a:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003b5e:	d140      	bne.n	8003be2 <DMA_CheckFifoParam+0xd6>
      {
        status = HAL_ERROR;
 8003b60:	2301      	movs	r3, #1
 8003b62:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003b64:	e03d      	b.n	8003be2 <DMA_CheckFifoParam+0xd6>
      break;
    }
  }
  
  /* Memory Data size equal to Half-Word */
  else if (hdma->Init.MemDataAlignment == DMA_MDATAALIGN_HALFWORD)
 8003b66:	687b      	ldr	r3, [r7, #4]
 8003b68:	699b      	ldr	r3, [r3, #24]
 8003b6a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8003b6e:	d121      	bne.n	8003bb4 <DMA_CheckFifoParam+0xa8>
 8003b70:	68bb      	ldr	r3, [r7, #8]
 8003b72:	2b03      	cmp	r3, #3
 8003b74:	d837      	bhi.n	8003be6 <DMA_CheckFifoParam+0xda>
 8003b76:	a201      	add	r2, pc, #4	; (adr r2, 8003b7c <DMA_CheckFifoParam+0x70>)
 8003b78:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003b7c:	08003b8d 	.word	0x08003b8d
 8003b80:	08003b93 	.word	0x08003b93
 8003b84:	08003b8d 	.word	0x08003b8d
 8003b88:	08003ba5 	.word	0x08003ba5
  {
    switch (tmp)
    {
    case DMA_FIFO_THRESHOLD_1QUARTERFULL:
    case DMA_FIFO_THRESHOLD_3QUARTERSFULL:
      status = HAL_ERROR;
 8003b8c:	2301      	movs	r3, #1
 8003b8e:	73fb      	strb	r3, [r7, #15]
      break;
 8003b90:	e030      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
    case DMA_FIFO_THRESHOLD_HALFFULL:
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003b92:	687b      	ldr	r3, [r7, #4]
 8003b94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003b96:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003b9a:	2b00      	cmp	r3, #0
 8003b9c:	d025      	beq.n	8003bea <DMA_CheckFifoParam+0xde>
      {
        status = HAL_ERROR;
 8003b9e:	2301      	movs	r3, #1
 8003ba0:	73fb      	strb	r3, [r7, #15]
      }
      break;
 8003ba2:	e022      	b.n	8003bea <DMA_CheckFifoParam+0xde>
    case DMA_FIFO_THRESHOLD_FULL:
      if (hdma->Init.MemBurst == DMA_MBURST_INC16)
 8003ba4:	687b      	ldr	r3, [r7, #4]
 8003ba6:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003ba8:	f1b3 7fc0 	cmp.w	r3, #25165824	; 0x1800000
 8003bac:	d11f      	bne.n	8003bee <DMA_CheckFifoParam+0xe2>
      {
        status = HAL_ERROR;
 8003bae:	2301      	movs	r3, #1
 8003bb0:	73fb      	strb	r3, [r7, #15]
      }
      break;   
 8003bb2:	e01c      	b.n	8003bee <DMA_CheckFifoParam+0xe2>
  }
  
  /* Memory Data size equal to Word */
  else
  {
    switch (tmp)
 8003bb4:	68bb      	ldr	r3, [r7, #8]
 8003bb6:	2b02      	cmp	r3, #2
 8003bb8:	d903      	bls.n	8003bc2 <DMA_CheckFifoParam+0xb6>
 8003bba:	68bb      	ldr	r3, [r7, #8]
 8003bbc:	2b03      	cmp	r3, #3
 8003bbe:	d003      	beq.n	8003bc8 <DMA_CheckFifoParam+0xbc>
      {
        status = HAL_ERROR;
      }
      break;
    default:
      break;
 8003bc0:	e018      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      status = HAL_ERROR;
 8003bc2:	2301      	movs	r3, #1
 8003bc4:	73fb      	strb	r3, [r7, #15]
      break;
 8003bc6:	e015      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      if ((hdma->Init.MemBurst & DMA_SxCR_MBURST_1) == DMA_SxCR_MBURST_1)
 8003bc8:	687b      	ldr	r3, [r7, #4]
 8003bca:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8003bcc:	f003 7380 	and.w	r3, r3, #16777216	; 0x1000000
 8003bd0:	2b00      	cmp	r3, #0
 8003bd2:	d00e      	beq.n	8003bf2 <DMA_CheckFifoParam+0xe6>
        status = HAL_ERROR;
 8003bd4:	2301      	movs	r3, #1
 8003bd6:	73fb      	strb	r3, [r7, #15]
      break;
 8003bd8:	e00b      	b.n	8003bf2 <DMA_CheckFifoParam+0xe6>
      break;
 8003bda:	bf00      	nop
 8003bdc:	e00a      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bde:	bf00      	nop
 8003be0:	e008      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003be2:	bf00      	nop
 8003be4:	e006      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003be6:	bf00      	nop
 8003be8:	e004      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bea:	bf00      	nop
 8003bec:	e002      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;   
 8003bee:	bf00      	nop
 8003bf0:	e000      	b.n	8003bf4 <DMA_CheckFifoParam+0xe8>
      break;
 8003bf2:	bf00      	nop
    }
  } 
  
  return status; 
 8003bf4:	7bfb      	ldrb	r3, [r7, #15]
}
 8003bf6:	4618      	mov	r0, r3
 8003bf8:	3714      	adds	r7, #20
 8003bfa:	46bd      	mov	sp, r7
 8003bfc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003c00:	4770      	bx	lr
 8003c02:	bf00      	nop

08003c04 <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8003c04:	b480      	push	{r7}
 8003c06:	b089      	sub	sp, #36	; 0x24
 8003c08:	af00      	add	r7, sp, #0
 8003c0a:	6078      	str	r0, [r7, #4]
 8003c0c:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8003c0e:	2300      	movs	r3, #0
 8003c10:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8003c12:	2300      	movs	r3, #0
 8003c14:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8003c16:	2300      	movs	r3, #0
 8003c18:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003c1a:	2300      	movs	r3, #0
 8003c1c:	61fb      	str	r3, [r7, #28]
 8003c1e:	e159      	b.n	8003ed4 <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8003c20:	2201      	movs	r2, #1
 8003c22:	69fb      	ldr	r3, [r7, #28]
 8003c24:	fa02 f303 	lsl.w	r3, r2, r3
 8003c28:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8003c2a:	683b      	ldr	r3, [r7, #0]
 8003c2c:	681b      	ldr	r3, [r3, #0]
 8003c2e:	697a      	ldr	r2, [r7, #20]
 8003c30:	4013      	ands	r3, r2
 8003c32:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8003c34:	693a      	ldr	r2, [r7, #16]
 8003c36:	697b      	ldr	r3, [r7, #20]
 8003c38:	429a      	cmp	r2, r3
 8003c3a:	f040 8148 	bne.w	8003ece <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c3e:	683b      	ldr	r3, [r7, #0]
 8003c40:	685b      	ldr	r3, [r3, #4]
 8003c42:	f003 0303 	and.w	r3, r3, #3
 8003c46:	2b01      	cmp	r3, #1
 8003c48:	d005      	beq.n	8003c56 <HAL_GPIO_Init+0x52>
          (GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003c4a:	683b      	ldr	r3, [r7, #0]
 8003c4c:	685b      	ldr	r3, [r3, #4]
 8003c4e:	f003 0303 	and.w	r3, r3, #3
      if(((GPIO_Init->Mode & GPIO_MODE) == MODE_OUTPUT) || \
 8003c52:	2b02      	cmp	r3, #2
 8003c54:	d130      	bne.n	8003cb8 <HAL_GPIO_Init+0xb4>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8003c56:	687b      	ldr	r3, [r7, #4]
 8003c58:	689b      	ldr	r3, [r3, #8]
 8003c5a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8003c5c:	69fb      	ldr	r3, [r7, #28]
 8003c5e:	005b      	lsls	r3, r3, #1
 8003c60:	2203      	movs	r2, #3
 8003c62:	fa02 f303 	lsl.w	r3, r2, r3
 8003c66:	43db      	mvns	r3, r3
 8003c68:	69ba      	ldr	r2, [r7, #24]
 8003c6a:	4013      	ands	r3, r2
 8003c6c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8003c6e:	683b      	ldr	r3, [r7, #0]
 8003c70:	68da      	ldr	r2, [r3, #12]
 8003c72:	69fb      	ldr	r3, [r7, #28]
 8003c74:	005b      	lsls	r3, r3, #1
 8003c76:	fa02 f303 	lsl.w	r3, r2, r3
 8003c7a:	69ba      	ldr	r2, [r7, #24]
 8003c7c:	4313      	orrs	r3, r2
 8003c7e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	69ba      	ldr	r2, [r7, #24]
 8003c84:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8003c86:	687b      	ldr	r3, [r7, #4]
 8003c88:	685b      	ldr	r3, [r3, #4]
 8003c8a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8003c8c:	2201      	movs	r2, #1
 8003c8e:	69fb      	ldr	r3, [r7, #28]
 8003c90:	fa02 f303 	lsl.w	r3, r2, r3
 8003c94:	43db      	mvns	r3, r3
 8003c96:	69ba      	ldr	r2, [r7, #24]
 8003c98:	4013      	ands	r3, r2
 8003c9a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8003c9c:	683b      	ldr	r3, [r7, #0]
 8003c9e:	685b      	ldr	r3, [r3, #4]
 8003ca0:	091b      	lsrs	r3, r3, #4
 8003ca2:	f003 0201 	and.w	r2, r3, #1
 8003ca6:	69fb      	ldr	r3, [r7, #28]
 8003ca8:	fa02 f303 	lsl.w	r3, r2, r3
 8003cac:	69ba      	ldr	r2, [r7, #24]
 8003cae:	4313      	orrs	r3, r2
 8003cb0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8003cb2:	687b      	ldr	r3, [r7, #4]
 8003cb4:	69ba      	ldr	r2, [r7, #24]
 8003cb6:	605a      	str	r2, [r3, #4]
       }

      if((GPIO_Init->Mode & GPIO_MODE) != MODE_ANALOG)
 8003cb8:	683b      	ldr	r3, [r7, #0]
 8003cba:	685b      	ldr	r3, [r3, #4]
 8003cbc:	f003 0303 	and.w	r3, r3, #3
 8003cc0:	2b03      	cmp	r3, #3
 8003cc2:	d017      	beq.n	8003cf4 <HAL_GPIO_Init+0xf0>
      {
        /* Activate the Pull-up or Pull down resistor for the current IO */
        temp = GPIOx->PUPDR;
 8003cc4:	687b      	ldr	r3, [r7, #4]
 8003cc6:	68db      	ldr	r3, [r3, #12]
 8003cc8:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8003cca:	69fb      	ldr	r3, [r7, #28]
 8003ccc:	005b      	lsls	r3, r3, #1
 8003cce:	2203      	movs	r2, #3
 8003cd0:	fa02 f303 	lsl.w	r3, r2, r3
 8003cd4:	43db      	mvns	r3, r3
 8003cd6:	69ba      	ldr	r2, [r7, #24]
 8003cd8:	4013      	ands	r3, r2
 8003cda:	61bb      	str	r3, [r7, #24]
        temp |= ((GPIO_Init->Pull) << (position * 2U));
 8003cdc:	683b      	ldr	r3, [r7, #0]
 8003cde:	689a      	ldr	r2, [r3, #8]
 8003ce0:	69fb      	ldr	r3, [r7, #28]
 8003ce2:	005b      	lsls	r3, r3, #1
 8003ce4:	fa02 f303 	lsl.w	r3, r2, r3
 8003ce8:	69ba      	ldr	r2, [r7, #24]
 8003cea:	4313      	orrs	r3, r2
 8003cec:	61bb      	str	r3, [r7, #24]
        GPIOx->PUPDR = temp;
 8003cee:	687b      	ldr	r3, [r7, #4]
 8003cf0:	69ba      	ldr	r2, [r7, #24]
 8003cf2:	60da      	str	r2, [r3, #12]
      }

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode & GPIO_MODE) == MODE_AF)
 8003cf4:	683b      	ldr	r3, [r7, #0]
 8003cf6:	685b      	ldr	r3, [r3, #4]
 8003cf8:	f003 0303 	and.w	r3, r3, #3
 8003cfc:	2b02      	cmp	r3, #2
 8003cfe:	d123      	bne.n	8003d48 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8003d00:	69fb      	ldr	r3, [r7, #28]
 8003d02:	08da      	lsrs	r2, r3, #3
 8003d04:	687b      	ldr	r3, [r7, #4]
 8003d06:	3208      	adds	r2, #8
 8003d08:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8003d0c:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8003d0e:	69fb      	ldr	r3, [r7, #28]
 8003d10:	f003 0307 	and.w	r3, r3, #7
 8003d14:	009b      	lsls	r3, r3, #2
 8003d16:	220f      	movs	r2, #15
 8003d18:	fa02 f303 	lsl.w	r3, r2, r3
 8003d1c:	43db      	mvns	r3, r3
 8003d1e:	69ba      	ldr	r2, [r7, #24]
 8003d20:	4013      	ands	r3, r2
 8003d22:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8003d24:	683b      	ldr	r3, [r7, #0]
 8003d26:	691a      	ldr	r2, [r3, #16]
 8003d28:	69fb      	ldr	r3, [r7, #28]
 8003d2a:	f003 0307 	and.w	r3, r3, #7
 8003d2e:	009b      	lsls	r3, r3, #2
 8003d30:	fa02 f303 	lsl.w	r3, r2, r3
 8003d34:	69ba      	ldr	r2, [r7, #24]
 8003d36:	4313      	orrs	r3, r2
 8003d38:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8003d3a:	69fb      	ldr	r3, [r7, #28]
 8003d3c:	08da      	lsrs	r2, r3, #3
 8003d3e:	687b      	ldr	r3, [r7, #4]
 8003d40:	3208      	adds	r2, #8
 8003d42:	69b9      	ldr	r1, [r7, #24]
 8003d44:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8003d48:	687b      	ldr	r3, [r7, #4]
 8003d4a:	681b      	ldr	r3, [r3, #0]
 8003d4c:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8003d4e:	69fb      	ldr	r3, [r7, #28]
 8003d50:	005b      	lsls	r3, r3, #1
 8003d52:	2203      	movs	r2, #3
 8003d54:	fa02 f303 	lsl.w	r3, r2, r3
 8003d58:	43db      	mvns	r3, r3
 8003d5a:	69ba      	ldr	r2, [r7, #24]
 8003d5c:	4013      	ands	r3, r2
 8003d5e:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8003d60:	683b      	ldr	r3, [r7, #0]
 8003d62:	685b      	ldr	r3, [r3, #4]
 8003d64:	f003 0203 	and.w	r2, r3, #3
 8003d68:	69fb      	ldr	r3, [r7, #28]
 8003d6a:	005b      	lsls	r3, r3, #1
 8003d6c:	fa02 f303 	lsl.w	r3, r2, r3
 8003d70:	69ba      	ldr	r2, [r7, #24]
 8003d72:	4313      	orrs	r3, r2
 8003d74:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	69ba      	ldr	r2, [r7, #24]
 8003d7a:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8003d7c:	683b      	ldr	r3, [r7, #0]
 8003d7e:	685b      	ldr	r3, [r3, #4]
 8003d80:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8003d84:	2b00      	cmp	r3, #0
 8003d86:	f000 80a2 	beq.w	8003ece <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8003d8a:	2300      	movs	r3, #0
 8003d8c:	60fb      	str	r3, [r7, #12]
 8003d8e:	4b57      	ldr	r3, [pc, #348]	; (8003eec <HAL_GPIO_Init+0x2e8>)
 8003d90:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d92:	4a56      	ldr	r2, [pc, #344]	; (8003eec <HAL_GPIO_Init+0x2e8>)
 8003d94:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8003d98:	6453      	str	r3, [r2, #68]	; 0x44
 8003d9a:	4b54      	ldr	r3, [pc, #336]	; (8003eec <HAL_GPIO_Init+0x2e8>)
 8003d9c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8003d9e:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8003da2:	60fb      	str	r3, [r7, #12]
 8003da4:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8003da6:	4a52      	ldr	r2, [pc, #328]	; (8003ef0 <HAL_GPIO_Init+0x2ec>)
 8003da8:	69fb      	ldr	r3, [r7, #28]
 8003daa:	089b      	lsrs	r3, r3, #2
 8003dac:	3302      	adds	r3, #2
 8003dae:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8003db2:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8003db4:	69fb      	ldr	r3, [r7, #28]
 8003db6:	f003 0303 	and.w	r3, r3, #3
 8003dba:	009b      	lsls	r3, r3, #2
 8003dbc:	220f      	movs	r2, #15
 8003dbe:	fa02 f303 	lsl.w	r3, r2, r3
 8003dc2:	43db      	mvns	r3, r3
 8003dc4:	69ba      	ldr	r2, [r7, #24]
 8003dc6:	4013      	ands	r3, r2
 8003dc8:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	4a49      	ldr	r2, [pc, #292]	; (8003ef4 <HAL_GPIO_Init+0x2f0>)
 8003dce:	4293      	cmp	r3, r2
 8003dd0:	d019      	beq.n	8003e06 <HAL_GPIO_Init+0x202>
 8003dd2:	687b      	ldr	r3, [r7, #4]
 8003dd4:	4a48      	ldr	r2, [pc, #288]	; (8003ef8 <HAL_GPIO_Init+0x2f4>)
 8003dd6:	4293      	cmp	r3, r2
 8003dd8:	d013      	beq.n	8003e02 <HAL_GPIO_Init+0x1fe>
 8003dda:	687b      	ldr	r3, [r7, #4]
 8003ddc:	4a47      	ldr	r2, [pc, #284]	; (8003efc <HAL_GPIO_Init+0x2f8>)
 8003dde:	4293      	cmp	r3, r2
 8003de0:	d00d      	beq.n	8003dfe <HAL_GPIO_Init+0x1fa>
 8003de2:	687b      	ldr	r3, [r7, #4]
 8003de4:	4a46      	ldr	r2, [pc, #280]	; (8003f00 <HAL_GPIO_Init+0x2fc>)
 8003de6:	4293      	cmp	r3, r2
 8003de8:	d007      	beq.n	8003dfa <HAL_GPIO_Init+0x1f6>
 8003dea:	687b      	ldr	r3, [r7, #4]
 8003dec:	4a45      	ldr	r2, [pc, #276]	; (8003f04 <HAL_GPIO_Init+0x300>)
 8003dee:	4293      	cmp	r3, r2
 8003df0:	d101      	bne.n	8003df6 <HAL_GPIO_Init+0x1f2>
 8003df2:	2304      	movs	r3, #4
 8003df4:	e008      	b.n	8003e08 <HAL_GPIO_Init+0x204>
 8003df6:	2307      	movs	r3, #7
 8003df8:	e006      	b.n	8003e08 <HAL_GPIO_Init+0x204>
 8003dfa:	2303      	movs	r3, #3
 8003dfc:	e004      	b.n	8003e08 <HAL_GPIO_Init+0x204>
 8003dfe:	2302      	movs	r3, #2
 8003e00:	e002      	b.n	8003e08 <HAL_GPIO_Init+0x204>
 8003e02:	2301      	movs	r3, #1
 8003e04:	e000      	b.n	8003e08 <HAL_GPIO_Init+0x204>
 8003e06:	2300      	movs	r3, #0
 8003e08:	69fa      	ldr	r2, [r7, #28]
 8003e0a:	f002 0203 	and.w	r2, r2, #3
 8003e0e:	0092      	lsls	r2, r2, #2
 8003e10:	4093      	lsls	r3, r2
 8003e12:	69ba      	ldr	r2, [r7, #24]
 8003e14:	4313      	orrs	r3, r2
 8003e16:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8003e18:	4935      	ldr	r1, [pc, #212]	; (8003ef0 <HAL_GPIO_Init+0x2ec>)
 8003e1a:	69fb      	ldr	r3, [r7, #28]
 8003e1c:	089b      	lsrs	r3, r3, #2
 8003e1e:	3302      	adds	r3, #2
 8003e20:	69ba      	ldr	r2, [r7, #24]
 8003e22:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8003e26:	4b38      	ldr	r3, [pc, #224]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003e28:	681b      	ldr	r3, [r3, #0]
 8003e2a:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e2c:	693b      	ldr	r3, [r7, #16]
 8003e2e:	43db      	mvns	r3, r3
 8003e30:	69ba      	ldr	r2, [r7, #24]
 8003e32:	4013      	ands	r3, r2
 8003e34:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8003e36:	683b      	ldr	r3, [r7, #0]
 8003e38:	685b      	ldr	r3, [r3, #4]
 8003e3a:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8003e3e:	2b00      	cmp	r3, #0
 8003e40:	d003      	beq.n	8003e4a <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8003e42:	69ba      	ldr	r2, [r7, #24]
 8003e44:	693b      	ldr	r3, [r7, #16]
 8003e46:	4313      	orrs	r3, r2
 8003e48:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8003e4a:	4a2f      	ldr	r2, [pc, #188]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003e4c:	69bb      	ldr	r3, [r7, #24]
 8003e4e:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8003e50:	4b2d      	ldr	r3, [pc, #180]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003e52:	685b      	ldr	r3, [r3, #4]
 8003e54:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e56:	693b      	ldr	r3, [r7, #16]
 8003e58:	43db      	mvns	r3, r3
 8003e5a:	69ba      	ldr	r2, [r7, #24]
 8003e5c:	4013      	ands	r3, r2
 8003e5e:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8003e60:	683b      	ldr	r3, [r7, #0]
 8003e62:	685b      	ldr	r3, [r3, #4]
 8003e64:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003e68:	2b00      	cmp	r3, #0
 8003e6a:	d003      	beq.n	8003e74 <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8003e6c:	69ba      	ldr	r2, [r7, #24]
 8003e6e:	693b      	ldr	r3, [r7, #16]
 8003e70:	4313      	orrs	r3, r2
 8003e72:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8003e74:	4a24      	ldr	r2, [pc, #144]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003e76:	69bb      	ldr	r3, [r7, #24]
 8003e78:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8003e7a:	4b23      	ldr	r3, [pc, #140]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003e7c:	689b      	ldr	r3, [r3, #8]
 8003e7e:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003e80:	693b      	ldr	r3, [r7, #16]
 8003e82:	43db      	mvns	r3, r3
 8003e84:	69ba      	ldr	r2, [r7, #24]
 8003e86:	4013      	ands	r3, r2
 8003e88:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8003e8a:	683b      	ldr	r3, [r7, #0]
 8003e8c:	685b      	ldr	r3, [r3, #4]
 8003e8e:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8003e92:	2b00      	cmp	r3, #0
 8003e94:	d003      	beq.n	8003e9e <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8003e96:	69ba      	ldr	r2, [r7, #24]
 8003e98:	693b      	ldr	r3, [r7, #16]
 8003e9a:	4313      	orrs	r3, r2
 8003e9c:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8003e9e:	4a1a      	ldr	r2, [pc, #104]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003ea0:	69bb      	ldr	r3, [r7, #24]
 8003ea2:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8003ea4:	4b18      	ldr	r3, [pc, #96]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003ea6:	68db      	ldr	r3, [r3, #12]
 8003ea8:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8003eaa:	693b      	ldr	r3, [r7, #16]
 8003eac:	43db      	mvns	r3, r3
 8003eae:	69ba      	ldr	r2, [r7, #24]
 8003eb0:	4013      	ands	r3, r2
 8003eb2:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8003eb4:	683b      	ldr	r3, [r7, #0]
 8003eb6:	685b      	ldr	r3, [r3, #4]
 8003eb8:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8003ebc:	2b00      	cmp	r3, #0
 8003ebe:	d003      	beq.n	8003ec8 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8003ec0:	69ba      	ldr	r2, [r7, #24]
 8003ec2:	693b      	ldr	r3, [r7, #16]
 8003ec4:	4313      	orrs	r3, r2
 8003ec6:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8003ec8:	4a0f      	ldr	r2, [pc, #60]	; (8003f08 <HAL_GPIO_Init+0x304>)
 8003eca:	69bb      	ldr	r3, [r7, #24]
 8003ecc:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8003ece:	69fb      	ldr	r3, [r7, #28]
 8003ed0:	3301      	adds	r3, #1
 8003ed2:	61fb      	str	r3, [r7, #28]
 8003ed4:	69fb      	ldr	r3, [r7, #28]
 8003ed6:	2b0f      	cmp	r3, #15
 8003ed8:	f67f aea2 	bls.w	8003c20 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8003edc:	bf00      	nop
 8003ede:	bf00      	nop
 8003ee0:	3724      	adds	r7, #36	; 0x24
 8003ee2:	46bd      	mov	sp, r7
 8003ee4:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003ee8:	4770      	bx	lr
 8003eea:	bf00      	nop
 8003eec:	40023800 	.word	0x40023800
 8003ef0:	40013800 	.word	0x40013800
 8003ef4:	40020000 	.word	0x40020000
 8003ef8:	40020400 	.word	0x40020400
 8003efc:	40020800 	.word	0x40020800
 8003f00:	40020c00 	.word	0x40020c00
 8003f04:	40021000 	.word	0x40021000
 8003f08:	40013c00 	.word	0x40013c00

08003f0c <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8003f0c:	b480      	push	{r7}
 8003f0e:	b083      	sub	sp, #12
 8003f10:	af00      	add	r7, sp, #0
 8003f12:	6078      	str	r0, [r7, #4]
 8003f14:	460b      	mov	r3, r1
 8003f16:	807b      	strh	r3, [r7, #2]
 8003f18:	4613      	mov	r3, r2
 8003f1a:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003f1c:	787b      	ldrb	r3, [r7, #1]
 8003f1e:	2b00      	cmp	r3, #0
 8003f20:	d003      	beq.n	8003f2a <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 8003f22:	887a      	ldrh	r2, [r7, #2]
 8003f24:	687b      	ldr	r3, [r7, #4]
 8003f26:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003f28:	e003      	b.n	8003f32 <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003f2a:	887b      	ldrh	r3, [r7, #2]
 8003f2c:	041a      	lsls	r2, r3, #16
 8003f2e:	687b      	ldr	r3, [r7, #4]
 8003f30:	619a      	str	r2, [r3, #24]
}
 8003f32:	bf00      	nop
 8003f34:	370c      	adds	r7, #12
 8003f36:	46bd      	mov	sp, r7
 8003f38:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003f3c:	4770      	bx	lr
	...

08003f40 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003f40:	b580      	push	{r7, lr}
 8003f42:	b082      	sub	sp, #8
 8003f44:	af00      	add	r7, sp, #0
 8003f46:	4603      	mov	r3, r0
 8003f48:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003f4a:	4b08      	ldr	r3, [pc, #32]	; (8003f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f4c:	695a      	ldr	r2, [r3, #20]
 8003f4e:	88fb      	ldrh	r3, [r7, #6]
 8003f50:	4013      	ands	r3, r2
 8003f52:	2b00      	cmp	r3, #0
 8003f54:	d006      	beq.n	8003f64 <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 8003f56:	4a05      	ldr	r2, [pc, #20]	; (8003f6c <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003f58:	88fb      	ldrh	r3, [r7, #6]
 8003f5a:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003f5c:	88fb      	ldrh	r3, [r7, #6]
 8003f5e:	4618      	mov	r0, r3
 8003f60:	f7fd fc4a 	bl	80017f8 <HAL_GPIO_EXTI_Callback>
  }
}
 8003f64:	bf00      	nop
 8003f66:	3708      	adds	r7, #8
 8003f68:	46bd      	mov	sp, r7
 8003f6a:	bd80      	pop	{r7, pc}
 8003f6c:	40013c00 	.word	0x40013c00

08003f70 <HAL_I2C_Init>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Init(I2C_HandleTypeDef *hi2c)
{
 8003f70:	b580      	push	{r7, lr}
 8003f72:	b084      	sub	sp, #16
 8003f74:	af00      	add	r7, sp, #0
 8003f76:	6078      	str	r0, [r7, #4]
  uint32_t freqrange;
  uint32_t pclk1;

  /* Check the I2C handle allocation */
  if (hi2c == NULL)
 8003f78:	687b      	ldr	r3, [r7, #4]
 8003f7a:	2b00      	cmp	r3, #0
 8003f7c:	d101      	bne.n	8003f82 <HAL_I2C_Init+0x12>
  {
    return HAL_ERROR;
 8003f7e:	2301      	movs	r3, #1
 8003f80:	e12b      	b.n	80041da <HAL_I2C_Init+0x26a>
  assert_param(IS_I2C_DUAL_ADDRESS(hi2c->Init.DualAddressMode));
  assert_param(IS_I2C_OWN_ADDRESS2(hi2c->Init.OwnAddress2));
  assert_param(IS_I2C_GENERAL_CALL(hi2c->Init.GeneralCallMode));
  assert_param(IS_I2C_NO_STRETCH(hi2c->Init.NoStretchMode));

  if (hi2c->State == HAL_I2C_STATE_RESET)
 8003f82:	687b      	ldr	r3, [r7, #4]
 8003f84:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003f88:	b2db      	uxtb	r3, r3
 8003f8a:	2b00      	cmp	r3, #0
 8003f8c:	d106      	bne.n	8003f9c <HAL_I2C_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    hi2c->Lock = HAL_UNLOCKED;
 8003f8e:	687b      	ldr	r3, [r7, #4]
 8003f90:	2200      	movs	r2, #0
 8003f92:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    hi2c->MspInitCallback(hi2c);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_I2C_MspInit(hi2c);
 8003f96:	6878      	ldr	r0, [r7, #4]
 8003f98:	f7fe fd7a 	bl	8002a90 <HAL_I2C_MspInit>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  hi2c->State = HAL_I2C_STATE_BUSY;
 8003f9c:	687b      	ldr	r3, [r7, #4]
 8003f9e:	2224      	movs	r2, #36	; 0x24
 8003fa0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the selected I2C peripheral */
  __HAL_I2C_DISABLE(hi2c);
 8003fa4:	687b      	ldr	r3, [r7, #4]
 8003fa6:	681b      	ldr	r3, [r3, #0]
 8003fa8:	681a      	ldr	r2, [r3, #0]
 8003faa:	687b      	ldr	r3, [r7, #4]
 8003fac:	681b      	ldr	r3, [r3, #0]
 8003fae:	f022 0201 	bic.w	r2, r2, #1
 8003fb2:	601a      	str	r2, [r3, #0]

  /*Reset I2C*/
  hi2c->Instance->CR1 |= I2C_CR1_SWRST;
 8003fb4:	687b      	ldr	r3, [r7, #4]
 8003fb6:	681b      	ldr	r3, [r3, #0]
 8003fb8:	681a      	ldr	r2, [r3, #0]
 8003fba:	687b      	ldr	r3, [r7, #4]
 8003fbc:	681b      	ldr	r3, [r3, #0]
 8003fbe:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003fc2:	601a      	str	r2, [r3, #0]
  hi2c->Instance->CR1 &= ~I2C_CR1_SWRST;
 8003fc4:	687b      	ldr	r3, [r7, #4]
 8003fc6:	681b      	ldr	r3, [r3, #0]
 8003fc8:	681a      	ldr	r2, [r3, #0]
 8003fca:	687b      	ldr	r3, [r7, #4]
 8003fcc:	681b      	ldr	r3, [r3, #0]
 8003fce:	f422 4200 	bic.w	r2, r2, #32768	; 0x8000
 8003fd2:	601a      	str	r2, [r3, #0]

  /* Get PCLK1 frequency */
  pclk1 = HAL_RCC_GetPCLK1Freq();
 8003fd4:	f002 fab8 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 8003fd8:	60f8      	str	r0, [r7, #12]

  /* Check the minimum allowed PCLK1 frequency */
  if (I2C_MIN_PCLK_FREQ(pclk1, hi2c->Init.ClockSpeed) == 1U)
 8003fda:	687b      	ldr	r3, [r7, #4]
 8003fdc:	685b      	ldr	r3, [r3, #4]
 8003fde:	4a81      	ldr	r2, [pc, #516]	; (80041e4 <HAL_I2C_Init+0x274>)
 8003fe0:	4293      	cmp	r3, r2
 8003fe2:	d807      	bhi.n	8003ff4 <HAL_I2C_Init+0x84>
 8003fe4:	68fb      	ldr	r3, [r7, #12]
 8003fe6:	4a80      	ldr	r2, [pc, #512]	; (80041e8 <HAL_I2C_Init+0x278>)
 8003fe8:	4293      	cmp	r3, r2
 8003fea:	bf94      	ite	ls
 8003fec:	2301      	movls	r3, #1
 8003fee:	2300      	movhi	r3, #0
 8003ff0:	b2db      	uxtb	r3, r3
 8003ff2:	e006      	b.n	8004002 <HAL_I2C_Init+0x92>
 8003ff4:	68fb      	ldr	r3, [r7, #12]
 8003ff6:	4a7d      	ldr	r2, [pc, #500]	; (80041ec <HAL_I2C_Init+0x27c>)
 8003ff8:	4293      	cmp	r3, r2
 8003ffa:	bf94      	ite	ls
 8003ffc:	2301      	movls	r3, #1
 8003ffe:	2300      	movhi	r3, #0
 8004000:	b2db      	uxtb	r3, r3
 8004002:	2b00      	cmp	r3, #0
 8004004:	d001      	beq.n	800400a <HAL_I2C_Init+0x9a>
  {
    return HAL_ERROR;
 8004006:	2301      	movs	r3, #1
 8004008:	e0e7      	b.n	80041da <HAL_I2C_Init+0x26a>
  }

  /* Calculate frequency range */
  freqrange = I2C_FREQRANGE(pclk1);
 800400a:	68fb      	ldr	r3, [r7, #12]
 800400c:	4a78      	ldr	r2, [pc, #480]	; (80041f0 <HAL_I2C_Init+0x280>)
 800400e:	fba2 2303 	umull	r2, r3, r2, r3
 8004012:	0c9b      	lsrs	r3, r3, #18
 8004014:	60bb      	str	r3, [r7, #8]

  /*---------------------------- I2Cx CR2 Configuration ----------------------*/
  /* Configure I2Cx: Frequency range */
  MODIFY_REG(hi2c->Instance->CR2, I2C_CR2_FREQ, freqrange);
 8004016:	687b      	ldr	r3, [r7, #4]
 8004018:	681b      	ldr	r3, [r3, #0]
 800401a:	685b      	ldr	r3, [r3, #4]
 800401c:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004020:	687b      	ldr	r3, [r7, #4]
 8004022:	681b      	ldr	r3, [r3, #0]
 8004024:	68ba      	ldr	r2, [r7, #8]
 8004026:	430a      	orrs	r2, r1
 8004028:	605a      	str	r2, [r3, #4]

  /*---------------------------- I2Cx TRISE Configuration --------------------*/
  /* Configure I2Cx: Rise Time */
  MODIFY_REG(hi2c->Instance->TRISE, I2C_TRISE_TRISE, I2C_RISE_TIME(freqrange, hi2c->Init.ClockSpeed));
 800402a:	687b      	ldr	r3, [r7, #4]
 800402c:	681b      	ldr	r3, [r3, #0]
 800402e:	6a1b      	ldr	r3, [r3, #32]
 8004030:	f023 013f 	bic.w	r1, r3, #63	; 0x3f
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	685b      	ldr	r3, [r3, #4]
 8004038:	4a6a      	ldr	r2, [pc, #424]	; (80041e4 <HAL_I2C_Init+0x274>)
 800403a:	4293      	cmp	r3, r2
 800403c:	d802      	bhi.n	8004044 <HAL_I2C_Init+0xd4>
 800403e:	68bb      	ldr	r3, [r7, #8]
 8004040:	3301      	adds	r3, #1
 8004042:	e009      	b.n	8004058 <HAL_I2C_Init+0xe8>
 8004044:	68bb      	ldr	r3, [r7, #8]
 8004046:	f44f 7296 	mov.w	r2, #300	; 0x12c
 800404a:	fb02 f303 	mul.w	r3, r2, r3
 800404e:	4a69      	ldr	r2, [pc, #420]	; (80041f4 <HAL_I2C_Init+0x284>)
 8004050:	fba2 2303 	umull	r2, r3, r2, r3
 8004054:	099b      	lsrs	r3, r3, #6
 8004056:	3301      	adds	r3, #1
 8004058:	687a      	ldr	r2, [r7, #4]
 800405a:	6812      	ldr	r2, [r2, #0]
 800405c:	430b      	orrs	r3, r1
 800405e:	6213      	str	r3, [r2, #32]

  /*---------------------------- I2Cx CCR Configuration ----------------------*/
  /* Configure I2Cx: Speed */
  MODIFY_REG(hi2c->Instance->CCR, (I2C_CCR_FS | I2C_CCR_DUTY | I2C_CCR_CCR), I2C_SPEED(pclk1, hi2c->Init.ClockSpeed, hi2c->Init.DutyCycle));
 8004060:	687b      	ldr	r3, [r7, #4]
 8004062:	681b      	ldr	r3, [r3, #0]
 8004064:	69db      	ldr	r3, [r3, #28]
 8004066:	f423 424f 	bic.w	r2, r3, #52992	; 0xcf00
 800406a:	f022 02ff 	bic.w	r2, r2, #255	; 0xff
 800406e:	687b      	ldr	r3, [r7, #4]
 8004070:	685b      	ldr	r3, [r3, #4]
 8004072:	495c      	ldr	r1, [pc, #368]	; (80041e4 <HAL_I2C_Init+0x274>)
 8004074:	428b      	cmp	r3, r1
 8004076:	d819      	bhi.n	80040ac <HAL_I2C_Init+0x13c>
 8004078:	68fb      	ldr	r3, [r7, #12]
 800407a:	1e59      	subs	r1, r3, #1
 800407c:	687b      	ldr	r3, [r7, #4]
 800407e:	685b      	ldr	r3, [r3, #4]
 8004080:	005b      	lsls	r3, r3, #1
 8004082:	fbb1 f3f3 	udiv	r3, r1, r3
 8004086:	1c59      	adds	r1, r3, #1
 8004088:	f640 73fc 	movw	r3, #4092	; 0xffc
 800408c:	400b      	ands	r3, r1
 800408e:	2b00      	cmp	r3, #0
 8004090:	d00a      	beq.n	80040a8 <HAL_I2C_Init+0x138>
 8004092:	68fb      	ldr	r3, [r7, #12]
 8004094:	1e59      	subs	r1, r3, #1
 8004096:	687b      	ldr	r3, [r7, #4]
 8004098:	685b      	ldr	r3, [r3, #4]
 800409a:	005b      	lsls	r3, r3, #1
 800409c:	fbb1 f3f3 	udiv	r3, r1, r3
 80040a0:	3301      	adds	r3, #1
 80040a2:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040a6:	e051      	b.n	800414c <HAL_I2C_Init+0x1dc>
 80040a8:	2304      	movs	r3, #4
 80040aa:	e04f      	b.n	800414c <HAL_I2C_Init+0x1dc>
 80040ac:	687b      	ldr	r3, [r7, #4]
 80040ae:	689b      	ldr	r3, [r3, #8]
 80040b0:	2b00      	cmp	r3, #0
 80040b2:	d111      	bne.n	80040d8 <HAL_I2C_Init+0x168>
 80040b4:	68fb      	ldr	r3, [r7, #12]
 80040b6:	1e58      	subs	r0, r3, #1
 80040b8:	687b      	ldr	r3, [r7, #4]
 80040ba:	6859      	ldr	r1, [r3, #4]
 80040bc:	460b      	mov	r3, r1
 80040be:	005b      	lsls	r3, r3, #1
 80040c0:	440b      	add	r3, r1
 80040c2:	fbb0 f3f3 	udiv	r3, r0, r3
 80040c6:	3301      	adds	r3, #1
 80040c8:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040cc:	2b00      	cmp	r3, #0
 80040ce:	bf0c      	ite	eq
 80040d0:	2301      	moveq	r3, #1
 80040d2:	2300      	movne	r3, #0
 80040d4:	b2db      	uxtb	r3, r3
 80040d6:	e012      	b.n	80040fe <HAL_I2C_Init+0x18e>
 80040d8:	68fb      	ldr	r3, [r7, #12]
 80040da:	1e58      	subs	r0, r3, #1
 80040dc:	687b      	ldr	r3, [r7, #4]
 80040de:	6859      	ldr	r1, [r3, #4]
 80040e0:	460b      	mov	r3, r1
 80040e2:	009b      	lsls	r3, r3, #2
 80040e4:	440b      	add	r3, r1
 80040e6:	0099      	lsls	r1, r3, #2
 80040e8:	440b      	add	r3, r1
 80040ea:	fbb0 f3f3 	udiv	r3, r0, r3
 80040ee:	3301      	adds	r3, #1
 80040f0:	f3c3 030b 	ubfx	r3, r3, #0, #12
 80040f4:	2b00      	cmp	r3, #0
 80040f6:	bf0c      	ite	eq
 80040f8:	2301      	moveq	r3, #1
 80040fa:	2300      	movne	r3, #0
 80040fc:	b2db      	uxtb	r3, r3
 80040fe:	2b00      	cmp	r3, #0
 8004100:	d001      	beq.n	8004106 <HAL_I2C_Init+0x196>
 8004102:	2301      	movs	r3, #1
 8004104:	e022      	b.n	800414c <HAL_I2C_Init+0x1dc>
 8004106:	687b      	ldr	r3, [r7, #4]
 8004108:	689b      	ldr	r3, [r3, #8]
 800410a:	2b00      	cmp	r3, #0
 800410c:	d10e      	bne.n	800412c <HAL_I2C_Init+0x1bc>
 800410e:	68fb      	ldr	r3, [r7, #12]
 8004110:	1e58      	subs	r0, r3, #1
 8004112:	687b      	ldr	r3, [r7, #4]
 8004114:	6859      	ldr	r1, [r3, #4]
 8004116:	460b      	mov	r3, r1
 8004118:	005b      	lsls	r3, r3, #1
 800411a:	440b      	add	r3, r1
 800411c:	fbb0 f3f3 	udiv	r3, r0, r3
 8004120:	3301      	adds	r3, #1
 8004122:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004126:	f443 4300 	orr.w	r3, r3, #32768	; 0x8000
 800412a:	e00f      	b.n	800414c <HAL_I2C_Init+0x1dc>
 800412c:	68fb      	ldr	r3, [r7, #12]
 800412e:	1e58      	subs	r0, r3, #1
 8004130:	687b      	ldr	r3, [r7, #4]
 8004132:	6859      	ldr	r1, [r3, #4]
 8004134:	460b      	mov	r3, r1
 8004136:	009b      	lsls	r3, r3, #2
 8004138:	440b      	add	r3, r1
 800413a:	0099      	lsls	r1, r3, #2
 800413c:	440b      	add	r3, r1
 800413e:	fbb0 f3f3 	udiv	r3, r0, r3
 8004142:	3301      	adds	r3, #1
 8004144:	f3c3 030b 	ubfx	r3, r3, #0, #12
 8004148:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 800414c:	6879      	ldr	r1, [r7, #4]
 800414e:	6809      	ldr	r1, [r1, #0]
 8004150:	4313      	orrs	r3, r2
 8004152:	61cb      	str	r3, [r1, #28]

  /*---------------------------- I2Cx CR1 Configuration ----------------------*/
  /* Configure I2Cx: Generalcall and NoStretch mode */
  MODIFY_REG(hi2c->Instance->CR1, (I2C_CR1_ENGC | I2C_CR1_NOSTRETCH), (hi2c->Init.GeneralCallMode | hi2c->Init.NoStretchMode));
 8004154:	687b      	ldr	r3, [r7, #4]
 8004156:	681b      	ldr	r3, [r3, #0]
 8004158:	681b      	ldr	r3, [r3, #0]
 800415a:	f023 01c0 	bic.w	r1, r3, #192	; 0xc0
 800415e:	687b      	ldr	r3, [r7, #4]
 8004160:	69da      	ldr	r2, [r3, #28]
 8004162:	687b      	ldr	r3, [r7, #4]
 8004164:	6a1b      	ldr	r3, [r3, #32]
 8004166:	431a      	orrs	r2, r3
 8004168:	687b      	ldr	r3, [r7, #4]
 800416a:	681b      	ldr	r3, [r3, #0]
 800416c:	430a      	orrs	r2, r1
 800416e:	601a      	str	r2, [r3, #0]

  /*---------------------------- I2Cx OAR1 Configuration ---------------------*/
  /* Configure I2Cx: Own Address1 and addressing mode */
  MODIFY_REG(hi2c->Instance->OAR1, (I2C_OAR1_ADDMODE | I2C_OAR1_ADD8_9 | I2C_OAR1_ADD1_7 | I2C_OAR1_ADD0), (hi2c->Init.AddressingMode | hi2c->Init.OwnAddress1));
 8004170:	687b      	ldr	r3, [r7, #4]
 8004172:	681b      	ldr	r3, [r3, #0]
 8004174:	689b      	ldr	r3, [r3, #8]
 8004176:	f423 4303 	bic.w	r3, r3, #33536	; 0x8300
 800417a:	f023 03ff 	bic.w	r3, r3, #255	; 0xff
 800417e:	687a      	ldr	r2, [r7, #4]
 8004180:	6911      	ldr	r1, [r2, #16]
 8004182:	687a      	ldr	r2, [r7, #4]
 8004184:	68d2      	ldr	r2, [r2, #12]
 8004186:	4311      	orrs	r1, r2
 8004188:	687a      	ldr	r2, [r7, #4]
 800418a:	6812      	ldr	r2, [r2, #0]
 800418c:	430b      	orrs	r3, r1
 800418e:	6093      	str	r3, [r2, #8]

  /*---------------------------- I2Cx OAR2 Configuration ---------------------*/
  /* Configure I2Cx: Dual mode and Own Address2 */
  MODIFY_REG(hi2c->Instance->OAR2, (I2C_OAR2_ENDUAL | I2C_OAR2_ADD2), (hi2c->Init.DualAddressMode | hi2c->Init.OwnAddress2));
 8004190:	687b      	ldr	r3, [r7, #4]
 8004192:	681b      	ldr	r3, [r3, #0]
 8004194:	68db      	ldr	r3, [r3, #12]
 8004196:	f023 01ff 	bic.w	r1, r3, #255	; 0xff
 800419a:	687b      	ldr	r3, [r7, #4]
 800419c:	695a      	ldr	r2, [r3, #20]
 800419e:	687b      	ldr	r3, [r7, #4]
 80041a0:	699b      	ldr	r3, [r3, #24]
 80041a2:	431a      	orrs	r2, r3
 80041a4:	687b      	ldr	r3, [r7, #4]
 80041a6:	681b      	ldr	r3, [r3, #0]
 80041a8:	430a      	orrs	r2, r1
 80041aa:	60da      	str	r2, [r3, #12]

  /* Enable the selected I2C peripheral */
  __HAL_I2C_ENABLE(hi2c);
 80041ac:	687b      	ldr	r3, [r7, #4]
 80041ae:	681b      	ldr	r3, [r3, #0]
 80041b0:	681a      	ldr	r2, [r3, #0]
 80041b2:	687b      	ldr	r3, [r7, #4]
 80041b4:	681b      	ldr	r3, [r3, #0]
 80041b6:	f042 0201 	orr.w	r2, r2, #1
 80041ba:	601a      	str	r2, [r3, #0]

  hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80041bc:	687b      	ldr	r3, [r7, #4]
 80041be:	2200      	movs	r2, #0
 80041c0:	641a      	str	r2, [r3, #64]	; 0x40
  hi2c->State = HAL_I2C_STATE_READY;
 80041c2:	687b      	ldr	r3, [r7, #4]
 80041c4:	2220      	movs	r2, #32
 80041c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  hi2c->PreviousState = I2C_STATE_NONE;
 80041ca:	687b      	ldr	r3, [r7, #4]
 80041cc:	2200      	movs	r2, #0
 80041ce:	631a      	str	r2, [r3, #48]	; 0x30
  hi2c->Mode = HAL_I2C_MODE_NONE;
 80041d0:	687b      	ldr	r3, [r7, #4]
 80041d2:	2200      	movs	r2, #0
 80041d4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80041d8:	2300      	movs	r3, #0
}
 80041da:	4618      	mov	r0, r3
 80041dc:	3710      	adds	r7, #16
 80041de:	46bd      	mov	sp, r7
 80041e0:	bd80      	pop	{r7, pc}
 80041e2:	bf00      	nop
 80041e4:	000186a0 	.word	0x000186a0
 80041e8:	001e847f 	.word	0x001e847f
 80041ec:	003d08ff 	.word	0x003d08ff
 80041f0:	431bde83 	.word	0x431bde83
 80041f4:	10624dd3 	.word	0x10624dd3

080041f8 <HAL_I2C_Master_Transmit_IT>:
  * @param  pData Pointer to data buffer
  * @param  Size Amount of data to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_I2C_Master_Transmit_IT(I2C_HandleTypeDef *hi2c, uint16_t DevAddress, uint8_t *pData, uint16_t Size)
{
 80041f8:	b480      	push	{r7}
 80041fa:	b087      	sub	sp, #28
 80041fc:	af00      	add	r7, sp, #0
 80041fe:	60f8      	str	r0, [r7, #12]
 8004200:	607a      	str	r2, [r7, #4]
 8004202:	461a      	mov	r2, r3
 8004204:	460b      	mov	r3, r1
 8004206:	817b      	strh	r3, [r7, #10]
 8004208:	4613      	mov	r3, r2
 800420a:	813b      	strh	r3, [r7, #8]
  __IO uint32_t count = 0U;
 800420c:	2300      	movs	r3, #0
 800420e:	617b      	str	r3, [r7, #20]

  if (hi2c->State == HAL_I2C_STATE_READY)
 8004210:	68fb      	ldr	r3, [r7, #12]
 8004212:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004216:	b2db      	uxtb	r3, r3
 8004218:	2b20      	cmp	r3, #32
 800421a:	f040 8085 	bne.w	8004328 <HAL_I2C_Master_Transmit_IT+0x130>
  {
    /* Wait until BUSY flag is reset */
    count = I2C_TIMEOUT_BUSY_FLAG * (SystemCoreClock / 25U / 1000U);
 800421e:	4b46      	ldr	r3, [pc, #280]	; (8004338 <HAL_I2C_Master_Transmit_IT+0x140>)
 8004220:	681b      	ldr	r3, [r3, #0]
 8004222:	08db      	lsrs	r3, r3, #3
 8004224:	4a45      	ldr	r2, [pc, #276]	; (800433c <HAL_I2C_Master_Transmit_IT+0x144>)
 8004226:	fba2 2303 	umull	r2, r3, r2, r3
 800422a:	0a1a      	lsrs	r2, r3, #8
 800422c:	4613      	mov	r3, r2
 800422e:	009b      	lsls	r3, r3, #2
 8004230:	4413      	add	r3, r2
 8004232:	009a      	lsls	r2, r3, #2
 8004234:	4413      	add	r3, r2
 8004236:	617b      	str	r3, [r7, #20]
    do
    {
      count--;
 8004238:	697b      	ldr	r3, [r7, #20]
 800423a:	3b01      	subs	r3, #1
 800423c:	617b      	str	r3, [r7, #20]
      if (count == 0U)
 800423e:	697b      	ldr	r3, [r7, #20]
 8004240:	2b00      	cmp	r3, #0
 8004242:	d116      	bne.n	8004272 <HAL_I2C_Master_Transmit_IT+0x7a>
      {
        hi2c->PreviousState       = I2C_STATE_NONE;
 8004244:	68fb      	ldr	r3, [r7, #12]
 8004246:	2200      	movs	r2, #0
 8004248:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State               = HAL_I2C_STATE_READY;
 800424a:	68fb      	ldr	r3, [r7, #12]
 800424c:	2220      	movs	r2, #32
 800424e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode                = HAL_I2C_MODE_NONE;
 8004252:	68fb      	ldr	r3, [r7, #12]
 8004254:	2200      	movs	r2, #0
 8004256:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 800425a:	68fb      	ldr	r3, [r7, #12]
 800425c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800425e:	f043 0220 	orr.w	r2, r3, #32
 8004262:	68fb      	ldr	r3, [r7, #12]
 8004264:	641a      	str	r2, [r3, #64]	; 0x40

        /* Process Unlocked */
        __HAL_UNLOCK(hi2c);
 8004266:	68fb      	ldr	r3, [r7, #12]
 8004268:	2200      	movs	r2, #0
 800426a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

        return HAL_ERROR;
 800426e:	2301      	movs	r3, #1
 8004270:	e05b      	b.n	800432a <HAL_I2C_Master_Transmit_IT+0x132>
      }
    }
    while (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BUSY) != RESET);
 8004272:	68fb      	ldr	r3, [r7, #12]
 8004274:	681b      	ldr	r3, [r3, #0]
 8004276:	699b      	ldr	r3, [r3, #24]
 8004278:	f003 0302 	and.w	r3, r3, #2
 800427c:	2b02      	cmp	r3, #2
 800427e:	d0db      	beq.n	8004238 <HAL_I2C_Master_Transmit_IT+0x40>

    /* Process Locked */
    __HAL_LOCK(hi2c);
 8004280:	68fb      	ldr	r3, [r7, #12]
 8004282:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004286:	2b01      	cmp	r3, #1
 8004288:	d101      	bne.n	800428e <HAL_I2C_Master_Transmit_IT+0x96>
 800428a:	2302      	movs	r3, #2
 800428c:	e04d      	b.n	800432a <HAL_I2C_Master_Transmit_IT+0x132>
 800428e:	68fb      	ldr	r3, [r7, #12]
 8004290:	2201      	movs	r2, #1
 8004292:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Check if the I2C is already enabled */
    if ((hi2c->Instance->CR1 & I2C_CR1_PE) != I2C_CR1_PE)
 8004296:	68fb      	ldr	r3, [r7, #12]
 8004298:	681b      	ldr	r3, [r3, #0]
 800429a:	681b      	ldr	r3, [r3, #0]
 800429c:	f003 0301 	and.w	r3, r3, #1
 80042a0:	2b01      	cmp	r3, #1
 80042a2:	d007      	beq.n	80042b4 <HAL_I2C_Master_Transmit_IT+0xbc>
    {
      /* Enable I2C peripheral */
      __HAL_I2C_ENABLE(hi2c);
 80042a4:	68fb      	ldr	r3, [r7, #12]
 80042a6:	681b      	ldr	r3, [r3, #0]
 80042a8:	681a      	ldr	r2, [r3, #0]
 80042aa:	68fb      	ldr	r3, [r7, #12]
 80042ac:	681b      	ldr	r3, [r3, #0]
 80042ae:	f042 0201 	orr.w	r2, r2, #1
 80042b2:	601a      	str	r2, [r3, #0]
    }

    /* Disable Pos */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 80042b4:	68fb      	ldr	r3, [r7, #12]
 80042b6:	681b      	ldr	r3, [r3, #0]
 80042b8:	681a      	ldr	r2, [r3, #0]
 80042ba:	68fb      	ldr	r3, [r7, #12]
 80042bc:	681b      	ldr	r3, [r3, #0]
 80042be:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80042c2:	601a      	str	r2, [r3, #0]

    hi2c->State     = HAL_I2C_STATE_BUSY_TX;
 80042c4:	68fb      	ldr	r3, [r7, #12]
 80042c6:	2221      	movs	r2, #33	; 0x21
 80042c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode      = HAL_I2C_MODE_MASTER;
 80042cc:	68fb      	ldr	r3, [r7, #12]
 80042ce:	2210      	movs	r2, #16
 80042d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80042d4:	68fb      	ldr	r3, [r7, #12]
 80042d6:	2200      	movs	r2, #0
 80042d8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Prepare transfer parameters */
    hi2c->pBuffPtr    = pData;
 80042da:	68fb      	ldr	r3, [r7, #12]
 80042dc:	687a      	ldr	r2, [r7, #4]
 80042de:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount   = Size;
 80042e0:	68fb      	ldr	r3, [r7, #12]
 80042e2:	893a      	ldrh	r2, [r7, #8]
 80042e4:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->XferSize    = hi2c->XferCount;
 80042e6:	68fb      	ldr	r3, [r7, #12]
 80042e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80042ea:	b29a      	uxth	r2, r3
 80042ec:	68fb      	ldr	r3, [r7, #12]
 80042ee:	851a      	strh	r2, [r3, #40]	; 0x28
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80042f0:	68fb      	ldr	r3, [r7, #12]
 80042f2:	4a13      	ldr	r2, [pc, #76]	; (8004340 <HAL_I2C_Master_Transmit_IT+0x148>)
 80042f4:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->Devaddress  = DevAddress;
 80042f6:	897a      	ldrh	r2, [r7, #10]
 80042f8:	68fb      	ldr	r3, [r7, #12]
 80042fa:	645a      	str	r2, [r3, #68]	; 0x44

    /* Generate Start */
    SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 80042fc:	68fb      	ldr	r3, [r7, #12]
 80042fe:	681b      	ldr	r3, [r3, #0]
 8004300:	681a      	ldr	r2, [r3, #0]
 8004302:	68fb      	ldr	r3, [r7, #12]
 8004304:	681b      	ldr	r3, [r3, #0]
 8004306:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 800430a:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 800430c:	68fb      	ldr	r3, [r7, #12]
 800430e:	2200      	movs	r2, #0
 8004310:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Note : The I2C interrupts must be enabled after unlocking current process
              to avoid the risk of I2C interrupt handle execution before current
              process unlock */
    /* Enable EVT, BUF and ERR interrupt */
    __HAL_I2C_ENABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	681b      	ldr	r3, [r3, #0]
 8004318:	685a      	ldr	r2, [r3, #4]
 800431a:	68fb      	ldr	r3, [r7, #12]
 800431c:	681b      	ldr	r3, [r3, #0]
 800431e:	f442 62e0 	orr.w	r2, r2, #1792	; 0x700
 8004322:	605a      	str	r2, [r3, #4]

    return HAL_OK;
 8004324:	2300      	movs	r3, #0
 8004326:	e000      	b.n	800432a <HAL_I2C_Master_Transmit_IT+0x132>
  }
  else
  {
    return HAL_BUSY;
 8004328:	2302      	movs	r3, #2
  }
}
 800432a:	4618      	mov	r0, r3
 800432c:	371c      	adds	r7, #28
 800432e:	46bd      	mov	sp, r7
 8004330:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004334:	4770      	bx	lr
 8004336:	bf00      	nop
 8004338:	20000034 	.word	0x20000034
 800433c:	14f8b589 	.word	0x14f8b589
 8004340:	ffff0000 	.word	0xffff0000

08004344 <HAL_I2C_EV_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_EV_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 8004344:	b580      	push	{r7, lr}
 8004346:	b088      	sub	sp, #32
 8004348:	af00      	add	r7, sp, #0
 800434a:	6078      	str	r0, [r7, #4]
  uint32_t sr1itflags;
  uint32_t sr2itflags               = 0U;
 800434c:	2300      	movs	r3, #0
 800434e:	61bb      	str	r3, [r7, #24]
  uint32_t itsources                = READ_REG(hi2c->Instance->CR2);
 8004350:	687b      	ldr	r3, [r7, #4]
 8004352:	681b      	ldr	r3, [r3, #0]
 8004354:	685b      	ldr	r3, [r3, #4]
 8004356:	617b      	str	r3, [r7, #20]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004358:	687b      	ldr	r3, [r7, #4]
 800435a:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800435c:	613b      	str	r3, [r7, #16]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800435e:	687b      	ldr	r3, [r7, #4]
 8004360:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004364:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004366:	687b      	ldr	r3, [r7, #4]
 8004368:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800436c:	73bb      	strb	r3, [r7, #14]

  /* Master or Memory mode selected */
  if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 800436e:	7bfb      	ldrb	r3, [r7, #15]
 8004370:	2b10      	cmp	r3, #16
 8004372:	d003      	beq.n	800437c <HAL_I2C_EV_IRQHandler+0x38>
 8004374:	7bfb      	ldrb	r3, [r7, #15]
 8004376:	2b40      	cmp	r3, #64	; 0x40
 8004378:	f040 80bd 	bne.w	80044f6 <HAL_I2C_EV_IRQHandler+0x1b2>
  {
    sr2itflags   = READ_REG(hi2c->Instance->SR2);
 800437c:	687b      	ldr	r3, [r7, #4]
 800437e:	681b      	ldr	r3, [r3, #0]
 8004380:	699b      	ldr	r3, [r3, #24]
 8004382:	61bb      	str	r3, [r7, #24]
    sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004384:	687b      	ldr	r3, [r7, #4]
 8004386:	681b      	ldr	r3, [r3, #0]
 8004388:	695b      	ldr	r3, [r3, #20]
 800438a:	61fb      	str	r3, [r7, #28]

    /* Exit IRQ event until Start Bit detected in case of Other frame requested */
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) == RESET) && (IS_I2C_TRANSFER_OTHER_OPTIONS_REQUEST(CurrentXferOptions) == 1U))
 800438c:	69fb      	ldr	r3, [r7, #28]
 800438e:	f003 0301 	and.w	r3, r3, #1
 8004392:	2b00      	cmp	r3, #0
 8004394:	d10d      	bne.n	80043b2 <HAL_I2C_EV_IRQHandler+0x6e>
 8004396:	693b      	ldr	r3, [r7, #16]
 8004398:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 800439c:	d003      	beq.n	80043a6 <HAL_I2C_EV_IRQHandler+0x62>
 800439e:	693b      	ldr	r3, [r7, #16]
 80043a0:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 80043a4:	d101      	bne.n	80043aa <HAL_I2C_EV_IRQHandler+0x66>
 80043a6:	2301      	movs	r3, #1
 80043a8:	e000      	b.n	80043ac <HAL_I2C_EV_IRQHandler+0x68>
 80043aa:	2300      	movs	r3, #0
 80043ac:	2b01      	cmp	r3, #1
 80043ae:	f000 812e 	beq.w	800460e <HAL_I2C_EV_IRQHandler+0x2ca>
    {
      return;
    }

    /* SB Set ----------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043b2:	69fb      	ldr	r3, [r7, #28]
 80043b4:	f003 0301 	and.w	r3, r3, #1
 80043b8:	2b00      	cmp	r3, #0
 80043ba:	d00c      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x92>
 80043bc:	697b      	ldr	r3, [r7, #20]
 80043be:	0a5b      	lsrs	r3, r3, #9
 80043c0:	f003 0301 	and.w	r3, r3, #1
 80043c4:	2b00      	cmp	r3, #0
 80043c6:	d006      	beq.n	80043d6 <HAL_I2C_EV_IRQHandler+0x92>
    {
      /* Convert OTHER_xxx XferOptions if any */
      I2C_ConvertOtherXferOptions(hi2c);
 80043c8:	6878      	ldr	r0, [r7, #4]
 80043ca:	f001 fc55 	bl	8005c78 <I2C_ConvertOtherXferOptions>

      I2C_Master_SB(hi2c);
 80043ce:	6878      	ldr	r0, [r7, #4]
 80043d0:	f000 fd62 	bl	8004e98 <I2C_Master_SB>
 80043d4:	e08e      	b.n	80044f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADD10 Set -------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADD10) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043d6:	69fb      	ldr	r3, [r7, #28]
 80043d8:	08db      	lsrs	r3, r3, #3
 80043da:	f003 0301 	and.w	r3, r3, #1
 80043de:	2b00      	cmp	r3, #0
 80043e0:	d009      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0xb2>
 80043e2:	697b      	ldr	r3, [r7, #20]
 80043e4:	0a5b      	lsrs	r3, r3, #9
 80043e6:	f003 0301 	and.w	r3, r3, #1
 80043ea:	2b00      	cmp	r3, #0
 80043ec:	d003      	beq.n	80043f6 <HAL_I2C_EV_IRQHandler+0xb2>
    {
      I2C_Master_ADD10(hi2c);
 80043ee:	6878      	ldr	r0, [r7, #4]
 80043f0:	f000 fdd8 	bl	8004fa4 <I2C_Master_ADD10>
 80043f4:	e07e      	b.n	80044f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* ADDR Set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80043f6:	69fb      	ldr	r3, [r7, #28]
 80043f8:	085b      	lsrs	r3, r3, #1
 80043fa:	f003 0301 	and.w	r3, r3, #1
 80043fe:	2b00      	cmp	r3, #0
 8004400:	d009      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0xd2>
 8004402:	697b      	ldr	r3, [r7, #20]
 8004404:	0a5b      	lsrs	r3, r3, #9
 8004406:	f003 0301 	and.w	r3, r3, #1
 800440a:	2b00      	cmp	r3, #0
 800440c:	d003      	beq.n	8004416 <HAL_I2C_EV_IRQHandler+0xd2>
    {
      I2C_Master_ADDR(hi2c);
 800440e:	6878      	ldr	r0, [r7, #4]
 8004410:	f000 fdf2 	bl	8004ff8 <I2C_Master_ADDR>
 8004414:	e06e      	b.n	80044f4 <HAL_I2C_EV_IRQHandler+0x1b0>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if (I2C_CHECK_FLAG(sr2itflags, I2C_FLAG_TRA) != RESET)
 8004416:	69bb      	ldr	r3, [r7, #24]
 8004418:	089b      	lsrs	r3, r3, #2
 800441a:	f003 0301 	and.w	r3, r3, #1
 800441e:	2b00      	cmp	r3, #0
 8004420:	d037      	beq.n	8004492 <HAL_I2C_EV_IRQHandler+0x14e>
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004422:	687b      	ldr	r3, [r7, #4]
 8004424:	681b      	ldr	r3, [r3, #0]
 8004426:	685b      	ldr	r3, [r3, #4]
 8004428:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800442c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 8004430:	f000 80ef 	beq.w	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* TXE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004434:	69fb      	ldr	r3, [r7, #28]
 8004436:	09db      	lsrs	r3, r3, #7
 8004438:	f003 0301 	and.w	r3, r3, #1
 800443c:	2b00      	cmp	r3, #0
 800443e:	d00f      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x11c>
 8004440:	697b      	ldr	r3, [r7, #20]
 8004442:	0a9b      	lsrs	r3, r3, #10
 8004444:	f003 0301 	and.w	r3, r3, #1
 8004448:	2b00      	cmp	r3, #0
 800444a:	d009      	beq.n	8004460 <HAL_I2C_EV_IRQHandler+0x11c>
 800444c:	69fb      	ldr	r3, [r7, #28]
 800444e:	089b      	lsrs	r3, r3, #2
 8004450:	f003 0301 	and.w	r3, r3, #1
 8004454:	2b00      	cmp	r3, #0
 8004456:	d103      	bne.n	8004460 <HAL_I2C_EV_IRQHandler+0x11c>
        {
          I2C_MasterTransmit_TXE(hi2c);
 8004458:	6878      	ldr	r0, [r7, #4]
 800445a:	f000 f9ef 	bl	800483c <I2C_MasterTransmit_TXE>
 800445e:	e049      	b.n	80044f4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004460:	69fb      	ldr	r3, [r7, #28]
 8004462:	089b      	lsrs	r3, r3, #2
 8004464:	f003 0301 	and.w	r3, r3, #1
 8004468:	2b00      	cmp	r3, #0
 800446a:	f000 80d2 	beq.w	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
 800446e:	697b      	ldr	r3, [r7, #20]
 8004470:	0a5b      	lsrs	r3, r3, #9
 8004472:	f003 0301 	and.w	r3, r3, #1
 8004476:	2b00      	cmp	r3, #0
 8004478:	f000 80cb 	beq.w	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          if (CurrentMode == HAL_I2C_MODE_MASTER)
 800447c:	7bfb      	ldrb	r3, [r7, #15]
 800447e:	2b10      	cmp	r3, #16
 8004480:	d103      	bne.n	800448a <HAL_I2C_EV_IRQHandler+0x146>
          {
            I2C_MasterTransmit_BTF(hi2c);
 8004482:	6878      	ldr	r0, [r7, #4]
 8004484:	f000 fa76 	bl	8004974 <I2C_MasterTransmit_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004488:	e0c3      	b.n	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
          }
          else /* HAL_I2C_MODE_MEM */
          {
            I2C_MemoryTransmit_TXE_BTF(hi2c);
 800448a:	6878      	ldr	r0, [r7, #4]
 800448c:	f000 fada 	bl	8004a44 <I2C_MemoryTransmit_TXE_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004490:	e0bf      	b.n	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* Do not check buffer and BTF flag if a Xfer DMA is on going */
      if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN)
 8004492:	687b      	ldr	r3, [r7, #4]
 8004494:	681b      	ldr	r3, [r3, #0]
 8004496:	685b      	ldr	r3, [r3, #4]
 8004498:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800449c:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80044a0:	f000 80b7 	beq.w	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
      {
        /* RXNE set and BTF reset -----------------------------------------------*/
        if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80044a4:	69fb      	ldr	r3, [r7, #28]
 80044a6:	099b      	lsrs	r3, r3, #6
 80044a8:	f003 0301 	and.w	r3, r3, #1
 80044ac:	2b00      	cmp	r3, #0
 80044ae:	d00f      	beq.n	80044d0 <HAL_I2C_EV_IRQHandler+0x18c>
 80044b0:	697b      	ldr	r3, [r7, #20]
 80044b2:	0a9b      	lsrs	r3, r3, #10
 80044b4:	f003 0301 	and.w	r3, r3, #1
 80044b8:	2b00      	cmp	r3, #0
 80044ba:	d009      	beq.n	80044d0 <HAL_I2C_EV_IRQHandler+0x18c>
 80044bc:	69fb      	ldr	r3, [r7, #28]
 80044be:	089b      	lsrs	r3, r3, #2
 80044c0:	f003 0301 	and.w	r3, r3, #1
 80044c4:	2b00      	cmp	r3, #0
 80044c6:	d103      	bne.n	80044d0 <HAL_I2C_EV_IRQHandler+0x18c>
        {
          I2C_MasterReceive_RXNE(hi2c);
 80044c8:	6878      	ldr	r0, [r7, #4]
 80044ca:	f000 fb4a 	bl	8004b62 <I2C_MasterReceive_RXNE>
 80044ce:	e011      	b.n	80044f4 <HAL_I2C_EV_IRQHandler+0x1b0>
        }
        /* BTF set -------------------------------------------------------------*/
        else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044d0:	69fb      	ldr	r3, [r7, #28]
 80044d2:	089b      	lsrs	r3, r3, #2
 80044d4:	f003 0301 	and.w	r3, r3, #1
 80044d8:	2b00      	cmp	r3, #0
 80044da:	f000 809a 	beq.w	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
 80044de:	697b      	ldr	r3, [r7, #20]
 80044e0:	0a5b      	lsrs	r3, r3, #9
 80044e2:	f003 0301 	and.w	r3, r3, #1
 80044e6:	2b00      	cmp	r3, #0
 80044e8:	f000 8093 	beq.w	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
        {
          I2C_MasterReceive_BTF(hi2c);
 80044ec:	6878      	ldr	r0, [r7, #4]
 80044ee:	f000 fbe9 	bl	8004cc4 <I2C_MasterReceive_BTF>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80044f2:	e08e      	b.n	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
 80044f4:	e08d      	b.n	8004612 <HAL_I2C_EV_IRQHandler+0x2ce>
  /* Slave mode selected */
  else
  {
    /* If an error is detected, read only SR1 register to prevent */
    /* a clear of ADDR flags by reading SR2 after reading SR1 in Error treatment */
    if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80044f6:	687b      	ldr	r3, [r7, #4]
 80044f8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80044fa:	2b00      	cmp	r3, #0
 80044fc:	d004      	beq.n	8004508 <HAL_I2C_EV_IRQHandler+0x1c4>
    {
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 80044fe:	687b      	ldr	r3, [r7, #4]
 8004500:	681b      	ldr	r3, [r3, #0]
 8004502:	695b      	ldr	r3, [r3, #20]
 8004504:	61fb      	str	r3, [r7, #28]
 8004506:	e007      	b.n	8004518 <HAL_I2C_EV_IRQHandler+0x1d4>
    }
    else
    {
      sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004508:	687b      	ldr	r3, [r7, #4]
 800450a:	681b      	ldr	r3, [r3, #0]
 800450c:	699b      	ldr	r3, [r3, #24]
 800450e:	61bb      	str	r3, [r7, #24]
      sr1itflags   = READ_REG(hi2c->Instance->SR1);
 8004510:	687b      	ldr	r3, [r7, #4]
 8004512:	681b      	ldr	r3, [r3, #0]
 8004514:	695b      	ldr	r3, [r3, #20]
 8004516:	61fb      	str	r3, [r7, #28]
    }

    /* ADDR set --------------------------------------------------------------*/
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ADDR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004518:	69fb      	ldr	r3, [r7, #28]
 800451a:	085b      	lsrs	r3, r3, #1
 800451c:	f003 0301 	and.w	r3, r3, #1
 8004520:	2b00      	cmp	r3, #0
 8004522:	d012      	beq.n	800454a <HAL_I2C_EV_IRQHandler+0x206>
 8004524:	697b      	ldr	r3, [r7, #20]
 8004526:	0a5b      	lsrs	r3, r3, #9
 8004528:	f003 0301 	and.w	r3, r3, #1
 800452c:	2b00      	cmp	r3, #0
 800452e:	d00c      	beq.n	800454a <HAL_I2C_EV_IRQHandler+0x206>
    {
      /* Now time to read SR2, this will clear ADDR flag automatically */
      if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 8004530:	687b      	ldr	r3, [r7, #4]
 8004532:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8004534:	2b00      	cmp	r3, #0
 8004536:	d003      	beq.n	8004540 <HAL_I2C_EV_IRQHandler+0x1fc>
      {
        sr2itflags   = READ_REG(hi2c->Instance->SR2);
 8004538:	687b      	ldr	r3, [r7, #4]
 800453a:	681b      	ldr	r3, [r3, #0]
 800453c:	699b      	ldr	r3, [r3, #24]
 800453e:	61bb      	str	r3, [r7, #24]
      }
      I2C_Slave_ADDR(hi2c, sr2itflags);
 8004540:	69b9      	ldr	r1, [r7, #24]
 8004542:	6878      	ldr	r0, [r7, #4]
 8004544:	f000 ffa7 	bl	8005496 <I2C_Slave_ADDR>
 8004548:	e066      	b.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* STOPF set --------------------------------------------------------------*/
    else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_STOPF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 800454a:	69fb      	ldr	r3, [r7, #28]
 800454c:	091b      	lsrs	r3, r3, #4
 800454e:	f003 0301 	and.w	r3, r3, #1
 8004552:	2b00      	cmp	r3, #0
 8004554:	d009      	beq.n	800456a <HAL_I2C_EV_IRQHandler+0x226>
 8004556:	697b      	ldr	r3, [r7, #20]
 8004558:	0a5b      	lsrs	r3, r3, #9
 800455a:	f003 0301 	and.w	r3, r3, #1
 800455e:	2b00      	cmp	r3, #0
 8004560:	d003      	beq.n	800456a <HAL_I2C_EV_IRQHandler+0x226>
    {
      I2C_Slave_STOPF(hi2c);
 8004562:	6878      	ldr	r0, [r7, #4]
 8004564:	f000 ffdc 	bl	8005520 <I2C_Slave_STOPF>
 8004568:	e056      	b.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
    }
    /* I2C in mode Transmitter -----------------------------------------------*/
    else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 800456a:	7bbb      	ldrb	r3, [r7, #14]
 800456c:	2b21      	cmp	r3, #33	; 0x21
 800456e:	d002      	beq.n	8004576 <HAL_I2C_EV_IRQHandler+0x232>
 8004570:	7bbb      	ldrb	r3, [r7, #14]
 8004572:	2b29      	cmp	r3, #41	; 0x29
 8004574:	d125      	bne.n	80045c2 <HAL_I2C_EV_IRQHandler+0x27e>
    {
      /* TXE set and BTF reset -----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004576:	69fb      	ldr	r3, [r7, #28]
 8004578:	09db      	lsrs	r3, r3, #7
 800457a:	f003 0301 	and.w	r3, r3, #1
 800457e:	2b00      	cmp	r3, #0
 8004580:	d00f      	beq.n	80045a2 <HAL_I2C_EV_IRQHandler+0x25e>
 8004582:	697b      	ldr	r3, [r7, #20]
 8004584:	0a9b      	lsrs	r3, r3, #10
 8004586:	f003 0301 	and.w	r3, r3, #1
 800458a:	2b00      	cmp	r3, #0
 800458c:	d009      	beq.n	80045a2 <HAL_I2C_EV_IRQHandler+0x25e>
 800458e:	69fb      	ldr	r3, [r7, #28]
 8004590:	089b      	lsrs	r3, r3, #2
 8004592:	f003 0301 	and.w	r3, r3, #1
 8004596:	2b00      	cmp	r3, #0
 8004598:	d103      	bne.n	80045a2 <HAL_I2C_EV_IRQHandler+0x25e>
      {
        I2C_SlaveTransmit_TXE(hi2c);
 800459a:	6878      	ldr	r0, [r7, #4]
 800459c:	f000 febd 	bl	800531a <I2C_SlaveTransmit_TXE>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045a0:	e039      	b.n	8004616 <HAL_I2C_EV_IRQHandler+0x2d2>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045a2:	69fb      	ldr	r3, [r7, #28]
 80045a4:	089b      	lsrs	r3, r3, #2
 80045a6:	f003 0301 	and.w	r3, r3, #1
 80045aa:	2b00      	cmp	r3, #0
 80045ac:	d033      	beq.n	8004616 <HAL_I2C_EV_IRQHandler+0x2d2>
 80045ae:	697b      	ldr	r3, [r7, #20]
 80045b0:	0a5b      	lsrs	r3, r3, #9
 80045b2:	f003 0301 	and.w	r3, r3, #1
 80045b6:	2b00      	cmp	r3, #0
 80045b8:	d02d      	beq.n	8004616 <HAL_I2C_EV_IRQHandler+0x2d2>
      {
        I2C_SlaveTransmit_BTF(hi2c);
 80045ba:	6878      	ldr	r0, [r7, #4]
 80045bc:	f000 feea 	bl	8005394 <I2C_SlaveTransmit_BTF>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045c0:	e029      	b.n	8004616 <HAL_I2C_EV_IRQHandler+0x2d2>
    }
    /* I2C in mode Receiver --------------------------------------------------*/
    else
    {
      /* RXNE set and BTF reset ----------------------------------------------*/
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_RXNE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 80045c2:	69fb      	ldr	r3, [r7, #28]
 80045c4:	099b      	lsrs	r3, r3, #6
 80045c6:	f003 0301 	and.w	r3, r3, #1
 80045ca:	2b00      	cmp	r3, #0
 80045cc:	d00f      	beq.n	80045ee <HAL_I2C_EV_IRQHandler+0x2aa>
 80045ce:	697b      	ldr	r3, [r7, #20]
 80045d0:	0a9b      	lsrs	r3, r3, #10
 80045d2:	f003 0301 	and.w	r3, r3, #1
 80045d6:	2b00      	cmp	r3, #0
 80045d8:	d009      	beq.n	80045ee <HAL_I2C_EV_IRQHandler+0x2aa>
 80045da:	69fb      	ldr	r3, [r7, #28]
 80045dc:	089b      	lsrs	r3, r3, #2
 80045de:	f003 0301 	and.w	r3, r3, #1
 80045e2:	2b00      	cmp	r3, #0
 80045e4:	d103      	bne.n	80045ee <HAL_I2C_EV_IRQHandler+0x2aa>
      {
        I2C_SlaveReceive_RXNE(hi2c);
 80045e6:	6878      	ldr	r0, [r7, #4]
 80045e8:	f000 fef5 	bl	80053d6 <I2C_SlaveReceive_RXNE>
 80045ec:	e014      	b.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
      }
      /* BTF set -------------------------------------------------------------*/
      else if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 80045ee:	69fb      	ldr	r3, [r7, #28]
 80045f0:	089b      	lsrs	r3, r3, #2
 80045f2:	f003 0301 	and.w	r3, r3, #1
 80045f6:	2b00      	cmp	r3, #0
 80045f8:	d00e      	beq.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
 80045fa:	697b      	ldr	r3, [r7, #20]
 80045fc:	0a5b      	lsrs	r3, r3, #9
 80045fe:	f003 0301 	and.w	r3, r3, #1
 8004602:	2b00      	cmp	r3, #0
 8004604:	d008      	beq.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
      {
        I2C_SlaveReceive_BTF(hi2c);
 8004606:	6878      	ldr	r0, [r7, #4]
 8004608:	f000 ff23 	bl	8005452 <I2C_SlaveReceive_BTF>
 800460c:	e004      	b.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
      return;
 800460e:	bf00      	nop
 8004610:	e002      	b.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
    if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_SB) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_EVT) != RESET))
 8004612:	bf00      	nop
 8004614:	e000      	b.n	8004618 <HAL_I2C_EV_IRQHandler+0x2d4>
      if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_TXE) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_BUF) != RESET) && (I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BTF) == RESET))
 8004616:	bf00      	nop
      {
        /* Do nothing */
      }
    }
  }
}
 8004618:	3720      	adds	r7, #32
 800461a:	46bd      	mov	sp, r7
 800461c:	bd80      	pop	{r7, pc}

0800461e <HAL_I2C_ER_IRQHandler>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
void HAL_I2C_ER_IRQHandler(I2C_HandleTypeDef *hi2c)
{
 800461e:	b580      	push	{r7, lr}
 8004620:	b08a      	sub	sp, #40	; 0x28
 8004622:	af00      	add	r7, sp, #0
 8004624:	6078      	str	r0, [r7, #4]
  HAL_I2C_ModeTypeDef tmp1;
  uint32_t tmp2;
  HAL_I2C_StateTypeDef tmp3;
  uint32_t tmp4;
  uint32_t sr1itflags = READ_REG(hi2c->Instance->SR1);
 8004626:	687b      	ldr	r3, [r7, #4]
 8004628:	681b      	ldr	r3, [r3, #0]
 800462a:	695b      	ldr	r3, [r3, #20]
 800462c:	623b      	str	r3, [r7, #32]
  uint32_t itsources  = READ_REG(hi2c->Instance->CR2);
 800462e:	687b      	ldr	r3, [r7, #4]
 8004630:	681b      	ldr	r3, [r3, #0]
 8004632:	685b      	ldr	r3, [r3, #4]
 8004634:	61fb      	str	r3, [r7, #28]
  uint32_t error      = HAL_I2C_ERROR_NONE;
 8004636:	2300      	movs	r3, #0
 8004638:	627b      	str	r3, [r7, #36]	; 0x24
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800463a:	687b      	ldr	r3, [r7, #4]
 800463c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004640:	76fb      	strb	r3, [r7, #27]

  /* I2C Bus error interrupt occurred ----------------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_BERR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004642:	6a3b      	ldr	r3, [r7, #32]
 8004644:	0a1b      	lsrs	r3, r3, #8
 8004646:	f003 0301 	and.w	r3, r3, #1
 800464a:	2b00      	cmp	r3, #0
 800464c:	d00e      	beq.n	800466c <HAL_I2C_ER_IRQHandler+0x4e>
 800464e:	69fb      	ldr	r3, [r7, #28]
 8004650:	0a1b      	lsrs	r3, r3, #8
 8004652:	f003 0301 	and.w	r3, r3, #1
 8004656:	2b00      	cmp	r3, #0
 8004658:	d008      	beq.n	800466c <HAL_I2C_ER_IRQHandler+0x4e>
  {
    error |= HAL_I2C_ERROR_BERR;
 800465a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800465c:	f043 0301 	orr.w	r3, r3, #1
 8004660:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear BERR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_BERR);
 8004662:	687b      	ldr	r3, [r7, #4]
 8004664:	681b      	ldr	r3, [r3, #0]
 8004666:	f46f 7280 	mvn.w	r2, #256	; 0x100
 800466a:	615a      	str	r2, [r3, #20]
  }

  /* I2C Arbitration Lost error interrupt occurred ---------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_ARLO) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 800466c:	6a3b      	ldr	r3, [r7, #32]
 800466e:	0a5b      	lsrs	r3, r3, #9
 8004670:	f003 0301 	and.w	r3, r3, #1
 8004674:	2b00      	cmp	r3, #0
 8004676:	d00e      	beq.n	8004696 <HAL_I2C_ER_IRQHandler+0x78>
 8004678:	69fb      	ldr	r3, [r7, #28]
 800467a:	0a1b      	lsrs	r3, r3, #8
 800467c:	f003 0301 	and.w	r3, r3, #1
 8004680:	2b00      	cmp	r3, #0
 8004682:	d008      	beq.n	8004696 <HAL_I2C_ER_IRQHandler+0x78>
  {
    error |= HAL_I2C_ERROR_ARLO;
 8004684:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004686:	f043 0302 	orr.w	r3, r3, #2
 800468a:	627b      	str	r3, [r7, #36]	; 0x24

    /* Clear ARLO flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ARLO);
 800468c:	687b      	ldr	r3, [r7, #4]
 800468e:	681b      	ldr	r3, [r3, #0]
 8004690:	f46f 7200 	mvn.w	r2, #512	; 0x200
 8004694:	615a      	str	r2, [r3, #20]
  }

  /* I2C Acknowledge failure error interrupt occurred ------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_AF) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004696:	6a3b      	ldr	r3, [r7, #32]
 8004698:	0a9b      	lsrs	r3, r3, #10
 800469a:	f003 0301 	and.w	r3, r3, #1
 800469e:	2b00      	cmp	r3, #0
 80046a0:	d03f      	beq.n	8004722 <HAL_I2C_ER_IRQHandler+0x104>
 80046a2:	69fb      	ldr	r3, [r7, #28]
 80046a4:	0a1b      	lsrs	r3, r3, #8
 80046a6:	f003 0301 	and.w	r3, r3, #1
 80046aa:	2b00      	cmp	r3, #0
 80046ac:	d039      	beq.n	8004722 <HAL_I2C_ER_IRQHandler+0x104>
  {
    tmp1 = CurrentMode;
 80046ae:	7efb      	ldrb	r3, [r7, #27]
 80046b0:	76bb      	strb	r3, [r7, #26]
    tmp2 = hi2c->XferCount;
 80046b2:	687b      	ldr	r3, [r7, #4]
 80046b4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80046b6:	b29b      	uxth	r3, r3
 80046b8:	617b      	str	r3, [r7, #20]
    tmp3 = hi2c->State;
 80046ba:	687b      	ldr	r3, [r7, #4]
 80046bc:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80046c0:	74fb      	strb	r3, [r7, #19]
    tmp4 = hi2c->PreviousState;
 80046c2:	687b      	ldr	r3, [r7, #4]
 80046c4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80046c6:	60fb      	str	r3, [r7, #12]
    if ((tmp1 == HAL_I2C_MODE_SLAVE) && (tmp2 == 0U) && \
 80046c8:	7ebb      	ldrb	r3, [r7, #26]
 80046ca:	2b20      	cmp	r3, #32
 80046cc:	d112      	bne.n	80046f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80046ce:	697b      	ldr	r3, [r7, #20]
 80046d0:	2b00      	cmp	r3, #0
 80046d2:	d10f      	bne.n	80046f4 <HAL_I2C_ER_IRQHandler+0xd6>
 80046d4:	7cfb      	ldrb	r3, [r7, #19]
 80046d6:	2b21      	cmp	r3, #33	; 0x21
 80046d8:	d008      	beq.n	80046ec <HAL_I2C_ER_IRQHandler+0xce>
        ((tmp3 == HAL_I2C_STATE_BUSY_TX) || (tmp3 == HAL_I2C_STATE_BUSY_TX_LISTEN) || \
 80046da:	7cfb      	ldrb	r3, [r7, #19]
 80046dc:	2b29      	cmp	r3, #41	; 0x29
 80046de:	d005      	beq.n	80046ec <HAL_I2C_ER_IRQHandler+0xce>
 80046e0:	7cfb      	ldrb	r3, [r7, #19]
 80046e2:	2b28      	cmp	r3, #40	; 0x28
 80046e4:	d106      	bne.n	80046f4 <HAL_I2C_ER_IRQHandler+0xd6>
         ((tmp3 == HAL_I2C_STATE_LISTEN) && (tmp4 == I2C_STATE_SLAVE_BUSY_TX))))
 80046e6:	68fb      	ldr	r3, [r7, #12]
 80046e8:	2b21      	cmp	r3, #33	; 0x21
 80046ea:	d103      	bne.n	80046f4 <HAL_I2C_ER_IRQHandler+0xd6>
    {
      I2C_Slave_AF(hi2c);
 80046ec:	6878      	ldr	r0, [r7, #4]
 80046ee:	f001 f847 	bl	8005780 <I2C_Slave_AF>
 80046f2:	e016      	b.n	8004722 <HAL_I2C_ER_IRQHandler+0x104>
    }
    else
    {
      /* Clear AF flag */
      __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80046f4:	687b      	ldr	r3, [r7, #4]
 80046f6:	681b      	ldr	r3, [r3, #0]
 80046f8:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80046fc:	615a      	str	r2, [r3, #20]

      error |= HAL_I2C_ERROR_AF;
 80046fe:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004700:	f043 0304 	orr.w	r3, r3, #4
 8004704:	627b      	str	r3, [r7, #36]	; 0x24

      /* Do not generate a STOP in case of Slave receive non acknowledge during transfer (mean not at the end of transfer) */
      if ((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM))
 8004706:	7efb      	ldrb	r3, [r7, #27]
 8004708:	2b10      	cmp	r3, #16
 800470a:	d002      	beq.n	8004712 <HAL_I2C_ER_IRQHandler+0xf4>
 800470c:	7efb      	ldrb	r3, [r7, #27]
 800470e:	2b40      	cmp	r3, #64	; 0x40
 8004710:	d107      	bne.n	8004722 <HAL_I2C_ER_IRQHandler+0x104>
      {
        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004712:	687b      	ldr	r3, [r7, #4]
 8004714:	681b      	ldr	r3, [r3, #0]
 8004716:	681a      	ldr	r2, [r3, #0]
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	681b      	ldr	r3, [r3, #0]
 800471c:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004720:	601a      	str	r2, [r3, #0]
      }
    }
  }

  /* I2C Over-Run/Under-Run interrupt occurred -------------------------------*/
  if ((I2C_CHECK_FLAG(sr1itflags, I2C_FLAG_OVR) != RESET) && (I2C_CHECK_IT_SOURCE(itsources, I2C_IT_ERR) != RESET))
 8004722:	6a3b      	ldr	r3, [r7, #32]
 8004724:	0adb      	lsrs	r3, r3, #11
 8004726:	f003 0301 	and.w	r3, r3, #1
 800472a:	2b00      	cmp	r3, #0
 800472c:	d00e      	beq.n	800474c <HAL_I2C_ER_IRQHandler+0x12e>
 800472e:	69fb      	ldr	r3, [r7, #28]
 8004730:	0a1b      	lsrs	r3, r3, #8
 8004732:	f003 0301 	and.w	r3, r3, #1
 8004736:	2b00      	cmp	r3, #0
 8004738:	d008      	beq.n	800474c <HAL_I2C_ER_IRQHandler+0x12e>
  {
    error |= HAL_I2C_ERROR_OVR;
 800473a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800473c:	f043 0308 	orr.w	r3, r3, #8
 8004740:	627b      	str	r3, [r7, #36]	; 0x24
    /* Clear OVR flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_OVR);
 8004742:	687b      	ldr	r3, [r7, #4]
 8004744:	681b      	ldr	r3, [r3, #0]
 8004746:	f46f 6200 	mvn.w	r2, #2048	; 0x800
 800474a:	615a      	str	r2, [r3, #20]
  }

  /* Call the Error Callback in case of Error detected -----------------------*/
  if (error != HAL_I2C_ERROR_NONE)
 800474c:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800474e:	2b00      	cmp	r3, #0
 8004750:	d008      	beq.n	8004764 <HAL_I2C_ER_IRQHandler+0x146>
  {
    hi2c->ErrorCode |= error;
 8004752:	687b      	ldr	r3, [r7, #4]
 8004754:	6c1a      	ldr	r2, [r3, #64]	; 0x40
 8004756:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8004758:	431a      	orrs	r2, r3
 800475a:	687b      	ldr	r3, [r7, #4]
 800475c:	641a      	str	r2, [r3, #64]	; 0x40
    I2C_ITError(hi2c);
 800475e:	6878      	ldr	r0, [r7, #4]
 8004760:	f001 f87e 	bl	8005860 <I2C_ITError>
  }
}
 8004764:	bf00      	nop
 8004766:	3728      	adds	r7, #40	; 0x28
 8004768:	46bd      	mov	sp, r7
 800476a:	bd80      	pop	{r7, pc}

0800476c <HAL_I2C_MasterTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 800476c:	b480      	push	{r7}
 800476e:	b083      	sub	sp, #12
 8004770:	af00      	add	r7, sp, #0
 8004772:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterTxCpltCallback could be implemented in the user file
   */
}
 8004774:	bf00      	nop
 8004776:	370c      	adds	r7, #12
 8004778:	46bd      	mov	sp, r7
 800477a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800477e:	4770      	bx	lr

08004780 <HAL_I2C_MasterRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MasterRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004780:	b480      	push	{r7}
 8004782:	b083      	sub	sp, #12
 8004784:	af00      	add	r7, sp, #0
 8004786:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MasterRxCpltCallback could be implemented in the user file
   */
}
 8004788:	bf00      	nop
 800478a:	370c      	adds	r7, #12
 800478c:	46bd      	mov	sp, r7
 800478e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004792:	4770      	bx	lr

08004794 <HAL_I2C_SlaveTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004794:	b480      	push	{r7}
 8004796:	b083      	sub	sp, #12
 8004798:	af00      	add	r7, sp, #0
 800479a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveTxCpltCallback could be implemented in the user file
   */
}
 800479c:	bf00      	nop
 800479e:	370c      	adds	r7, #12
 80047a0:	46bd      	mov	sp, r7
 80047a2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047a6:	4770      	bx	lr

080047a8 <HAL_I2C_SlaveRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_SlaveRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047a8:	b480      	push	{r7}
 80047aa:	b083      	sub	sp, #12
 80047ac:	af00      	add	r7, sp, #0
 80047ae:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_SlaveRxCpltCallback could be implemented in the user file
   */
}
 80047b0:	bf00      	nop
 80047b2:	370c      	adds	r7, #12
 80047b4:	46bd      	mov	sp, r7
 80047b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ba:	4770      	bx	lr

080047bc <HAL_I2C_AddrCallback>:
  * @param  TransferDirection Master request Transfer Direction (Write/Read), value of @ref I2C_XferDirection_definition
  * @param  AddrMatchCode Address Match Code
  * @retval None
  */
__weak void HAL_I2C_AddrCallback(I2C_HandleTypeDef *hi2c, uint8_t TransferDirection, uint16_t AddrMatchCode)
{
 80047bc:	b480      	push	{r7}
 80047be:	b083      	sub	sp, #12
 80047c0:	af00      	add	r7, sp, #0
 80047c2:	6078      	str	r0, [r7, #4]
 80047c4:	460b      	mov	r3, r1
 80047c6:	70fb      	strb	r3, [r7, #3]
 80047c8:	4613      	mov	r3, r2
 80047ca:	803b      	strh	r3, [r7, #0]
  UNUSED(AddrMatchCode);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AddrCallback() could be implemented in the user file
   */
}
 80047cc:	bf00      	nop
 80047ce:	370c      	adds	r7, #12
 80047d0:	46bd      	mov	sp, r7
 80047d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047d6:	4770      	bx	lr

080047d8 <HAL_I2C_ListenCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ListenCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047d8:	b480      	push	{r7}
 80047da:	b083      	sub	sp, #12
 80047dc:	af00      	add	r7, sp, #0
 80047de:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ListenCpltCallback() could be implemented in the user file
  */
}
 80047e0:	bf00      	nop
 80047e2:	370c      	adds	r7, #12
 80047e4:	46bd      	mov	sp, r7
 80047e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047ea:	4770      	bx	lr

080047ec <HAL_I2C_MemTxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemTxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 80047ec:	b480      	push	{r7}
 80047ee:	b083      	sub	sp, #12
 80047f0:	af00      	add	r7, sp, #0
 80047f2:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemTxCpltCallback could be implemented in the user file
   */
}
 80047f4:	bf00      	nop
 80047f6:	370c      	adds	r7, #12
 80047f8:	46bd      	mov	sp, r7
 80047fa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80047fe:	4770      	bx	lr

08004800 <HAL_I2C_MemRxCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_MemRxCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004800:	b480      	push	{r7}
 8004802:	b083      	sub	sp, #12
 8004804:	af00      	add	r7, sp, #0
 8004806:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_MemRxCpltCallback could be implemented in the user file
   */
}
 8004808:	bf00      	nop
 800480a:	370c      	adds	r7, #12
 800480c:	46bd      	mov	sp, r7
 800480e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004812:	4770      	bx	lr

08004814 <HAL_I2C_ErrorCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_ErrorCallback(I2C_HandleTypeDef *hi2c)
{
 8004814:	b480      	push	{r7}
 8004816:	b083      	sub	sp, #12
 8004818:	af00      	add	r7, sp, #0
 800481a:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_ErrorCallback could be implemented in the user file
   */
}
 800481c:	bf00      	nop
 800481e:	370c      	adds	r7, #12
 8004820:	46bd      	mov	sp, r7
 8004822:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004826:	4770      	bx	lr

08004828 <HAL_I2C_AbortCpltCallback>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval None
  */
__weak void HAL_I2C_AbortCpltCallback(I2C_HandleTypeDef *hi2c)
{
 8004828:	b480      	push	{r7}
 800482a:	b083      	sub	sp, #12
 800482c:	af00      	add	r7, sp, #0
 800482e:	6078      	str	r0, [r7, #4]
  UNUSED(hi2c);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_I2C_AbortCpltCallback could be implemented in the user file
   */
}
 8004830:	bf00      	nop
 8004832:	370c      	adds	r7, #12
 8004834:	46bd      	mov	sp, r7
 8004836:	f85d 7b04 	ldr.w	r7, [sp], #4
 800483a:	4770      	bx	lr

0800483c <I2C_MasterTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800483c:	b580      	push	{r7, lr}
 800483e:	b084      	sub	sp, #16
 8004840:	af00      	add	r7, sp, #0
 8004842:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004844:	687b      	ldr	r3, [r7, #4]
 8004846:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800484a:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode   = hi2c->Mode;
 800484c:	687b      	ldr	r3, [r7, #4]
 800484e:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004852:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8004854:	687b      	ldr	r3, [r7, #4]
 8004856:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004858:	60bb      	str	r3, [r7, #8]

  if ((hi2c->XferSize == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 800485a:	687b      	ldr	r3, [r7, #4]
 800485c:	8d1b      	ldrh	r3, [r3, #40]	; 0x28
 800485e:	2b00      	cmp	r3, #0
 8004860:	d150      	bne.n	8004904 <I2C_MasterTransmit_TXE+0xc8>
 8004862:	7bfb      	ldrb	r3, [r7, #15]
 8004864:	2b21      	cmp	r3, #33	; 0x21
 8004866:	d14d      	bne.n	8004904 <I2C_MasterTransmit_TXE+0xc8>
  {
    /* Call TxCpltCallback() directly if no stop mode is set */
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004868:	68bb      	ldr	r3, [r7, #8]
 800486a:	2b08      	cmp	r3, #8
 800486c:	d01d      	beq.n	80048aa <I2C_MasterTransmit_TXE+0x6e>
 800486e:	68bb      	ldr	r3, [r7, #8]
 8004870:	2b20      	cmp	r3, #32
 8004872:	d01a      	beq.n	80048aa <I2C_MasterTransmit_TXE+0x6e>
 8004874:	68bb      	ldr	r3, [r7, #8]
 8004876:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 800487a:	d016      	beq.n	80048aa <I2C_MasterTransmit_TXE+0x6e>
    {
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 800487c:	687b      	ldr	r3, [r7, #4]
 800487e:	681b      	ldr	r3, [r3, #0]
 8004880:	685a      	ldr	r2, [r3, #4]
 8004882:	687b      	ldr	r3, [r7, #4]
 8004884:	681b      	ldr	r3, [r3, #0]
 8004886:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800488a:	605a      	str	r2, [r3, #4]

      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 800488c:	687b      	ldr	r3, [r7, #4]
 800488e:	2211      	movs	r2, #17
 8004890:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004892:	687b      	ldr	r3, [r7, #4]
 8004894:	2200      	movs	r2, #0
 8004896:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->State = HAL_I2C_STATE_READY;
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	2220      	movs	r2, #32
 800489e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->MasterTxCpltCallback(hi2c);
#else
      HAL_I2C_MasterTxCpltCallback(hi2c);
 80048a2:	6878      	ldr	r0, [r7, #4]
 80048a4:	f7ff ff62 	bl	800476c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048a8:	e060      	b.n	800496c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
    else /* Generate Stop condition then Call TxCpltCallback() */
    {
      /* Disable EVT, BUF and ERR interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80048aa:	687b      	ldr	r3, [r7, #4]
 80048ac:	681b      	ldr	r3, [r3, #0]
 80048ae:	685a      	ldr	r2, [r3, #4]
 80048b0:	687b      	ldr	r3, [r7, #4]
 80048b2:	681b      	ldr	r3, [r3, #0]
 80048b4:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80048b8:	605a      	str	r2, [r3, #4]

      /* Generate Stop */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80048ba:	687b      	ldr	r3, [r7, #4]
 80048bc:	681b      	ldr	r3, [r3, #0]
 80048be:	681a      	ldr	r2, [r3, #0]
 80048c0:	687b      	ldr	r3, [r7, #4]
 80048c2:	681b      	ldr	r3, [r3, #0]
 80048c4:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80048c8:	601a      	str	r2, [r3, #0]

      hi2c->PreviousState = I2C_STATE_NONE;
 80048ca:	687b      	ldr	r3, [r7, #4]
 80048cc:	2200      	movs	r2, #0
 80048ce:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 80048d0:	687b      	ldr	r3, [r7, #4]
 80048d2:	2220      	movs	r2, #32
 80048d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80048de:	b2db      	uxtb	r3, r3
 80048e0:	2b40      	cmp	r3, #64	; 0x40
 80048e2:	d107      	bne.n	80048f4 <I2C_MasterTransmit_TXE+0xb8>
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048e4:	687b      	ldr	r3, [r7, #4]
 80048e6:	2200      	movs	r2, #0
 80048e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MemTxCpltCallback(hi2c);
#else
        HAL_I2C_MemTxCpltCallback(hi2c);
 80048ec:	6878      	ldr	r0, [r7, #4]
 80048ee:	f7ff ff7d 	bl	80047ec <HAL_I2C_MemTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80048f2:	e03b      	b.n	800496c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
      else
      {
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80048f4:	687b      	ldr	r3, [r7, #4]
 80048f6:	2200      	movs	r2, #0
 80048f8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
        hi2c->MasterTxCpltCallback(hi2c);
#else
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80048fc:	6878      	ldr	r0, [r7, #4]
 80048fe:	f7ff ff35 	bl	800476c <HAL_I2C_MasterTxCpltCallback>
    if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 8004902:	e033      	b.n	800496c <I2C_MasterTransmit_TXE+0x130>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
  else if ((CurrentState == HAL_I2C_STATE_BUSY_TX) || \
 8004904:	7bfb      	ldrb	r3, [r7, #15]
 8004906:	2b21      	cmp	r3, #33	; 0x21
 8004908:	d005      	beq.n	8004916 <I2C_MasterTransmit_TXE+0xda>
 800490a:	7bbb      	ldrb	r3, [r7, #14]
 800490c:	2b40      	cmp	r3, #64	; 0x40
 800490e:	d12d      	bne.n	800496c <I2C_MasterTransmit_TXE+0x130>
           ((CurrentMode == HAL_I2C_MODE_MEM) && (CurrentState == HAL_I2C_STATE_BUSY_RX)))
 8004910:	7bfb      	ldrb	r3, [r7, #15]
 8004912:	2b22      	cmp	r3, #34	; 0x22
 8004914:	d12a      	bne.n	800496c <I2C_MasterTransmit_TXE+0x130>
  {
    if (hi2c->XferCount == 0U)
 8004916:	687b      	ldr	r3, [r7, #4]
 8004918:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800491a:	b29b      	uxth	r3, r3
 800491c:	2b00      	cmp	r3, #0
 800491e:	d108      	bne.n	8004932 <I2C_MasterTransmit_TXE+0xf6>
    {
      /* Disable BUF interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004920:	687b      	ldr	r3, [r7, #4]
 8004922:	681b      	ldr	r3, [r3, #0]
 8004924:	685a      	ldr	r2, [r3, #4]
 8004926:	687b      	ldr	r3, [r7, #4]
 8004928:	681b      	ldr	r3, [r3, #0]
 800492a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800492e:	605a      	str	r2, [r3, #4]
  }
  else
  {
    /* Do nothing */
  }
}
 8004930:	e01c      	b.n	800496c <I2C_MasterTransmit_TXE+0x130>
      if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004932:	687b      	ldr	r3, [r7, #4]
 8004934:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004938:	b2db      	uxtb	r3, r3
 800493a:	2b40      	cmp	r3, #64	; 0x40
 800493c:	d103      	bne.n	8004946 <I2C_MasterTransmit_TXE+0x10a>
        I2C_MemoryTransmit_TXE_BTF(hi2c);
 800493e:	6878      	ldr	r0, [r7, #4]
 8004940:	f000 f880 	bl	8004a44 <I2C_MemoryTransmit_TXE_BTF>
}
 8004944:	e012      	b.n	800496c <I2C_MasterTransmit_TXE+0x130>
        hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004946:	687b      	ldr	r3, [r7, #4]
 8004948:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800494a:	781a      	ldrb	r2, [r3, #0]
 800494c:	687b      	ldr	r3, [r7, #4]
 800494e:	681b      	ldr	r3, [r3, #0]
 8004950:	611a      	str	r2, [r3, #16]
        hi2c->pBuffPtr++;
 8004952:	687b      	ldr	r3, [r7, #4]
 8004954:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004956:	1c5a      	adds	r2, r3, #1
 8004958:	687b      	ldr	r3, [r7, #4]
 800495a:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 800495c:	687b      	ldr	r3, [r7, #4]
 800495e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004960:	b29b      	uxth	r3, r3
 8004962:	3b01      	subs	r3, #1
 8004964:	b29a      	uxth	r2, r3
 8004966:	687b      	ldr	r3, [r7, #4]
 8004968:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 800496a:	e7ff      	b.n	800496c <I2C_MasterTransmit_TXE+0x130>
 800496c:	bf00      	nop
 800496e:	3710      	adds	r7, #16
 8004970:	46bd      	mov	sp, r7
 8004972:	bd80      	pop	{r7, pc}

08004974 <I2C_MasterTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8004974:	b580      	push	{r7, lr}
 8004976:	b084      	sub	sp, #16
 8004978:	af00      	add	r7, sp, #0
 800497a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 800497c:	687b      	ldr	r3, [r7, #4]
 800497e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004980:	60fb      	str	r3, [r7, #12]

  if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004982:	687b      	ldr	r3, [r7, #4]
 8004984:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004988:	b2db      	uxtb	r3, r3
 800498a:	2b21      	cmp	r3, #33	; 0x21
 800498c:	d156      	bne.n	8004a3c <I2C_MasterTransmit_BTF+0xc8>
  {
    if (hi2c->XferCount != 0U)
 800498e:	687b      	ldr	r3, [r7, #4]
 8004990:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004992:	b29b      	uxth	r3, r3
 8004994:	2b00      	cmp	r3, #0
 8004996:	d012      	beq.n	80049be <I2C_MasterTransmit_BTF+0x4a>
    {
      /* Write data to DR */
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004998:	687b      	ldr	r3, [r7, #4]
 800499a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800499c:	781a      	ldrb	r2, [r3, #0]
 800499e:	687b      	ldr	r3, [r7, #4]
 80049a0:	681b      	ldr	r3, [r3, #0]
 80049a2:	611a      	str	r2, [r3, #16]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80049a4:	687b      	ldr	r3, [r7, #4]
 80049a6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80049a8:	1c5a      	adds	r2, r3, #1
 80049aa:	687b      	ldr	r3, [r7, #4]
 80049ac:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80049ae:	687b      	ldr	r3, [r7, #4]
 80049b0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80049b2:	b29b      	uxth	r3, r3
 80049b4:	3b01      	subs	r3, #1
 80049b6:	b29a      	uxth	r2, r3
 80049b8:	687b      	ldr	r3, [r7, #4]
 80049ba:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
  else
  {
    /* Do nothing */
  }
}
 80049bc:	e03e      	b.n	8004a3c <I2C_MasterTransmit_BTF+0xc8>
      if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) && (CurrentXferOptions != I2C_NO_OPTION_FRAME))
 80049be:	68fb      	ldr	r3, [r7, #12]
 80049c0:	2b08      	cmp	r3, #8
 80049c2:	d01d      	beq.n	8004a00 <I2C_MasterTransmit_BTF+0x8c>
 80049c4:	68fb      	ldr	r3, [r7, #12]
 80049c6:	2b20      	cmp	r3, #32
 80049c8:	d01a      	beq.n	8004a00 <I2C_MasterTransmit_BTF+0x8c>
 80049ca:	68fb      	ldr	r3, [r7, #12]
 80049cc:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80049d0:	d016      	beq.n	8004a00 <I2C_MasterTransmit_BTF+0x8c>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80049d2:	687b      	ldr	r3, [r7, #4]
 80049d4:	681b      	ldr	r3, [r3, #0]
 80049d6:	685a      	ldr	r2, [r3, #4]
 80049d8:	687b      	ldr	r3, [r7, #4]
 80049da:	681b      	ldr	r3, [r3, #0]
 80049dc:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80049e0:	605a      	str	r2, [r3, #4]
        hi2c->PreviousState = I2C_STATE_MASTER_BUSY_TX;
 80049e2:	687b      	ldr	r3, [r7, #4]
 80049e4:	2211      	movs	r2, #17
 80049e6:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->Mode = HAL_I2C_MODE_NONE;
 80049e8:	687b      	ldr	r3, [r7, #4]
 80049ea:	2200      	movs	r2, #0
 80049ec:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        hi2c->State = HAL_I2C_STATE_READY;
 80049f0:	687b      	ldr	r3, [r7, #4]
 80049f2:	2220      	movs	r2, #32
 80049f4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        HAL_I2C_MasterTxCpltCallback(hi2c);
 80049f8:	6878      	ldr	r0, [r7, #4]
 80049fa:	f7ff feb7 	bl	800476c <HAL_I2C_MasterTxCpltCallback>
}
 80049fe:	e01d      	b.n	8004a3c <I2C_MasterTransmit_BTF+0xc8>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004a00:	687b      	ldr	r3, [r7, #4]
 8004a02:	681b      	ldr	r3, [r3, #0]
 8004a04:	685a      	ldr	r2, [r3, #4]
 8004a06:	687b      	ldr	r3, [r7, #4]
 8004a08:	681b      	ldr	r3, [r3, #0]
 8004a0a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004a0e:	605a      	str	r2, [r3, #4]
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004a10:	687b      	ldr	r3, [r7, #4]
 8004a12:	681b      	ldr	r3, [r3, #0]
 8004a14:	681a      	ldr	r2, [r3, #0]
 8004a16:	687b      	ldr	r3, [r7, #4]
 8004a18:	681b      	ldr	r3, [r3, #0]
 8004a1a:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004a1e:	601a      	str	r2, [r3, #0]
        hi2c->PreviousState = I2C_STATE_NONE;
 8004a20:	687b      	ldr	r3, [r7, #4]
 8004a22:	2200      	movs	r2, #0
 8004a24:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 8004a26:	687b      	ldr	r3, [r7, #4]
 8004a28:	2220      	movs	r2, #32
 8004a2a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004a2e:	687b      	ldr	r3, [r7, #4]
 8004a30:	2200      	movs	r2, #0
 8004a32:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_MasterTxCpltCallback(hi2c);
 8004a36:	6878      	ldr	r0, [r7, #4]
 8004a38:	f7ff fe98 	bl	800476c <HAL_I2C_MasterTxCpltCallback>
}
 8004a3c:	bf00      	nop
 8004a3e:	3710      	adds	r7, #16
 8004a40:	46bd      	mov	sp, r7
 8004a42:	bd80      	pop	{r7, pc}

08004a44 <I2C_MemoryTransmit_TXE_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MemoryTransmit_TXE_BTF(I2C_HandleTypeDef *hi2c)
{
 8004a44:	b580      	push	{r7, lr}
 8004a46:	b084      	sub	sp, #16
 8004a48:	af00      	add	r7, sp, #0
 8004a4a:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8004a4c:	687b      	ldr	r3, [r7, #4]
 8004a4e:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004a52:	73fb      	strb	r3, [r7, #15]

  if (hi2c->EventCount == 0U)
 8004a54:	687b      	ldr	r3, [r7, #4]
 8004a56:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a58:	2b00      	cmp	r3, #0
 8004a5a:	d11d      	bne.n	8004a98 <I2C_MemoryTransmit_TXE_BTF+0x54>
  {
    /* If Memory address size is 8Bit */
    if (hi2c->MemaddSize == I2C_MEMADD_SIZE_8BIT)
 8004a5c:	687b      	ldr	r3, [r7, #4]
 8004a5e:	6cdb      	ldr	r3, [r3, #76]	; 0x4c
 8004a60:	2b01      	cmp	r3, #1
 8004a62:	d10b      	bne.n	8004a7c <I2C_MemoryTransmit_TXE_BTF+0x38>
    {
      /* Send Memory Address */
      hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004a64:	687b      	ldr	r3, [r7, #4]
 8004a66:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a68:	b2da      	uxtb	r2, r3
 8004a6a:	687b      	ldr	r3, [r7, #4]
 8004a6c:	681b      	ldr	r3, [r3, #0]
 8004a6e:	611a      	str	r2, [r3, #16]

      hi2c->EventCount += 2U;
 8004a70:	687b      	ldr	r3, [r7, #4]
 8004a72:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a74:	1c9a      	adds	r2, r3, #2
 8004a76:	687b      	ldr	r3, [r7, #4]
 8004a78:	651a      	str	r2, [r3, #80]	; 0x50
  }
  else
  {
    /* Do nothing */
  }
}
 8004a7a:	e06e      	b.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
      hi2c->Instance->DR = I2C_MEM_ADD_MSB(hi2c->Memaddress);
 8004a7c:	687b      	ldr	r3, [r7, #4]
 8004a7e:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004a80:	b29b      	uxth	r3, r3
 8004a82:	121b      	asrs	r3, r3, #8
 8004a84:	b2da      	uxtb	r2, r3
 8004a86:	687b      	ldr	r3, [r7, #4]
 8004a88:	681b      	ldr	r3, [r3, #0]
 8004a8a:	611a      	str	r2, [r3, #16]
      hi2c->EventCount++;
 8004a8c:	687b      	ldr	r3, [r7, #4]
 8004a8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a90:	1c5a      	adds	r2, r3, #1
 8004a92:	687b      	ldr	r3, [r7, #4]
 8004a94:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004a96:	e060      	b.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 1U)
 8004a98:	687b      	ldr	r3, [r7, #4]
 8004a9a:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004a9c:	2b01      	cmp	r3, #1
 8004a9e:	d10b      	bne.n	8004ab8 <I2C_MemoryTransmit_TXE_BTF+0x74>
    hi2c->Instance->DR = I2C_MEM_ADD_LSB(hi2c->Memaddress);
 8004aa0:	687b      	ldr	r3, [r7, #4]
 8004aa2:	6c9b      	ldr	r3, [r3, #72]	; 0x48
 8004aa4:	b2da      	uxtb	r2, r3
 8004aa6:	687b      	ldr	r3, [r7, #4]
 8004aa8:	681b      	ldr	r3, [r3, #0]
 8004aaa:	611a      	str	r2, [r3, #16]
    hi2c->EventCount++;
 8004aac:	687b      	ldr	r3, [r7, #4]
 8004aae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004ab0:	1c5a      	adds	r2, r3, #1
 8004ab2:	687b      	ldr	r3, [r7, #4]
 8004ab4:	651a      	str	r2, [r3, #80]	; 0x50
}
 8004ab6:	e050      	b.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
  else if (hi2c->EventCount == 2U)
 8004ab8:	687b      	ldr	r3, [r7, #4]
 8004aba:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004abc:	2b02      	cmp	r3, #2
 8004abe:	d14c      	bne.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX)
 8004ac0:	7bfb      	ldrb	r3, [r7, #15]
 8004ac2:	2b22      	cmp	r3, #34	; 0x22
 8004ac4:	d108      	bne.n	8004ad8 <I2C_MemoryTransmit_TXE_BTF+0x94>
      hi2c->Instance->CR1 |= I2C_CR1_START;
 8004ac6:	687b      	ldr	r3, [r7, #4]
 8004ac8:	681b      	ldr	r3, [r3, #0]
 8004aca:	681a      	ldr	r2, [r3, #0]
 8004acc:	687b      	ldr	r3, [r7, #4]
 8004ace:	681b      	ldr	r3, [r3, #0]
 8004ad0:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8004ad4:	601a      	str	r2, [r3, #0]
}
 8004ad6:	e040      	b.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount > 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004ad8:	687b      	ldr	r3, [r7, #4]
 8004ada:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004adc:	b29b      	uxth	r3, r3
 8004ade:	2b00      	cmp	r3, #0
 8004ae0:	d015      	beq.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0xca>
 8004ae2:	7bfb      	ldrb	r3, [r7, #15]
 8004ae4:	2b21      	cmp	r3, #33	; 0x21
 8004ae6:	d112      	bne.n	8004b0e <I2C_MemoryTransmit_TXE_BTF+0xca>
      hi2c->Instance->DR = *hi2c->pBuffPtr;
 8004ae8:	687b      	ldr	r3, [r7, #4]
 8004aea:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004aec:	781a      	ldrb	r2, [r3, #0]
 8004aee:	687b      	ldr	r3, [r7, #4]
 8004af0:	681b      	ldr	r3, [r3, #0]
 8004af2:	611a      	str	r2, [r3, #16]
      hi2c->pBuffPtr++;
 8004af4:	687b      	ldr	r3, [r7, #4]
 8004af6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004af8:	1c5a      	adds	r2, r3, #1
 8004afa:	687b      	ldr	r3, [r7, #4]
 8004afc:	625a      	str	r2, [r3, #36]	; 0x24
      hi2c->XferCount--;
 8004afe:	687b      	ldr	r3, [r7, #4]
 8004b00:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b02:	b29b      	uxth	r3, r3
 8004b04:	3b01      	subs	r3, #1
 8004b06:	b29a      	uxth	r2, r3
 8004b08:	687b      	ldr	r3, [r7, #4]
 8004b0a:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004b0c:	e025      	b.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
    else if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX))
 8004b0e:	687b      	ldr	r3, [r7, #4]
 8004b10:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b12:	b29b      	uxth	r3, r3
 8004b14:	2b00      	cmp	r3, #0
 8004b16:	d120      	bne.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
 8004b18:	7bfb      	ldrb	r3, [r7, #15]
 8004b1a:	2b21      	cmp	r3, #33	; 0x21
 8004b1c:	d11d      	bne.n	8004b5a <I2C_MemoryTransmit_TXE_BTF+0x116>
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004b1e:	687b      	ldr	r3, [r7, #4]
 8004b20:	681b      	ldr	r3, [r3, #0]
 8004b22:	685a      	ldr	r2, [r3, #4]
 8004b24:	687b      	ldr	r3, [r7, #4]
 8004b26:	681b      	ldr	r3, [r3, #0]
 8004b28:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004b2c:	605a      	str	r2, [r3, #4]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004b2e:	687b      	ldr	r3, [r7, #4]
 8004b30:	681b      	ldr	r3, [r3, #0]
 8004b32:	681a      	ldr	r2, [r3, #0]
 8004b34:	687b      	ldr	r3, [r7, #4]
 8004b36:	681b      	ldr	r3, [r3, #0]
 8004b38:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004b3c:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8004b3e:	687b      	ldr	r3, [r7, #4]
 8004b40:	2200      	movs	r2, #0
 8004b42:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 8004b44:	687b      	ldr	r3, [r7, #4]
 8004b46:	2220      	movs	r2, #32
 8004b48:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004b4c:	687b      	ldr	r3, [r7, #4]
 8004b4e:	2200      	movs	r2, #0
 8004b50:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_MemTxCpltCallback(hi2c);
 8004b54:	6878      	ldr	r0, [r7, #4]
 8004b56:	f7ff fe49 	bl	80047ec <HAL_I2C_MemTxCpltCallback>
}
 8004b5a:	bf00      	nop
 8004b5c:	3710      	adds	r7, #16
 8004b5e:	46bd      	mov	sp, r7
 8004b60:	bd80      	pop	{r7, pc}

08004b62 <I2C_MasterReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 8004b62:	b580      	push	{r7, lr}
 8004b64:	b084      	sub	sp, #16
 8004b66:	af00      	add	r7, sp, #0
 8004b68:	6078      	str	r0, [r7, #4]
  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8004b6a:	687b      	ldr	r3, [r7, #4]
 8004b6c:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004b70:	b2db      	uxtb	r3, r3
 8004b72:	2b22      	cmp	r3, #34	; 0x22
 8004b74:	f040 80a2 	bne.w	8004cbc <I2C_MasterReceive_RXNE+0x15a>
  {
    uint32_t tmp;

    tmp = hi2c->XferCount;
 8004b78:	687b      	ldr	r3, [r7, #4]
 8004b7a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004b7c:	b29b      	uxth	r3, r3
 8004b7e:	60fb      	str	r3, [r7, #12]
    if (tmp > 3U)
 8004b80:	68fb      	ldr	r3, [r7, #12]
 8004b82:	2b03      	cmp	r3, #3
 8004b84:	d921      	bls.n	8004bca <I2C_MasterReceive_RXNE+0x68>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004b86:	687b      	ldr	r3, [r7, #4]
 8004b88:	681b      	ldr	r3, [r3, #0]
 8004b8a:	691a      	ldr	r2, [r3, #16]
 8004b8c:	687b      	ldr	r3, [r7, #4]
 8004b8e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b90:	b2d2      	uxtb	r2, r2
 8004b92:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8004b94:	687b      	ldr	r3, [r7, #4]
 8004b96:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004b98:	1c5a      	adds	r2, r3, #1
 8004b9a:	687b      	ldr	r3, [r7, #4]
 8004b9c:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8004b9e:	687b      	ldr	r3, [r7, #4]
 8004ba0:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004ba2:	b29b      	uxth	r3, r3
 8004ba4:	3b01      	subs	r3, #1
 8004ba6:	b29a      	uxth	r2, r3
 8004ba8:	687b      	ldr	r3, [r7, #4]
 8004baa:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount == (uint16_t)3)
 8004bac:	687b      	ldr	r3, [r7, #4]
 8004bae:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004bb0:	b29b      	uxth	r3, r3
 8004bb2:	2b03      	cmp	r3, #3
 8004bb4:	f040 8082 	bne.w	8004cbc <I2C_MasterReceive_RXNE+0x15a>
      {
        /* Disable BUF interrupt, this help to treat correctly the last 4 bytes
        on BTF subroutine */
        /* Disable BUF interrupt */
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004bb8:	687b      	ldr	r3, [r7, #4]
 8004bba:	681b      	ldr	r3, [r3, #0]
 8004bbc:	685a      	ldr	r2, [r3, #4]
 8004bbe:	687b      	ldr	r3, [r7, #4]
 8004bc0:	681b      	ldr	r3, [r3, #0]
 8004bc2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bc6:	605a      	str	r2, [r3, #4]
    else
    {
      /* Do nothing */
    }
  }
}
 8004bc8:	e078      	b.n	8004cbc <I2C_MasterReceive_RXNE+0x15a>
    else if ((hi2c->XferOptions != I2C_FIRST_AND_NEXT_FRAME) && ((tmp == 1U) || (tmp == 0U)))
 8004bca:	687b      	ldr	r3, [r7, #4]
 8004bcc:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004bce:	2b02      	cmp	r3, #2
 8004bd0:	d074      	beq.n	8004cbc <I2C_MasterReceive_RXNE+0x15a>
 8004bd2:	68fb      	ldr	r3, [r7, #12]
 8004bd4:	2b01      	cmp	r3, #1
 8004bd6:	d002      	beq.n	8004bde <I2C_MasterReceive_RXNE+0x7c>
 8004bd8:	68fb      	ldr	r3, [r7, #12]
 8004bda:	2b00      	cmp	r3, #0
 8004bdc:	d16e      	bne.n	8004cbc <I2C_MasterReceive_RXNE+0x15a>
      if (I2C_WaitOnSTOPRequestThroughIT(hi2c) == HAL_OK)
 8004bde:	6878      	ldr	r0, [r7, #4]
 8004be0:	f001 f818 	bl	8005c14 <I2C_WaitOnSTOPRequestThroughIT>
 8004be4:	4603      	mov	r3, r0
 8004be6:	2b00      	cmp	r3, #0
 8004be8:	d142      	bne.n	8004c70 <I2C_MasterReceive_RXNE+0x10e>
        CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004bea:	687b      	ldr	r3, [r7, #4]
 8004bec:	681b      	ldr	r3, [r3, #0]
 8004bee:	681a      	ldr	r2, [r3, #0]
 8004bf0:	687b      	ldr	r3, [r7, #4]
 8004bf2:	681b      	ldr	r3, [r3, #0]
 8004bf4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004bf8:	601a      	str	r2, [r3, #0]
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004bfa:	687b      	ldr	r3, [r7, #4]
 8004bfc:	681b      	ldr	r3, [r3, #0]
 8004bfe:	685a      	ldr	r2, [r3, #4]
 8004c00:	687b      	ldr	r3, [r7, #4]
 8004c02:	681b      	ldr	r3, [r3, #0]
 8004c04:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c08:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c0a:	687b      	ldr	r3, [r7, #4]
 8004c0c:	681b      	ldr	r3, [r3, #0]
 8004c0e:	691a      	ldr	r2, [r3, #16]
 8004c10:	687b      	ldr	r3, [r7, #4]
 8004c12:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c14:	b2d2      	uxtb	r2, r2
 8004c16:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c18:	687b      	ldr	r3, [r7, #4]
 8004c1a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c1c:	1c5a      	adds	r2, r3, #1
 8004c1e:	687b      	ldr	r3, [r7, #4]
 8004c20:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c22:	687b      	ldr	r3, [r7, #4]
 8004c24:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c26:	b29b      	uxth	r3, r3
 8004c28:	3b01      	subs	r3, #1
 8004c2a:	b29a      	uxth	r2, r3
 8004c2c:	687b      	ldr	r3, [r7, #4]
 8004c2e:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004c30:	687b      	ldr	r3, [r7, #4]
 8004c32:	2220      	movs	r2, #32
 8004c34:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004c38:	687b      	ldr	r3, [r7, #4]
 8004c3a:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004c3e:	b2db      	uxtb	r3, r3
 8004c40:	2b40      	cmp	r3, #64	; 0x40
 8004c42:	d10a      	bne.n	8004c5a <I2C_MasterReceive_RXNE+0xf8>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c44:	687b      	ldr	r3, [r7, #4]
 8004c46:	2200      	movs	r2, #0
 8004c48:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_NONE;
 8004c4c:	687b      	ldr	r3, [r7, #4]
 8004c4e:	2200      	movs	r2, #0
 8004c50:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MemRxCpltCallback(hi2c);
 8004c52:	6878      	ldr	r0, [r7, #4]
 8004c54:	f7ff fdd4 	bl	8004800 <HAL_I2C_MemRxCpltCallback>
}
 8004c58:	e030      	b.n	8004cbc <I2C_MasterReceive_RXNE+0x15a>
          hi2c->Mode = HAL_I2C_MODE_NONE;
 8004c5a:	687b      	ldr	r3, [r7, #4]
 8004c5c:	2200      	movs	r2, #0
 8004c5e:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004c62:	687b      	ldr	r3, [r7, #4]
 8004c64:	2212      	movs	r2, #18
 8004c66:	631a      	str	r2, [r3, #48]	; 0x30
          HAL_I2C_MasterRxCpltCallback(hi2c);
 8004c68:	6878      	ldr	r0, [r7, #4]
 8004c6a:	f7ff fd89 	bl	8004780 <HAL_I2C_MasterRxCpltCallback>
}
 8004c6e:	e025      	b.n	8004cbc <I2C_MasterReceive_RXNE+0x15a>
        __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8004c70:	687b      	ldr	r3, [r7, #4]
 8004c72:	681b      	ldr	r3, [r3, #0]
 8004c74:	685a      	ldr	r2, [r3, #4]
 8004c76:	687b      	ldr	r3, [r7, #4]
 8004c78:	681b      	ldr	r3, [r3, #0]
 8004c7a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8004c7e:	605a      	str	r2, [r3, #4]
        *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004c80:	687b      	ldr	r3, [r7, #4]
 8004c82:	681b      	ldr	r3, [r3, #0]
 8004c84:	691a      	ldr	r2, [r3, #16]
 8004c86:	687b      	ldr	r3, [r7, #4]
 8004c88:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c8a:	b2d2      	uxtb	r2, r2
 8004c8c:	701a      	strb	r2, [r3, #0]
        hi2c->pBuffPtr++;
 8004c8e:	687b      	ldr	r3, [r7, #4]
 8004c90:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004c92:	1c5a      	adds	r2, r3, #1
 8004c94:	687b      	ldr	r3, [r7, #4]
 8004c96:	625a      	str	r2, [r3, #36]	; 0x24
        hi2c->XferCount--;
 8004c98:	687b      	ldr	r3, [r7, #4]
 8004c9a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004c9c:	b29b      	uxth	r3, r3
 8004c9e:	3b01      	subs	r3, #1
 8004ca0:	b29a      	uxth	r2, r3
 8004ca2:	687b      	ldr	r3, [r7, #4]
 8004ca4:	855a      	strh	r2, [r3, #42]	; 0x2a
        hi2c->State = HAL_I2C_STATE_READY;
 8004ca6:	687b      	ldr	r3, [r7, #4]
 8004ca8:	2220      	movs	r2, #32
 8004caa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8004cae:	687b      	ldr	r3, [r7, #4]
 8004cb0:	2200      	movs	r2, #0
 8004cb2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_ErrorCallback(hi2c);
 8004cb6:	6878      	ldr	r0, [r7, #4]
 8004cb8:	f7ff fdac 	bl	8004814 <HAL_I2C_ErrorCallback>
}
 8004cbc:	bf00      	nop
 8004cbe:	3710      	adds	r7, #16
 8004cc0:	46bd      	mov	sp, r7
 8004cc2:	bd80      	pop	{r7, pc}

08004cc4 <I2C_MasterReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_MasterReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8004cc4:	b580      	push	{r7, lr}
 8004cc6:	b084      	sub	sp, #16
 8004cc8:	af00      	add	r7, sp, #0
 8004cca:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  uint32_t CurrentXferOptions = hi2c->XferOptions;
 8004ccc:	687b      	ldr	r3, [r7, #4]
 8004cce:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8004cd0:	60fb      	str	r3, [r7, #12]

  if (hi2c->XferCount == 4U)
 8004cd2:	687b      	ldr	r3, [r7, #4]
 8004cd4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004cd6:	b29b      	uxth	r3, r3
 8004cd8:	2b04      	cmp	r3, #4
 8004cda:	d11b      	bne.n	8004d14 <I2C_MasterReceive_BTF+0x50>
  {
    /* Disable BUF interrupt, this help to treat correctly the last 2 bytes
       on BTF subroutine if there is a reception delay between N-1 and N byte */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004cdc:	687b      	ldr	r3, [r7, #4]
 8004cde:	681b      	ldr	r3, [r3, #0]
 8004ce0:	685a      	ldr	r2, [r3, #4]
 8004ce2:	687b      	ldr	r3, [r7, #4]
 8004ce4:	681b      	ldr	r3, [r3, #0]
 8004ce6:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004cea:	605a      	str	r2, [r3, #4]

    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004cec:	687b      	ldr	r3, [r7, #4]
 8004cee:	681b      	ldr	r3, [r3, #0]
 8004cf0:	691a      	ldr	r2, [r3, #16]
 8004cf2:	687b      	ldr	r3, [r7, #4]
 8004cf4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cf6:	b2d2      	uxtb	r2, r2
 8004cf8:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8004cfa:	687b      	ldr	r3, [r7, #4]
 8004cfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004cfe:	1c5a      	adds	r2, r3, #1
 8004d00:	687b      	ldr	r3, [r7, #4]
 8004d02:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8004d04:	687b      	ldr	r3, [r7, #4]
 8004d06:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d08:	b29b      	uxth	r3, r3
 8004d0a:	3b01      	subs	r3, #1
 8004d0c:	b29a      	uxth	r2, r3
 8004d0e:	687b      	ldr	r3, [r7, #4]
 8004d10:	855a      	strh	r2, [r3, #42]	; 0x2a
    hi2c->pBuffPtr++;

    /* Update counter */
    hi2c->XferCount--;
  }
}
 8004d12:	e0bd      	b.n	8004e90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 3U)
 8004d14:	687b      	ldr	r3, [r7, #4]
 8004d16:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d18:	b29b      	uxth	r3, r3
 8004d1a:	2b03      	cmp	r3, #3
 8004d1c:	d129      	bne.n	8004d72 <I2C_MasterReceive_BTF+0xae>
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8004d1e:	687b      	ldr	r3, [r7, #4]
 8004d20:	681b      	ldr	r3, [r3, #0]
 8004d22:	685a      	ldr	r2, [r3, #4]
 8004d24:	687b      	ldr	r3, [r7, #4]
 8004d26:	681b      	ldr	r3, [r3, #0]
 8004d28:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d2c:	605a      	str	r2, [r3, #4]
    if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME))
 8004d2e:	68fb      	ldr	r3, [r7, #12]
 8004d30:	2b04      	cmp	r3, #4
 8004d32:	d00a      	beq.n	8004d4a <I2C_MasterReceive_BTF+0x86>
 8004d34:	68fb      	ldr	r3, [r7, #12]
 8004d36:	2b02      	cmp	r3, #2
 8004d38:	d007      	beq.n	8004d4a <I2C_MasterReceive_BTF+0x86>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d3a:	687b      	ldr	r3, [r7, #4]
 8004d3c:	681b      	ldr	r3, [r3, #0]
 8004d3e:	681a      	ldr	r2, [r3, #0]
 8004d40:	687b      	ldr	r3, [r7, #4]
 8004d42:	681b      	ldr	r3, [r3, #0]
 8004d44:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d48:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004d4a:	687b      	ldr	r3, [r7, #4]
 8004d4c:	681b      	ldr	r3, [r3, #0]
 8004d4e:	691a      	ldr	r2, [r3, #16]
 8004d50:	687b      	ldr	r3, [r7, #4]
 8004d52:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d54:	b2d2      	uxtb	r2, r2
 8004d56:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004d58:	687b      	ldr	r3, [r7, #4]
 8004d5a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004d5c:	1c5a      	adds	r2, r3, #1
 8004d5e:	687b      	ldr	r3, [r7, #4]
 8004d60:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004d62:	687b      	ldr	r3, [r7, #4]
 8004d64:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d66:	b29b      	uxth	r3, r3
 8004d68:	3b01      	subs	r3, #1
 8004d6a:	b29a      	uxth	r2, r3
 8004d6c:	687b      	ldr	r3, [r7, #4]
 8004d6e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004d70:	e08e      	b.n	8004e90 <I2C_MasterReceive_BTF+0x1cc>
  else if (hi2c->XferCount == 2U)
 8004d72:	687b      	ldr	r3, [r7, #4]
 8004d74:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004d76:	b29b      	uxth	r3, r3
 8004d78:	2b02      	cmp	r3, #2
 8004d7a:	d176      	bne.n	8004e6a <I2C_MasterReceive_BTF+0x1a6>
    if ((CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP))
 8004d7c:	68fb      	ldr	r3, [r7, #12]
 8004d7e:	2b01      	cmp	r3, #1
 8004d80:	d002      	beq.n	8004d88 <I2C_MasterReceive_BTF+0xc4>
 8004d82:	68fb      	ldr	r3, [r7, #12]
 8004d84:	2b10      	cmp	r3, #16
 8004d86:	d108      	bne.n	8004d9a <I2C_MasterReceive_BTF+0xd6>
      CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004d88:	687b      	ldr	r3, [r7, #4]
 8004d8a:	681b      	ldr	r3, [r3, #0]
 8004d8c:	681a      	ldr	r2, [r3, #0]
 8004d8e:	687b      	ldr	r3, [r7, #4]
 8004d90:	681b      	ldr	r3, [r3, #0]
 8004d92:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8004d96:	601a      	str	r2, [r3, #0]
 8004d98:	e019      	b.n	8004dce <I2C_MasterReceive_BTF+0x10a>
    else if ((CurrentXferOptions == I2C_NEXT_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_NEXT_FRAME))
 8004d9a:	68fb      	ldr	r3, [r7, #12]
 8004d9c:	2b04      	cmp	r3, #4
 8004d9e:	d002      	beq.n	8004da6 <I2C_MasterReceive_BTF+0xe2>
 8004da0:	68fb      	ldr	r3, [r7, #12]
 8004da2:	2b02      	cmp	r3, #2
 8004da4:	d108      	bne.n	8004db8 <I2C_MasterReceive_BTF+0xf4>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8004da6:	687b      	ldr	r3, [r7, #4]
 8004da8:	681b      	ldr	r3, [r3, #0]
 8004daa:	681a      	ldr	r2, [r3, #0]
 8004dac:	687b      	ldr	r3, [r7, #4]
 8004dae:	681b      	ldr	r3, [r3, #0]
 8004db0:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8004db4:	601a      	str	r2, [r3, #0]
 8004db6:	e00a      	b.n	8004dce <I2C_MasterReceive_BTF+0x10a>
    else if (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP)
 8004db8:	68fb      	ldr	r3, [r7, #12]
 8004dba:	2b10      	cmp	r3, #16
 8004dbc:	d007      	beq.n	8004dce <I2C_MasterReceive_BTF+0x10a>
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8004dbe:	687b      	ldr	r3, [r7, #4]
 8004dc0:	681b      	ldr	r3, [r3, #0]
 8004dc2:	681a      	ldr	r2, [r3, #0]
 8004dc4:	687b      	ldr	r3, [r7, #4]
 8004dc6:	681b      	ldr	r3, [r3, #0]
 8004dc8:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8004dcc:	601a      	str	r2, [r3, #0]
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004dce:	687b      	ldr	r3, [r7, #4]
 8004dd0:	681b      	ldr	r3, [r3, #0]
 8004dd2:	691a      	ldr	r2, [r3, #16]
 8004dd4:	687b      	ldr	r3, [r7, #4]
 8004dd6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dd8:	b2d2      	uxtb	r2, r2
 8004dda:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004ddc:	687b      	ldr	r3, [r7, #4]
 8004dde:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004de0:	1c5a      	adds	r2, r3, #1
 8004de2:	687b      	ldr	r3, [r7, #4]
 8004de4:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004de6:	687b      	ldr	r3, [r7, #4]
 8004de8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004dea:	b29b      	uxth	r3, r3
 8004dec:	3b01      	subs	r3, #1
 8004dee:	b29a      	uxth	r2, r3
 8004df0:	687b      	ldr	r3, [r7, #4]
 8004df2:	855a      	strh	r2, [r3, #42]	; 0x2a
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004df4:	687b      	ldr	r3, [r7, #4]
 8004df6:	681b      	ldr	r3, [r3, #0]
 8004df8:	691a      	ldr	r2, [r3, #16]
 8004dfa:	687b      	ldr	r3, [r7, #4]
 8004dfc:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004dfe:	b2d2      	uxtb	r2, r2
 8004e00:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e02:	687b      	ldr	r3, [r7, #4]
 8004e04:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e06:	1c5a      	adds	r2, r3, #1
 8004e08:	687b      	ldr	r3, [r7, #4]
 8004e0a:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e0c:	687b      	ldr	r3, [r7, #4]
 8004e0e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e10:	b29b      	uxth	r3, r3
 8004e12:	3b01      	subs	r3, #1
 8004e14:	b29a      	uxth	r2, r3
 8004e16:	687b      	ldr	r3, [r7, #4]
 8004e18:	855a      	strh	r2, [r3, #42]	; 0x2a
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_ERR);
 8004e1a:	687b      	ldr	r3, [r7, #4]
 8004e1c:	681b      	ldr	r3, [r3, #0]
 8004e1e:	685a      	ldr	r2, [r3, #4]
 8004e20:	687b      	ldr	r3, [r7, #4]
 8004e22:	681b      	ldr	r3, [r3, #0]
 8004e24:	f422 7240 	bic.w	r2, r2, #768	; 0x300
 8004e28:	605a      	str	r2, [r3, #4]
    hi2c->State = HAL_I2C_STATE_READY;
 8004e2a:	687b      	ldr	r3, [r7, #4]
 8004e2c:	2220      	movs	r2, #32
 8004e2e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004e32:	687b      	ldr	r3, [r7, #4]
 8004e34:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004e38:	b2db      	uxtb	r3, r3
 8004e3a:	2b40      	cmp	r3, #64	; 0x40
 8004e3c:	d10a      	bne.n	8004e54 <I2C_MasterReceive_BTF+0x190>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e3e:	687b      	ldr	r3, [r7, #4]
 8004e40:	2200      	movs	r2, #0
 8004e42:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_NONE;
 8004e46:	687b      	ldr	r3, [r7, #4]
 8004e48:	2200      	movs	r2, #0
 8004e4a:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MemRxCpltCallback(hi2c);
 8004e4c:	6878      	ldr	r0, [r7, #4]
 8004e4e:	f7ff fcd7 	bl	8004800 <HAL_I2C_MemRxCpltCallback>
}
 8004e52:	e01d      	b.n	8004e90 <I2C_MasterReceive_BTF+0x1cc>
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8004e54:	687b      	ldr	r3, [r7, #4]
 8004e56:	2200      	movs	r2, #0
 8004e58:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      hi2c->PreviousState = I2C_STATE_MASTER_BUSY_RX;
 8004e5c:	687b      	ldr	r3, [r7, #4]
 8004e5e:	2212      	movs	r2, #18
 8004e60:	631a      	str	r2, [r3, #48]	; 0x30
      HAL_I2C_MasterRxCpltCallback(hi2c);
 8004e62:	6878      	ldr	r0, [r7, #4]
 8004e64:	f7ff fc8c 	bl	8004780 <HAL_I2C_MasterRxCpltCallback>
}
 8004e68:	e012      	b.n	8004e90 <I2C_MasterReceive_BTF+0x1cc>
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8004e6a:	687b      	ldr	r3, [r7, #4]
 8004e6c:	681b      	ldr	r3, [r3, #0]
 8004e6e:	691a      	ldr	r2, [r3, #16]
 8004e70:	687b      	ldr	r3, [r7, #4]
 8004e72:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e74:	b2d2      	uxtb	r2, r2
 8004e76:	701a      	strb	r2, [r3, #0]
    hi2c->pBuffPtr++;
 8004e78:	687b      	ldr	r3, [r7, #4]
 8004e7a:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8004e7c:	1c5a      	adds	r2, r3, #1
 8004e7e:	687b      	ldr	r3, [r7, #4]
 8004e80:	625a      	str	r2, [r3, #36]	; 0x24
    hi2c->XferCount--;
 8004e82:	687b      	ldr	r3, [r7, #4]
 8004e84:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8004e86:	b29b      	uxth	r3, r3
 8004e88:	3b01      	subs	r3, #1
 8004e8a:	b29a      	uxth	r2, r3
 8004e8c:	687b      	ldr	r3, [r7, #4]
 8004e8e:	855a      	strh	r2, [r3, #42]	; 0x2a
}
 8004e90:	bf00      	nop
 8004e92:	3710      	adds	r7, #16
 8004e94:	46bd      	mov	sp, r7
 8004e96:	bd80      	pop	{r7, pc}

08004e98 <I2C_Master_SB>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_SB(I2C_HandleTypeDef *hi2c)
{
 8004e98:	b480      	push	{r7}
 8004e9a:	b083      	sub	sp, #12
 8004e9c:	af00      	add	r7, sp, #0
 8004e9e:	6078      	str	r0, [r7, #4]
  if (hi2c->Mode == HAL_I2C_MODE_MEM)
 8004ea0:	687b      	ldr	r3, [r7, #4]
 8004ea2:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8004ea6:	b2db      	uxtb	r3, r3
 8004ea8:	2b40      	cmp	r3, #64	; 0x40
 8004eaa:	d117      	bne.n	8004edc <I2C_Master_SB+0x44>
  {
    if (hi2c->EventCount == 0U)
 8004eac:	687b      	ldr	r3, [r7, #4]
 8004eae:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004eb0:	2b00      	cmp	r3, #0
 8004eb2:	d109      	bne.n	8004ec8 <I2C_Master_SB+0x30>
    {
      /* Send slave address */
      hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004eb4:	687b      	ldr	r3, [r7, #4]
 8004eb6:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004eb8:	b2db      	uxtb	r3, r3
 8004eba:	461a      	mov	r2, r3
 8004ebc:	687b      	ldr	r3, [r7, #4]
 8004ebe:	681b      	ldr	r3, [r3, #0]
 8004ec0:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004ec4:	611a      	str	r2, [r3, #16]
      {
        /* Do nothing */
      }
    }
  }
}
 8004ec6:	e067      	b.n	8004f98 <I2C_Master_SB+0x100>
      hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004ec8:	687b      	ldr	r3, [r7, #4]
 8004eca:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ecc:	b2db      	uxtb	r3, r3
 8004ece:	f043 0301 	orr.w	r3, r3, #1
 8004ed2:	b2da      	uxtb	r2, r3
 8004ed4:	687b      	ldr	r3, [r7, #4]
 8004ed6:	681b      	ldr	r3, [r3, #0]
 8004ed8:	611a      	str	r2, [r3, #16]
}
 8004eda:	e05d      	b.n	8004f98 <I2C_Master_SB+0x100>
    if (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_7BIT)
 8004edc:	687b      	ldr	r3, [r7, #4]
 8004ede:	691b      	ldr	r3, [r3, #16]
 8004ee0:	f5b3 4f80 	cmp.w	r3, #16384	; 0x4000
 8004ee4:	d133      	bne.n	8004f4e <I2C_Master_SB+0xb6>
      if (hi2c->State == HAL_I2C_STATE_BUSY_TX)
 8004ee6:	687b      	ldr	r3, [r7, #4]
 8004ee8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8004eec:	b2db      	uxtb	r3, r3
 8004eee:	2b21      	cmp	r3, #33	; 0x21
 8004ef0:	d109      	bne.n	8004f06 <I2C_Master_SB+0x6e>
        hi2c->Instance->DR = I2C_7BIT_ADD_WRITE(hi2c->Devaddress);
 8004ef2:	687b      	ldr	r3, [r7, #4]
 8004ef4:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004ef6:	b2db      	uxtb	r3, r3
 8004ef8:	461a      	mov	r2, r3
 8004efa:	687b      	ldr	r3, [r7, #4]
 8004efc:	681b      	ldr	r3, [r3, #0]
 8004efe:	f002 02fe 	and.w	r2, r2, #254	; 0xfe
 8004f02:	611a      	str	r2, [r3, #16]
 8004f04:	e008      	b.n	8004f18 <I2C_Master_SB+0x80>
        hi2c->Instance->DR = I2C_7BIT_ADD_READ(hi2c->Devaddress);
 8004f06:	687b      	ldr	r3, [r7, #4]
 8004f08:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f0a:	b2db      	uxtb	r3, r3
 8004f0c:	f043 0301 	orr.w	r3, r3, #1
 8004f10:	b2da      	uxtb	r2, r3
 8004f12:	687b      	ldr	r3, [r7, #4]
 8004f14:	681b      	ldr	r3, [r3, #0]
 8004f16:	611a      	str	r2, [r3, #16]
      if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004f18:	687b      	ldr	r3, [r7, #4]
 8004f1a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f1c:	2b00      	cmp	r3, #0
 8004f1e:	d004      	beq.n	8004f2a <I2C_Master_SB+0x92>
 8004f20:	687b      	ldr	r3, [r7, #4]
 8004f22:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004f24:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f26:	2b00      	cmp	r3, #0
 8004f28:	d108      	bne.n	8004f3c <I2C_Master_SB+0xa4>
          || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004f2a:	687b      	ldr	r3, [r7, #4]
 8004f2c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f2e:	2b00      	cmp	r3, #0
 8004f30:	d032      	beq.n	8004f98 <I2C_Master_SB+0x100>
 8004f32:	687b      	ldr	r3, [r7, #4]
 8004f34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004f36:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004f38:	2b00      	cmp	r3, #0
 8004f3a:	d02d      	beq.n	8004f98 <I2C_Master_SB+0x100>
        SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004f3c:	687b      	ldr	r3, [r7, #4]
 8004f3e:	681b      	ldr	r3, [r3, #0]
 8004f40:	685a      	ldr	r2, [r3, #4]
 8004f42:	687b      	ldr	r3, [r7, #4]
 8004f44:	681b      	ldr	r3, [r3, #0]
 8004f46:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004f4a:	605a      	str	r2, [r3, #4]
}
 8004f4c:	e024      	b.n	8004f98 <I2C_Master_SB+0x100>
      if (hi2c->EventCount == 0U)
 8004f4e:	687b      	ldr	r3, [r7, #4]
 8004f50:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f52:	2b00      	cmp	r3, #0
 8004f54:	d10e      	bne.n	8004f74 <I2C_Master_SB+0xdc>
        hi2c->Instance->DR = I2C_10BIT_HEADER_WRITE(hi2c->Devaddress);
 8004f56:	687b      	ldr	r3, [r7, #4]
 8004f58:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f5a:	b29b      	uxth	r3, r3
 8004f5c:	11db      	asrs	r3, r3, #7
 8004f5e:	b2db      	uxtb	r3, r3
 8004f60:	f003 0306 	and.w	r3, r3, #6
 8004f64:	b2db      	uxtb	r3, r3
 8004f66:	f063 030f 	orn	r3, r3, #15
 8004f6a:	b2da      	uxtb	r2, r3
 8004f6c:	687b      	ldr	r3, [r7, #4]
 8004f6e:	681b      	ldr	r3, [r3, #0]
 8004f70:	611a      	str	r2, [r3, #16]
}
 8004f72:	e011      	b.n	8004f98 <I2C_Master_SB+0x100>
      else if (hi2c->EventCount == 1U)
 8004f74:	687b      	ldr	r3, [r7, #4]
 8004f76:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8004f78:	2b01      	cmp	r3, #1
 8004f7a:	d10d      	bne.n	8004f98 <I2C_Master_SB+0x100>
        hi2c->Instance->DR = I2C_10BIT_HEADER_READ(hi2c->Devaddress);
 8004f7c:	687b      	ldr	r3, [r7, #4]
 8004f7e:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004f80:	b29b      	uxth	r3, r3
 8004f82:	11db      	asrs	r3, r3, #7
 8004f84:	b2db      	uxtb	r3, r3
 8004f86:	f003 0306 	and.w	r3, r3, #6
 8004f8a:	b2db      	uxtb	r3, r3
 8004f8c:	f063 030e 	orn	r3, r3, #14
 8004f90:	b2da      	uxtb	r2, r3
 8004f92:	687b      	ldr	r3, [r7, #4]
 8004f94:	681b      	ldr	r3, [r3, #0]
 8004f96:	611a      	str	r2, [r3, #16]
}
 8004f98:	bf00      	nop
 8004f9a:	370c      	adds	r7, #12
 8004f9c:	46bd      	mov	sp, r7
 8004f9e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004fa2:	4770      	bx	lr

08004fa4 <I2C_Master_ADD10>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADD10(I2C_HandleTypeDef *hi2c)
{
 8004fa4:	b480      	push	{r7}
 8004fa6:	b083      	sub	sp, #12
 8004fa8:	af00      	add	r7, sp, #0
 8004faa:	6078      	str	r0, [r7, #4]
  /* Send slave address */
  hi2c->Instance->DR = I2C_10BIT_ADDRESS(hi2c->Devaddress);
 8004fac:	687b      	ldr	r3, [r7, #4]
 8004fae:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8004fb0:	b2da      	uxtb	r2, r3
 8004fb2:	687b      	ldr	r3, [r7, #4]
 8004fb4:	681b      	ldr	r3, [r3, #0]
 8004fb6:	611a      	str	r2, [r3, #16]

  if (((hi2c->hdmatx != NULL) && (hi2c->hdmatx->XferCpltCallback != NULL))
 8004fb8:	687b      	ldr	r3, [r7, #4]
 8004fba:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fbc:	2b00      	cmp	r3, #0
 8004fbe:	d004      	beq.n	8004fca <I2C_Master_ADD10+0x26>
 8004fc0:	687b      	ldr	r3, [r7, #4]
 8004fc2:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8004fc4:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fc6:	2b00      	cmp	r3, #0
 8004fc8:	d108      	bne.n	8004fdc <I2C_Master_ADD10+0x38>
      || ((hi2c->hdmarx != NULL) && (hi2c->hdmarx->XferCpltCallback != NULL)))
 8004fca:	687b      	ldr	r3, [r7, #4]
 8004fcc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fce:	2b00      	cmp	r3, #0
 8004fd0:	d00c      	beq.n	8004fec <I2C_Master_ADD10+0x48>
 8004fd2:	687b      	ldr	r3, [r7, #4]
 8004fd4:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8004fd6:	6bdb      	ldr	r3, [r3, #60]	; 0x3c
 8004fd8:	2b00      	cmp	r3, #0
 8004fda:	d007      	beq.n	8004fec <I2C_Master_ADD10+0x48>
  {
    /* Enable DMA Request */
    SET_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 8004fdc:	687b      	ldr	r3, [r7, #4]
 8004fde:	681b      	ldr	r3, [r3, #0]
 8004fe0:	685a      	ldr	r2, [r3, #4]
 8004fe2:	687b      	ldr	r3, [r7, #4]
 8004fe4:	681b      	ldr	r3, [r3, #0]
 8004fe6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8004fea:	605a      	str	r2, [r3, #4]
  }
}
 8004fec:	bf00      	nop
 8004fee:	370c      	adds	r7, #12
 8004ff0:	46bd      	mov	sp, r7
 8004ff2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004ff6:	4770      	bx	lr

08004ff8 <I2C_Master_ADDR>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Master_ADDR(I2C_HandleTypeDef *hi2c)
{
 8004ff8:	b480      	push	{r7}
 8004ffa:	b091      	sub	sp, #68	; 0x44
 8004ffc:	af00      	add	r7, sp, #0
 8004ffe:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_ModeTypeDef CurrentMode       = hi2c->Mode;
 8005000:	687b      	ldr	r3, [r7, #4]
 8005002:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005006:	f887 303f 	strb.w	r3, [r7, #63]	; 0x3f
  uint32_t CurrentXferOptions           = hi2c->XferOptions;
 800500a:	687b      	ldr	r3, [r7, #4]
 800500c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800500e:	63bb      	str	r3, [r7, #56]	; 0x38
  uint32_t Prev_State                   = hi2c->PreviousState;
 8005010:	687b      	ldr	r3, [r7, #4]
 8005012:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8005014:	637b      	str	r3, [r7, #52]	; 0x34

  if (hi2c->State == HAL_I2C_STATE_BUSY_RX)
 8005016:	687b      	ldr	r3, [r7, #4]
 8005018:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800501c:	b2db      	uxtb	r3, r3
 800501e:	2b22      	cmp	r3, #34	; 0x22
 8005020:	f040 8169 	bne.w	80052f6 <I2C_Master_ADDR+0x2fe>
  {
    if ((hi2c->EventCount == 0U) && (CurrentMode == HAL_I2C_MODE_MEM))
 8005024:	687b      	ldr	r3, [r7, #4]
 8005026:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005028:	2b00      	cmp	r3, #0
 800502a:	d10f      	bne.n	800504c <I2C_Master_ADDR+0x54>
 800502c:	f897 303f 	ldrb.w	r3, [r7, #63]	; 0x3f
 8005030:	2b40      	cmp	r3, #64	; 0x40
 8005032:	d10b      	bne.n	800504c <I2C_Master_ADDR+0x54>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005034:	2300      	movs	r3, #0
 8005036:	633b      	str	r3, [r7, #48]	; 0x30
 8005038:	687b      	ldr	r3, [r7, #4]
 800503a:	681b      	ldr	r3, [r3, #0]
 800503c:	695b      	ldr	r3, [r3, #20]
 800503e:	633b      	str	r3, [r7, #48]	; 0x30
 8005040:	687b      	ldr	r3, [r7, #4]
 8005042:	681b      	ldr	r3, [r3, #0]
 8005044:	699b      	ldr	r3, [r3, #24]
 8005046:	633b      	str	r3, [r7, #48]	; 0x30
 8005048:	6b3b      	ldr	r3, [r7, #48]	; 0x30
 800504a:	e160      	b.n	800530e <I2C_Master_ADDR+0x316>
    }
    else if ((hi2c->EventCount == 0U) && (hi2c->Init.AddressingMode == I2C_ADDRESSINGMODE_10BIT))
 800504c:	687b      	ldr	r3, [r7, #4]
 800504e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005050:	2b00      	cmp	r3, #0
 8005052:	d11d      	bne.n	8005090 <I2C_Master_ADDR+0x98>
 8005054:	687b      	ldr	r3, [r7, #4]
 8005056:	691b      	ldr	r3, [r3, #16]
 8005058:	f5b3 4f40 	cmp.w	r3, #49152	; 0xc000
 800505c:	d118      	bne.n	8005090 <I2C_Master_ADDR+0x98>
    {
      /* Clear ADDR flag */
      __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800505e:	2300      	movs	r3, #0
 8005060:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005062:	687b      	ldr	r3, [r7, #4]
 8005064:	681b      	ldr	r3, [r3, #0]
 8005066:	695b      	ldr	r3, [r3, #20]
 8005068:	62fb      	str	r3, [r7, #44]	; 0x2c
 800506a:	687b      	ldr	r3, [r7, #4]
 800506c:	681b      	ldr	r3, [r3, #0]
 800506e:	699b      	ldr	r3, [r3, #24]
 8005070:	62fb      	str	r3, [r7, #44]	; 0x2c
 8005072:	6afb      	ldr	r3, [r7, #44]	; 0x2c

      /* Generate Restart */
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_START);
 8005074:	687b      	ldr	r3, [r7, #4]
 8005076:	681b      	ldr	r3, [r3, #0]
 8005078:	681a      	ldr	r2, [r3, #0]
 800507a:	687b      	ldr	r3, [r7, #4]
 800507c:	681b      	ldr	r3, [r3, #0]
 800507e:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8005082:	601a      	str	r2, [r3, #0]

      hi2c->EventCount++;
 8005084:	687b      	ldr	r3, [r7, #4]
 8005086:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005088:	1c5a      	adds	r2, r3, #1
 800508a:	687b      	ldr	r3, [r7, #4]
 800508c:	651a      	str	r2, [r3, #80]	; 0x50
 800508e:	e13e      	b.n	800530e <I2C_Master_ADDR+0x316>
    }
    else
    {
      if (hi2c->XferCount == 0U)
 8005090:	687b      	ldr	r3, [r7, #4]
 8005092:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005094:	b29b      	uxth	r3, r3
 8005096:	2b00      	cmp	r3, #0
 8005098:	d113      	bne.n	80050c2 <I2C_Master_ADDR+0xca>
      {
        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800509a:	2300      	movs	r3, #0
 800509c:	62bb      	str	r3, [r7, #40]	; 0x28
 800509e:	687b      	ldr	r3, [r7, #4]
 80050a0:	681b      	ldr	r3, [r3, #0]
 80050a2:	695b      	ldr	r3, [r3, #20]
 80050a4:	62bb      	str	r3, [r7, #40]	; 0x28
 80050a6:	687b      	ldr	r3, [r7, #4]
 80050a8:	681b      	ldr	r3, [r3, #0]
 80050aa:	699b      	ldr	r3, [r3, #24]
 80050ac:	62bb      	str	r3, [r7, #40]	; 0x28
 80050ae:	6abb      	ldr	r3, [r7, #40]	; 0x28

        /* Generate Stop */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80050b0:	687b      	ldr	r3, [r7, #4]
 80050b2:	681b      	ldr	r3, [r3, #0]
 80050b4:	681a      	ldr	r2, [r3, #0]
 80050b6:	687b      	ldr	r3, [r7, #4]
 80050b8:	681b      	ldr	r3, [r3, #0]
 80050ba:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80050be:	601a      	str	r2, [r3, #0]
 80050c0:	e115      	b.n	80052ee <I2C_Master_ADDR+0x2f6>
      }
      else if (hi2c->XferCount == 1U)
 80050c2:	687b      	ldr	r3, [r7, #4]
 80050c4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80050c6:	b29b      	uxth	r3, r3
 80050c8:	2b01      	cmp	r3, #1
 80050ca:	f040 808a 	bne.w	80051e2 <I2C_Master_ADDR+0x1ea>
      {
        if (CurrentXferOptions == I2C_NO_OPTION_FRAME)
 80050ce:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80050d0:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80050d4:	d137      	bne.n	8005146 <I2C_Master_ADDR+0x14e>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050d6:	687b      	ldr	r3, [r7, #4]
 80050d8:	681b      	ldr	r3, [r3, #0]
 80050da:	681a      	ldr	r2, [r3, #0]
 80050dc:	687b      	ldr	r3, [r7, #4]
 80050de:	681b      	ldr	r3, [r3, #0]
 80050e0:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80050e4:	601a      	str	r2, [r3, #0]

          if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80050e6:	687b      	ldr	r3, [r7, #4]
 80050e8:	681b      	ldr	r3, [r3, #0]
 80050ea:	685b      	ldr	r3, [r3, #4]
 80050ec:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80050f0:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80050f4:	d113      	bne.n	800511e <I2C_Master_ADDR+0x126>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80050f6:	687b      	ldr	r3, [r7, #4]
 80050f8:	681b      	ldr	r3, [r3, #0]
 80050fa:	681a      	ldr	r2, [r3, #0]
 80050fc:	687b      	ldr	r3, [r7, #4]
 80050fe:	681b      	ldr	r3, [r3, #0]
 8005100:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005104:	601a      	str	r2, [r3, #0]

            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005106:	2300      	movs	r3, #0
 8005108:	627b      	str	r3, [r7, #36]	; 0x24
 800510a:	687b      	ldr	r3, [r7, #4]
 800510c:	681b      	ldr	r3, [r3, #0]
 800510e:	695b      	ldr	r3, [r3, #20]
 8005110:	627b      	str	r3, [r7, #36]	; 0x24
 8005112:	687b      	ldr	r3, [r7, #4]
 8005114:	681b      	ldr	r3, [r3, #0]
 8005116:	699b      	ldr	r3, [r3, #24]
 8005118:	627b      	str	r3, [r7, #36]	; 0x24
 800511a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 800511c:	e0e7      	b.n	80052ee <I2C_Master_ADDR+0x2f6>
          }
          else
          {
            /* Clear ADDR flag */
            __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 800511e:	2300      	movs	r3, #0
 8005120:	623b      	str	r3, [r7, #32]
 8005122:	687b      	ldr	r3, [r7, #4]
 8005124:	681b      	ldr	r3, [r3, #0]
 8005126:	695b      	ldr	r3, [r3, #20]
 8005128:	623b      	str	r3, [r7, #32]
 800512a:	687b      	ldr	r3, [r7, #4]
 800512c:	681b      	ldr	r3, [r3, #0]
 800512e:	699b      	ldr	r3, [r3, #24]
 8005130:	623b      	str	r3, [r7, #32]
 8005132:	6a3b      	ldr	r3, [r7, #32]

            /* Generate Stop */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 8005134:	687b      	ldr	r3, [r7, #4]
 8005136:	681b      	ldr	r3, [r3, #0]
 8005138:	681a      	ldr	r2, [r3, #0]
 800513a:	687b      	ldr	r3, [r7, #4]
 800513c:	681b      	ldr	r3, [r3, #0]
 800513e:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 8005142:	601a      	str	r2, [r3, #0]
 8005144:	e0d3      	b.n	80052ee <I2C_Master_ADDR+0x2f6>
          }
        }
        /* Prepare next transfer or stop current transfer */
        else if ((CurrentXferOptions != I2C_FIRST_AND_LAST_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME) \
 8005146:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005148:	2b08      	cmp	r3, #8
 800514a:	d02e      	beq.n	80051aa <I2C_Master_ADDR+0x1b2>
 800514c:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800514e:	2b20      	cmp	r3, #32
 8005150:	d02b      	beq.n	80051aa <I2C_Master_ADDR+0x1b2>
                 && ((Prev_State != I2C_STATE_MASTER_BUSY_RX) || (CurrentXferOptions == I2C_FIRST_FRAME)))
 8005152:	6b7b      	ldr	r3, [r7, #52]	; 0x34
 8005154:	2b12      	cmp	r3, #18
 8005156:	d102      	bne.n	800515e <I2C_Master_ADDR+0x166>
 8005158:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800515a:	2b01      	cmp	r3, #1
 800515c:	d125      	bne.n	80051aa <I2C_Master_ADDR+0x1b2>
        {
          if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 800515e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005160:	2b04      	cmp	r3, #4
 8005162:	d00e      	beq.n	8005182 <I2C_Master_ADDR+0x18a>
 8005164:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005166:	2b02      	cmp	r3, #2
 8005168:	d00b      	beq.n	8005182 <I2C_Master_ADDR+0x18a>
 800516a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800516c:	2b10      	cmp	r3, #16
 800516e:	d008      	beq.n	8005182 <I2C_Master_ADDR+0x18a>
          {
            /* Disable Acknowledge */
            CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005170:	687b      	ldr	r3, [r7, #4]
 8005172:	681b      	ldr	r3, [r3, #0]
 8005174:	681a      	ldr	r2, [r3, #0]
 8005176:	687b      	ldr	r3, [r7, #4]
 8005178:	681b      	ldr	r3, [r3, #0]
 800517a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800517e:	601a      	str	r2, [r3, #0]
 8005180:	e007      	b.n	8005192 <I2C_Master_ADDR+0x19a>
          }
          else
          {
            /* Enable Acknowledge */
            SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005182:	687b      	ldr	r3, [r7, #4]
 8005184:	681b      	ldr	r3, [r3, #0]
 8005186:	681a      	ldr	r2, [r3, #0]
 8005188:	687b      	ldr	r3, [r7, #4]
 800518a:	681b      	ldr	r3, [r3, #0]
 800518c:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005190:	601a      	str	r2, [r3, #0]
          }

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005192:	2300      	movs	r3, #0
 8005194:	61fb      	str	r3, [r7, #28]
 8005196:	687b      	ldr	r3, [r7, #4]
 8005198:	681b      	ldr	r3, [r3, #0]
 800519a:	695b      	ldr	r3, [r3, #20]
 800519c:	61fb      	str	r3, [r7, #28]
 800519e:	687b      	ldr	r3, [r7, #4]
 80051a0:	681b      	ldr	r3, [r3, #0]
 80051a2:	699b      	ldr	r3, [r3, #24]
 80051a4:	61fb      	str	r3, [r7, #28]
 80051a6:	69fb      	ldr	r3, [r7, #28]
 80051a8:	e0a1      	b.n	80052ee <I2C_Master_ADDR+0x2f6>
        }
        else
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051aa:	687b      	ldr	r3, [r7, #4]
 80051ac:	681b      	ldr	r3, [r3, #0]
 80051ae:	681a      	ldr	r2, [r3, #0]
 80051b0:	687b      	ldr	r3, [r7, #4]
 80051b2:	681b      	ldr	r3, [r3, #0]
 80051b4:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80051b8:	601a      	str	r2, [r3, #0]

          /* Clear ADDR flag */
          __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80051ba:	2300      	movs	r3, #0
 80051bc:	61bb      	str	r3, [r7, #24]
 80051be:	687b      	ldr	r3, [r7, #4]
 80051c0:	681b      	ldr	r3, [r3, #0]
 80051c2:	695b      	ldr	r3, [r3, #20]
 80051c4:	61bb      	str	r3, [r7, #24]
 80051c6:	687b      	ldr	r3, [r7, #4]
 80051c8:	681b      	ldr	r3, [r3, #0]
 80051ca:	699b      	ldr	r3, [r3, #24]
 80051cc:	61bb      	str	r3, [r7, #24]
 80051ce:	69bb      	ldr	r3, [r7, #24]

          /* Generate Stop */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_STOP);
 80051d0:	687b      	ldr	r3, [r7, #4]
 80051d2:	681b      	ldr	r3, [r3, #0]
 80051d4:	681a      	ldr	r2, [r3, #0]
 80051d6:	687b      	ldr	r3, [r7, #4]
 80051d8:	681b      	ldr	r3, [r3, #0]
 80051da:	f442 7200 	orr.w	r2, r2, #512	; 0x200
 80051de:	601a      	str	r2, [r3, #0]
 80051e0:	e085      	b.n	80052ee <I2C_Master_ADDR+0x2f6>
        }
      }
      else if (hi2c->XferCount == 2U)
 80051e2:	687b      	ldr	r3, [r7, #4]
 80051e4:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80051e6:	b29b      	uxth	r3, r3
 80051e8:	2b02      	cmp	r3, #2
 80051ea:	d14d      	bne.n	8005288 <I2C_Master_ADDR+0x290>
      {
        if ((CurrentXferOptions != I2C_NEXT_FRAME) && (CurrentXferOptions != I2C_FIRST_AND_NEXT_FRAME) && (CurrentXferOptions != I2C_LAST_FRAME_NO_STOP))
 80051ec:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051ee:	2b04      	cmp	r3, #4
 80051f0:	d016      	beq.n	8005220 <I2C_Master_ADDR+0x228>
 80051f2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051f4:	2b02      	cmp	r3, #2
 80051f6:	d013      	beq.n	8005220 <I2C_Master_ADDR+0x228>
 80051f8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80051fa:	2b10      	cmp	r3, #16
 80051fc:	d010      	beq.n	8005220 <I2C_Master_ADDR+0x228>
        {
          /* Disable Acknowledge */
          CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80051fe:	687b      	ldr	r3, [r7, #4]
 8005200:	681b      	ldr	r3, [r3, #0]
 8005202:	681a      	ldr	r2, [r3, #0]
 8005204:	687b      	ldr	r3, [r7, #4]
 8005206:	681b      	ldr	r3, [r3, #0]
 8005208:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800520c:	601a      	str	r2, [r3, #0]

          /* Enable Pos */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_POS);
 800520e:	687b      	ldr	r3, [r7, #4]
 8005210:	681b      	ldr	r3, [r3, #0]
 8005212:	681a      	ldr	r2, [r3, #0]
 8005214:	687b      	ldr	r3, [r7, #4]
 8005216:	681b      	ldr	r3, [r3, #0]
 8005218:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 800521c:	601a      	str	r2, [r3, #0]
 800521e:	e007      	b.n	8005230 <I2C_Master_ADDR+0x238>
        }
        else
        {
          /* Enable Acknowledge */
          SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005220:	687b      	ldr	r3, [r7, #4]
 8005222:	681b      	ldr	r3, [r3, #0]
 8005224:	681a      	ldr	r2, [r3, #0]
 8005226:	687b      	ldr	r3, [r7, #4]
 8005228:	681b      	ldr	r3, [r3, #0]
 800522a:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 800522e:	601a      	str	r2, [r3, #0]
        }

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005230:	687b      	ldr	r3, [r7, #4]
 8005232:	681b      	ldr	r3, [r3, #0]
 8005234:	685b      	ldr	r3, [r3, #4]
 8005236:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 800523a:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800523e:	d117      	bne.n	8005270 <I2C_Master_ADDR+0x278>
 8005240:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005242:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 8005246:	d00b      	beq.n	8005260 <I2C_Master_ADDR+0x268>
 8005248:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800524a:	2b01      	cmp	r3, #1
 800524c:	d008      	beq.n	8005260 <I2C_Master_ADDR+0x268>
 800524e:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005250:	2b08      	cmp	r3, #8
 8005252:	d005      	beq.n	8005260 <I2C_Master_ADDR+0x268>
 8005254:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 8005256:	2b10      	cmp	r3, #16
 8005258:	d002      	beq.n	8005260 <I2C_Master_ADDR+0x268>
 800525a:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 800525c:	2b20      	cmp	r3, #32
 800525e:	d107      	bne.n	8005270 <I2C_Master_ADDR+0x278>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 8005260:	687b      	ldr	r3, [r7, #4]
 8005262:	681b      	ldr	r3, [r3, #0]
 8005264:	685a      	ldr	r2, [r3, #4]
 8005266:	687b      	ldr	r3, [r7, #4]
 8005268:	681b      	ldr	r3, [r3, #0]
 800526a:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 800526e:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 8005270:	2300      	movs	r3, #0
 8005272:	617b      	str	r3, [r7, #20]
 8005274:	687b      	ldr	r3, [r7, #4]
 8005276:	681b      	ldr	r3, [r3, #0]
 8005278:	695b      	ldr	r3, [r3, #20]
 800527a:	617b      	str	r3, [r7, #20]
 800527c:	687b      	ldr	r3, [r7, #4]
 800527e:	681b      	ldr	r3, [r3, #0]
 8005280:	699b      	ldr	r3, [r3, #24]
 8005282:	617b      	str	r3, [r7, #20]
 8005284:	697b      	ldr	r3, [r7, #20]
 8005286:	e032      	b.n	80052ee <I2C_Master_ADDR+0x2f6>
      }
      else
      {
        /* Enable Acknowledge */
        SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005288:	687b      	ldr	r3, [r7, #4]
 800528a:	681b      	ldr	r3, [r3, #0]
 800528c:	681a      	ldr	r2, [r3, #0]
 800528e:	687b      	ldr	r3, [r7, #4]
 8005290:	681b      	ldr	r3, [r3, #0]
 8005292:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005296:	601a      	str	r2, [r3, #0]

        if (((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN) && ((CurrentXferOptions == I2C_NO_OPTION_FRAME) || (CurrentXferOptions == I2C_FIRST_FRAME) || (CurrentXferOptions == I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME_NO_STOP) || (CurrentXferOptions == I2C_LAST_FRAME)))
 8005298:	687b      	ldr	r3, [r7, #4]
 800529a:	681b      	ldr	r3, [r3, #0]
 800529c:	685b      	ldr	r3, [r3, #4]
 800529e:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80052a2:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80052a6:	d117      	bne.n	80052d8 <I2C_Master_ADDR+0x2e0>
 80052a8:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052aa:	f513 3f80 	cmn.w	r3, #65536	; 0x10000
 80052ae:	d00b      	beq.n	80052c8 <I2C_Master_ADDR+0x2d0>
 80052b0:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b2:	2b01      	cmp	r3, #1
 80052b4:	d008      	beq.n	80052c8 <I2C_Master_ADDR+0x2d0>
 80052b6:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052b8:	2b08      	cmp	r3, #8
 80052ba:	d005      	beq.n	80052c8 <I2C_Master_ADDR+0x2d0>
 80052bc:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052be:	2b10      	cmp	r3, #16
 80052c0:	d002      	beq.n	80052c8 <I2C_Master_ADDR+0x2d0>
 80052c2:	6bbb      	ldr	r3, [r7, #56]	; 0x38
 80052c4:	2b20      	cmp	r3, #32
 80052c6:	d107      	bne.n	80052d8 <I2C_Master_ADDR+0x2e0>
        {
          /* Enable Last DMA bit */
          SET_BIT(hi2c->Instance->CR2, I2C_CR2_LAST);
 80052c8:	687b      	ldr	r3, [r7, #4]
 80052ca:	681b      	ldr	r3, [r3, #0]
 80052cc:	685a      	ldr	r2, [r3, #4]
 80052ce:	687b      	ldr	r3, [r7, #4]
 80052d0:	681b      	ldr	r3, [r3, #0]
 80052d2:	f442 5280 	orr.w	r2, r2, #4096	; 0x1000
 80052d6:	605a      	str	r2, [r3, #4]
        }

        /* Clear ADDR flag */
        __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052d8:	2300      	movs	r3, #0
 80052da:	613b      	str	r3, [r7, #16]
 80052dc:	687b      	ldr	r3, [r7, #4]
 80052de:	681b      	ldr	r3, [r3, #0]
 80052e0:	695b      	ldr	r3, [r3, #20]
 80052e2:	613b      	str	r3, [r7, #16]
 80052e4:	687b      	ldr	r3, [r7, #4]
 80052e6:	681b      	ldr	r3, [r3, #0]
 80052e8:	699b      	ldr	r3, [r3, #24]
 80052ea:	613b      	str	r3, [r7, #16]
 80052ec:	693b      	ldr	r3, [r7, #16]
      }

      /* Reset Event counter  */
      hi2c->EventCount = 0U;
 80052ee:	687b      	ldr	r3, [r7, #4]
 80052f0:	2200      	movs	r2, #0
 80052f2:	651a      	str	r2, [r3, #80]	; 0x50
  else
  {
    /* Clear ADDR flag */
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
  }
}
 80052f4:	e00b      	b.n	800530e <I2C_Master_ADDR+0x316>
    __HAL_I2C_CLEAR_ADDRFLAG(hi2c);
 80052f6:	2300      	movs	r3, #0
 80052f8:	60fb      	str	r3, [r7, #12]
 80052fa:	687b      	ldr	r3, [r7, #4]
 80052fc:	681b      	ldr	r3, [r3, #0]
 80052fe:	695b      	ldr	r3, [r3, #20]
 8005300:	60fb      	str	r3, [r7, #12]
 8005302:	687b      	ldr	r3, [r7, #4]
 8005304:	681b      	ldr	r3, [r3, #0]
 8005306:	699b      	ldr	r3, [r3, #24]
 8005308:	60fb      	str	r3, [r7, #12]
 800530a:	68fb      	ldr	r3, [r7, #12]
}
 800530c:	e7ff      	b.n	800530e <I2C_Master_ADDR+0x316>
 800530e:	bf00      	nop
 8005310:	3744      	adds	r7, #68	; 0x44
 8005312:	46bd      	mov	sp, r7
 8005314:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005318:	4770      	bx	lr

0800531a <I2C_SlaveTransmit_TXE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_TXE(I2C_HandleTypeDef *hi2c)
{
 800531a:	b580      	push	{r7, lr}
 800531c:	b084      	sub	sp, #16
 800531e:	af00      	add	r7, sp, #0
 8005320:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005322:	687b      	ldr	r3, [r7, #4]
 8005324:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005328:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 800532a:	687b      	ldr	r3, [r7, #4]
 800532c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800532e:	b29b      	uxth	r3, r3
 8005330:	2b00      	cmp	r3, #0
 8005332:	d02b      	beq.n	800538c <I2C_SlaveTransmit_TXE+0x72>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 8005334:	687b      	ldr	r3, [r7, #4]
 8005336:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005338:	781a      	ldrb	r2, [r3, #0]
 800533a:	687b      	ldr	r3, [r7, #4]
 800533c:	681b      	ldr	r3, [r3, #0]
 800533e:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005340:	687b      	ldr	r3, [r7, #4]
 8005342:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005344:	1c5a      	adds	r2, r3, #1
 8005346:	687b      	ldr	r3, [r7, #4]
 8005348:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800534a:	687b      	ldr	r3, [r7, #4]
 800534c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800534e:	b29b      	uxth	r3, r3
 8005350:	3b01      	subs	r3, #1
 8005352:	b29a      	uxth	r2, r3
 8005354:	687b      	ldr	r3, [r7, #4]
 8005356:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_TX_LISTEN))
 8005358:	687b      	ldr	r3, [r7, #4]
 800535a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800535c:	b29b      	uxth	r3, r3
 800535e:	2b00      	cmp	r3, #0
 8005360:	d114      	bne.n	800538c <I2C_SlaveTransmit_TXE+0x72>
 8005362:	7bfb      	ldrb	r3, [r7, #15]
 8005364:	2b29      	cmp	r3, #41	; 0x29
 8005366:	d111      	bne.n	800538c <I2C_SlaveTransmit_TXE+0x72>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005368:	687b      	ldr	r3, [r7, #4]
 800536a:	681b      	ldr	r3, [r3, #0]
 800536c:	685a      	ldr	r2, [r3, #4]
 800536e:	687b      	ldr	r3, [r7, #4]
 8005370:	681b      	ldr	r3, [r3, #0]
 8005372:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005376:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005378:	687b      	ldr	r3, [r7, #4]
 800537a:	2221      	movs	r2, #33	; 0x21
 800537c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800537e:	687b      	ldr	r3, [r7, #4]
 8005380:	2228      	movs	r2, #40	; 0x28
 8005382:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveTxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005386:	6878      	ldr	r0, [r7, #4]
 8005388:	f7ff fa04 	bl	8004794 <HAL_I2C_SlaveTxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800538c:	bf00      	nop
 800538e:	3710      	adds	r7, #16
 8005390:	46bd      	mov	sp, r7
 8005392:	bd80      	pop	{r7, pc}

08005394 <I2C_SlaveTransmit_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveTransmit_BTF(I2C_HandleTypeDef *hi2c)
{
 8005394:	b480      	push	{r7}
 8005396:	b083      	sub	sp, #12
 8005398:	af00      	add	r7, sp, #0
 800539a:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800539c:	687b      	ldr	r3, [r7, #4]
 800539e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053a0:	b29b      	uxth	r3, r3
 80053a2:	2b00      	cmp	r3, #0
 80053a4:	d011      	beq.n	80053ca <I2C_SlaveTransmit_BTF+0x36>
  {
    /* Write data to DR */
    hi2c->Instance->DR = *hi2c->pBuffPtr;
 80053a6:	687b      	ldr	r3, [r7, #4]
 80053a8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053aa:	781a      	ldrb	r2, [r3, #0]
 80053ac:	687b      	ldr	r3, [r7, #4]
 80053ae:	681b      	ldr	r3, [r3, #0]
 80053b0:	611a      	str	r2, [r3, #16]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053b2:	687b      	ldr	r3, [r7, #4]
 80053b4:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053b6:	1c5a      	adds	r2, r3, #1
 80053b8:	687b      	ldr	r3, [r7, #4]
 80053ba:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 80053bc:	687b      	ldr	r3, [r7, #4]
 80053be:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053c0:	b29b      	uxth	r3, r3
 80053c2:	3b01      	subs	r3, #1
 80053c4:	b29a      	uxth	r2, r3
 80053c6:	687b      	ldr	r3, [r7, #4]
 80053c8:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 80053ca:	bf00      	nop
 80053cc:	370c      	adds	r7, #12
 80053ce:	46bd      	mov	sp, r7
 80053d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80053d4:	4770      	bx	lr

080053d6 <I2C_SlaveReceive_RXNE>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_RXNE(I2C_HandleTypeDef *hi2c)
{
 80053d6:	b580      	push	{r7, lr}
 80053d8:	b084      	sub	sp, #16
 80053da:	af00      	add	r7, sp, #0
 80053dc:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 80053de:	687b      	ldr	r3, [r7, #4]
 80053e0:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80053e4:	73fb      	strb	r3, [r7, #15]

  if (hi2c->XferCount != 0U)
 80053e6:	687b      	ldr	r3, [r7, #4]
 80053e8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80053ea:	b29b      	uxth	r3, r3
 80053ec:	2b00      	cmp	r3, #0
 80053ee:	d02c      	beq.n	800544a <I2C_SlaveReceive_RXNE+0x74>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80053f0:	687b      	ldr	r3, [r7, #4]
 80053f2:	681b      	ldr	r3, [r3, #0]
 80053f4:	691a      	ldr	r2, [r3, #16]
 80053f6:	687b      	ldr	r3, [r7, #4]
 80053f8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80053fa:	b2d2      	uxtb	r2, r2
 80053fc:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 80053fe:	687b      	ldr	r3, [r7, #4]
 8005400:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005402:	1c5a      	adds	r2, r3, #1
 8005404:	687b      	ldr	r3, [r7, #4]
 8005406:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 8005408:	687b      	ldr	r3, [r7, #4]
 800540a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800540c:	b29b      	uxth	r3, r3
 800540e:	3b01      	subs	r3, #1
 8005410:	b29a      	uxth	r2, r3
 8005412:	687b      	ldr	r3, [r7, #4]
 8005414:	855a      	strh	r2, [r3, #42]	; 0x2a

    if ((hi2c->XferCount == 0U) && (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 8005416:	687b      	ldr	r3, [r7, #4]
 8005418:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800541a:	b29b      	uxth	r3, r3
 800541c:	2b00      	cmp	r3, #0
 800541e:	d114      	bne.n	800544a <I2C_SlaveReceive_RXNE+0x74>
 8005420:	7bfb      	ldrb	r3, [r7, #15]
 8005422:	2b2a      	cmp	r3, #42	; 0x2a
 8005424:	d111      	bne.n	800544a <I2C_SlaveReceive_RXNE+0x74>
    {
      /* Last Byte is received, disable Interrupt */
      __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_BUF);
 8005426:	687b      	ldr	r3, [r7, #4]
 8005428:	681b      	ldr	r3, [r3, #0]
 800542a:	685a      	ldr	r2, [r3, #4]
 800542c:	687b      	ldr	r3, [r7, #4]
 800542e:	681b      	ldr	r3, [r3, #0]
 8005430:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005434:	605a      	str	r2, [r3, #4]

      /* Set state at HAL_I2C_STATE_LISTEN */
      hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_RX;
 8005436:	687b      	ldr	r3, [r7, #4]
 8005438:	2222      	movs	r2, #34	; 0x22
 800543a:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 800543c:	687b      	ldr	r3, [r7, #4]
 800543e:	2228      	movs	r2, #40	; 0x28
 8005440:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

      /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
      hi2c->SlaveRxCpltCallback(hi2c);
#else
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005444:	6878      	ldr	r0, [r7, #4]
 8005446:	f7ff f9af 	bl	80047a8 <HAL_I2C_SlaveRxCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
    }
  }
}
 800544a:	bf00      	nop
 800544c:	3710      	adds	r7, #16
 800544e:	46bd      	mov	sp, r7
 8005450:	bd80      	pop	{r7, pc}

08005452 <I2C_SlaveReceive_BTF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_SlaveReceive_BTF(I2C_HandleTypeDef *hi2c)
{
 8005452:	b480      	push	{r7}
 8005454:	b083      	sub	sp, #12
 8005456:	af00      	add	r7, sp, #0
 8005458:	6078      	str	r0, [r7, #4]
  if (hi2c->XferCount != 0U)
 800545a:	687b      	ldr	r3, [r7, #4]
 800545c:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800545e:	b29b      	uxth	r3, r3
 8005460:	2b00      	cmp	r3, #0
 8005462:	d012      	beq.n	800548a <I2C_SlaveReceive_BTF+0x38>
  {
    /* Read data from DR */
    *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005464:	687b      	ldr	r3, [r7, #4]
 8005466:	681b      	ldr	r3, [r3, #0]
 8005468:	691a      	ldr	r2, [r3, #16]
 800546a:	687b      	ldr	r3, [r7, #4]
 800546c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800546e:	b2d2      	uxtb	r2, r2
 8005470:	701a      	strb	r2, [r3, #0]

    /* Increment Buffer pointer */
    hi2c->pBuffPtr++;
 8005472:	687b      	ldr	r3, [r7, #4]
 8005474:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005476:	1c5a      	adds	r2, r3, #1
 8005478:	687b      	ldr	r3, [r7, #4]
 800547a:	625a      	str	r2, [r3, #36]	; 0x24

    /* Update counter */
    hi2c->XferCount--;
 800547c:	687b      	ldr	r3, [r7, #4]
 800547e:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005480:	b29b      	uxth	r3, r3
 8005482:	3b01      	subs	r3, #1
 8005484:	b29a      	uxth	r2, r3
 8005486:	687b      	ldr	r3, [r7, #4]
 8005488:	855a      	strh	r2, [r3, #42]	; 0x2a
  }
}
 800548a:	bf00      	nop
 800548c:	370c      	adds	r7, #12
 800548e:	46bd      	mov	sp, r7
 8005490:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005494:	4770      	bx	lr

08005496 <I2C_Slave_ADDR>:
  *         the configuration information for I2C module
  * @param  IT2Flags Interrupt2 flags to handle.
  * @retval None
  */
static void I2C_Slave_ADDR(I2C_HandleTypeDef *hi2c, uint32_t IT2Flags)
{
 8005496:	b580      	push	{r7, lr}
 8005498:	b084      	sub	sp, #16
 800549a:	af00      	add	r7, sp, #0
 800549c:	6078      	str	r0, [r7, #4]
 800549e:	6039      	str	r1, [r7, #0]
  uint8_t TransferDirection = I2C_DIRECTION_RECEIVE;
 80054a0:	2300      	movs	r3, #0
 80054a2:	73fb      	strb	r3, [r7, #15]
  uint16_t SlaveAddrCode;

  if (((uint32_t)hi2c->State & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 80054a4:	687b      	ldr	r3, [r7, #4]
 80054a6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80054aa:	b2db      	uxtb	r3, r3
 80054ac:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80054b0:	2b28      	cmp	r3, #40	; 0x28
 80054b2:	d127      	bne.n	8005504 <I2C_Slave_ADDR+0x6e>
  {
    /* Disable BUF interrupt, BUF enabling is manage through slave specific interface */
    __HAL_I2C_DISABLE_IT(hi2c, (I2C_IT_BUF));
 80054b4:	687b      	ldr	r3, [r7, #4]
 80054b6:	681b      	ldr	r3, [r3, #0]
 80054b8:	685a      	ldr	r2, [r3, #4]
 80054ba:	687b      	ldr	r3, [r7, #4]
 80054bc:	681b      	ldr	r3, [r3, #0]
 80054be:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80054c2:	605a      	str	r2, [r3, #4]

    /* Transfer Direction requested by Master */
    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_TRA) == RESET)
 80054c4:	683b      	ldr	r3, [r7, #0]
 80054c6:	089b      	lsrs	r3, r3, #2
 80054c8:	f003 0301 	and.w	r3, r3, #1
 80054cc:	2b00      	cmp	r3, #0
 80054ce:	d101      	bne.n	80054d4 <I2C_Slave_ADDR+0x3e>
    {
      TransferDirection = I2C_DIRECTION_TRANSMIT;
 80054d0:	2301      	movs	r3, #1
 80054d2:	73fb      	strb	r3, [r7, #15]
    }

    if (I2C_CHECK_FLAG(IT2Flags, I2C_FLAG_DUALF) == RESET)
 80054d4:	683b      	ldr	r3, [r7, #0]
 80054d6:	09db      	lsrs	r3, r3, #7
 80054d8:	f003 0301 	and.w	r3, r3, #1
 80054dc:	2b00      	cmp	r3, #0
 80054de:	d103      	bne.n	80054e8 <I2C_Slave_ADDR+0x52>
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress1;
 80054e0:	687b      	ldr	r3, [r7, #4]
 80054e2:	68db      	ldr	r3, [r3, #12]
 80054e4:	81bb      	strh	r3, [r7, #12]
 80054e6:	e002      	b.n	80054ee <I2C_Slave_ADDR+0x58>
    }
    else
    {
      SlaveAddrCode = (uint16_t)hi2c->Init.OwnAddress2;
 80054e8:	687b      	ldr	r3, [r7, #4]
 80054ea:	699b      	ldr	r3, [r3, #24]
 80054ec:	81bb      	strh	r3, [r7, #12]
    }

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
 80054ee:	687b      	ldr	r3, [r7, #4]
 80054f0:	2200      	movs	r2, #0
 80054f2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Call Slave Addr callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
#else
    HAL_I2C_AddrCallback(hi2c, TransferDirection, SlaveAddrCode);
 80054f6:	89ba      	ldrh	r2, [r7, #12]
 80054f8:	7bfb      	ldrb	r3, [r7, #15]
 80054fa:	4619      	mov	r1, r3
 80054fc:	6878      	ldr	r0, [r7, #4]
 80054fe:	f7ff f95d 	bl	80047bc <HAL_I2C_AddrCallback>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);

    /* Process Unlocked */
    __HAL_UNLOCK(hi2c);
  }
}
 8005502:	e008      	b.n	8005516 <I2C_Slave_ADDR+0x80>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_ADDR);
 8005504:	687b      	ldr	r3, [r7, #4]
 8005506:	681b      	ldr	r3, [r3, #0]
 8005508:	f06f 0202 	mvn.w	r2, #2
 800550c:	615a      	str	r2, [r3, #20]
    __HAL_UNLOCK(hi2c);
 800550e:	687b      	ldr	r3, [r7, #4]
 8005510:	2200      	movs	r2, #0
 8005512:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
}
 8005516:	bf00      	nop
 8005518:	3710      	adds	r7, #16
 800551a:	46bd      	mov	sp, r7
 800551c:	bd80      	pop	{r7, pc}
	...

08005520 <I2C_Slave_STOPF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_STOPF(I2C_HandleTypeDef *hi2c)
{
 8005520:	b580      	push	{r7, lr}
 8005522:	b084      	sub	sp, #16
 8005524:	af00      	add	r7, sp, #0
 8005526:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005528:	687b      	ldr	r3, [r7, #4]
 800552a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800552e:	73fb      	strb	r3, [r7, #15]

  /* Disable EVT, BUF and ERR interrupt */
  __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005530:	687b      	ldr	r3, [r7, #4]
 8005532:	681b      	ldr	r3, [r3, #0]
 8005534:	685a      	ldr	r2, [r3, #4]
 8005536:	687b      	ldr	r3, [r7, #4]
 8005538:	681b      	ldr	r3, [r3, #0]
 800553a:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 800553e:	605a      	str	r2, [r3, #4]

  /* Clear STOPF flag */
  __HAL_I2C_CLEAR_STOPFLAG(hi2c);
 8005540:	2300      	movs	r3, #0
 8005542:	60bb      	str	r3, [r7, #8]
 8005544:	687b      	ldr	r3, [r7, #4]
 8005546:	681b      	ldr	r3, [r3, #0]
 8005548:	695b      	ldr	r3, [r3, #20]
 800554a:	60bb      	str	r3, [r7, #8]
 800554c:	687b      	ldr	r3, [r7, #4]
 800554e:	681b      	ldr	r3, [r3, #0]
 8005550:	681a      	ldr	r2, [r3, #0]
 8005552:	687b      	ldr	r3, [r7, #4]
 8005554:	681b      	ldr	r3, [r3, #0]
 8005556:	f042 0201 	orr.w	r2, r2, #1
 800555a:	601a      	str	r2, [r3, #0]
 800555c:	68bb      	ldr	r3, [r7, #8]

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 800555e:	687b      	ldr	r3, [r7, #4]
 8005560:	681b      	ldr	r3, [r3, #0]
 8005562:	681a      	ldr	r2, [r3, #0]
 8005564:	687b      	ldr	r3, [r7, #4]
 8005566:	681b      	ldr	r3, [r3, #0]
 8005568:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 800556c:	601a      	str	r2, [r3, #0]

  /* If a DMA is ongoing, Update handle size context */
  if ((hi2c->Instance->CR2 & I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 800556e:	687b      	ldr	r3, [r7, #4]
 8005570:	681b      	ldr	r3, [r3, #0]
 8005572:	685b      	ldr	r3, [r3, #4]
 8005574:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 8005578:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 800557c:	d172      	bne.n	8005664 <I2C_Slave_STOPF+0x144>
  {
    if ((CurrentState == HAL_I2C_STATE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN))
 800557e:	7bfb      	ldrb	r3, [r7, #15]
 8005580:	2b22      	cmp	r3, #34	; 0x22
 8005582:	d002      	beq.n	800558a <I2C_Slave_STOPF+0x6a>
 8005584:	7bfb      	ldrb	r3, [r7, #15]
 8005586:	2b2a      	cmp	r3, #42	; 0x2a
 8005588:	d135      	bne.n	80055f6 <I2C_Slave_STOPF+0xd6>
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmarx));
 800558a:	687b      	ldr	r3, [r7, #4]
 800558c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800558e:	681b      	ldr	r3, [r3, #0]
 8005590:	685b      	ldr	r3, [r3, #4]
 8005592:	b29a      	uxth	r2, r3
 8005594:	687b      	ldr	r3, [r7, #4]
 8005596:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005598:	687b      	ldr	r3, [r7, #4]
 800559a:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 800559c:	b29b      	uxth	r3, r3
 800559e:	2b00      	cmp	r3, #0
 80055a0:	d005      	beq.n	80055ae <I2C_Slave_STOPF+0x8e>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80055a2:	687b      	ldr	r3, [r7, #4]
 80055a4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80055a6:	f043 0204 	orr.w	r2, r3, #4
 80055aa:	687b      	ldr	r3, [r7, #4]
 80055ac:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 80055ae:	687b      	ldr	r3, [r7, #4]
 80055b0:	681b      	ldr	r3, [r3, #0]
 80055b2:	685a      	ldr	r2, [r3, #4]
 80055b4:	687b      	ldr	r3, [r7, #4]
 80055b6:	681b      	ldr	r3, [r3, #0]
 80055b8:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80055bc:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055be:	687b      	ldr	r3, [r7, #4]
 80055c0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055c2:	4618      	mov	r0, r3
 80055c4:	f7fe fa30 	bl	8003a28 <HAL_DMA_GetState>
 80055c8:	4603      	mov	r3, r0
 80055ca:	2b01      	cmp	r3, #1
 80055cc:	d049      	beq.n	8005662 <I2C_Slave_STOPF+0x142>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 80055ce:	687b      	ldr	r3, [r7, #4]
 80055d0:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055d2:	4a69      	ldr	r2, [pc, #420]	; (8005778 <I2C_Slave_STOPF+0x258>)
 80055d4:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA RX */
        if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 80055d6:	687b      	ldr	r3, [r7, #4]
 80055d8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055da:	4618      	mov	r0, r3
 80055dc:	f7fe f878 	bl	80036d0 <HAL_DMA_Abort_IT>
 80055e0:	4603      	mov	r3, r0
 80055e2:	2b00      	cmp	r3, #0
 80055e4:	d03d      	beq.n	8005662 <I2C_Slave_STOPF+0x142>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80055e6:	687b      	ldr	r3, [r7, #4]
 80055e8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80055ea:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80055ec:	687a      	ldr	r2, [r7, #4]
 80055ee:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80055f0:	4610      	mov	r0, r2
 80055f2:	4798      	blx	r3
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 80055f4:	e035      	b.n	8005662 <I2C_Slave_STOPF+0x142>
        }
      }
    }
    else
    {
      hi2c->XferCount = (uint16_t)(__HAL_DMA_GET_COUNTER(hi2c->hdmatx));
 80055f6:	687b      	ldr	r3, [r7, #4]
 80055f8:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 80055fa:	681b      	ldr	r3, [r3, #0]
 80055fc:	685b      	ldr	r3, [r3, #4]
 80055fe:	b29a      	uxth	r2, r3
 8005600:	687b      	ldr	r3, [r7, #4]
 8005602:	855a      	strh	r2, [r3, #42]	; 0x2a

      if (hi2c->XferCount != 0U)
 8005604:	687b      	ldr	r3, [r7, #4]
 8005606:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005608:	b29b      	uxth	r3, r3
 800560a:	2b00      	cmp	r3, #0
 800560c:	d005      	beq.n	800561a <I2C_Slave_STOPF+0xfa>
      {
        /* Set ErrorCode corresponding to a Non-Acknowledge */
        hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 800560e:	687b      	ldr	r3, [r7, #4]
 8005610:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005612:	f043 0204 	orr.w	r2, r3, #4
 8005616:	687b      	ldr	r3, [r7, #4]
 8005618:	641a      	str	r2, [r3, #64]	; 0x40
      }

      /* Disable, stop the current DMA */
      CLEAR_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN);
 800561a:	687b      	ldr	r3, [r7, #4]
 800561c:	681b      	ldr	r3, [r3, #0]
 800561e:	685a      	ldr	r2, [r3, #4]
 8005620:	687b      	ldr	r3, [r7, #4]
 8005622:	681b      	ldr	r3, [r3, #0]
 8005624:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005628:	605a      	str	r2, [r3, #4]

      /* Abort DMA Xfer if any */
      if (HAL_DMA_GetState(hi2c->hdmatx) != HAL_DMA_STATE_READY)
 800562a:	687b      	ldr	r3, [r7, #4]
 800562c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800562e:	4618      	mov	r0, r3
 8005630:	f7fe f9fa 	bl	8003a28 <HAL_DMA_GetState>
 8005634:	4603      	mov	r3, r0
 8005636:	2b01      	cmp	r3, #1
 8005638:	d014      	beq.n	8005664 <I2C_Slave_STOPF+0x144>
      {
        /* Set the I2C DMA Abort callback :
        will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
        hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800563a:	687b      	ldr	r3, [r7, #4]
 800563c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800563e:	4a4e      	ldr	r2, [pc, #312]	; (8005778 <I2C_Slave_STOPF+0x258>)
 8005640:	651a      	str	r2, [r3, #80]	; 0x50

        /* Abort DMA TX */
        if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005642:	687b      	ldr	r3, [r7, #4]
 8005644:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005646:	4618      	mov	r0, r3
 8005648:	f7fe f842 	bl	80036d0 <HAL_DMA_Abort_IT>
 800564c:	4603      	mov	r3, r0
 800564e:	2b00      	cmp	r3, #0
 8005650:	d008      	beq.n	8005664 <I2C_Slave_STOPF+0x144>
        {
          /* Call Directly XferAbortCallback function in case of error */
          hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005652:	687b      	ldr	r3, [r7, #4]
 8005654:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005656:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005658:	687a      	ldr	r2, [r7, #4]
 800565a:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800565c:	4610      	mov	r0, r2
 800565e:	4798      	blx	r3
 8005660:	e000      	b.n	8005664 <I2C_Slave_STOPF+0x144>
      if (HAL_DMA_GetState(hi2c->hdmarx) != HAL_DMA_STATE_READY)
 8005662:	bf00      	nop
      }
    }
  }

  /* All data are not transferred, so set error code accordingly */
  if (hi2c->XferCount != 0U)
 8005664:	687b      	ldr	r3, [r7, #4]
 8005666:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005668:	b29b      	uxth	r3, r3
 800566a:	2b00      	cmp	r3, #0
 800566c:	d03e      	beq.n	80056ec <I2C_Slave_STOPF+0x1cc>
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_BTF) == SET)
 800566e:	687b      	ldr	r3, [r7, #4]
 8005670:	681b      	ldr	r3, [r3, #0]
 8005672:	695b      	ldr	r3, [r3, #20]
 8005674:	f003 0304 	and.w	r3, r3, #4
 8005678:	2b04      	cmp	r3, #4
 800567a:	d112      	bne.n	80056a2 <I2C_Slave_STOPF+0x182>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 800567c:	687b      	ldr	r3, [r7, #4]
 800567e:	681b      	ldr	r3, [r3, #0]
 8005680:	691a      	ldr	r2, [r3, #16]
 8005682:	687b      	ldr	r3, [r7, #4]
 8005684:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005686:	b2d2      	uxtb	r2, r2
 8005688:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 800568a:	687b      	ldr	r3, [r7, #4]
 800568c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800568e:	1c5a      	adds	r2, r3, #1
 8005690:	687b      	ldr	r3, [r7, #4]
 8005692:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 8005694:	687b      	ldr	r3, [r7, #4]
 8005696:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 8005698:	b29b      	uxth	r3, r3
 800569a:	3b01      	subs	r3, #1
 800569c:	b29a      	uxth	r2, r3
 800569e:	687b      	ldr	r3, [r7, #4]
 80056a0:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80056a2:	687b      	ldr	r3, [r7, #4]
 80056a4:	681b      	ldr	r3, [r3, #0]
 80056a6:	695b      	ldr	r3, [r3, #20]
 80056a8:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80056ac:	2b40      	cmp	r3, #64	; 0x40
 80056ae:	d112      	bne.n	80056d6 <I2C_Slave_STOPF+0x1b6>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80056b0:	687b      	ldr	r3, [r7, #4]
 80056b2:	681b      	ldr	r3, [r3, #0]
 80056b4:	691a      	ldr	r2, [r3, #16]
 80056b6:	687b      	ldr	r3, [r7, #4]
 80056b8:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056ba:	b2d2      	uxtb	r2, r2
 80056bc:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80056be:	687b      	ldr	r3, [r7, #4]
 80056c0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80056c2:	1c5a      	adds	r2, r3, #1
 80056c4:	687b      	ldr	r3, [r7, #4]
 80056c6:	625a      	str	r2, [r3, #36]	; 0x24

      /* Update counter */
      hi2c->XferCount--;
 80056c8:	687b      	ldr	r3, [r7, #4]
 80056ca:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056cc:	b29b      	uxth	r3, r3
 80056ce:	3b01      	subs	r3, #1
 80056d0:	b29a      	uxth	r2, r3
 80056d2:	687b      	ldr	r3, [r7, #4]
 80056d4:	855a      	strh	r2, [r3, #42]	; 0x2a
    }

    if (hi2c->XferCount != 0U)
 80056d6:	687b      	ldr	r3, [r7, #4]
 80056d8:	8d5b      	ldrh	r3, [r3, #42]	; 0x2a
 80056da:	b29b      	uxth	r3, r3
 80056dc:	2b00      	cmp	r3, #0
 80056de:	d005      	beq.n	80056ec <I2C_Slave_STOPF+0x1cc>
    {
      /* Set ErrorCode corresponding to a Non-Acknowledge */
      hi2c->ErrorCode |= HAL_I2C_ERROR_AF;
 80056e0:	687b      	ldr	r3, [r7, #4]
 80056e2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056e4:	f043 0204 	orr.w	r2, r3, #4
 80056e8:	687b      	ldr	r3, [r7, #4]
 80056ea:	641a      	str	r2, [r3, #64]	; 0x40
    }
  }

  if (hi2c->ErrorCode != HAL_I2C_ERROR_NONE)
 80056ec:	687b      	ldr	r3, [r7, #4]
 80056ee:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80056f0:	2b00      	cmp	r3, #0
 80056f2:	d003      	beq.n	80056fc <I2C_Slave_STOPF+0x1dc>
  {
    /* Call the corresponding callback to inform upper layer of End of Transfer */
    I2C_ITError(hi2c);
 80056f4:	6878      	ldr	r0, [r7, #4]
 80056f6:	f000 f8b3 	bl	8005860 <I2C_ITError>
        HAL_I2C_SlaveRxCpltCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
      }
    }
  }
}
 80056fa:	e039      	b.n	8005770 <I2C_Slave_STOPF+0x250>
    if (CurrentState == HAL_I2C_STATE_BUSY_RX_LISTEN)
 80056fc:	7bfb      	ldrb	r3, [r7, #15]
 80056fe:	2b2a      	cmp	r3, #42	; 0x2a
 8005700:	d109      	bne.n	8005716 <I2C_Slave_STOPF+0x1f6>
      hi2c->PreviousState = I2C_STATE_NONE;
 8005702:	687b      	ldr	r3, [r7, #4]
 8005704:	2200      	movs	r2, #0
 8005706:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005708:	687b      	ldr	r3, [r7, #4]
 800570a:	2228      	movs	r2, #40	; 0x28
 800570c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      HAL_I2C_SlaveRxCpltCallback(hi2c);
 8005710:	6878      	ldr	r0, [r7, #4]
 8005712:	f7ff f849 	bl	80047a8 <HAL_I2C_SlaveRxCpltCallback>
    if (hi2c->State == HAL_I2C_STATE_LISTEN)
 8005716:	687b      	ldr	r3, [r7, #4]
 8005718:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800571c:	b2db      	uxtb	r3, r3
 800571e:	2b28      	cmp	r3, #40	; 0x28
 8005720:	d111      	bne.n	8005746 <I2C_Slave_STOPF+0x226>
      hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 8005722:	687b      	ldr	r3, [r7, #4]
 8005724:	4a15      	ldr	r2, [pc, #84]	; (800577c <I2C_Slave_STOPF+0x25c>)
 8005726:	62da      	str	r2, [r3, #44]	; 0x2c
      hi2c->PreviousState = I2C_STATE_NONE;
 8005728:	687b      	ldr	r3, [r7, #4]
 800572a:	2200      	movs	r2, #0
 800572c:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_READY;
 800572e:	687b      	ldr	r3, [r7, #4]
 8005730:	2220      	movs	r2, #32
 8005732:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005736:	687b      	ldr	r3, [r7, #4]
 8005738:	2200      	movs	r2, #0
 800573a:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      HAL_I2C_ListenCpltCallback(hi2c);
 800573e:	6878      	ldr	r0, [r7, #4]
 8005740:	f7ff f84a 	bl	80047d8 <HAL_I2C_ListenCpltCallback>
}
 8005744:	e014      	b.n	8005770 <I2C_Slave_STOPF+0x250>
      if ((hi2c->PreviousState  == I2C_STATE_SLAVE_BUSY_RX) || (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005746:	687b      	ldr	r3, [r7, #4]
 8005748:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800574a:	2b22      	cmp	r3, #34	; 0x22
 800574c:	d002      	beq.n	8005754 <I2C_Slave_STOPF+0x234>
 800574e:	7bfb      	ldrb	r3, [r7, #15]
 8005750:	2b22      	cmp	r3, #34	; 0x22
 8005752:	d10d      	bne.n	8005770 <I2C_Slave_STOPF+0x250>
        hi2c->PreviousState = I2C_STATE_NONE;
 8005754:	687b      	ldr	r3, [r7, #4]
 8005756:	2200      	movs	r2, #0
 8005758:	631a      	str	r2, [r3, #48]	; 0x30
        hi2c->State = HAL_I2C_STATE_READY;
 800575a:	687b      	ldr	r3, [r7, #4]
 800575c:	2220      	movs	r2, #32
 800575e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
        hi2c->Mode = HAL_I2C_MODE_NONE;
 8005762:	687b      	ldr	r3, [r7, #4]
 8005764:	2200      	movs	r2, #0
 8005766:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        HAL_I2C_SlaveRxCpltCallback(hi2c);
 800576a:	6878      	ldr	r0, [r7, #4]
 800576c:	f7ff f81c 	bl	80047a8 <HAL_I2C_SlaveRxCpltCallback>
}
 8005770:	bf00      	nop
 8005772:	3710      	adds	r7, #16
 8005774:	46bd      	mov	sp, r7
 8005776:	bd80      	pop	{r7, pc}
 8005778:	08005ac5 	.word	0x08005ac5
 800577c:	ffff0000 	.word	0xffff0000

08005780 <I2C_Slave_AF>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *         the configuration information for I2C module
  * @retval None
  */
static void I2C_Slave_AF(I2C_HandleTypeDef *hi2c)
{
 8005780:	b580      	push	{r7, lr}
 8005782:	b084      	sub	sp, #16
 8005784:	af00      	add	r7, sp, #0
 8005786:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variables to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005788:	687b      	ldr	r3, [r7, #4]
 800578a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800578e:	73fb      	strb	r3, [r7, #15]
  uint32_t CurrentXferOptions       = hi2c->XferOptions;
 8005790:	687b      	ldr	r3, [r7, #4]
 8005792:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005794:	60bb      	str	r3, [r7, #8]

  if (((CurrentXferOptions ==  I2C_FIRST_AND_LAST_FRAME) || (CurrentXferOptions == I2C_LAST_FRAME)) && \
 8005796:	68bb      	ldr	r3, [r7, #8]
 8005798:	2b08      	cmp	r3, #8
 800579a:	d002      	beq.n	80057a2 <I2C_Slave_AF+0x22>
 800579c:	68bb      	ldr	r3, [r7, #8]
 800579e:	2b20      	cmp	r3, #32
 80057a0:	d129      	bne.n	80057f6 <I2C_Slave_AF+0x76>
 80057a2:	7bfb      	ldrb	r3, [r7, #15]
 80057a4:	2b28      	cmp	r3, #40	; 0x28
 80057a6:	d126      	bne.n	80057f6 <I2C_Slave_AF+0x76>
      (CurrentState == HAL_I2C_STATE_LISTEN))
  {
    hi2c->XferOptions = I2C_NO_OPTION_FRAME;
 80057a8:	687b      	ldr	r3, [r7, #4]
 80057aa:	4a2c      	ldr	r2, [pc, #176]	; (800585c <I2C_Slave_AF+0xdc>)
 80057ac:	62da      	str	r2, [r3, #44]	; 0x2c

    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 80057ae:	687b      	ldr	r3, [r7, #4]
 80057b0:	681b      	ldr	r3, [r3, #0]
 80057b2:	685a      	ldr	r2, [r3, #4]
 80057b4:	687b      	ldr	r3, [r7, #4]
 80057b6:	681b      	ldr	r3, [r3, #0]
 80057b8:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 80057bc:	605a      	str	r2, [r3, #4]

    /* Clear AF flag */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 80057be:	687b      	ldr	r3, [r7, #4]
 80057c0:	681b      	ldr	r3, [r3, #0]
 80057c2:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 80057c6:	615a      	str	r2, [r3, #20]

    /* Disable Acknowledge */
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 80057c8:	687b      	ldr	r3, [r7, #4]
 80057ca:	681b      	ldr	r3, [r3, #0]
 80057cc:	681a      	ldr	r2, [r3, #0]
 80057ce:	687b      	ldr	r3, [r7, #4]
 80057d0:	681b      	ldr	r3, [r3, #0]
 80057d2:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 80057d6:	601a      	str	r2, [r3, #0]

    hi2c->PreviousState = I2C_STATE_NONE;
 80057d8:	687b      	ldr	r3, [r7, #4]
 80057da:	2200      	movs	r2, #0
 80057dc:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 80057de:	687b      	ldr	r3, [r7, #4]
 80057e0:	2220      	movs	r2, #32
 80057e2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 80057e6:	687b      	ldr	r3, [r7, #4]
 80057e8:	2200      	movs	r2, #0
 80057ea:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 80057ee:	6878      	ldr	r0, [r7, #4]
 80057f0:	f7fe fff2 	bl	80047d8 <HAL_I2C_ListenCpltCallback>
  {
    /* Clear AF flag only */
    /* State Listen, but XferOptions == FIRST or NEXT */
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
  }
}
 80057f4:	e02e      	b.n	8005854 <I2C_Slave_AF+0xd4>
  else if (CurrentState == HAL_I2C_STATE_BUSY_TX)
 80057f6:	7bfb      	ldrb	r3, [r7, #15]
 80057f8:	2b21      	cmp	r3, #33	; 0x21
 80057fa:	d126      	bne.n	800584a <I2C_Slave_AF+0xca>
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 80057fc:	687b      	ldr	r3, [r7, #4]
 80057fe:	4a17      	ldr	r2, [pc, #92]	; (800585c <I2C_Slave_AF+0xdc>)
 8005800:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_SLAVE_BUSY_TX;
 8005802:	687b      	ldr	r3, [r7, #4]
 8005804:	2221      	movs	r2, #33	; 0x21
 8005806:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005808:	687b      	ldr	r3, [r7, #4]
 800580a:	2220      	movs	r2, #32
 800580c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005810:	687b      	ldr	r3, [r7, #4]
 8005812:	2200      	movs	r2, #0
 8005814:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005818:	687b      	ldr	r3, [r7, #4]
 800581a:	681b      	ldr	r3, [r3, #0]
 800581c:	685a      	ldr	r2, [r3, #4]
 800581e:	687b      	ldr	r3, [r7, #4]
 8005820:	681b      	ldr	r3, [r3, #0]
 8005822:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005826:	605a      	str	r2, [r3, #4]
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 8005828:	687b      	ldr	r3, [r7, #4]
 800582a:	681b      	ldr	r3, [r3, #0]
 800582c:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005830:	615a      	str	r2, [r3, #20]
    CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005832:	687b      	ldr	r3, [r7, #4]
 8005834:	681b      	ldr	r3, [r3, #0]
 8005836:	681a      	ldr	r2, [r3, #0]
 8005838:	687b      	ldr	r3, [r7, #4]
 800583a:	681b      	ldr	r3, [r3, #0]
 800583c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005840:	601a      	str	r2, [r3, #0]
    HAL_I2C_SlaveTxCpltCallback(hi2c);
 8005842:	6878      	ldr	r0, [r7, #4]
 8005844:	f7fe ffa6 	bl	8004794 <HAL_I2C_SlaveTxCpltCallback>
}
 8005848:	e004      	b.n	8005854 <I2C_Slave_AF+0xd4>
    __HAL_I2C_CLEAR_FLAG(hi2c, I2C_FLAG_AF);
 800584a:	687b      	ldr	r3, [r7, #4]
 800584c:	681b      	ldr	r3, [r3, #0]
 800584e:	f46f 6280 	mvn.w	r2, #1024	; 0x400
 8005852:	615a      	str	r2, [r3, #20]
}
 8005854:	bf00      	nop
 8005856:	3710      	adds	r7, #16
 8005858:	46bd      	mov	sp, r7
 800585a:	bd80      	pop	{r7, pc}
 800585c:	ffff0000 	.word	0xffff0000

08005860 <I2C_ITError>:
  * @brief  I2C interrupts error process
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ITError(I2C_HandleTypeDef *hi2c)
{
 8005860:	b580      	push	{r7, lr}
 8005862:	b084      	sub	sp, #16
 8005864:	af00      	add	r7, sp, #0
 8005866:	6078      	str	r0, [r7, #4]
  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005868:	687b      	ldr	r3, [r7, #4]
 800586a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 800586e:	73fb      	strb	r3, [r7, #15]
  HAL_I2C_ModeTypeDef CurrentMode = hi2c->Mode;
 8005870:	687b      	ldr	r3, [r7, #4]
 8005872:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8005876:	73bb      	strb	r3, [r7, #14]
  uint32_t CurrentError;

  if (((CurrentMode == HAL_I2C_MODE_MASTER) || (CurrentMode == HAL_I2C_MODE_MEM)) && (CurrentState == HAL_I2C_STATE_BUSY_RX))
 8005878:	7bbb      	ldrb	r3, [r7, #14]
 800587a:	2b10      	cmp	r3, #16
 800587c:	d002      	beq.n	8005884 <I2C_ITError+0x24>
 800587e:	7bbb      	ldrb	r3, [r7, #14]
 8005880:	2b40      	cmp	r3, #64	; 0x40
 8005882:	d10a      	bne.n	800589a <I2C_ITError+0x3a>
 8005884:	7bfb      	ldrb	r3, [r7, #15]
 8005886:	2b22      	cmp	r3, #34	; 0x22
 8005888:	d107      	bne.n	800589a <I2C_ITError+0x3a>
  {
    /* Disable Pos bit in I2C CR1 when error occurred in Master/Mem Receive IT Process */
    hi2c->Instance->CR1 &= ~I2C_CR1_POS;
 800588a:	687b      	ldr	r3, [r7, #4]
 800588c:	681b      	ldr	r3, [r3, #0]
 800588e:	681a      	ldr	r2, [r3, #0]
 8005890:	687b      	ldr	r3, [r7, #4]
 8005892:	681b      	ldr	r3, [r3, #0]
 8005894:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 8005898:	601a      	str	r2, [r3, #0]
  }

  if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 800589a:	7bfb      	ldrb	r3, [r7, #15]
 800589c:	f003 0328 	and.w	r3, r3, #40	; 0x28
 80058a0:	2b28      	cmp	r3, #40	; 0x28
 80058a2:	d107      	bne.n	80058b4 <I2C_ITError+0x54>
  {
    /* keep HAL_I2C_STATE_LISTEN */
    hi2c->PreviousState = I2C_STATE_NONE;
 80058a4:	687b      	ldr	r3, [r7, #4]
 80058a6:	2200      	movs	r2, #0
 80058a8:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State = HAL_I2C_STATE_LISTEN;
 80058aa:	687b      	ldr	r3, [r7, #4]
 80058ac:	2228      	movs	r2, #40	; 0x28
 80058ae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 80058b2:	e015      	b.n	80058e0 <I2C_ITError+0x80>
  }
  else
  {
    /* If state is an abort treatment on going, don't change state */
    /* This change will be do later */
    if ((READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) != I2C_CR2_DMAEN) && (CurrentState != HAL_I2C_STATE_ABORT))
 80058b4:	687b      	ldr	r3, [r7, #4]
 80058b6:	681b      	ldr	r3, [r3, #0]
 80058b8:	685b      	ldr	r3, [r3, #4]
 80058ba:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058be:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058c2:	d00a      	beq.n	80058da <I2C_ITError+0x7a>
 80058c4:	7bfb      	ldrb	r3, [r7, #15]
 80058c6:	2b60      	cmp	r3, #96	; 0x60
 80058c8:	d007      	beq.n	80058da <I2C_ITError+0x7a>
    {
      hi2c->State = HAL_I2C_STATE_READY;
 80058ca:	687b      	ldr	r3, [r7, #4]
 80058cc:	2220      	movs	r2, #32
 80058ce:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 80058d2:	687b      	ldr	r3, [r7, #4]
 80058d4:	2200      	movs	r2, #0
 80058d6:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    }
    hi2c->PreviousState = I2C_STATE_NONE;
 80058da:	687b      	ldr	r3, [r7, #4]
 80058dc:	2200      	movs	r2, #0
 80058de:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Abort DMA transfer */
  if (READ_BIT(hi2c->Instance->CR2, I2C_CR2_DMAEN) == I2C_CR2_DMAEN)
 80058e0:	687b      	ldr	r3, [r7, #4]
 80058e2:	681b      	ldr	r3, [r3, #0]
 80058e4:	685b      	ldr	r3, [r3, #4]
 80058e6:	f403 6300 	and.w	r3, r3, #2048	; 0x800
 80058ea:	f5b3 6f00 	cmp.w	r3, #2048	; 0x800
 80058ee:	d162      	bne.n	80059b6 <I2C_ITError+0x156>
  {
    hi2c->Instance->CR2 &= ~I2C_CR2_DMAEN;
 80058f0:	687b      	ldr	r3, [r7, #4]
 80058f2:	681b      	ldr	r3, [r3, #0]
 80058f4:	685a      	ldr	r2, [r3, #4]
 80058f6:	687b      	ldr	r3, [r7, #4]
 80058f8:	681b      	ldr	r3, [r3, #0]
 80058fa:	f422 6200 	bic.w	r2, r2, #2048	; 0x800
 80058fe:	605a      	str	r2, [r3, #4]

    if (hi2c->hdmatx->State != HAL_DMA_STATE_READY)
 8005900:	687b      	ldr	r3, [r7, #4]
 8005902:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005904:	f893 3035 	ldrb.w	r3, [r3, #53]	; 0x35
 8005908:	b2db      	uxtb	r3, r3
 800590a:	2b01      	cmp	r3, #1
 800590c:	d020      	beq.n	8005950 <I2C_ITError+0xf0>
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmatx->XferAbortCallback = I2C_DMAAbort;
 800590e:	687b      	ldr	r3, [r7, #4]
 8005910:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005912:	4a6a      	ldr	r2, [pc, #424]	; (8005abc <I2C_ITError+0x25c>)
 8005914:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmatx) != HAL_OK)
 8005916:	687b      	ldr	r3, [r7, #4]
 8005918:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800591a:	4618      	mov	r0, r3
 800591c:	f7fd fed8 	bl	80036d0 <HAL_DMA_Abort_IT>
 8005920:	4603      	mov	r3, r0
 8005922:	2b00      	cmp	r3, #0
 8005924:	f000 8089 	beq.w	8005a3a <I2C_ITError+0x1da>
      {
        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 8005928:	687b      	ldr	r3, [r7, #4]
 800592a:	681b      	ldr	r3, [r3, #0]
 800592c:	681a      	ldr	r2, [r3, #0]
 800592e:	687b      	ldr	r3, [r7, #4]
 8005930:	681b      	ldr	r3, [r3, #0]
 8005932:	f022 0201 	bic.w	r2, r2, #1
 8005936:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 8005938:	687b      	ldr	r3, [r7, #4]
 800593a:	2220      	movs	r2, #32
 800593c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly XferAbortCallback function in case of error */
        hi2c->hdmatx->XferAbortCallback(hi2c->hdmatx);
 8005940:	687b      	ldr	r3, [r7, #4]
 8005942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005944:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8005946:	687a      	ldr	r2, [r7, #4]
 8005948:	6b52      	ldr	r2, [r2, #52]	; 0x34
 800594a:	4610      	mov	r0, r2
 800594c:	4798      	blx	r3
 800594e:	e074      	b.n	8005a3a <I2C_ITError+0x1da>
    }
    else
    {
      /* Set the DMA Abort callback :
      will lead to call HAL_I2C_ErrorCallback() at end of DMA abort procedure */
      hi2c->hdmarx->XferAbortCallback = I2C_DMAAbort;
 8005950:	687b      	ldr	r3, [r7, #4]
 8005952:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005954:	4a59      	ldr	r2, [pc, #356]	; (8005abc <I2C_ITError+0x25c>)
 8005956:	651a      	str	r2, [r3, #80]	; 0x50

      if (HAL_DMA_Abort_IT(hi2c->hdmarx) != HAL_OK)
 8005958:	687b      	ldr	r3, [r7, #4]
 800595a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 800595c:	4618      	mov	r0, r3
 800595e:	f7fd feb7 	bl	80036d0 <HAL_DMA_Abort_IT>
 8005962:	4603      	mov	r3, r0
 8005964:	2b00      	cmp	r3, #0
 8005966:	d068      	beq.n	8005a3a <I2C_ITError+0x1da>
      {
        /* Store Last receive data if any */
        if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005968:	687b      	ldr	r3, [r7, #4]
 800596a:	681b      	ldr	r3, [r3, #0]
 800596c:	695b      	ldr	r3, [r3, #20]
 800596e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005972:	2b40      	cmp	r3, #64	; 0x40
 8005974:	d10b      	bne.n	800598e <I2C_ITError+0x12e>
        {
          /* Read data from DR */
          *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005976:	687b      	ldr	r3, [r7, #4]
 8005978:	681b      	ldr	r3, [r3, #0]
 800597a:	691a      	ldr	r2, [r3, #16]
 800597c:	687b      	ldr	r3, [r7, #4]
 800597e:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005980:	b2d2      	uxtb	r2, r2
 8005982:	701a      	strb	r2, [r3, #0]

          /* Increment Buffer pointer */
          hi2c->pBuffPtr++;
 8005984:	687b      	ldr	r3, [r7, #4]
 8005986:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005988:	1c5a      	adds	r2, r3, #1
 800598a:	687b      	ldr	r3, [r7, #4]
 800598c:	625a      	str	r2, [r3, #36]	; 0x24
        }

        /* Disable I2C peripheral to prevent dummy data in buffer */
        __HAL_I2C_DISABLE(hi2c);
 800598e:	687b      	ldr	r3, [r7, #4]
 8005990:	681b      	ldr	r3, [r3, #0]
 8005992:	681a      	ldr	r2, [r3, #0]
 8005994:	687b      	ldr	r3, [r7, #4]
 8005996:	681b      	ldr	r3, [r3, #0]
 8005998:	f022 0201 	bic.w	r2, r2, #1
 800599c:	601a      	str	r2, [r3, #0]

        hi2c->State = HAL_I2C_STATE_READY;
 800599e:	687b      	ldr	r3, [r7, #4]
 80059a0:	2220      	movs	r2, #32
 80059a2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

        /* Call Directly hi2c->hdmarx->XferAbortCallback function in case of error */
        hi2c->hdmarx->XferAbortCallback(hi2c->hdmarx);
 80059a6:	687b      	ldr	r3, [r7, #4]
 80059a8:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80059aa:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 80059ac:	687a      	ldr	r2, [r7, #4]
 80059ae:	6b92      	ldr	r2, [r2, #56]	; 0x38
 80059b0:	4610      	mov	r0, r2
 80059b2:	4798      	blx	r3
 80059b4:	e041      	b.n	8005a3a <I2C_ITError+0x1da>
      }
    }
  }
  else if (hi2c->State == HAL_I2C_STATE_ABORT)
 80059b6:	687b      	ldr	r3, [r7, #4]
 80059b8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80059bc:	b2db      	uxtb	r3, r3
 80059be:	2b60      	cmp	r3, #96	; 0x60
 80059c0:	d125      	bne.n	8005a0e <I2C_ITError+0x1ae>
  {
    hi2c->State = HAL_I2C_STATE_READY;
 80059c2:	687b      	ldr	r3, [r7, #4]
 80059c4:	2220      	movs	r2, #32
 80059c6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->ErrorCode = HAL_I2C_ERROR_NONE;
 80059ca:	687b      	ldr	r3, [r7, #4]
 80059cc:	2200      	movs	r2, #0
 80059ce:	641a      	str	r2, [r3, #64]	; 0x40

    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 80059d0:	687b      	ldr	r3, [r7, #4]
 80059d2:	681b      	ldr	r3, [r3, #0]
 80059d4:	695b      	ldr	r3, [r3, #20]
 80059d6:	f003 0340 	and.w	r3, r3, #64	; 0x40
 80059da:	2b40      	cmp	r3, #64	; 0x40
 80059dc:	d10b      	bne.n	80059f6 <I2C_ITError+0x196>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 80059de:	687b      	ldr	r3, [r7, #4]
 80059e0:	681b      	ldr	r3, [r3, #0]
 80059e2:	691a      	ldr	r2, [r3, #16]
 80059e4:	687b      	ldr	r3, [r7, #4]
 80059e6:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059e8:	b2d2      	uxtb	r2, r2
 80059ea:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 80059ec:	687b      	ldr	r3, [r7, #4]
 80059ee:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80059f0:	1c5a      	adds	r2, r3, #1
 80059f2:	687b      	ldr	r3, [r7, #4]
 80059f4:	625a      	str	r2, [r3, #36]	; 0x24
    }

    /* Disable I2C peripheral to prevent dummy data in buffer */
    __HAL_I2C_DISABLE(hi2c);
 80059f6:	687b      	ldr	r3, [r7, #4]
 80059f8:	681b      	ldr	r3, [r3, #0]
 80059fa:	681a      	ldr	r2, [r3, #0]
 80059fc:	687b      	ldr	r3, [r7, #4]
 80059fe:	681b      	ldr	r3, [r3, #0]
 8005a00:	f022 0201 	bic.w	r2, r2, #1
 8005a04:	601a      	str	r2, [r3, #0]

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005a06:	6878      	ldr	r0, [r7, #4]
 8005a08:	f7fe ff0e 	bl	8004828 <HAL_I2C_AbortCpltCallback>
 8005a0c:	e015      	b.n	8005a3a <I2C_ITError+0x1da>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
  else
  {
    /* Store Last receive data if any */
    if (__HAL_I2C_GET_FLAG(hi2c, I2C_FLAG_RXNE) == SET)
 8005a0e:	687b      	ldr	r3, [r7, #4]
 8005a10:	681b      	ldr	r3, [r3, #0]
 8005a12:	695b      	ldr	r3, [r3, #20]
 8005a14:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8005a18:	2b40      	cmp	r3, #64	; 0x40
 8005a1a:	d10b      	bne.n	8005a34 <I2C_ITError+0x1d4>
    {
      /* Read data from DR */
      *hi2c->pBuffPtr = (uint8_t)hi2c->Instance->DR;
 8005a1c:	687b      	ldr	r3, [r7, #4]
 8005a1e:	681b      	ldr	r3, [r3, #0]
 8005a20:	691a      	ldr	r2, [r3, #16]
 8005a22:	687b      	ldr	r3, [r7, #4]
 8005a24:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a26:	b2d2      	uxtb	r2, r2
 8005a28:	701a      	strb	r2, [r3, #0]

      /* Increment Buffer pointer */
      hi2c->pBuffPtr++;
 8005a2a:	687b      	ldr	r3, [r7, #4]
 8005a2c:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8005a2e:	1c5a      	adds	r2, r3, #1
 8005a30:	687b      	ldr	r3, [r7, #4]
 8005a32:	625a      	str	r2, [r3, #36]	; 0x24

    /* Call user error callback */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
 8005a34:	6878      	ldr	r0, [r7, #4]
 8005a36:	f7fe feed 	bl	8004814 <HAL_I2C_ErrorCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }

  /* STOP Flag is not set after a NACK reception, BusError, ArbitrationLost, OverRun */
  CurrentError = hi2c->ErrorCode;
 8005a3a:	687b      	ldr	r3, [r7, #4]
 8005a3c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a3e:	60bb      	str	r3, [r7, #8]

  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a40:	68bb      	ldr	r3, [r7, #8]
 8005a42:	f003 0301 	and.w	r3, r3, #1
 8005a46:	2b00      	cmp	r3, #0
 8005a48:	d10e      	bne.n	8005a68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a4a:	68bb      	ldr	r3, [r7, #8]
 8005a4c:	f003 0302 	and.w	r3, r3, #2
  if (((CurrentError & HAL_I2C_ERROR_BERR) == HAL_I2C_ERROR_BERR) || \
 8005a50:	2b00      	cmp	r3, #0
 8005a52:	d109      	bne.n	8005a68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a54:	68bb      	ldr	r3, [r7, #8]
 8005a56:	f003 0304 	and.w	r3, r3, #4
      ((CurrentError & HAL_I2C_ERROR_ARLO) == HAL_I2C_ERROR_ARLO) || \
 8005a5a:	2b00      	cmp	r3, #0
 8005a5c:	d104      	bne.n	8005a68 <I2C_ITError+0x208>
      ((CurrentError & HAL_I2C_ERROR_OVR) == HAL_I2C_ERROR_OVR))
 8005a5e:	68bb      	ldr	r3, [r7, #8]
 8005a60:	f003 0308 	and.w	r3, r3, #8
      ((CurrentError & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF)     || \
 8005a64:	2b00      	cmp	r3, #0
 8005a66:	d007      	beq.n	8005a78 <I2C_ITError+0x218>
  {
    /* Disable EVT, BUF and ERR interrupt */
    __HAL_I2C_DISABLE_IT(hi2c, I2C_IT_EVT | I2C_IT_BUF | I2C_IT_ERR);
 8005a68:	687b      	ldr	r3, [r7, #4]
 8005a6a:	681b      	ldr	r3, [r3, #0]
 8005a6c:	685a      	ldr	r2, [r3, #4]
 8005a6e:	687b      	ldr	r3, [r7, #4]
 8005a70:	681b      	ldr	r3, [r3, #0]
 8005a72:	f422 62e0 	bic.w	r2, r2, #1792	; 0x700
 8005a76:	605a      	str	r2, [r3, #4]
  }

  /* So may inform upper layer that listen phase is stopped */
  /* during NACK error treatment */
  CurrentState = hi2c->State;
 8005a78:	687b      	ldr	r3, [r7, #4]
 8005a7a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005a7e:	73fb      	strb	r3, [r7, #15]
  if (((hi2c->ErrorCode & HAL_I2C_ERROR_AF) == HAL_I2C_ERROR_AF) && (CurrentState == HAL_I2C_STATE_LISTEN))
 8005a80:	687b      	ldr	r3, [r7, #4]
 8005a82:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005a84:	f003 0304 	and.w	r3, r3, #4
 8005a88:	2b04      	cmp	r3, #4
 8005a8a:	d113      	bne.n	8005ab4 <I2C_ITError+0x254>
 8005a8c:	7bfb      	ldrb	r3, [r7, #15]
 8005a8e:	2b28      	cmp	r3, #40	; 0x28
 8005a90:	d110      	bne.n	8005ab4 <I2C_ITError+0x254>
  {
    hi2c->XferOptions   = I2C_NO_OPTION_FRAME;
 8005a92:	687b      	ldr	r3, [r7, #4]
 8005a94:	4a0a      	ldr	r2, [pc, #40]	; (8005ac0 <I2C_ITError+0x260>)
 8005a96:	62da      	str	r2, [r3, #44]	; 0x2c
    hi2c->PreviousState = I2C_STATE_NONE;
 8005a98:	687b      	ldr	r3, [r7, #4]
 8005a9a:	2200      	movs	r2, #0
 8005a9c:	631a      	str	r2, [r3, #48]	; 0x30
    hi2c->State         = HAL_I2C_STATE_READY;
 8005a9e:	687b      	ldr	r3, [r7, #4]
 8005aa0:	2220      	movs	r2, #32
 8005aa2:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005aa6:	687b      	ldr	r3, [r7, #4]
 8005aa8:	2200      	movs	r2, #0
 8005aaa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* Call the Listen Complete callback, to inform upper layer of the end of Listen usecase */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->ListenCpltCallback(hi2c);
#else
    HAL_I2C_ListenCpltCallback(hi2c);
 8005aae:	6878      	ldr	r0, [r7, #4]
 8005ab0:	f7fe fe92 	bl	80047d8 <HAL_I2C_ListenCpltCallback>
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005ab4:	bf00      	nop
 8005ab6:	3710      	adds	r7, #16
 8005ab8:	46bd      	mov	sp, r7
 8005aba:	bd80      	pop	{r7, pc}
 8005abc:	08005ac5 	.word	0x08005ac5
 8005ac0:	ffff0000 	.word	0xffff0000

08005ac4 <I2C_DMAAbort>:
  *        (To be called at end of DMA Abort procedure).
  * @param hdma DMA handle.
  * @retval None
  */
static void I2C_DMAAbort(DMA_HandleTypeDef *hdma)
{
 8005ac4:	b580      	push	{r7, lr}
 8005ac6:	b086      	sub	sp, #24
 8005ac8:	af00      	add	r7, sp, #0
 8005aca:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005acc:	2300      	movs	r3, #0
 8005ace:	60fb      	str	r3, [r7, #12]
  I2C_HandleTypeDef *hi2c = (I2C_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent; /* Derogation MISRAC2012-Rule-11.5 */
 8005ad0:	687b      	ldr	r3, [r7, #4]
 8005ad2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005ad4:	617b      	str	r3, [r7, #20]

  /* Declaration of temporary variable to prevent undefined behavior of volatile usage */
  HAL_I2C_StateTypeDef CurrentState = hi2c->State;
 8005ad6:	697b      	ldr	r3, [r7, #20]
 8005ad8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005adc:	74fb      	strb	r3, [r7, #19]

  /* During abort treatment, check that there is no pending STOP request */
  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_FLAG * (SystemCoreClock / 25U / 1000U);
 8005ade:	4b4b      	ldr	r3, [pc, #300]	; (8005c0c <I2C_DMAAbort+0x148>)
 8005ae0:	681b      	ldr	r3, [r3, #0]
 8005ae2:	08db      	lsrs	r3, r3, #3
 8005ae4:	4a4a      	ldr	r2, [pc, #296]	; (8005c10 <I2C_DMAAbort+0x14c>)
 8005ae6:	fba2 2303 	umull	r2, r3, r2, r3
 8005aea:	0a1a      	lsrs	r2, r3, #8
 8005aec:	4613      	mov	r3, r2
 8005aee:	009b      	lsls	r3, r3, #2
 8005af0:	4413      	add	r3, r2
 8005af2:	00da      	lsls	r2, r3, #3
 8005af4:	1ad3      	subs	r3, r2, r3
 8005af6:	60fb      	str	r3, [r7, #12]
  do
  {
    if (count == 0U)
 8005af8:	68fb      	ldr	r3, [r7, #12]
 8005afa:	2b00      	cmp	r3, #0
 8005afc:	d106      	bne.n	8005b0c <I2C_DMAAbort+0x48>
    {
      hi2c->ErrorCode |= HAL_I2C_ERROR_TIMEOUT;
 8005afe:	697b      	ldr	r3, [r7, #20]
 8005b00:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005b02:	f043 0220 	orr.w	r2, r3, #32
 8005b06:	697b      	ldr	r3, [r7, #20]
 8005b08:	641a      	str	r2, [r3, #64]	; 0x40
      break;
 8005b0a:	e00a      	b.n	8005b22 <I2C_DMAAbort+0x5e>
    }
    count--;
 8005b0c:	68fb      	ldr	r3, [r7, #12]
 8005b0e:	3b01      	subs	r3, #1
 8005b10:	60fb      	str	r3, [r7, #12]
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005b12:	697b      	ldr	r3, [r7, #20]
 8005b14:	681b      	ldr	r3, [r3, #0]
 8005b16:	681b      	ldr	r3, [r3, #0]
 8005b18:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005b1c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005b20:	d0ea      	beq.n	8005af8 <I2C_DMAAbort+0x34>

  /* Clear Complete callback */
  if (hi2c->hdmatx != NULL)
 8005b22:	697b      	ldr	r3, [r7, #20]
 8005b24:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b26:	2b00      	cmp	r3, #0
 8005b28:	d003      	beq.n	8005b32 <I2C_DMAAbort+0x6e>
  {
    hi2c->hdmatx->XferCpltCallback = NULL;
 8005b2a:	697b      	ldr	r3, [r7, #20]
 8005b2c:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b2e:	2200      	movs	r2, #0
 8005b30:	63da      	str	r2, [r3, #60]	; 0x3c
  }
  if (hi2c->hdmarx != NULL)
 8005b32:	697b      	ldr	r3, [r7, #20]
 8005b34:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b36:	2b00      	cmp	r3, #0
 8005b38:	d003      	beq.n	8005b42 <I2C_DMAAbort+0x7e>
  {
    hi2c->hdmarx->XferCpltCallback = NULL;
 8005b3a:	697b      	ldr	r3, [r7, #20]
 8005b3c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b3e:	2200      	movs	r2, #0
 8005b40:	63da      	str	r2, [r3, #60]	; 0x3c
  }

  /* Disable Acknowledge */
  CLEAR_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005b42:	697b      	ldr	r3, [r7, #20]
 8005b44:	681b      	ldr	r3, [r3, #0]
 8005b46:	681a      	ldr	r2, [r3, #0]
 8005b48:	697b      	ldr	r3, [r7, #20]
 8005b4a:	681b      	ldr	r3, [r3, #0]
 8005b4c:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8005b50:	601a      	str	r2, [r3, #0]

  hi2c->XferCount = 0U;
 8005b52:	697b      	ldr	r3, [r7, #20]
 8005b54:	2200      	movs	r2, #0
 8005b56:	855a      	strh	r2, [r3, #42]	; 0x2a

  /* Reset XferAbortCallback */
  if (hi2c->hdmatx != NULL)
 8005b58:	697b      	ldr	r3, [r7, #20]
 8005b5a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b5c:	2b00      	cmp	r3, #0
 8005b5e:	d003      	beq.n	8005b68 <I2C_DMAAbort+0xa4>
  {
    hi2c->hdmatx->XferAbortCallback = NULL;
 8005b60:	697b      	ldr	r3, [r7, #20]
 8005b62:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8005b64:	2200      	movs	r2, #0
 8005b66:	651a      	str	r2, [r3, #80]	; 0x50
  }
  if (hi2c->hdmarx != NULL)
 8005b68:	697b      	ldr	r3, [r7, #20]
 8005b6a:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b6c:	2b00      	cmp	r3, #0
 8005b6e:	d003      	beq.n	8005b78 <I2C_DMAAbort+0xb4>
  {
    hi2c->hdmarx->XferAbortCallback = NULL;
 8005b70:	697b      	ldr	r3, [r7, #20]
 8005b72:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8005b74:	2200      	movs	r2, #0
 8005b76:	651a      	str	r2, [r3, #80]	; 0x50
  }

  /* Disable I2C peripheral to prevent dummy data in buffer */
  __HAL_I2C_DISABLE(hi2c);
 8005b78:	697b      	ldr	r3, [r7, #20]
 8005b7a:	681b      	ldr	r3, [r3, #0]
 8005b7c:	681a      	ldr	r2, [r3, #0]
 8005b7e:	697b      	ldr	r3, [r7, #20]
 8005b80:	681b      	ldr	r3, [r3, #0]
 8005b82:	f022 0201 	bic.w	r2, r2, #1
 8005b86:	601a      	str	r2, [r3, #0]

  /* Check if come from abort from user */
  if (hi2c->State == HAL_I2C_STATE_ABORT)
 8005b88:	697b      	ldr	r3, [r7, #20]
 8005b8a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8005b8e:	b2db      	uxtb	r3, r3
 8005b90:	2b60      	cmp	r3, #96	; 0x60
 8005b92:	d10e      	bne.n	8005bb2 <I2C_DMAAbort+0xee>
  {
    hi2c->State         = HAL_I2C_STATE_READY;
 8005b94:	697b      	ldr	r3, [r7, #20]
 8005b96:	2220      	movs	r2, #32
 8005b98:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
    hi2c->Mode          = HAL_I2C_MODE_NONE;
 8005b9c:	697b      	ldr	r3, [r7, #20]
 8005b9e:	2200      	movs	r2, #0
 8005ba0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    hi2c->ErrorCode     = HAL_I2C_ERROR_NONE;
 8005ba4:	697b      	ldr	r3, [r7, #20]
 8005ba6:	2200      	movs	r2, #0
 8005ba8:	641a      	str	r2, [r3, #64]	; 0x40

    /* Call the corresponding callback to inform upper layer of End of Transfer */
#if (USE_HAL_I2C_REGISTER_CALLBACKS == 1)
    hi2c->AbortCpltCallback(hi2c);
#else
    HAL_I2C_AbortCpltCallback(hi2c);
 8005baa:	6978      	ldr	r0, [r7, #20]
 8005bac:	f7fe fe3c 	bl	8004828 <HAL_I2C_AbortCpltCallback>
    hi2c->ErrorCallback(hi2c);
#else
    HAL_I2C_ErrorCallback(hi2c);
#endif /* USE_HAL_I2C_REGISTER_CALLBACKS */
  }
}
 8005bb0:	e027      	b.n	8005c02 <I2C_DMAAbort+0x13e>
    if (((uint32_t)CurrentState & (uint32_t)HAL_I2C_STATE_LISTEN) == (uint32_t)HAL_I2C_STATE_LISTEN)
 8005bb2:	7cfb      	ldrb	r3, [r7, #19]
 8005bb4:	f003 0328 	and.w	r3, r3, #40	; 0x28
 8005bb8:	2b28      	cmp	r3, #40	; 0x28
 8005bba:	d117      	bne.n	8005bec <I2C_DMAAbort+0x128>
      __HAL_I2C_ENABLE(hi2c);
 8005bbc:	697b      	ldr	r3, [r7, #20]
 8005bbe:	681b      	ldr	r3, [r3, #0]
 8005bc0:	681a      	ldr	r2, [r3, #0]
 8005bc2:	697b      	ldr	r3, [r7, #20]
 8005bc4:	681b      	ldr	r3, [r3, #0]
 8005bc6:	f042 0201 	orr.w	r2, r2, #1
 8005bca:	601a      	str	r2, [r3, #0]
      SET_BIT(hi2c->Instance->CR1, I2C_CR1_ACK);
 8005bcc:	697b      	ldr	r3, [r7, #20]
 8005bce:	681b      	ldr	r3, [r3, #0]
 8005bd0:	681a      	ldr	r2, [r3, #0]
 8005bd2:	697b      	ldr	r3, [r7, #20]
 8005bd4:	681b      	ldr	r3, [r3, #0]
 8005bd6:	f442 6280 	orr.w	r2, r2, #1024	; 0x400
 8005bda:	601a      	str	r2, [r3, #0]
      hi2c->PreviousState = I2C_STATE_NONE;
 8005bdc:	697b      	ldr	r3, [r7, #20]
 8005bde:	2200      	movs	r2, #0
 8005be0:	631a      	str	r2, [r3, #48]	; 0x30
      hi2c->State = HAL_I2C_STATE_LISTEN;
 8005be2:	697b      	ldr	r3, [r7, #20]
 8005be4:	2228      	movs	r2, #40	; 0x28
 8005be6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8005bea:	e007      	b.n	8005bfc <I2C_DMAAbort+0x138>
      hi2c->State = HAL_I2C_STATE_READY;
 8005bec:	697b      	ldr	r3, [r7, #20]
 8005bee:	2220      	movs	r2, #32
 8005bf0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
      hi2c->Mode = HAL_I2C_MODE_NONE;
 8005bf4:	697b      	ldr	r3, [r7, #20]
 8005bf6:	2200      	movs	r2, #0
 8005bf8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
    HAL_I2C_ErrorCallback(hi2c);
 8005bfc:	6978      	ldr	r0, [r7, #20]
 8005bfe:	f7fe fe09 	bl	8004814 <HAL_I2C_ErrorCallback>
}
 8005c02:	bf00      	nop
 8005c04:	3718      	adds	r7, #24
 8005c06:	46bd      	mov	sp, r7
 8005c08:	bd80      	pop	{r7, pc}
 8005c0a:	bf00      	nop
 8005c0c:	20000034 	.word	0x20000034
 8005c10:	14f8b589 	.word	0x14f8b589

08005c14 <I2C_WaitOnSTOPRequestThroughIT>:
  * @param  hi2c Pointer to a I2C_HandleTypeDef structure that contains
  *                the configuration information for the specified I2C.
  * @retval HAL status
  */
static HAL_StatusTypeDef I2C_WaitOnSTOPRequestThroughIT(I2C_HandleTypeDef *hi2c)
{
 8005c14:	b480      	push	{r7}
 8005c16:	b085      	sub	sp, #20
 8005c18:	af00      	add	r7, sp, #0
 8005c1a:	6078      	str	r0, [r7, #4]
  __IO uint32_t count = 0U;
 8005c1c:	2300      	movs	r3, #0
 8005c1e:	60fb      	str	r3, [r7, #12]

  /* Wait until STOP flag is reset */
  count = I2C_TIMEOUT_STOP_FLAG * (SystemCoreClock / 25U / 1000U);
 8005c20:	4b13      	ldr	r3, [pc, #76]	; (8005c70 <I2C_WaitOnSTOPRequestThroughIT+0x5c>)
 8005c22:	681b      	ldr	r3, [r3, #0]
 8005c24:	08db      	lsrs	r3, r3, #3
 8005c26:	4a13      	ldr	r2, [pc, #76]	; (8005c74 <I2C_WaitOnSTOPRequestThroughIT+0x60>)
 8005c28:	fba2 2303 	umull	r2, r3, r2, r3
 8005c2c:	0a1a      	lsrs	r2, r3, #8
 8005c2e:	4613      	mov	r3, r2
 8005c30:	009b      	lsls	r3, r3, #2
 8005c32:	4413      	add	r3, r2
 8005c34:	60fb      	str	r3, [r7, #12]
  do
  {
    count--;
 8005c36:	68fb      	ldr	r3, [r7, #12]
 8005c38:	3b01      	subs	r3, #1
 8005c3a:	60fb      	str	r3, [r7, #12]
    if (count == 0U)
 8005c3c:	68fb      	ldr	r3, [r7, #12]
 8005c3e:	2b00      	cmp	r3, #0
 8005c40:	d107      	bne.n	8005c52 <I2C_WaitOnSTOPRequestThroughIT+0x3e>
    {
      hi2c->ErrorCode           |= HAL_I2C_ERROR_TIMEOUT;
 8005c42:	687b      	ldr	r3, [r7, #4]
 8005c44:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005c46:	f043 0220 	orr.w	r2, r3, #32
 8005c4a:	687b      	ldr	r3, [r7, #4]
 8005c4c:	641a      	str	r2, [r3, #64]	; 0x40

      return HAL_ERROR;
 8005c4e:	2301      	movs	r3, #1
 8005c50:	e008      	b.n	8005c64 <I2C_WaitOnSTOPRequestThroughIT+0x50>
    }
  }
  while (READ_BIT(hi2c->Instance->CR1, I2C_CR1_STOP) == I2C_CR1_STOP);
 8005c52:	687b      	ldr	r3, [r7, #4]
 8005c54:	681b      	ldr	r3, [r3, #0]
 8005c56:	681b      	ldr	r3, [r3, #0]
 8005c58:	f403 7300 	and.w	r3, r3, #512	; 0x200
 8005c5c:	f5b3 7f00 	cmp.w	r3, #512	; 0x200
 8005c60:	d0e9      	beq.n	8005c36 <I2C_WaitOnSTOPRequestThroughIT+0x22>

  return HAL_OK;
 8005c62:	2300      	movs	r3, #0
}
 8005c64:	4618      	mov	r0, r3
 8005c66:	3714      	adds	r7, #20
 8005c68:	46bd      	mov	sp, r7
 8005c6a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005c6e:	4770      	bx	lr
 8005c70:	20000034 	.word	0x20000034
 8005c74:	14f8b589 	.word	0x14f8b589

08005c78 <I2C_ConvertOtherXferOptions>:
  * @brief  Convert I2Cx OTHER_xxx XferOptions to functional XferOptions.
  * @param  hi2c I2C handle.
  * @retval None
  */
static void I2C_ConvertOtherXferOptions(I2C_HandleTypeDef *hi2c)
{
 8005c78:	b480      	push	{r7}
 8005c7a:	b083      	sub	sp, #12
 8005c7c:	af00      	add	r7, sp, #0
 8005c7e:	6078      	str	r0, [r7, #4]
  /* if user set XferOptions to I2C_OTHER_FRAME            */
  /* it request implicitly to generate a restart condition */
  /* set XferOptions to I2C_FIRST_FRAME                    */
  if (hi2c->XferOptions == I2C_OTHER_FRAME)
 8005c80:	687b      	ldr	r3, [r7, #4]
 8005c82:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c84:	f5b3 0f2a 	cmp.w	r3, #11141120	; 0xaa0000
 8005c88:	d103      	bne.n	8005c92 <I2C_ConvertOtherXferOptions+0x1a>
  {
    hi2c->XferOptions = I2C_FIRST_FRAME;
 8005c8a:	687b      	ldr	r3, [r7, #4]
 8005c8c:	2201      	movs	r2, #1
 8005c8e:	62da      	str	r2, [r3, #44]	; 0x2c
  }
  else
  {
    /* Nothing to do */
  }
}
 8005c90:	e007      	b.n	8005ca2 <I2C_ConvertOtherXferOptions+0x2a>
  else if (hi2c->XferOptions == I2C_OTHER_AND_LAST_FRAME)
 8005c92:	687b      	ldr	r3, [r7, #4]
 8005c94:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8005c96:	f1b3 4f2a 	cmp.w	r3, #2852126720	; 0xaa000000
 8005c9a:	d102      	bne.n	8005ca2 <I2C_ConvertOtherXferOptions+0x2a>
    hi2c->XferOptions = I2C_FIRST_AND_LAST_FRAME;
 8005c9c:	687b      	ldr	r3, [r7, #4]
 8005c9e:	2208      	movs	r2, #8
 8005ca0:	62da      	str	r2, [r3, #44]	; 0x2c
}
 8005ca2:	bf00      	nop
 8005ca4:	370c      	adds	r7, #12
 8005ca6:	46bd      	mov	sp, r7
 8005ca8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8005cac:	4770      	bx	lr
	...

08005cb0 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8005cb0:	b580      	push	{r7, lr}
 8005cb2:	b086      	sub	sp, #24
 8005cb4:	af00      	add	r7, sp, #0
 8005cb6:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8005cb8:	687b      	ldr	r3, [r7, #4]
 8005cba:	2b00      	cmp	r3, #0
 8005cbc:	d101      	bne.n	8005cc2 <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8005cbe:	2301      	movs	r3, #1
 8005cc0:	e264      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 8005cc2:	687b      	ldr	r3, [r7, #4]
 8005cc4:	681b      	ldr	r3, [r3, #0]
 8005cc6:	f003 0301 	and.w	r3, r3, #1
 8005cca:	2b00      	cmp	r3, #0
 8005ccc:	d075      	beq.n	8005dba <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005cce:	4ba3      	ldr	r3, [pc, #652]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005cd0:	689b      	ldr	r3, [r3, #8]
 8005cd2:	f003 030c 	and.w	r3, r3, #12
 8005cd6:	2b04      	cmp	r3, #4
 8005cd8:	d00c      	beq.n	8005cf4 <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005cda:	4ba0      	ldr	r3, [pc, #640]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005cdc:	689b      	ldr	r3, [r3, #8]
 8005cde:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8005ce2:	2b08      	cmp	r3, #8
 8005ce4:	d112      	bne.n	8005d0c <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8005ce6:	4b9d      	ldr	r3, [pc, #628]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005ce8:	685b      	ldr	r3, [r3, #4]
 8005cea:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005cee:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 8005cf2:	d10b      	bne.n	8005d0c <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005cf4:	4b99      	ldr	r3, [pc, #612]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005cf6:	681b      	ldr	r3, [r3, #0]
 8005cf8:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005cfc:	2b00      	cmp	r3, #0
 8005cfe:	d05b      	beq.n	8005db8 <HAL_RCC_OscConfig+0x108>
 8005d00:	687b      	ldr	r3, [r7, #4]
 8005d02:	685b      	ldr	r3, [r3, #4]
 8005d04:	2b00      	cmp	r3, #0
 8005d06:	d157      	bne.n	8005db8 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 8005d08:	2301      	movs	r3, #1
 8005d0a:	e23f      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 8005d0c:	687b      	ldr	r3, [r7, #4]
 8005d0e:	685b      	ldr	r3, [r3, #4]
 8005d10:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 8005d14:	d106      	bne.n	8005d24 <HAL_RCC_OscConfig+0x74>
 8005d16:	4b91      	ldr	r3, [pc, #580]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d18:	681b      	ldr	r3, [r3, #0]
 8005d1a:	4a90      	ldr	r2, [pc, #576]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d1c:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d20:	6013      	str	r3, [r2, #0]
 8005d22:	e01d      	b.n	8005d60 <HAL_RCC_OscConfig+0xb0>
 8005d24:	687b      	ldr	r3, [r7, #4]
 8005d26:	685b      	ldr	r3, [r3, #4]
 8005d28:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 8005d2c:	d10c      	bne.n	8005d48 <HAL_RCC_OscConfig+0x98>
 8005d2e:	4b8b      	ldr	r3, [pc, #556]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d30:	681b      	ldr	r3, [r3, #0]
 8005d32:	4a8a      	ldr	r2, [pc, #552]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d34:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 8005d38:	6013      	str	r3, [r2, #0]
 8005d3a:	4b88      	ldr	r3, [pc, #544]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d3c:	681b      	ldr	r3, [r3, #0]
 8005d3e:	4a87      	ldr	r2, [pc, #540]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d40:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 8005d44:	6013      	str	r3, [r2, #0]
 8005d46:	e00b      	b.n	8005d60 <HAL_RCC_OscConfig+0xb0>
 8005d48:	4b84      	ldr	r3, [pc, #528]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d4a:	681b      	ldr	r3, [r3, #0]
 8005d4c:	4a83      	ldr	r2, [pc, #524]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d4e:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 8005d52:	6013      	str	r3, [r2, #0]
 8005d54:	4b81      	ldr	r3, [pc, #516]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d56:	681b      	ldr	r3, [r3, #0]
 8005d58:	4a80      	ldr	r2, [pc, #512]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d5a:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8005d5e:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8005d60:	687b      	ldr	r3, [r7, #4]
 8005d62:	685b      	ldr	r3, [r3, #4]
 8005d64:	2b00      	cmp	r3, #0
 8005d66:	d013      	beq.n	8005d90 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d68:	f7fd f9ec 	bl	8003144 <HAL_GetTick>
 8005d6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d6e:	e008      	b.n	8005d82 <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d70:	f7fd f9e8 	bl	8003144 <HAL_GetTick>
 8005d74:	4602      	mov	r2, r0
 8005d76:	693b      	ldr	r3, [r7, #16]
 8005d78:	1ad3      	subs	r3, r2, r3
 8005d7a:	2b64      	cmp	r3, #100	; 0x64
 8005d7c:	d901      	bls.n	8005d82 <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8005d7e:	2303      	movs	r3, #3
 8005d80:	e204      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8005d82:	4b76      	ldr	r3, [pc, #472]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005d84:	681b      	ldr	r3, [r3, #0]
 8005d86:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005d8a:	2b00      	cmp	r3, #0
 8005d8c:	d0f0      	beq.n	8005d70 <HAL_RCC_OscConfig+0xc0>
 8005d8e:	e014      	b.n	8005dba <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8005d90:	f7fd f9d8 	bl	8003144 <HAL_GetTick>
 8005d94:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005d96:	e008      	b.n	8005daa <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8005d98:	f7fd f9d4 	bl	8003144 <HAL_GetTick>
 8005d9c:	4602      	mov	r2, r0
 8005d9e:	693b      	ldr	r3, [r7, #16]
 8005da0:	1ad3      	subs	r3, r2, r3
 8005da2:	2b64      	cmp	r3, #100	; 0x64
 8005da4:	d901      	bls.n	8005daa <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 8005da6:	2303      	movs	r3, #3
 8005da8:	e1f0      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8005daa:	4b6c      	ldr	r3, [pc, #432]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005dac:	681b      	ldr	r3, [r3, #0]
 8005dae:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8005db2:	2b00      	cmp	r3, #0
 8005db4:	d1f0      	bne.n	8005d98 <HAL_RCC_OscConfig+0xe8>
 8005db6:	e000      	b.n	8005dba <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8005db8:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8005dba:	687b      	ldr	r3, [r7, #4]
 8005dbc:	681b      	ldr	r3, [r3, #0]
 8005dbe:	f003 0302 	and.w	r3, r3, #2
 8005dc2:	2b00      	cmp	r3, #0
 8005dc4:	d063      	beq.n	8005e8e <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dc6:	4b65      	ldr	r3, [pc, #404]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005dc8:	689b      	ldr	r3, [r3, #8]
 8005dca:	f003 030c 	and.w	r3, r3, #12
 8005dce:	2b00      	cmp	r3, #0
 8005dd0:	d00b      	beq.n	8005dea <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dd2:	4b62      	ldr	r3, [pc, #392]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005dd4:	689b      	ldr	r3, [r3, #8]
 8005dd6:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8005dda:	2b08      	cmp	r3, #8
 8005ddc:	d11c      	bne.n	8005e18 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8005dde:	4b5f      	ldr	r3, [pc, #380]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005de0:	685b      	ldr	r3, [r3, #4]
 8005de2:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8005de6:	2b00      	cmp	r3, #0
 8005de8:	d116      	bne.n	8005e18 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005dea:	4b5c      	ldr	r3, [pc, #368]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005dec:	681b      	ldr	r3, [r3, #0]
 8005dee:	f003 0302 	and.w	r3, r3, #2
 8005df2:	2b00      	cmp	r3, #0
 8005df4:	d005      	beq.n	8005e02 <HAL_RCC_OscConfig+0x152>
 8005df6:	687b      	ldr	r3, [r7, #4]
 8005df8:	68db      	ldr	r3, [r3, #12]
 8005dfa:	2b01      	cmp	r3, #1
 8005dfc:	d001      	beq.n	8005e02 <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 8005dfe:	2301      	movs	r3, #1
 8005e00:	e1c4      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e02:	4b56      	ldr	r3, [pc, #344]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005e04:	681b      	ldr	r3, [r3, #0]
 8005e06:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e0a:	687b      	ldr	r3, [r7, #4]
 8005e0c:	691b      	ldr	r3, [r3, #16]
 8005e0e:	00db      	lsls	r3, r3, #3
 8005e10:	4952      	ldr	r1, [pc, #328]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005e12:	4313      	orrs	r3, r2
 8005e14:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8005e16:	e03a      	b.n	8005e8e <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 8005e18:	687b      	ldr	r3, [r7, #4]
 8005e1a:	68db      	ldr	r3, [r3, #12]
 8005e1c:	2b00      	cmp	r3, #0
 8005e1e:	d020      	beq.n	8005e62 <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 8005e20:	4b4f      	ldr	r3, [pc, #316]	; (8005f60 <HAL_RCC_OscConfig+0x2b0>)
 8005e22:	2201      	movs	r2, #1
 8005e24:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e26:	f7fd f98d 	bl	8003144 <HAL_GetTick>
 8005e2a:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e2c:	e008      	b.n	8005e40 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e2e:	f7fd f989 	bl	8003144 <HAL_GetTick>
 8005e32:	4602      	mov	r2, r0
 8005e34:	693b      	ldr	r3, [r7, #16]
 8005e36:	1ad3      	subs	r3, r2, r3
 8005e38:	2b02      	cmp	r3, #2
 8005e3a:	d901      	bls.n	8005e40 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 8005e3c:	2303      	movs	r3, #3
 8005e3e:	e1a5      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8005e40:	4b46      	ldr	r3, [pc, #280]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005e42:	681b      	ldr	r3, [r3, #0]
 8005e44:	f003 0302 	and.w	r3, r3, #2
 8005e48:	2b00      	cmp	r3, #0
 8005e4a:	d0f0      	beq.n	8005e2e <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 8005e4c:	4b43      	ldr	r3, [pc, #268]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005e4e:	681b      	ldr	r3, [r3, #0]
 8005e50:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 8005e54:	687b      	ldr	r3, [r7, #4]
 8005e56:	691b      	ldr	r3, [r3, #16]
 8005e58:	00db      	lsls	r3, r3, #3
 8005e5a:	4940      	ldr	r1, [pc, #256]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005e5c:	4313      	orrs	r3, r2
 8005e5e:	600b      	str	r3, [r1, #0]
 8005e60:	e015      	b.n	8005e8e <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 8005e62:	4b3f      	ldr	r3, [pc, #252]	; (8005f60 <HAL_RCC_OscConfig+0x2b0>)
 8005e64:	2200      	movs	r2, #0
 8005e66:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8005e68:	f7fd f96c 	bl	8003144 <HAL_GetTick>
 8005e6c:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e6e:	e008      	b.n	8005e82 <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8005e70:	f7fd f968 	bl	8003144 <HAL_GetTick>
 8005e74:	4602      	mov	r2, r0
 8005e76:	693b      	ldr	r3, [r7, #16]
 8005e78:	1ad3      	subs	r3, r2, r3
 8005e7a:	2b02      	cmp	r3, #2
 8005e7c:	d901      	bls.n	8005e82 <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8005e7e:	2303      	movs	r3, #3
 8005e80:	e184      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8005e82:	4b36      	ldr	r3, [pc, #216]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005e84:	681b      	ldr	r3, [r3, #0]
 8005e86:	f003 0302 	and.w	r3, r3, #2
 8005e8a:	2b00      	cmp	r3, #0
 8005e8c:	d1f0      	bne.n	8005e70 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8005e8e:	687b      	ldr	r3, [r7, #4]
 8005e90:	681b      	ldr	r3, [r3, #0]
 8005e92:	f003 0308 	and.w	r3, r3, #8
 8005e96:	2b00      	cmp	r3, #0
 8005e98:	d030      	beq.n	8005efc <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8005e9a:	687b      	ldr	r3, [r7, #4]
 8005e9c:	695b      	ldr	r3, [r3, #20]
 8005e9e:	2b00      	cmp	r3, #0
 8005ea0:	d016      	beq.n	8005ed0 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 8005ea2:	4b30      	ldr	r3, [pc, #192]	; (8005f64 <HAL_RCC_OscConfig+0x2b4>)
 8005ea4:	2201      	movs	r2, #1
 8005ea6:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005ea8:	f7fd f94c 	bl	8003144 <HAL_GetTick>
 8005eac:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005eae:	e008      	b.n	8005ec2 <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005eb0:	f7fd f948 	bl	8003144 <HAL_GetTick>
 8005eb4:	4602      	mov	r2, r0
 8005eb6:	693b      	ldr	r3, [r7, #16]
 8005eb8:	1ad3      	subs	r3, r2, r3
 8005eba:	2b02      	cmp	r3, #2
 8005ebc:	d901      	bls.n	8005ec2 <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8005ebe:	2303      	movs	r3, #3
 8005ec0:	e164      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8005ec2:	4b26      	ldr	r3, [pc, #152]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005ec4:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ec6:	f003 0302 	and.w	r3, r3, #2
 8005eca:	2b00      	cmp	r3, #0
 8005ecc:	d0f0      	beq.n	8005eb0 <HAL_RCC_OscConfig+0x200>
 8005ece:	e015      	b.n	8005efc <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8005ed0:	4b24      	ldr	r3, [pc, #144]	; (8005f64 <HAL_RCC_OscConfig+0x2b4>)
 8005ed2:	2200      	movs	r2, #0
 8005ed4:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 8005ed6:	f7fd f935 	bl	8003144 <HAL_GetTick>
 8005eda:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005edc:	e008      	b.n	8005ef0 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8005ede:	f7fd f931 	bl	8003144 <HAL_GetTick>
 8005ee2:	4602      	mov	r2, r0
 8005ee4:	693b      	ldr	r3, [r7, #16]
 8005ee6:	1ad3      	subs	r3, r2, r3
 8005ee8:	2b02      	cmp	r3, #2
 8005eea:	d901      	bls.n	8005ef0 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8005eec:	2303      	movs	r3, #3
 8005eee:	e14d      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8005ef0:	4b1a      	ldr	r3, [pc, #104]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005ef2:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 8005ef4:	f003 0302 	and.w	r3, r3, #2
 8005ef8:	2b00      	cmp	r3, #0
 8005efa:	d1f0      	bne.n	8005ede <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 8005efc:	687b      	ldr	r3, [r7, #4]
 8005efe:	681b      	ldr	r3, [r3, #0]
 8005f00:	f003 0304 	and.w	r3, r3, #4
 8005f04:	2b00      	cmp	r3, #0
 8005f06:	f000 80a0 	beq.w	800604a <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 8005f0a:	2300      	movs	r3, #0
 8005f0c:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 8005f0e:	4b13      	ldr	r3, [pc, #76]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005f10:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f12:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f16:	2b00      	cmp	r3, #0
 8005f18:	d10f      	bne.n	8005f3a <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 8005f1a:	2300      	movs	r3, #0
 8005f1c:	60bb      	str	r3, [r7, #8]
 8005f1e:	4b0f      	ldr	r3, [pc, #60]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005f20:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f22:	4a0e      	ldr	r2, [pc, #56]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005f24:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8005f28:	6413      	str	r3, [r2, #64]	; 0x40
 8005f2a:	4b0c      	ldr	r3, [pc, #48]	; (8005f5c <HAL_RCC_OscConfig+0x2ac>)
 8005f2c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8005f2e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8005f32:	60bb      	str	r3, [r7, #8]
 8005f34:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 8005f36:	2301      	movs	r3, #1
 8005f38:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f3a:	4b0b      	ldr	r3, [pc, #44]	; (8005f68 <HAL_RCC_OscConfig+0x2b8>)
 8005f3c:	681b      	ldr	r3, [r3, #0]
 8005f3e:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f42:	2b00      	cmp	r3, #0
 8005f44:	d121      	bne.n	8005f8a <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 8005f46:	4b08      	ldr	r3, [pc, #32]	; (8005f68 <HAL_RCC_OscConfig+0x2b8>)
 8005f48:	681b      	ldr	r3, [r3, #0]
 8005f4a:	4a07      	ldr	r2, [pc, #28]	; (8005f68 <HAL_RCC_OscConfig+0x2b8>)
 8005f4c:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 8005f50:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 8005f52:	f7fd f8f7 	bl	8003144 <HAL_GetTick>
 8005f56:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f58:	e011      	b.n	8005f7e <HAL_RCC_OscConfig+0x2ce>
 8005f5a:	bf00      	nop
 8005f5c:	40023800 	.word	0x40023800
 8005f60:	42470000 	.word	0x42470000
 8005f64:	42470e80 	.word	0x42470e80
 8005f68:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8005f6c:	f7fd f8ea 	bl	8003144 <HAL_GetTick>
 8005f70:	4602      	mov	r2, r0
 8005f72:	693b      	ldr	r3, [r7, #16]
 8005f74:	1ad3      	subs	r3, r2, r3
 8005f76:	2b02      	cmp	r3, #2
 8005f78:	d901      	bls.n	8005f7e <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8005f7a:	2303      	movs	r3, #3
 8005f7c:	e106      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8005f7e:	4b85      	ldr	r3, [pc, #532]	; (8006194 <HAL_RCC_OscConfig+0x4e4>)
 8005f80:	681b      	ldr	r3, [r3, #0]
 8005f82:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8005f86:	2b00      	cmp	r3, #0
 8005f88:	d0f0      	beq.n	8005f6c <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8005f8a:	687b      	ldr	r3, [r7, #4]
 8005f8c:	689b      	ldr	r3, [r3, #8]
 8005f8e:	2b01      	cmp	r3, #1
 8005f90:	d106      	bne.n	8005fa0 <HAL_RCC_OscConfig+0x2f0>
 8005f92:	4b81      	ldr	r3, [pc, #516]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005f94:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005f96:	4a80      	ldr	r2, [pc, #512]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005f98:	f043 0301 	orr.w	r3, r3, #1
 8005f9c:	6713      	str	r3, [r2, #112]	; 0x70
 8005f9e:	e01c      	b.n	8005fda <HAL_RCC_OscConfig+0x32a>
 8005fa0:	687b      	ldr	r3, [r7, #4]
 8005fa2:	689b      	ldr	r3, [r3, #8]
 8005fa4:	2b05      	cmp	r3, #5
 8005fa6:	d10c      	bne.n	8005fc2 <HAL_RCC_OscConfig+0x312>
 8005fa8:	4b7b      	ldr	r3, [pc, #492]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005faa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fac:	4a7a      	ldr	r2, [pc, #488]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005fae:	f043 0304 	orr.w	r3, r3, #4
 8005fb2:	6713      	str	r3, [r2, #112]	; 0x70
 8005fb4:	4b78      	ldr	r3, [pc, #480]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005fb6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fb8:	4a77      	ldr	r2, [pc, #476]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005fba:	f043 0301 	orr.w	r3, r3, #1
 8005fbe:	6713      	str	r3, [r2, #112]	; 0x70
 8005fc0:	e00b      	b.n	8005fda <HAL_RCC_OscConfig+0x32a>
 8005fc2:	4b75      	ldr	r3, [pc, #468]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005fc4:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fc6:	4a74      	ldr	r2, [pc, #464]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005fc8:	f023 0301 	bic.w	r3, r3, #1
 8005fcc:	6713      	str	r3, [r2, #112]	; 0x70
 8005fce:	4b72      	ldr	r3, [pc, #456]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005fd0:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8005fd2:	4a71      	ldr	r2, [pc, #452]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8005fd4:	f023 0304 	bic.w	r3, r3, #4
 8005fd8:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8005fda:	687b      	ldr	r3, [r7, #4]
 8005fdc:	689b      	ldr	r3, [r3, #8]
 8005fde:	2b00      	cmp	r3, #0
 8005fe0:	d015      	beq.n	800600e <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8005fe2:	f7fd f8af 	bl	8003144 <HAL_GetTick>
 8005fe6:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8005fe8:	e00a      	b.n	8006000 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8005fea:	f7fd f8ab 	bl	8003144 <HAL_GetTick>
 8005fee:	4602      	mov	r2, r0
 8005ff0:	693b      	ldr	r3, [r7, #16]
 8005ff2:	1ad3      	subs	r3, r2, r3
 8005ff4:	f241 3288 	movw	r2, #5000	; 0x1388
 8005ff8:	4293      	cmp	r3, r2
 8005ffa:	d901      	bls.n	8006000 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 8005ffc:	2303      	movs	r3, #3
 8005ffe:	e0c5      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8006000:	4b65      	ldr	r3, [pc, #404]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8006002:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006004:	f003 0302 	and.w	r3, r3, #2
 8006008:	2b00      	cmp	r3, #0
 800600a:	d0ee      	beq.n	8005fea <HAL_RCC_OscConfig+0x33a>
 800600c:	e014      	b.n	8006038 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800600e:	f7fd f899 	bl	8003144 <HAL_GetTick>
 8006012:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 8006014:	e00a      	b.n	800602c <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8006016:	f7fd f895 	bl	8003144 <HAL_GetTick>
 800601a:	4602      	mov	r2, r0
 800601c:	693b      	ldr	r3, [r7, #16]
 800601e:	1ad3      	subs	r3, r2, r3
 8006020:	f241 3288 	movw	r2, #5000	; 0x1388
 8006024:	4293      	cmp	r3, r2
 8006026:	d901      	bls.n	800602c <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 8006028:	2303      	movs	r3, #3
 800602a:	e0af      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 800602c:	4b5a      	ldr	r3, [pc, #360]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 800602e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8006030:	f003 0302 	and.w	r3, r3, #2
 8006034:	2b00      	cmp	r3, #0
 8006036:	d1ee      	bne.n	8006016 <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 8006038:	7dfb      	ldrb	r3, [r7, #23]
 800603a:	2b01      	cmp	r3, #1
 800603c:	d105      	bne.n	800604a <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 800603e:	4b56      	ldr	r3, [pc, #344]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8006040:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8006042:	4a55      	ldr	r2, [pc, #340]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8006044:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 8006048:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 800604a:	687b      	ldr	r3, [r7, #4]
 800604c:	699b      	ldr	r3, [r3, #24]
 800604e:	2b00      	cmp	r3, #0
 8006050:	f000 809b 	beq.w	800618a <HAL_RCC_OscConfig+0x4da>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 8006054:	4b50      	ldr	r3, [pc, #320]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8006056:	689b      	ldr	r3, [r3, #8]
 8006058:	f003 030c 	and.w	r3, r3, #12
 800605c:	2b08      	cmp	r3, #8
 800605e:	d05c      	beq.n	800611a <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8006060:	687b      	ldr	r3, [r7, #4]
 8006062:	699b      	ldr	r3, [r3, #24]
 8006064:	2b02      	cmp	r3, #2
 8006066:	d141      	bne.n	80060ec <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8006068:	4b4c      	ldr	r3, [pc, #304]	; (800619c <HAL_RCC_OscConfig+0x4ec>)
 800606a:	2200      	movs	r2, #0
 800606c:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800606e:	f7fd f869 	bl	8003144 <HAL_GetTick>
 8006072:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006074:	e008      	b.n	8006088 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8006076:	f7fd f865 	bl	8003144 <HAL_GetTick>
 800607a:	4602      	mov	r2, r0
 800607c:	693b      	ldr	r3, [r7, #16]
 800607e:	1ad3      	subs	r3, r2, r3
 8006080:	2b02      	cmp	r3, #2
 8006082:	d901      	bls.n	8006088 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 8006084:	2303      	movs	r3, #3
 8006086:	e081      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8006088:	4b43      	ldr	r3, [pc, #268]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 800608a:	681b      	ldr	r3, [r3, #0]
 800608c:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006090:	2b00      	cmp	r3, #0
 8006092:	d1f0      	bne.n	8006076 <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 8006094:	687b      	ldr	r3, [r7, #4]
 8006096:	69da      	ldr	r2, [r3, #28]
 8006098:	687b      	ldr	r3, [r7, #4]
 800609a:	6a1b      	ldr	r3, [r3, #32]
 800609c:	431a      	orrs	r2, r3
 800609e:	687b      	ldr	r3, [r7, #4]
 80060a0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80060a2:	019b      	lsls	r3, r3, #6
 80060a4:	431a      	orrs	r2, r3
 80060a6:	687b      	ldr	r3, [r7, #4]
 80060a8:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 80060aa:	085b      	lsrs	r3, r3, #1
 80060ac:	3b01      	subs	r3, #1
 80060ae:	041b      	lsls	r3, r3, #16
 80060b0:	431a      	orrs	r2, r3
 80060b2:	687b      	ldr	r3, [r7, #4]
 80060b4:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 80060b6:	061b      	lsls	r3, r3, #24
 80060b8:	4937      	ldr	r1, [pc, #220]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 80060ba:	4313      	orrs	r3, r2
 80060bc:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 80060be:	4b37      	ldr	r3, [pc, #220]	; (800619c <HAL_RCC_OscConfig+0x4ec>)
 80060c0:	2201      	movs	r2, #1
 80060c2:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060c4:	f7fd f83e 	bl	8003144 <HAL_GetTick>
 80060c8:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060ca:	e008      	b.n	80060de <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060cc:	f7fd f83a 	bl	8003144 <HAL_GetTick>
 80060d0:	4602      	mov	r2, r0
 80060d2:	693b      	ldr	r3, [r7, #16]
 80060d4:	1ad3      	subs	r3, r2, r3
 80060d6:	2b02      	cmp	r3, #2
 80060d8:	d901      	bls.n	80060de <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 80060da:	2303      	movs	r3, #3
 80060dc:	e056      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80060de:	4b2e      	ldr	r3, [pc, #184]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 80060e0:	681b      	ldr	r3, [r3, #0]
 80060e2:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80060e6:	2b00      	cmp	r3, #0
 80060e8:	d0f0      	beq.n	80060cc <HAL_RCC_OscConfig+0x41c>
 80060ea:	e04e      	b.n	800618a <HAL_RCC_OscConfig+0x4da>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 80060ec:	4b2b      	ldr	r3, [pc, #172]	; (800619c <HAL_RCC_OscConfig+0x4ec>)
 80060ee:	2200      	movs	r2, #0
 80060f0:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 80060f2:	f7fd f827 	bl	8003144 <HAL_GetTick>
 80060f6:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80060f8:	e008      	b.n	800610c <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80060fa:	f7fd f823 	bl	8003144 <HAL_GetTick>
 80060fe:	4602      	mov	r2, r0
 8006100:	693b      	ldr	r3, [r7, #16]
 8006102:	1ad3      	subs	r3, r2, r3
 8006104:	2b02      	cmp	r3, #2
 8006106:	d901      	bls.n	800610c <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 8006108:	2303      	movs	r3, #3
 800610a:	e03f      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800610c:	4b22      	ldr	r3, [pc, #136]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 800610e:	681b      	ldr	r3, [r3, #0]
 8006110:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006114:	2b00      	cmp	r3, #0
 8006116:	d1f0      	bne.n	80060fa <HAL_RCC_OscConfig+0x44a>
 8006118:	e037      	b.n	800618a <HAL_RCC_OscConfig+0x4da>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 800611a:	687b      	ldr	r3, [r7, #4]
 800611c:	699b      	ldr	r3, [r3, #24]
 800611e:	2b01      	cmp	r3, #1
 8006120:	d101      	bne.n	8006126 <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 8006122:	2301      	movs	r3, #1
 8006124:	e032      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 8006126:	4b1c      	ldr	r3, [pc, #112]	; (8006198 <HAL_RCC_OscConfig+0x4e8>)
 8006128:	685b      	ldr	r3, [r3, #4]
 800612a:	60fb      	str	r3, [r7, #12]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)) ||
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLR) != (RCC_OscInitStruct->PLL.PLLR << RCC_PLLCFGR_PLLR_Pos)))
#else
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800612c:	687b      	ldr	r3, [r7, #4]
 800612e:	699b      	ldr	r3, [r3, #24]
 8006130:	2b01      	cmp	r3, #1
 8006132:	d028      	beq.n	8006186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 8006134:	68fb      	ldr	r3, [r7, #12]
 8006136:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 800613a:	687b      	ldr	r3, [r7, #4]
 800613c:	69db      	ldr	r3, [r3, #28]
        if (((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF) ||
 800613e:	429a      	cmp	r2, r3
 8006140:	d121      	bne.n	8006186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 8006142:	68fb      	ldr	r3, [r7, #12]
 8006144:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 8006148:	687b      	ldr	r3, [r7, #4]
 800614a:	6a1b      	ldr	r3, [r3, #32]
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 800614c:	429a      	cmp	r2, r3
 800614e:	d11a      	bne.n	8006186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006150:	68fa      	ldr	r2, [r7, #12]
 8006152:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 8006156:	4013      	ands	r3, r2
 8006158:	687a      	ldr	r2, [r7, #4]
 800615a:	6a52      	ldr	r2, [r2, #36]	; 0x24
 800615c:	0192      	lsls	r2, r2, #6
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != (RCC_OscInitStruct->PLL.PLLM) << RCC_PLLCFGR_PLLM_Pos) ||
 800615e:	4293      	cmp	r3, r2
 8006160:	d111      	bne.n	8006186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006162:	68fb      	ldr	r3, [r7, #12]
 8006164:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8006168:	687b      	ldr	r3, [r7, #4]
 800616a:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800616c:	085b      	lsrs	r3, r3, #1
 800616e:	3b01      	subs	r3, #1
 8006170:	041b      	lsls	r3, r3, #16
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != (RCC_OscInitStruct->PLL.PLLN) << RCC_PLLCFGR_PLLN_Pos) ||
 8006172:	429a      	cmp	r2, r3
 8006174:	d107      	bne.n	8006186 <HAL_RCC_OscConfig+0x4d6>
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)))
 8006176:	68fb      	ldr	r3, [r7, #12]
 8006178:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 800617c:	687b      	ldr	r3, [r7, #4]
 800617e:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 8006180:	061b      	lsls	r3, r3, #24
            (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U)) << RCC_PLLCFGR_PLLP_Pos) ||
 8006182:	429a      	cmp	r2, r3
 8006184:	d001      	beq.n	800618a <HAL_RCC_OscConfig+0x4da>
#endif
        {
          return HAL_ERROR;
 8006186:	2301      	movs	r3, #1
 8006188:	e000      	b.n	800618c <HAL_RCC_OscConfig+0x4dc>
        }
      }
    }
  }
  return HAL_OK;
 800618a:	2300      	movs	r3, #0
}
 800618c:	4618      	mov	r0, r3
 800618e:	3718      	adds	r7, #24
 8006190:	46bd      	mov	sp, r7
 8006192:	bd80      	pop	{r7, pc}
 8006194:	40007000 	.word	0x40007000
 8006198:	40023800 	.word	0x40023800
 800619c:	42470060 	.word	0x42470060

080061a0 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 80061a0:	b580      	push	{r7, lr}
 80061a2:	b084      	sub	sp, #16
 80061a4:	af00      	add	r7, sp, #0
 80061a6:	6078      	str	r0, [r7, #4]
 80061a8:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 80061aa:	687b      	ldr	r3, [r7, #4]
 80061ac:	2b00      	cmp	r3, #0
 80061ae:	d101      	bne.n	80061b4 <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 80061b0:	2301      	movs	r3, #1
 80061b2:	e0cc      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 80061b4:	4b68      	ldr	r3, [pc, #416]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061b6:	681b      	ldr	r3, [r3, #0]
 80061b8:	f003 0307 	and.w	r3, r3, #7
 80061bc:	683a      	ldr	r2, [r7, #0]
 80061be:	429a      	cmp	r2, r3
 80061c0:	d90c      	bls.n	80061dc <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80061c2:	4b65      	ldr	r3, [pc, #404]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061c4:	683a      	ldr	r2, [r7, #0]
 80061c6:	b2d2      	uxtb	r2, r2
 80061c8:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80061ca:	4b63      	ldr	r3, [pc, #396]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80061cc:	681b      	ldr	r3, [r3, #0]
 80061ce:	f003 0307 	and.w	r3, r3, #7
 80061d2:	683a      	ldr	r2, [r7, #0]
 80061d4:	429a      	cmp	r2, r3
 80061d6:	d001      	beq.n	80061dc <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 80061d8:	2301      	movs	r3, #1
 80061da:	e0b8      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 80061dc:	687b      	ldr	r3, [r7, #4]
 80061de:	681b      	ldr	r3, [r3, #0]
 80061e0:	f003 0302 	and.w	r3, r3, #2
 80061e4:	2b00      	cmp	r3, #0
 80061e6:	d020      	beq.n	800622a <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80061e8:	687b      	ldr	r3, [r7, #4]
 80061ea:	681b      	ldr	r3, [r3, #0]
 80061ec:	f003 0304 	and.w	r3, r3, #4
 80061f0:	2b00      	cmp	r3, #0
 80061f2:	d005      	beq.n	8006200 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 80061f4:	4b59      	ldr	r3, [pc, #356]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80061f6:	689b      	ldr	r3, [r3, #8]
 80061f8:	4a58      	ldr	r2, [pc, #352]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80061fa:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 80061fe:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006200:	687b      	ldr	r3, [r7, #4]
 8006202:	681b      	ldr	r3, [r3, #0]
 8006204:	f003 0308 	and.w	r3, r3, #8
 8006208:	2b00      	cmp	r3, #0
 800620a:	d005      	beq.n	8006218 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 800620c:	4b53      	ldr	r3, [pc, #332]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800620e:	689b      	ldr	r3, [r3, #8]
 8006210:	4a52      	ldr	r2, [pc, #328]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006212:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 8006216:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 8006218:	4b50      	ldr	r3, [pc, #320]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800621a:	689b      	ldr	r3, [r3, #8]
 800621c:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 8006220:	687b      	ldr	r3, [r7, #4]
 8006222:	689b      	ldr	r3, [r3, #8]
 8006224:	494d      	ldr	r1, [pc, #308]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006226:	4313      	orrs	r3, r2
 8006228:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 800622a:	687b      	ldr	r3, [r7, #4]
 800622c:	681b      	ldr	r3, [r3, #0]
 800622e:	f003 0301 	and.w	r3, r3, #1
 8006232:	2b00      	cmp	r3, #0
 8006234:	d044      	beq.n	80062c0 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 8006236:	687b      	ldr	r3, [r7, #4]
 8006238:	685b      	ldr	r3, [r3, #4]
 800623a:	2b01      	cmp	r3, #1
 800623c:	d107      	bne.n	800624e <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800623e:	4b47      	ldr	r3, [pc, #284]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006240:	681b      	ldr	r3, [r3, #0]
 8006242:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8006246:	2b00      	cmp	r3, #0
 8006248:	d119      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800624a:	2301      	movs	r3, #1
 800624c:	e07f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800624e:	687b      	ldr	r3, [r7, #4]
 8006250:	685b      	ldr	r3, [r3, #4]
 8006252:	2b02      	cmp	r3, #2
 8006254:	d003      	beq.n	800625e <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 8006256:	687b      	ldr	r3, [r7, #4]
 8006258:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 800625a:	2b03      	cmp	r3, #3
 800625c:	d107      	bne.n	800626e <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 800625e:	4b3f      	ldr	r3, [pc, #252]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006260:	681b      	ldr	r3, [r3, #0]
 8006262:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8006266:	2b00      	cmp	r3, #0
 8006268:	d109      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800626a:	2301      	movs	r3, #1
 800626c:	e06f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 800626e:	4b3b      	ldr	r3, [pc, #236]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006270:	681b      	ldr	r3, [r3, #0]
 8006272:	f003 0302 	and.w	r3, r3, #2
 8006276:	2b00      	cmp	r3, #0
 8006278:	d101      	bne.n	800627e <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 800627a:	2301      	movs	r3, #1
 800627c:	e067      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 800627e:	4b37      	ldr	r3, [pc, #220]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006280:	689b      	ldr	r3, [r3, #8]
 8006282:	f023 0203 	bic.w	r2, r3, #3
 8006286:	687b      	ldr	r3, [r7, #4]
 8006288:	685b      	ldr	r3, [r3, #4]
 800628a:	4934      	ldr	r1, [pc, #208]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800628c:	4313      	orrs	r3, r2
 800628e:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8006290:	f7fc ff58 	bl	8003144 <HAL_GetTick>
 8006294:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8006296:	e00a      	b.n	80062ae <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8006298:	f7fc ff54 	bl	8003144 <HAL_GetTick>
 800629c:	4602      	mov	r2, r0
 800629e:	68fb      	ldr	r3, [r7, #12]
 80062a0:	1ad3      	subs	r3, r2, r3
 80062a2:	f241 3288 	movw	r2, #5000	; 0x1388
 80062a6:	4293      	cmp	r3, r2
 80062a8:	d901      	bls.n	80062ae <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 80062aa:	2303      	movs	r3, #3
 80062ac:	e04f      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 80062ae:	4b2b      	ldr	r3, [pc, #172]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80062b0:	689b      	ldr	r3, [r3, #8]
 80062b2:	f003 020c 	and.w	r2, r3, #12
 80062b6:	687b      	ldr	r3, [r7, #4]
 80062b8:	685b      	ldr	r3, [r3, #4]
 80062ba:	009b      	lsls	r3, r3, #2
 80062bc:	429a      	cmp	r2, r3
 80062be:	d1eb      	bne.n	8006298 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 80062c0:	4b25      	ldr	r3, [pc, #148]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062c2:	681b      	ldr	r3, [r3, #0]
 80062c4:	f003 0307 	and.w	r3, r3, #7
 80062c8:	683a      	ldr	r2, [r7, #0]
 80062ca:	429a      	cmp	r2, r3
 80062cc:	d20c      	bcs.n	80062e8 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 80062ce:	4b22      	ldr	r3, [pc, #136]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062d0:	683a      	ldr	r2, [r7, #0]
 80062d2:	b2d2      	uxtb	r2, r2
 80062d4:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 80062d6:	4b20      	ldr	r3, [pc, #128]	; (8006358 <HAL_RCC_ClockConfig+0x1b8>)
 80062d8:	681b      	ldr	r3, [r3, #0]
 80062da:	f003 0307 	and.w	r3, r3, #7
 80062de:	683a      	ldr	r2, [r7, #0]
 80062e0:	429a      	cmp	r2, r3
 80062e2:	d001      	beq.n	80062e8 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 80062e4:	2301      	movs	r3, #1
 80062e6:	e032      	b.n	800634e <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 80062e8:	687b      	ldr	r3, [r7, #4]
 80062ea:	681b      	ldr	r3, [r3, #0]
 80062ec:	f003 0304 	and.w	r3, r3, #4
 80062f0:	2b00      	cmp	r3, #0
 80062f2:	d008      	beq.n	8006306 <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 80062f4:	4b19      	ldr	r3, [pc, #100]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 80062f6:	689b      	ldr	r3, [r3, #8]
 80062f8:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 80062fc:	687b      	ldr	r3, [r7, #4]
 80062fe:	68db      	ldr	r3, [r3, #12]
 8006300:	4916      	ldr	r1, [pc, #88]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006302:	4313      	orrs	r3, r2
 8006304:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8006306:	687b      	ldr	r3, [r7, #4]
 8006308:	681b      	ldr	r3, [r3, #0]
 800630a:	f003 0308 	and.w	r3, r3, #8
 800630e:	2b00      	cmp	r3, #0
 8006310:	d009      	beq.n	8006326 <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 8006312:	4b12      	ldr	r3, [pc, #72]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006314:	689b      	ldr	r3, [r3, #8]
 8006316:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 800631a:	687b      	ldr	r3, [r7, #4]
 800631c:	691b      	ldr	r3, [r3, #16]
 800631e:	00db      	lsls	r3, r3, #3
 8006320:	490e      	ldr	r1, [pc, #56]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 8006322:	4313      	orrs	r3, r2
 8006324:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 8006326:	f000 f821 	bl	800636c <HAL_RCC_GetSysClockFreq>
 800632a:	4602      	mov	r2, r0
 800632c:	4b0b      	ldr	r3, [pc, #44]	; (800635c <HAL_RCC_ClockConfig+0x1bc>)
 800632e:	689b      	ldr	r3, [r3, #8]
 8006330:	091b      	lsrs	r3, r3, #4
 8006332:	f003 030f 	and.w	r3, r3, #15
 8006336:	490a      	ldr	r1, [pc, #40]	; (8006360 <HAL_RCC_ClockConfig+0x1c0>)
 8006338:	5ccb      	ldrb	r3, [r1, r3]
 800633a:	fa22 f303 	lsr.w	r3, r2, r3
 800633e:	4a09      	ldr	r2, [pc, #36]	; (8006364 <HAL_RCC_ClockConfig+0x1c4>)
 8006340:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 8006342:	4b09      	ldr	r3, [pc, #36]	; (8006368 <HAL_RCC_ClockConfig+0x1c8>)
 8006344:	681b      	ldr	r3, [r3, #0]
 8006346:	4618      	mov	r0, r3
 8006348:	f7fc feb8 	bl	80030bc <HAL_InitTick>

  return HAL_OK;
 800634c:	2300      	movs	r3, #0
}
 800634e:	4618      	mov	r0, r3
 8006350:	3710      	adds	r7, #16
 8006352:	46bd      	mov	sp, r7
 8006354:	bd80      	pop	{r7, pc}
 8006356:	bf00      	nop
 8006358:	40023c00 	.word	0x40023c00
 800635c:	40023800 	.word	0x40023800
 8006360:	080097b0 	.word	0x080097b0
 8006364:	20000034 	.word	0x20000034
 8006368:	20000038 	.word	0x20000038

0800636c <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 800636c:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8006370:	b084      	sub	sp, #16
 8006372:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 8006374:	2300      	movs	r3, #0
 8006376:	607b      	str	r3, [r7, #4]
 8006378:	2300      	movs	r3, #0
 800637a:	60fb      	str	r3, [r7, #12]
 800637c:	2300      	movs	r3, #0
 800637e:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8006380:	2300      	movs	r3, #0
 8006382:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 8006384:	4b67      	ldr	r3, [pc, #412]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006386:	689b      	ldr	r3, [r3, #8]
 8006388:	f003 030c 	and.w	r3, r3, #12
 800638c:	2b08      	cmp	r3, #8
 800638e:	d00d      	beq.n	80063ac <HAL_RCC_GetSysClockFreq+0x40>
 8006390:	2b08      	cmp	r3, #8
 8006392:	f200 80bd 	bhi.w	8006510 <HAL_RCC_GetSysClockFreq+0x1a4>
 8006396:	2b00      	cmp	r3, #0
 8006398:	d002      	beq.n	80063a0 <HAL_RCC_GetSysClockFreq+0x34>
 800639a:	2b04      	cmp	r3, #4
 800639c:	d003      	beq.n	80063a6 <HAL_RCC_GetSysClockFreq+0x3a>
 800639e:	e0b7      	b.n	8006510 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 80063a0:	4b61      	ldr	r3, [pc, #388]	; (8006528 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80063a2:	60bb      	str	r3, [r7, #8]
       break;
 80063a4:	e0b7      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 80063a6:	4b61      	ldr	r3, [pc, #388]	; (800652c <HAL_RCC_GetSysClockFreq+0x1c0>)
 80063a8:	60bb      	str	r3, [r7, #8]
      break;
 80063aa:	e0b4      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 80063ac:	4b5d      	ldr	r3, [pc, #372]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063ae:	685b      	ldr	r3, [r3, #4]
 80063b0:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 80063b4:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 80063b6:	4b5b      	ldr	r3, [pc, #364]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063b8:	685b      	ldr	r3, [r3, #4]
 80063ba:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 80063be:	2b00      	cmp	r3, #0
 80063c0:	d04d      	beq.n	800645e <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80063c2:	4b58      	ldr	r3, [pc, #352]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80063c4:	685b      	ldr	r3, [r3, #4]
 80063c6:	099b      	lsrs	r3, r3, #6
 80063c8:	461a      	mov	r2, r3
 80063ca:	f04f 0300 	mov.w	r3, #0
 80063ce:	f240 10ff 	movw	r0, #511	; 0x1ff
 80063d2:	f04f 0100 	mov.w	r1, #0
 80063d6:	ea02 0800 	and.w	r8, r2, r0
 80063da:	ea03 0901 	and.w	r9, r3, r1
 80063de:	4640      	mov	r0, r8
 80063e0:	4649      	mov	r1, r9
 80063e2:	f04f 0200 	mov.w	r2, #0
 80063e6:	f04f 0300 	mov.w	r3, #0
 80063ea:	014b      	lsls	r3, r1, #5
 80063ec:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 80063f0:	0142      	lsls	r2, r0, #5
 80063f2:	4610      	mov	r0, r2
 80063f4:	4619      	mov	r1, r3
 80063f6:	ebb0 0008 	subs.w	r0, r0, r8
 80063fa:	eb61 0109 	sbc.w	r1, r1, r9
 80063fe:	f04f 0200 	mov.w	r2, #0
 8006402:	f04f 0300 	mov.w	r3, #0
 8006406:	018b      	lsls	r3, r1, #6
 8006408:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800640c:	0182      	lsls	r2, r0, #6
 800640e:	1a12      	subs	r2, r2, r0
 8006410:	eb63 0301 	sbc.w	r3, r3, r1
 8006414:	f04f 0000 	mov.w	r0, #0
 8006418:	f04f 0100 	mov.w	r1, #0
 800641c:	00d9      	lsls	r1, r3, #3
 800641e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8006422:	00d0      	lsls	r0, r2, #3
 8006424:	4602      	mov	r2, r0
 8006426:	460b      	mov	r3, r1
 8006428:	eb12 0208 	adds.w	r2, r2, r8
 800642c:	eb43 0309 	adc.w	r3, r3, r9
 8006430:	f04f 0000 	mov.w	r0, #0
 8006434:	f04f 0100 	mov.w	r1, #0
 8006438:	0259      	lsls	r1, r3, #9
 800643a:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 800643e:	0250      	lsls	r0, r2, #9
 8006440:	4602      	mov	r2, r0
 8006442:	460b      	mov	r3, r1
 8006444:	4610      	mov	r0, r2
 8006446:	4619      	mov	r1, r3
 8006448:	687b      	ldr	r3, [r7, #4]
 800644a:	461a      	mov	r2, r3
 800644c:	f04f 0300 	mov.w	r3, #0
 8006450:	f7fa fc8c 	bl	8000d6c <__aeabi_uldivmod>
 8006454:	4602      	mov	r2, r0
 8006456:	460b      	mov	r3, r1
 8006458:	4613      	mov	r3, r2
 800645a:	60fb      	str	r3, [r7, #12]
 800645c:	e04a      	b.n	80064f4 <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800645e:	4b31      	ldr	r3, [pc, #196]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1b8>)
 8006460:	685b      	ldr	r3, [r3, #4]
 8006462:	099b      	lsrs	r3, r3, #6
 8006464:	461a      	mov	r2, r3
 8006466:	f04f 0300 	mov.w	r3, #0
 800646a:	f240 10ff 	movw	r0, #511	; 0x1ff
 800646e:	f04f 0100 	mov.w	r1, #0
 8006472:	ea02 0400 	and.w	r4, r2, r0
 8006476:	ea03 0501 	and.w	r5, r3, r1
 800647a:	4620      	mov	r0, r4
 800647c:	4629      	mov	r1, r5
 800647e:	f04f 0200 	mov.w	r2, #0
 8006482:	f04f 0300 	mov.w	r3, #0
 8006486:	014b      	lsls	r3, r1, #5
 8006488:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 800648c:	0142      	lsls	r2, r0, #5
 800648e:	4610      	mov	r0, r2
 8006490:	4619      	mov	r1, r3
 8006492:	1b00      	subs	r0, r0, r4
 8006494:	eb61 0105 	sbc.w	r1, r1, r5
 8006498:	f04f 0200 	mov.w	r2, #0
 800649c:	f04f 0300 	mov.w	r3, #0
 80064a0:	018b      	lsls	r3, r1, #6
 80064a2:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80064a6:	0182      	lsls	r2, r0, #6
 80064a8:	1a12      	subs	r2, r2, r0
 80064aa:	eb63 0301 	sbc.w	r3, r3, r1
 80064ae:	f04f 0000 	mov.w	r0, #0
 80064b2:	f04f 0100 	mov.w	r1, #0
 80064b6:	00d9      	lsls	r1, r3, #3
 80064b8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80064bc:	00d0      	lsls	r0, r2, #3
 80064be:	4602      	mov	r2, r0
 80064c0:	460b      	mov	r3, r1
 80064c2:	1912      	adds	r2, r2, r4
 80064c4:	eb45 0303 	adc.w	r3, r5, r3
 80064c8:	f04f 0000 	mov.w	r0, #0
 80064cc:	f04f 0100 	mov.w	r1, #0
 80064d0:	0299      	lsls	r1, r3, #10
 80064d2:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 80064d6:	0290      	lsls	r0, r2, #10
 80064d8:	4602      	mov	r2, r0
 80064da:	460b      	mov	r3, r1
 80064dc:	4610      	mov	r0, r2
 80064de:	4619      	mov	r1, r3
 80064e0:	687b      	ldr	r3, [r7, #4]
 80064e2:	461a      	mov	r2, r3
 80064e4:	f04f 0300 	mov.w	r3, #0
 80064e8:	f7fa fc40 	bl	8000d6c <__aeabi_uldivmod>
 80064ec:	4602      	mov	r2, r0
 80064ee:	460b      	mov	r3, r1
 80064f0:	4613      	mov	r3, r2
 80064f2:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 80064f4:	4b0b      	ldr	r3, [pc, #44]	; (8006524 <HAL_RCC_GetSysClockFreq+0x1b8>)
 80064f6:	685b      	ldr	r3, [r3, #4]
 80064f8:	0c1b      	lsrs	r3, r3, #16
 80064fa:	f003 0303 	and.w	r3, r3, #3
 80064fe:	3301      	adds	r3, #1
 8006500:	005b      	lsls	r3, r3, #1
 8006502:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 8006504:	68fa      	ldr	r2, [r7, #12]
 8006506:	683b      	ldr	r3, [r7, #0]
 8006508:	fbb2 f3f3 	udiv	r3, r2, r3
 800650c:	60bb      	str	r3, [r7, #8]
      break;
 800650e:	e002      	b.n	8006516 <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 8006510:	4b05      	ldr	r3, [pc, #20]	; (8006528 <HAL_RCC_GetSysClockFreq+0x1bc>)
 8006512:	60bb      	str	r3, [r7, #8]
      break;
 8006514:	bf00      	nop
    }
  }
  return sysclockfreq;
 8006516:	68bb      	ldr	r3, [r7, #8]
}
 8006518:	4618      	mov	r0, r3
 800651a:	3710      	adds	r7, #16
 800651c:	46bd      	mov	sp, r7
 800651e:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8006522:	bf00      	nop
 8006524:	40023800 	.word	0x40023800
 8006528:	00f42400 	.word	0x00f42400
 800652c:	007a1200 	.word	0x007a1200

08006530 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 8006530:	b480      	push	{r7}
 8006532:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 8006534:	4b03      	ldr	r3, [pc, #12]	; (8006544 <HAL_RCC_GetHCLKFreq+0x14>)
 8006536:	681b      	ldr	r3, [r3, #0]
}
 8006538:	4618      	mov	r0, r3
 800653a:	46bd      	mov	sp, r7
 800653c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006540:	4770      	bx	lr
 8006542:	bf00      	nop
 8006544:	20000034 	.word	0x20000034

08006548 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 8006548:	b580      	push	{r7, lr}
 800654a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 800654c:	f7ff fff0 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006550:	4602      	mov	r2, r0
 8006552:	4b05      	ldr	r3, [pc, #20]	; (8006568 <HAL_RCC_GetPCLK1Freq+0x20>)
 8006554:	689b      	ldr	r3, [r3, #8]
 8006556:	0a9b      	lsrs	r3, r3, #10
 8006558:	f003 0307 	and.w	r3, r3, #7
 800655c:	4903      	ldr	r1, [pc, #12]	; (800656c <HAL_RCC_GetPCLK1Freq+0x24>)
 800655e:	5ccb      	ldrb	r3, [r1, r3]
 8006560:	fa22 f303 	lsr.w	r3, r2, r3
}
 8006564:	4618      	mov	r0, r3
 8006566:	bd80      	pop	{r7, pc}
 8006568:	40023800 	.word	0x40023800
 800656c:	080097c0 	.word	0x080097c0

08006570 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8006570:	b580      	push	{r7, lr}
 8006572:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 8006574:	f7ff ffdc 	bl	8006530 <HAL_RCC_GetHCLKFreq>
 8006578:	4602      	mov	r2, r0
 800657a:	4b05      	ldr	r3, [pc, #20]	; (8006590 <HAL_RCC_GetPCLK2Freq+0x20>)
 800657c:	689b      	ldr	r3, [r3, #8]
 800657e:	0b5b      	lsrs	r3, r3, #13
 8006580:	f003 0307 	and.w	r3, r3, #7
 8006584:	4903      	ldr	r1, [pc, #12]	; (8006594 <HAL_RCC_GetPCLK2Freq+0x24>)
 8006586:	5ccb      	ldrb	r3, [r1, r3]
 8006588:	fa22 f303 	lsr.w	r3, r2, r3
}
 800658c:	4618      	mov	r0, r3
 800658e:	bd80      	pop	{r7, pc}
 8006590:	40023800 	.word	0x40023800
 8006594:	080097c0 	.word	0x080097c0

08006598 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8006598:	b580      	push	{r7, lr}
 800659a:	b082      	sub	sp, #8
 800659c:	af00      	add	r7, sp, #0
 800659e:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80065a0:	687b      	ldr	r3, [r7, #4]
 80065a2:	2b00      	cmp	r3, #0
 80065a4:	d101      	bne.n	80065aa <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 80065a6:	2301      	movs	r3, #1
 80065a8:	e041      	b.n	800662e <HAL_TIM_Base_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80065aa:	687b      	ldr	r3, [r7, #4]
 80065ac:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80065b0:	b2db      	uxtb	r3, r3
 80065b2:	2b00      	cmp	r3, #0
 80065b4:	d106      	bne.n	80065c4 <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80065b6:	687b      	ldr	r3, [r7, #4]
 80065b8:	2200      	movs	r2, #0
 80065ba:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 80065be:	6878      	ldr	r0, [r7, #4]
 80065c0:	f7fc fb06 	bl	8002bd0 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80065c4:	687b      	ldr	r3, [r7, #4]
 80065c6:	2202      	movs	r2, #2
 80065c8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80065cc:	687b      	ldr	r3, [r7, #4]
 80065ce:	681a      	ldr	r2, [r3, #0]
 80065d0:	687b      	ldr	r3, [r7, #4]
 80065d2:	3304      	adds	r3, #4
 80065d4:	4619      	mov	r1, r3
 80065d6:	4610      	mov	r0, r2
 80065d8:	f000 fdda 	bl	8007190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80065dc:	687b      	ldr	r3, [r7, #4]
 80065de:	2201      	movs	r2, #1
 80065e0:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80065e4:	687b      	ldr	r3, [r7, #4]
 80065e6:	2201      	movs	r2, #1
 80065e8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80065ec:	687b      	ldr	r3, [r7, #4]
 80065ee:	2201      	movs	r2, #1
 80065f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80065f4:	687b      	ldr	r3, [r7, #4]
 80065f6:	2201      	movs	r2, #1
 80065f8:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 80065fc:	687b      	ldr	r3, [r7, #4]
 80065fe:	2201      	movs	r2, #1
 8006600:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 8006604:	687b      	ldr	r3, [r7, #4]
 8006606:	2201      	movs	r2, #1
 8006608:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 800660c:	687b      	ldr	r3, [r7, #4]
 800660e:	2201      	movs	r2, #1
 8006610:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006614:	687b      	ldr	r3, [r7, #4]
 8006616:	2201      	movs	r2, #1
 8006618:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 800661c:	687b      	ldr	r3, [r7, #4]
 800661e:	2201      	movs	r2, #1
 8006620:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006624:	687b      	ldr	r3, [r7, #4]
 8006626:	2201      	movs	r2, #1
 8006628:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800662c:	2300      	movs	r3, #0
}
 800662e:	4618      	mov	r0, r3
 8006630:	3708      	adds	r7, #8
 8006632:	46bd      	mov	sp, r7
 8006634:	bd80      	pop	{r7, pc}
	...

08006638 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8006638:	b480      	push	{r7}
 800663a:	b085      	sub	sp, #20
 800663c:	af00      	add	r7, sp, #0
 800663e:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 8006640:	687b      	ldr	r3, [r7, #4]
 8006642:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8006646:	b2db      	uxtb	r3, r3
 8006648:	2b01      	cmp	r3, #1
 800664a:	d001      	beq.n	8006650 <HAL_TIM_Base_Start+0x18>
  {
    return HAL_ERROR;
 800664c:	2301      	movs	r3, #1
 800664e:	e03c      	b.n	80066ca <HAL_TIM_Base_Start+0x92>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006650:	687b      	ldr	r3, [r7, #4]
 8006652:	2202      	movs	r2, #2
 8006654:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006658:	687b      	ldr	r3, [r7, #4]
 800665a:	681b      	ldr	r3, [r3, #0]
 800665c:	4a1e      	ldr	r2, [pc, #120]	; (80066d8 <HAL_TIM_Base_Start+0xa0>)
 800665e:	4293      	cmp	r3, r2
 8006660:	d018      	beq.n	8006694 <HAL_TIM_Base_Start+0x5c>
 8006662:	687b      	ldr	r3, [r7, #4]
 8006664:	681b      	ldr	r3, [r3, #0]
 8006666:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800666a:	d013      	beq.n	8006694 <HAL_TIM_Base_Start+0x5c>
 800666c:	687b      	ldr	r3, [r7, #4]
 800666e:	681b      	ldr	r3, [r3, #0]
 8006670:	4a1a      	ldr	r2, [pc, #104]	; (80066dc <HAL_TIM_Base_Start+0xa4>)
 8006672:	4293      	cmp	r3, r2
 8006674:	d00e      	beq.n	8006694 <HAL_TIM_Base_Start+0x5c>
 8006676:	687b      	ldr	r3, [r7, #4]
 8006678:	681b      	ldr	r3, [r3, #0]
 800667a:	4a19      	ldr	r2, [pc, #100]	; (80066e0 <HAL_TIM_Base_Start+0xa8>)
 800667c:	4293      	cmp	r3, r2
 800667e:	d009      	beq.n	8006694 <HAL_TIM_Base_Start+0x5c>
 8006680:	687b      	ldr	r3, [r7, #4]
 8006682:	681b      	ldr	r3, [r3, #0]
 8006684:	4a17      	ldr	r2, [pc, #92]	; (80066e4 <HAL_TIM_Base_Start+0xac>)
 8006686:	4293      	cmp	r3, r2
 8006688:	d004      	beq.n	8006694 <HAL_TIM_Base_Start+0x5c>
 800668a:	687b      	ldr	r3, [r7, #4]
 800668c:	681b      	ldr	r3, [r3, #0]
 800668e:	4a16      	ldr	r2, [pc, #88]	; (80066e8 <HAL_TIM_Base_Start+0xb0>)
 8006690:	4293      	cmp	r3, r2
 8006692:	d111      	bne.n	80066b8 <HAL_TIM_Base_Start+0x80>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006694:	687b      	ldr	r3, [r7, #4]
 8006696:	681b      	ldr	r3, [r3, #0]
 8006698:	689b      	ldr	r3, [r3, #8]
 800669a:	f003 0307 	and.w	r3, r3, #7
 800669e:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066a0:	68fb      	ldr	r3, [r7, #12]
 80066a2:	2b06      	cmp	r3, #6
 80066a4:	d010      	beq.n	80066c8 <HAL_TIM_Base_Start+0x90>
    {
      __HAL_TIM_ENABLE(htim);
 80066a6:	687b      	ldr	r3, [r7, #4]
 80066a8:	681b      	ldr	r3, [r3, #0]
 80066aa:	681a      	ldr	r2, [r3, #0]
 80066ac:	687b      	ldr	r3, [r7, #4]
 80066ae:	681b      	ldr	r3, [r3, #0]
 80066b0:	f042 0201 	orr.w	r2, r2, #1
 80066b4:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80066b6:	e007      	b.n	80066c8 <HAL_TIM_Base_Start+0x90>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 80066b8:	687b      	ldr	r3, [r7, #4]
 80066ba:	681b      	ldr	r3, [r3, #0]
 80066bc:	681a      	ldr	r2, [r3, #0]
 80066be:	687b      	ldr	r3, [r7, #4]
 80066c0:	681b      	ldr	r3, [r3, #0]
 80066c2:	f042 0201 	orr.w	r2, r2, #1
 80066c6:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80066c8:	2300      	movs	r3, #0
}
 80066ca:	4618      	mov	r0, r3
 80066cc:	3714      	adds	r7, #20
 80066ce:	46bd      	mov	sp, r7
 80066d0:	f85d 7b04 	ldr.w	r7, [sp], #4
 80066d4:	4770      	bx	lr
 80066d6:	bf00      	nop
 80066d8:	40010000 	.word	0x40010000
 80066dc:	40000400 	.word	0x40000400
 80066e0:	40000800 	.word	0x40000800
 80066e4:	40000c00 	.word	0x40000c00
 80066e8:	40014000 	.word	0x40014000

080066ec <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80066ec:	b480      	push	{r7}
 80066ee:	b085      	sub	sp, #20
 80066f0:	af00      	add	r7, sp, #0
 80066f2:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Check the TIM state */
  if (htim->State != HAL_TIM_STATE_READY)
 80066f4:	687b      	ldr	r3, [r7, #4]
 80066f6:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80066fa:	b2db      	uxtb	r3, r3
 80066fc:	2b01      	cmp	r3, #1
 80066fe:	d001      	beq.n	8006704 <HAL_TIM_Base_Start_IT+0x18>
  {
    return HAL_ERROR;
 8006700:	2301      	movs	r3, #1
 8006702:	e044      	b.n	800678e <HAL_TIM_Base_Start_IT+0xa2>
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8006704:	687b      	ldr	r3, [r7, #4]
 8006706:	2202      	movs	r2, #2
 8006708:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 800670c:	687b      	ldr	r3, [r7, #4]
 800670e:	681b      	ldr	r3, [r3, #0]
 8006710:	68da      	ldr	r2, [r3, #12]
 8006712:	687b      	ldr	r3, [r7, #4]
 8006714:	681b      	ldr	r3, [r3, #0]
 8006716:	f042 0201 	orr.w	r2, r2, #1
 800671a:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800671c:	687b      	ldr	r3, [r7, #4]
 800671e:	681b      	ldr	r3, [r3, #0]
 8006720:	4a1e      	ldr	r2, [pc, #120]	; (800679c <HAL_TIM_Base_Start_IT+0xb0>)
 8006722:	4293      	cmp	r3, r2
 8006724:	d018      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 8006726:	687b      	ldr	r3, [r7, #4]
 8006728:	681b      	ldr	r3, [r3, #0]
 800672a:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800672e:	d013      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 8006730:	687b      	ldr	r3, [r7, #4]
 8006732:	681b      	ldr	r3, [r3, #0]
 8006734:	4a1a      	ldr	r2, [pc, #104]	; (80067a0 <HAL_TIM_Base_Start_IT+0xb4>)
 8006736:	4293      	cmp	r3, r2
 8006738:	d00e      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 800673a:	687b      	ldr	r3, [r7, #4]
 800673c:	681b      	ldr	r3, [r3, #0]
 800673e:	4a19      	ldr	r2, [pc, #100]	; (80067a4 <HAL_TIM_Base_Start_IT+0xb8>)
 8006740:	4293      	cmp	r3, r2
 8006742:	d009      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 8006744:	687b      	ldr	r3, [r7, #4]
 8006746:	681b      	ldr	r3, [r3, #0]
 8006748:	4a17      	ldr	r2, [pc, #92]	; (80067a8 <HAL_TIM_Base_Start_IT+0xbc>)
 800674a:	4293      	cmp	r3, r2
 800674c:	d004      	beq.n	8006758 <HAL_TIM_Base_Start_IT+0x6c>
 800674e:	687b      	ldr	r3, [r7, #4]
 8006750:	681b      	ldr	r3, [r3, #0]
 8006752:	4a16      	ldr	r2, [pc, #88]	; (80067ac <HAL_TIM_Base_Start_IT+0xc0>)
 8006754:	4293      	cmp	r3, r2
 8006756:	d111      	bne.n	800677c <HAL_TIM_Base_Start_IT+0x90>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006758:	687b      	ldr	r3, [r7, #4]
 800675a:	681b      	ldr	r3, [r3, #0]
 800675c:	689b      	ldr	r3, [r3, #8]
 800675e:	f003 0307 	and.w	r3, r3, #7
 8006762:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006764:	68fb      	ldr	r3, [r7, #12]
 8006766:	2b06      	cmp	r3, #6
 8006768:	d010      	beq.n	800678c <HAL_TIM_Base_Start_IT+0xa0>
    {
      __HAL_TIM_ENABLE(htim);
 800676a:	687b      	ldr	r3, [r7, #4]
 800676c:	681b      	ldr	r3, [r3, #0]
 800676e:	681a      	ldr	r2, [r3, #0]
 8006770:	687b      	ldr	r3, [r7, #4]
 8006772:	681b      	ldr	r3, [r3, #0]
 8006774:	f042 0201 	orr.w	r2, r2, #1
 8006778:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800677a:	e007      	b.n	800678c <HAL_TIM_Base_Start_IT+0xa0>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 800677c:	687b      	ldr	r3, [r7, #4]
 800677e:	681b      	ldr	r3, [r3, #0]
 8006780:	681a      	ldr	r2, [r3, #0]
 8006782:	687b      	ldr	r3, [r7, #4]
 8006784:	681b      	ldr	r3, [r3, #0]
 8006786:	f042 0201 	orr.w	r2, r2, #1
 800678a:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 800678c:	2300      	movs	r3, #0
}
 800678e:	4618      	mov	r0, r3
 8006790:	3714      	adds	r7, #20
 8006792:	46bd      	mov	sp, r7
 8006794:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006798:	4770      	bx	lr
 800679a:	bf00      	nop
 800679c:	40010000 	.word	0x40010000
 80067a0:	40000400 	.word	0x40000400
 80067a4:	40000800 	.word	0x40000800
 80067a8:	40000c00 	.word	0x40000c00
 80067ac:	40014000 	.word	0x40014000

080067b0 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 80067b0:	b580      	push	{r7, lr}
 80067b2:	b082      	sub	sp, #8
 80067b4:	af00      	add	r7, sp, #0
 80067b6:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 80067b8:	687b      	ldr	r3, [r7, #4]
 80067ba:	2b00      	cmp	r3, #0
 80067bc:	d101      	bne.n	80067c2 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 80067be:	2301      	movs	r3, #1
 80067c0:	e041      	b.n	8006846 <HAL_TIM_PWM_Init+0x96>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 80067c2:	687b      	ldr	r3, [r7, #4]
 80067c4:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80067c8:	b2db      	uxtb	r3, r3
 80067ca:	2b00      	cmp	r3, #0
 80067cc:	d106      	bne.n	80067dc <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80067ce:	687b      	ldr	r3, [r7, #4]
 80067d0:	2200      	movs	r2, #0
 80067d2:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 80067d6:	6878      	ldr	r0, [r7, #4]
 80067d8:	f000 f839 	bl	800684e <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80067dc:	687b      	ldr	r3, [r7, #4]
 80067de:	2202      	movs	r2, #2
 80067e0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 80067e4:	687b      	ldr	r3, [r7, #4]
 80067e6:	681a      	ldr	r2, [r3, #0]
 80067e8:	687b      	ldr	r3, [r7, #4]
 80067ea:	3304      	adds	r3, #4
 80067ec:	4619      	mov	r1, r3
 80067ee:	4610      	mov	r0, r2
 80067f0:	f000 fcce 	bl	8007190 <TIM_Base_SetConfig>

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 80067f4:	687b      	ldr	r3, [r7, #4]
 80067f6:	2201      	movs	r2, #1
 80067f8:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Initialize the TIM channels state */
  TIM_CHANNEL_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 80067fc:	687b      	ldr	r3, [r7, #4]
 80067fe:	2201      	movs	r2, #1
 8006800:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 8006804:	687b      	ldr	r3, [r7, #4]
 8006806:	2201      	movs	r2, #1
 8006808:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 800680c:	687b      	ldr	r3, [r7, #4]
 800680e:	2201      	movs	r2, #1
 8006810:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006814:	687b      	ldr	r3, [r7, #4]
 8006816:	2201      	movs	r2, #1
 8006818:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41
  TIM_CHANNEL_N_STATE_SET_ALL(htim, HAL_TIM_CHANNEL_STATE_READY);
 800681c:	687b      	ldr	r3, [r7, #4]
 800681e:	2201      	movs	r2, #1
 8006820:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006824:	687b      	ldr	r3, [r7, #4]
 8006826:	2201      	movs	r2, #1
 8006828:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 800682c:	687b      	ldr	r3, [r7, #4]
 800682e:	2201      	movs	r2, #1
 8006830:	f883 2044 	strb.w	r2, [r3, #68]	; 0x44
 8006834:	687b      	ldr	r3, [r7, #4]
 8006836:	2201      	movs	r2, #1
 8006838:	f883 2045 	strb.w	r2, [r3, #69]	; 0x45

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 800683c:	687b      	ldr	r3, [r7, #4]
 800683e:	2201      	movs	r2, #1
 8006840:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006844:	2300      	movs	r3, #0
}
 8006846:	4618      	mov	r0, r3
 8006848:	3708      	adds	r7, #8
 800684a:	46bd      	mov	sp, r7
 800684c:	bd80      	pop	{r7, pc}

0800684e <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 800684e:	b480      	push	{r7}
 8006850:	b083      	sub	sp, #12
 8006852:	af00      	add	r7, sp, #0
 8006854:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8006856:	bf00      	nop
 8006858:	370c      	adds	r7, #12
 800685a:	46bd      	mov	sp, r7
 800685c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8006860:	4770      	bx	lr
	...

08006864 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006864:	b580      	push	{r7, lr}
 8006866:	b084      	sub	sp, #16
 8006868:	af00      	add	r7, sp, #0
 800686a:	6078      	str	r0, [r7, #4]
 800686c:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Check the TIM channel state */
  if (TIM_CHANNEL_STATE_GET(htim, Channel) != HAL_TIM_CHANNEL_STATE_READY)
 800686e:	683b      	ldr	r3, [r7, #0]
 8006870:	2b00      	cmp	r3, #0
 8006872:	d109      	bne.n	8006888 <HAL_TIM_PWM_Start+0x24>
 8006874:	687b      	ldr	r3, [r7, #4]
 8006876:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 800687a:	b2db      	uxtb	r3, r3
 800687c:	2b01      	cmp	r3, #1
 800687e:	bf14      	ite	ne
 8006880:	2301      	movne	r3, #1
 8006882:	2300      	moveq	r3, #0
 8006884:	b2db      	uxtb	r3, r3
 8006886:	e022      	b.n	80068ce <HAL_TIM_PWM_Start+0x6a>
 8006888:	683b      	ldr	r3, [r7, #0]
 800688a:	2b04      	cmp	r3, #4
 800688c:	d109      	bne.n	80068a2 <HAL_TIM_PWM_Start+0x3e>
 800688e:	687b      	ldr	r3, [r7, #4]
 8006890:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006894:	b2db      	uxtb	r3, r3
 8006896:	2b01      	cmp	r3, #1
 8006898:	bf14      	ite	ne
 800689a:	2301      	movne	r3, #1
 800689c:	2300      	moveq	r3, #0
 800689e:	b2db      	uxtb	r3, r3
 80068a0:	e015      	b.n	80068ce <HAL_TIM_PWM_Start+0x6a>
 80068a2:	683b      	ldr	r3, [r7, #0]
 80068a4:	2b08      	cmp	r3, #8
 80068a6:	d109      	bne.n	80068bc <HAL_TIM_PWM_Start+0x58>
 80068a8:	687b      	ldr	r3, [r7, #4]
 80068aa:	f893 3040 	ldrb.w	r3, [r3, #64]	; 0x40
 80068ae:	b2db      	uxtb	r3, r3
 80068b0:	2b01      	cmp	r3, #1
 80068b2:	bf14      	ite	ne
 80068b4:	2301      	movne	r3, #1
 80068b6:	2300      	moveq	r3, #0
 80068b8:	b2db      	uxtb	r3, r3
 80068ba:	e008      	b.n	80068ce <HAL_TIM_PWM_Start+0x6a>
 80068bc:	687b      	ldr	r3, [r7, #4]
 80068be:	f893 3041 	ldrb.w	r3, [r3, #65]	; 0x41
 80068c2:	b2db      	uxtb	r3, r3
 80068c4:	2b01      	cmp	r3, #1
 80068c6:	bf14      	ite	ne
 80068c8:	2301      	movne	r3, #1
 80068ca:	2300      	moveq	r3, #0
 80068cc:	b2db      	uxtb	r3, r3
 80068ce:	2b00      	cmp	r3, #0
 80068d0:	d001      	beq.n	80068d6 <HAL_TIM_PWM_Start+0x72>
  {
    return HAL_ERROR;
 80068d2:	2301      	movs	r3, #1
 80068d4:	e068      	b.n	80069a8 <HAL_TIM_PWM_Start+0x144>
  }

  /* Set the TIM channel state */
  TIM_CHANNEL_STATE_SET(htim, Channel, HAL_TIM_CHANNEL_STATE_BUSY);
 80068d6:	683b      	ldr	r3, [r7, #0]
 80068d8:	2b00      	cmp	r3, #0
 80068da:	d104      	bne.n	80068e6 <HAL_TIM_PWM_Start+0x82>
 80068dc:	687b      	ldr	r3, [r7, #4]
 80068de:	2202      	movs	r2, #2
 80068e0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
 80068e4:	e013      	b.n	800690e <HAL_TIM_PWM_Start+0xaa>
 80068e6:	683b      	ldr	r3, [r7, #0]
 80068e8:	2b04      	cmp	r3, #4
 80068ea:	d104      	bne.n	80068f6 <HAL_TIM_PWM_Start+0x92>
 80068ec:	687b      	ldr	r3, [r7, #4]
 80068ee:	2202      	movs	r2, #2
 80068f0:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
 80068f4:	e00b      	b.n	800690e <HAL_TIM_PWM_Start+0xaa>
 80068f6:	683b      	ldr	r3, [r7, #0]
 80068f8:	2b08      	cmp	r3, #8
 80068fa:	d104      	bne.n	8006906 <HAL_TIM_PWM_Start+0xa2>
 80068fc:	687b      	ldr	r3, [r7, #4]
 80068fe:	2202      	movs	r2, #2
 8006900:	f883 2040 	strb.w	r2, [r3, #64]	; 0x40
 8006904:	e003      	b.n	800690e <HAL_TIM_PWM_Start+0xaa>
 8006906:	687b      	ldr	r3, [r7, #4]
 8006908:	2202      	movs	r2, #2
 800690a:	f883 2041 	strb.w	r2, [r3, #65]	; 0x41

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 800690e:	687b      	ldr	r3, [r7, #4]
 8006910:	681b      	ldr	r3, [r3, #0]
 8006912:	2201      	movs	r2, #1
 8006914:	6839      	ldr	r1, [r7, #0]
 8006916:	4618      	mov	r0, r3
 8006918:	f000 fee0 	bl	80076dc <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 800691c:	687b      	ldr	r3, [r7, #4]
 800691e:	681b      	ldr	r3, [r3, #0]
 8006920:	4a23      	ldr	r2, [pc, #140]	; (80069b0 <HAL_TIM_PWM_Start+0x14c>)
 8006922:	4293      	cmp	r3, r2
 8006924:	d107      	bne.n	8006936 <HAL_TIM_PWM_Start+0xd2>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8006926:	687b      	ldr	r3, [r7, #4]
 8006928:	681b      	ldr	r3, [r3, #0]
 800692a:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 800692c:	687b      	ldr	r3, [r7, #4]
 800692e:	681b      	ldr	r3, [r3, #0]
 8006930:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8006934:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 8006936:	687b      	ldr	r3, [r7, #4]
 8006938:	681b      	ldr	r3, [r3, #0]
 800693a:	4a1d      	ldr	r2, [pc, #116]	; (80069b0 <HAL_TIM_PWM_Start+0x14c>)
 800693c:	4293      	cmp	r3, r2
 800693e:	d018      	beq.n	8006972 <HAL_TIM_PWM_Start+0x10e>
 8006940:	687b      	ldr	r3, [r7, #4]
 8006942:	681b      	ldr	r3, [r3, #0]
 8006944:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8006948:	d013      	beq.n	8006972 <HAL_TIM_PWM_Start+0x10e>
 800694a:	687b      	ldr	r3, [r7, #4]
 800694c:	681b      	ldr	r3, [r3, #0]
 800694e:	4a19      	ldr	r2, [pc, #100]	; (80069b4 <HAL_TIM_PWM_Start+0x150>)
 8006950:	4293      	cmp	r3, r2
 8006952:	d00e      	beq.n	8006972 <HAL_TIM_PWM_Start+0x10e>
 8006954:	687b      	ldr	r3, [r7, #4]
 8006956:	681b      	ldr	r3, [r3, #0]
 8006958:	4a17      	ldr	r2, [pc, #92]	; (80069b8 <HAL_TIM_PWM_Start+0x154>)
 800695a:	4293      	cmp	r3, r2
 800695c:	d009      	beq.n	8006972 <HAL_TIM_PWM_Start+0x10e>
 800695e:	687b      	ldr	r3, [r7, #4]
 8006960:	681b      	ldr	r3, [r3, #0]
 8006962:	4a16      	ldr	r2, [pc, #88]	; (80069bc <HAL_TIM_PWM_Start+0x158>)
 8006964:	4293      	cmp	r3, r2
 8006966:	d004      	beq.n	8006972 <HAL_TIM_PWM_Start+0x10e>
 8006968:	687b      	ldr	r3, [r7, #4]
 800696a:	681b      	ldr	r3, [r3, #0]
 800696c:	4a14      	ldr	r2, [pc, #80]	; (80069c0 <HAL_TIM_PWM_Start+0x15c>)
 800696e:	4293      	cmp	r3, r2
 8006970:	d111      	bne.n	8006996 <HAL_TIM_PWM_Start+0x132>
  {
    tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8006972:	687b      	ldr	r3, [r7, #4]
 8006974:	681b      	ldr	r3, [r3, #0]
 8006976:	689b      	ldr	r3, [r3, #8]
 8006978:	f003 0307 	and.w	r3, r3, #7
 800697c:	60fb      	str	r3, [r7, #12]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 800697e:	68fb      	ldr	r3, [r7, #12]
 8006980:	2b06      	cmp	r3, #6
 8006982:	d010      	beq.n	80069a6 <HAL_TIM_PWM_Start+0x142>
    {
      __HAL_TIM_ENABLE(htim);
 8006984:	687b      	ldr	r3, [r7, #4]
 8006986:	681b      	ldr	r3, [r3, #0]
 8006988:	681a      	ldr	r2, [r3, #0]
 800698a:	687b      	ldr	r3, [r7, #4]
 800698c:	681b      	ldr	r3, [r3, #0]
 800698e:	f042 0201 	orr.w	r2, r2, #1
 8006992:	601a      	str	r2, [r3, #0]
    if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8006994:	e007      	b.n	80069a6 <HAL_TIM_PWM_Start+0x142>
    }
  }
  else
  {
    __HAL_TIM_ENABLE(htim);
 8006996:	687b      	ldr	r3, [r7, #4]
 8006998:	681b      	ldr	r3, [r3, #0]
 800699a:	681a      	ldr	r2, [r3, #0]
 800699c:	687b      	ldr	r3, [r7, #4]
 800699e:	681b      	ldr	r3, [r3, #0]
 80069a0:	f042 0201 	orr.w	r2, r2, #1
 80069a4:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 80069a6:	2300      	movs	r3, #0
}
 80069a8:	4618      	mov	r0, r3
 80069aa:	3710      	adds	r7, #16
 80069ac:	46bd      	mov	sp, r7
 80069ae:	bd80      	pop	{r7, pc}
 80069b0:	40010000 	.word	0x40010000
 80069b4:	40000400 	.word	0x40000400
 80069b8:	40000800 	.word	0x40000800
 80069bc:	40000c00 	.word	0x40000c00
 80069c0:	40014000 	.word	0x40014000

080069c4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 80069c4:	b580      	push	{r7, lr}
 80069c6:	b086      	sub	sp, #24
 80069c8:	af00      	add	r7, sp, #0
 80069ca:	6078      	str	r0, [r7, #4]
 80069cc:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 80069ce:	687b      	ldr	r3, [r7, #4]
 80069d0:	2b00      	cmp	r3, #0
 80069d2:	d101      	bne.n	80069d8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 80069d4:	2301      	movs	r3, #1
 80069d6:	e097      	b.n	8006b08 <HAL_TIM_Encoder_Init+0x144>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 80069d8:	687b      	ldr	r3, [r7, #4]
 80069da:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80069de:	b2db      	uxtb	r3, r3
 80069e0:	2b00      	cmp	r3, #0
 80069e2:	d106      	bne.n	80069f2 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 80069e4:	687b      	ldr	r3, [r7, #4]
 80069e6:	2200      	movs	r2, #0
 80069e8:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 80069ec:	6878      	ldr	r0, [r7, #4]
 80069ee:	f7fc f8a7 	bl	8002b40 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 80069f2:	687b      	ldr	r3, [r7, #4]
 80069f4:	2202      	movs	r2, #2
 80069f6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 80069fa:	687b      	ldr	r3, [r7, #4]
 80069fc:	681b      	ldr	r3, [r3, #0]
 80069fe:	689b      	ldr	r3, [r3, #8]
 8006a00:	687a      	ldr	r2, [r7, #4]
 8006a02:	6812      	ldr	r2, [r2, #0]
 8006a04:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8006a08:	f023 0307 	bic.w	r3, r3, #7
 8006a0c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8006a0e:	687b      	ldr	r3, [r7, #4]
 8006a10:	681a      	ldr	r2, [r3, #0]
 8006a12:	687b      	ldr	r3, [r7, #4]
 8006a14:	3304      	adds	r3, #4
 8006a16:	4619      	mov	r1, r3
 8006a18:	4610      	mov	r0, r2
 8006a1a:	f000 fbb9 	bl	8007190 <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8006a1e:	687b      	ldr	r3, [r7, #4]
 8006a20:	681b      	ldr	r3, [r3, #0]
 8006a22:	689b      	ldr	r3, [r3, #8]
 8006a24:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8006a26:	687b      	ldr	r3, [r7, #4]
 8006a28:	681b      	ldr	r3, [r3, #0]
 8006a2a:	699b      	ldr	r3, [r3, #24]
 8006a2c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8006a2e:	687b      	ldr	r3, [r7, #4]
 8006a30:	681b      	ldr	r3, [r3, #0]
 8006a32:	6a1b      	ldr	r3, [r3, #32]
 8006a34:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8006a36:	683b      	ldr	r3, [r7, #0]
 8006a38:	681b      	ldr	r3, [r3, #0]
 8006a3a:	697a      	ldr	r2, [r7, #20]
 8006a3c:	4313      	orrs	r3, r2
 8006a3e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8006a40:	693b      	ldr	r3, [r7, #16]
 8006a42:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8006a46:	f023 0303 	bic.w	r3, r3, #3
 8006a4a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8006a4c:	683b      	ldr	r3, [r7, #0]
 8006a4e:	689a      	ldr	r2, [r3, #8]
 8006a50:	683b      	ldr	r3, [r7, #0]
 8006a52:	699b      	ldr	r3, [r3, #24]
 8006a54:	021b      	lsls	r3, r3, #8
 8006a56:	4313      	orrs	r3, r2
 8006a58:	693a      	ldr	r2, [r7, #16]
 8006a5a:	4313      	orrs	r3, r2
 8006a5c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8006a5e:	693b      	ldr	r3, [r7, #16]
 8006a60:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8006a64:	f023 030c 	bic.w	r3, r3, #12
 8006a68:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8006a6a:	693b      	ldr	r3, [r7, #16]
 8006a6c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8006a70:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8006a74:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8006a76:	683b      	ldr	r3, [r7, #0]
 8006a78:	68da      	ldr	r2, [r3, #12]
 8006a7a:	683b      	ldr	r3, [r7, #0]
 8006a7c:	69db      	ldr	r3, [r3, #28]
 8006a7e:	021b      	lsls	r3, r3, #8
 8006a80:	4313      	orrs	r3, r2
 8006a82:	693a      	ldr	r2, [r7, #16]
 8006a84:	4313      	orrs	r3, r2
 8006a86:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8006a88:	683b      	ldr	r3, [r7, #0]
 8006a8a:	691b      	ldr	r3, [r3, #16]
 8006a8c:	011a      	lsls	r2, r3, #4
 8006a8e:	683b      	ldr	r3, [r7, #0]
 8006a90:	6a1b      	ldr	r3, [r3, #32]
 8006a92:	031b      	lsls	r3, r3, #12
 8006a94:	4313      	orrs	r3, r2
 8006a96:	693a      	ldr	r2, [r7, #16]
 8006a98:	4313      	orrs	r3, r2
 8006a9a:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8006a9c:	68fb      	ldr	r3, [r7, #12]
 8006a9e:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8006aa2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8006aa4:	68fb      	ldr	r3, [r7, #12]
 8006aa6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8006aaa:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8006aac:	683b      	ldr	r3, [r7, #0]
 8006aae:	685a      	ldr	r2, [r3, #4]
 8006ab0:	683b      	ldr	r3, [r7, #0]
 8006ab2:	695b      	ldr	r3, [r3, #20]
 8006ab4:	011b      	lsls	r3, r3, #4
 8006ab6:	4313      	orrs	r3, r2
 8006ab8:	68fa      	ldr	r2, [r7, #12]
 8006aba:	4313      	orrs	r3, r2
 8006abc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8006abe:	687b      	ldr	r3, [r7, #4]
 8006ac0:	681b      	ldr	r3, [r3, #0]
 8006ac2:	697a      	ldr	r2, [r7, #20]
 8006ac4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8006ac6:	687b      	ldr	r3, [r7, #4]
 8006ac8:	681b      	ldr	r3, [r3, #0]
 8006aca:	693a      	ldr	r2, [r7, #16]
 8006acc:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8006ace:	687b      	ldr	r3, [r7, #4]
 8006ad0:	681b      	ldr	r3, [r3, #0]
 8006ad2:	68fa      	ldr	r2, [r7, #12]
 8006ad4:	621a      	str	r2, [r3, #32]

  /* Initialize the DMA burst operation state */
  htim->DMABurstState = HAL_DMA_BURST_STATE_READY;
 8006ad6:	687b      	ldr	r3, [r7, #4]
 8006ad8:	2201      	movs	r2, #1
 8006ada:	f883 2046 	strb.w	r2, [r3, #70]	; 0x46

  /* Set the TIM channels state */
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006ade:	687b      	ldr	r3, [r7, #4]
 8006ae0:	2201      	movs	r2, #1
 8006ae2:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006ae6:	687b      	ldr	r3, [r7, #4]
 8006ae8:	2201      	movs	r2, #1
 8006aea:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_READY);
 8006aee:	687b      	ldr	r3, [r7, #4]
 8006af0:	2201      	movs	r2, #1
 8006af2:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
  TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_READY);
 8006af6:	687b      	ldr	r3, [r7, #4]
 8006af8:	2201      	movs	r2, #1
 8006afa:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8006afe:	687b      	ldr	r3, [r7, #4]
 8006b00:	2201      	movs	r2, #1
 8006b02:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8006b06:	2300      	movs	r3, #0
}
 8006b08:	4618      	mov	r0, r3
 8006b0a:	3718      	adds	r7, #24
 8006b0c:	46bd      	mov	sp, r7
 8006b0e:	bd80      	pop	{r7, pc}

08006b10 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8006b10:	b580      	push	{r7, lr}
 8006b12:	b084      	sub	sp, #16
 8006b14:	af00      	add	r7, sp, #0
 8006b16:	6078      	str	r0, [r7, #4]
 8006b18:	6039      	str	r1, [r7, #0]
  HAL_TIM_ChannelStateTypeDef channel_1_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_1);
 8006b1a:	687b      	ldr	r3, [r7, #4]
 8006b1c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8006b20:	73fb      	strb	r3, [r7, #15]
  HAL_TIM_ChannelStateTypeDef channel_2_state = TIM_CHANNEL_STATE_GET(htim, TIM_CHANNEL_2);
 8006b22:	687b      	ldr	r3, [r7, #4]
 8006b24:	f893 303f 	ldrb.w	r3, [r3, #63]	; 0x3f
 8006b28:	73bb      	strb	r3, [r7, #14]
  HAL_TIM_ChannelStateTypeDef complementary_channel_1_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_1);
 8006b2a:	687b      	ldr	r3, [r7, #4]
 8006b2c:	f893 3042 	ldrb.w	r3, [r3, #66]	; 0x42
 8006b30:	737b      	strb	r3, [r7, #13]
  HAL_TIM_ChannelStateTypeDef complementary_channel_2_state = TIM_CHANNEL_N_STATE_GET(htim, TIM_CHANNEL_2);
 8006b32:	687b      	ldr	r3, [r7, #4]
 8006b34:	f893 3043 	ldrb.w	r3, [r3, #67]	; 0x43
 8006b38:	733b      	strb	r3, [r7, #12]

  /* Check the parameters */
  assert_param(IS_TIM_ENCODER_INTERFACE_INSTANCE(htim->Instance));

  /* Set the TIM channel(s) state */
  if (Channel == TIM_CHANNEL_1)
 8006b3a:	683b      	ldr	r3, [r7, #0]
 8006b3c:	2b00      	cmp	r3, #0
 8006b3e:	d110      	bne.n	8006b62 <HAL_TIM_Encoder_Start+0x52>
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b40:	7bfb      	ldrb	r3, [r7, #15]
 8006b42:	2b01      	cmp	r3, #1
 8006b44:	d102      	bne.n	8006b4c <HAL_TIM_Encoder_Start+0x3c>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b46:	7b7b      	ldrb	r3, [r7, #13]
 8006b48:	2b01      	cmp	r3, #1
 8006b4a:	d001      	beq.n	8006b50 <HAL_TIM_Encoder_Start+0x40>
    {
      return HAL_ERROR;
 8006b4c:	2301      	movs	r3, #1
 8006b4e:	e069      	b.n	8006c24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b50:	687b      	ldr	r3, [r7, #4]
 8006b52:	2202      	movs	r2, #2
 8006b54:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b58:	687b      	ldr	r3, [r7, #4]
 8006b5a:	2202      	movs	r2, #2
 8006b5c:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
 8006b60:	e031      	b.n	8006bc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else if (Channel == TIM_CHANNEL_2)
 8006b62:	683b      	ldr	r3, [r7, #0]
 8006b64:	2b04      	cmp	r3, #4
 8006b66:	d110      	bne.n	8006b8a <HAL_TIM_Encoder_Start+0x7a>
  {
    if ((channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b68:	7bbb      	ldrb	r3, [r7, #14]
 8006b6a:	2b01      	cmp	r3, #1
 8006b6c:	d102      	bne.n	8006b74 <HAL_TIM_Encoder_Start+0x64>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b6e:	7b3b      	ldrb	r3, [r7, #12]
 8006b70:	2b01      	cmp	r3, #1
 8006b72:	d001      	beq.n	8006b78 <HAL_TIM_Encoder_Start+0x68>
    {
      return HAL_ERROR;
 8006b74:	2301      	movs	r3, #1
 8006b76:	e055      	b.n	8006c24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b78:	687b      	ldr	r3, [r7, #4]
 8006b7a:	2202      	movs	r2, #2
 8006b7c:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006b80:	687b      	ldr	r3, [r7, #4]
 8006b82:	2202      	movs	r2, #2
 8006b84:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
 8006b88:	e01d      	b.n	8006bc6 <HAL_TIM_Encoder_Start+0xb6>
    }
  }
  else
  {
    if ((channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b8a:	7bfb      	ldrb	r3, [r7, #15]
 8006b8c:	2b01      	cmp	r3, #1
 8006b8e:	d108      	bne.n	8006ba2 <HAL_TIM_Encoder_Start+0x92>
        || (channel_2_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b90:	7bbb      	ldrb	r3, [r7, #14]
 8006b92:	2b01      	cmp	r3, #1
 8006b94:	d105      	bne.n	8006ba2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_1_state != HAL_TIM_CHANNEL_STATE_READY)
 8006b96:	7b7b      	ldrb	r3, [r7, #13]
 8006b98:	2b01      	cmp	r3, #1
 8006b9a:	d102      	bne.n	8006ba2 <HAL_TIM_Encoder_Start+0x92>
        || (complementary_channel_2_state != HAL_TIM_CHANNEL_STATE_READY))
 8006b9c:	7b3b      	ldrb	r3, [r7, #12]
 8006b9e:	2b01      	cmp	r3, #1
 8006ba0:	d001      	beq.n	8006ba6 <HAL_TIM_Encoder_Start+0x96>
    {
      return HAL_ERROR;
 8006ba2:	2301      	movs	r3, #1
 8006ba4:	e03e      	b.n	8006c24 <HAL_TIM_Encoder_Start+0x114>
    }
    else
    {
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006ba6:	687b      	ldr	r3, [r7, #4]
 8006ba8:	2202      	movs	r2, #2
 8006baa:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
      TIM_CHANNEL_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bae:	687b      	ldr	r3, [r7, #4]
 8006bb0:	2202      	movs	r2, #2
 8006bb2:	f883 203f 	strb.w	r2, [r3, #63]	; 0x3f
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_1, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bb6:	687b      	ldr	r3, [r7, #4]
 8006bb8:	2202      	movs	r2, #2
 8006bba:	f883 2042 	strb.w	r2, [r3, #66]	; 0x42
      TIM_CHANNEL_N_STATE_SET(htim, TIM_CHANNEL_2, HAL_TIM_CHANNEL_STATE_BUSY);
 8006bbe:	687b      	ldr	r3, [r7, #4]
 8006bc0:	2202      	movs	r2, #2
 8006bc2:	f883 2043 	strb.w	r2, [r3, #67]	; 0x43
    }
  }

  /* Enable the encoder interface channels */
  switch (Channel)
 8006bc6:	683b      	ldr	r3, [r7, #0]
 8006bc8:	2b00      	cmp	r3, #0
 8006bca:	d003      	beq.n	8006bd4 <HAL_TIM_Encoder_Start+0xc4>
 8006bcc:	683b      	ldr	r3, [r7, #0]
 8006bce:	2b04      	cmp	r3, #4
 8006bd0:	d008      	beq.n	8006be4 <HAL_TIM_Encoder_Start+0xd4>
 8006bd2:	e00f      	b.n	8006bf4 <HAL_TIM_Encoder_Start+0xe4>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bd4:	687b      	ldr	r3, [r7, #4]
 8006bd6:	681b      	ldr	r3, [r3, #0]
 8006bd8:	2201      	movs	r2, #1
 8006bda:	2100      	movs	r1, #0
 8006bdc:	4618      	mov	r0, r3
 8006bde:	f000 fd7d 	bl	80076dc <TIM_CCxChannelCmd>
      break;
 8006be2:	e016      	b.n	8006c12 <HAL_TIM_Encoder_Start+0x102>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006be4:	687b      	ldr	r3, [r7, #4]
 8006be6:	681b      	ldr	r3, [r3, #0]
 8006be8:	2201      	movs	r2, #1
 8006bea:	2104      	movs	r1, #4
 8006bec:	4618      	mov	r0, r3
 8006bee:	f000 fd75 	bl	80076dc <TIM_CCxChannelCmd>
      break;
 8006bf2:	e00e      	b.n	8006c12 <HAL_TIM_Encoder_Start+0x102>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8006bf4:	687b      	ldr	r3, [r7, #4]
 8006bf6:	681b      	ldr	r3, [r3, #0]
 8006bf8:	2201      	movs	r2, #1
 8006bfa:	2100      	movs	r1, #0
 8006bfc:	4618      	mov	r0, r3
 8006bfe:	f000 fd6d 	bl	80076dc <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8006c02:	687b      	ldr	r3, [r7, #4]
 8006c04:	681b      	ldr	r3, [r3, #0]
 8006c06:	2201      	movs	r2, #1
 8006c08:	2104      	movs	r1, #4
 8006c0a:	4618      	mov	r0, r3
 8006c0c:	f000 fd66 	bl	80076dc <TIM_CCxChannelCmd>
      break;
 8006c10:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8006c12:	687b      	ldr	r3, [r7, #4]
 8006c14:	681b      	ldr	r3, [r3, #0]
 8006c16:	681a      	ldr	r2, [r3, #0]
 8006c18:	687b      	ldr	r3, [r7, #4]
 8006c1a:	681b      	ldr	r3, [r3, #0]
 8006c1c:	f042 0201 	orr.w	r2, r2, #1
 8006c20:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8006c22:	2300      	movs	r3, #0
}
 8006c24:	4618      	mov	r0, r3
 8006c26:	3710      	adds	r7, #16
 8006c28:	46bd      	mov	sp, r7
 8006c2a:	bd80      	pop	{r7, pc}

08006c2c <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8006c2c:	b580      	push	{r7, lr}
 8006c2e:	b082      	sub	sp, #8
 8006c30:	af00      	add	r7, sp, #0
 8006c32:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8006c34:	687b      	ldr	r3, [r7, #4]
 8006c36:	681b      	ldr	r3, [r3, #0]
 8006c38:	691b      	ldr	r3, [r3, #16]
 8006c3a:	f003 0302 	and.w	r3, r3, #2
 8006c3e:	2b02      	cmp	r3, #2
 8006c40:	d122      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8006c42:	687b      	ldr	r3, [r7, #4]
 8006c44:	681b      	ldr	r3, [r3, #0]
 8006c46:	68db      	ldr	r3, [r3, #12]
 8006c48:	f003 0302 	and.w	r3, r3, #2
 8006c4c:	2b02      	cmp	r3, #2
 8006c4e:	d11b      	bne.n	8006c88 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8006c50:	687b      	ldr	r3, [r7, #4]
 8006c52:	681b      	ldr	r3, [r3, #0]
 8006c54:	f06f 0202 	mvn.w	r2, #2
 8006c58:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8006c5a:	687b      	ldr	r3, [r7, #4]
 8006c5c:	2201      	movs	r2, #1
 8006c5e:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8006c60:	687b      	ldr	r3, [r7, #4]
 8006c62:	681b      	ldr	r3, [r3, #0]
 8006c64:	699b      	ldr	r3, [r3, #24]
 8006c66:	f003 0303 	and.w	r3, r3, #3
 8006c6a:	2b00      	cmp	r3, #0
 8006c6c:	d003      	beq.n	8006c76 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8006c6e:	6878      	ldr	r0, [r7, #4]
 8006c70:	f000 fa70 	bl	8007154 <HAL_TIM_IC_CaptureCallback>
 8006c74:	e005      	b.n	8006c82 <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8006c76:	6878      	ldr	r0, [r7, #4]
 8006c78:	f000 fa62 	bl	8007140 <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006c7c:	6878      	ldr	r0, [r7, #4]
 8006c7e:	f000 fa73 	bl	8007168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006c82:	687b      	ldr	r3, [r7, #4]
 8006c84:	2200      	movs	r2, #0
 8006c86:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8006c88:	687b      	ldr	r3, [r7, #4]
 8006c8a:	681b      	ldr	r3, [r3, #0]
 8006c8c:	691b      	ldr	r3, [r3, #16]
 8006c8e:	f003 0304 	and.w	r3, r3, #4
 8006c92:	2b04      	cmp	r3, #4
 8006c94:	d122      	bne.n	8006cdc <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8006c96:	687b      	ldr	r3, [r7, #4]
 8006c98:	681b      	ldr	r3, [r3, #0]
 8006c9a:	68db      	ldr	r3, [r3, #12]
 8006c9c:	f003 0304 	and.w	r3, r3, #4
 8006ca0:	2b04      	cmp	r3, #4
 8006ca2:	d11b      	bne.n	8006cdc <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8006ca4:	687b      	ldr	r3, [r7, #4]
 8006ca6:	681b      	ldr	r3, [r3, #0]
 8006ca8:	f06f 0204 	mvn.w	r2, #4
 8006cac:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8006cae:	687b      	ldr	r3, [r7, #4]
 8006cb0:	2202      	movs	r2, #2
 8006cb2:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8006cb4:	687b      	ldr	r3, [r7, #4]
 8006cb6:	681b      	ldr	r3, [r3, #0]
 8006cb8:	699b      	ldr	r3, [r3, #24]
 8006cba:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006cbe:	2b00      	cmp	r3, #0
 8006cc0:	d003      	beq.n	8006cca <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006cc2:	6878      	ldr	r0, [r7, #4]
 8006cc4:	f000 fa46 	bl	8007154 <HAL_TIM_IC_CaptureCallback>
 8006cc8:	e005      	b.n	8006cd6 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006cca:	6878      	ldr	r0, [r7, #4]
 8006ccc:	f000 fa38 	bl	8007140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006cd0:	6878      	ldr	r0, [r7, #4]
 8006cd2:	f000 fa49 	bl	8007168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006cd6:	687b      	ldr	r3, [r7, #4]
 8006cd8:	2200      	movs	r2, #0
 8006cda:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8006cdc:	687b      	ldr	r3, [r7, #4]
 8006cde:	681b      	ldr	r3, [r3, #0]
 8006ce0:	691b      	ldr	r3, [r3, #16]
 8006ce2:	f003 0308 	and.w	r3, r3, #8
 8006ce6:	2b08      	cmp	r3, #8
 8006ce8:	d122      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8006cea:	687b      	ldr	r3, [r7, #4]
 8006cec:	681b      	ldr	r3, [r3, #0]
 8006cee:	68db      	ldr	r3, [r3, #12]
 8006cf0:	f003 0308 	and.w	r3, r3, #8
 8006cf4:	2b08      	cmp	r3, #8
 8006cf6:	d11b      	bne.n	8006d30 <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8006cf8:	687b      	ldr	r3, [r7, #4]
 8006cfa:	681b      	ldr	r3, [r3, #0]
 8006cfc:	f06f 0208 	mvn.w	r2, #8
 8006d00:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8006d02:	687b      	ldr	r3, [r7, #4]
 8006d04:	2204      	movs	r2, #4
 8006d06:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8006d08:	687b      	ldr	r3, [r7, #4]
 8006d0a:	681b      	ldr	r3, [r3, #0]
 8006d0c:	69db      	ldr	r3, [r3, #28]
 8006d0e:	f003 0303 	and.w	r3, r3, #3
 8006d12:	2b00      	cmp	r3, #0
 8006d14:	d003      	beq.n	8006d1e <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d16:	6878      	ldr	r0, [r7, #4]
 8006d18:	f000 fa1c 	bl	8007154 <HAL_TIM_IC_CaptureCallback>
 8006d1c:	e005      	b.n	8006d2a <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d1e:	6878      	ldr	r0, [r7, #4]
 8006d20:	f000 fa0e 	bl	8007140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d24:	6878      	ldr	r0, [r7, #4]
 8006d26:	f000 fa1f 	bl	8007168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d2a:	687b      	ldr	r3, [r7, #4]
 8006d2c:	2200      	movs	r2, #0
 8006d2e:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8006d30:	687b      	ldr	r3, [r7, #4]
 8006d32:	681b      	ldr	r3, [r3, #0]
 8006d34:	691b      	ldr	r3, [r3, #16]
 8006d36:	f003 0310 	and.w	r3, r3, #16
 8006d3a:	2b10      	cmp	r3, #16
 8006d3c:	d122      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8006d3e:	687b      	ldr	r3, [r7, #4]
 8006d40:	681b      	ldr	r3, [r3, #0]
 8006d42:	68db      	ldr	r3, [r3, #12]
 8006d44:	f003 0310 	and.w	r3, r3, #16
 8006d48:	2b10      	cmp	r3, #16
 8006d4a:	d11b      	bne.n	8006d84 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8006d4c:	687b      	ldr	r3, [r7, #4]
 8006d4e:	681b      	ldr	r3, [r3, #0]
 8006d50:	f06f 0210 	mvn.w	r2, #16
 8006d54:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8006d56:	687b      	ldr	r3, [r7, #4]
 8006d58:	2208      	movs	r2, #8
 8006d5a:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8006d5c:	687b      	ldr	r3, [r7, #4]
 8006d5e:	681b      	ldr	r3, [r3, #0]
 8006d60:	69db      	ldr	r3, [r3, #28]
 8006d62:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8006d66:	2b00      	cmp	r3, #0
 8006d68:	d003      	beq.n	8006d72 <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8006d6a:	6878      	ldr	r0, [r7, #4]
 8006d6c:	f000 f9f2 	bl	8007154 <HAL_TIM_IC_CaptureCallback>
 8006d70:	e005      	b.n	8006d7e <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8006d72:	6878      	ldr	r0, [r7, #4]
 8006d74:	f000 f9e4 	bl	8007140 <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8006d78:	6878      	ldr	r0, [r7, #4]
 8006d7a:	f000 f9f5 	bl	8007168 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8006d7e:	687b      	ldr	r3, [r7, #4]
 8006d80:	2200      	movs	r2, #0
 8006d82:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8006d84:	687b      	ldr	r3, [r7, #4]
 8006d86:	681b      	ldr	r3, [r3, #0]
 8006d88:	691b      	ldr	r3, [r3, #16]
 8006d8a:	f003 0301 	and.w	r3, r3, #1
 8006d8e:	2b01      	cmp	r3, #1
 8006d90:	d10e      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8006d92:	687b      	ldr	r3, [r7, #4]
 8006d94:	681b      	ldr	r3, [r3, #0]
 8006d96:	68db      	ldr	r3, [r3, #12]
 8006d98:	f003 0301 	and.w	r3, r3, #1
 8006d9c:	2b01      	cmp	r3, #1
 8006d9e:	d107      	bne.n	8006db0 <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8006da0:	687b      	ldr	r3, [r7, #4]
 8006da2:	681b      	ldr	r3, [r3, #0]
 8006da4:	f06f 0201 	mvn.w	r2, #1
 8006da8:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8006daa:	6878      	ldr	r0, [r7, #4]
 8006dac:	f7fb fe0c 	bl	80029c8 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8006db0:	687b      	ldr	r3, [r7, #4]
 8006db2:	681b      	ldr	r3, [r3, #0]
 8006db4:	691b      	ldr	r3, [r3, #16]
 8006db6:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dba:	2b80      	cmp	r3, #128	; 0x80
 8006dbc:	d10e      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8006dbe:	687b      	ldr	r3, [r7, #4]
 8006dc0:	681b      	ldr	r3, [r3, #0]
 8006dc2:	68db      	ldr	r3, [r3, #12]
 8006dc4:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8006dc8:	2b80      	cmp	r3, #128	; 0x80
 8006dca:	d107      	bne.n	8006ddc <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8006dcc:	687b      	ldr	r3, [r7, #4]
 8006dce:	681b      	ldr	r3, [r3, #0]
 8006dd0:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8006dd4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8006dd6:	6878      	ldr	r0, [r7, #4]
 8006dd8:	f000 fd1e 	bl	8007818 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8006ddc:	687b      	ldr	r3, [r7, #4]
 8006dde:	681b      	ldr	r3, [r3, #0]
 8006de0:	691b      	ldr	r3, [r3, #16]
 8006de2:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006de6:	2b40      	cmp	r3, #64	; 0x40
 8006de8:	d10e      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8006dea:	687b      	ldr	r3, [r7, #4]
 8006dec:	681b      	ldr	r3, [r3, #0]
 8006dee:	68db      	ldr	r3, [r3, #12]
 8006df0:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8006df4:	2b40      	cmp	r3, #64	; 0x40
 8006df6:	d107      	bne.n	8006e08 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8006df8:	687b      	ldr	r3, [r7, #4]
 8006dfa:	681b      	ldr	r3, [r3, #0]
 8006dfc:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8006e00:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8006e02:	6878      	ldr	r0, [r7, #4]
 8006e04:	f000 f9ba 	bl	800717c <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8006e08:	687b      	ldr	r3, [r7, #4]
 8006e0a:	681b      	ldr	r3, [r3, #0]
 8006e0c:	691b      	ldr	r3, [r3, #16]
 8006e0e:	f003 0320 	and.w	r3, r3, #32
 8006e12:	2b20      	cmp	r3, #32
 8006e14:	d10e      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8006e16:	687b      	ldr	r3, [r7, #4]
 8006e18:	681b      	ldr	r3, [r3, #0]
 8006e1a:	68db      	ldr	r3, [r3, #12]
 8006e1c:	f003 0320 	and.w	r3, r3, #32
 8006e20:	2b20      	cmp	r3, #32
 8006e22:	d107      	bne.n	8006e34 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8006e24:	687b      	ldr	r3, [r7, #4]
 8006e26:	681b      	ldr	r3, [r3, #0]
 8006e28:	f06f 0220 	mvn.w	r2, #32
 8006e2c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8006e2e:	6878      	ldr	r0, [r7, #4]
 8006e30:	f000 fce8 	bl	8007804 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8006e34:	bf00      	nop
 8006e36:	3708      	adds	r7, #8
 8006e38:	46bd      	mov	sp, r7
 8006e3a:	bd80      	pop	{r7, pc}

08006e3c <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8006e3c:	b580      	push	{r7, lr}
 8006e3e:	b084      	sub	sp, #16
 8006e40:	af00      	add	r7, sp, #0
 8006e42:	60f8      	str	r0, [r7, #12]
 8006e44:	60b9      	str	r1, [r7, #8]
 8006e46:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8006e48:	68fb      	ldr	r3, [r7, #12]
 8006e4a:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006e4e:	2b01      	cmp	r3, #1
 8006e50:	d101      	bne.n	8006e56 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8006e52:	2302      	movs	r3, #2
 8006e54:	e0ac      	b.n	8006fb0 <HAL_TIM_PWM_ConfigChannel+0x174>
 8006e56:	68fb      	ldr	r3, [r7, #12]
 8006e58:	2201      	movs	r2, #1
 8006e5a:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
 8006e5e:	687b      	ldr	r3, [r7, #4]
 8006e60:	2b0c      	cmp	r3, #12
 8006e62:	f200 809f 	bhi.w	8006fa4 <HAL_TIM_PWM_ConfigChannel+0x168>
 8006e66:	a201      	add	r2, pc, #4	; (adr r2, 8006e6c <HAL_TIM_PWM_ConfigChannel+0x30>)
 8006e68:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8006e6c:	08006ea1 	.word	0x08006ea1
 8006e70:	08006fa5 	.word	0x08006fa5
 8006e74:	08006fa5 	.word	0x08006fa5
 8006e78:	08006fa5 	.word	0x08006fa5
 8006e7c:	08006ee1 	.word	0x08006ee1
 8006e80:	08006fa5 	.word	0x08006fa5
 8006e84:	08006fa5 	.word	0x08006fa5
 8006e88:	08006fa5 	.word	0x08006fa5
 8006e8c:	08006f23 	.word	0x08006f23
 8006e90:	08006fa5 	.word	0x08006fa5
 8006e94:	08006fa5 	.word	0x08006fa5
 8006e98:	08006fa5 	.word	0x08006fa5
 8006e9c:	08006f63 	.word	0x08006f63
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8006ea0:	68fb      	ldr	r3, [r7, #12]
 8006ea2:	681b      	ldr	r3, [r3, #0]
 8006ea4:	68b9      	ldr	r1, [r7, #8]
 8006ea6:	4618      	mov	r0, r3
 8006ea8:	f000 f9f2 	bl	8007290 <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8006eac:	68fb      	ldr	r3, [r7, #12]
 8006eae:	681b      	ldr	r3, [r3, #0]
 8006eb0:	699a      	ldr	r2, [r3, #24]
 8006eb2:	68fb      	ldr	r3, [r7, #12]
 8006eb4:	681b      	ldr	r3, [r3, #0]
 8006eb6:	f042 0208 	orr.w	r2, r2, #8
 8006eba:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8006ebc:	68fb      	ldr	r3, [r7, #12]
 8006ebe:	681b      	ldr	r3, [r3, #0]
 8006ec0:	699a      	ldr	r2, [r3, #24]
 8006ec2:	68fb      	ldr	r3, [r7, #12]
 8006ec4:	681b      	ldr	r3, [r3, #0]
 8006ec6:	f022 0204 	bic.w	r2, r2, #4
 8006eca:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8006ecc:	68fb      	ldr	r3, [r7, #12]
 8006ece:	681b      	ldr	r3, [r3, #0]
 8006ed0:	6999      	ldr	r1, [r3, #24]
 8006ed2:	68bb      	ldr	r3, [r7, #8]
 8006ed4:	691a      	ldr	r2, [r3, #16]
 8006ed6:	68fb      	ldr	r3, [r7, #12]
 8006ed8:	681b      	ldr	r3, [r3, #0]
 8006eda:	430a      	orrs	r2, r1
 8006edc:	619a      	str	r2, [r3, #24]
      break;
 8006ede:	e062      	b.n	8006fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8006ee0:	68fb      	ldr	r3, [r7, #12]
 8006ee2:	681b      	ldr	r3, [r3, #0]
 8006ee4:	68b9      	ldr	r1, [r7, #8]
 8006ee6:	4618      	mov	r0, r3
 8006ee8:	f000 fa38 	bl	800735c <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8006eec:	68fb      	ldr	r3, [r7, #12]
 8006eee:	681b      	ldr	r3, [r3, #0]
 8006ef0:	699a      	ldr	r2, [r3, #24]
 8006ef2:	68fb      	ldr	r3, [r7, #12]
 8006ef4:	681b      	ldr	r3, [r3, #0]
 8006ef6:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006efa:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8006efc:	68fb      	ldr	r3, [r7, #12]
 8006efe:	681b      	ldr	r3, [r3, #0]
 8006f00:	699a      	ldr	r2, [r3, #24]
 8006f02:	68fb      	ldr	r3, [r7, #12]
 8006f04:	681b      	ldr	r3, [r3, #0]
 8006f06:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f0a:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8006f0c:	68fb      	ldr	r3, [r7, #12]
 8006f0e:	681b      	ldr	r3, [r3, #0]
 8006f10:	6999      	ldr	r1, [r3, #24]
 8006f12:	68bb      	ldr	r3, [r7, #8]
 8006f14:	691b      	ldr	r3, [r3, #16]
 8006f16:	021a      	lsls	r2, r3, #8
 8006f18:	68fb      	ldr	r3, [r7, #12]
 8006f1a:	681b      	ldr	r3, [r3, #0]
 8006f1c:	430a      	orrs	r2, r1
 8006f1e:	619a      	str	r2, [r3, #24]
      break;
 8006f20:	e041      	b.n	8006fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8006f22:	68fb      	ldr	r3, [r7, #12]
 8006f24:	681b      	ldr	r3, [r3, #0]
 8006f26:	68b9      	ldr	r1, [r7, #8]
 8006f28:	4618      	mov	r0, r3
 8006f2a:	f000 fa83 	bl	8007434 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8006f2e:	68fb      	ldr	r3, [r7, #12]
 8006f30:	681b      	ldr	r3, [r3, #0]
 8006f32:	69da      	ldr	r2, [r3, #28]
 8006f34:	68fb      	ldr	r3, [r7, #12]
 8006f36:	681b      	ldr	r3, [r3, #0]
 8006f38:	f042 0208 	orr.w	r2, r2, #8
 8006f3c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8006f3e:	68fb      	ldr	r3, [r7, #12]
 8006f40:	681b      	ldr	r3, [r3, #0]
 8006f42:	69da      	ldr	r2, [r3, #28]
 8006f44:	68fb      	ldr	r3, [r7, #12]
 8006f46:	681b      	ldr	r3, [r3, #0]
 8006f48:	f022 0204 	bic.w	r2, r2, #4
 8006f4c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8006f4e:	68fb      	ldr	r3, [r7, #12]
 8006f50:	681b      	ldr	r3, [r3, #0]
 8006f52:	69d9      	ldr	r1, [r3, #28]
 8006f54:	68bb      	ldr	r3, [r7, #8]
 8006f56:	691a      	ldr	r2, [r3, #16]
 8006f58:	68fb      	ldr	r3, [r7, #12]
 8006f5a:	681b      	ldr	r3, [r3, #0]
 8006f5c:	430a      	orrs	r2, r1
 8006f5e:	61da      	str	r2, [r3, #28]
      break;
 8006f60:	e021      	b.n	8006fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8006f62:	68fb      	ldr	r3, [r7, #12]
 8006f64:	681b      	ldr	r3, [r3, #0]
 8006f66:	68b9      	ldr	r1, [r7, #8]
 8006f68:	4618      	mov	r0, r3
 8006f6a:	f000 facd 	bl	8007508 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8006f6e:	68fb      	ldr	r3, [r7, #12]
 8006f70:	681b      	ldr	r3, [r3, #0]
 8006f72:	69da      	ldr	r2, [r3, #28]
 8006f74:	68fb      	ldr	r3, [r7, #12]
 8006f76:	681b      	ldr	r3, [r3, #0]
 8006f78:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8006f7c:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8006f7e:	68fb      	ldr	r3, [r7, #12]
 8006f80:	681b      	ldr	r3, [r3, #0]
 8006f82:	69da      	ldr	r2, [r3, #28]
 8006f84:	68fb      	ldr	r3, [r7, #12]
 8006f86:	681b      	ldr	r3, [r3, #0]
 8006f88:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8006f8c:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8006f8e:	68fb      	ldr	r3, [r7, #12]
 8006f90:	681b      	ldr	r3, [r3, #0]
 8006f92:	69d9      	ldr	r1, [r3, #28]
 8006f94:	68bb      	ldr	r3, [r7, #8]
 8006f96:	691b      	ldr	r3, [r3, #16]
 8006f98:	021a      	lsls	r2, r3, #8
 8006f9a:	68fb      	ldr	r3, [r7, #12]
 8006f9c:	681b      	ldr	r3, [r3, #0]
 8006f9e:	430a      	orrs	r2, r1
 8006fa0:	61da      	str	r2, [r3, #28]
      break;
 8006fa2:	e000      	b.n	8006fa6 <HAL_TIM_PWM_ConfigChannel+0x16a>
    }

    default:
      break;
 8006fa4:	bf00      	nop
  }

  __HAL_UNLOCK(htim);
 8006fa6:	68fb      	ldr	r3, [r7, #12]
 8006fa8:	2200      	movs	r2, #0
 8006faa:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8006fae:	2300      	movs	r3, #0
}
 8006fb0:	4618      	mov	r0, r3
 8006fb2:	3710      	adds	r7, #16
 8006fb4:	46bd      	mov	sp, r7
 8006fb6:	bd80      	pop	{r7, pc}

08006fb8 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8006fb8:	b580      	push	{r7, lr}
 8006fba:	b084      	sub	sp, #16
 8006fbc:	af00      	add	r7, sp, #0
 8006fbe:	6078      	str	r0, [r7, #4]
 8006fc0:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 8006fc2:	687b      	ldr	r3, [r7, #4]
 8006fc4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8006fc8:	2b01      	cmp	r3, #1
 8006fca:	d101      	bne.n	8006fd0 <HAL_TIM_ConfigClockSource+0x18>
 8006fcc:	2302      	movs	r3, #2
 8006fce:	e0b3      	b.n	8007138 <HAL_TIM_ConfigClockSource+0x180>
 8006fd0:	687b      	ldr	r3, [r7, #4]
 8006fd2:	2201      	movs	r2, #1
 8006fd4:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8006fd8:	687b      	ldr	r3, [r7, #4]
 8006fda:	2202      	movs	r2, #2
 8006fdc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 8006fe0:	687b      	ldr	r3, [r7, #4]
 8006fe2:	681b      	ldr	r3, [r3, #0]
 8006fe4:	689b      	ldr	r3, [r3, #8]
 8006fe6:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8006fe8:	68fb      	ldr	r3, [r7, #12]
 8006fea:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 8006fee:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 8006ff0:	68fb      	ldr	r3, [r7, #12]
 8006ff2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8006ff6:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8006ff8:	687b      	ldr	r3, [r7, #4]
 8006ffa:	681b      	ldr	r3, [r3, #0]
 8006ffc:	68fa      	ldr	r2, [r7, #12]
 8006ffe:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 8007000:	683b      	ldr	r3, [r7, #0]
 8007002:	681b      	ldr	r3, [r3, #0]
 8007004:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8007008:	d03e      	beq.n	8007088 <HAL_TIM_ConfigClockSource+0xd0>
 800700a:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800700e:	f200 8087 	bhi.w	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007012:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8007016:	f000 8085 	beq.w	8007124 <HAL_TIM_ConfigClockSource+0x16c>
 800701a:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800701e:	d87f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007020:	2b70      	cmp	r3, #112	; 0x70
 8007022:	d01a      	beq.n	800705a <HAL_TIM_ConfigClockSource+0xa2>
 8007024:	2b70      	cmp	r3, #112	; 0x70
 8007026:	d87b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007028:	2b60      	cmp	r3, #96	; 0x60
 800702a:	d050      	beq.n	80070ce <HAL_TIM_ConfigClockSource+0x116>
 800702c:	2b60      	cmp	r3, #96	; 0x60
 800702e:	d877      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007030:	2b50      	cmp	r3, #80	; 0x50
 8007032:	d03c      	beq.n	80070ae <HAL_TIM_ConfigClockSource+0xf6>
 8007034:	2b50      	cmp	r3, #80	; 0x50
 8007036:	d873      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007038:	2b40      	cmp	r3, #64	; 0x40
 800703a:	d058      	beq.n	80070ee <HAL_TIM_ConfigClockSource+0x136>
 800703c:	2b40      	cmp	r3, #64	; 0x40
 800703e:	d86f      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007040:	2b30      	cmp	r3, #48	; 0x30
 8007042:	d064      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x156>
 8007044:	2b30      	cmp	r3, #48	; 0x30
 8007046:	d86b      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007048:	2b20      	cmp	r3, #32
 800704a:	d060      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x156>
 800704c:	2b20      	cmp	r3, #32
 800704e:	d867      	bhi.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
 8007050:	2b00      	cmp	r3, #0
 8007052:	d05c      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x156>
 8007054:	2b10      	cmp	r3, #16
 8007056:	d05a      	beq.n	800710e <HAL_TIM_ConfigClockSource+0x156>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
        break;
      }

    default:
      break;
 8007058:	e062      	b.n	8007120 <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 800705a:	687b      	ldr	r3, [r7, #4]
 800705c:	6818      	ldr	r0, [r3, #0]
 800705e:	683b      	ldr	r3, [r7, #0]
 8007060:	6899      	ldr	r1, [r3, #8]
 8007062:	683b      	ldr	r3, [r7, #0]
 8007064:	685a      	ldr	r2, [r3, #4]
 8007066:	683b      	ldr	r3, [r7, #0]
 8007068:	68db      	ldr	r3, [r3, #12]
 800706a:	f000 fb17 	bl	800769c <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 800706e:	687b      	ldr	r3, [r7, #4]
 8007070:	681b      	ldr	r3, [r3, #0]
 8007072:	689b      	ldr	r3, [r3, #8]
 8007074:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 8007076:	68fb      	ldr	r3, [r7, #12]
 8007078:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 800707c:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 800707e:	687b      	ldr	r3, [r7, #4]
 8007080:	681b      	ldr	r3, [r3, #0]
 8007082:	68fa      	ldr	r2, [r7, #12]
 8007084:	609a      	str	r2, [r3, #8]
      break;
 8007086:	e04e      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 8007088:	687b      	ldr	r3, [r7, #4]
 800708a:	6818      	ldr	r0, [r3, #0]
 800708c:	683b      	ldr	r3, [r7, #0]
 800708e:	6899      	ldr	r1, [r3, #8]
 8007090:	683b      	ldr	r3, [r7, #0]
 8007092:	685a      	ldr	r2, [r3, #4]
 8007094:	683b      	ldr	r3, [r7, #0]
 8007096:	68db      	ldr	r3, [r3, #12]
 8007098:	f000 fb00 	bl	800769c <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 800709c:	687b      	ldr	r3, [r7, #4]
 800709e:	681b      	ldr	r3, [r3, #0]
 80070a0:	689a      	ldr	r2, [r3, #8]
 80070a2:	687b      	ldr	r3, [r7, #4]
 80070a4:	681b      	ldr	r3, [r3, #0]
 80070a6:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 80070aa:	609a      	str	r2, [r3, #8]
      break;
 80070ac:	e03b      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ae:	687b      	ldr	r3, [r7, #4]
 80070b0:	6818      	ldr	r0, [r3, #0]
 80070b2:	683b      	ldr	r3, [r7, #0]
 80070b4:	6859      	ldr	r1, [r3, #4]
 80070b6:	683b      	ldr	r3, [r7, #0]
 80070b8:	68db      	ldr	r3, [r3, #12]
 80070ba:	461a      	mov	r2, r3
 80070bc:	f000 fa74 	bl	80075a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 80070c0:	687b      	ldr	r3, [r7, #4]
 80070c2:	681b      	ldr	r3, [r3, #0]
 80070c4:	2150      	movs	r1, #80	; 0x50
 80070c6:	4618      	mov	r0, r3
 80070c8:	f000 facd 	bl	8007666 <TIM_ITRx_SetConfig>
      break;
 80070cc:	e02b      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 80070ce:	687b      	ldr	r3, [r7, #4]
 80070d0:	6818      	ldr	r0, [r3, #0]
 80070d2:	683b      	ldr	r3, [r7, #0]
 80070d4:	6859      	ldr	r1, [r3, #4]
 80070d6:	683b      	ldr	r3, [r7, #0]
 80070d8:	68db      	ldr	r3, [r3, #12]
 80070da:	461a      	mov	r2, r3
 80070dc:	f000 fa93 	bl	8007606 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 80070e0:	687b      	ldr	r3, [r7, #4]
 80070e2:	681b      	ldr	r3, [r3, #0]
 80070e4:	2160      	movs	r1, #96	; 0x60
 80070e6:	4618      	mov	r0, r3
 80070e8:	f000 fabd 	bl	8007666 <TIM_ITRx_SetConfig>
      break;
 80070ec:	e01b      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 80070ee:	687b      	ldr	r3, [r7, #4]
 80070f0:	6818      	ldr	r0, [r3, #0]
 80070f2:	683b      	ldr	r3, [r7, #0]
 80070f4:	6859      	ldr	r1, [r3, #4]
 80070f6:	683b      	ldr	r3, [r7, #0]
 80070f8:	68db      	ldr	r3, [r3, #12]
 80070fa:	461a      	mov	r2, r3
 80070fc:	f000 fa54 	bl	80075a8 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 8007100:	687b      	ldr	r3, [r7, #4]
 8007102:	681b      	ldr	r3, [r3, #0]
 8007104:	2140      	movs	r1, #64	; 0x40
 8007106:	4618      	mov	r0, r3
 8007108:	f000 faad 	bl	8007666 <TIM_ITRx_SetConfig>
      break;
 800710c:	e00b      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x16e>
        TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800710e:	687b      	ldr	r3, [r7, #4]
 8007110:	681a      	ldr	r2, [r3, #0]
 8007112:	683b      	ldr	r3, [r7, #0]
 8007114:	681b      	ldr	r3, [r3, #0]
 8007116:	4619      	mov	r1, r3
 8007118:	4610      	mov	r0, r2
 800711a:	f000 faa4 	bl	8007666 <TIM_ITRx_SetConfig>
        break;
 800711e:	e002      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007120:	bf00      	nop
 8007122:	e000      	b.n	8007126 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8007124:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8007126:	687b      	ldr	r3, [r7, #4]
 8007128:	2201      	movs	r2, #1
 800712a:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800712e:	687b      	ldr	r3, [r7, #4]
 8007130:	2200      	movs	r2, #0
 8007132:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8007136:	2300      	movs	r3, #0
}
 8007138:	4618      	mov	r0, r3
 800713a:	3710      	adds	r7, #16
 800713c:	46bd      	mov	sp, r7
 800713e:	bd80      	pop	{r7, pc}

08007140 <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 8007140:	b480      	push	{r7}
 8007142:	b083      	sub	sp, #12
 8007144:	af00      	add	r7, sp, #0
 8007146:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 8007148:	bf00      	nop
 800714a:	370c      	adds	r7, #12
 800714c:	46bd      	mov	sp, r7
 800714e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007152:	4770      	bx	lr

08007154 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 8007154:	b480      	push	{r7}
 8007156:	b083      	sub	sp, #12
 8007158:	af00      	add	r7, sp, #0
 800715a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 800715c:	bf00      	nop
 800715e:	370c      	adds	r7, #12
 8007160:	46bd      	mov	sp, r7
 8007162:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007166:	4770      	bx	lr

08007168 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 8007168:	b480      	push	{r7}
 800716a:	b083      	sub	sp, #12
 800716c:	af00      	add	r7, sp, #0
 800716e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 8007170:	bf00      	nop
 8007172:	370c      	adds	r7, #12
 8007174:	46bd      	mov	sp, r7
 8007176:	f85d 7b04 	ldr.w	r7, [sp], #4
 800717a:	4770      	bx	lr

0800717c <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 800717c:	b480      	push	{r7}
 800717e:	b083      	sub	sp, #12
 8007180:	af00      	add	r7, sp, #0
 8007182:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 8007184:	bf00      	nop
 8007186:	370c      	adds	r7, #12
 8007188:	46bd      	mov	sp, r7
 800718a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800718e:	4770      	bx	lr

08007190 <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 8007190:	b480      	push	{r7}
 8007192:	b085      	sub	sp, #20
 8007194:	af00      	add	r7, sp, #0
 8007196:	6078      	str	r0, [r7, #4]
 8007198:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 800719a:	687b      	ldr	r3, [r7, #4]
 800719c:	681b      	ldr	r3, [r3, #0]
 800719e:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80071a0:	687b      	ldr	r3, [r7, #4]
 80071a2:	4a34      	ldr	r2, [pc, #208]	; (8007274 <TIM_Base_SetConfig+0xe4>)
 80071a4:	4293      	cmp	r3, r2
 80071a6:	d00f      	beq.n	80071c8 <TIM_Base_SetConfig+0x38>
 80071a8:	687b      	ldr	r3, [r7, #4]
 80071aa:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071ae:	d00b      	beq.n	80071c8 <TIM_Base_SetConfig+0x38>
 80071b0:	687b      	ldr	r3, [r7, #4]
 80071b2:	4a31      	ldr	r2, [pc, #196]	; (8007278 <TIM_Base_SetConfig+0xe8>)
 80071b4:	4293      	cmp	r3, r2
 80071b6:	d007      	beq.n	80071c8 <TIM_Base_SetConfig+0x38>
 80071b8:	687b      	ldr	r3, [r7, #4]
 80071ba:	4a30      	ldr	r2, [pc, #192]	; (800727c <TIM_Base_SetConfig+0xec>)
 80071bc:	4293      	cmp	r3, r2
 80071be:	d003      	beq.n	80071c8 <TIM_Base_SetConfig+0x38>
 80071c0:	687b      	ldr	r3, [r7, #4]
 80071c2:	4a2f      	ldr	r2, [pc, #188]	; (8007280 <TIM_Base_SetConfig+0xf0>)
 80071c4:	4293      	cmp	r3, r2
 80071c6:	d108      	bne.n	80071da <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 80071c8:	68fb      	ldr	r3, [r7, #12]
 80071ca:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80071ce:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 80071d0:	683b      	ldr	r3, [r7, #0]
 80071d2:	685b      	ldr	r3, [r3, #4]
 80071d4:	68fa      	ldr	r2, [r7, #12]
 80071d6:	4313      	orrs	r3, r2
 80071d8:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 80071da:	687b      	ldr	r3, [r7, #4]
 80071dc:	4a25      	ldr	r2, [pc, #148]	; (8007274 <TIM_Base_SetConfig+0xe4>)
 80071de:	4293      	cmp	r3, r2
 80071e0:	d01b      	beq.n	800721a <TIM_Base_SetConfig+0x8a>
 80071e2:	687b      	ldr	r3, [r7, #4]
 80071e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80071e8:	d017      	beq.n	800721a <TIM_Base_SetConfig+0x8a>
 80071ea:	687b      	ldr	r3, [r7, #4]
 80071ec:	4a22      	ldr	r2, [pc, #136]	; (8007278 <TIM_Base_SetConfig+0xe8>)
 80071ee:	4293      	cmp	r3, r2
 80071f0:	d013      	beq.n	800721a <TIM_Base_SetConfig+0x8a>
 80071f2:	687b      	ldr	r3, [r7, #4]
 80071f4:	4a21      	ldr	r2, [pc, #132]	; (800727c <TIM_Base_SetConfig+0xec>)
 80071f6:	4293      	cmp	r3, r2
 80071f8:	d00f      	beq.n	800721a <TIM_Base_SetConfig+0x8a>
 80071fa:	687b      	ldr	r3, [r7, #4]
 80071fc:	4a20      	ldr	r2, [pc, #128]	; (8007280 <TIM_Base_SetConfig+0xf0>)
 80071fe:	4293      	cmp	r3, r2
 8007200:	d00b      	beq.n	800721a <TIM_Base_SetConfig+0x8a>
 8007202:	687b      	ldr	r3, [r7, #4]
 8007204:	4a1f      	ldr	r2, [pc, #124]	; (8007284 <TIM_Base_SetConfig+0xf4>)
 8007206:	4293      	cmp	r3, r2
 8007208:	d007      	beq.n	800721a <TIM_Base_SetConfig+0x8a>
 800720a:	687b      	ldr	r3, [r7, #4]
 800720c:	4a1e      	ldr	r2, [pc, #120]	; (8007288 <TIM_Base_SetConfig+0xf8>)
 800720e:	4293      	cmp	r3, r2
 8007210:	d003      	beq.n	800721a <TIM_Base_SetConfig+0x8a>
 8007212:	687b      	ldr	r3, [r7, #4]
 8007214:	4a1d      	ldr	r2, [pc, #116]	; (800728c <TIM_Base_SetConfig+0xfc>)
 8007216:	4293      	cmp	r3, r2
 8007218:	d108      	bne.n	800722c <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 800721a:	68fb      	ldr	r3, [r7, #12]
 800721c:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007220:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 8007222:	683b      	ldr	r3, [r7, #0]
 8007224:	68db      	ldr	r3, [r3, #12]
 8007226:	68fa      	ldr	r2, [r7, #12]
 8007228:	4313      	orrs	r3, r2
 800722a:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 800722c:	68fb      	ldr	r3, [r7, #12]
 800722e:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 8007232:	683b      	ldr	r3, [r7, #0]
 8007234:	695b      	ldr	r3, [r3, #20]
 8007236:	4313      	orrs	r3, r2
 8007238:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 800723a:	687b      	ldr	r3, [r7, #4]
 800723c:	68fa      	ldr	r2, [r7, #12]
 800723e:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 8007240:	683b      	ldr	r3, [r7, #0]
 8007242:	689a      	ldr	r2, [r3, #8]
 8007244:	687b      	ldr	r3, [r7, #4]
 8007246:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 8007248:	683b      	ldr	r3, [r7, #0]
 800724a:	681a      	ldr	r2, [r3, #0]
 800724c:	687b      	ldr	r3, [r7, #4]
 800724e:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 8007250:	687b      	ldr	r3, [r7, #4]
 8007252:	4a08      	ldr	r2, [pc, #32]	; (8007274 <TIM_Base_SetConfig+0xe4>)
 8007254:	4293      	cmp	r3, r2
 8007256:	d103      	bne.n	8007260 <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 8007258:	683b      	ldr	r3, [r7, #0]
 800725a:	691a      	ldr	r2, [r3, #16]
 800725c:	687b      	ldr	r3, [r7, #4]
 800725e:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 8007260:	687b      	ldr	r3, [r7, #4]
 8007262:	2201      	movs	r2, #1
 8007264:	615a      	str	r2, [r3, #20]
}
 8007266:	bf00      	nop
 8007268:	3714      	adds	r7, #20
 800726a:	46bd      	mov	sp, r7
 800726c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007270:	4770      	bx	lr
 8007272:	bf00      	nop
 8007274:	40010000 	.word	0x40010000
 8007278:	40000400 	.word	0x40000400
 800727c:	40000800 	.word	0x40000800
 8007280:	40000c00 	.word	0x40000c00
 8007284:	40014000 	.word	0x40014000
 8007288:	40014400 	.word	0x40014400
 800728c:	40014800 	.word	0x40014800

08007290 <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007290:	b480      	push	{r7}
 8007292:	b087      	sub	sp, #28
 8007294:	af00      	add	r7, sp, #0
 8007296:	6078      	str	r0, [r7, #4]
 8007298:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 800729a:	687b      	ldr	r3, [r7, #4]
 800729c:	6a1b      	ldr	r3, [r3, #32]
 800729e:	f023 0201 	bic.w	r2, r3, #1
 80072a2:	687b      	ldr	r3, [r7, #4]
 80072a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80072a6:	687b      	ldr	r3, [r7, #4]
 80072a8:	6a1b      	ldr	r3, [r3, #32]
 80072aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80072ac:	687b      	ldr	r3, [r7, #4]
 80072ae:	685b      	ldr	r3, [r3, #4]
 80072b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80072b2:	687b      	ldr	r3, [r7, #4]
 80072b4:	699b      	ldr	r3, [r3, #24]
 80072b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 80072b8:	68fb      	ldr	r3, [r7, #12]
 80072ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80072be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 80072c0:	68fb      	ldr	r3, [r7, #12]
 80072c2:	f023 0303 	bic.w	r3, r3, #3
 80072c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80072c8:	683b      	ldr	r3, [r7, #0]
 80072ca:	681b      	ldr	r3, [r3, #0]
 80072cc:	68fa      	ldr	r2, [r7, #12]
 80072ce:	4313      	orrs	r3, r2
 80072d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 80072d2:	697b      	ldr	r3, [r7, #20]
 80072d4:	f023 0302 	bic.w	r3, r3, #2
 80072d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 80072da:	683b      	ldr	r3, [r7, #0]
 80072dc:	689b      	ldr	r3, [r3, #8]
 80072de:	697a      	ldr	r2, [r7, #20]
 80072e0:	4313      	orrs	r3, r2
 80072e2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 80072e4:	687b      	ldr	r3, [r7, #4]
 80072e6:	4a1c      	ldr	r2, [pc, #112]	; (8007358 <TIM_OC1_SetConfig+0xc8>)
 80072e8:	4293      	cmp	r3, r2
 80072ea:	d10c      	bne.n	8007306 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 80072ec:	697b      	ldr	r3, [r7, #20]
 80072ee:	f023 0308 	bic.w	r3, r3, #8
 80072f2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 80072f4:	683b      	ldr	r3, [r7, #0]
 80072f6:	68db      	ldr	r3, [r3, #12]
 80072f8:	697a      	ldr	r2, [r7, #20]
 80072fa:	4313      	orrs	r3, r2
 80072fc:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 80072fe:	697b      	ldr	r3, [r7, #20]
 8007300:	f023 0304 	bic.w	r3, r3, #4
 8007304:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007306:	687b      	ldr	r3, [r7, #4]
 8007308:	4a13      	ldr	r2, [pc, #76]	; (8007358 <TIM_OC1_SetConfig+0xc8>)
 800730a:	4293      	cmp	r3, r2
 800730c:	d111      	bne.n	8007332 <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800730e:	693b      	ldr	r3, [r7, #16]
 8007310:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8007314:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8007316:	693b      	ldr	r3, [r7, #16]
 8007318:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800731c:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800731e:	683b      	ldr	r3, [r7, #0]
 8007320:	695b      	ldr	r3, [r3, #20]
 8007322:	693a      	ldr	r2, [r7, #16]
 8007324:	4313      	orrs	r3, r2
 8007326:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8007328:	683b      	ldr	r3, [r7, #0]
 800732a:	699b      	ldr	r3, [r3, #24]
 800732c:	693a      	ldr	r2, [r7, #16]
 800732e:	4313      	orrs	r3, r2
 8007330:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007332:	687b      	ldr	r3, [r7, #4]
 8007334:	693a      	ldr	r2, [r7, #16]
 8007336:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8007338:	687b      	ldr	r3, [r7, #4]
 800733a:	68fa      	ldr	r2, [r7, #12]
 800733c:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800733e:	683b      	ldr	r3, [r7, #0]
 8007340:	685a      	ldr	r2, [r3, #4]
 8007342:	687b      	ldr	r3, [r7, #4]
 8007344:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007346:	687b      	ldr	r3, [r7, #4]
 8007348:	697a      	ldr	r2, [r7, #20]
 800734a:	621a      	str	r2, [r3, #32]
}
 800734c:	bf00      	nop
 800734e:	371c      	adds	r7, #28
 8007350:	46bd      	mov	sp, r7
 8007352:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007356:	4770      	bx	lr
 8007358:	40010000 	.word	0x40010000

0800735c <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 800735c:	b480      	push	{r7}
 800735e:	b087      	sub	sp, #28
 8007360:	af00      	add	r7, sp, #0
 8007362:	6078      	str	r0, [r7, #4]
 8007364:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007366:	687b      	ldr	r3, [r7, #4]
 8007368:	6a1b      	ldr	r3, [r3, #32]
 800736a:	f023 0210 	bic.w	r2, r3, #16
 800736e:	687b      	ldr	r3, [r7, #4]
 8007370:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8007372:	687b      	ldr	r3, [r7, #4]
 8007374:	6a1b      	ldr	r3, [r3, #32]
 8007376:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007378:	687b      	ldr	r3, [r7, #4]
 800737a:	685b      	ldr	r3, [r3, #4]
 800737c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800737e:	687b      	ldr	r3, [r7, #4]
 8007380:	699b      	ldr	r3, [r3, #24]
 8007382:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 8007384:	68fb      	ldr	r3, [r7, #12]
 8007386:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 800738a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 800738c:	68fb      	ldr	r3, [r7, #12]
 800738e:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8007392:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007394:	683b      	ldr	r3, [r7, #0]
 8007396:	681b      	ldr	r3, [r3, #0]
 8007398:	021b      	lsls	r3, r3, #8
 800739a:	68fa      	ldr	r2, [r7, #12]
 800739c:	4313      	orrs	r3, r2
 800739e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80073a0:	697b      	ldr	r3, [r7, #20]
 80073a2:	f023 0320 	bic.w	r3, r3, #32
 80073a6:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 80073a8:	683b      	ldr	r3, [r7, #0]
 80073aa:	689b      	ldr	r3, [r3, #8]
 80073ac:	011b      	lsls	r3, r3, #4
 80073ae:	697a      	ldr	r2, [r7, #20]
 80073b0:	4313      	orrs	r3, r2
 80073b2:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 80073b4:	687b      	ldr	r3, [r7, #4]
 80073b6:	4a1e      	ldr	r2, [pc, #120]	; (8007430 <TIM_OC2_SetConfig+0xd4>)
 80073b8:	4293      	cmp	r3, r2
 80073ba:	d10d      	bne.n	80073d8 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 80073bc:	697b      	ldr	r3, [r7, #20]
 80073be:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80073c2:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 80073c4:	683b      	ldr	r3, [r7, #0]
 80073c6:	68db      	ldr	r3, [r3, #12]
 80073c8:	011b      	lsls	r3, r3, #4
 80073ca:	697a      	ldr	r2, [r7, #20]
 80073cc:	4313      	orrs	r3, r2
 80073ce:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 80073d0:	697b      	ldr	r3, [r7, #20]
 80073d2:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 80073d6:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80073d8:	687b      	ldr	r3, [r7, #4]
 80073da:	4a15      	ldr	r2, [pc, #84]	; (8007430 <TIM_OC2_SetConfig+0xd4>)
 80073dc:	4293      	cmp	r3, r2
 80073de:	d113      	bne.n	8007408 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 80073e0:	693b      	ldr	r3, [r7, #16]
 80073e2:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80073e6:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 80073e8:	693b      	ldr	r3, [r7, #16]
 80073ea:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80073ee:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 80073f0:	683b      	ldr	r3, [r7, #0]
 80073f2:	695b      	ldr	r3, [r3, #20]
 80073f4:	009b      	lsls	r3, r3, #2
 80073f6:	693a      	ldr	r2, [r7, #16]
 80073f8:	4313      	orrs	r3, r2
 80073fa:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 80073fc:	683b      	ldr	r3, [r7, #0]
 80073fe:	699b      	ldr	r3, [r3, #24]
 8007400:	009b      	lsls	r3, r3, #2
 8007402:	693a      	ldr	r2, [r7, #16]
 8007404:	4313      	orrs	r3, r2
 8007406:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8007408:	687b      	ldr	r3, [r7, #4]
 800740a:	693a      	ldr	r2, [r7, #16]
 800740c:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800740e:	687b      	ldr	r3, [r7, #4]
 8007410:	68fa      	ldr	r2, [r7, #12]
 8007412:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8007414:	683b      	ldr	r3, [r7, #0]
 8007416:	685a      	ldr	r2, [r3, #4]
 8007418:	687b      	ldr	r3, [r7, #4]
 800741a:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800741c:	687b      	ldr	r3, [r7, #4]
 800741e:	697a      	ldr	r2, [r7, #20]
 8007420:	621a      	str	r2, [r3, #32]
}
 8007422:	bf00      	nop
 8007424:	371c      	adds	r7, #28
 8007426:	46bd      	mov	sp, r7
 8007428:	f85d 7b04 	ldr.w	r7, [sp], #4
 800742c:	4770      	bx	lr
 800742e:	bf00      	nop
 8007430:	40010000 	.word	0x40010000

08007434 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007434:	b480      	push	{r7}
 8007436:	b087      	sub	sp, #28
 8007438:	af00      	add	r7, sp, #0
 800743a:	6078      	str	r0, [r7, #4]
 800743c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800743e:	687b      	ldr	r3, [r7, #4]
 8007440:	6a1b      	ldr	r3, [r3, #32]
 8007442:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 8007446:	687b      	ldr	r3, [r7, #4]
 8007448:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800744a:	687b      	ldr	r3, [r7, #4]
 800744c:	6a1b      	ldr	r3, [r3, #32]
 800744e:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007450:	687b      	ldr	r3, [r7, #4]
 8007452:	685b      	ldr	r3, [r3, #4]
 8007454:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8007456:	687b      	ldr	r3, [r7, #4]
 8007458:	69db      	ldr	r3, [r3, #28]
 800745a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 800745c:	68fb      	ldr	r3, [r7, #12]
 800745e:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007462:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 8007464:	68fb      	ldr	r3, [r7, #12]
 8007466:	f023 0303 	bic.w	r3, r3, #3
 800746a:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 800746c:	683b      	ldr	r3, [r7, #0]
 800746e:	681b      	ldr	r3, [r3, #0]
 8007470:	68fa      	ldr	r2, [r7, #12]
 8007472:	4313      	orrs	r3, r2
 8007474:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 8007476:	697b      	ldr	r3, [r7, #20]
 8007478:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 800747c:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 800747e:	683b      	ldr	r3, [r7, #0]
 8007480:	689b      	ldr	r3, [r3, #8]
 8007482:	021b      	lsls	r3, r3, #8
 8007484:	697a      	ldr	r2, [r7, #20]
 8007486:	4313      	orrs	r3, r2
 8007488:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 800748a:	687b      	ldr	r3, [r7, #4]
 800748c:	4a1d      	ldr	r2, [pc, #116]	; (8007504 <TIM_OC3_SetConfig+0xd0>)
 800748e:	4293      	cmp	r3, r2
 8007490:	d10d      	bne.n	80074ae <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 8007492:	697b      	ldr	r3, [r7, #20]
 8007494:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 8007498:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 800749a:	683b      	ldr	r3, [r7, #0]
 800749c:	68db      	ldr	r3, [r3, #12]
 800749e:	021b      	lsls	r3, r3, #8
 80074a0:	697a      	ldr	r2, [r7, #20]
 80074a2:	4313      	orrs	r3, r2
 80074a4:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 80074a6:	697b      	ldr	r3, [r7, #20]
 80074a8:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 80074ac:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80074ae:	687b      	ldr	r3, [r7, #4]
 80074b0:	4a14      	ldr	r2, [pc, #80]	; (8007504 <TIM_OC3_SetConfig+0xd0>)
 80074b2:	4293      	cmp	r3, r2
 80074b4:	d113      	bne.n	80074de <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 80074b6:	693b      	ldr	r3, [r7, #16]
 80074b8:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 80074bc:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 80074be:	693b      	ldr	r3, [r7, #16]
 80074c0:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80074c4:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 80074c6:	683b      	ldr	r3, [r7, #0]
 80074c8:	695b      	ldr	r3, [r3, #20]
 80074ca:	011b      	lsls	r3, r3, #4
 80074cc:	693a      	ldr	r2, [r7, #16]
 80074ce:	4313      	orrs	r3, r2
 80074d0:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 80074d2:	683b      	ldr	r3, [r7, #0]
 80074d4:	699b      	ldr	r3, [r3, #24]
 80074d6:	011b      	lsls	r3, r3, #4
 80074d8:	693a      	ldr	r2, [r7, #16]
 80074da:	4313      	orrs	r3, r2
 80074dc:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80074de:	687b      	ldr	r3, [r7, #4]
 80074e0:	693a      	ldr	r2, [r7, #16]
 80074e2:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80074e4:	687b      	ldr	r3, [r7, #4]
 80074e6:	68fa      	ldr	r2, [r7, #12]
 80074e8:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 80074ea:	683b      	ldr	r3, [r7, #0]
 80074ec:	685a      	ldr	r2, [r3, #4]
 80074ee:	687b      	ldr	r3, [r7, #4]
 80074f0:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80074f2:	687b      	ldr	r3, [r7, #4]
 80074f4:	697a      	ldr	r2, [r7, #20]
 80074f6:	621a      	str	r2, [r3, #32]
}
 80074f8:	bf00      	nop
 80074fa:	371c      	adds	r7, #28
 80074fc:	46bd      	mov	sp, r7
 80074fe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007502:	4770      	bx	lr
 8007504:	40010000 	.word	0x40010000

08007508 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The output configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8007508:	b480      	push	{r7}
 800750a:	b087      	sub	sp, #28
 800750c:	af00      	add	r7, sp, #0
 800750e:	6078      	str	r0, [r7, #4]
 8007510:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 8007512:	687b      	ldr	r3, [r7, #4]
 8007514:	6a1b      	ldr	r3, [r3, #32]
 8007516:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 800751a:	687b      	ldr	r3, [r7, #4]
 800751c:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800751e:	687b      	ldr	r3, [r7, #4]
 8007520:	6a1b      	ldr	r3, [r3, #32]
 8007522:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8007524:	687b      	ldr	r3, [r7, #4]
 8007526:	685b      	ldr	r3, [r3, #4]
 8007528:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 800752a:	687b      	ldr	r3, [r7, #4]
 800752c:	69db      	ldr	r3, [r3, #28]
 800752e:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 8007530:	68fb      	ldr	r3, [r7, #12]
 8007532:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8007536:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8007538:	68fb      	ldr	r3, [r7, #12]
 800753a:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800753e:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 8007540:	683b      	ldr	r3, [r7, #0]
 8007542:	681b      	ldr	r3, [r3, #0]
 8007544:	021b      	lsls	r3, r3, #8
 8007546:	68fa      	ldr	r2, [r7, #12]
 8007548:	4313      	orrs	r3, r2
 800754a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 800754c:	693b      	ldr	r3, [r7, #16]
 800754e:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8007552:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 8007554:	683b      	ldr	r3, [r7, #0]
 8007556:	689b      	ldr	r3, [r3, #8]
 8007558:	031b      	lsls	r3, r3, #12
 800755a:	693a      	ldr	r2, [r7, #16]
 800755c:	4313      	orrs	r3, r2
 800755e:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8007560:	687b      	ldr	r3, [r7, #4]
 8007562:	4a10      	ldr	r2, [pc, #64]	; (80075a4 <TIM_OC4_SetConfig+0x9c>)
 8007564:	4293      	cmp	r3, r2
 8007566:	d109      	bne.n	800757c <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 8007568:	697b      	ldr	r3, [r7, #20]
 800756a:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 800756e:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 8007570:	683b      	ldr	r3, [r7, #0]
 8007572:	695b      	ldr	r3, [r3, #20]
 8007574:	019b      	lsls	r3, r3, #6
 8007576:	697a      	ldr	r2, [r7, #20]
 8007578:	4313      	orrs	r3, r2
 800757a:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800757c:	687b      	ldr	r3, [r7, #4]
 800757e:	697a      	ldr	r2, [r7, #20]
 8007580:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8007582:	687b      	ldr	r3, [r7, #4]
 8007584:	68fa      	ldr	r2, [r7, #12]
 8007586:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 8007588:	683b      	ldr	r3, [r7, #0]
 800758a:	685a      	ldr	r2, [r3, #4]
 800758c:	687b      	ldr	r3, [r7, #4]
 800758e:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8007590:	687b      	ldr	r3, [r7, #4]
 8007592:	693a      	ldr	r2, [r7, #16]
 8007594:	621a      	str	r2, [r3, #32]
}
 8007596:	bf00      	nop
 8007598:	371c      	adds	r7, #28
 800759a:	46bd      	mov	sp, r7
 800759c:	f85d 7b04 	ldr.w	r7, [sp], #4
 80075a0:	4770      	bx	lr
 80075a2:	bf00      	nop
 80075a4:	40010000 	.word	0x40010000

080075a8 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 80075a8:	b480      	push	{r7}
 80075aa:	b087      	sub	sp, #28
 80075ac:	af00      	add	r7, sp, #0
 80075ae:	60f8      	str	r0, [r7, #12]
 80075b0:	60b9      	str	r1, [r7, #8]
 80075b2:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 80075b4:	68fb      	ldr	r3, [r7, #12]
 80075b6:	6a1b      	ldr	r3, [r3, #32]
 80075b8:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80075ba:	68fb      	ldr	r3, [r7, #12]
 80075bc:	6a1b      	ldr	r3, [r3, #32]
 80075be:	f023 0201 	bic.w	r2, r3, #1
 80075c2:	68fb      	ldr	r3, [r7, #12]
 80075c4:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 80075c6:	68fb      	ldr	r3, [r7, #12]
 80075c8:	699b      	ldr	r3, [r3, #24]
 80075ca:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 80075cc:	693b      	ldr	r3, [r7, #16]
 80075ce:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 80075d2:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 80075d4:	687b      	ldr	r3, [r7, #4]
 80075d6:	011b      	lsls	r3, r3, #4
 80075d8:	693a      	ldr	r2, [r7, #16]
 80075da:	4313      	orrs	r3, r2
 80075dc:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 80075de:	697b      	ldr	r3, [r7, #20]
 80075e0:	f023 030a 	bic.w	r3, r3, #10
 80075e4:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 80075e6:	697a      	ldr	r2, [r7, #20]
 80075e8:	68bb      	ldr	r3, [r7, #8]
 80075ea:	4313      	orrs	r3, r2
 80075ec:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 80075ee:	68fb      	ldr	r3, [r7, #12]
 80075f0:	693a      	ldr	r2, [r7, #16]
 80075f2:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80075f4:	68fb      	ldr	r3, [r7, #12]
 80075f6:	697a      	ldr	r2, [r7, #20]
 80075f8:	621a      	str	r2, [r3, #32]
}
 80075fa:	bf00      	nop
 80075fc:	371c      	adds	r7, #28
 80075fe:	46bd      	mov	sp, r7
 8007600:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007604:	4770      	bx	lr

08007606 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8007606:	b480      	push	{r7}
 8007608:	b087      	sub	sp, #28
 800760a:	af00      	add	r7, sp, #0
 800760c:	60f8      	str	r0, [r7, #12]
 800760e:	60b9      	str	r1, [r7, #8]
 8007610:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 8007612:	68fb      	ldr	r3, [r7, #12]
 8007614:	6a1b      	ldr	r3, [r3, #32]
 8007616:	f023 0210 	bic.w	r2, r3, #16
 800761a:	68fb      	ldr	r3, [r7, #12]
 800761c:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800761e:	68fb      	ldr	r3, [r7, #12]
 8007620:	699b      	ldr	r3, [r3, #24]
 8007622:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8007624:	68fb      	ldr	r3, [r7, #12]
 8007626:	6a1b      	ldr	r3, [r3, #32]
 8007628:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 800762a:	697b      	ldr	r3, [r7, #20]
 800762c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8007630:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 8007632:	687b      	ldr	r3, [r7, #4]
 8007634:	031b      	lsls	r3, r3, #12
 8007636:	697a      	ldr	r2, [r7, #20]
 8007638:	4313      	orrs	r3, r2
 800763a:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 800763c:	693b      	ldr	r3, [r7, #16]
 800763e:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 8007642:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 8007644:	68bb      	ldr	r3, [r7, #8]
 8007646:	011b      	lsls	r3, r3, #4
 8007648:	693a      	ldr	r2, [r7, #16]
 800764a:	4313      	orrs	r3, r2
 800764c:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 800764e:	68fb      	ldr	r3, [r7, #12]
 8007650:	697a      	ldr	r2, [r7, #20]
 8007652:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8007654:	68fb      	ldr	r3, [r7, #12]
 8007656:	693a      	ldr	r2, [r7, #16]
 8007658:	621a      	str	r2, [r3, #32]
}
 800765a:	bf00      	nop
 800765c:	371c      	adds	r7, #28
 800765e:	46bd      	mov	sp, r7
 8007660:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007664:	4770      	bx	lr

08007666 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 8007666:	b480      	push	{r7}
 8007668:	b085      	sub	sp, #20
 800766a:	af00      	add	r7, sp, #0
 800766c:	6078      	str	r0, [r7, #4]
 800766e:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 8007670:	687b      	ldr	r3, [r7, #4]
 8007672:	689b      	ldr	r3, [r3, #8]
 8007674:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 8007676:	68fb      	ldr	r3, [r7, #12]
 8007678:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800767c:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 800767e:	683a      	ldr	r2, [r7, #0]
 8007680:	68fb      	ldr	r3, [r7, #12]
 8007682:	4313      	orrs	r3, r2
 8007684:	f043 0307 	orr.w	r3, r3, #7
 8007688:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 800768a:	687b      	ldr	r3, [r7, #4]
 800768c:	68fa      	ldr	r2, [r7, #12]
 800768e:	609a      	str	r2, [r3, #8]
}
 8007690:	bf00      	nop
 8007692:	3714      	adds	r7, #20
 8007694:	46bd      	mov	sp, r7
 8007696:	f85d 7b04 	ldr.w	r7, [sp], #4
 800769a:	4770      	bx	lr

0800769c <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 800769c:	b480      	push	{r7}
 800769e:	b087      	sub	sp, #28
 80076a0:	af00      	add	r7, sp, #0
 80076a2:	60f8      	str	r0, [r7, #12]
 80076a4:	60b9      	str	r1, [r7, #8]
 80076a6:	607a      	str	r2, [r7, #4]
 80076a8:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 80076aa:	68fb      	ldr	r3, [r7, #12]
 80076ac:	689b      	ldr	r3, [r3, #8]
 80076ae:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 80076b0:	697b      	ldr	r3, [r7, #20]
 80076b2:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 80076b6:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 80076b8:	683b      	ldr	r3, [r7, #0]
 80076ba:	021a      	lsls	r2, r3, #8
 80076bc:	687b      	ldr	r3, [r7, #4]
 80076be:	431a      	orrs	r2, r3
 80076c0:	68bb      	ldr	r3, [r7, #8]
 80076c2:	4313      	orrs	r3, r2
 80076c4:	697a      	ldr	r2, [r7, #20]
 80076c6:	4313      	orrs	r3, r2
 80076c8:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80076ca:	68fb      	ldr	r3, [r7, #12]
 80076cc:	697a      	ldr	r2, [r7, #20]
 80076ce:	609a      	str	r2, [r3, #8]
}
 80076d0:	bf00      	nop
 80076d2:	371c      	adds	r7, #28
 80076d4:	46bd      	mov	sp, r7
 80076d6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80076da:	4770      	bx	lr

080076dc <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 80076dc:	b480      	push	{r7}
 80076de:	b087      	sub	sp, #28
 80076e0:	af00      	add	r7, sp, #0
 80076e2:	60f8      	str	r0, [r7, #12]
 80076e4:	60b9      	str	r1, [r7, #8]
 80076e6:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 80076e8:	68bb      	ldr	r3, [r7, #8]
 80076ea:	f003 031f 	and.w	r3, r3, #31
 80076ee:	2201      	movs	r2, #1
 80076f0:	fa02 f303 	lsl.w	r3, r2, r3
 80076f4:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 80076f6:	68fb      	ldr	r3, [r7, #12]
 80076f8:	6a1a      	ldr	r2, [r3, #32]
 80076fa:	697b      	ldr	r3, [r7, #20]
 80076fc:	43db      	mvns	r3, r3
 80076fe:	401a      	ands	r2, r3
 8007700:	68fb      	ldr	r3, [r7, #12]
 8007702:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8007704:	68fb      	ldr	r3, [r7, #12]
 8007706:	6a1a      	ldr	r2, [r3, #32]
 8007708:	68bb      	ldr	r3, [r7, #8]
 800770a:	f003 031f 	and.w	r3, r3, #31
 800770e:	6879      	ldr	r1, [r7, #4]
 8007710:	fa01 f303 	lsl.w	r3, r1, r3
 8007714:	431a      	orrs	r2, r3
 8007716:	68fb      	ldr	r3, [r7, #12]
 8007718:	621a      	str	r2, [r3, #32]
}
 800771a:	bf00      	nop
 800771c:	371c      	adds	r7, #28
 800771e:	46bd      	mov	sp, r7
 8007720:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007724:	4770      	bx	lr
	...

08007728 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8007728:	b480      	push	{r7}
 800772a:	b085      	sub	sp, #20
 800772c:	af00      	add	r7, sp, #0
 800772e:	6078      	str	r0, [r7, #4]
 8007730:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 8007732:	687b      	ldr	r3, [r7, #4]
 8007734:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8007738:	2b01      	cmp	r3, #1
 800773a:	d101      	bne.n	8007740 <HAL_TIMEx_MasterConfigSynchronization+0x18>
 800773c:	2302      	movs	r3, #2
 800773e:	e050      	b.n	80077e2 <HAL_TIMEx_MasterConfigSynchronization+0xba>
 8007740:	687b      	ldr	r3, [r7, #4]
 8007742:	2201      	movs	r2, #1
 8007744:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 8007748:	687b      	ldr	r3, [r7, #4]
 800774a:	2202      	movs	r2, #2
 800774c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 8007750:	687b      	ldr	r3, [r7, #4]
 8007752:	681b      	ldr	r3, [r3, #0]
 8007754:	685b      	ldr	r3, [r3, #4]
 8007756:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8007758:	687b      	ldr	r3, [r7, #4]
 800775a:	681b      	ldr	r3, [r3, #0]
 800775c:	689b      	ldr	r3, [r3, #8]
 800775e:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 8007760:	68fb      	ldr	r3, [r7, #12]
 8007762:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 8007766:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 8007768:	683b      	ldr	r3, [r7, #0]
 800776a:	681b      	ldr	r3, [r3, #0]
 800776c:	68fa      	ldr	r2, [r7, #12]
 800776e:	4313      	orrs	r3, r2
 8007770:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 8007772:	687b      	ldr	r3, [r7, #4]
 8007774:	681b      	ldr	r3, [r3, #0]
 8007776:	68fa      	ldr	r2, [r7, #12]
 8007778:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 800777a:	687b      	ldr	r3, [r7, #4]
 800777c:	681b      	ldr	r3, [r3, #0]
 800777e:	4a1c      	ldr	r2, [pc, #112]	; (80077f0 <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 8007780:	4293      	cmp	r3, r2
 8007782:	d018      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007784:	687b      	ldr	r3, [r7, #4]
 8007786:	681b      	ldr	r3, [r3, #0]
 8007788:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800778c:	d013      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 800778e:	687b      	ldr	r3, [r7, #4]
 8007790:	681b      	ldr	r3, [r3, #0]
 8007792:	4a18      	ldr	r2, [pc, #96]	; (80077f4 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 8007794:	4293      	cmp	r3, r2
 8007796:	d00e      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8007798:	687b      	ldr	r3, [r7, #4]
 800779a:	681b      	ldr	r3, [r3, #0]
 800779c:	4a16      	ldr	r2, [pc, #88]	; (80077f8 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 800779e:	4293      	cmp	r3, r2
 80077a0:	d009      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077a2:	687b      	ldr	r3, [r7, #4]
 80077a4:	681b      	ldr	r3, [r3, #0]
 80077a6:	4a15      	ldr	r2, [pc, #84]	; (80077fc <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 80077a8:	4293      	cmp	r3, r2
 80077aa:	d004      	beq.n	80077b6 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80077ac:	687b      	ldr	r3, [r7, #4]
 80077ae:	681b      	ldr	r3, [r3, #0]
 80077b0:	4a13      	ldr	r2, [pc, #76]	; (8007800 <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 80077b2:	4293      	cmp	r3, r2
 80077b4:	d10c      	bne.n	80077d0 <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 80077b6:	68bb      	ldr	r3, [r7, #8]
 80077b8:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 80077bc:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 80077be:	683b      	ldr	r3, [r7, #0]
 80077c0:	685b      	ldr	r3, [r3, #4]
 80077c2:	68ba      	ldr	r2, [r7, #8]
 80077c4:	4313      	orrs	r3, r2
 80077c6:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 80077c8:	687b      	ldr	r3, [r7, #4]
 80077ca:	681b      	ldr	r3, [r3, #0]
 80077cc:	68ba      	ldr	r2, [r7, #8]
 80077ce:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 80077d0:	687b      	ldr	r3, [r7, #4]
 80077d2:	2201      	movs	r2, #1
 80077d4:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 80077d8:	687b      	ldr	r3, [r7, #4]
 80077da:	2200      	movs	r2, #0
 80077dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 80077e0:	2300      	movs	r3, #0
}
 80077e2:	4618      	mov	r0, r3
 80077e4:	3714      	adds	r7, #20
 80077e6:	46bd      	mov	sp, r7
 80077e8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80077ec:	4770      	bx	lr
 80077ee:	bf00      	nop
 80077f0:	40010000 	.word	0x40010000
 80077f4:	40000400 	.word	0x40000400
 80077f8:	40000800 	.word	0x40000800
 80077fc:	40000c00 	.word	0x40000c00
 8007800:	40014000 	.word	0x40014000

08007804 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8007804:	b480      	push	{r7}
 8007806:	b083      	sub	sp, #12
 8007808:	af00      	add	r7, sp, #0
 800780a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 800780c:	bf00      	nop
 800780e:	370c      	adds	r7, #12
 8007810:	46bd      	mov	sp, r7
 8007812:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007816:	4770      	bx	lr

08007818 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8007818:	b480      	push	{r7}
 800781a:	b083      	sub	sp, #12
 800781c:	af00      	add	r7, sp, #0
 800781e:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 8007820:	bf00      	nop
 8007822:	370c      	adds	r7, #12
 8007824:	46bd      	mov	sp, r7
 8007826:	f85d 7b04 	ldr.w	r7, [sp], #4
 800782a:	4770      	bx	lr

0800782c <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 800782c:	b580      	push	{r7, lr}
 800782e:	b082      	sub	sp, #8
 8007830:	af00      	add	r7, sp, #0
 8007832:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8007834:	687b      	ldr	r3, [r7, #4]
 8007836:	2b00      	cmp	r3, #0
 8007838:	d101      	bne.n	800783e <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 800783a:	2301      	movs	r3, #1
 800783c:	e03f      	b.n	80078be <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800783e:	687b      	ldr	r3, [r7, #4]
 8007840:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007844:	b2db      	uxtb	r3, r3
 8007846:	2b00      	cmp	r3, #0
 8007848:	d106      	bne.n	8007858 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 800784a:	687b      	ldr	r3, [r7, #4]
 800784c:	2200      	movs	r2, #0
 800784e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 8007852:	6878      	ldr	r0, [r7, #4]
 8007854:	f7fb fa3a 	bl	8002ccc <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 8007858:	687b      	ldr	r3, [r7, #4]
 800785a:	2224      	movs	r2, #36	; 0x24
 800785c:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 8007860:	687b      	ldr	r3, [r7, #4]
 8007862:	681b      	ldr	r3, [r3, #0]
 8007864:	68da      	ldr	r2, [r3, #12]
 8007866:	687b      	ldr	r3, [r7, #4]
 8007868:	681b      	ldr	r3, [r3, #0]
 800786a:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 800786e:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 8007870:	6878      	ldr	r0, [r7, #4]
 8007872:	f000 fd51 	bl	8008318 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 8007876:	687b      	ldr	r3, [r7, #4]
 8007878:	681b      	ldr	r3, [r3, #0]
 800787a:	691a      	ldr	r2, [r3, #16]
 800787c:	687b      	ldr	r3, [r7, #4]
 800787e:	681b      	ldr	r3, [r3, #0]
 8007880:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 8007884:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 8007886:	687b      	ldr	r3, [r7, #4]
 8007888:	681b      	ldr	r3, [r3, #0]
 800788a:	695a      	ldr	r2, [r3, #20]
 800788c:	687b      	ldr	r3, [r7, #4]
 800788e:	681b      	ldr	r3, [r3, #0]
 8007890:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 8007894:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 8007896:	687b      	ldr	r3, [r7, #4]
 8007898:	681b      	ldr	r3, [r3, #0]
 800789a:	68da      	ldr	r2, [r3, #12]
 800789c:	687b      	ldr	r3, [r7, #4]
 800789e:	681b      	ldr	r3, [r3, #0]
 80078a0:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 80078a4:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 80078a6:	687b      	ldr	r3, [r7, #4]
 80078a8:	2200      	movs	r2, #0
 80078aa:	641a      	str	r2, [r3, #64]	; 0x40
  huart->gState = HAL_UART_STATE_READY;
 80078ac:	687b      	ldr	r3, [r7, #4]
 80078ae:	2220      	movs	r2, #32
 80078b0:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
  huart->RxState = HAL_UART_STATE_READY;
 80078b4:	687b      	ldr	r3, [r7, #4]
 80078b6:	2220      	movs	r2, #32
 80078b8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  return HAL_OK;
 80078bc:	2300      	movs	r3, #0
}
 80078be:	4618      	mov	r0, r3
 80078c0:	3708      	adds	r7, #8
 80078c2:	46bd      	mov	sp, r7
 80078c4:	bd80      	pop	{r7, pc}
	...

080078c8 <HAL_UART_Transmit_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be sent
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Transmit_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80078c8:	b580      	push	{r7, lr}
 80078ca:	b086      	sub	sp, #24
 80078cc:	af00      	add	r7, sp, #0
 80078ce:	60f8      	str	r0, [r7, #12]
 80078d0:	60b9      	str	r1, [r7, #8]
 80078d2:	4613      	mov	r3, r2
 80078d4:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  /* Check that a Tx process is not already ongoing */
  if (huart->gState == HAL_UART_STATE_READY)
 80078d6:	68fb      	ldr	r3, [r7, #12]
 80078d8:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 80078dc:	b2db      	uxtb	r3, r3
 80078de:	2b20      	cmp	r3, #32
 80078e0:	d153      	bne.n	800798a <HAL_UART_Transmit_DMA+0xc2>
  {
    if ((pData == NULL) || (Size == 0U))
 80078e2:	68bb      	ldr	r3, [r7, #8]
 80078e4:	2b00      	cmp	r3, #0
 80078e6:	d002      	beq.n	80078ee <HAL_UART_Transmit_DMA+0x26>
 80078e8:	88fb      	ldrh	r3, [r7, #6]
 80078ea:	2b00      	cmp	r3, #0
 80078ec:	d101      	bne.n	80078f2 <HAL_UART_Transmit_DMA+0x2a>
    {
      return HAL_ERROR;
 80078ee:	2301      	movs	r3, #1
 80078f0:	e04c      	b.n	800798c <HAL_UART_Transmit_DMA+0xc4>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80078f2:	68fb      	ldr	r3, [r7, #12]
 80078f4:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80078f8:	2b01      	cmp	r3, #1
 80078fa:	d101      	bne.n	8007900 <HAL_UART_Transmit_DMA+0x38>
 80078fc:	2302      	movs	r3, #2
 80078fe:	e045      	b.n	800798c <HAL_UART_Transmit_DMA+0xc4>
 8007900:	68fb      	ldr	r3, [r7, #12]
 8007902:	2201      	movs	r2, #1
 8007904:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    huart->pTxBuffPtr = pData;
 8007908:	68ba      	ldr	r2, [r7, #8]
 800790a:	68fb      	ldr	r3, [r7, #12]
 800790c:	621a      	str	r2, [r3, #32]
    huart->TxXferSize = Size;
 800790e:	68fb      	ldr	r3, [r7, #12]
 8007910:	88fa      	ldrh	r2, [r7, #6]
 8007912:	849a      	strh	r2, [r3, #36]	; 0x24
    huart->TxXferCount = Size;
 8007914:	68fb      	ldr	r3, [r7, #12]
 8007916:	88fa      	ldrh	r2, [r7, #6]
 8007918:	84da      	strh	r2, [r3, #38]	; 0x26

    huart->ErrorCode = HAL_UART_ERROR_NONE;
 800791a:	68fb      	ldr	r3, [r7, #12]
 800791c:	2200      	movs	r2, #0
 800791e:	641a      	str	r2, [r3, #64]	; 0x40
    huart->gState = HAL_UART_STATE_BUSY_TX;
 8007920:	68fb      	ldr	r3, [r7, #12]
 8007922:	2221      	movs	r2, #33	; 0x21
 8007924:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

    /* Set the UART DMA transfer complete callback */
    huart->hdmatx->XferCpltCallback = UART_DMATransmitCplt;
 8007928:	68fb      	ldr	r3, [r7, #12]
 800792a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800792c:	4a19      	ldr	r2, [pc, #100]	; (8007994 <HAL_UART_Transmit_DMA+0xcc>)
 800792e:	63da      	str	r2, [r3, #60]	; 0x3c

    /* Set the UART DMA Half transfer complete callback */
    huart->hdmatx->XferHalfCpltCallback = UART_DMATxHalfCplt;
 8007930:	68fb      	ldr	r3, [r7, #12]
 8007932:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007934:	4a18      	ldr	r2, [pc, #96]	; (8007998 <HAL_UART_Transmit_DMA+0xd0>)
 8007936:	641a      	str	r2, [r3, #64]	; 0x40

    /* Set the DMA error callback */
    huart->hdmatx->XferErrorCallback = UART_DMAError;
 8007938:	68fb      	ldr	r3, [r7, #12]
 800793a:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 800793c:	4a17      	ldr	r2, [pc, #92]	; (800799c <HAL_UART_Transmit_DMA+0xd4>)
 800793e:	64da      	str	r2, [r3, #76]	; 0x4c

    /* Set the DMA abort callback */
    huart->hdmatx->XferAbortCallback = NULL;
 8007940:	68fb      	ldr	r3, [r7, #12]
 8007942:	6b5b      	ldr	r3, [r3, #52]	; 0x34
 8007944:	2200      	movs	r2, #0
 8007946:	651a      	str	r2, [r3, #80]	; 0x50

    /* Enable the UART transmit DMA stream */
    tmp = (uint32_t *)&pData;
 8007948:	f107 0308 	add.w	r3, r7, #8
 800794c:	617b      	str	r3, [r7, #20]
    HAL_DMA_Start_IT(huart->hdmatx, *(uint32_t *)tmp, (uint32_t)&huart->Instance->DR, Size);
 800794e:	68fb      	ldr	r3, [r7, #12]
 8007950:	6b58      	ldr	r0, [r3, #52]	; 0x34
 8007952:	697b      	ldr	r3, [r7, #20]
 8007954:	6819      	ldr	r1, [r3, #0]
 8007956:	68fb      	ldr	r3, [r7, #12]
 8007958:	681b      	ldr	r3, [r3, #0]
 800795a:	3304      	adds	r3, #4
 800795c:	461a      	mov	r2, r3
 800795e:	88fb      	ldrh	r3, [r7, #6]
 8007960:	f7fb fdee 	bl	8003540 <HAL_DMA_Start_IT>

    /* Clear the TC flag in the SR register by writing 0 to it */
    __HAL_UART_CLEAR_FLAG(huart, UART_FLAG_TC);
 8007964:	68fb      	ldr	r3, [r7, #12]
 8007966:	681b      	ldr	r3, [r3, #0]
 8007968:	f06f 0240 	mvn.w	r2, #64	; 0x40
 800796c:	601a      	str	r2, [r3, #0]

    /* Process Unlocked */
    __HAL_UNLOCK(huart);
 800796e:	68fb      	ldr	r3, [r7, #12]
 8007970:	2200      	movs	r2, #0
 8007972:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Enable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    SET_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007976:	68fb      	ldr	r3, [r7, #12]
 8007978:	681b      	ldr	r3, [r3, #0]
 800797a:	695a      	ldr	r2, [r3, #20]
 800797c:	68fb      	ldr	r3, [r7, #12]
 800797e:	681b      	ldr	r3, [r3, #0]
 8007980:	f042 0280 	orr.w	r2, r2, #128	; 0x80
 8007984:	615a      	str	r2, [r3, #20]

    return HAL_OK;
 8007986:	2300      	movs	r3, #0
 8007988:	e000      	b.n	800798c <HAL_UART_Transmit_DMA+0xc4>
  }
  else
  {
    return HAL_BUSY;
 800798a:	2302      	movs	r3, #2
  }
}
 800798c:	4618      	mov	r0, r3
 800798e:	3718      	adds	r7, #24
 8007990:	46bd      	mov	sp, r7
 8007992:	bd80      	pop	{r7, pc}
 8007994:	08007dd5 	.word	0x08007dd5
 8007998:	08007e27 	.word	0x08007e27
 800799c:	08007f0f 	.word	0x08007f0f

080079a0 <HAL_UART_Receive_DMA>:
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @note   When the UART parity is enabled (PCE = 1) the received data contains the parity bit.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 80079a0:	b580      	push	{r7, lr}
 80079a2:	b084      	sub	sp, #16
 80079a4:	af00      	add	r7, sp, #0
 80079a6:	60f8      	str	r0, [r7, #12]
 80079a8:	60b9      	str	r1, [r7, #8]
 80079aa:	4613      	mov	r3, r2
 80079ac:	80fb      	strh	r3, [r7, #6]
  /* Check that a Rx process is not already ongoing */
  if (huart->RxState == HAL_UART_STATE_READY)
 80079ae:	68fb      	ldr	r3, [r7, #12]
 80079b0:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80079b4:	b2db      	uxtb	r3, r3
 80079b6:	2b20      	cmp	r3, #32
 80079b8:	d11d      	bne.n	80079f6 <HAL_UART_Receive_DMA+0x56>
  {
    if ((pData == NULL) || (Size == 0U))
 80079ba:	68bb      	ldr	r3, [r7, #8]
 80079bc:	2b00      	cmp	r3, #0
 80079be:	d002      	beq.n	80079c6 <HAL_UART_Receive_DMA+0x26>
 80079c0:	88fb      	ldrh	r3, [r7, #6]
 80079c2:	2b00      	cmp	r3, #0
 80079c4:	d101      	bne.n	80079ca <HAL_UART_Receive_DMA+0x2a>
    {
      return HAL_ERROR;
 80079c6:	2301      	movs	r3, #1
 80079c8:	e016      	b.n	80079f8 <HAL_UART_Receive_DMA+0x58>
    }

    /* Process Locked */
    __HAL_LOCK(huart);
 80079ca:	68fb      	ldr	r3, [r7, #12]
 80079cc:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 80079d0:	2b01      	cmp	r3, #1
 80079d2:	d101      	bne.n	80079d8 <HAL_UART_Receive_DMA+0x38>
 80079d4:	2302      	movs	r3, #2
 80079d6:	e00f      	b.n	80079f8 <HAL_UART_Receive_DMA+0x58>
 80079d8:	68fb      	ldr	r3, [r7, #12]
 80079da:	2201      	movs	r2, #1
 80079dc:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

    /* Set Reception type to Standard reception */
    huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80079e0:	68fb      	ldr	r3, [r7, #12]
 80079e2:	2200      	movs	r2, #0
 80079e4:	631a      	str	r2, [r3, #48]	; 0x30

    return(UART_Start_Receive_DMA(huart, pData, Size));
 80079e6:	88fb      	ldrh	r3, [r7, #6]
 80079e8:	461a      	mov	r2, r3
 80079ea:	68b9      	ldr	r1, [r7, #8]
 80079ec:	68f8      	ldr	r0, [r7, #12]
 80079ee:	f000 fad9 	bl	8007fa4 <UART_Start_Receive_DMA>
 80079f2:	4603      	mov	r3, r0
 80079f4:	e000      	b.n	80079f8 <HAL_UART_Receive_DMA+0x58>
  }
  else
  {
    return HAL_BUSY;
 80079f6:	2302      	movs	r3, #2
  }
}
 80079f8:	4618      	mov	r0, r3
 80079fa:	3710      	adds	r7, #16
 80079fc:	46bd      	mov	sp, r7
 80079fe:	bd80      	pop	{r7, pc}

08007a00 <HAL_UART_IRQHandler>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
void HAL_UART_IRQHandler(UART_HandleTypeDef *huart)
{
 8007a00:	b580      	push	{r7, lr}
 8007a02:	b08a      	sub	sp, #40	; 0x28
 8007a04:	af00      	add	r7, sp, #0
 8007a06:	6078      	str	r0, [r7, #4]
  uint32_t isrflags   = READ_REG(huart->Instance->SR);
 8007a08:	687b      	ldr	r3, [r7, #4]
 8007a0a:	681b      	ldr	r3, [r3, #0]
 8007a0c:	681b      	ldr	r3, [r3, #0]
 8007a0e:	627b      	str	r3, [r7, #36]	; 0x24
  uint32_t cr1its     = READ_REG(huart->Instance->CR1);
 8007a10:	687b      	ldr	r3, [r7, #4]
 8007a12:	681b      	ldr	r3, [r3, #0]
 8007a14:	68db      	ldr	r3, [r3, #12]
 8007a16:	623b      	str	r3, [r7, #32]
  uint32_t cr3its     = READ_REG(huart->Instance->CR3);
 8007a18:	687b      	ldr	r3, [r7, #4]
 8007a1a:	681b      	ldr	r3, [r3, #0]
 8007a1c:	695b      	ldr	r3, [r3, #20]
 8007a1e:	61fb      	str	r3, [r7, #28]
  uint32_t errorflags = 0x00U;
 8007a20:	2300      	movs	r3, #0
 8007a22:	61bb      	str	r3, [r7, #24]
  uint32_t dmarequest = 0x00U;
 8007a24:	2300      	movs	r3, #0
 8007a26:	617b      	str	r3, [r7, #20]

  /* If no error occurs */
  errorflags = (isrflags & (uint32_t)(USART_SR_PE | USART_SR_FE | USART_SR_ORE | USART_SR_NE));
 8007a28:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a2a:	f003 030f 	and.w	r3, r3, #15
 8007a2e:	61bb      	str	r3, [r7, #24]
  if (errorflags == RESET)
 8007a30:	69bb      	ldr	r3, [r7, #24]
 8007a32:	2b00      	cmp	r3, #0
 8007a34:	d10d      	bne.n	8007a52 <HAL_UART_IRQHandler+0x52>
  {
    /* UART in mode Receiver -------------------------------------------------*/
    if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007a36:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a38:	f003 0320 	and.w	r3, r3, #32
 8007a3c:	2b00      	cmp	r3, #0
 8007a3e:	d008      	beq.n	8007a52 <HAL_UART_IRQHandler+0x52>
 8007a40:	6a3b      	ldr	r3, [r7, #32]
 8007a42:	f003 0320 	and.w	r3, r3, #32
 8007a46:	2b00      	cmp	r3, #0
 8007a48:	d003      	beq.n	8007a52 <HAL_UART_IRQHandler+0x52>
    {
      UART_Receive_IT(huart);
 8007a4a:	6878      	ldr	r0, [r7, #4]
 8007a4c:	f000 fbcd 	bl	80081ea <UART_Receive_IT>
      return;
 8007a50:	e17c      	b.n	8007d4c <HAL_UART_IRQHandler+0x34c>
    }
  }

  /* If some errors occur */
  if ((errorflags != RESET) && (((cr3its & USART_CR3_EIE) != RESET) || ((cr1its & (USART_CR1_RXNEIE | USART_CR1_PEIE)) != RESET)))
 8007a52:	69bb      	ldr	r3, [r7, #24]
 8007a54:	2b00      	cmp	r3, #0
 8007a56:	f000 80b1 	beq.w	8007bbc <HAL_UART_IRQHandler+0x1bc>
 8007a5a:	69fb      	ldr	r3, [r7, #28]
 8007a5c:	f003 0301 	and.w	r3, r3, #1
 8007a60:	2b00      	cmp	r3, #0
 8007a62:	d105      	bne.n	8007a70 <HAL_UART_IRQHandler+0x70>
 8007a64:	6a3b      	ldr	r3, [r7, #32]
 8007a66:	f403 7390 	and.w	r3, r3, #288	; 0x120
 8007a6a:	2b00      	cmp	r3, #0
 8007a6c:	f000 80a6 	beq.w	8007bbc <HAL_UART_IRQHandler+0x1bc>
  {
    /* UART parity error interrupt occurred ----------------------------------*/
    if (((isrflags & USART_SR_PE) != RESET) && ((cr1its & USART_CR1_PEIE) != RESET))
 8007a70:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a72:	f003 0301 	and.w	r3, r3, #1
 8007a76:	2b00      	cmp	r3, #0
 8007a78:	d00a      	beq.n	8007a90 <HAL_UART_IRQHandler+0x90>
 8007a7a:	6a3b      	ldr	r3, [r7, #32]
 8007a7c:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007a80:	2b00      	cmp	r3, #0
 8007a82:	d005      	beq.n	8007a90 <HAL_UART_IRQHandler+0x90>
    {
      huart->ErrorCode |= HAL_UART_ERROR_PE;
 8007a84:	687b      	ldr	r3, [r7, #4]
 8007a86:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007a88:	f043 0201 	orr.w	r2, r3, #1
 8007a8c:	687b      	ldr	r3, [r7, #4]
 8007a8e:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART noise error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_NE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007a90:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007a92:	f003 0304 	and.w	r3, r3, #4
 8007a96:	2b00      	cmp	r3, #0
 8007a98:	d00a      	beq.n	8007ab0 <HAL_UART_IRQHandler+0xb0>
 8007a9a:	69fb      	ldr	r3, [r7, #28]
 8007a9c:	f003 0301 	and.w	r3, r3, #1
 8007aa0:	2b00      	cmp	r3, #0
 8007aa2:	d005      	beq.n	8007ab0 <HAL_UART_IRQHandler+0xb0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_NE;
 8007aa4:	687b      	ldr	r3, [r7, #4]
 8007aa6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007aa8:	f043 0202 	orr.w	r2, r3, #2
 8007aac:	687b      	ldr	r3, [r7, #4]
 8007aae:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART frame error interrupt occurred -----------------------------------*/
    if (((isrflags & USART_SR_FE) != RESET) && ((cr3its & USART_CR3_EIE) != RESET))
 8007ab0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ab2:	f003 0302 	and.w	r3, r3, #2
 8007ab6:	2b00      	cmp	r3, #0
 8007ab8:	d00a      	beq.n	8007ad0 <HAL_UART_IRQHandler+0xd0>
 8007aba:	69fb      	ldr	r3, [r7, #28]
 8007abc:	f003 0301 	and.w	r3, r3, #1
 8007ac0:	2b00      	cmp	r3, #0
 8007ac2:	d005      	beq.n	8007ad0 <HAL_UART_IRQHandler+0xd0>
    {
      huart->ErrorCode |= HAL_UART_ERROR_FE;
 8007ac4:	687b      	ldr	r3, [r7, #4]
 8007ac6:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007ac8:	f043 0204 	orr.w	r2, r3, #4
 8007acc:	687b      	ldr	r3, [r7, #4]
 8007ace:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* UART Over-Run interrupt occurred --------------------------------------*/
    if (((isrflags & USART_SR_ORE) != RESET) && (((cr1its & USART_CR1_RXNEIE) != RESET) || ((cr3its & USART_CR3_EIE) != RESET)))
 8007ad0:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007ad2:	f003 0308 	and.w	r3, r3, #8
 8007ad6:	2b00      	cmp	r3, #0
 8007ad8:	d00f      	beq.n	8007afa <HAL_UART_IRQHandler+0xfa>
 8007ada:	6a3b      	ldr	r3, [r7, #32]
 8007adc:	f003 0320 	and.w	r3, r3, #32
 8007ae0:	2b00      	cmp	r3, #0
 8007ae2:	d104      	bne.n	8007aee <HAL_UART_IRQHandler+0xee>
 8007ae4:	69fb      	ldr	r3, [r7, #28]
 8007ae6:	f003 0301 	and.w	r3, r3, #1
 8007aea:	2b00      	cmp	r3, #0
 8007aec:	d005      	beq.n	8007afa <HAL_UART_IRQHandler+0xfa>
    {
      huart->ErrorCode |= HAL_UART_ERROR_ORE;
 8007aee:	687b      	ldr	r3, [r7, #4]
 8007af0:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007af2:	f043 0208 	orr.w	r2, r3, #8
 8007af6:	687b      	ldr	r3, [r7, #4]
 8007af8:	641a      	str	r2, [r3, #64]	; 0x40
    }

    /* Call UART Error Call back function if need be --------------------------*/
    if (huart->ErrorCode != HAL_UART_ERROR_NONE)
 8007afa:	687b      	ldr	r3, [r7, #4]
 8007afc:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007afe:	2b00      	cmp	r3, #0
 8007b00:	f000 811f 	beq.w	8007d42 <HAL_UART_IRQHandler+0x342>
    {
      /* UART in mode Receiver -----------------------------------------------*/
      if (((isrflags & USART_SR_RXNE) != RESET) && ((cr1its & USART_CR1_RXNEIE) != RESET))
 8007b04:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007b06:	f003 0320 	and.w	r3, r3, #32
 8007b0a:	2b00      	cmp	r3, #0
 8007b0c:	d007      	beq.n	8007b1e <HAL_UART_IRQHandler+0x11e>
 8007b0e:	6a3b      	ldr	r3, [r7, #32]
 8007b10:	f003 0320 	and.w	r3, r3, #32
 8007b14:	2b00      	cmp	r3, #0
 8007b16:	d002      	beq.n	8007b1e <HAL_UART_IRQHandler+0x11e>
      {
        UART_Receive_IT(huart);
 8007b18:	6878      	ldr	r0, [r7, #4]
 8007b1a:	f000 fb66 	bl	80081ea <UART_Receive_IT>
      }

      /* If Overrun error occurs, or if any error occurs in DMA mode reception,
         consider error as blocking */
      dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007b1e:	687b      	ldr	r3, [r7, #4]
 8007b20:	681b      	ldr	r3, [r3, #0]
 8007b22:	695b      	ldr	r3, [r3, #20]
 8007b24:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b28:	2b40      	cmp	r3, #64	; 0x40
 8007b2a:	bf0c      	ite	eq
 8007b2c:	2301      	moveq	r3, #1
 8007b2e:	2300      	movne	r3, #0
 8007b30:	b2db      	uxtb	r3, r3
 8007b32:	617b      	str	r3, [r7, #20]
      if (((huart->ErrorCode & HAL_UART_ERROR_ORE) != RESET) || dmarequest)
 8007b34:	687b      	ldr	r3, [r7, #4]
 8007b36:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007b38:	f003 0308 	and.w	r3, r3, #8
 8007b3c:	2b00      	cmp	r3, #0
 8007b3e:	d102      	bne.n	8007b46 <HAL_UART_IRQHandler+0x146>
 8007b40:	697b      	ldr	r3, [r7, #20]
 8007b42:	2b00      	cmp	r3, #0
 8007b44:	d031      	beq.n	8007baa <HAL_UART_IRQHandler+0x1aa>
      {
        /* Blocking error : transfer is aborted
           Set the UART state ready to be able to start again the process,
           Disable Rx Interrupts, and disable Rx DMA request, if ongoing */
        UART_EndRxTransfer(huart);
 8007b46:	6878      	ldr	r0, [r7, #4]
 8007b48:	f000 faa6 	bl	8008098 <UART_EndRxTransfer>

        /* Disable the UART DMA Rx request if enabled */
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b4c:	687b      	ldr	r3, [r7, #4]
 8007b4e:	681b      	ldr	r3, [r3, #0]
 8007b50:	695b      	ldr	r3, [r3, #20]
 8007b52:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007b56:	2b40      	cmp	r3, #64	; 0x40
 8007b58:	d123      	bne.n	8007ba2 <HAL_UART_IRQHandler+0x1a2>
        {
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007b5a:	687b      	ldr	r3, [r7, #4]
 8007b5c:	681b      	ldr	r3, [r3, #0]
 8007b5e:	695a      	ldr	r2, [r3, #20]
 8007b60:	687b      	ldr	r3, [r7, #4]
 8007b62:	681b      	ldr	r3, [r3, #0]
 8007b64:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007b68:	615a      	str	r2, [r3, #20]

          /* Abort the UART DMA Rx stream */
          if (huart->hdmarx != NULL)
 8007b6a:	687b      	ldr	r3, [r7, #4]
 8007b6c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b6e:	2b00      	cmp	r3, #0
 8007b70:	d013      	beq.n	8007b9a <HAL_UART_IRQHandler+0x19a>
          {
            /* Set the UART DMA Abort callback :
               will lead to call HAL_UART_ErrorCallback() at end of DMA abort procedure */
            huart->hdmarx->XferAbortCallback = UART_DMAAbortOnError;
 8007b72:	687b      	ldr	r3, [r7, #4]
 8007b74:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b76:	4a77      	ldr	r2, [pc, #476]	; (8007d54 <HAL_UART_IRQHandler+0x354>)
 8007b78:	651a      	str	r2, [r3, #80]	; 0x50
            if (HAL_DMA_Abort_IT(huart->hdmarx) != HAL_OK)
 8007b7a:	687b      	ldr	r3, [r7, #4]
 8007b7c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b7e:	4618      	mov	r0, r3
 8007b80:	f7fb fda6 	bl	80036d0 <HAL_DMA_Abort_IT>
 8007b84:	4603      	mov	r3, r0
 8007b86:	2b00      	cmp	r3, #0
 8007b88:	d016      	beq.n	8007bb8 <HAL_UART_IRQHandler+0x1b8>
            {
              /* Call Directly XferAbortCallback function in case of error */
              huart->hdmarx->XferAbortCallback(huart->hdmarx);
 8007b8a:	687b      	ldr	r3, [r7, #4]
 8007b8c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007b8e:	6d1b      	ldr	r3, [r3, #80]	; 0x50
 8007b90:	687a      	ldr	r2, [r7, #4]
 8007b92:	6b92      	ldr	r2, [r2, #56]	; 0x38
 8007b94:	4610      	mov	r0, r2
 8007b96:	4798      	blx	r3
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007b98:	e00e      	b.n	8007bb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
            /*Call registered error callback*/
            huart->ErrorCallback(huart);
#else
            /*Call legacy weak error callback*/
            HAL_UART_ErrorCallback(huart);
 8007b9a:	6878      	ldr	r0, [r7, #4]
 8007b9c:	f000 f904 	bl	8007da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba0:	e00a      	b.n	8007bb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
          /*Call registered error callback*/
          huart->ErrorCallback(huart);
#else
          /*Call legacy weak error callback*/
          HAL_UART_ErrorCallback(huart);
 8007ba2:	6878      	ldr	r0, [r7, #4]
 8007ba4:	f000 f900 	bl	8007da8 <HAL_UART_ErrorCallback>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007ba8:	e006      	b.n	8007bb8 <HAL_UART_IRQHandler+0x1b8>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered error callback*/
        huart->ErrorCallback(huart);
#else
        /*Call legacy weak error callback*/
        HAL_UART_ErrorCallback(huart);
 8007baa:	6878      	ldr	r0, [r7, #4]
 8007bac:	f000 f8fc 	bl	8007da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

        huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007bb0:	687b      	ldr	r3, [r7, #4]
 8007bb2:	2200      	movs	r2, #0
 8007bb4:	641a      	str	r2, [r3, #64]	; 0x40
      }
    }
    return;
 8007bb6:	e0c4      	b.n	8007d42 <HAL_UART_IRQHandler+0x342>
        if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bb8:	bf00      	nop
    return;
 8007bba:	e0c2      	b.n	8007d42 <HAL_UART_IRQHandler+0x342>
  } /* End if some error occurs */

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : */
  if (  (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007bbc:	687b      	ldr	r3, [r7, #4]
 8007bbe:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007bc0:	2b01      	cmp	r3, #1
 8007bc2:	f040 80a2 	bne.w	8007d0a <HAL_UART_IRQHandler+0x30a>
      &&((isrflags & USART_SR_IDLE) != 0U)
 8007bc6:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007bc8:	f003 0310 	and.w	r3, r3, #16
 8007bcc:	2b00      	cmp	r3, #0
 8007bce:	f000 809c 	beq.w	8007d0a <HAL_UART_IRQHandler+0x30a>
      &&((cr1its & USART_SR_IDLE) != 0U))
 8007bd2:	6a3b      	ldr	r3, [r7, #32]
 8007bd4:	f003 0310 	and.w	r3, r3, #16
 8007bd8:	2b00      	cmp	r3, #0
 8007bda:	f000 8096 	beq.w	8007d0a <HAL_UART_IRQHandler+0x30a>
  {
    __HAL_UART_CLEAR_IDLEFLAG(huart);
 8007bde:	2300      	movs	r3, #0
 8007be0:	60fb      	str	r3, [r7, #12]
 8007be2:	687b      	ldr	r3, [r7, #4]
 8007be4:	681b      	ldr	r3, [r3, #0]
 8007be6:	681b      	ldr	r3, [r3, #0]
 8007be8:	60fb      	str	r3, [r7, #12]
 8007bea:	687b      	ldr	r3, [r7, #4]
 8007bec:	681b      	ldr	r3, [r3, #0]
 8007bee:	685b      	ldr	r3, [r3, #4]
 8007bf0:	60fb      	str	r3, [r7, #12]
 8007bf2:	68fb      	ldr	r3, [r7, #12]

    /* Check if DMA mode is enabled in UART */
    if (HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR))
 8007bf4:	687b      	ldr	r3, [r7, #4]
 8007bf6:	681b      	ldr	r3, [r3, #0]
 8007bf8:	695b      	ldr	r3, [r3, #20]
 8007bfa:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007bfe:	2b40      	cmp	r3, #64	; 0x40
 8007c00:	d14f      	bne.n	8007ca2 <HAL_UART_IRQHandler+0x2a2>
    {
      /* DMA mode enabled */
      /* Check received length : If all expected data are received, do nothing,
         (DMA cplt callback will be called).
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_remaining_rx_data = (uint16_t) __HAL_DMA_GET_COUNTER(huart->hdmarx);
 8007c02:	687b      	ldr	r3, [r7, #4]
 8007c04:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c06:	681b      	ldr	r3, [r3, #0]
 8007c08:	685b      	ldr	r3, [r3, #4]
 8007c0a:	823b      	strh	r3, [r7, #16]
      if (  (nb_remaining_rx_data > 0U)
 8007c0c:	8a3b      	ldrh	r3, [r7, #16]
 8007c0e:	2b00      	cmp	r3, #0
 8007c10:	f000 8099 	beq.w	8007d46 <HAL_UART_IRQHandler+0x346>
          &&(nb_remaining_rx_data < huart->RxXferSize))
 8007c14:	687b      	ldr	r3, [r7, #4]
 8007c16:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007c18:	8a3a      	ldrh	r2, [r7, #16]
 8007c1a:	429a      	cmp	r2, r3
 8007c1c:	f080 8093 	bcs.w	8007d46 <HAL_UART_IRQHandler+0x346>
      {
        /* Reception is not complete */
        huart->RxXferCount = nb_remaining_rx_data;
 8007c20:	687b      	ldr	r3, [r7, #4]
 8007c22:	8a3a      	ldrh	r2, [r7, #16]
 8007c24:	85da      	strh	r2, [r3, #46]	; 0x2e

        /* In Normal mode, end DMA xfer and HAL UART Rx process*/
        if (huart->hdmarx->Init.Mode != DMA_CIRCULAR)
 8007c26:	687b      	ldr	r3, [r7, #4]
 8007c28:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c2a:	69db      	ldr	r3, [r3, #28]
 8007c2c:	f5b3 7f80 	cmp.w	r3, #256	; 0x100
 8007c30:	d02b      	beq.n	8007c8a <HAL_UART_IRQHandler+0x28a>
        {
          /* Disable PE and ERR (Frame error, noise error, overrun error) interrupts */
          CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007c32:	687b      	ldr	r3, [r7, #4]
 8007c34:	681b      	ldr	r3, [r3, #0]
 8007c36:	68da      	ldr	r2, [r3, #12]
 8007c38:	687b      	ldr	r3, [r7, #4]
 8007c3a:	681b      	ldr	r3, [r3, #0]
 8007c3c:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007c40:	60da      	str	r2, [r3, #12]
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007c42:	687b      	ldr	r3, [r7, #4]
 8007c44:	681b      	ldr	r3, [r3, #0]
 8007c46:	695a      	ldr	r2, [r3, #20]
 8007c48:	687b      	ldr	r3, [r7, #4]
 8007c4a:	681b      	ldr	r3, [r3, #0]
 8007c4c:	f022 0201 	bic.w	r2, r2, #1
 8007c50:	615a      	str	r2, [r3, #20]

          /* Disable the DMA transfer for the receiver request by resetting the DMAR bit
             in the UART CR3 register */
          CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007c52:	687b      	ldr	r3, [r7, #4]
 8007c54:	681b      	ldr	r3, [r3, #0]
 8007c56:	695a      	ldr	r2, [r3, #20]
 8007c58:	687b      	ldr	r3, [r7, #4]
 8007c5a:	681b      	ldr	r3, [r3, #0]
 8007c5c:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007c60:	615a      	str	r2, [r3, #20]

          /* At end of Rx process, restore huart->RxState to Ready */
          huart->RxState = HAL_UART_STATE_READY;
 8007c62:	687b      	ldr	r3, [r7, #4]
 8007c64:	2220      	movs	r2, #32
 8007c66:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
          huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007c6a:	687b      	ldr	r3, [r7, #4]
 8007c6c:	2200      	movs	r2, #0
 8007c6e:	631a      	str	r2, [r3, #48]	; 0x30

          CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007c70:	687b      	ldr	r3, [r7, #4]
 8007c72:	681b      	ldr	r3, [r3, #0]
 8007c74:	68da      	ldr	r2, [r3, #12]
 8007c76:	687b      	ldr	r3, [r7, #4]
 8007c78:	681b      	ldr	r3, [r3, #0]
 8007c7a:	f022 0210 	bic.w	r2, r2, #16
 8007c7e:	60da      	str	r2, [r3, #12]

          /* Last bytes received, so no need as the abort is immediate */
          (void)HAL_DMA_Abort(huart->hdmarx);
 8007c80:	687b      	ldr	r3, [r7, #4]
 8007c82:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007c84:	4618      	mov	r0, r3
 8007c86:	f7fb fcb3 	bl	80035f0 <HAL_DMA_Abort>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, (huart->RxXferSize - huart->RxXferCount));
 8007c8a:	687b      	ldr	r3, [r7, #4]
 8007c8c:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007c8e:	687b      	ldr	r3, [r7, #4]
 8007c90:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007c92:	b29b      	uxth	r3, r3
 8007c94:	1ad3      	subs	r3, r2, r3
 8007c96:	b29b      	uxth	r3, r3
 8007c98:	4619      	mov	r1, r3
 8007c9a:	6878      	ldr	r0, [r7, #4]
 8007c9c:	f000 f88e 	bl	8007dbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007ca0:	e051      	b.n	8007d46 <HAL_UART_IRQHandler+0x346>
    else
    {
      /* DMA mode not enabled */
      /* Check received length : If all expected data are received, do nothing.
         Otherwise, if at least one data has already been received, IDLE event is to be notified to user */
      uint16_t nb_rx_data = huart->RxXferSize - huart->RxXferCount;
 8007ca2:	687b      	ldr	r3, [r7, #4]
 8007ca4:	8d9a      	ldrh	r2, [r3, #44]	; 0x2c
 8007ca6:	687b      	ldr	r3, [r7, #4]
 8007ca8:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007caa:	b29b      	uxth	r3, r3
 8007cac:	1ad3      	subs	r3, r2, r3
 8007cae:	827b      	strh	r3, [r7, #18]
      if (  (huart->RxXferCount > 0U)
 8007cb0:	687b      	ldr	r3, [r7, #4]
 8007cb2:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 8007cb4:	b29b      	uxth	r3, r3
 8007cb6:	2b00      	cmp	r3, #0
 8007cb8:	d047      	beq.n	8007d4a <HAL_UART_IRQHandler+0x34a>
          &&(nb_rx_data > 0U) )
 8007cba:	8a7b      	ldrh	r3, [r7, #18]
 8007cbc:	2b00      	cmp	r3, #0
 8007cbe:	d044      	beq.n	8007d4a <HAL_UART_IRQHandler+0x34a>
      {
        /* Disable the UART Parity Error Interrupt and RXNE interrupts */
        CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 8007cc0:	687b      	ldr	r3, [r7, #4]
 8007cc2:	681b      	ldr	r3, [r3, #0]
 8007cc4:	68da      	ldr	r2, [r3, #12]
 8007cc6:	687b      	ldr	r3, [r7, #4]
 8007cc8:	681b      	ldr	r3, [r3, #0]
 8007cca:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 8007cce:	60da      	str	r2, [r3, #12]

        /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
        CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007cd0:	687b      	ldr	r3, [r7, #4]
 8007cd2:	681b      	ldr	r3, [r3, #0]
 8007cd4:	695a      	ldr	r2, [r3, #20]
 8007cd6:	687b      	ldr	r3, [r7, #4]
 8007cd8:	681b      	ldr	r3, [r3, #0]
 8007cda:	f022 0201 	bic.w	r2, r2, #1
 8007cde:	615a      	str	r2, [r3, #20]

        /* Rx process is completed, restore huart->RxState to Ready */
        huart->RxState = HAL_UART_STATE_READY;
 8007ce0:	687b      	ldr	r3, [r7, #4]
 8007ce2:	2220      	movs	r2, #32
 8007ce4:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
        huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8007ce8:	687b      	ldr	r3, [r7, #4]
 8007cea:	2200      	movs	r2, #0
 8007cec:	631a      	str	r2, [r3, #48]	; 0x30

        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007cee:	687b      	ldr	r3, [r7, #4]
 8007cf0:	681b      	ldr	r3, [r3, #0]
 8007cf2:	68da      	ldr	r2, [r3, #12]
 8007cf4:	687b      	ldr	r3, [r7, #4]
 8007cf6:	681b      	ldr	r3, [r3, #0]
 8007cf8:	f022 0210 	bic.w	r2, r2, #16
 8007cfc:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx complete callback*/
        huart->RxEventCallback(huart, nb_rx_data);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, nb_rx_data);
 8007cfe:	8a7b      	ldrh	r3, [r7, #18]
 8007d00:	4619      	mov	r1, r3
 8007d02:	6878      	ldr	r0, [r7, #4]
 8007d04:	f000 f85a 	bl	8007dbc <HAL_UARTEx_RxEventCallback>
#endif
      }
      return;
 8007d08:	e01f      	b.n	8007d4a <HAL_UART_IRQHandler+0x34a>
    }
  }

  /* UART in mode Transmitter ------------------------------------------------*/
  if (((isrflags & USART_SR_TXE) != RESET) && ((cr1its & USART_CR1_TXEIE) != RESET))
 8007d0a:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d0c:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d10:	2b00      	cmp	r3, #0
 8007d12:	d008      	beq.n	8007d26 <HAL_UART_IRQHandler+0x326>
 8007d14:	6a3b      	ldr	r3, [r7, #32]
 8007d16:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007d1a:	2b00      	cmp	r3, #0
 8007d1c:	d003      	beq.n	8007d26 <HAL_UART_IRQHandler+0x326>
  {
    UART_Transmit_IT(huart);
 8007d1e:	6878      	ldr	r0, [r7, #4]
 8007d20:	f000 f9fb 	bl	800811a <UART_Transmit_IT>
    return;
 8007d24:	e012      	b.n	8007d4c <HAL_UART_IRQHandler+0x34c>
  }

  /* UART in mode Transmitter end --------------------------------------------*/
  if (((isrflags & USART_SR_TC) != RESET) && ((cr1its & USART_CR1_TCIE) != RESET))
 8007d26:	6a7b      	ldr	r3, [r7, #36]	; 0x24
 8007d28:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d2c:	2b00      	cmp	r3, #0
 8007d2e:	d00d      	beq.n	8007d4c <HAL_UART_IRQHandler+0x34c>
 8007d30:	6a3b      	ldr	r3, [r7, #32]
 8007d32:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007d36:	2b00      	cmp	r3, #0
 8007d38:	d008      	beq.n	8007d4c <HAL_UART_IRQHandler+0x34c>
  {
    UART_EndTransmit_IT(huart);
 8007d3a:	6878      	ldr	r0, [r7, #4]
 8007d3c:	f000 fa3d 	bl	80081ba <UART_EndTransmit_IT>
    return;
 8007d40:	e004      	b.n	8007d4c <HAL_UART_IRQHandler+0x34c>
    return;
 8007d42:	bf00      	nop
 8007d44:	e002      	b.n	8007d4c <HAL_UART_IRQHandler+0x34c>
      return;
 8007d46:	bf00      	nop
 8007d48:	e000      	b.n	8007d4c <HAL_UART_IRQHandler+0x34c>
      return;
 8007d4a:	bf00      	nop
  }
}
 8007d4c:	3728      	adds	r7, #40	; 0x28
 8007d4e:	46bd      	mov	sp, r7
 8007d50:	bd80      	pop	{r7, pc}
 8007d52:	bf00      	nop
 8007d54:	080080f3 	.word	0x080080f3

08007d58 <HAL_UART_TxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d58:	b480      	push	{r7}
 8007d5a:	b083      	sub	sp, #12
 8007d5c:	af00      	add	r7, sp, #0
 8007d5e:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxCpltCallback could be implemented in the user file
   */
}
 8007d60:	bf00      	nop
 8007d62:	370c      	adds	r7, #12
 8007d64:	46bd      	mov	sp, r7
 8007d66:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d6a:	4770      	bx	lr

08007d6c <HAL_UART_TxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_TxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d6c:	b480      	push	{r7}
 8007d6e:	b083      	sub	sp, #12
 8007d70:	af00      	add	r7, sp, #0
 8007d72:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_TxHalfCpltCallback could be implemented in the user file
   */
}
 8007d74:	bf00      	nop
 8007d76:	370c      	adds	r7, #12
 8007d78:	46bd      	mov	sp, r7
 8007d7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d7e:	4770      	bx	lr

08007d80 <HAL_UART_RxCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxCpltCallback(UART_HandleTypeDef *huart)
{
 8007d80:	b480      	push	{r7}
 8007d82:	b083      	sub	sp, #12
 8007d84:	af00      	add	r7, sp, #0
 8007d86:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxCpltCallback could be implemented in the user file
   */
}
 8007d88:	bf00      	nop
 8007d8a:	370c      	adds	r7, #12
 8007d8c:	46bd      	mov	sp, r7
 8007d8e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007d92:	4770      	bx	lr

08007d94 <HAL_UART_RxHalfCpltCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_RxHalfCpltCallback(UART_HandleTypeDef *huart)
{
 8007d94:	b480      	push	{r7}
 8007d96:	b083      	sub	sp, #12
 8007d98:	af00      	add	r7, sp, #0
 8007d9a:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_RxHalfCpltCallback could be implemented in the user file
   */
}
 8007d9c:	bf00      	nop
 8007d9e:	370c      	adds	r7, #12
 8007da0:	46bd      	mov	sp, r7
 8007da2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007da6:	4770      	bx	lr

08007da8 <HAL_UART_ErrorCallback>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
__weak void HAL_UART_ErrorCallback(UART_HandleTypeDef *huart)
{
 8007da8:	b480      	push	{r7}
 8007daa:	b083      	sub	sp, #12
 8007dac:	af00      	add	r7, sp, #0
 8007dae:	6078      	str	r0, [r7, #4]
  /* Prevent unused argument(s) compilation warning */
  UNUSED(huart);
  /* NOTE: This function should not be modified, when the callback is needed,
           the HAL_UART_ErrorCallback could be implemented in the user file
   */
}
 8007db0:	bf00      	nop
 8007db2:	370c      	adds	r7, #12
 8007db4:	46bd      	mov	sp, r7
 8007db6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dba:	4770      	bx	lr

08007dbc <HAL_UARTEx_RxEventCallback>:
  * @param  Size  Number of data available in application reception buffer (indicates a position in
  *               reception buffer until which, data are available)
  * @retval None
  */
__weak void HAL_UARTEx_RxEventCallback(UART_HandleTypeDef *huart, uint16_t Size)
{
 8007dbc:	b480      	push	{r7}
 8007dbe:	b083      	sub	sp, #12
 8007dc0:	af00      	add	r7, sp, #0
 8007dc2:	6078      	str	r0, [r7, #4]
 8007dc4:	460b      	mov	r3, r1
 8007dc6:	807b      	strh	r3, [r7, #2]
  UNUSED(Size);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_UARTEx_RxEventCallback can be implemented in the user file.
   */
}
 8007dc8:	bf00      	nop
 8007dca:	370c      	adds	r7, #12
 8007dcc:	46bd      	mov	sp, r7
 8007dce:	f85d 7b04 	ldr.w	r7, [sp], #4
 8007dd2:	4770      	bx	lr

08007dd4 <UART_DMATransmitCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATransmitCplt(DMA_HandleTypeDef *hdma)
{
 8007dd4:	b580      	push	{r7, lr}
 8007dd6:	b084      	sub	sp, #16
 8007dd8:	af00      	add	r7, sp, #0
 8007dda:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ddc:	687b      	ldr	r3, [r7, #4]
 8007dde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007de0:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007de2:	687b      	ldr	r3, [r7, #4]
 8007de4:	681b      	ldr	r3, [r3, #0]
 8007de6:	681b      	ldr	r3, [r3, #0]
 8007de8:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007dec:	2b00      	cmp	r3, #0
 8007dee:	d113      	bne.n	8007e18 <UART_DMATransmitCplt+0x44>
  {
    huart->TxXferCount = 0x00U;
 8007df0:	68fb      	ldr	r3, [r7, #12]
 8007df2:	2200      	movs	r2, #0
 8007df4:	84da      	strh	r2, [r3, #38]	; 0x26

    /* Disable the DMA transfer for transmit request by setting the DMAT bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAT);
 8007df6:	68fb      	ldr	r3, [r7, #12]
 8007df8:	681b      	ldr	r3, [r3, #0]
 8007dfa:	695a      	ldr	r2, [r3, #20]
 8007dfc:	68fb      	ldr	r3, [r7, #12]
 8007dfe:	681b      	ldr	r3, [r3, #0]
 8007e00:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8007e04:	615a      	str	r2, [r3, #20]

    /* Enable the UART Transmit Complete Interrupt */
    SET_BIT(huart->Instance->CR1, USART_CR1_TCIE);
 8007e06:	68fb      	ldr	r3, [r7, #12]
 8007e08:	681b      	ldr	r3, [r3, #0]
 8007e0a:	68da      	ldr	r2, [r3, #12]
 8007e0c:	68fb      	ldr	r3, [r7, #12]
 8007e0e:	681b      	ldr	r3, [r3, #0]
 8007e10:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8007e14:	60da      	str	r2, [r3, #12]
#else
    /*Call legacy weak Tx complete callback*/
    HAL_UART_TxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007e16:	e002      	b.n	8007e1e <UART_DMATransmitCplt+0x4a>
    HAL_UART_TxCpltCallback(huart);
 8007e18:	68f8      	ldr	r0, [r7, #12]
 8007e1a:	f7ff ff9d 	bl	8007d58 <HAL_UART_TxCpltCallback>
}
 8007e1e:	bf00      	nop
 8007e20:	3710      	adds	r7, #16
 8007e22:	46bd      	mov	sp, r7
 8007e24:	bd80      	pop	{r7, pc}

08007e26 <UART_DMATxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMATxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007e26:	b580      	push	{r7, lr}
 8007e28:	b084      	sub	sp, #16
 8007e2a:	af00      	add	r7, sp, #0
 8007e2c:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e2e:	687b      	ldr	r3, [r7, #4]
 8007e30:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e32:	60fb      	str	r3, [r7, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxHalfCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxHalfCpltCallback(huart);
 8007e34:	68f8      	ldr	r0, [r7, #12]
 8007e36:	f7ff ff99 	bl	8007d6c <HAL_UART_TxHalfCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007e3a:	bf00      	nop
 8007e3c:	3710      	adds	r7, #16
 8007e3e:	46bd      	mov	sp, r7
 8007e40:	bd80      	pop	{r7, pc}

08007e42 <UART_DMAReceiveCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAReceiveCplt(DMA_HandleTypeDef *hdma)
{
 8007e42:	b580      	push	{r7, lr}
 8007e44:	b084      	sub	sp, #16
 8007e46:	af00      	add	r7, sp, #0
 8007e48:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007e4a:	687b      	ldr	r3, [r7, #4]
 8007e4c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007e4e:	60fb      	str	r3, [r7, #12]
  /* DMA Normal mode*/
  if ((hdma->Instance->CR & DMA_SxCR_CIRC) == 0U)
 8007e50:	687b      	ldr	r3, [r7, #4]
 8007e52:	681b      	ldr	r3, [r3, #0]
 8007e54:	681b      	ldr	r3, [r3, #0]
 8007e56:	f403 7380 	and.w	r3, r3, #256	; 0x100
 8007e5a:	2b00      	cmp	r3, #0
 8007e5c:	d12a      	bne.n	8007eb4 <UART_DMAReceiveCplt+0x72>
  {
    huart->RxXferCount = 0U;
 8007e5e:	68fb      	ldr	r3, [r7, #12]
 8007e60:	2200      	movs	r2, #0
 8007e62:	85da      	strh	r2, [r3, #46]	; 0x2e

    /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8007e64:	68fb      	ldr	r3, [r7, #12]
 8007e66:	681b      	ldr	r3, [r3, #0]
 8007e68:	68da      	ldr	r2, [r3, #12]
 8007e6a:	68fb      	ldr	r3, [r7, #12]
 8007e6c:	681b      	ldr	r3, [r3, #0]
 8007e6e:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 8007e72:	60da      	str	r2, [r3, #12]
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8007e74:	68fb      	ldr	r3, [r7, #12]
 8007e76:	681b      	ldr	r3, [r3, #0]
 8007e78:	695a      	ldr	r2, [r3, #20]
 8007e7a:	68fb      	ldr	r3, [r7, #12]
 8007e7c:	681b      	ldr	r3, [r3, #0]
 8007e7e:	f022 0201 	bic.w	r2, r2, #1
 8007e82:	615a      	str	r2, [r3, #20]

    /* Disable the DMA transfer for the receiver request by setting the DMAR bit
       in the UART CR3 register */
    CLEAR_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8007e84:	68fb      	ldr	r3, [r7, #12]
 8007e86:	681b      	ldr	r3, [r3, #0]
 8007e88:	695a      	ldr	r2, [r3, #20]
 8007e8a:	68fb      	ldr	r3, [r7, #12]
 8007e8c:	681b      	ldr	r3, [r3, #0]
 8007e8e:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 8007e92:	615a      	str	r2, [r3, #20]

    /* At end of Rx process, restore huart->RxState to Ready */
    huart->RxState = HAL_UART_STATE_READY;
 8007e94:	68fb      	ldr	r3, [r7, #12]
 8007e96:	2220      	movs	r2, #32
 8007e98:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

    /* If Reception till IDLE event has been selected, Disable IDLE Interrupt */
    if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007e9c:	68fb      	ldr	r3, [r7, #12]
 8007e9e:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007ea0:	2b01      	cmp	r3, #1
 8007ea2:	d107      	bne.n	8007eb4 <UART_DMAReceiveCplt+0x72>
    {
      CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 8007ea4:	68fb      	ldr	r3, [r7, #12]
 8007ea6:	681b      	ldr	r3, [r3, #0]
 8007ea8:	68da      	ldr	r2, [r3, #12]
 8007eaa:	68fb      	ldr	r3, [r7, #12]
 8007eac:	681b      	ldr	r3, [r3, #0]
 8007eae:	f022 0210 	bic.w	r2, r2, #16
 8007eb2:	60da      	str	r2, [r3, #12]
    }
  }

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007eb4:	68fb      	ldr	r3, [r7, #12]
 8007eb6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eb8:	2b01      	cmp	r3, #1
 8007eba:	d106      	bne.n	8007eca <UART_DMAReceiveCplt+0x88>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 8007ebc:	68fb      	ldr	r3, [r7, #12]
 8007ebe:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ec0:	4619      	mov	r1, r3
 8007ec2:	68f8      	ldr	r0, [r7, #12]
 8007ec4:	f7ff ff7a 	bl	8007dbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx complete callback*/
    HAL_UART_RxCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007ec8:	e002      	b.n	8007ed0 <UART_DMAReceiveCplt+0x8e>
    HAL_UART_RxCpltCallback(huart);
 8007eca:	68f8      	ldr	r0, [r7, #12]
 8007ecc:	f7ff ff58 	bl	8007d80 <HAL_UART_RxCpltCallback>
}
 8007ed0:	bf00      	nop
 8007ed2:	3710      	adds	r7, #16
 8007ed4:	46bd      	mov	sp, r7
 8007ed6:	bd80      	pop	{r7, pc}

08007ed8 <UART_DMARxHalfCplt>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMARxHalfCplt(DMA_HandleTypeDef *hdma)
{
 8007ed8:	b580      	push	{r7, lr}
 8007eda:	b084      	sub	sp, #16
 8007edc:	af00      	add	r7, sp, #0
 8007ede:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007ee0:	687b      	ldr	r3, [r7, #4]
 8007ee2:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007ee4:	60fb      	str	r3, [r7, #12]

  /* Check current reception Mode :
     If Reception till IDLE event has been selected : use Rx Event callback */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 8007ee6:	68fb      	ldr	r3, [r7, #12]
 8007ee8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8007eea:	2b01      	cmp	r3, #1
 8007eec:	d108      	bne.n	8007f00 <UART_DMARxHalfCplt+0x28>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
    /*Call registered Rx Event callback*/
    huart->RxEventCallback(huart, huart->RxXferSize/2U);
#else
    /*Call legacy weak Rx Event callback*/
    HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize/2U);
 8007eee:	68fb      	ldr	r3, [r7, #12]
 8007ef0:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 8007ef2:	085b      	lsrs	r3, r3, #1
 8007ef4:	b29b      	uxth	r3, r3
 8007ef6:	4619      	mov	r1, r3
 8007ef8:	68f8      	ldr	r0, [r7, #12]
 8007efa:	f7ff ff5f 	bl	8007dbc <HAL_UARTEx_RxEventCallback>
#else
    /*Call legacy weak Rx Half complete callback*/
    HAL_UART_RxHalfCpltCallback(huart);
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
  }
}
 8007efe:	e002      	b.n	8007f06 <UART_DMARxHalfCplt+0x2e>
    HAL_UART_RxHalfCpltCallback(huart);
 8007f00:	68f8      	ldr	r0, [r7, #12]
 8007f02:	f7ff ff47 	bl	8007d94 <HAL_UART_RxHalfCpltCallback>
}
 8007f06:	bf00      	nop
 8007f08:	3710      	adds	r7, #16
 8007f0a:	46bd      	mov	sp, r7
 8007f0c:	bd80      	pop	{r7, pc}

08007f0e <UART_DMAError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAError(DMA_HandleTypeDef *hdma)
{
 8007f0e:	b580      	push	{r7, lr}
 8007f10:	b084      	sub	sp, #16
 8007f12:	af00      	add	r7, sp, #0
 8007f14:	6078      	str	r0, [r7, #4]
  uint32_t dmarequest = 0x00U;
 8007f16:	2300      	movs	r3, #0
 8007f18:	60fb      	str	r3, [r7, #12]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 8007f1a:	687b      	ldr	r3, [r7, #4]
 8007f1c:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007f1e:	60bb      	str	r3, [r7, #8]

  /* Stop UART DMA Tx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAT);
 8007f20:	68bb      	ldr	r3, [r7, #8]
 8007f22:	681b      	ldr	r3, [r3, #0]
 8007f24:	695b      	ldr	r3, [r3, #20]
 8007f26:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8007f2a:	2b80      	cmp	r3, #128	; 0x80
 8007f2c:	bf0c      	ite	eq
 8007f2e:	2301      	moveq	r3, #1
 8007f30:	2300      	movne	r3, #0
 8007f32:	b2db      	uxtb	r3, r3
 8007f34:	60fb      	str	r3, [r7, #12]
  if ((huart->gState == HAL_UART_STATE_BUSY_TX) && dmarequest)
 8007f36:	68bb      	ldr	r3, [r7, #8]
 8007f38:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8007f3c:	b2db      	uxtb	r3, r3
 8007f3e:	2b21      	cmp	r3, #33	; 0x21
 8007f40:	d108      	bne.n	8007f54 <UART_DMAError+0x46>
 8007f42:	68fb      	ldr	r3, [r7, #12]
 8007f44:	2b00      	cmp	r3, #0
 8007f46:	d005      	beq.n	8007f54 <UART_DMAError+0x46>
  {
    huart->TxXferCount = 0x00U;
 8007f48:	68bb      	ldr	r3, [r7, #8]
 8007f4a:	2200      	movs	r2, #0
 8007f4c:	84da      	strh	r2, [r3, #38]	; 0x26
    UART_EndTxTransfer(huart);
 8007f4e:	68b8      	ldr	r0, [r7, #8]
 8007f50:	f000 f88c 	bl	800806c <UART_EndTxTransfer>
  }

  /* Stop UART DMA Rx request if ongoing */
  dmarequest = HAL_IS_BIT_SET(huart->Instance->CR3, USART_CR3_DMAR);
 8007f54:	68bb      	ldr	r3, [r7, #8]
 8007f56:	681b      	ldr	r3, [r3, #0]
 8007f58:	695b      	ldr	r3, [r3, #20]
 8007f5a:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8007f5e:	2b40      	cmp	r3, #64	; 0x40
 8007f60:	bf0c      	ite	eq
 8007f62:	2301      	moveq	r3, #1
 8007f64:	2300      	movne	r3, #0
 8007f66:	b2db      	uxtb	r3, r3
 8007f68:	60fb      	str	r3, [r7, #12]
  if ((huart->RxState == HAL_UART_STATE_BUSY_RX) && dmarequest)
 8007f6a:	68bb      	ldr	r3, [r7, #8]
 8007f6c:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 8007f70:	b2db      	uxtb	r3, r3
 8007f72:	2b22      	cmp	r3, #34	; 0x22
 8007f74:	d108      	bne.n	8007f88 <UART_DMAError+0x7a>
 8007f76:	68fb      	ldr	r3, [r7, #12]
 8007f78:	2b00      	cmp	r3, #0
 8007f7a:	d005      	beq.n	8007f88 <UART_DMAError+0x7a>
  {
    huart->RxXferCount = 0x00U;
 8007f7c:	68bb      	ldr	r3, [r7, #8]
 8007f7e:	2200      	movs	r2, #0
 8007f80:	85da      	strh	r2, [r3, #46]	; 0x2e
    UART_EndRxTransfer(huart);
 8007f82:	68b8      	ldr	r0, [r7, #8]
 8007f84:	f000 f888 	bl	8008098 <UART_EndRxTransfer>
  }

  huart->ErrorCode |= HAL_UART_ERROR_DMA;
 8007f88:	68bb      	ldr	r3, [r7, #8]
 8007f8a:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8007f8c:	f043 0210 	orr.w	r2, r3, #16
 8007f90:	68bb      	ldr	r3, [r7, #8]
 8007f92:	641a      	str	r2, [r3, #64]	; 0x40
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 8007f94:	68b8      	ldr	r0, [r7, #8]
 8007f96:	f7ff ff07 	bl	8007da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8007f9a:	bf00      	nop
 8007f9c:	3710      	adds	r7, #16
 8007f9e:	46bd      	mov	sp, r7
 8007fa0:	bd80      	pop	{r7, pc}
	...

08007fa4 <UART_Start_Receive_DMA>:
  * @param  pData Pointer to data buffer (u8 or u16 data elements).
  * @param  Size  Amount of data elements (u8 or u16) to be received.
  * @retval HAL status
  */
HAL_StatusTypeDef UART_Start_Receive_DMA(UART_HandleTypeDef *huart, uint8_t *pData, uint16_t Size)
{
 8007fa4:	b580      	push	{r7, lr}
 8007fa6:	b086      	sub	sp, #24
 8007fa8:	af00      	add	r7, sp, #0
 8007faa:	60f8      	str	r0, [r7, #12]
 8007fac:	60b9      	str	r1, [r7, #8]
 8007fae:	4613      	mov	r3, r2
 8007fb0:	80fb      	strh	r3, [r7, #6]
  uint32_t *tmp;

  huart->pRxBuffPtr = pData;
 8007fb2:	68ba      	ldr	r2, [r7, #8]
 8007fb4:	68fb      	ldr	r3, [r7, #12]
 8007fb6:	629a      	str	r2, [r3, #40]	; 0x28
  huart->RxXferSize = Size;
 8007fb8:	68fb      	ldr	r3, [r7, #12]
 8007fba:	88fa      	ldrh	r2, [r7, #6]
 8007fbc:	859a      	strh	r2, [r3, #44]	; 0x2c

  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8007fbe:	68fb      	ldr	r3, [r7, #12]
 8007fc0:	2200      	movs	r2, #0
 8007fc2:	641a      	str	r2, [r3, #64]	; 0x40
  huart->RxState = HAL_UART_STATE_BUSY_RX;
 8007fc4:	68fb      	ldr	r3, [r7, #12]
 8007fc6:	2222      	movs	r2, #34	; 0x22
 8007fc8:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

  /* Set the UART DMA transfer complete callback */
  huart->hdmarx->XferCpltCallback = UART_DMAReceiveCplt;
 8007fcc:	68fb      	ldr	r3, [r7, #12]
 8007fce:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd0:	4a23      	ldr	r2, [pc, #140]	; (8008060 <UART_Start_Receive_DMA+0xbc>)
 8007fd2:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Set the UART DMA Half transfer complete callback */
  huart->hdmarx->XferHalfCpltCallback = UART_DMARxHalfCplt;
 8007fd4:	68fb      	ldr	r3, [r7, #12]
 8007fd6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fd8:	4a22      	ldr	r2, [pc, #136]	; (8008064 <UART_Start_Receive_DMA+0xc0>)
 8007fda:	641a      	str	r2, [r3, #64]	; 0x40

  /* Set the DMA error callback */
  huart->hdmarx->XferErrorCallback = UART_DMAError;
 8007fdc:	68fb      	ldr	r3, [r7, #12]
 8007fde:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe0:	4a21      	ldr	r2, [pc, #132]	; (8008068 <UART_Start_Receive_DMA+0xc4>)
 8007fe2:	64da      	str	r2, [r3, #76]	; 0x4c

  /* Set the DMA abort callback */
  huart->hdmarx->XferAbortCallback = NULL;
 8007fe4:	68fb      	ldr	r3, [r7, #12]
 8007fe6:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 8007fe8:	2200      	movs	r2, #0
 8007fea:	651a      	str	r2, [r3, #80]	; 0x50

  /* Enable the DMA stream */
  tmp = (uint32_t *)&pData;
 8007fec:	f107 0308 	add.w	r3, r7, #8
 8007ff0:	617b      	str	r3, [r7, #20]
  HAL_DMA_Start_IT(huart->hdmarx, (uint32_t)&huart->Instance->DR, *(uint32_t *)tmp, Size);
 8007ff2:	68fb      	ldr	r3, [r7, #12]
 8007ff4:	6b98      	ldr	r0, [r3, #56]	; 0x38
 8007ff6:	68fb      	ldr	r3, [r7, #12]
 8007ff8:	681b      	ldr	r3, [r3, #0]
 8007ffa:	3304      	adds	r3, #4
 8007ffc:	4619      	mov	r1, r3
 8007ffe:	697b      	ldr	r3, [r7, #20]
 8008000:	681a      	ldr	r2, [r3, #0]
 8008002:	88fb      	ldrh	r3, [r7, #6]
 8008004:	f7fb fa9c 	bl	8003540 <HAL_DMA_Start_IT>

  /* Clear the Overrun flag just before enabling the DMA Rx request: can be mandatory for the second transfer */
  __HAL_UART_CLEAR_OREFLAG(huart);
 8008008:	2300      	movs	r3, #0
 800800a:	613b      	str	r3, [r7, #16]
 800800c:	68fb      	ldr	r3, [r7, #12]
 800800e:	681b      	ldr	r3, [r3, #0]
 8008010:	681b      	ldr	r3, [r3, #0]
 8008012:	613b      	str	r3, [r7, #16]
 8008014:	68fb      	ldr	r3, [r7, #12]
 8008016:	681b      	ldr	r3, [r3, #0]
 8008018:	685b      	ldr	r3, [r3, #4]
 800801a:	613b      	str	r3, [r7, #16]
 800801c:	693b      	ldr	r3, [r7, #16]

  /* Process Unlocked */
  __HAL_UNLOCK(huart);
 800801e:	68fb      	ldr	r3, [r7, #12]
 8008020:	2200      	movs	r2, #0
 8008022:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Enable the UART Parity Error Interrupt */
  SET_BIT(huart->Instance->CR1, USART_CR1_PEIE);
 8008026:	68fb      	ldr	r3, [r7, #12]
 8008028:	681b      	ldr	r3, [r3, #0]
 800802a:	68da      	ldr	r2, [r3, #12]
 800802c:	68fb      	ldr	r3, [r7, #12]
 800802e:	681b      	ldr	r3, [r3, #0]
 8008030:	f442 7280 	orr.w	r2, r2, #256	; 0x100
 8008034:	60da      	str	r2, [r3, #12]

  /* Enable the UART Error Interrupt: (Frame error, noise error, overrun error) */
  SET_BIT(huart->Instance->CR3, USART_CR3_EIE);
 8008036:	68fb      	ldr	r3, [r7, #12]
 8008038:	681b      	ldr	r3, [r3, #0]
 800803a:	695a      	ldr	r2, [r3, #20]
 800803c:	68fb      	ldr	r3, [r7, #12]
 800803e:	681b      	ldr	r3, [r3, #0]
 8008040:	f042 0201 	orr.w	r2, r2, #1
 8008044:	615a      	str	r2, [r3, #20]

  /* Enable the DMA transfer for the receiver request by setting the DMAR bit
  in the UART CR3 register */
  SET_BIT(huart->Instance->CR3, USART_CR3_DMAR);
 8008046:	68fb      	ldr	r3, [r7, #12]
 8008048:	681b      	ldr	r3, [r3, #0]
 800804a:	695a      	ldr	r2, [r3, #20]
 800804c:	68fb      	ldr	r3, [r7, #12]
 800804e:	681b      	ldr	r3, [r3, #0]
 8008050:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 8008054:	615a      	str	r2, [r3, #20]

  return HAL_OK;
 8008056:	2300      	movs	r3, #0
}
 8008058:	4618      	mov	r0, r3
 800805a:	3718      	adds	r7, #24
 800805c:	46bd      	mov	sp, r7
 800805e:	bd80      	pop	{r7, pc}
 8008060:	08007e43 	.word	0x08007e43
 8008064:	08007ed9 	.word	0x08007ed9
 8008068:	08007f0f 	.word	0x08007f0f

0800806c <UART_EndTxTransfer>:
  * @brief  End ongoing Tx transfer on UART peripheral (following error detection or Transmit completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndTxTransfer(UART_HandleTypeDef *huart)
{
 800806c:	b480      	push	{r7}
 800806e:	b083      	sub	sp, #12
 8008070:	af00      	add	r7, sp, #0
 8008072:	6078      	str	r0, [r7, #4]
  /* Disable TXEIE and TCIE interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_TXEIE | USART_CR1_TCIE));
 8008074:	687b      	ldr	r3, [r7, #4]
 8008076:	681b      	ldr	r3, [r3, #0]
 8008078:	68da      	ldr	r2, [r3, #12]
 800807a:	687b      	ldr	r3, [r7, #4]
 800807c:	681b      	ldr	r3, [r3, #0]
 800807e:	f022 02c0 	bic.w	r2, r2, #192	; 0xc0
 8008082:	60da      	str	r2, [r3, #12]

  /* At end of Tx process, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 8008084:	687b      	ldr	r3, [r7, #4]
 8008086:	2220      	movs	r2, #32
 8008088:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
}
 800808c:	bf00      	nop
 800808e:	370c      	adds	r7, #12
 8008090:	46bd      	mov	sp, r7
 8008092:	f85d 7b04 	ldr.w	r7, [sp], #4
 8008096:	4770      	bx	lr

08008098 <UART_EndRxTransfer>:
  * @brief  End ongoing Rx transfer on UART peripheral (following error detection or Reception completion).
  * @param  huart UART handle.
  * @retval None
  */
static void UART_EndRxTransfer(UART_HandleTypeDef *huart)
{
 8008098:	b480      	push	{r7}
 800809a:	b083      	sub	sp, #12
 800809c:	af00      	add	r7, sp, #0
 800809e:	6078      	str	r0, [r7, #4]
  /* Disable RXNE, PE and ERR (Frame error, noise error, overrun error) interrupts */
  CLEAR_BIT(huart->Instance->CR1, (USART_CR1_RXNEIE | USART_CR1_PEIE));
 80080a0:	687b      	ldr	r3, [r7, #4]
 80080a2:	681b      	ldr	r3, [r3, #0]
 80080a4:	68da      	ldr	r2, [r3, #12]
 80080a6:	687b      	ldr	r3, [r7, #4]
 80080a8:	681b      	ldr	r3, [r3, #0]
 80080aa:	f422 7290 	bic.w	r2, r2, #288	; 0x120
 80080ae:	60da      	str	r2, [r3, #12]
  CLEAR_BIT(huart->Instance->CR3, USART_CR3_EIE);
 80080b0:	687b      	ldr	r3, [r7, #4]
 80080b2:	681b      	ldr	r3, [r3, #0]
 80080b4:	695a      	ldr	r2, [r3, #20]
 80080b6:	687b      	ldr	r3, [r7, #4]
 80080b8:	681b      	ldr	r3, [r3, #0]
 80080ba:	f022 0201 	bic.w	r2, r2, #1
 80080be:	615a      	str	r2, [r3, #20]

  /* In case of reception waiting for IDLE event, disable also the IDLE IE interrupt source */
  if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80080c0:	687b      	ldr	r3, [r7, #4]
 80080c2:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80080c4:	2b01      	cmp	r3, #1
 80080c6:	d107      	bne.n	80080d8 <UART_EndRxTransfer+0x40>
  {
    CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80080c8:	687b      	ldr	r3, [r7, #4]
 80080ca:	681b      	ldr	r3, [r3, #0]
 80080cc:	68da      	ldr	r2, [r3, #12]
 80080ce:	687b      	ldr	r3, [r7, #4]
 80080d0:	681b      	ldr	r3, [r3, #0]
 80080d2:	f022 0210 	bic.w	r2, r2, #16
 80080d6:	60da      	str	r2, [r3, #12]
  }

  /* At end of Rx process, restore huart->RxState to Ready */
  huart->RxState = HAL_UART_STATE_READY;
 80080d8:	687b      	ldr	r3, [r7, #4]
 80080da:	2220      	movs	r2, #32
 80080dc:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e
  huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 80080e0:	687b      	ldr	r3, [r7, #4]
 80080e2:	2200      	movs	r2, #0
 80080e4:	631a      	str	r2, [r3, #48]	; 0x30
}
 80080e6:	bf00      	nop
 80080e8:	370c      	adds	r7, #12
 80080ea:	46bd      	mov	sp, r7
 80080ec:	f85d 7b04 	ldr.w	r7, [sp], #4
 80080f0:	4770      	bx	lr

080080f2 <UART_DMAAbortOnError>:
  * @param  hdma  Pointer to a DMA_HandleTypeDef structure that contains
  *               the configuration information for the specified DMA module.
  * @retval None
  */
static void UART_DMAAbortOnError(DMA_HandleTypeDef *hdma)
{
 80080f2:	b580      	push	{r7, lr}
 80080f4:	b084      	sub	sp, #16
 80080f6:	af00      	add	r7, sp, #0
 80080f8:	6078      	str	r0, [r7, #4]
  UART_HandleTypeDef *huart = (UART_HandleTypeDef *)((DMA_HandleTypeDef *)hdma)->Parent;
 80080fa:	687b      	ldr	r3, [r7, #4]
 80080fc:	6b9b      	ldr	r3, [r3, #56]	; 0x38
 80080fe:	60fb      	str	r3, [r7, #12]
  huart->RxXferCount = 0x00U;
 8008100:	68fb      	ldr	r3, [r7, #12]
 8008102:	2200      	movs	r2, #0
 8008104:	85da      	strh	r2, [r3, #46]	; 0x2e
  huart->TxXferCount = 0x00U;
 8008106:	68fb      	ldr	r3, [r7, #12]
 8008108:	2200      	movs	r2, #0
 800810a:	84da      	strh	r2, [r3, #38]	; 0x26
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered error callback*/
  huart->ErrorCallback(huart);
#else
  /*Call legacy weak error callback*/
  HAL_UART_ErrorCallback(huart);
 800810c:	68f8      	ldr	r0, [r7, #12]
 800810e:	f7ff fe4b 	bl	8007da8 <HAL_UART_ErrorCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
}
 8008112:	bf00      	nop
 8008114:	3710      	adds	r7, #16
 8008116:	46bd      	mov	sp, r7
 8008118:	bd80      	pop	{r7, pc}

0800811a <UART_Transmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Transmit_IT(UART_HandleTypeDef *huart)
{
 800811a:	b480      	push	{r7}
 800811c:	b085      	sub	sp, #20
 800811e:	af00      	add	r7, sp, #0
 8008120:	6078      	str	r0, [r7, #4]
  uint16_t *tmp;

  /* Check that a Tx process is ongoing */
  if (huart->gState == HAL_UART_STATE_BUSY_TX)
 8008122:	687b      	ldr	r3, [r7, #4]
 8008124:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8008128:	b2db      	uxtb	r3, r3
 800812a:	2b21      	cmp	r3, #33	; 0x21
 800812c:	d13e      	bne.n	80081ac <UART_Transmit_IT+0x92>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 800812e:	687b      	ldr	r3, [r7, #4]
 8008130:	689b      	ldr	r3, [r3, #8]
 8008132:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008136:	d114      	bne.n	8008162 <UART_Transmit_IT+0x48>
 8008138:	687b      	ldr	r3, [r7, #4]
 800813a:	691b      	ldr	r3, [r3, #16]
 800813c:	2b00      	cmp	r3, #0
 800813e:	d110      	bne.n	8008162 <UART_Transmit_IT+0x48>
    {
      tmp = (uint16_t *) huart->pTxBuffPtr;
 8008140:	687b      	ldr	r3, [r7, #4]
 8008142:	6a1b      	ldr	r3, [r3, #32]
 8008144:	60fb      	str	r3, [r7, #12]
      huart->Instance->DR = (uint16_t)(*tmp & (uint16_t)0x01FF);
 8008146:	68fb      	ldr	r3, [r7, #12]
 8008148:	881b      	ldrh	r3, [r3, #0]
 800814a:	461a      	mov	r2, r3
 800814c:	687b      	ldr	r3, [r7, #4]
 800814e:	681b      	ldr	r3, [r3, #0]
 8008150:	f3c2 0208 	ubfx	r2, r2, #0, #9
 8008154:	605a      	str	r2, [r3, #4]
      huart->pTxBuffPtr += 2U;
 8008156:	687b      	ldr	r3, [r7, #4]
 8008158:	6a1b      	ldr	r3, [r3, #32]
 800815a:	1c9a      	adds	r2, r3, #2
 800815c:	687b      	ldr	r3, [r7, #4]
 800815e:	621a      	str	r2, [r3, #32]
 8008160:	e008      	b.n	8008174 <UART_Transmit_IT+0x5a>
    }
    else
    {
      huart->Instance->DR = (uint8_t)(*huart->pTxBuffPtr++ & (uint8_t)0x00FF);
 8008162:	687b      	ldr	r3, [r7, #4]
 8008164:	6a1b      	ldr	r3, [r3, #32]
 8008166:	1c59      	adds	r1, r3, #1
 8008168:	687a      	ldr	r2, [r7, #4]
 800816a:	6211      	str	r1, [r2, #32]
 800816c:	781a      	ldrb	r2, [r3, #0]
 800816e:	687b      	ldr	r3, [r7, #4]
 8008170:	681b      	ldr	r3, [r3, #0]
 8008172:	605a      	str	r2, [r3, #4]
    }

    if (--huart->TxXferCount == 0U)
 8008174:	687b      	ldr	r3, [r7, #4]
 8008176:	8cdb      	ldrh	r3, [r3, #38]	; 0x26
 8008178:	b29b      	uxth	r3, r3
 800817a:	3b01      	subs	r3, #1
 800817c:	b29b      	uxth	r3, r3
 800817e:	687a      	ldr	r2, [r7, #4]
 8008180:	4619      	mov	r1, r3
 8008182:	84d1      	strh	r1, [r2, #38]	; 0x26
 8008184:	2b00      	cmp	r3, #0
 8008186:	d10f      	bne.n	80081a8 <UART_Transmit_IT+0x8e>
    {
      /* Disable the UART Transmit Complete Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_TXE);
 8008188:	687b      	ldr	r3, [r7, #4]
 800818a:	681b      	ldr	r3, [r3, #0]
 800818c:	68da      	ldr	r2, [r3, #12]
 800818e:	687b      	ldr	r3, [r7, #4]
 8008190:	681b      	ldr	r3, [r3, #0]
 8008192:	f022 0280 	bic.w	r2, r2, #128	; 0x80
 8008196:	60da      	str	r2, [r3, #12]

      /* Enable the UART Transmit Complete Interrupt */
      __HAL_UART_ENABLE_IT(huart, UART_IT_TC);
 8008198:	687b      	ldr	r3, [r7, #4]
 800819a:	681b      	ldr	r3, [r3, #0]
 800819c:	68da      	ldr	r2, [r3, #12]
 800819e:	687b      	ldr	r3, [r7, #4]
 80081a0:	681b      	ldr	r3, [r3, #0]
 80081a2:	f042 0240 	orr.w	r2, r2, #64	; 0x40
 80081a6:	60da      	str	r2, [r3, #12]
    }
    return HAL_OK;
 80081a8:	2300      	movs	r3, #0
 80081aa:	e000      	b.n	80081ae <UART_Transmit_IT+0x94>
  }
  else
  {
    return HAL_BUSY;
 80081ac:	2302      	movs	r3, #2
  }
}
 80081ae:	4618      	mov	r0, r3
 80081b0:	3714      	adds	r7, #20
 80081b2:	46bd      	mov	sp, r7
 80081b4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80081b8:	4770      	bx	lr

080081ba <UART_EndTransmit_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_EndTransmit_IT(UART_HandleTypeDef *huart)
{
 80081ba:	b580      	push	{r7, lr}
 80081bc:	b082      	sub	sp, #8
 80081be:	af00      	add	r7, sp, #0
 80081c0:	6078      	str	r0, [r7, #4]
  /* Disable the UART Transmit Complete Interrupt */
  __HAL_UART_DISABLE_IT(huart, UART_IT_TC);
 80081c2:	687b      	ldr	r3, [r7, #4]
 80081c4:	681b      	ldr	r3, [r3, #0]
 80081c6:	68da      	ldr	r2, [r3, #12]
 80081c8:	687b      	ldr	r3, [r7, #4]
 80081ca:	681b      	ldr	r3, [r3, #0]
 80081cc:	f022 0240 	bic.w	r2, r2, #64	; 0x40
 80081d0:	60da      	str	r2, [r3, #12]

  /* Tx process is ended, restore huart->gState to Ready */
  huart->gState = HAL_UART_STATE_READY;
 80081d2:	687b      	ldr	r3, [r7, #4]
 80081d4:	2220      	movs	r2, #32
 80081d6:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
  /*Call registered Tx complete callback*/
  huart->TxCpltCallback(huart);
#else
  /*Call legacy weak Tx complete callback*/
  HAL_UART_TxCpltCallback(huart);
 80081da:	6878      	ldr	r0, [r7, #4]
 80081dc:	f7ff fdbc 	bl	8007d58 <HAL_UART_TxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */

  return HAL_OK;
 80081e0:	2300      	movs	r3, #0
}
 80081e2:	4618      	mov	r0, r3
 80081e4:	3708      	adds	r7, #8
 80081e6:	46bd      	mov	sp, r7
 80081e8:	bd80      	pop	{r7, pc}

080081ea <UART_Receive_IT>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
static HAL_StatusTypeDef UART_Receive_IT(UART_HandleTypeDef *huart)
{
 80081ea:	b580      	push	{r7, lr}
 80081ec:	b084      	sub	sp, #16
 80081ee:	af00      	add	r7, sp, #0
 80081f0:	6078      	str	r0, [r7, #4]
  uint8_t  *pdata8bits;
  uint16_t *pdata16bits;

  /* Check that a Rx process is ongoing */
  if (huart->RxState == HAL_UART_STATE_BUSY_RX)
 80081f2:	687b      	ldr	r3, [r7, #4]
 80081f4:	f893 303e 	ldrb.w	r3, [r3, #62]	; 0x3e
 80081f8:	b2db      	uxtb	r3, r3
 80081fa:	2b22      	cmp	r3, #34	; 0x22
 80081fc:	f040 8087 	bne.w	800830e <UART_Receive_IT+0x124>
  {
    if ((huart->Init.WordLength == UART_WORDLENGTH_9B) && (huart->Init.Parity == UART_PARITY_NONE))
 8008200:	687b      	ldr	r3, [r7, #4]
 8008202:	689b      	ldr	r3, [r3, #8]
 8008204:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8008208:	d117      	bne.n	800823a <UART_Receive_IT+0x50>
 800820a:	687b      	ldr	r3, [r7, #4]
 800820c:	691b      	ldr	r3, [r3, #16]
 800820e:	2b00      	cmp	r3, #0
 8008210:	d113      	bne.n	800823a <UART_Receive_IT+0x50>
    {
      pdata8bits  = NULL;
 8008212:	2300      	movs	r3, #0
 8008214:	60fb      	str	r3, [r7, #12]
      pdata16bits = (uint16_t *) huart->pRxBuffPtr;
 8008216:	687b      	ldr	r3, [r7, #4]
 8008218:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800821a:	60bb      	str	r3, [r7, #8]
      *pdata16bits = (uint16_t)(huart->Instance->DR & (uint16_t)0x01FF);
 800821c:	687b      	ldr	r3, [r7, #4]
 800821e:	681b      	ldr	r3, [r3, #0]
 8008220:	685b      	ldr	r3, [r3, #4]
 8008222:	b29b      	uxth	r3, r3
 8008224:	f3c3 0308 	ubfx	r3, r3, #0, #9
 8008228:	b29a      	uxth	r2, r3
 800822a:	68bb      	ldr	r3, [r7, #8]
 800822c:	801a      	strh	r2, [r3, #0]
      huart->pRxBuffPtr += 2U;
 800822e:	687b      	ldr	r3, [r7, #4]
 8008230:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008232:	1c9a      	adds	r2, r3, #2
 8008234:	687b      	ldr	r3, [r7, #4]
 8008236:	629a      	str	r2, [r3, #40]	; 0x28
 8008238:	e026      	b.n	8008288 <UART_Receive_IT+0x9e>
    }
    else
    {
      pdata8bits = (uint8_t *) huart->pRxBuffPtr;
 800823a:	687b      	ldr	r3, [r7, #4]
 800823c:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 800823e:	60fb      	str	r3, [r7, #12]
      pdata16bits  = NULL;
 8008240:	2300      	movs	r3, #0
 8008242:	60bb      	str	r3, [r7, #8]

      if ((huart->Init.WordLength == UART_WORDLENGTH_9B) || ((huart->Init.WordLength == UART_WORDLENGTH_8B) && (huart->Init.Parity == UART_PARITY_NONE)))
 8008244:	687b      	ldr	r3, [r7, #4]
 8008246:	689b      	ldr	r3, [r3, #8]
 8008248:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800824c:	d007      	beq.n	800825e <UART_Receive_IT+0x74>
 800824e:	687b      	ldr	r3, [r7, #4]
 8008250:	689b      	ldr	r3, [r3, #8]
 8008252:	2b00      	cmp	r3, #0
 8008254:	d10a      	bne.n	800826c <UART_Receive_IT+0x82>
 8008256:	687b      	ldr	r3, [r7, #4]
 8008258:	691b      	ldr	r3, [r3, #16]
 800825a:	2b00      	cmp	r3, #0
 800825c:	d106      	bne.n	800826c <UART_Receive_IT+0x82>
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x00FF);
 800825e:	687b      	ldr	r3, [r7, #4]
 8008260:	681b      	ldr	r3, [r3, #0]
 8008262:	685b      	ldr	r3, [r3, #4]
 8008264:	b2da      	uxtb	r2, r3
 8008266:	68fb      	ldr	r3, [r7, #12]
 8008268:	701a      	strb	r2, [r3, #0]
 800826a:	e008      	b.n	800827e <UART_Receive_IT+0x94>
      }
      else
      {
        *pdata8bits = (uint8_t)(huart->Instance->DR & (uint8_t)0x007F);
 800826c:	687b      	ldr	r3, [r7, #4]
 800826e:	681b      	ldr	r3, [r3, #0]
 8008270:	685b      	ldr	r3, [r3, #4]
 8008272:	b2db      	uxtb	r3, r3
 8008274:	f003 037f 	and.w	r3, r3, #127	; 0x7f
 8008278:	b2da      	uxtb	r2, r3
 800827a:	68fb      	ldr	r3, [r7, #12]
 800827c:	701a      	strb	r2, [r3, #0]
      }
      huart->pRxBuffPtr += 1U;
 800827e:	687b      	ldr	r3, [r7, #4]
 8008280:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8008282:	1c5a      	adds	r2, r3, #1
 8008284:	687b      	ldr	r3, [r7, #4]
 8008286:	629a      	str	r2, [r3, #40]	; 0x28
    }

    if (--huart->RxXferCount == 0U)
 8008288:	687b      	ldr	r3, [r7, #4]
 800828a:	8ddb      	ldrh	r3, [r3, #46]	; 0x2e
 800828c:	b29b      	uxth	r3, r3
 800828e:	3b01      	subs	r3, #1
 8008290:	b29b      	uxth	r3, r3
 8008292:	687a      	ldr	r2, [r7, #4]
 8008294:	4619      	mov	r1, r3
 8008296:	85d1      	strh	r1, [r2, #46]	; 0x2e
 8008298:	2b00      	cmp	r3, #0
 800829a:	d136      	bne.n	800830a <UART_Receive_IT+0x120>
    {
      /* Disable the UART Data Register not empty Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_RXNE);
 800829c:	687b      	ldr	r3, [r7, #4]
 800829e:	681b      	ldr	r3, [r3, #0]
 80082a0:	68da      	ldr	r2, [r3, #12]
 80082a2:	687b      	ldr	r3, [r7, #4]
 80082a4:	681b      	ldr	r3, [r3, #0]
 80082a6:	f022 0220 	bic.w	r2, r2, #32
 80082aa:	60da      	str	r2, [r3, #12]

      /* Disable the UART Parity Error Interrupt */
      __HAL_UART_DISABLE_IT(huart, UART_IT_PE);
 80082ac:	687b      	ldr	r3, [r7, #4]
 80082ae:	681b      	ldr	r3, [r3, #0]
 80082b0:	68da      	ldr	r2, [r3, #12]
 80082b2:	687b      	ldr	r3, [r7, #4]
 80082b4:	681b      	ldr	r3, [r3, #0]
 80082b6:	f422 7280 	bic.w	r2, r2, #256	; 0x100
 80082ba:	60da      	str	r2, [r3, #12]

      /* Disable the UART Error Interrupt: (Frame error, noise error, overrun error) */
      __HAL_UART_DISABLE_IT(huart, UART_IT_ERR);
 80082bc:	687b      	ldr	r3, [r7, #4]
 80082be:	681b      	ldr	r3, [r3, #0]
 80082c0:	695a      	ldr	r2, [r3, #20]
 80082c2:	687b      	ldr	r3, [r7, #4]
 80082c4:	681b      	ldr	r3, [r3, #0]
 80082c6:	f022 0201 	bic.w	r2, r2, #1
 80082ca:	615a      	str	r2, [r3, #20]

      /* Rx process is completed, restore huart->RxState to Ready */
      huart->RxState = HAL_UART_STATE_READY;
 80082cc:	687b      	ldr	r3, [r7, #4]
 80082ce:	2220      	movs	r2, #32
 80082d0:	f883 203e 	strb.w	r2, [r3, #62]	; 0x3e

      /* Check current reception Mode :
         If Reception till IDLE event has been selected : */
      if (huart->ReceptionType == HAL_UART_RECEPTION_TOIDLE)
 80082d4:	687b      	ldr	r3, [r7, #4]
 80082d6:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80082d8:	2b01      	cmp	r3, #1
 80082da:	d10e      	bne.n	80082fa <UART_Receive_IT+0x110>
      {
        /* Disable IDLE interrupt */
        CLEAR_BIT(huart->Instance->CR1, USART_CR1_IDLEIE);
 80082dc:	687b      	ldr	r3, [r7, #4]
 80082de:	681b      	ldr	r3, [r3, #0]
 80082e0:	68da      	ldr	r2, [r3, #12]
 80082e2:	687b      	ldr	r3, [r7, #4]
 80082e4:	681b      	ldr	r3, [r3, #0]
 80082e6:	f022 0210 	bic.w	r2, r2, #16
 80082ea:	60da      	str	r2, [r3, #12]
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)
        /*Call registered Rx Event callback*/
        huart->RxEventCallback(huart, huart->RxXferSize);
#else
        /*Call legacy weak Rx Event callback*/
        HAL_UARTEx_RxEventCallback(huart, huart->RxXferSize);
 80082ec:	687b      	ldr	r3, [r7, #4]
 80082ee:	8d9b      	ldrh	r3, [r3, #44]	; 0x2c
 80082f0:	4619      	mov	r1, r3
 80082f2:	6878      	ldr	r0, [r7, #4]
 80082f4:	f7ff fd62 	bl	8007dbc <HAL_UARTEx_RxEventCallback>
 80082f8:	e002      	b.n	8008300 <UART_Receive_IT+0x116>
#if (USE_HAL_UART_REGISTER_CALLBACKS == 1)		  
       /*Call registered Rx complete callback*/
       huart->RxCpltCallback(huart);
#else
       /*Call legacy weak Rx complete callback*/
       HAL_UART_RxCpltCallback(huart);
 80082fa:	6878      	ldr	r0, [r7, #4]
 80082fc:	f7ff fd40 	bl	8007d80 <HAL_UART_RxCpltCallback>
#endif /* USE_HAL_UART_REGISTER_CALLBACKS */
      }
      huart->ReceptionType = HAL_UART_RECEPTION_STANDARD;
 8008300:	687b      	ldr	r3, [r7, #4]
 8008302:	2200      	movs	r2, #0
 8008304:	631a      	str	r2, [r3, #48]	; 0x30
      return HAL_OK;
 8008306:	2300      	movs	r3, #0
 8008308:	e002      	b.n	8008310 <UART_Receive_IT+0x126>
    }
    return HAL_OK;
 800830a:	2300      	movs	r3, #0
 800830c:	e000      	b.n	8008310 <UART_Receive_IT+0x126>
  }
  else
  {
    return HAL_BUSY;
 800830e:	2302      	movs	r3, #2
  }
}
 8008310:	4618      	mov	r0, r3
 8008312:	3710      	adds	r7, #16
 8008314:	46bd      	mov	sp, r7
 8008316:	bd80      	pop	{r7, pc}

08008318 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8008318:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800831c:	b09f      	sub	sp, #124	; 0x7c
 800831e:	af00      	add	r7, sp, #0
 8008320:	66f8      	str	r0, [r7, #108]	; 0x6c
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8008322:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008324:	681b      	ldr	r3, [r3, #0]
 8008326:	691b      	ldr	r3, [r3, #16]
 8008328:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800832c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800832e:	68d9      	ldr	r1, [r3, #12]
 8008330:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008332:	681a      	ldr	r2, [r3, #0]
 8008334:	ea40 0301 	orr.w	r3, r0, r1
 8008338:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800833a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800833c:	689a      	ldr	r2, [r3, #8]
 800833e:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008340:	691b      	ldr	r3, [r3, #16]
 8008342:	431a      	orrs	r2, r3
 8008344:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008346:	695b      	ldr	r3, [r3, #20]
 8008348:	431a      	orrs	r2, r3
 800834a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800834c:	69db      	ldr	r3, [r3, #28]
 800834e:	4313      	orrs	r3, r2
 8008350:	673b      	str	r3, [r7, #112]	; 0x70
  MODIFY_REG(huart->Instance->CR1,
 8008352:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008354:	681b      	ldr	r3, [r3, #0]
 8008356:	68db      	ldr	r3, [r3, #12]
 8008358:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800835c:	f021 010c 	bic.w	r1, r1, #12
 8008360:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008362:	681a      	ldr	r2, [r3, #0]
 8008364:	6f3b      	ldr	r3, [r7, #112]	; 0x70
 8008366:	430b      	orrs	r3, r1
 8008368:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800836a:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800836c:	681b      	ldr	r3, [r3, #0]
 800836e:	695b      	ldr	r3, [r3, #20]
 8008370:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 8008374:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008376:	6999      	ldr	r1, [r3, #24]
 8008378:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800837a:	681a      	ldr	r2, [r3, #0]
 800837c:	ea40 0301 	orr.w	r3, r0, r1
 8008380:	6153      	str	r3, [r2, #20]
    if ((huart->Instance == USART1) || (huart->Instance == USART6) || (huart->Instance == UART9) || (huart->Instance == UART10))
    {
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8008382:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008384:	681a      	ldr	r2, [r3, #0]
 8008386:	4bc5      	ldr	r3, [pc, #788]	; (800869c <UART_SetConfig+0x384>)
 8008388:	429a      	cmp	r2, r3
 800838a:	d004      	beq.n	8008396 <UART_SetConfig+0x7e>
 800838c:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800838e:	681a      	ldr	r2, [r3, #0]
 8008390:	4bc3      	ldr	r3, [pc, #780]	; (80086a0 <UART_SetConfig+0x388>)
 8008392:	429a      	cmp	r2, r3
 8008394:	d103      	bne.n	800839e <UART_SetConfig+0x86>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 8008396:	f7fe f8eb 	bl	8006570 <HAL_RCC_GetPCLK2Freq>
 800839a:	6778      	str	r0, [r7, #116]	; 0x74
 800839c:	e002      	b.n	80083a4 <UART_SetConfig+0x8c>
      pclk = HAL_RCC_GetPCLK2Freq();
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 800839e:	f7fe f8d3 	bl	8006548 <HAL_RCC_GetPCLK1Freq>
 80083a2:	6778      	str	r0, [r7, #116]	; 0x74
    }
  /*-------------------------- USART BRR Configuration ---------------------*/
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80083a4:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083a6:	69db      	ldr	r3, [r3, #28]
 80083a8:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80083ac:	f040 80b6 	bne.w	800851c <UART_SetConfig+0x204>
  {
    huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80083b0:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 80083b2:	461c      	mov	r4, r3
 80083b4:	f04f 0500 	mov.w	r5, #0
 80083b8:	4622      	mov	r2, r4
 80083ba:	462b      	mov	r3, r5
 80083bc:	1891      	adds	r1, r2, r2
 80083be:	6439      	str	r1, [r7, #64]	; 0x40
 80083c0:	415b      	adcs	r3, r3
 80083c2:	647b      	str	r3, [r7, #68]	; 0x44
 80083c4:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 80083c8:	1912      	adds	r2, r2, r4
 80083ca:	eb45 0303 	adc.w	r3, r5, r3
 80083ce:	f04f 0000 	mov.w	r0, #0
 80083d2:	f04f 0100 	mov.w	r1, #0
 80083d6:	00d9      	lsls	r1, r3, #3
 80083d8:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80083dc:	00d0      	lsls	r0, r2, #3
 80083de:	4602      	mov	r2, r0
 80083e0:	460b      	mov	r3, r1
 80083e2:	1911      	adds	r1, r2, r4
 80083e4:	6639      	str	r1, [r7, #96]	; 0x60
 80083e6:	416b      	adcs	r3, r5
 80083e8:	667b      	str	r3, [r7, #100]	; 0x64
 80083ea:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80083ec:	685b      	ldr	r3, [r3, #4]
 80083ee:	461a      	mov	r2, r3
 80083f0:	f04f 0300 	mov.w	r3, #0
 80083f4:	1891      	adds	r1, r2, r2
 80083f6:	63b9      	str	r1, [r7, #56]	; 0x38
 80083f8:	415b      	adcs	r3, r3
 80083fa:	63fb      	str	r3, [r7, #60]	; 0x3c
 80083fc:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8008400:	e9d7 0118 	ldrd	r0, r1, [r7, #96]	; 0x60
 8008404:	f7f8 fcb2 	bl	8000d6c <__aeabi_uldivmod>
 8008408:	4602      	mov	r2, r0
 800840a:	460b      	mov	r3, r1
 800840c:	4ba5      	ldr	r3, [pc, #660]	; (80086a4 <UART_SetConfig+0x38c>)
 800840e:	fba3 2302 	umull	r2, r3, r3, r2
 8008412:	095b      	lsrs	r3, r3, #5
 8008414:	011e      	lsls	r6, r3, #4
 8008416:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008418:	461c      	mov	r4, r3
 800841a:	f04f 0500 	mov.w	r5, #0
 800841e:	4622      	mov	r2, r4
 8008420:	462b      	mov	r3, r5
 8008422:	1891      	adds	r1, r2, r2
 8008424:	6339      	str	r1, [r7, #48]	; 0x30
 8008426:	415b      	adcs	r3, r3
 8008428:	637b      	str	r3, [r7, #52]	; 0x34
 800842a:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 800842e:	1912      	adds	r2, r2, r4
 8008430:	eb45 0303 	adc.w	r3, r5, r3
 8008434:	f04f 0000 	mov.w	r0, #0
 8008438:	f04f 0100 	mov.w	r1, #0
 800843c:	00d9      	lsls	r1, r3, #3
 800843e:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008442:	00d0      	lsls	r0, r2, #3
 8008444:	4602      	mov	r2, r0
 8008446:	460b      	mov	r3, r1
 8008448:	1911      	adds	r1, r2, r4
 800844a:	65b9      	str	r1, [r7, #88]	; 0x58
 800844c:	416b      	adcs	r3, r5
 800844e:	65fb      	str	r3, [r7, #92]	; 0x5c
 8008450:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008452:	685b      	ldr	r3, [r3, #4]
 8008454:	461a      	mov	r2, r3
 8008456:	f04f 0300 	mov.w	r3, #0
 800845a:	1891      	adds	r1, r2, r2
 800845c:	62b9      	str	r1, [r7, #40]	; 0x28
 800845e:	415b      	adcs	r3, r3
 8008460:	62fb      	str	r3, [r7, #44]	; 0x2c
 8008462:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8008466:	e9d7 0116 	ldrd	r0, r1, [r7, #88]	; 0x58
 800846a:	f7f8 fc7f 	bl	8000d6c <__aeabi_uldivmod>
 800846e:	4602      	mov	r2, r0
 8008470:	460b      	mov	r3, r1
 8008472:	4b8c      	ldr	r3, [pc, #560]	; (80086a4 <UART_SetConfig+0x38c>)
 8008474:	fba3 1302 	umull	r1, r3, r3, r2
 8008478:	095b      	lsrs	r3, r3, #5
 800847a:	2164      	movs	r1, #100	; 0x64
 800847c:	fb01 f303 	mul.w	r3, r1, r3
 8008480:	1ad3      	subs	r3, r2, r3
 8008482:	00db      	lsls	r3, r3, #3
 8008484:	3332      	adds	r3, #50	; 0x32
 8008486:	4a87      	ldr	r2, [pc, #540]	; (80086a4 <UART_SetConfig+0x38c>)
 8008488:	fba2 2303 	umull	r2, r3, r2, r3
 800848c:	095b      	lsrs	r3, r3, #5
 800848e:	005b      	lsls	r3, r3, #1
 8008490:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8008494:	441e      	add	r6, r3
 8008496:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008498:	4618      	mov	r0, r3
 800849a:	f04f 0100 	mov.w	r1, #0
 800849e:	4602      	mov	r2, r0
 80084a0:	460b      	mov	r3, r1
 80084a2:	1894      	adds	r4, r2, r2
 80084a4:	623c      	str	r4, [r7, #32]
 80084a6:	415b      	adcs	r3, r3
 80084a8:	627b      	str	r3, [r7, #36]	; 0x24
 80084aa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 80084ae:	1812      	adds	r2, r2, r0
 80084b0:	eb41 0303 	adc.w	r3, r1, r3
 80084b4:	f04f 0400 	mov.w	r4, #0
 80084b8:	f04f 0500 	mov.w	r5, #0
 80084bc:	00dd      	lsls	r5, r3, #3
 80084be:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80084c2:	00d4      	lsls	r4, r2, #3
 80084c4:	4622      	mov	r2, r4
 80084c6:	462b      	mov	r3, r5
 80084c8:	1814      	adds	r4, r2, r0
 80084ca:	653c      	str	r4, [r7, #80]	; 0x50
 80084cc:	414b      	adcs	r3, r1
 80084ce:	657b      	str	r3, [r7, #84]	; 0x54
 80084d0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80084d2:	685b      	ldr	r3, [r3, #4]
 80084d4:	461a      	mov	r2, r3
 80084d6:	f04f 0300 	mov.w	r3, #0
 80084da:	1891      	adds	r1, r2, r2
 80084dc:	61b9      	str	r1, [r7, #24]
 80084de:	415b      	adcs	r3, r3
 80084e0:	61fb      	str	r3, [r7, #28]
 80084e2:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 80084e6:	e9d7 0114 	ldrd	r0, r1, [r7, #80]	; 0x50
 80084ea:	f7f8 fc3f 	bl	8000d6c <__aeabi_uldivmod>
 80084ee:	4602      	mov	r2, r0
 80084f0:	460b      	mov	r3, r1
 80084f2:	4b6c      	ldr	r3, [pc, #432]	; (80086a4 <UART_SetConfig+0x38c>)
 80084f4:	fba3 1302 	umull	r1, r3, r3, r2
 80084f8:	095b      	lsrs	r3, r3, #5
 80084fa:	2164      	movs	r1, #100	; 0x64
 80084fc:	fb01 f303 	mul.w	r3, r1, r3
 8008500:	1ad3      	subs	r3, r2, r3
 8008502:	00db      	lsls	r3, r3, #3
 8008504:	3332      	adds	r3, #50	; 0x32
 8008506:	4a67      	ldr	r2, [pc, #412]	; (80086a4 <UART_SetConfig+0x38c>)
 8008508:	fba2 2303 	umull	r2, r3, r2, r3
 800850c:	095b      	lsrs	r3, r3, #5
 800850e:	f003 0207 	and.w	r2, r3, #7
 8008512:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008514:	681b      	ldr	r3, [r3, #0]
 8008516:	4432      	add	r2, r6
 8008518:	609a      	str	r2, [r3, #8]
  }
  else
  {
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
  }
}
 800851a:	e0b9      	b.n	8008690 <UART_SetConfig+0x378>
    huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 800851c:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800851e:	461c      	mov	r4, r3
 8008520:	f04f 0500 	mov.w	r5, #0
 8008524:	4622      	mov	r2, r4
 8008526:	462b      	mov	r3, r5
 8008528:	1891      	adds	r1, r2, r2
 800852a:	6139      	str	r1, [r7, #16]
 800852c:	415b      	adcs	r3, r3
 800852e:	617b      	str	r3, [r7, #20]
 8008530:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8008534:	1912      	adds	r2, r2, r4
 8008536:	eb45 0303 	adc.w	r3, r5, r3
 800853a:	f04f 0000 	mov.w	r0, #0
 800853e:	f04f 0100 	mov.w	r1, #0
 8008542:	00d9      	lsls	r1, r3, #3
 8008544:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8008548:	00d0      	lsls	r0, r2, #3
 800854a:	4602      	mov	r2, r0
 800854c:	460b      	mov	r3, r1
 800854e:	eb12 0804 	adds.w	r8, r2, r4
 8008552:	eb43 0905 	adc.w	r9, r3, r5
 8008556:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008558:	685b      	ldr	r3, [r3, #4]
 800855a:	4618      	mov	r0, r3
 800855c:	f04f 0100 	mov.w	r1, #0
 8008560:	f04f 0200 	mov.w	r2, #0
 8008564:	f04f 0300 	mov.w	r3, #0
 8008568:	008b      	lsls	r3, r1, #2
 800856a:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800856e:	0082      	lsls	r2, r0, #2
 8008570:	4640      	mov	r0, r8
 8008572:	4649      	mov	r1, r9
 8008574:	f7f8 fbfa 	bl	8000d6c <__aeabi_uldivmod>
 8008578:	4602      	mov	r2, r0
 800857a:	460b      	mov	r3, r1
 800857c:	4b49      	ldr	r3, [pc, #292]	; (80086a4 <UART_SetConfig+0x38c>)
 800857e:	fba3 2302 	umull	r2, r3, r3, r2
 8008582:	095b      	lsrs	r3, r3, #5
 8008584:	011e      	lsls	r6, r3, #4
 8008586:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 8008588:	4618      	mov	r0, r3
 800858a:	f04f 0100 	mov.w	r1, #0
 800858e:	4602      	mov	r2, r0
 8008590:	460b      	mov	r3, r1
 8008592:	1894      	adds	r4, r2, r2
 8008594:	60bc      	str	r4, [r7, #8]
 8008596:	415b      	adcs	r3, r3
 8008598:	60fb      	str	r3, [r7, #12]
 800859a:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 800859e:	1812      	adds	r2, r2, r0
 80085a0:	eb41 0303 	adc.w	r3, r1, r3
 80085a4:	f04f 0400 	mov.w	r4, #0
 80085a8:	f04f 0500 	mov.w	r5, #0
 80085ac:	00dd      	lsls	r5, r3, #3
 80085ae:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 80085b2:	00d4      	lsls	r4, r2, #3
 80085b4:	4622      	mov	r2, r4
 80085b6:	462b      	mov	r3, r5
 80085b8:	1814      	adds	r4, r2, r0
 80085ba:	64bc      	str	r4, [r7, #72]	; 0x48
 80085bc:	414b      	adcs	r3, r1
 80085be:	64fb      	str	r3, [r7, #76]	; 0x4c
 80085c0:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 80085c2:	685b      	ldr	r3, [r3, #4]
 80085c4:	4618      	mov	r0, r3
 80085c6:	f04f 0100 	mov.w	r1, #0
 80085ca:	f04f 0200 	mov.w	r2, #0
 80085ce:	f04f 0300 	mov.w	r3, #0
 80085d2:	008b      	lsls	r3, r1, #2
 80085d4:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 80085d8:	0082      	lsls	r2, r0, #2
 80085da:	e9d7 0112 	ldrd	r0, r1, [r7, #72]	; 0x48
 80085de:	f7f8 fbc5 	bl	8000d6c <__aeabi_uldivmod>
 80085e2:	4602      	mov	r2, r0
 80085e4:	460b      	mov	r3, r1
 80085e6:	4b2f      	ldr	r3, [pc, #188]	; (80086a4 <UART_SetConfig+0x38c>)
 80085e8:	fba3 1302 	umull	r1, r3, r3, r2
 80085ec:	095b      	lsrs	r3, r3, #5
 80085ee:	2164      	movs	r1, #100	; 0x64
 80085f0:	fb01 f303 	mul.w	r3, r1, r3
 80085f4:	1ad3      	subs	r3, r2, r3
 80085f6:	011b      	lsls	r3, r3, #4
 80085f8:	3332      	adds	r3, #50	; 0x32
 80085fa:	4a2a      	ldr	r2, [pc, #168]	; (80086a4 <UART_SetConfig+0x38c>)
 80085fc:	fba2 2303 	umull	r2, r3, r2, r3
 8008600:	095b      	lsrs	r3, r3, #5
 8008602:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8008606:	441e      	add	r6, r3
 8008608:	6f7b      	ldr	r3, [r7, #116]	; 0x74
 800860a:	4618      	mov	r0, r3
 800860c:	f04f 0100 	mov.w	r1, #0
 8008610:	4602      	mov	r2, r0
 8008612:	460b      	mov	r3, r1
 8008614:	1894      	adds	r4, r2, r2
 8008616:	603c      	str	r4, [r7, #0]
 8008618:	415b      	adcs	r3, r3
 800861a:	607b      	str	r3, [r7, #4]
 800861c:	e9d7 2300 	ldrd	r2, r3, [r7]
 8008620:	1812      	adds	r2, r2, r0
 8008622:	eb41 0303 	adc.w	r3, r1, r3
 8008626:	f04f 0400 	mov.w	r4, #0
 800862a:	f04f 0500 	mov.w	r5, #0
 800862e:	00dd      	lsls	r5, r3, #3
 8008630:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8008634:	00d4      	lsls	r4, r2, #3
 8008636:	4622      	mov	r2, r4
 8008638:	462b      	mov	r3, r5
 800863a:	eb12 0a00 	adds.w	sl, r2, r0
 800863e:	eb43 0b01 	adc.w	fp, r3, r1
 8008642:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 8008644:	685b      	ldr	r3, [r3, #4]
 8008646:	4618      	mov	r0, r3
 8008648:	f04f 0100 	mov.w	r1, #0
 800864c:	f04f 0200 	mov.w	r2, #0
 8008650:	f04f 0300 	mov.w	r3, #0
 8008654:	008b      	lsls	r3, r1, #2
 8008656:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800865a:	0082      	lsls	r2, r0, #2
 800865c:	4650      	mov	r0, sl
 800865e:	4659      	mov	r1, fp
 8008660:	f7f8 fb84 	bl	8000d6c <__aeabi_uldivmod>
 8008664:	4602      	mov	r2, r0
 8008666:	460b      	mov	r3, r1
 8008668:	4b0e      	ldr	r3, [pc, #56]	; (80086a4 <UART_SetConfig+0x38c>)
 800866a:	fba3 1302 	umull	r1, r3, r3, r2
 800866e:	095b      	lsrs	r3, r3, #5
 8008670:	2164      	movs	r1, #100	; 0x64
 8008672:	fb01 f303 	mul.w	r3, r1, r3
 8008676:	1ad3      	subs	r3, r2, r3
 8008678:	011b      	lsls	r3, r3, #4
 800867a:	3332      	adds	r3, #50	; 0x32
 800867c:	4a09      	ldr	r2, [pc, #36]	; (80086a4 <UART_SetConfig+0x38c>)
 800867e:	fba2 2303 	umull	r2, r3, r2, r3
 8008682:	095b      	lsrs	r3, r3, #5
 8008684:	f003 020f 	and.w	r2, r3, #15
 8008688:	6efb      	ldr	r3, [r7, #108]	; 0x6c
 800868a:	681b      	ldr	r3, [r3, #0]
 800868c:	4432      	add	r2, r6
 800868e:	609a      	str	r2, [r3, #8]
}
 8008690:	bf00      	nop
 8008692:	377c      	adds	r7, #124	; 0x7c
 8008694:	46bd      	mov	sp, r7
 8008696:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 800869a:	bf00      	nop
 800869c:	40011000 	.word	0x40011000
 80086a0:	40011400 	.word	0x40011400
 80086a4:	51eb851f 	.word	0x51eb851f

080086a8 <calloc>:
 80086a8:	4b02      	ldr	r3, [pc, #8]	; (80086b4 <calloc+0xc>)
 80086aa:	460a      	mov	r2, r1
 80086ac:	4601      	mov	r1, r0
 80086ae:	6818      	ldr	r0, [r3, #0]
 80086b0:	f000 b834 	b.w	800871c <_calloc_r>
 80086b4:	20000040 	.word	0x20000040

080086b8 <__errno>:
 80086b8:	4b01      	ldr	r3, [pc, #4]	; (80086c0 <__errno+0x8>)
 80086ba:	6818      	ldr	r0, [r3, #0]
 80086bc:	4770      	bx	lr
 80086be:	bf00      	nop
 80086c0:	20000040 	.word	0x20000040

080086c4 <__libc_init_array>:
 80086c4:	b570      	push	{r4, r5, r6, lr}
 80086c6:	4d0d      	ldr	r5, [pc, #52]	; (80086fc <__libc_init_array+0x38>)
 80086c8:	4c0d      	ldr	r4, [pc, #52]	; (8008700 <__libc_init_array+0x3c>)
 80086ca:	1b64      	subs	r4, r4, r5
 80086cc:	10a4      	asrs	r4, r4, #2
 80086ce:	2600      	movs	r6, #0
 80086d0:	42a6      	cmp	r6, r4
 80086d2:	d109      	bne.n	80086e8 <__libc_init_array+0x24>
 80086d4:	4d0b      	ldr	r5, [pc, #44]	; (8008704 <__libc_init_array+0x40>)
 80086d6:	4c0c      	ldr	r4, [pc, #48]	; (8008708 <__libc_init_array+0x44>)
 80086d8:	f001 f85c 	bl	8009794 <_init>
 80086dc:	1b64      	subs	r4, r4, r5
 80086de:	10a4      	asrs	r4, r4, #2
 80086e0:	2600      	movs	r6, #0
 80086e2:	42a6      	cmp	r6, r4
 80086e4:	d105      	bne.n	80086f2 <__libc_init_array+0x2e>
 80086e6:	bd70      	pop	{r4, r5, r6, pc}
 80086e8:	f855 3b04 	ldr.w	r3, [r5], #4
 80086ec:	4798      	blx	r3
 80086ee:	3601      	adds	r6, #1
 80086f0:	e7ee      	b.n	80086d0 <__libc_init_array+0xc>
 80086f2:	f855 3b04 	ldr.w	r3, [r5], #4
 80086f6:	4798      	blx	r3
 80086f8:	3601      	adds	r6, #1
 80086fa:	e7f2      	b.n	80086e2 <__libc_init_array+0x1e>
 80086fc:	08009820 	.word	0x08009820
 8008700:	08009820 	.word	0x08009820
 8008704:	08009820 	.word	0x08009820
 8008708:	08009824 	.word	0x08009824

0800870c <memset>:
 800870c:	4402      	add	r2, r0
 800870e:	4603      	mov	r3, r0
 8008710:	4293      	cmp	r3, r2
 8008712:	d100      	bne.n	8008716 <memset+0xa>
 8008714:	4770      	bx	lr
 8008716:	f803 1b01 	strb.w	r1, [r3], #1
 800871a:	e7f9      	b.n	8008710 <memset+0x4>

0800871c <_calloc_r>:
 800871c:	b513      	push	{r0, r1, r4, lr}
 800871e:	434a      	muls	r2, r1
 8008720:	4611      	mov	r1, r2
 8008722:	9201      	str	r2, [sp, #4]
 8008724:	f000 f80a 	bl	800873c <_malloc_r>
 8008728:	4604      	mov	r4, r0
 800872a:	b118      	cbz	r0, 8008734 <_calloc_r+0x18>
 800872c:	9a01      	ldr	r2, [sp, #4]
 800872e:	2100      	movs	r1, #0
 8008730:	f7ff ffec 	bl	800870c <memset>
 8008734:	4620      	mov	r0, r4
 8008736:	b002      	add	sp, #8
 8008738:	bd10      	pop	{r4, pc}
	...

0800873c <_malloc_r>:
 800873c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800873e:	1ccd      	adds	r5, r1, #3
 8008740:	f025 0503 	bic.w	r5, r5, #3
 8008744:	3508      	adds	r5, #8
 8008746:	2d0c      	cmp	r5, #12
 8008748:	bf38      	it	cc
 800874a:	250c      	movcc	r5, #12
 800874c:	2d00      	cmp	r5, #0
 800874e:	4606      	mov	r6, r0
 8008750:	db01      	blt.n	8008756 <_malloc_r+0x1a>
 8008752:	42a9      	cmp	r1, r5
 8008754:	d903      	bls.n	800875e <_malloc_r+0x22>
 8008756:	230c      	movs	r3, #12
 8008758:	6033      	str	r3, [r6, #0]
 800875a:	2000      	movs	r0, #0
 800875c:	bdf8      	pop	{r3, r4, r5, r6, r7, pc}
 800875e:	f000 f857 	bl	8008810 <__malloc_lock>
 8008762:	4921      	ldr	r1, [pc, #132]	; (80087e8 <_malloc_r+0xac>)
 8008764:	680a      	ldr	r2, [r1, #0]
 8008766:	4614      	mov	r4, r2
 8008768:	b99c      	cbnz	r4, 8008792 <_malloc_r+0x56>
 800876a:	4f20      	ldr	r7, [pc, #128]	; (80087ec <_malloc_r+0xb0>)
 800876c:	683b      	ldr	r3, [r7, #0]
 800876e:	b923      	cbnz	r3, 800877a <_malloc_r+0x3e>
 8008770:	4621      	mov	r1, r4
 8008772:	4630      	mov	r0, r6
 8008774:	f000 f83c 	bl	80087f0 <_sbrk_r>
 8008778:	6038      	str	r0, [r7, #0]
 800877a:	4629      	mov	r1, r5
 800877c:	4630      	mov	r0, r6
 800877e:	f000 f837 	bl	80087f0 <_sbrk_r>
 8008782:	1c43      	adds	r3, r0, #1
 8008784:	d123      	bne.n	80087ce <_malloc_r+0x92>
 8008786:	230c      	movs	r3, #12
 8008788:	6033      	str	r3, [r6, #0]
 800878a:	4630      	mov	r0, r6
 800878c:	f000 f846 	bl	800881c <__malloc_unlock>
 8008790:	e7e3      	b.n	800875a <_malloc_r+0x1e>
 8008792:	6823      	ldr	r3, [r4, #0]
 8008794:	1b5b      	subs	r3, r3, r5
 8008796:	d417      	bmi.n	80087c8 <_malloc_r+0x8c>
 8008798:	2b0b      	cmp	r3, #11
 800879a:	d903      	bls.n	80087a4 <_malloc_r+0x68>
 800879c:	6023      	str	r3, [r4, #0]
 800879e:	441c      	add	r4, r3
 80087a0:	6025      	str	r5, [r4, #0]
 80087a2:	e004      	b.n	80087ae <_malloc_r+0x72>
 80087a4:	6863      	ldr	r3, [r4, #4]
 80087a6:	42a2      	cmp	r2, r4
 80087a8:	bf0c      	ite	eq
 80087aa:	600b      	streq	r3, [r1, #0]
 80087ac:	6053      	strne	r3, [r2, #4]
 80087ae:	4630      	mov	r0, r6
 80087b0:	f000 f834 	bl	800881c <__malloc_unlock>
 80087b4:	f104 000b 	add.w	r0, r4, #11
 80087b8:	1d23      	adds	r3, r4, #4
 80087ba:	f020 0007 	bic.w	r0, r0, #7
 80087be:	1ac2      	subs	r2, r0, r3
 80087c0:	d0cc      	beq.n	800875c <_malloc_r+0x20>
 80087c2:	1a1b      	subs	r3, r3, r0
 80087c4:	50a3      	str	r3, [r4, r2]
 80087c6:	e7c9      	b.n	800875c <_malloc_r+0x20>
 80087c8:	4622      	mov	r2, r4
 80087ca:	6864      	ldr	r4, [r4, #4]
 80087cc:	e7cc      	b.n	8008768 <_malloc_r+0x2c>
 80087ce:	1cc4      	adds	r4, r0, #3
 80087d0:	f024 0403 	bic.w	r4, r4, #3
 80087d4:	42a0      	cmp	r0, r4
 80087d6:	d0e3      	beq.n	80087a0 <_malloc_r+0x64>
 80087d8:	1a21      	subs	r1, r4, r0
 80087da:	4630      	mov	r0, r6
 80087dc:	f000 f808 	bl	80087f0 <_sbrk_r>
 80087e0:	3001      	adds	r0, #1
 80087e2:	d1dd      	bne.n	80087a0 <_malloc_r+0x64>
 80087e4:	e7cf      	b.n	8008786 <_malloc_r+0x4a>
 80087e6:	bf00      	nop
 80087e8:	200001b0 	.word	0x200001b0
 80087ec:	200001b4 	.word	0x200001b4

080087f0 <_sbrk_r>:
 80087f0:	b538      	push	{r3, r4, r5, lr}
 80087f2:	4d06      	ldr	r5, [pc, #24]	; (800880c <_sbrk_r+0x1c>)
 80087f4:	2300      	movs	r3, #0
 80087f6:	4604      	mov	r4, r0
 80087f8:	4608      	mov	r0, r1
 80087fa:	602b      	str	r3, [r5, #0]
 80087fc:	f7fa fbca 	bl	8002f94 <_sbrk>
 8008800:	1c43      	adds	r3, r0, #1
 8008802:	d102      	bne.n	800880a <_sbrk_r+0x1a>
 8008804:	682b      	ldr	r3, [r5, #0]
 8008806:	b103      	cbz	r3, 800880a <_sbrk_r+0x1a>
 8008808:	6023      	str	r3, [r4, #0]
 800880a:	bd38      	pop	{r3, r4, r5, pc}
 800880c:	20000430 	.word	0x20000430

08008810 <__malloc_lock>:
 8008810:	4801      	ldr	r0, [pc, #4]	; (8008818 <__malloc_lock+0x8>)
 8008812:	f000 b809 	b.w	8008828 <__retarget_lock_acquire_recursive>
 8008816:	bf00      	nop
 8008818:	20000438 	.word	0x20000438

0800881c <__malloc_unlock>:
 800881c:	4801      	ldr	r0, [pc, #4]	; (8008824 <__malloc_unlock+0x8>)
 800881e:	f000 b804 	b.w	800882a <__retarget_lock_release_recursive>
 8008822:	bf00      	nop
 8008824:	20000438 	.word	0x20000438

08008828 <__retarget_lock_acquire_recursive>:
 8008828:	4770      	bx	lr

0800882a <__retarget_lock_release_recursive>:
 800882a:	4770      	bx	lr

0800882c <pow>:
 800882c:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 8008830:	ec59 8b10 	vmov	r8, r9, d0
 8008834:	ec57 6b11 	vmov	r6, r7, d1
 8008838:	f000 f8a6 	bl	8008988 <__ieee754_pow>
 800883c:	4b4e      	ldr	r3, [pc, #312]	; (8008978 <pow+0x14c>)
 800883e:	f993 3000 	ldrsb.w	r3, [r3]
 8008842:	3301      	adds	r3, #1
 8008844:	ec55 4b10 	vmov	r4, r5, d0
 8008848:	d015      	beq.n	8008876 <pow+0x4a>
 800884a:	4632      	mov	r2, r6
 800884c:	463b      	mov	r3, r7
 800884e:	4630      	mov	r0, r6
 8008850:	4639      	mov	r1, r7
 8008852:	f7f8 f917 	bl	8000a84 <__aeabi_dcmpun>
 8008856:	b970      	cbnz	r0, 8008876 <pow+0x4a>
 8008858:	4642      	mov	r2, r8
 800885a:	464b      	mov	r3, r9
 800885c:	4640      	mov	r0, r8
 800885e:	4649      	mov	r1, r9
 8008860:	f7f8 f910 	bl	8000a84 <__aeabi_dcmpun>
 8008864:	2200      	movs	r2, #0
 8008866:	2300      	movs	r3, #0
 8008868:	b148      	cbz	r0, 800887e <pow+0x52>
 800886a:	4630      	mov	r0, r6
 800886c:	4639      	mov	r1, r7
 800886e:	f7f8 f8d7 	bl	8000a20 <__aeabi_dcmpeq>
 8008872:	2800      	cmp	r0, #0
 8008874:	d17d      	bne.n	8008972 <pow+0x146>
 8008876:	ec45 4b10 	vmov	d0, r4, r5
 800887a:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 800887e:	4640      	mov	r0, r8
 8008880:	4649      	mov	r1, r9
 8008882:	f7f8 f8cd 	bl	8000a20 <__aeabi_dcmpeq>
 8008886:	b1e0      	cbz	r0, 80088c2 <pow+0x96>
 8008888:	2200      	movs	r2, #0
 800888a:	2300      	movs	r3, #0
 800888c:	4630      	mov	r0, r6
 800888e:	4639      	mov	r1, r7
 8008890:	f7f8 f8c6 	bl	8000a20 <__aeabi_dcmpeq>
 8008894:	2800      	cmp	r0, #0
 8008896:	d16c      	bne.n	8008972 <pow+0x146>
 8008898:	ec47 6b10 	vmov	d0, r6, r7
 800889c:	f000 fe53 	bl	8009546 <finite>
 80088a0:	2800      	cmp	r0, #0
 80088a2:	d0e8      	beq.n	8008876 <pow+0x4a>
 80088a4:	2200      	movs	r2, #0
 80088a6:	2300      	movs	r3, #0
 80088a8:	4630      	mov	r0, r6
 80088aa:	4639      	mov	r1, r7
 80088ac:	f7f8 f8c2 	bl	8000a34 <__aeabi_dcmplt>
 80088b0:	2800      	cmp	r0, #0
 80088b2:	d0e0      	beq.n	8008876 <pow+0x4a>
 80088b4:	f7ff ff00 	bl	80086b8 <__errno>
 80088b8:	2321      	movs	r3, #33	; 0x21
 80088ba:	6003      	str	r3, [r0, #0]
 80088bc:	2400      	movs	r4, #0
 80088be:	4d2f      	ldr	r5, [pc, #188]	; (800897c <pow+0x150>)
 80088c0:	e7d9      	b.n	8008876 <pow+0x4a>
 80088c2:	ec45 4b10 	vmov	d0, r4, r5
 80088c6:	f000 fe3e 	bl	8009546 <finite>
 80088ca:	bbb8      	cbnz	r0, 800893c <pow+0x110>
 80088cc:	ec49 8b10 	vmov	d0, r8, r9
 80088d0:	f000 fe39 	bl	8009546 <finite>
 80088d4:	b390      	cbz	r0, 800893c <pow+0x110>
 80088d6:	ec47 6b10 	vmov	d0, r6, r7
 80088da:	f000 fe34 	bl	8009546 <finite>
 80088de:	b368      	cbz	r0, 800893c <pow+0x110>
 80088e0:	4622      	mov	r2, r4
 80088e2:	462b      	mov	r3, r5
 80088e4:	4620      	mov	r0, r4
 80088e6:	4629      	mov	r1, r5
 80088e8:	f7f8 f8cc 	bl	8000a84 <__aeabi_dcmpun>
 80088ec:	b160      	cbz	r0, 8008908 <pow+0xdc>
 80088ee:	f7ff fee3 	bl	80086b8 <__errno>
 80088f2:	2321      	movs	r3, #33	; 0x21
 80088f4:	6003      	str	r3, [r0, #0]
 80088f6:	2200      	movs	r2, #0
 80088f8:	2300      	movs	r3, #0
 80088fa:	4610      	mov	r0, r2
 80088fc:	4619      	mov	r1, r3
 80088fe:	f7f7 ff51 	bl	80007a4 <__aeabi_ddiv>
 8008902:	4604      	mov	r4, r0
 8008904:	460d      	mov	r5, r1
 8008906:	e7b6      	b.n	8008876 <pow+0x4a>
 8008908:	f7ff fed6 	bl	80086b8 <__errno>
 800890c:	2322      	movs	r3, #34	; 0x22
 800890e:	6003      	str	r3, [r0, #0]
 8008910:	2200      	movs	r2, #0
 8008912:	2300      	movs	r3, #0
 8008914:	4640      	mov	r0, r8
 8008916:	4649      	mov	r1, r9
 8008918:	f7f8 f88c 	bl	8000a34 <__aeabi_dcmplt>
 800891c:	2400      	movs	r4, #0
 800891e:	b158      	cbz	r0, 8008938 <pow+0x10c>
 8008920:	ec47 6b10 	vmov	d0, r6, r7
 8008924:	f000 fe24 	bl	8009570 <rint>
 8008928:	4632      	mov	r2, r6
 800892a:	ec51 0b10 	vmov	r0, r1, d0
 800892e:	463b      	mov	r3, r7
 8008930:	f7f8 f876 	bl	8000a20 <__aeabi_dcmpeq>
 8008934:	2800      	cmp	r0, #0
 8008936:	d0c2      	beq.n	80088be <pow+0x92>
 8008938:	4d11      	ldr	r5, [pc, #68]	; (8008980 <pow+0x154>)
 800893a:	e79c      	b.n	8008876 <pow+0x4a>
 800893c:	2200      	movs	r2, #0
 800893e:	2300      	movs	r3, #0
 8008940:	4620      	mov	r0, r4
 8008942:	4629      	mov	r1, r5
 8008944:	f7f8 f86c 	bl	8000a20 <__aeabi_dcmpeq>
 8008948:	2800      	cmp	r0, #0
 800894a:	d094      	beq.n	8008876 <pow+0x4a>
 800894c:	ec49 8b10 	vmov	d0, r8, r9
 8008950:	f000 fdf9 	bl	8009546 <finite>
 8008954:	2800      	cmp	r0, #0
 8008956:	d08e      	beq.n	8008876 <pow+0x4a>
 8008958:	ec47 6b10 	vmov	d0, r6, r7
 800895c:	f000 fdf3 	bl	8009546 <finite>
 8008960:	2800      	cmp	r0, #0
 8008962:	d088      	beq.n	8008876 <pow+0x4a>
 8008964:	f7ff fea8 	bl	80086b8 <__errno>
 8008968:	2322      	movs	r3, #34	; 0x22
 800896a:	6003      	str	r3, [r0, #0]
 800896c:	2400      	movs	r4, #0
 800896e:	2500      	movs	r5, #0
 8008970:	e781      	b.n	8008876 <pow+0x4a>
 8008972:	4d04      	ldr	r5, [pc, #16]	; (8008984 <pow+0x158>)
 8008974:	2400      	movs	r4, #0
 8008976:	e77e      	b.n	8008876 <pow+0x4a>
 8008978:	200000a4 	.word	0x200000a4
 800897c:	fff00000 	.word	0xfff00000
 8008980:	7ff00000 	.word	0x7ff00000
 8008984:	3ff00000 	.word	0x3ff00000

08008988 <__ieee754_pow>:
 8008988:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 800898c:	ed2d 8b06 	vpush	{d8-d10}
 8008990:	b08d      	sub	sp, #52	; 0x34
 8008992:	ed8d 1b02 	vstr	d1, [sp, #8]
 8008996:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 800899a:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 800899e:	ea56 0100 	orrs.w	r1, r6, r0
 80089a2:	ec53 2b10 	vmov	r2, r3, d0
 80089a6:	f000 84d1 	beq.w	800934c <__ieee754_pow+0x9c4>
 80089aa:	497f      	ldr	r1, [pc, #508]	; (8008ba8 <__ieee754_pow+0x220>)
 80089ac:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 80089b0:	428c      	cmp	r4, r1
 80089b2:	ee10 8a10 	vmov	r8, s0
 80089b6:	4699      	mov	r9, r3
 80089b8:	dc09      	bgt.n	80089ce <__ieee754_pow+0x46>
 80089ba:	d103      	bne.n	80089c4 <__ieee754_pow+0x3c>
 80089bc:	b97a      	cbnz	r2, 80089de <__ieee754_pow+0x56>
 80089be:	42a6      	cmp	r6, r4
 80089c0:	dd02      	ble.n	80089c8 <__ieee754_pow+0x40>
 80089c2:	e00c      	b.n	80089de <__ieee754_pow+0x56>
 80089c4:	428e      	cmp	r6, r1
 80089c6:	dc02      	bgt.n	80089ce <__ieee754_pow+0x46>
 80089c8:	428e      	cmp	r6, r1
 80089ca:	d110      	bne.n	80089ee <__ieee754_pow+0x66>
 80089cc:	b178      	cbz	r0, 80089ee <__ieee754_pow+0x66>
 80089ce:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80089d2:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80089d6:	ea54 0308 	orrs.w	r3, r4, r8
 80089da:	f000 84b7 	beq.w	800934c <__ieee754_pow+0x9c4>
 80089de:	4873      	ldr	r0, [pc, #460]	; (8008bac <__ieee754_pow+0x224>)
 80089e0:	b00d      	add	sp, #52	; 0x34
 80089e2:	ecbd 8b06 	vpop	{d8-d10}
 80089e6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 80089ea:	f000 bdb9 	b.w	8009560 <nan>
 80089ee:	f1b9 0f00 	cmp.w	r9, #0
 80089f2:	da36      	bge.n	8008a62 <__ieee754_pow+0xda>
 80089f4:	496e      	ldr	r1, [pc, #440]	; (8008bb0 <__ieee754_pow+0x228>)
 80089f6:	428e      	cmp	r6, r1
 80089f8:	dc51      	bgt.n	8008a9e <__ieee754_pow+0x116>
 80089fa:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 80089fe:	428e      	cmp	r6, r1
 8008a00:	f340 84af 	ble.w	8009362 <__ieee754_pow+0x9da>
 8008a04:	1531      	asrs	r1, r6, #20
 8008a06:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 8008a0a:	2914      	cmp	r1, #20
 8008a0c:	dd0f      	ble.n	8008a2e <__ieee754_pow+0xa6>
 8008a0e:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 8008a12:	fa20 fc01 	lsr.w	ip, r0, r1
 8008a16:	fa0c f101 	lsl.w	r1, ip, r1
 8008a1a:	4281      	cmp	r1, r0
 8008a1c:	f040 84a1 	bne.w	8009362 <__ieee754_pow+0x9da>
 8008a20:	f00c 0c01 	and.w	ip, ip, #1
 8008a24:	f1cc 0102 	rsb	r1, ip, #2
 8008a28:	9100      	str	r1, [sp, #0]
 8008a2a:	b180      	cbz	r0, 8008a4e <__ieee754_pow+0xc6>
 8008a2c:	e059      	b.n	8008ae2 <__ieee754_pow+0x15a>
 8008a2e:	2800      	cmp	r0, #0
 8008a30:	d155      	bne.n	8008ade <__ieee754_pow+0x156>
 8008a32:	f1c1 0114 	rsb	r1, r1, #20
 8008a36:	fa46 fc01 	asr.w	ip, r6, r1
 8008a3a:	fa0c f101 	lsl.w	r1, ip, r1
 8008a3e:	42b1      	cmp	r1, r6
 8008a40:	f040 848c 	bne.w	800935c <__ieee754_pow+0x9d4>
 8008a44:	f00c 0c01 	and.w	ip, ip, #1
 8008a48:	f1cc 0102 	rsb	r1, ip, #2
 8008a4c:	9100      	str	r1, [sp, #0]
 8008a4e:	4959      	ldr	r1, [pc, #356]	; (8008bb4 <__ieee754_pow+0x22c>)
 8008a50:	428e      	cmp	r6, r1
 8008a52:	d12d      	bne.n	8008ab0 <__ieee754_pow+0x128>
 8008a54:	2f00      	cmp	r7, #0
 8008a56:	da79      	bge.n	8008b4c <__ieee754_pow+0x1c4>
 8008a58:	4956      	ldr	r1, [pc, #344]	; (8008bb4 <__ieee754_pow+0x22c>)
 8008a5a:	2000      	movs	r0, #0
 8008a5c:	f7f7 fea2 	bl	80007a4 <__aeabi_ddiv>
 8008a60:	e016      	b.n	8008a90 <__ieee754_pow+0x108>
 8008a62:	2100      	movs	r1, #0
 8008a64:	9100      	str	r1, [sp, #0]
 8008a66:	2800      	cmp	r0, #0
 8008a68:	d13b      	bne.n	8008ae2 <__ieee754_pow+0x15a>
 8008a6a:	494f      	ldr	r1, [pc, #316]	; (8008ba8 <__ieee754_pow+0x220>)
 8008a6c:	428e      	cmp	r6, r1
 8008a6e:	d1ee      	bne.n	8008a4e <__ieee754_pow+0xc6>
 8008a70:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 8008a74:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8008a78:	ea53 0308 	orrs.w	r3, r3, r8
 8008a7c:	f000 8466 	beq.w	800934c <__ieee754_pow+0x9c4>
 8008a80:	4b4d      	ldr	r3, [pc, #308]	; (8008bb8 <__ieee754_pow+0x230>)
 8008a82:	429c      	cmp	r4, r3
 8008a84:	dd0d      	ble.n	8008aa2 <__ieee754_pow+0x11a>
 8008a86:	2f00      	cmp	r7, #0
 8008a88:	f280 8464 	bge.w	8009354 <__ieee754_pow+0x9cc>
 8008a8c:	2000      	movs	r0, #0
 8008a8e:	2100      	movs	r1, #0
 8008a90:	ec41 0b10 	vmov	d0, r0, r1
 8008a94:	b00d      	add	sp, #52	; 0x34
 8008a96:	ecbd 8b06 	vpop	{d8-d10}
 8008a9a:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8008a9e:	2102      	movs	r1, #2
 8008aa0:	e7e0      	b.n	8008a64 <__ieee754_pow+0xdc>
 8008aa2:	2f00      	cmp	r7, #0
 8008aa4:	daf2      	bge.n	8008a8c <__ieee754_pow+0x104>
 8008aa6:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8008aaa:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8008aae:	e7ef      	b.n	8008a90 <__ieee754_pow+0x108>
 8008ab0:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 8008ab4:	d104      	bne.n	8008ac0 <__ieee754_pow+0x138>
 8008ab6:	4610      	mov	r0, r2
 8008ab8:	4619      	mov	r1, r3
 8008aba:	f7f7 fd49 	bl	8000550 <__aeabi_dmul>
 8008abe:	e7e7      	b.n	8008a90 <__ieee754_pow+0x108>
 8008ac0:	493e      	ldr	r1, [pc, #248]	; (8008bbc <__ieee754_pow+0x234>)
 8008ac2:	428f      	cmp	r7, r1
 8008ac4:	d10d      	bne.n	8008ae2 <__ieee754_pow+0x15a>
 8008ac6:	f1b9 0f00 	cmp.w	r9, #0
 8008aca:	db0a      	blt.n	8008ae2 <__ieee754_pow+0x15a>
 8008acc:	ec43 2b10 	vmov	d0, r2, r3
 8008ad0:	b00d      	add	sp, #52	; 0x34
 8008ad2:	ecbd 8b06 	vpop	{d8-d10}
 8008ad6:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8008ada:	f000 bc77 	b.w	80093cc <__ieee754_sqrt>
 8008ade:	2100      	movs	r1, #0
 8008ae0:	9100      	str	r1, [sp, #0]
 8008ae2:	ec43 2b10 	vmov	d0, r2, r3
 8008ae6:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008aea:	f000 fd23 	bl	8009534 <fabs>
 8008aee:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 8008af2:	ec51 0b10 	vmov	r0, r1, d0
 8008af6:	f1b8 0f00 	cmp.w	r8, #0
 8008afa:	d12a      	bne.n	8008b52 <__ieee754_pow+0x1ca>
 8008afc:	b12c      	cbz	r4, 8008b0a <__ieee754_pow+0x182>
 8008afe:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 8008bb4 <__ieee754_pow+0x22c>
 8008b02:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 8008b06:	45e6      	cmp	lr, ip
 8008b08:	d123      	bne.n	8008b52 <__ieee754_pow+0x1ca>
 8008b0a:	2f00      	cmp	r7, #0
 8008b0c:	da05      	bge.n	8008b1a <__ieee754_pow+0x192>
 8008b0e:	4602      	mov	r2, r0
 8008b10:	460b      	mov	r3, r1
 8008b12:	2000      	movs	r0, #0
 8008b14:	4927      	ldr	r1, [pc, #156]	; (8008bb4 <__ieee754_pow+0x22c>)
 8008b16:	f7f7 fe45 	bl	80007a4 <__aeabi_ddiv>
 8008b1a:	f1b9 0f00 	cmp.w	r9, #0
 8008b1e:	dab7      	bge.n	8008a90 <__ieee754_pow+0x108>
 8008b20:	9b00      	ldr	r3, [sp, #0]
 8008b22:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 8008b26:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 8008b2a:	4323      	orrs	r3, r4
 8008b2c:	d108      	bne.n	8008b40 <__ieee754_pow+0x1b8>
 8008b2e:	4602      	mov	r2, r0
 8008b30:	460b      	mov	r3, r1
 8008b32:	4610      	mov	r0, r2
 8008b34:	4619      	mov	r1, r3
 8008b36:	f7f7 fb53 	bl	80001e0 <__aeabi_dsub>
 8008b3a:	4602      	mov	r2, r0
 8008b3c:	460b      	mov	r3, r1
 8008b3e:	e78d      	b.n	8008a5c <__ieee754_pow+0xd4>
 8008b40:	9b00      	ldr	r3, [sp, #0]
 8008b42:	2b01      	cmp	r3, #1
 8008b44:	d1a4      	bne.n	8008a90 <__ieee754_pow+0x108>
 8008b46:	4602      	mov	r2, r0
 8008b48:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 8008b4c:	4610      	mov	r0, r2
 8008b4e:	4619      	mov	r1, r3
 8008b50:	e79e      	b.n	8008a90 <__ieee754_pow+0x108>
 8008b52:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 8008b56:	f10c 35ff 	add.w	r5, ip, #4294967295	; 0xffffffff
 8008b5a:	950a      	str	r5, [sp, #40]	; 0x28
 8008b5c:	9d00      	ldr	r5, [sp, #0]
 8008b5e:	46ac      	mov	ip, r5
 8008b60:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 8008b62:	ea5c 0505 	orrs.w	r5, ip, r5
 8008b66:	d0e4      	beq.n	8008b32 <__ieee754_pow+0x1aa>
 8008b68:	4b15      	ldr	r3, [pc, #84]	; (8008bc0 <__ieee754_pow+0x238>)
 8008b6a:	429e      	cmp	r6, r3
 8008b6c:	f340 80fc 	ble.w	8008d68 <__ieee754_pow+0x3e0>
 8008b70:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 8008b74:	429e      	cmp	r6, r3
 8008b76:	4b10      	ldr	r3, [pc, #64]	; (8008bb8 <__ieee754_pow+0x230>)
 8008b78:	dd07      	ble.n	8008b8a <__ieee754_pow+0x202>
 8008b7a:	429c      	cmp	r4, r3
 8008b7c:	dc0a      	bgt.n	8008b94 <__ieee754_pow+0x20c>
 8008b7e:	2f00      	cmp	r7, #0
 8008b80:	da84      	bge.n	8008a8c <__ieee754_pow+0x104>
 8008b82:	a307      	add	r3, pc, #28	; (adr r3, 8008ba0 <__ieee754_pow+0x218>)
 8008b84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008b88:	e795      	b.n	8008ab6 <__ieee754_pow+0x12e>
 8008b8a:	429c      	cmp	r4, r3
 8008b8c:	dbf7      	blt.n	8008b7e <__ieee754_pow+0x1f6>
 8008b8e:	4b09      	ldr	r3, [pc, #36]	; (8008bb4 <__ieee754_pow+0x22c>)
 8008b90:	429c      	cmp	r4, r3
 8008b92:	dd17      	ble.n	8008bc4 <__ieee754_pow+0x23c>
 8008b94:	2f00      	cmp	r7, #0
 8008b96:	dcf4      	bgt.n	8008b82 <__ieee754_pow+0x1fa>
 8008b98:	e778      	b.n	8008a8c <__ieee754_pow+0x104>
 8008b9a:	bf00      	nop
 8008b9c:	f3af 8000 	nop.w
 8008ba0:	8800759c 	.word	0x8800759c
 8008ba4:	7e37e43c 	.word	0x7e37e43c
 8008ba8:	7ff00000 	.word	0x7ff00000
 8008bac:	080097d0 	.word	0x080097d0
 8008bb0:	433fffff 	.word	0x433fffff
 8008bb4:	3ff00000 	.word	0x3ff00000
 8008bb8:	3fefffff 	.word	0x3fefffff
 8008bbc:	3fe00000 	.word	0x3fe00000
 8008bc0:	41e00000 	.word	0x41e00000
 8008bc4:	4b64      	ldr	r3, [pc, #400]	; (8008d58 <__ieee754_pow+0x3d0>)
 8008bc6:	2200      	movs	r2, #0
 8008bc8:	f7f7 fb0a 	bl	80001e0 <__aeabi_dsub>
 8008bcc:	a356      	add	r3, pc, #344	; (adr r3, 8008d28 <__ieee754_pow+0x3a0>)
 8008bce:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008bd2:	4604      	mov	r4, r0
 8008bd4:	460d      	mov	r5, r1
 8008bd6:	f7f7 fcbb 	bl	8000550 <__aeabi_dmul>
 8008bda:	a355      	add	r3, pc, #340	; (adr r3, 8008d30 <__ieee754_pow+0x3a8>)
 8008bdc:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008be0:	4606      	mov	r6, r0
 8008be2:	460f      	mov	r7, r1
 8008be4:	4620      	mov	r0, r4
 8008be6:	4629      	mov	r1, r5
 8008be8:	f7f7 fcb2 	bl	8000550 <__aeabi_dmul>
 8008bec:	4b5b      	ldr	r3, [pc, #364]	; (8008d5c <__ieee754_pow+0x3d4>)
 8008bee:	4682      	mov	sl, r0
 8008bf0:	468b      	mov	fp, r1
 8008bf2:	2200      	movs	r2, #0
 8008bf4:	4620      	mov	r0, r4
 8008bf6:	4629      	mov	r1, r5
 8008bf8:	f7f7 fcaa 	bl	8000550 <__aeabi_dmul>
 8008bfc:	4602      	mov	r2, r0
 8008bfe:	460b      	mov	r3, r1
 8008c00:	a14d      	add	r1, pc, #308	; (adr r1, 8008d38 <__ieee754_pow+0x3b0>)
 8008c02:	e9d1 0100 	ldrd	r0, r1, [r1]
 8008c06:	f7f7 faeb 	bl	80001e0 <__aeabi_dsub>
 8008c0a:	4622      	mov	r2, r4
 8008c0c:	462b      	mov	r3, r5
 8008c0e:	f7f7 fc9f 	bl	8000550 <__aeabi_dmul>
 8008c12:	4602      	mov	r2, r0
 8008c14:	460b      	mov	r3, r1
 8008c16:	2000      	movs	r0, #0
 8008c18:	4951      	ldr	r1, [pc, #324]	; (8008d60 <__ieee754_pow+0x3d8>)
 8008c1a:	f7f7 fae1 	bl	80001e0 <__aeabi_dsub>
 8008c1e:	4622      	mov	r2, r4
 8008c20:	4680      	mov	r8, r0
 8008c22:	4689      	mov	r9, r1
 8008c24:	462b      	mov	r3, r5
 8008c26:	4620      	mov	r0, r4
 8008c28:	4629      	mov	r1, r5
 8008c2a:	f7f7 fc91 	bl	8000550 <__aeabi_dmul>
 8008c2e:	4602      	mov	r2, r0
 8008c30:	460b      	mov	r3, r1
 8008c32:	4640      	mov	r0, r8
 8008c34:	4649      	mov	r1, r9
 8008c36:	f7f7 fc8b 	bl	8000550 <__aeabi_dmul>
 8008c3a:	a341      	add	r3, pc, #260	; (adr r3, 8008d40 <__ieee754_pow+0x3b8>)
 8008c3c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008c40:	f7f7 fc86 	bl	8000550 <__aeabi_dmul>
 8008c44:	4602      	mov	r2, r0
 8008c46:	460b      	mov	r3, r1
 8008c48:	4650      	mov	r0, sl
 8008c4a:	4659      	mov	r1, fp
 8008c4c:	f7f7 fac8 	bl	80001e0 <__aeabi_dsub>
 8008c50:	4602      	mov	r2, r0
 8008c52:	460b      	mov	r3, r1
 8008c54:	4680      	mov	r8, r0
 8008c56:	4689      	mov	r9, r1
 8008c58:	4630      	mov	r0, r6
 8008c5a:	4639      	mov	r1, r7
 8008c5c:	f7f7 fac2 	bl	80001e4 <__adddf3>
 8008c60:	2400      	movs	r4, #0
 8008c62:	4632      	mov	r2, r6
 8008c64:	463b      	mov	r3, r7
 8008c66:	4620      	mov	r0, r4
 8008c68:	460d      	mov	r5, r1
 8008c6a:	f7f7 fab9 	bl	80001e0 <__aeabi_dsub>
 8008c6e:	4602      	mov	r2, r0
 8008c70:	460b      	mov	r3, r1
 8008c72:	4640      	mov	r0, r8
 8008c74:	4649      	mov	r1, r9
 8008c76:	f7f7 fab3 	bl	80001e0 <__aeabi_dsub>
 8008c7a:	9b00      	ldr	r3, [sp, #0]
 8008c7c:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8008c7e:	3b01      	subs	r3, #1
 8008c80:	4313      	orrs	r3, r2
 8008c82:	4682      	mov	sl, r0
 8008c84:	468b      	mov	fp, r1
 8008c86:	f040 81f1 	bne.w	800906c <__ieee754_pow+0x6e4>
 8008c8a:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 8008d48 <__ieee754_pow+0x3c0>
 8008c8e:	eeb0 8a47 	vmov.f32	s16, s14
 8008c92:	eef0 8a67 	vmov.f32	s17, s15
 8008c96:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8008c9a:	2600      	movs	r6, #0
 8008c9c:	4632      	mov	r2, r6
 8008c9e:	463b      	mov	r3, r7
 8008ca0:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8008ca4:	f7f7 fa9c 	bl	80001e0 <__aeabi_dsub>
 8008ca8:	4622      	mov	r2, r4
 8008caa:	462b      	mov	r3, r5
 8008cac:	f7f7 fc50 	bl	8000550 <__aeabi_dmul>
 8008cb0:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8008cb4:	4680      	mov	r8, r0
 8008cb6:	4689      	mov	r9, r1
 8008cb8:	4650      	mov	r0, sl
 8008cba:	4659      	mov	r1, fp
 8008cbc:	f7f7 fc48 	bl	8000550 <__aeabi_dmul>
 8008cc0:	4602      	mov	r2, r0
 8008cc2:	460b      	mov	r3, r1
 8008cc4:	4640      	mov	r0, r8
 8008cc6:	4649      	mov	r1, r9
 8008cc8:	f7f7 fa8c 	bl	80001e4 <__adddf3>
 8008ccc:	4632      	mov	r2, r6
 8008cce:	463b      	mov	r3, r7
 8008cd0:	4680      	mov	r8, r0
 8008cd2:	4689      	mov	r9, r1
 8008cd4:	4620      	mov	r0, r4
 8008cd6:	4629      	mov	r1, r5
 8008cd8:	f7f7 fc3a 	bl	8000550 <__aeabi_dmul>
 8008cdc:	460b      	mov	r3, r1
 8008cde:	4604      	mov	r4, r0
 8008ce0:	460d      	mov	r5, r1
 8008ce2:	4602      	mov	r2, r0
 8008ce4:	4649      	mov	r1, r9
 8008ce6:	4640      	mov	r0, r8
 8008ce8:	f7f7 fa7c 	bl	80001e4 <__adddf3>
 8008cec:	4b1d      	ldr	r3, [pc, #116]	; (8008d64 <__ieee754_pow+0x3dc>)
 8008cee:	4299      	cmp	r1, r3
 8008cf0:	ec45 4b19 	vmov	d9, r4, r5
 8008cf4:	4606      	mov	r6, r0
 8008cf6:	460f      	mov	r7, r1
 8008cf8:	468b      	mov	fp, r1
 8008cfa:	f340 82fe 	ble.w	80092fa <__ieee754_pow+0x972>
 8008cfe:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 8008d02:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 8008d06:	4303      	orrs	r3, r0
 8008d08:	f000 81f0 	beq.w	80090ec <__ieee754_pow+0x764>
 8008d0c:	a310      	add	r3, pc, #64	; (adr r3, 8008d50 <__ieee754_pow+0x3c8>)
 8008d0e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d12:	ec51 0b18 	vmov	r0, r1, d8
 8008d16:	f7f7 fc1b 	bl	8000550 <__aeabi_dmul>
 8008d1a:	a30d      	add	r3, pc, #52	; (adr r3, 8008d50 <__ieee754_pow+0x3c8>)
 8008d1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008d20:	e6cb      	b.n	8008aba <__ieee754_pow+0x132>
 8008d22:	bf00      	nop
 8008d24:	f3af 8000 	nop.w
 8008d28:	60000000 	.word	0x60000000
 8008d2c:	3ff71547 	.word	0x3ff71547
 8008d30:	f85ddf44 	.word	0xf85ddf44
 8008d34:	3e54ae0b 	.word	0x3e54ae0b
 8008d38:	55555555 	.word	0x55555555
 8008d3c:	3fd55555 	.word	0x3fd55555
 8008d40:	652b82fe 	.word	0x652b82fe
 8008d44:	3ff71547 	.word	0x3ff71547
 8008d48:	00000000 	.word	0x00000000
 8008d4c:	bff00000 	.word	0xbff00000
 8008d50:	8800759c 	.word	0x8800759c
 8008d54:	7e37e43c 	.word	0x7e37e43c
 8008d58:	3ff00000 	.word	0x3ff00000
 8008d5c:	3fd00000 	.word	0x3fd00000
 8008d60:	3fe00000 	.word	0x3fe00000
 8008d64:	408fffff 	.word	0x408fffff
 8008d68:	4bd7      	ldr	r3, [pc, #860]	; (80090c8 <__ieee754_pow+0x740>)
 8008d6a:	ea03 0309 	and.w	r3, r3, r9
 8008d6e:	2200      	movs	r2, #0
 8008d70:	b92b      	cbnz	r3, 8008d7e <__ieee754_pow+0x3f6>
 8008d72:	4bd6      	ldr	r3, [pc, #856]	; (80090cc <__ieee754_pow+0x744>)
 8008d74:	f7f7 fbec 	bl	8000550 <__aeabi_dmul>
 8008d78:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8008d7c:	460c      	mov	r4, r1
 8008d7e:	1523      	asrs	r3, r4, #20
 8008d80:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 8008d84:	4413      	add	r3, r2
 8008d86:	9309      	str	r3, [sp, #36]	; 0x24
 8008d88:	4bd1      	ldr	r3, [pc, #836]	; (80090d0 <__ieee754_pow+0x748>)
 8008d8a:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8008d8e:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 8008d92:	429c      	cmp	r4, r3
 8008d94:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8008d98:	dd08      	ble.n	8008dac <__ieee754_pow+0x424>
 8008d9a:	4bce      	ldr	r3, [pc, #824]	; (80090d4 <__ieee754_pow+0x74c>)
 8008d9c:	429c      	cmp	r4, r3
 8008d9e:	f340 8163 	ble.w	8009068 <__ieee754_pow+0x6e0>
 8008da2:	9b09      	ldr	r3, [sp, #36]	; 0x24
 8008da4:	3301      	adds	r3, #1
 8008da6:	9309      	str	r3, [sp, #36]	; 0x24
 8008da8:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8008dac:	2400      	movs	r4, #0
 8008dae:	00e3      	lsls	r3, r4, #3
 8008db0:	930b      	str	r3, [sp, #44]	; 0x2c
 8008db2:	4bc9      	ldr	r3, [pc, #804]	; (80090d8 <__ieee754_pow+0x750>)
 8008db4:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8008db8:	ed93 7b00 	vldr	d7, [r3]
 8008dbc:	4629      	mov	r1, r5
 8008dbe:	ec53 2b17 	vmov	r2, r3, d7
 8008dc2:	eeb0 8a47 	vmov.f32	s16, s14
 8008dc6:	eef0 8a67 	vmov.f32	s17, s15
 8008dca:	4682      	mov	sl, r0
 8008dcc:	f7f7 fa08 	bl	80001e0 <__aeabi_dsub>
 8008dd0:	4652      	mov	r2, sl
 8008dd2:	4606      	mov	r6, r0
 8008dd4:	460f      	mov	r7, r1
 8008dd6:	462b      	mov	r3, r5
 8008dd8:	ec51 0b18 	vmov	r0, r1, d8
 8008ddc:	f7f7 fa02 	bl	80001e4 <__adddf3>
 8008de0:	4602      	mov	r2, r0
 8008de2:	460b      	mov	r3, r1
 8008de4:	2000      	movs	r0, #0
 8008de6:	49bd      	ldr	r1, [pc, #756]	; (80090dc <__ieee754_pow+0x754>)
 8008de8:	f7f7 fcdc 	bl	80007a4 <__aeabi_ddiv>
 8008dec:	ec41 0b19 	vmov	d9, r0, r1
 8008df0:	4602      	mov	r2, r0
 8008df2:	460b      	mov	r3, r1
 8008df4:	4630      	mov	r0, r6
 8008df6:	4639      	mov	r1, r7
 8008df8:	f7f7 fbaa 	bl	8000550 <__aeabi_dmul>
 8008dfc:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8008e00:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e04:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8008e08:	2300      	movs	r3, #0
 8008e0a:	9304      	str	r3, [sp, #16]
 8008e0c:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 8008e10:	46ab      	mov	fp, r5
 8008e12:	106d      	asrs	r5, r5, #1
 8008e14:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 8008e18:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 8008e1c:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 8008e20:	2200      	movs	r2, #0
 8008e22:	4640      	mov	r0, r8
 8008e24:	4649      	mov	r1, r9
 8008e26:	4614      	mov	r4, r2
 8008e28:	461d      	mov	r5, r3
 8008e2a:	f7f7 fb91 	bl	8000550 <__aeabi_dmul>
 8008e2e:	4602      	mov	r2, r0
 8008e30:	460b      	mov	r3, r1
 8008e32:	4630      	mov	r0, r6
 8008e34:	4639      	mov	r1, r7
 8008e36:	f7f7 f9d3 	bl	80001e0 <__aeabi_dsub>
 8008e3a:	ec53 2b18 	vmov	r2, r3, d8
 8008e3e:	4606      	mov	r6, r0
 8008e40:	460f      	mov	r7, r1
 8008e42:	4620      	mov	r0, r4
 8008e44:	4629      	mov	r1, r5
 8008e46:	f7f7 f9cb 	bl	80001e0 <__aeabi_dsub>
 8008e4a:	4602      	mov	r2, r0
 8008e4c:	460b      	mov	r3, r1
 8008e4e:	4650      	mov	r0, sl
 8008e50:	4659      	mov	r1, fp
 8008e52:	f7f7 f9c5 	bl	80001e0 <__aeabi_dsub>
 8008e56:	4642      	mov	r2, r8
 8008e58:	464b      	mov	r3, r9
 8008e5a:	f7f7 fb79 	bl	8000550 <__aeabi_dmul>
 8008e5e:	4602      	mov	r2, r0
 8008e60:	460b      	mov	r3, r1
 8008e62:	4630      	mov	r0, r6
 8008e64:	4639      	mov	r1, r7
 8008e66:	f7f7 f9bb 	bl	80001e0 <__aeabi_dsub>
 8008e6a:	ec53 2b19 	vmov	r2, r3, d9
 8008e6e:	f7f7 fb6f 	bl	8000550 <__aeabi_dmul>
 8008e72:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008e76:	ec41 0b18 	vmov	d8, r0, r1
 8008e7a:	4610      	mov	r0, r2
 8008e7c:	4619      	mov	r1, r3
 8008e7e:	f7f7 fb67 	bl	8000550 <__aeabi_dmul>
 8008e82:	a37d      	add	r3, pc, #500	; (adr r3, 8009078 <__ieee754_pow+0x6f0>)
 8008e84:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e88:	4604      	mov	r4, r0
 8008e8a:	460d      	mov	r5, r1
 8008e8c:	f7f7 fb60 	bl	8000550 <__aeabi_dmul>
 8008e90:	a37b      	add	r3, pc, #492	; (adr r3, 8009080 <__ieee754_pow+0x6f8>)
 8008e92:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008e96:	f7f7 f9a5 	bl	80001e4 <__adddf3>
 8008e9a:	4622      	mov	r2, r4
 8008e9c:	462b      	mov	r3, r5
 8008e9e:	f7f7 fb57 	bl	8000550 <__aeabi_dmul>
 8008ea2:	a379      	add	r3, pc, #484	; (adr r3, 8009088 <__ieee754_pow+0x700>)
 8008ea4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ea8:	f7f7 f99c 	bl	80001e4 <__adddf3>
 8008eac:	4622      	mov	r2, r4
 8008eae:	462b      	mov	r3, r5
 8008eb0:	f7f7 fb4e 	bl	8000550 <__aeabi_dmul>
 8008eb4:	a376      	add	r3, pc, #472	; (adr r3, 8009090 <__ieee754_pow+0x708>)
 8008eb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008eba:	f7f7 f993 	bl	80001e4 <__adddf3>
 8008ebe:	4622      	mov	r2, r4
 8008ec0:	462b      	mov	r3, r5
 8008ec2:	f7f7 fb45 	bl	8000550 <__aeabi_dmul>
 8008ec6:	a374      	add	r3, pc, #464	; (adr r3, 8009098 <__ieee754_pow+0x710>)
 8008ec8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ecc:	f7f7 f98a 	bl	80001e4 <__adddf3>
 8008ed0:	4622      	mov	r2, r4
 8008ed2:	462b      	mov	r3, r5
 8008ed4:	f7f7 fb3c 	bl	8000550 <__aeabi_dmul>
 8008ed8:	a371      	add	r3, pc, #452	; (adr r3, 80090a0 <__ieee754_pow+0x718>)
 8008eda:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008ede:	f7f7 f981 	bl	80001e4 <__adddf3>
 8008ee2:	4622      	mov	r2, r4
 8008ee4:	4606      	mov	r6, r0
 8008ee6:	460f      	mov	r7, r1
 8008ee8:	462b      	mov	r3, r5
 8008eea:	4620      	mov	r0, r4
 8008eec:	4629      	mov	r1, r5
 8008eee:	f7f7 fb2f 	bl	8000550 <__aeabi_dmul>
 8008ef2:	4602      	mov	r2, r0
 8008ef4:	460b      	mov	r3, r1
 8008ef6:	4630      	mov	r0, r6
 8008ef8:	4639      	mov	r1, r7
 8008efa:	f7f7 fb29 	bl	8000550 <__aeabi_dmul>
 8008efe:	4642      	mov	r2, r8
 8008f00:	4604      	mov	r4, r0
 8008f02:	460d      	mov	r5, r1
 8008f04:	464b      	mov	r3, r9
 8008f06:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 8008f0a:	f7f7 f96b 	bl	80001e4 <__adddf3>
 8008f0e:	ec53 2b18 	vmov	r2, r3, d8
 8008f12:	f7f7 fb1d 	bl	8000550 <__aeabi_dmul>
 8008f16:	4622      	mov	r2, r4
 8008f18:	462b      	mov	r3, r5
 8008f1a:	f7f7 f963 	bl	80001e4 <__adddf3>
 8008f1e:	4642      	mov	r2, r8
 8008f20:	4682      	mov	sl, r0
 8008f22:	468b      	mov	fp, r1
 8008f24:	464b      	mov	r3, r9
 8008f26:	4640      	mov	r0, r8
 8008f28:	4649      	mov	r1, r9
 8008f2a:	f7f7 fb11 	bl	8000550 <__aeabi_dmul>
 8008f2e:	4b6c      	ldr	r3, [pc, #432]	; (80090e0 <__ieee754_pow+0x758>)
 8008f30:	2200      	movs	r2, #0
 8008f32:	4606      	mov	r6, r0
 8008f34:	460f      	mov	r7, r1
 8008f36:	f7f7 f955 	bl	80001e4 <__adddf3>
 8008f3a:	4652      	mov	r2, sl
 8008f3c:	465b      	mov	r3, fp
 8008f3e:	f7f7 f951 	bl	80001e4 <__adddf3>
 8008f42:	9c04      	ldr	r4, [sp, #16]
 8008f44:	460d      	mov	r5, r1
 8008f46:	4622      	mov	r2, r4
 8008f48:	460b      	mov	r3, r1
 8008f4a:	4640      	mov	r0, r8
 8008f4c:	4649      	mov	r1, r9
 8008f4e:	f7f7 faff 	bl	8000550 <__aeabi_dmul>
 8008f52:	4b63      	ldr	r3, [pc, #396]	; (80090e0 <__ieee754_pow+0x758>)
 8008f54:	4680      	mov	r8, r0
 8008f56:	4689      	mov	r9, r1
 8008f58:	2200      	movs	r2, #0
 8008f5a:	4620      	mov	r0, r4
 8008f5c:	4629      	mov	r1, r5
 8008f5e:	f7f7 f93f 	bl	80001e0 <__aeabi_dsub>
 8008f62:	4632      	mov	r2, r6
 8008f64:	463b      	mov	r3, r7
 8008f66:	f7f7 f93b 	bl	80001e0 <__aeabi_dsub>
 8008f6a:	4602      	mov	r2, r0
 8008f6c:	460b      	mov	r3, r1
 8008f6e:	4650      	mov	r0, sl
 8008f70:	4659      	mov	r1, fp
 8008f72:	f7f7 f935 	bl	80001e0 <__aeabi_dsub>
 8008f76:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8008f7a:	f7f7 fae9 	bl	8000550 <__aeabi_dmul>
 8008f7e:	4622      	mov	r2, r4
 8008f80:	4606      	mov	r6, r0
 8008f82:	460f      	mov	r7, r1
 8008f84:	462b      	mov	r3, r5
 8008f86:	ec51 0b18 	vmov	r0, r1, d8
 8008f8a:	f7f7 fae1 	bl	8000550 <__aeabi_dmul>
 8008f8e:	4602      	mov	r2, r0
 8008f90:	460b      	mov	r3, r1
 8008f92:	4630      	mov	r0, r6
 8008f94:	4639      	mov	r1, r7
 8008f96:	f7f7 f925 	bl	80001e4 <__adddf3>
 8008f9a:	4606      	mov	r6, r0
 8008f9c:	460f      	mov	r7, r1
 8008f9e:	4602      	mov	r2, r0
 8008fa0:	460b      	mov	r3, r1
 8008fa2:	4640      	mov	r0, r8
 8008fa4:	4649      	mov	r1, r9
 8008fa6:	f7f7 f91d 	bl	80001e4 <__adddf3>
 8008faa:	9c04      	ldr	r4, [sp, #16]
 8008fac:	a33e      	add	r3, pc, #248	; (adr r3, 80090a8 <__ieee754_pow+0x720>)
 8008fae:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fb2:	4620      	mov	r0, r4
 8008fb4:	460d      	mov	r5, r1
 8008fb6:	f7f7 facb 	bl	8000550 <__aeabi_dmul>
 8008fba:	4642      	mov	r2, r8
 8008fbc:	ec41 0b18 	vmov	d8, r0, r1
 8008fc0:	464b      	mov	r3, r9
 8008fc2:	4620      	mov	r0, r4
 8008fc4:	4629      	mov	r1, r5
 8008fc6:	f7f7 f90b 	bl	80001e0 <__aeabi_dsub>
 8008fca:	4602      	mov	r2, r0
 8008fcc:	460b      	mov	r3, r1
 8008fce:	4630      	mov	r0, r6
 8008fd0:	4639      	mov	r1, r7
 8008fd2:	f7f7 f905 	bl	80001e0 <__aeabi_dsub>
 8008fd6:	a336      	add	r3, pc, #216	; (adr r3, 80090b0 <__ieee754_pow+0x728>)
 8008fd8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fdc:	f7f7 fab8 	bl	8000550 <__aeabi_dmul>
 8008fe0:	a335      	add	r3, pc, #212	; (adr r3, 80090b8 <__ieee754_pow+0x730>)
 8008fe2:	e9d3 2300 	ldrd	r2, r3, [r3]
 8008fe6:	4606      	mov	r6, r0
 8008fe8:	460f      	mov	r7, r1
 8008fea:	4620      	mov	r0, r4
 8008fec:	4629      	mov	r1, r5
 8008fee:	f7f7 faaf 	bl	8000550 <__aeabi_dmul>
 8008ff2:	4602      	mov	r2, r0
 8008ff4:	460b      	mov	r3, r1
 8008ff6:	4630      	mov	r0, r6
 8008ff8:	4639      	mov	r1, r7
 8008ffa:	f7f7 f8f3 	bl	80001e4 <__adddf3>
 8008ffe:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009000:	4b38      	ldr	r3, [pc, #224]	; (80090e4 <__ieee754_pow+0x75c>)
 8009002:	4413      	add	r3, r2
 8009004:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009008:	f7f7 f8ec 	bl	80001e4 <__adddf3>
 800900c:	4682      	mov	sl, r0
 800900e:	9809      	ldr	r0, [sp, #36]	; 0x24
 8009010:	468b      	mov	fp, r1
 8009012:	f7f7 fa33 	bl	800047c <__aeabi_i2d>
 8009016:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8009018:	4b33      	ldr	r3, [pc, #204]	; (80090e8 <__ieee754_pow+0x760>)
 800901a:	4413      	add	r3, r2
 800901c:	e9d3 8900 	ldrd	r8, r9, [r3]
 8009020:	4606      	mov	r6, r0
 8009022:	460f      	mov	r7, r1
 8009024:	4652      	mov	r2, sl
 8009026:	465b      	mov	r3, fp
 8009028:	ec51 0b18 	vmov	r0, r1, d8
 800902c:	f7f7 f8da 	bl	80001e4 <__adddf3>
 8009030:	4642      	mov	r2, r8
 8009032:	464b      	mov	r3, r9
 8009034:	f7f7 f8d6 	bl	80001e4 <__adddf3>
 8009038:	4632      	mov	r2, r6
 800903a:	463b      	mov	r3, r7
 800903c:	f7f7 f8d2 	bl	80001e4 <__adddf3>
 8009040:	9c04      	ldr	r4, [sp, #16]
 8009042:	4632      	mov	r2, r6
 8009044:	463b      	mov	r3, r7
 8009046:	4620      	mov	r0, r4
 8009048:	460d      	mov	r5, r1
 800904a:	f7f7 f8c9 	bl	80001e0 <__aeabi_dsub>
 800904e:	4642      	mov	r2, r8
 8009050:	464b      	mov	r3, r9
 8009052:	f7f7 f8c5 	bl	80001e0 <__aeabi_dsub>
 8009056:	ec53 2b18 	vmov	r2, r3, d8
 800905a:	f7f7 f8c1 	bl	80001e0 <__aeabi_dsub>
 800905e:	4602      	mov	r2, r0
 8009060:	460b      	mov	r3, r1
 8009062:	4650      	mov	r0, sl
 8009064:	4659      	mov	r1, fp
 8009066:	e606      	b.n	8008c76 <__ieee754_pow+0x2ee>
 8009068:	2401      	movs	r4, #1
 800906a:	e6a0      	b.n	8008dae <__ieee754_pow+0x426>
 800906c:	ed9f 7b14 	vldr	d7, [pc, #80]	; 80090c0 <__ieee754_pow+0x738>
 8009070:	e60d      	b.n	8008c8e <__ieee754_pow+0x306>
 8009072:	bf00      	nop
 8009074:	f3af 8000 	nop.w
 8009078:	4a454eef 	.word	0x4a454eef
 800907c:	3fca7e28 	.word	0x3fca7e28
 8009080:	93c9db65 	.word	0x93c9db65
 8009084:	3fcd864a 	.word	0x3fcd864a
 8009088:	a91d4101 	.word	0xa91d4101
 800908c:	3fd17460 	.word	0x3fd17460
 8009090:	518f264d 	.word	0x518f264d
 8009094:	3fd55555 	.word	0x3fd55555
 8009098:	db6fabff 	.word	0xdb6fabff
 800909c:	3fdb6db6 	.word	0x3fdb6db6
 80090a0:	33333303 	.word	0x33333303
 80090a4:	3fe33333 	.word	0x3fe33333
 80090a8:	e0000000 	.word	0xe0000000
 80090ac:	3feec709 	.word	0x3feec709
 80090b0:	dc3a03fd 	.word	0xdc3a03fd
 80090b4:	3feec709 	.word	0x3feec709
 80090b8:	145b01f5 	.word	0x145b01f5
 80090bc:	be3e2fe0 	.word	0xbe3e2fe0
 80090c0:	00000000 	.word	0x00000000
 80090c4:	3ff00000 	.word	0x3ff00000
 80090c8:	7ff00000 	.word	0x7ff00000
 80090cc:	43400000 	.word	0x43400000
 80090d0:	0003988e 	.word	0x0003988e
 80090d4:	000bb679 	.word	0x000bb679
 80090d8:	080097d8 	.word	0x080097d8
 80090dc:	3ff00000 	.word	0x3ff00000
 80090e0:	40080000 	.word	0x40080000
 80090e4:	080097f8 	.word	0x080097f8
 80090e8:	080097e8 	.word	0x080097e8
 80090ec:	a3b5      	add	r3, pc, #724	; (adr r3, 80093c4 <__ieee754_pow+0xa3c>)
 80090ee:	e9d3 2300 	ldrd	r2, r3, [r3]
 80090f2:	4640      	mov	r0, r8
 80090f4:	4649      	mov	r1, r9
 80090f6:	f7f7 f875 	bl	80001e4 <__adddf3>
 80090fa:	4622      	mov	r2, r4
 80090fc:	ec41 0b1a 	vmov	d10, r0, r1
 8009100:	462b      	mov	r3, r5
 8009102:	4630      	mov	r0, r6
 8009104:	4639      	mov	r1, r7
 8009106:	f7f7 f86b 	bl	80001e0 <__aeabi_dsub>
 800910a:	4602      	mov	r2, r0
 800910c:	460b      	mov	r3, r1
 800910e:	ec51 0b1a 	vmov	r0, r1, d10
 8009112:	f7f7 fcad 	bl	8000a70 <__aeabi_dcmpgt>
 8009116:	2800      	cmp	r0, #0
 8009118:	f47f adf8 	bne.w	8008d0c <__ieee754_pow+0x384>
 800911c:	4aa4      	ldr	r2, [pc, #656]	; (80093b0 <__ieee754_pow+0xa28>)
 800911e:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 8009122:	4293      	cmp	r3, r2
 8009124:	f340 810b 	ble.w	800933e <__ieee754_pow+0x9b6>
 8009128:	151b      	asrs	r3, r3, #20
 800912a:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 800912e:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 8009132:	fa4a f303 	asr.w	r3, sl, r3
 8009136:	445b      	add	r3, fp
 8009138:	f3c3 520a 	ubfx	r2, r3, #20, #11
 800913c:	4e9d      	ldr	r6, [pc, #628]	; (80093b4 <__ieee754_pow+0xa2c>)
 800913e:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 8009142:	4116      	asrs	r6, r2
 8009144:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 8009148:	2000      	movs	r0, #0
 800914a:	ea23 0106 	bic.w	r1, r3, r6
 800914e:	f1c2 0214 	rsb	r2, r2, #20
 8009152:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 8009156:	fa4a fa02 	asr.w	sl, sl, r2
 800915a:	f1bb 0f00 	cmp.w	fp, #0
 800915e:	4602      	mov	r2, r0
 8009160:	460b      	mov	r3, r1
 8009162:	4620      	mov	r0, r4
 8009164:	4629      	mov	r1, r5
 8009166:	bfb8      	it	lt
 8009168:	f1ca 0a00 	rsblt	sl, sl, #0
 800916c:	f7f7 f838 	bl	80001e0 <__aeabi_dsub>
 8009170:	ec41 0b19 	vmov	d9, r0, r1
 8009174:	4642      	mov	r2, r8
 8009176:	464b      	mov	r3, r9
 8009178:	ec51 0b19 	vmov	r0, r1, d9
 800917c:	f7f7 f832 	bl	80001e4 <__adddf3>
 8009180:	2400      	movs	r4, #0
 8009182:	a379      	add	r3, pc, #484	; (adr r3, 8009368 <__ieee754_pow+0x9e0>)
 8009184:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009188:	4620      	mov	r0, r4
 800918a:	460d      	mov	r5, r1
 800918c:	f7f7 f9e0 	bl	8000550 <__aeabi_dmul>
 8009190:	ec53 2b19 	vmov	r2, r3, d9
 8009194:	4606      	mov	r6, r0
 8009196:	460f      	mov	r7, r1
 8009198:	4620      	mov	r0, r4
 800919a:	4629      	mov	r1, r5
 800919c:	f7f7 f820 	bl	80001e0 <__aeabi_dsub>
 80091a0:	4602      	mov	r2, r0
 80091a2:	460b      	mov	r3, r1
 80091a4:	4640      	mov	r0, r8
 80091a6:	4649      	mov	r1, r9
 80091a8:	f7f7 f81a 	bl	80001e0 <__aeabi_dsub>
 80091ac:	a370      	add	r3, pc, #448	; (adr r3, 8009370 <__ieee754_pow+0x9e8>)
 80091ae:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091b2:	f7f7 f9cd 	bl	8000550 <__aeabi_dmul>
 80091b6:	a370      	add	r3, pc, #448	; (adr r3, 8009378 <__ieee754_pow+0x9f0>)
 80091b8:	e9d3 2300 	ldrd	r2, r3, [r3]
 80091bc:	4680      	mov	r8, r0
 80091be:	4689      	mov	r9, r1
 80091c0:	4620      	mov	r0, r4
 80091c2:	4629      	mov	r1, r5
 80091c4:	f7f7 f9c4 	bl	8000550 <__aeabi_dmul>
 80091c8:	4602      	mov	r2, r0
 80091ca:	460b      	mov	r3, r1
 80091cc:	4640      	mov	r0, r8
 80091ce:	4649      	mov	r1, r9
 80091d0:	f7f7 f808 	bl	80001e4 <__adddf3>
 80091d4:	4604      	mov	r4, r0
 80091d6:	460d      	mov	r5, r1
 80091d8:	4602      	mov	r2, r0
 80091da:	460b      	mov	r3, r1
 80091dc:	4630      	mov	r0, r6
 80091de:	4639      	mov	r1, r7
 80091e0:	f7f7 f800 	bl	80001e4 <__adddf3>
 80091e4:	4632      	mov	r2, r6
 80091e6:	463b      	mov	r3, r7
 80091e8:	4680      	mov	r8, r0
 80091ea:	4689      	mov	r9, r1
 80091ec:	f7f6 fff8 	bl	80001e0 <__aeabi_dsub>
 80091f0:	4602      	mov	r2, r0
 80091f2:	460b      	mov	r3, r1
 80091f4:	4620      	mov	r0, r4
 80091f6:	4629      	mov	r1, r5
 80091f8:	f7f6 fff2 	bl	80001e0 <__aeabi_dsub>
 80091fc:	4642      	mov	r2, r8
 80091fe:	4606      	mov	r6, r0
 8009200:	460f      	mov	r7, r1
 8009202:	464b      	mov	r3, r9
 8009204:	4640      	mov	r0, r8
 8009206:	4649      	mov	r1, r9
 8009208:	f7f7 f9a2 	bl	8000550 <__aeabi_dmul>
 800920c:	a35c      	add	r3, pc, #368	; (adr r3, 8009380 <__ieee754_pow+0x9f8>)
 800920e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009212:	4604      	mov	r4, r0
 8009214:	460d      	mov	r5, r1
 8009216:	f7f7 f99b 	bl	8000550 <__aeabi_dmul>
 800921a:	a35b      	add	r3, pc, #364	; (adr r3, 8009388 <__ieee754_pow+0xa00>)
 800921c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009220:	f7f6 ffde 	bl	80001e0 <__aeabi_dsub>
 8009224:	4622      	mov	r2, r4
 8009226:	462b      	mov	r3, r5
 8009228:	f7f7 f992 	bl	8000550 <__aeabi_dmul>
 800922c:	a358      	add	r3, pc, #352	; (adr r3, 8009390 <__ieee754_pow+0xa08>)
 800922e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009232:	f7f6 ffd7 	bl	80001e4 <__adddf3>
 8009236:	4622      	mov	r2, r4
 8009238:	462b      	mov	r3, r5
 800923a:	f7f7 f989 	bl	8000550 <__aeabi_dmul>
 800923e:	a356      	add	r3, pc, #344	; (adr r3, 8009398 <__ieee754_pow+0xa10>)
 8009240:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009244:	f7f6 ffcc 	bl	80001e0 <__aeabi_dsub>
 8009248:	4622      	mov	r2, r4
 800924a:	462b      	mov	r3, r5
 800924c:	f7f7 f980 	bl	8000550 <__aeabi_dmul>
 8009250:	a353      	add	r3, pc, #332	; (adr r3, 80093a0 <__ieee754_pow+0xa18>)
 8009252:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009256:	f7f6 ffc5 	bl	80001e4 <__adddf3>
 800925a:	4622      	mov	r2, r4
 800925c:	462b      	mov	r3, r5
 800925e:	f7f7 f977 	bl	8000550 <__aeabi_dmul>
 8009262:	4602      	mov	r2, r0
 8009264:	460b      	mov	r3, r1
 8009266:	4640      	mov	r0, r8
 8009268:	4649      	mov	r1, r9
 800926a:	f7f6 ffb9 	bl	80001e0 <__aeabi_dsub>
 800926e:	4604      	mov	r4, r0
 8009270:	460d      	mov	r5, r1
 8009272:	4602      	mov	r2, r0
 8009274:	460b      	mov	r3, r1
 8009276:	4640      	mov	r0, r8
 8009278:	4649      	mov	r1, r9
 800927a:	f7f7 f969 	bl	8000550 <__aeabi_dmul>
 800927e:	2200      	movs	r2, #0
 8009280:	ec41 0b19 	vmov	d9, r0, r1
 8009284:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8009288:	4620      	mov	r0, r4
 800928a:	4629      	mov	r1, r5
 800928c:	f7f6 ffa8 	bl	80001e0 <__aeabi_dsub>
 8009290:	4602      	mov	r2, r0
 8009292:	460b      	mov	r3, r1
 8009294:	ec51 0b19 	vmov	r0, r1, d9
 8009298:	f7f7 fa84 	bl	80007a4 <__aeabi_ddiv>
 800929c:	4632      	mov	r2, r6
 800929e:	4604      	mov	r4, r0
 80092a0:	460d      	mov	r5, r1
 80092a2:	463b      	mov	r3, r7
 80092a4:	4640      	mov	r0, r8
 80092a6:	4649      	mov	r1, r9
 80092a8:	f7f7 f952 	bl	8000550 <__aeabi_dmul>
 80092ac:	4632      	mov	r2, r6
 80092ae:	463b      	mov	r3, r7
 80092b0:	f7f6 ff98 	bl	80001e4 <__adddf3>
 80092b4:	4602      	mov	r2, r0
 80092b6:	460b      	mov	r3, r1
 80092b8:	4620      	mov	r0, r4
 80092ba:	4629      	mov	r1, r5
 80092bc:	f7f6 ff90 	bl	80001e0 <__aeabi_dsub>
 80092c0:	4642      	mov	r2, r8
 80092c2:	464b      	mov	r3, r9
 80092c4:	f7f6 ff8c 	bl	80001e0 <__aeabi_dsub>
 80092c8:	460b      	mov	r3, r1
 80092ca:	4602      	mov	r2, r0
 80092cc:	493a      	ldr	r1, [pc, #232]	; (80093b8 <__ieee754_pow+0xa30>)
 80092ce:	2000      	movs	r0, #0
 80092d0:	f7f6 ff86 	bl	80001e0 <__aeabi_dsub>
 80092d4:	e9cd 0100 	strd	r0, r1, [sp]
 80092d8:	9b01      	ldr	r3, [sp, #4]
 80092da:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 80092de:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 80092e2:	da2f      	bge.n	8009344 <__ieee754_pow+0x9bc>
 80092e4:	4650      	mov	r0, sl
 80092e6:	ed9d 0b00 	vldr	d0, [sp]
 80092ea:	f000 f9cd 	bl	8009688 <scalbn>
 80092ee:	ec51 0b10 	vmov	r0, r1, d0
 80092f2:	ec53 2b18 	vmov	r2, r3, d8
 80092f6:	f7ff bbe0 	b.w	8008aba <__ieee754_pow+0x132>
 80092fa:	4b30      	ldr	r3, [pc, #192]	; (80093bc <__ieee754_pow+0xa34>)
 80092fc:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8009300:	429e      	cmp	r6, r3
 8009302:	f77f af0b 	ble.w	800911c <__ieee754_pow+0x794>
 8009306:	4b2e      	ldr	r3, [pc, #184]	; (80093c0 <__ieee754_pow+0xa38>)
 8009308:	440b      	add	r3, r1
 800930a:	4303      	orrs	r3, r0
 800930c:	d00b      	beq.n	8009326 <__ieee754_pow+0x99e>
 800930e:	a326      	add	r3, pc, #152	; (adr r3, 80093a8 <__ieee754_pow+0xa20>)
 8009310:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009314:	ec51 0b18 	vmov	r0, r1, d8
 8009318:	f7f7 f91a 	bl	8000550 <__aeabi_dmul>
 800931c:	a322      	add	r3, pc, #136	; (adr r3, 80093a8 <__ieee754_pow+0xa20>)
 800931e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009322:	f7ff bbca 	b.w	8008aba <__ieee754_pow+0x132>
 8009326:	4622      	mov	r2, r4
 8009328:	462b      	mov	r3, r5
 800932a:	f7f6 ff59 	bl	80001e0 <__aeabi_dsub>
 800932e:	4642      	mov	r2, r8
 8009330:	464b      	mov	r3, r9
 8009332:	f7f7 fb93 	bl	8000a5c <__aeabi_dcmpge>
 8009336:	2800      	cmp	r0, #0
 8009338:	f43f aef0 	beq.w	800911c <__ieee754_pow+0x794>
 800933c:	e7e7      	b.n	800930e <__ieee754_pow+0x986>
 800933e:	f04f 0a00 	mov.w	sl, #0
 8009342:	e717      	b.n	8009174 <__ieee754_pow+0x7ec>
 8009344:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009348:	4619      	mov	r1, r3
 800934a:	e7d2      	b.n	80092f2 <__ieee754_pow+0x96a>
 800934c:	491a      	ldr	r1, [pc, #104]	; (80093b8 <__ieee754_pow+0xa30>)
 800934e:	2000      	movs	r0, #0
 8009350:	f7ff bb9e 	b.w	8008a90 <__ieee754_pow+0x108>
 8009354:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8009358:	f7ff bb9a 	b.w	8008a90 <__ieee754_pow+0x108>
 800935c:	9000      	str	r0, [sp, #0]
 800935e:	f7ff bb76 	b.w	8008a4e <__ieee754_pow+0xc6>
 8009362:	2100      	movs	r1, #0
 8009364:	f7ff bb60 	b.w	8008a28 <__ieee754_pow+0xa0>
 8009368:	00000000 	.word	0x00000000
 800936c:	3fe62e43 	.word	0x3fe62e43
 8009370:	fefa39ef 	.word	0xfefa39ef
 8009374:	3fe62e42 	.word	0x3fe62e42
 8009378:	0ca86c39 	.word	0x0ca86c39
 800937c:	be205c61 	.word	0xbe205c61
 8009380:	72bea4d0 	.word	0x72bea4d0
 8009384:	3e663769 	.word	0x3e663769
 8009388:	c5d26bf1 	.word	0xc5d26bf1
 800938c:	3ebbbd41 	.word	0x3ebbbd41
 8009390:	af25de2c 	.word	0xaf25de2c
 8009394:	3f11566a 	.word	0x3f11566a
 8009398:	16bebd93 	.word	0x16bebd93
 800939c:	3f66c16c 	.word	0x3f66c16c
 80093a0:	5555553e 	.word	0x5555553e
 80093a4:	3fc55555 	.word	0x3fc55555
 80093a8:	c2f8f359 	.word	0xc2f8f359
 80093ac:	01a56e1f 	.word	0x01a56e1f
 80093b0:	3fe00000 	.word	0x3fe00000
 80093b4:	000fffff 	.word	0x000fffff
 80093b8:	3ff00000 	.word	0x3ff00000
 80093bc:	4090cbff 	.word	0x4090cbff
 80093c0:	3f6f3400 	.word	0x3f6f3400
 80093c4:	652b82fe 	.word	0x652b82fe
 80093c8:	3c971547 	.word	0x3c971547

080093cc <__ieee754_sqrt>:
 80093cc:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 80093d0:	ec55 4b10 	vmov	r4, r5, d0
 80093d4:	4e56      	ldr	r6, [pc, #344]	; (8009530 <__ieee754_sqrt+0x164>)
 80093d6:	43ae      	bics	r6, r5
 80093d8:	ee10 0a10 	vmov	r0, s0
 80093dc:	ee10 3a10 	vmov	r3, s0
 80093e0:	4629      	mov	r1, r5
 80093e2:	462a      	mov	r2, r5
 80093e4:	d110      	bne.n	8009408 <__ieee754_sqrt+0x3c>
 80093e6:	ee10 2a10 	vmov	r2, s0
 80093ea:	462b      	mov	r3, r5
 80093ec:	f7f7 f8b0 	bl	8000550 <__aeabi_dmul>
 80093f0:	4602      	mov	r2, r0
 80093f2:	460b      	mov	r3, r1
 80093f4:	4620      	mov	r0, r4
 80093f6:	4629      	mov	r1, r5
 80093f8:	f7f6 fef4 	bl	80001e4 <__adddf3>
 80093fc:	4604      	mov	r4, r0
 80093fe:	460d      	mov	r5, r1
 8009400:	ec45 4b10 	vmov	d0, r4, r5
 8009404:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8009408:	2d00      	cmp	r5, #0
 800940a:	dc10      	bgt.n	800942e <__ieee754_sqrt+0x62>
 800940c:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8009410:	4330      	orrs	r0, r6
 8009412:	d0f5      	beq.n	8009400 <__ieee754_sqrt+0x34>
 8009414:	b15d      	cbz	r5, 800942e <__ieee754_sqrt+0x62>
 8009416:	ee10 2a10 	vmov	r2, s0
 800941a:	462b      	mov	r3, r5
 800941c:	ee10 0a10 	vmov	r0, s0
 8009420:	f7f6 fede 	bl	80001e0 <__aeabi_dsub>
 8009424:	4602      	mov	r2, r0
 8009426:	460b      	mov	r3, r1
 8009428:	f7f7 f9bc 	bl	80007a4 <__aeabi_ddiv>
 800942c:	e7e6      	b.n	80093fc <__ieee754_sqrt+0x30>
 800942e:	1509      	asrs	r1, r1, #20
 8009430:	d076      	beq.n	8009520 <__ieee754_sqrt+0x154>
 8009432:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8009436:	07ce      	lsls	r6, r1, #31
 8009438:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 800943c:	bf5e      	ittt	pl
 800943e:	0fda      	lsrpl	r2, r3, #31
 8009440:	005b      	lslpl	r3, r3, #1
 8009442:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8009446:	0fda      	lsrs	r2, r3, #31
 8009448:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 800944c:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8009450:	2000      	movs	r0, #0
 8009452:	106d      	asrs	r5, r5, #1
 8009454:	005b      	lsls	r3, r3, #1
 8009456:	f04f 0e16 	mov.w	lr, #22
 800945a:	4684      	mov	ip, r0
 800945c:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8009460:	eb0c 0401 	add.w	r4, ip, r1
 8009464:	4294      	cmp	r4, r2
 8009466:	bfde      	ittt	le
 8009468:	1b12      	suble	r2, r2, r4
 800946a:	eb04 0c01 	addle.w	ip, r4, r1
 800946e:	1840      	addle	r0, r0, r1
 8009470:	0052      	lsls	r2, r2, #1
 8009472:	f1be 0e01 	subs.w	lr, lr, #1
 8009476:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 800947a:	ea4f 0151 	mov.w	r1, r1, lsr #1
 800947e:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8009482:	d1ed      	bne.n	8009460 <__ieee754_sqrt+0x94>
 8009484:	4671      	mov	r1, lr
 8009486:	2720      	movs	r7, #32
 8009488:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 800948c:	4562      	cmp	r2, ip
 800948e:	eb04 060e 	add.w	r6, r4, lr
 8009492:	dc02      	bgt.n	800949a <__ieee754_sqrt+0xce>
 8009494:	d113      	bne.n	80094be <__ieee754_sqrt+0xf2>
 8009496:	429e      	cmp	r6, r3
 8009498:	d811      	bhi.n	80094be <__ieee754_sqrt+0xf2>
 800949a:	2e00      	cmp	r6, #0
 800949c:	eb06 0e04 	add.w	lr, r6, r4
 80094a0:	da43      	bge.n	800952a <__ieee754_sqrt+0x15e>
 80094a2:	f1be 0f00 	cmp.w	lr, #0
 80094a6:	db40      	blt.n	800952a <__ieee754_sqrt+0x15e>
 80094a8:	f10c 0801 	add.w	r8, ip, #1
 80094ac:	eba2 020c 	sub.w	r2, r2, ip
 80094b0:	429e      	cmp	r6, r3
 80094b2:	bf88      	it	hi
 80094b4:	f102 32ff 	addhi.w	r2, r2, #4294967295	; 0xffffffff
 80094b8:	1b9b      	subs	r3, r3, r6
 80094ba:	4421      	add	r1, r4
 80094bc:	46c4      	mov	ip, r8
 80094be:	0052      	lsls	r2, r2, #1
 80094c0:	3f01      	subs	r7, #1
 80094c2:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 80094c6:	ea4f 0454 	mov.w	r4, r4, lsr #1
 80094ca:	ea4f 0343 	mov.w	r3, r3, lsl #1
 80094ce:	d1dd      	bne.n	800948c <__ieee754_sqrt+0xc0>
 80094d0:	4313      	orrs	r3, r2
 80094d2:	d006      	beq.n	80094e2 <__ieee754_sqrt+0x116>
 80094d4:	1c4c      	adds	r4, r1, #1
 80094d6:	bf13      	iteet	ne
 80094d8:	3101      	addne	r1, #1
 80094da:	3001      	addeq	r0, #1
 80094dc:	4639      	moveq	r1, r7
 80094de:	f021 0101 	bicne.w	r1, r1, #1
 80094e2:	1043      	asrs	r3, r0, #1
 80094e4:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 80094e8:	0849      	lsrs	r1, r1, #1
 80094ea:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 80094ee:	07c2      	lsls	r2, r0, #31
 80094f0:	bf48      	it	mi
 80094f2:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 80094f6:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 80094fa:	460c      	mov	r4, r1
 80094fc:	463d      	mov	r5, r7
 80094fe:	e77f      	b.n	8009400 <__ieee754_sqrt+0x34>
 8009500:	0ada      	lsrs	r2, r3, #11
 8009502:	3815      	subs	r0, #21
 8009504:	055b      	lsls	r3, r3, #21
 8009506:	2a00      	cmp	r2, #0
 8009508:	d0fa      	beq.n	8009500 <__ieee754_sqrt+0x134>
 800950a:	02d7      	lsls	r7, r2, #11
 800950c:	d50a      	bpl.n	8009524 <__ieee754_sqrt+0x158>
 800950e:	f1c1 0420 	rsb	r4, r1, #32
 8009512:	fa23 f404 	lsr.w	r4, r3, r4
 8009516:	1e4d      	subs	r5, r1, #1
 8009518:	408b      	lsls	r3, r1
 800951a:	4322      	orrs	r2, r4
 800951c:	1b41      	subs	r1, r0, r5
 800951e:	e788      	b.n	8009432 <__ieee754_sqrt+0x66>
 8009520:	4608      	mov	r0, r1
 8009522:	e7f0      	b.n	8009506 <__ieee754_sqrt+0x13a>
 8009524:	0052      	lsls	r2, r2, #1
 8009526:	3101      	adds	r1, #1
 8009528:	e7ef      	b.n	800950a <__ieee754_sqrt+0x13e>
 800952a:	46e0      	mov	r8, ip
 800952c:	e7be      	b.n	80094ac <__ieee754_sqrt+0xe0>
 800952e:	bf00      	nop
 8009530:	7ff00000 	.word	0x7ff00000

08009534 <fabs>:
 8009534:	ec51 0b10 	vmov	r0, r1, d0
 8009538:	ee10 2a10 	vmov	r2, s0
 800953c:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8009540:	ec43 2b10 	vmov	d0, r2, r3
 8009544:	4770      	bx	lr

08009546 <finite>:
 8009546:	b082      	sub	sp, #8
 8009548:	ed8d 0b00 	vstr	d0, [sp]
 800954c:	9801      	ldr	r0, [sp, #4]
 800954e:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8009552:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8009556:	0fc0      	lsrs	r0, r0, #31
 8009558:	b002      	add	sp, #8
 800955a:	4770      	bx	lr
 800955c:	0000      	movs	r0, r0
	...

08009560 <nan>:
 8009560:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8009568 <nan+0x8>
 8009564:	4770      	bx	lr
 8009566:	bf00      	nop
 8009568:	00000000 	.word	0x00000000
 800956c:	7ff80000 	.word	0x7ff80000

08009570 <rint>:
 8009570:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8009572:	ec51 0b10 	vmov	r0, r1, d0
 8009576:	f3c1 520a 	ubfx	r2, r1, #20, #11
 800957a:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 800957e:	2e13      	cmp	r6, #19
 8009580:	ee10 4a10 	vmov	r4, s0
 8009584:	460b      	mov	r3, r1
 8009586:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 800958a:	dc58      	bgt.n	800963e <rint+0xce>
 800958c:	2e00      	cmp	r6, #0
 800958e:	da2b      	bge.n	80095e8 <rint+0x78>
 8009590:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8009594:	4302      	orrs	r2, r0
 8009596:	d023      	beq.n	80095e0 <rint+0x70>
 8009598:	f3c1 0213 	ubfx	r2, r1, #0, #20
 800959c:	4302      	orrs	r2, r0
 800959e:	4254      	negs	r4, r2
 80095a0:	4314      	orrs	r4, r2
 80095a2:	0c4b      	lsrs	r3, r1, #17
 80095a4:	0b24      	lsrs	r4, r4, #12
 80095a6:	045b      	lsls	r3, r3, #17
 80095a8:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 80095ac:	ea44 0103 	orr.w	r1, r4, r3
 80095b0:	4b32      	ldr	r3, [pc, #200]	; (800967c <rint+0x10c>)
 80095b2:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 80095b6:	e9d3 6700 	ldrd	r6, r7, [r3]
 80095ba:	4602      	mov	r2, r0
 80095bc:	460b      	mov	r3, r1
 80095be:	4630      	mov	r0, r6
 80095c0:	4639      	mov	r1, r7
 80095c2:	f7f6 fe0f 	bl	80001e4 <__adddf3>
 80095c6:	e9cd 0100 	strd	r0, r1, [sp]
 80095ca:	463b      	mov	r3, r7
 80095cc:	e9dd 0100 	ldrd	r0, r1, [sp]
 80095d0:	4632      	mov	r2, r6
 80095d2:	f7f6 fe05 	bl	80001e0 <__aeabi_dsub>
 80095d6:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 80095da:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 80095de:	4639      	mov	r1, r7
 80095e0:	ec41 0b10 	vmov	d0, r0, r1
 80095e4:	b003      	add	sp, #12
 80095e6:	bdf0      	pop	{r4, r5, r6, r7, pc}
 80095e8:	4a25      	ldr	r2, [pc, #148]	; (8009680 <rint+0x110>)
 80095ea:	4132      	asrs	r2, r6
 80095ec:	ea01 0702 	and.w	r7, r1, r2
 80095f0:	4307      	orrs	r7, r0
 80095f2:	d0f5      	beq.n	80095e0 <rint+0x70>
 80095f4:	0851      	lsrs	r1, r2, #1
 80095f6:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 80095fa:	4314      	orrs	r4, r2
 80095fc:	d00c      	beq.n	8009618 <rint+0xa8>
 80095fe:	ea23 0201 	bic.w	r2, r3, r1
 8009602:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8009606:	2e13      	cmp	r6, #19
 8009608:	fa43 f606 	asr.w	r6, r3, r6
 800960c:	bf0c      	ite	eq
 800960e:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8009612:	2400      	movne	r4, #0
 8009614:	ea42 0306 	orr.w	r3, r2, r6
 8009618:	4918      	ldr	r1, [pc, #96]	; (800967c <rint+0x10c>)
 800961a:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 800961e:	4622      	mov	r2, r4
 8009620:	e9d5 4500 	ldrd	r4, r5, [r5]
 8009624:	4620      	mov	r0, r4
 8009626:	4629      	mov	r1, r5
 8009628:	f7f6 fddc 	bl	80001e4 <__adddf3>
 800962c:	e9cd 0100 	strd	r0, r1, [sp]
 8009630:	e9dd 0100 	ldrd	r0, r1, [sp]
 8009634:	4622      	mov	r2, r4
 8009636:	462b      	mov	r3, r5
 8009638:	f7f6 fdd2 	bl	80001e0 <__aeabi_dsub>
 800963c:	e7d0      	b.n	80095e0 <rint+0x70>
 800963e:	2e33      	cmp	r6, #51	; 0x33
 8009640:	dd07      	ble.n	8009652 <rint+0xe2>
 8009642:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8009646:	d1cb      	bne.n	80095e0 <rint+0x70>
 8009648:	ee10 2a10 	vmov	r2, s0
 800964c:	f7f6 fdca 	bl	80001e4 <__adddf3>
 8009650:	e7c6      	b.n	80095e0 <rint+0x70>
 8009652:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8009656:	f04f 36ff 	mov.w	r6, #4294967295	; 0xffffffff
 800965a:	40d6      	lsrs	r6, r2
 800965c:	4230      	tst	r0, r6
 800965e:	d0bf      	beq.n	80095e0 <rint+0x70>
 8009660:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8009664:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8009668:	bf1f      	itttt	ne
 800966a:	ea24 0101 	bicne.w	r1, r4, r1
 800966e:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8009672:	fa44 f202 	asrne.w	r2, r4, r2
 8009676:	ea41 0402 	orrne.w	r4, r1, r2
 800967a:	e7cd      	b.n	8009618 <rint+0xa8>
 800967c:	08009808 	.word	0x08009808
 8009680:	000fffff 	.word	0x000fffff
 8009684:	00000000 	.word	0x00000000

08009688 <scalbn>:
 8009688:	b570      	push	{r4, r5, r6, lr}
 800968a:	ec55 4b10 	vmov	r4, r5, d0
 800968e:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8009692:	4606      	mov	r6, r0
 8009694:	462b      	mov	r3, r5
 8009696:	b99a      	cbnz	r2, 80096c0 <scalbn+0x38>
 8009698:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 800969c:	4323      	orrs	r3, r4
 800969e:	d036      	beq.n	800970e <scalbn+0x86>
 80096a0:	4b39      	ldr	r3, [pc, #228]	; (8009788 <scalbn+0x100>)
 80096a2:	4629      	mov	r1, r5
 80096a4:	ee10 0a10 	vmov	r0, s0
 80096a8:	2200      	movs	r2, #0
 80096aa:	f7f6 ff51 	bl	8000550 <__aeabi_dmul>
 80096ae:	4b37      	ldr	r3, [pc, #220]	; (800978c <scalbn+0x104>)
 80096b0:	429e      	cmp	r6, r3
 80096b2:	4604      	mov	r4, r0
 80096b4:	460d      	mov	r5, r1
 80096b6:	da10      	bge.n	80096da <scalbn+0x52>
 80096b8:	a32b      	add	r3, pc, #172	; (adr r3, 8009768 <scalbn+0xe0>)
 80096ba:	e9d3 2300 	ldrd	r2, r3, [r3]
 80096be:	e03a      	b.n	8009736 <scalbn+0xae>
 80096c0:	f240 71ff 	movw	r1, #2047	; 0x7ff
 80096c4:	428a      	cmp	r2, r1
 80096c6:	d10c      	bne.n	80096e2 <scalbn+0x5a>
 80096c8:	ee10 2a10 	vmov	r2, s0
 80096cc:	4620      	mov	r0, r4
 80096ce:	4629      	mov	r1, r5
 80096d0:	f7f6 fd88 	bl	80001e4 <__adddf3>
 80096d4:	4604      	mov	r4, r0
 80096d6:	460d      	mov	r5, r1
 80096d8:	e019      	b.n	800970e <scalbn+0x86>
 80096da:	f3c1 520a 	ubfx	r2, r1, #20, #11
 80096de:	460b      	mov	r3, r1
 80096e0:	3a36      	subs	r2, #54	; 0x36
 80096e2:	4432      	add	r2, r6
 80096e4:	f240 71fe 	movw	r1, #2046	; 0x7fe
 80096e8:	428a      	cmp	r2, r1
 80096ea:	dd08      	ble.n	80096fe <scalbn+0x76>
 80096ec:	2d00      	cmp	r5, #0
 80096ee:	a120      	add	r1, pc, #128	; (adr r1, 8009770 <scalbn+0xe8>)
 80096f0:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096f4:	da1c      	bge.n	8009730 <scalbn+0xa8>
 80096f6:	a120      	add	r1, pc, #128	; (adr r1, 8009778 <scalbn+0xf0>)
 80096f8:	e9d1 0100 	ldrd	r0, r1, [r1]
 80096fc:	e018      	b.n	8009730 <scalbn+0xa8>
 80096fe:	2a00      	cmp	r2, #0
 8009700:	dd08      	ble.n	8009714 <scalbn+0x8c>
 8009702:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009706:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 800970a:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 800970e:	ec45 4b10 	vmov	d0, r4, r5
 8009712:	bd70      	pop	{r4, r5, r6, pc}
 8009714:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8009718:	da19      	bge.n	800974e <scalbn+0xc6>
 800971a:	f24c 3350 	movw	r3, #50000	; 0xc350
 800971e:	429e      	cmp	r6, r3
 8009720:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8009724:	dd0a      	ble.n	800973c <scalbn+0xb4>
 8009726:	a112      	add	r1, pc, #72	; (adr r1, 8009770 <scalbn+0xe8>)
 8009728:	e9d1 0100 	ldrd	r0, r1, [r1]
 800972c:	2b00      	cmp	r3, #0
 800972e:	d1e2      	bne.n	80096f6 <scalbn+0x6e>
 8009730:	a30f      	add	r3, pc, #60	; (adr r3, 8009770 <scalbn+0xe8>)
 8009732:	e9d3 2300 	ldrd	r2, r3, [r3]
 8009736:	f7f6 ff0b 	bl	8000550 <__aeabi_dmul>
 800973a:	e7cb      	b.n	80096d4 <scalbn+0x4c>
 800973c:	a10a      	add	r1, pc, #40	; (adr r1, 8009768 <scalbn+0xe0>)
 800973e:	e9d1 0100 	ldrd	r0, r1, [r1]
 8009742:	2b00      	cmp	r3, #0
 8009744:	d0b8      	beq.n	80096b8 <scalbn+0x30>
 8009746:	a10e      	add	r1, pc, #56	; (adr r1, 8009780 <scalbn+0xf8>)
 8009748:	e9d1 0100 	ldrd	r0, r1, [r1]
 800974c:	e7b4      	b.n	80096b8 <scalbn+0x30>
 800974e:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8009752:	3236      	adds	r2, #54	; 0x36
 8009754:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8009758:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 800975c:	4620      	mov	r0, r4
 800975e:	4b0c      	ldr	r3, [pc, #48]	; (8009790 <scalbn+0x108>)
 8009760:	2200      	movs	r2, #0
 8009762:	e7e8      	b.n	8009736 <scalbn+0xae>
 8009764:	f3af 8000 	nop.w
 8009768:	c2f8f359 	.word	0xc2f8f359
 800976c:	01a56e1f 	.word	0x01a56e1f
 8009770:	8800759c 	.word	0x8800759c
 8009774:	7e37e43c 	.word	0x7e37e43c
 8009778:	8800759c 	.word	0x8800759c
 800977c:	fe37e43c 	.word	0xfe37e43c
 8009780:	c2f8f359 	.word	0xc2f8f359
 8009784:	81a56e1f 	.word	0x81a56e1f
 8009788:	43500000 	.word	0x43500000
 800978c:	ffff3cb0 	.word	0xffff3cb0
 8009790:	3c900000 	.word	0x3c900000

08009794 <_init>:
 8009794:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 8009796:	bf00      	nop
 8009798:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800979a:	bc08      	pop	{r3}
 800979c:	469e      	mov	lr, r3
 800979e:	4770      	bx	lr

080097a0 <_fini>:
 80097a0:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 80097a2:	bf00      	nop
 80097a4:	bcf8      	pop	{r3, r4, r5, r6, r7}
 80097a6:	bc08      	pop	{r3}
 80097a8:	469e      	mov	lr, r3
 80097aa:	4770      	bx	lr

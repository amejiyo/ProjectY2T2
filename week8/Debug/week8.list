
week8.elf:     file format elf32-littlearm

Sections:
Idx Name          Size      VMA       LMA       File off  Algn
  0 .isr_vector   00000198  08000000  08000000  00010000  2**0
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  1 .text         00005eac  08000198  08000198  00010198  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, CODE
  2 .rodata       00000060  08006048  08006048  00016048  2**3
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  3 .ARM.extab    00000000  080060a8  080060a8  00020098  2**0
                  CONTENTS
  4 .ARM          00000008  080060a8  080060a8  000160a8  2**2
                  CONTENTS, ALLOC, LOAD, READONLY, DATA
  5 .preinit_array 00000000  080060b0  080060b0  00020098  2**0
                  CONTENTS, ALLOC, LOAD, DATA
  6 .init_array   00000004  080060b0  080060b0  000160b0  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  7 .fini_array   00000004  080060b4  080060b4  000160b4  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  8 .data         00000098  20000000  080060b8  00020000  2**2
                  CONTENTS, ALLOC, LOAD, DATA
  9 .bss          000001d8  20000098  08006150  00020098  2**3
                  ALLOC
 10 ._user_heap_stack 00000600  20000270  08006150  00020270  2**0
                  ALLOC
 11 .ARM.attributes 00000030  00000000  00000000  00020098  2**0
                  CONTENTS, READONLY
 12 .debug_info   0000b553  00000000  00000000  000200c8  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 13 .debug_abbrev 000019c6  00000000  00000000  0002b61b  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 14 .debug_aranges 00000b68  00000000  00000000  0002cfe8  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 15 .debug_ranges 00000ab0  00000000  00000000  0002db50  2**3
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 16 .debug_macro  00015e8c  00000000  00000000  0002e600  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 17 .debug_line   0000a570  00000000  00000000  0004448c  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 18 .debug_str    0008c569  00000000  00000000  0004e9fc  2**0
                  CONTENTS, READONLY, DEBUGGING, OCTETS
 19 .comment      00000053  00000000  00000000  000daf65  2**0
                  CONTENTS, READONLY
 20 .debug_frame  00003460  00000000  00000000  000dafb8  2**2
                  CONTENTS, READONLY, DEBUGGING, OCTETS

Disassembly of section .text:

08000198 <__do_global_dtors_aux>:
 8000198:	b510      	push	{r4, lr}
 800019a:	4c05      	ldr	r4, [pc, #20]	; (80001b0 <__do_global_dtors_aux+0x18>)
 800019c:	7823      	ldrb	r3, [r4, #0]
 800019e:	b933      	cbnz	r3, 80001ae <__do_global_dtors_aux+0x16>
 80001a0:	4b04      	ldr	r3, [pc, #16]	; (80001b4 <__do_global_dtors_aux+0x1c>)
 80001a2:	b113      	cbz	r3, 80001aa <__do_global_dtors_aux+0x12>
 80001a4:	4804      	ldr	r0, [pc, #16]	; (80001b8 <__do_global_dtors_aux+0x20>)
 80001a6:	f3af 8000 	nop.w
 80001aa:	2301      	movs	r3, #1
 80001ac:	7023      	strb	r3, [r4, #0]
 80001ae:	bd10      	pop	{r4, pc}
 80001b0:	20000098 	.word	0x20000098
 80001b4:	00000000 	.word	0x00000000
 80001b8:	0800602c 	.word	0x0800602c

080001bc <frame_dummy>:
 80001bc:	b508      	push	{r3, lr}
 80001be:	4b03      	ldr	r3, [pc, #12]	; (80001cc <frame_dummy+0x10>)
 80001c0:	b11b      	cbz	r3, 80001ca <frame_dummy+0xe>
 80001c2:	4903      	ldr	r1, [pc, #12]	; (80001d0 <frame_dummy+0x14>)
 80001c4:	4803      	ldr	r0, [pc, #12]	; (80001d4 <frame_dummy+0x18>)
 80001c6:	f3af 8000 	nop.w
 80001ca:	bd08      	pop	{r3, pc}
 80001cc:	00000000 	.word	0x00000000
 80001d0:	2000009c 	.word	0x2000009c
 80001d4:	0800602c 	.word	0x0800602c

080001d8 <__aeabi_drsub>:
 80001d8:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000
 80001dc:	e002      	b.n	80001e4 <__adddf3>
 80001de:	bf00      	nop

080001e0 <__aeabi_dsub>:
 80001e0:	f083 4300 	eor.w	r3, r3, #2147483648	; 0x80000000

080001e4 <__adddf3>:
 80001e4:	b530      	push	{r4, r5, lr}
 80001e6:	ea4f 0441 	mov.w	r4, r1, lsl #1
 80001ea:	ea4f 0543 	mov.w	r5, r3, lsl #1
 80001ee:	ea94 0f05 	teq	r4, r5
 80001f2:	bf08      	it	eq
 80001f4:	ea90 0f02 	teqeq	r0, r2
 80001f8:	bf1f      	itttt	ne
 80001fa:	ea54 0c00 	orrsne.w	ip, r4, r0
 80001fe:	ea55 0c02 	orrsne.w	ip, r5, r2
 8000202:	ea7f 5c64 	mvnsne.w	ip, r4, asr #21
 8000206:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 800020a:	f000 80e2 	beq.w	80003d2 <__adddf3+0x1ee>
 800020e:	ea4f 5454 	mov.w	r4, r4, lsr #21
 8000212:	ebd4 5555 	rsbs	r5, r4, r5, lsr #21
 8000216:	bfb8      	it	lt
 8000218:	426d      	neglt	r5, r5
 800021a:	dd0c      	ble.n	8000236 <__adddf3+0x52>
 800021c:	442c      	add	r4, r5
 800021e:	ea80 0202 	eor.w	r2, r0, r2
 8000222:	ea81 0303 	eor.w	r3, r1, r3
 8000226:	ea82 0000 	eor.w	r0, r2, r0
 800022a:	ea83 0101 	eor.w	r1, r3, r1
 800022e:	ea80 0202 	eor.w	r2, r0, r2
 8000232:	ea81 0303 	eor.w	r3, r1, r3
 8000236:	2d36      	cmp	r5, #54	; 0x36
 8000238:	bf88      	it	hi
 800023a:	bd30      	pophi	{r4, r5, pc}
 800023c:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000240:	ea4f 3101 	mov.w	r1, r1, lsl #12
 8000244:	f44f 1c80 	mov.w	ip, #1048576	; 0x100000
 8000248:	ea4c 3111 	orr.w	r1, ip, r1, lsr #12
 800024c:	d002      	beq.n	8000254 <__adddf3+0x70>
 800024e:	4240      	negs	r0, r0
 8000250:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000254:	f013 4f00 	tst.w	r3, #2147483648	; 0x80000000
 8000258:	ea4f 3303 	mov.w	r3, r3, lsl #12
 800025c:	ea4c 3313 	orr.w	r3, ip, r3, lsr #12
 8000260:	d002      	beq.n	8000268 <__adddf3+0x84>
 8000262:	4252      	negs	r2, r2
 8000264:	eb63 0343 	sbc.w	r3, r3, r3, lsl #1
 8000268:	ea94 0f05 	teq	r4, r5
 800026c:	f000 80a7 	beq.w	80003be <__adddf3+0x1da>
 8000270:	f1a4 0401 	sub.w	r4, r4, #1
 8000274:	f1d5 0e20 	rsbs	lr, r5, #32
 8000278:	db0d      	blt.n	8000296 <__adddf3+0xb2>
 800027a:	fa02 fc0e 	lsl.w	ip, r2, lr
 800027e:	fa22 f205 	lsr.w	r2, r2, r5
 8000282:	1880      	adds	r0, r0, r2
 8000284:	f141 0100 	adc.w	r1, r1, #0
 8000288:	fa03 f20e 	lsl.w	r2, r3, lr
 800028c:	1880      	adds	r0, r0, r2
 800028e:	fa43 f305 	asr.w	r3, r3, r5
 8000292:	4159      	adcs	r1, r3
 8000294:	e00e      	b.n	80002b4 <__adddf3+0xd0>
 8000296:	f1a5 0520 	sub.w	r5, r5, #32
 800029a:	f10e 0e20 	add.w	lr, lr, #32
 800029e:	2a01      	cmp	r2, #1
 80002a0:	fa03 fc0e 	lsl.w	ip, r3, lr
 80002a4:	bf28      	it	cs
 80002a6:	f04c 0c02 	orrcs.w	ip, ip, #2
 80002aa:	fa43 f305 	asr.w	r3, r3, r5
 80002ae:	18c0      	adds	r0, r0, r3
 80002b0:	eb51 71e3 	adcs.w	r1, r1, r3, asr #31
 80002b4:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80002b8:	d507      	bpl.n	80002ca <__adddf3+0xe6>
 80002ba:	f04f 0e00 	mov.w	lr, #0
 80002be:	f1dc 0c00 	rsbs	ip, ip, #0
 80002c2:	eb7e 0000 	sbcs.w	r0, lr, r0
 80002c6:	eb6e 0101 	sbc.w	r1, lr, r1
 80002ca:	f5b1 1f80 	cmp.w	r1, #1048576	; 0x100000
 80002ce:	d31b      	bcc.n	8000308 <__adddf3+0x124>
 80002d0:	f5b1 1f00 	cmp.w	r1, #2097152	; 0x200000
 80002d4:	d30c      	bcc.n	80002f0 <__adddf3+0x10c>
 80002d6:	0849      	lsrs	r1, r1, #1
 80002d8:	ea5f 0030 	movs.w	r0, r0, rrx
 80002dc:	ea4f 0c3c 	mov.w	ip, ip, rrx
 80002e0:	f104 0401 	add.w	r4, r4, #1
 80002e4:	ea4f 5244 	mov.w	r2, r4, lsl #21
 80002e8:	f512 0f80 	cmn.w	r2, #4194304	; 0x400000
 80002ec:	f080 809a 	bcs.w	8000424 <__adddf3+0x240>
 80002f0:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 80002f4:	bf08      	it	eq
 80002f6:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80002fa:	f150 0000 	adcs.w	r0, r0, #0
 80002fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000302:	ea41 0105 	orr.w	r1, r1, r5
 8000306:	bd30      	pop	{r4, r5, pc}
 8000308:	ea5f 0c4c 	movs.w	ip, ip, lsl #1
 800030c:	4140      	adcs	r0, r0
 800030e:	eb41 0101 	adc.w	r1, r1, r1
 8000312:	3c01      	subs	r4, #1
 8000314:	bf28      	it	cs
 8000316:	f5b1 1f80 	cmpcs.w	r1, #1048576	; 0x100000
 800031a:	d2e9      	bcs.n	80002f0 <__adddf3+0x10c>
 800031c:	f091 0f00 	teq	r1, #0
 8000320:	bf04      	itt	eq
 8000322:	4601      	moveq	r1, r0
 8000324:	2000      	moveq	r0, #0
 8000326:	fab1 f381 	clz	r3, r1
 800032a:	bf08      	it	eq
 800032c:	3320      	addeq	r3, #32
 800032e:	f1a3 030b 	sub.w	r3, r3, #11
 8000332:	f1b3 0220 	subs.w	r2, r3, #32
 8000336:	da0c      	bge.n	8000352 <__adddf3+0x16e>
 8000338:	320c      	adds	r2, #12
 800033a:	dd08      	ble.n	800034e <__adddf3+0x16a>
 800033c:	f102 0c14 	add.w	ip, r2, #20
 8000340:	f1c2 020c 	rsb	r2, r2, #12
 8000344:	fa01 f00c 	lsl.w	r0, r1, ip
 8000348:	fa21 f102 	lsr.w	r1, r1, r2
 800034c:	e00c      	b.n	8000368 <__adddf3+0x184>
 800034e:	f102 0214 	add.w	r2, r2, #20
 8000352:	bfd8      	it	le
 8000354:	f1c2 0c20 	rsble	ip, r2, #32
 8000358:	fa01 f102 	lsl.w	r1, r1, r2
 800035c:	fa20 fc0c 	lsr.w	ip, r0, ip
 8000360:	bfdc      	itt	le
 8000362:	ea41 010c 	orrle.w	r1, r1, ip
 8000366:	4090      	lslle	r0, r2
 8000368:	1ae4      	subs	r4, r4, r3
 800036a:	bfa2      	ittt	ge
 800036c:	eb01 5104 	addge.w	r1, r1, r4, lsl #20
 8000370:	4329      	orrge	r1, r5
 8000372:	bd30      	popge	{r4, r5, pc}
 8000374:	ea6f 0404 	mvn.w	r4, r4
 8000378:	3c1f      	subs	r4, #31
 800037a:	da1c      	bge.n	80003b6 <__adddf3+0x1d2>
 800037c:	340c      	adds	r4, #12
 800037e:	dc0e      	bgt.n	800039e <__adddf3+0x1ba>
 8000380:	f104 0414 	add.w	r4, r4, #20
 8000384:	f1c4 0220 	rsb	r2, r4, #32
 8000388:	fa20 f004 	lsr.w	r0, r0, r4
 800038c:	fa01 f302 	lsl.w	r3, r1, r2
 8000390:	ea40 0003 	orr.w	r0, r0, r3
 8000394:	fa21 f304 	lsr.w	r3, r1, r4
 8000398:	ea45 0103 	orr.w	r1, r5, r3
 800039c:	bd30      	pop	{r4, r5, pc}
 800039e:	f1c4 040c 	rsb	r4, r4, #12
 80003a2:	f1c4 0220 	rsb	r2, r4, #32
 80003a6:	fa20 f002 	lsr.w	r0, r0, r2
 80003aa:	fa01 f304 	lsl.w	r3, r1, r4
 80003ae:	ea40 0003 	orr.w	r0, r0, r3
 80003b2:	4629      	mov	r1, r5
 80003b4:	bd30      	pop	{r4, r5, pc}
 80003b6:	fa21 f004 	lsr.w	r0, r1, r4
 80003ba:	4629      	mov	r1, r5
 80003bc:	bd30      	pop	{r4, r5, pc}
 80003be:	f094 0f00 	teq	r4, #0
 80003c2:	f483 1380 	eor.w	r3, r3, #1048576	; 0x100000
 80003c6:	bf06      	itte	eq
 80003c8:	f481 1180 	eoreq.w	r1, r1, #1048576	; 0x100000
 80003cc:	3401      	addeq	r4, #1
 80003ce:	3d01      	subne	r5, #1
 80003d0:	e74e      	b.n	8000270 <__adddf3+0x8c>
 80003d2:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 80003d6:	bf18      	it	ne
 80003d8:	ea7f 5c65 	mvnsne.w	ip, r5, asr #21
 80003dc:	d029      	beq.n	8000432 <__adddf3+0x24e>
 80003de:	ea94 0f05 	teq	r4, r5
 80003e2:	bf08      	it	eq
 80003e4:	ea90 0f02 	teqeq	r0, r2
 80003e8:	d005      	beq.n	80003f6 <__adddf3+0x212>
 80003ea:	ea54 0c00 	orrs.w	ip, r4, r0
 80003ee:	bf04      	itt	eq
 80003f0:	4619      	moveq	r1, r3
 80003f2:	4610      	moveq	r0, r2
 80003f4:	bd30      	pop	{r4, r5, pc}
 80003f6:	ea91 0f03 	teq	r1, r3
 80003fa:	bf1e      	ittt	ne
 80003fc:	2100      	movne	r1, #0
 80003fe:	2000      	movne	r0, #0
 8000400:	bd30      	popne	{r4, r5, pc}
 8000402:	ea5f 5c54 	movs.w	ip, r4, lsr #21
 8000406:	d105      	bne.n	8000414 <__adddf3+0x230>
 8000408:	0040      	lsls	r0, r0, #1
 800040a:	4149      	adcs	r1, r1
 800040c:	bf28      	it	cs
 800040e:	f041 4100 	orrcs.w	r1, r1, #2147483648	; 0x80000000
 8000412:	bd30      	pop	{r4, r5, pc}
 8000414:	f514 0480 	adds.w	r4, r4, #4194304	; 0x400000
 8000418:	bf3c      	itt	cc
 800041a:	f501 1180 	addcc.w	r1, r1, #1048576	; 0x100000
 800041e:	bd30      	popcc	{r4, r5, pc}
 8000420:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 8000424:	f045 41fe 	orr.w	r1, r5, #2130706432	; 0x7f000000
 8000428:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 800042c:	f04f 0000 	mov.w	r0, #0
 8000430:	bd30      	pop	{r4, r5, pc}
 8000432:	ea7f 5c64 	mvns.w	ip, r4, asr #21
 8000436:	bf1a      	itte	ne
 8000438:	4619      	movne	r1, r3
 800043a:	4610      	movne	r0, r2
 800043c:	ea7f 5c65 	mvnseq.w	ip, r5, asr #21
 8000440:	bf1c      	itt	ne
 8000442:	460b      	movne	r3, r1
 8000444:	4602      	movne	r2, r0
 8000446:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800044a:	bf06      	itte	eq
 800044c:	ea52 3503 	orrseq.w	r5, r2, r3, lsl #12
 8000450:	ea91 0f03 	teqeq	r1, r3
 8000454:	f441 2100 	orrne.w	r1, r1, #524288	; 0x80000
 8000458:	bd30      	pop	{r4, r5, pc}
 800045a:	bf00      	nop

0800045c <__aeabi_ui2d>:
 800045c:	f090 0f00 	teq	r0, #0
 8000460:	bf04      	itt	eq
 8000462:	2100      	moveq	r1, #0
 8000464:	4770      	bxeq	lr
 8000466:	b530      	push	{r4, r5, lr}
 8000468:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800046c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000470:	f04f 0500 	mov.w	r5, #0
 8000474:	f04f 0100 	mov.w	r1, #0
 8000478:	e750      	b.n	800031c <__adddf3+0x138>
 800047a:	bf00      	nop

0800047c <__aeabi_i2d>:
 800047c:	f090 0f00 	teq	r0, #0
 8000480:	bf04      	itt	eq
 8000482:	2100      	moveq	r1, #0
 8000484:	4770      	bxeq	lr
 8000486:	b530      	push	{r4, r5, lr}
 8000488:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800048c:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000490:	f010 4500 	ands.w	r5, r0, #2147483648	; 0x80000000
 8000494:	bf48      	it	mi
 8000496:	4240      	negmi	r0, r0
 8000498:	f04f 0100 	mov.w	r1, #0
 800049c:	e73e      	b.n	800031c <__adddf3+0x138>
 800049e:	bf00      	nop

080004a0 <__aeabi_f2d>:
 80004a0:	0042      	lsls	r2, r0, #1
 80004a2:	ea4f 01e2 	mov.w	r1, r2, asr #3
 80004a6:	ea4f 0131 	mov.w	r1, r1, rrx
 80004aa:	ea4f 7002 	mov.w	r0, r2, lsl #28
 80004ae:	bf1f      	itttt	ne
 80004b0:	f012 437f 	andsne.w	r3, r2, #4278190080	; 0xff000000
 80004b4:	f093 4f7f 	teqne	r3, #4278190080	; 0xff000000
 80004b8:	f081 5160 	eorne.w	r1, r1, #939524096	; 0x38000000
 80004bc:	4770      	bxne	lr
 80004be:	f032 427f 	bics.w	r2, r2, #4278190080	; 0xff000000
 80004c2:	bf08      	it	eq
 80004c4:	4770      	bxeq	lr
 80004c6:	f093 4f7f 	teq	r3, #4278190080	; 0xff000000
 80004ca:	bf04      	itt	eq
 80004cc:	f441 2100 	orreq.w	r1, r1, #524288	; 0x80000
 80004d0:	4770      	bxeq	lr
 80004d2:	b530      	push	{r4, r5, lr}
 80004d4:	f44f 7460 	mov.w	r4, #896	; 0x380
 80004d8:	f001 4500 	and.w	r5, r1, #2147483648	; 0x80000000
 80004dc:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 80004e0:	e71c      	b.n	800031c <__adddf3+0x138>
 80004e2:	bf00      	nop

080004e4 <__aeabi_ul2d>:
 80004e4:	ea50 0201 	orrs.w	r2, r0, r1
 80004e8:	bf08      	it	eq
 80004ea:	4770      	bxeq	lr
 80004ec:	b530      	push	{r4, r5, lr}
 80004ee:	f04f 0500 	mov.w	r5, #0
 80004f2:	e00a      	b.n	800050a <__aeabi_l2d+0x16>

080004f4 <__aeabi_l2d>:
 80004f4:	ea50 0201 	orrs.w	r2, r0, r1
 80004f8:	bf08      	it	eq
 80004fa:	4770      	bxeq	lr
 80004fc:	b530      	push	{r4, r5, lr}
 80004fe:	f011 4500 	ands.w	r5, r1, #2147483648	; 0x80000000
 8000502:	d502      	bpl.n	800050a <__aeabi_l2d+0x16>
 8000504:	4240      	negs	r0, r0
 8000506:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 800050a:	f44f 6480 	mov.w	r4, #1024	; 0x400
 800050e:	f104 0432 	add.w	r4, r4, #50	; 0x32
 8000512:	ea5f 5c91 	movs.w	ip, r1, lsr #22
 8000516:	f43f aed8 	beq.w	80002ca <__adddf3+0xe6>
 800051a:	f04f 0203 	mov.w	r2, #3
 800051e:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 8000522:	bf18      	it	ne
 8000524:	3203      	addne	r2, #3
 8000526:	ea5f 0cdc 	movs.w	ip, ip, lsr #3
 800052a:	bf18      	it	ne
 800052c:	3203      	addne	r2, #3
 800052e:	eb02 02dc 	add.w	r2, r2, ip, lsr #3
 8000532:	f1c2 0320 	rsb	r3, r2, #32
 8000536:	fa00 fc03 	lsl.w	ip, r0, r3
 800053a:	fa20 f002 	lsr.w	r0, r0, r2
 800053e:	fa01 fe03 	lsl.w	lr, r1, r3
 8000542:	ea40 000e 	orr.w	r0, r0, lr
 8000546:	fa21 f102 	lsr.w	r1, r1, r2
 800054a:	4414      	add	r4, r2
 800054c:	e6bd      	b.n	80002ca <__adddf3+0xe6>
 800054e:	bf00      	nop

08000550 <__aeabi_dmul>:
 8000550:	b570      	push	{r4, r5, r6, lr}
 8000552:	f04f 0cff 	mov.w	ip, #255	; 0xff
 8000556:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 800055a:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 800055e:	bf1d      	ittte	ne
 8000560:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 8000564:	ea94 0f0c 	teqne	r4, ip
 8000568:	ea95 0f0c 	teqne	r5, ip
 800056c:	f000 f8de 	bleq	800072c <__aeabi_dmul+0x1dc>
 8000570:	442c      	add	r4, r5
 8000572:	ea81 0603 	eor.w	r6, r1, r3
 8000576:	ea21 514c 	bic.w	r1, r1, ip, lsl #21
 800057a:	ea23 534c 	bic.w	r3, r3, ip, lsl #21
 800057e:	ea50 3501 	orrs.w	r5, r0, r1, lsl #12
 8000582:	bf18      	it	ne
 8000584:	ea52 3503 	orrsne.w	r5, r2, r3, lsl #12
 8000588:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 800058c:	f443 1380 	orr.w	r3, r3, #1048576	; 0x100000
 8000590:	d038      	beq.n	8000604 <__aeabi_dmul+0xb4>
 8000592:	fba0 ce02 	umull	ip, lr, r0, r2
 8000596:	f04f 0500 	mov.w	r5, #0
 800059a:	fbe1 e502 	umlal	lr, r5, r1, r2
 800059e:	f006 4200 	and.w	r2, r6, #2147483648	; 0x80000000
 80005a2:	fbe0 e503 	umlal	lr, r5, r0, r3
 80005a6:	f04f 0600 	mov.w	r6, #0
 80005aa:	fbe1 5603 	umlal	r5, r6, r1, r3
 80005ae:	f09c 0f00 	teq	ip, #0
 80005b2:	bf18      	it	ne
 80005b4:	f04e 0e01 	orrne.w	lr, lr, #1
 80005b8:	f1a4 04ff 	sub.w	r4, r4, #255	; 0xff
 80005bc:	f5b6 7f00 	cmp.w	r6, #512	; 0x200
 80005c0:	f564 7440 	sbc.w	r4, r4, #768	; 0x300
 80005c4:	d204      	bcs.n	80005d0 <__aeabi_dmul+0x80>
 80005c6:	ea5f 0e4e 	movs.w	lr, lr, lsl #1
 80005ca:	416d      	adcs	r5, r5
 80005cc:	eb46 0606 	adc.w	r6, r6, r6
 80005d0:	ea42 21c6 	orr.w	r1, r2, r6, lsl #11
 80005d4:	ea41 5155 	orr.w	r1, r1, r5, lsr #21
 80005d8:	ea4f 20c5 	mov.w	r0, r5, lsl #11
 80005dc:	ea40 505e 	orr.w	r0, r0, lr, lsr #21
 80005e0:	ea4f 2ece 	mov.w	lr, lr, lsl #11
 80005e4:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80005e8:	bf88      	it	hi
 80005ea:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80005ee:	d81e      	bhi.n	800062e <__aeabi_dmul+0xde>
 80005f0:	f1be 4f00 	cmp.w	lr, #2147483648	; 0x80000000
 80005f4:	bf08      	it	eq
 80005f6:	ea5f 0e50 	movseq.w	lr, r0, lsr #1
 80005fa:	f150 0000 	adcs.w	r0, r0, #0
 80005fe:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 8000602:	bd70      	pop	{r4, r5, r6, pc}
 8000604:	f006 4600 	and.w	r6, r6, #2147483648	; 0x80000000
 8000608:	ea46 0101 	orr.w	r1, r6, r1
 800060c:	ea40 0002 	orr.w	r0, r0, r2
 8000610:	ea81 0103 	eor.w	r1, r1, r3
 8000614:	ebb4 045c 	subs.w	r4, r4, ip, lsr #1
 8000618:	bfc2      	ittt	gt
 800061a:	ebd4 050c 	rsbsgt	r5, r4, ip
 800061e:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 8000622:	bd70      	popgt	{r4, r5, r6, pc}
 8000624:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000628:	f04f 0e00 	mov.w	lr, #0
 800062c:	3c01      	subs	r4, #1
 800062e:	f300 80ab 	bgt.w	8000788 <__aeabi_dmul+0x238>
 8000632:	f114 0f36 	cmn.w	r4, #54	; 0x36
 8000636:	bfde      	ittt	le
 8000638:	2000      	movle	r0, #0
 800063a:	f001 4100 	andle.w	r1, r1, #2147483648	; 0x80000000
 800063e:	bd70      	pople	{r4, r5, r6, pc}
 8000640:	f1c4 0400 	rsb	r4, r4, #0
 8000644:	3c20      	subs	r4, #32
 8000646:	da35      	bge.n	80006b4 <__aeabi_dmul+0x164>
 8000648:	340c      	adds	r4, #12
 800064a:	dc1b      	bgt.n	8000684 <__aeabi_dmul+0x134>
 800064c:	f104 0414 	add.w	r4, r4, #20
 8000650:	f1c4 0520 	rsb	r5, r4, #32
 8000654:	fa00 f305 	lsl.w	r3, r0, r5
 8000658:	fa20 f004 	lsr.w	r0, r0, r4
 800065c:	fa01 f205 	lsl.w	r2, r1, r5
 8000660:	ea40 0002 	orr.w	r0, r0, r2
 8000664:	f001 4200 	and.w	r2, r1, #2147483648	; 0x80000000
 8000668:	f021 4100 	bic.w	r1, r1, #2147483648	; 0x80000000
 800066c:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 8000670:	fa21 f604 	lsr.w	r6, r1, r4
 8000674:	eb42 0106 	adc.w	r1, r2, r6
 8000678:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 800067c:	bf08      	it	eq
 800067e:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 8000682:	bd70      	pop	{r4, r5, r6, pc}
 8000684:	f1c4 040c 	rsb	r4, r4, #12
 8000688:	f1c4 0520 	rsb	r5, r4, #32
 800068c:	fa00 f304 	lsl.w	r3, r0, r4
 8000690:	fa20 f005 	lsr.w	r0, r0, r5
 8000694:	fa01 f204 	lsl.w	r2, r1, r4
 8000698:	ea40 0002 	orr.w	r0, r0, r2
 800069c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006a0:	eb10 70d3 	adds.w	r0, r0, r3, lsr #31
 80006a4:	f141 0100 	adc.w	r1, r1, #0
 80006a8:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006ac:	bf08      	it	eq
 80006ae:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006b2:	bd70      	pop	{r4, r5, r6, pc}
 80006b4:	f1c4 0520 	rsb	r5, r4, #32
 80006b8:	fa00 f205 	lsl.w	r2, r0, r5
 80006bc:	ea4e 0e02 	orr.w	lr, lr, r2
 80006c0:	fa20 f304 	lsr.w	r3, r0, r4
 80006c4:	fa01 f205 	lsl.w	r2, r1, r5
 80006c8:	ea43 0302 	orr.w	r3, r3, r2
 80006cc:	fa21 f004 	lsr.w	r0, r1, r4
 80006d0:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 80006d4:	fa21 f204 	lsr.w	r2, r1, r4
 80006d8:	ea20 0002 	bic.w	r0, r0, r2
 80006dc:	eb00 70d3 	add.w	r0, r0, r3, lsr #31
 80006e0:	ea5e 0e43 	orrs.w	lr, lr, r3, lsl #1
 80006e4:	bf08      	it	eq
 80006e6:	ea20 70d3 	biceq.w	r0, r0, r3, lsr #31
 80006ea:	bd70      	pop	{r4, r5, r6, pc}
 80006ec:	f094 0f00 	teq	r4, #0
 80006f0:	d10f      	bne.n	8000712 <__aeabi_dmul+0x1c2>
 80006f2:	f001 4600 	and.w	r6, r1, #2147483648	; 0x80000000
 80006f6:	0040      	lsls	r0, r0, #1
 80006f8:	eb41 0101 	adc.w	r1, r1, r1
 80006fc:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 8000700:	bf08      	it	eq
 8000702:	3c01      	subeq	r4, #1
 8000704:	d0f7      	beq.n	80006f6 <__aeabi_dmul+0x1a6>
 8000706:	ea41 0106 	orr.w	r1, r1, r6
 800070a:	f095 0f00 	teq	r5, #0
 800070e:	bf18      	it	ne
 8000710:	4770      	bxne	lr
 8000712:	f003 4600 	and.w	r6, r3, #2147483648	; 0x80000000
 8000716:	0052      	lsls	r2, r2, #1
 8000718:	eb43 0303 	adc.w	r3, r3, r3
 800071c:	f413 1f80 	tst.w	r3, #1048576	; 0x100000
 8000720:	bf08      	it	eq
 8000722:	3d01      	subeq	r5, #1
 8000724:	d0f7      	beq.n	8000716 <__aeabi_dmul+0x1c6>
 8000726:	ea43 0306 	orr.w	r3, r3, r6
 800072a:	4770      	bx	lr
 800072c:	ea94 0f0c 	teq	r4, ip
 8000730:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000734:	bf18      	it	ne
 8000736:	ea95 0f0c 	teqne	r5, ip
 800073a:	d00c      	beq.n	8000756 <__aeabi_dmul+0x206>
 800073c:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000740:	bf18      	it	ne
 8000742:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000746:	d1d1      	bne.n	80006ec <__aeabi_dmul+0x19c>
 8000748:	ea81 0103 	eor.w	r1, r1, r3
 800074c:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 8000750:	f04f 0000 	mov.w	r0, #0
 8000754:	bd70      	pop	{r4, r5, r6, pc}
 8000756:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 800075a:	bf06      	itte	eq
 800075c:	4610      	moveq	r0, r2
 800075e:	4619      	moveq	r1, r3
 8000760:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 8000764:	d019      	beq.n	800079a <__aeabi_dmul+0x24a>
 8000766:	ea94 0f0c 	teq	r4, ip
 800076a:	d102      	bne.n	8000772 <__aeabi_dmul+0x222>
 800076c:	ea50 3601 	orrs.w	r6, r0, r1, lsl #12
 8000770:	d113      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000772:	ea95 0f0c 	teq	r5, ip
 8000776:	d105      	bne.n	8000784 <__aeabi_dmul+0x234>
 8000778:	ea52 3603 	orrs.w	r6, r2, r3, lsl #12
 800077c:	bf1c      	itt	ne
 800077e:	4610      	movne	r0, r2
 8000780:	4619      	movne	r1, r3
 8000782:	d10a      	bne.n	800079a <__aeabi_dmul+0x24a>
 8000784:	ea81 0103 	eor.w	r1, r1, r3
 8000788:	f001 4100 	and.w	r1, r1, #2147483648	; 0x80000000
 800078c:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 8000790:	f441 0170 	orr.w	r1, r1, #15728640	; 0xf00000
 8000794:	f04f 0000 	mov.w	r0, #0
 8000798:	bd70      	pop	{r4, r5, r6, pc}
 800079a:	f041 41fe 	orr.w	r1, r1, #2130706432	; 0x7f000000
 800079e:	f441 0178 	orr.w	r1, r1, #16252928	; 0xf80000
 80007a2:	bd70      	pop	{r4, r5, r6, pc}

080007a4 <__aeabi_ddiv>:
 80007a4:	b570      	push	{r4, r5, r6, lr}
 80007a6:	f04f 0cff 	mov.w	ip, #255	; 0xff
 80007aa:	f44c 6ce0 	orr.w	ip, ip, #1792	; 0x700
 80007ae:	ea1c 5411 	ands.w	r4, ip, r1, lsr #20
 80007b2:	bf1d      	ittte	ne
 80007b4:	ea1c 5513 	andsne.w	r5, ip, r3, lsr #20
 80007b8:	ea94 0f0c 	teqne	r4, ip
 80007bc:	ea95 0f0c 	teqne	r5, ip
 80007c0:	f000 f8a7 	bleq	8000912 <__aeabi_ddiv+0x16e>
 80007c4:	eba4 0405 	sub.w	r4, r4, r5
 80007c8:	ea81 0e03 	eor.w	lr, r1, r3
 80007cc:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 80007d0:	ea4f 3101 	mov.w	r1, r1, lsl #12
 80007d4:	f000 8088 	beq.w	80008e8 <__aeabi_ddiv+0x144>
 80007d8:	ea4f 3303 	mov.w	r3, r3, lsl #12
 80007dc:	f04f 5580 	mov.w	r5, #268435456	; 0x10000000
 80007e0:	ea45 1313 	orr.w	r3, r5, r3, lsr #4
 80007e4:	ea43 6312 	orr.w	r3, r3, r2, lsr #24
 80007e8:	ea4f 2202 	mov.w	r2, r2, lsl #8
 80007ec:	ea45 1511 	orr.w	r5, r5, r1, lsr #4
 80007f0:	ea45 6510 	orr.w	r5, r5, r0, lsr #24
 80007f4:	ea4f 2600 	mov.w	r6, r0, lsl #8
 80007f8:	f00e 4100 	and.w	r1, lr, #2147483648	; 0x80000000
 80007fc:	429d      	cmp	r5, r3
 80007fe:	bf08      	it	eq
 8000800:	4296      	cmpeq	r6, r2
 8000802:	f144 04fd 	adc.w	r4, r4, #253	; 0xfd
 8000806:	f504 7440 	add.w	r4, r4, #768	; 0x300
 800080a:	d202      	bcs.n	8000812 <__aeabi_ddiv+0x6e>
 800080c:	085b      	lsrs	r3, r3, #1
 800080e:	ea4f 0232 	mov.w	r2, r2, rrx
 8000812:	1ab6      	subs	r6, r6, r2
 8000814:	eb65 0503 	sbc.w	r5, r5, r3
 8000818:	085b      	lsrs	r3, r3, #1
 800081a:	ea4f 0232 	mov.w	r2, r2, rrx
 800081e:	f44f 1080 	mov.w	r0, #1048576	; 0x100000
 8000822:	f44f 2c00 	mov.w	ip, #524288	; 0x80000
 8000826:	ebb6 0e02 	subs.w	lr, r6, r2
 800082a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800082e:	bf22      	ittt	cs
 8000830:	1ab6      	subcs	r6, r6, r2
 8000832:	4675      	movcs	r5, lr
 8000834:	ea40 000c 	orrcs.w	r0, r0, ip
 8000838:	085b      	lsrs	r3, r3, #1
 800083a:	ea4f 0232 	mov.w	r2, r2, rrx
 800083e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000842:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000846:	bf22      	ittt	cs
 8000848:	1ab6      	subcs	r6, r6, r2
 800084a:	4675      	movcs	r5, lr
 800084c:	ea40 005c 	orrcs.w	r0, r0, ip, lsr #1
 8000850:	085b      	lsrs	r3, r3, #1
 8000852:	ea4f 0232 	mov.w	r2, r2, rrx
 8000856:	ebb6 0e02 	subs.w	lr, r6, r2
 800085a:	eb75 0e03 	sbcs.w	lr, r5, r3
 800085e:	bf22      	ittt	cs
 8000860:	1ab6      	subcs	r6, r6, r2
 8000862:	4675      	movcs	r5, lr
 8000864:	ea40 009c 	orrcs.w	r0, r0, ip, lsr #2
 8000868:	085b      	lsrs	r3, r3, #1
 800086a:	ea4f 0232 	mov.w	r2, r2, rrx
 800086e:	ebb6 0e02 	subs.w	lr, r6, r2
 8000872:	eb75 0e03 	sbcs.w	lr, r5, r3
 8000876:	bf22      	ittt	cs
 8000878:	1ab6      	subcs	r6, r6, r2
 800087a:	4675      	movcs	r5, lr
 800087c:	ea40 00dc 	orrcs.w	r0, r0, ip, lsr #3
 8000880:	ea55 0e06 	orrs.w	lr, r5, r6
 8000884:	d018      	beq.n	80008b8 <__aeabi_ddiv+0x114>
 8000886:	ea4f 1505 	mov.w	r5, r5, lsl #4
 800088a:	ea45 7516 	orr.w	r5, r5, r6, lsr #28
 800088e:	ea4f 1606 	mov.w	r6, r6, lsl #4
 8000892:	ea4f 03c3 	mov.w	r3, r3, lsl #3
 8000896:	ea43 7352 	orr.w	r3, r3, r2, lsr #29
 800089a:	ea4f 02c2 	mov.w	r2, r2, lsl #3
 800089e:	ea5f 1c1c 	movs.w	ip, ip, lsr #4
 80008a2:	d1c0      	bne.n	8000826 <__aeabi_ddiv+0x82>
 80008a4:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008a8:	d10b      	bne.n	80008c2 <__aeabi_ddiv+0x11e>
 80008aa:	ea41 0100 	orr.w	r1, r1, r0
 80008ae:	f04f 0000 	mov.w	r0, #0
 80008b2:	f04f 4c00 	mov.w	ip, #2147483648	; 0x80000000
 80008b6:	e7b6      	b.n	8000826 <__aeabi_ddiv+0x82>
 80008b8:	f411 1f80 	tst.w	r1, #1048576	; 0x100000
 80008bc:	bf04      	itt	eq
 80008be:	4301      	orreq	r1, r0
 80008c0:	2000      	moveq	r0, #0
 80008c2:	f1b4 0cfd 	subs.w	ip, r4, #253	; 0xfd
 80008c6:	bf88      	it	hi
 80008c8:	f5bc 6fe0 	cmphi.w	ip, #1792	; 0x700
 80008cc:	f63f aeaf 	bhi.w	800062e <__aeabi_dmul+0xde>
 80008d0:	ebb5 0c03 	subs.w	ip, r5, r3
 80008d4:	bf04      	itt	eq
 80008d6:	ebb6 0c02 	subseq.w	ip, r6, r2
 80008da:	ea5f 0c50 	movseq.w	ip, r0, lsr #1
 80008de:	f150 0000 	adcs.w	r0, r0, #0
 80008e2:	eb41 5104 	adc.w	r1, r1, r4, lsl #20
 80008e6:	bd70      	pop	{r4, r5, r6, pc}
 80008e8:	f00e 4e00 	and.w	lr, lr, #2147483648	; 0x80000000
 80008ec:	ea4e 3111 	orr.w	r1, lr, r1, lsr #12
 80008f0:	eb14 045c 	adds.w	r4, r4, ip, lsr #1
 80008f4:	bfc2      	ittt	gt
 80008f6:	ebd4 050c 	rsbsgt	r5, r4, ip
 80008fa:	ea41 5104 	orrgt.w	r1, r1, r4, lsl #20
 80008fe:	bd70      	popgt	{r4, r5, r6, pc}
 8000900:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000904:	f04f 0e00 	mov.w	lr, #0
 8000908:	3c01      	subs	r4, #1
 800090a:	e690      	b.n	800062e <__aeabi_dmul+0xde>
 800090c:	ea45 0e06 	orr.w	lr, r5, r6
 8000910:	e68d      	b.n	800062e <__aeabi_dmul+0xde>
 8000912:	ea0c 5513 	and.w	r5, ip, r3, lsr #20
 8000916:	ea94 0f0c 	teq	r4, ip
 800091a:	bf08      	it	eq
 800091c:	ea95 0f0c 	teqeq	r5, ip
 8000920:	f43f af3b 	beq.w	800079a <__aeabi_dmul+0x24a>
 8000924:	ea94 0f0c 	teq	r4, ip
 8000928:	d10a      	bne.n	8000940 <__aeabi_ddiv+0x19c>
 800092a:	ea50 3401 	orrs.w	r4, r0, r1, lsl #12
 800092e:	f47f af34 	bne.w	800079a <__aeabi_dmul+0x24a>
 8000932:	ea95 0f0c 	teq	r5, ip
 8000936:	f47f af25 	bne.w	8000784 <__aeabi_dmul+0x234>
 800093a:	4610      	mov	r0, r2
 800093c:	4619      	mov	r1, r3
 800093e:	e72c      	b.n	800079a <__aeabi_dmul+0x24a>
 8000940:	ea95 0f0c 	teq	r5, ip
 8000944:	d106      	bne.n	8000954 <__aeabi_ddiv+0x1b0>
 8000946:	ea52 3503 	orrs.w	r5, r2, r3, lsl #12
 800094a:	f43f aefd 	beq.w	8000748 <__aeabi_dmul+0x1f8>
 800094e:	4610      	mov	r0, r2
 8000950:	4619      	mov	r1, r3
 8000952:	e722      	b.n	800079a <__aeabi_dmul+0x24a>
 8000954:	ea50 0641 	orrs.w	r6, r0, r1, lsl #1
 8000958:	bf18      	it	ne
 800095a:	ea52 0643 	orrsne.w	r6, r2, r3, lsl #1
 800095e:	f47f aec5 	bne.w	80006ec <__aeabi_dmul+0x19c>
 8000962:	ea50 0441 	orrs.w	r4, r0, r1, lsl #1
 8000966:	f47f af0d 	bne.w	8000784 <__aeabi_dmul+0x234>
 800096a:	ea52 0543 	orrs.w	r5, r2, r3, lsl #1
 800096e:	f47f aeeb 	bne.w	8000748 <__aeabi_dmul+0x1f8>
 8000972:	e712      	b.n	800079a <__aeabi_dmul+0x24a>

08000974 <__gedf2>:
 8000974:	f04f 3cff 	mov.w	ip, #4294967295
 8000978:	e006      	b.n	8000988 <__cmpdf2+0x4>
 800097a:	bf00      	nop

0800097c <__ledf2>:
 800097c:	f04f 0c01 	mov.w	ip, #1
 8000980:	e002      	b.n	8000988 <__cmpdf2+0x4>
 8000982:	bf00      	nop

08000984 <__cmpdf2>:
 8000984:	f04f 0c01 	mov.w	ip, #1
 8000988:	f84d cd04 	str.w	ip, [sp, #-4]!
 800098c:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000990:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000994:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000998:	bf18      	it	ne
 800099a:	ea7f 5c6c 	mvnsne.w	ip, ip, asr #21
 800099e:	d01b      	beq.n	80009d8 <__cmpdf2+0x54>
 80009a0:	b001      	add	sp, #4
 80009a2:	ea50 0c41 	orrs.w	ip, r0, r1, lsl #1
 80009a6:	bf0c      	ite	eq
 80009a8:	ea52 0c43 	orrseq.w	ip, r2, r3, lsl #1
 80009ac:	ea91 0f03 	teqne	r1, r3
 80009b0:	bf02      	ittt	eq
 80009b2:	ea90 0f02 	teqeq	r0, r2
 80009b6:	2000      	moveq	r0, #0
 80009b8:	4770      	bxeq	lr
 80009ba:	f110 0f00 	cmn.w	r0, #0
 80009be:	ea91 0f03 	teq	r1, r3
 80009c2:	bf58      	it	pl
 80009c4:	4299      	cmppl	r1, r3
 80009c6:	bf08      	it	eq
 80009c8:	4290      	cmpeq	r0, r2
 80009ca:	bf2c      	ite	cs
 80009cc:	17d8      	asrcs	r0, r3, #31
 80009ce:	ea6f 70e3 	mvncc.w	r0, r3, asr #31
 80009d2:	f040 0001 	orr.w	r0, r0, #1
 80009d6:	4770      	bx	lr
 80009d8:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 80009dc:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009e0:	d102      	bne.n	80009e8 <__cmpdf2+0x64>
 80009e2:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 80009e6:	d107      	bne.n	80009f8 <__cmpdf2+0x74>
 80009e8:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 80009ec:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 80009f0:	d1d6      	bne.n	80009a0 <__cmpdf2+0x1c>
 80009f2:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 80009f6:	d0d3      	beq.n	80009a0 <__cmpdf2+0x1c>
 80009f8:	f85d 0b04 	ldr.w	r0, [sp], #4
 80009fc:	4770      	bx	lr
 80009fe:	bf00      	nop

08000a00 <__aeabi_cdrcmple>:
 8000a00:	4684      	mov	ip, r0
 8000a02:	4610      	mov	r0, r2
 8000a04:	4662      	mov	r2, ip
 8000a06:	468c      	mov	ip, r1
 8000a08:	4619      	mov	r1, r3
 8000a0a:	4663      	mov	r3, ip
 8000a0c:	e000      	b.n	8000a10 <__aeabi_cdcmpeq>
 8000a0e:	bf00      	nop

08000a10 <__aeabi_cdcmpeq>:
 8000a10:	b501      	push	{r0, lr}
 8000a12:	f7ff ffb7 	bl	8000984 <__cmpdf2>
 8000a16:	2800      	cmp	r0, #0
 8000a18:	bf48      	it	mi
 8000a1a:	f110 0f00 	cmnmi.w	r0, #0
 8000a1e:	bd01      	pop	{r0, pc}

08000a20 <__aeabi_dcmpeq>:
 8000a20:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a24:	f7ff fff4 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a28:	bf0c      	ite	eq
 8000a2a:	2001      	moveq	r0, #1
 8000a2c:	2000      	movne	r0, #0
 8000a2e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a32:	bf00      	nop

08000a34 <__aeabi_dcmplt>:
 8000a34:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a38:	f7ff ffea 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a3c:	bf34      	ite	cc
 8000a3e:	2001      	movcc	r0, #1
 8000a40:	2000      	movcs	r0, #0
 8000a42:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a46:	bf00      	nop

08000a48 <__aeabi_dcmple>:
 8000a48:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a4c:	f7ff ffe0 	bl	8000a10 <__aeabi_cdcmpeq>
 8000a50:	bf94      	ite	ls
 8000a52:	2001      	movls	r0, #1
 8000a54:	2000      	movhi	r0, #0
 8000a56:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a5a:	bf00      	nop

08000a5c <__aeabi_dcmpge>:
 8000a5c:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a60:	f7ff ffce 	bl	8000a00 <__aeabi_cdrcmple>
 8000a64:	bf94      	ite	ls
 8000a66:	2001      	movls	r0, #1
 8000a68:	2000      	movhi	r0, #0
 8000a6a:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a6e:	bf00      	nop

08000a70 <__aeabi_dcmpgt>:
 8000a70:	f84d ed08 	str.w	lr, [sp, #-8]!
 8000a74:	f7ff ffc4 	bl	8000a00 <__aeabi_cdrcmple>
 8000a78:	bf34      	ite	cc
 8000a7a:	2001      	movcc	r0, #1
 8000a7c:	2000      	movcs	r0, #0
 8000a7e:	f85d fb08 	ldr.w	pc, [sp], #8
 8000a82:	bf00      	nop

08000a84 <__aeabi_dcmpun>:
 8000a84:	ea4f 0c41 	mov.w	ip, r1, lsl #1
 8000a88:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a8c:	d102      	bne.n	8000a94 <__aeabi_dcmpun+0x10>
 8000a8e:	ea50 3c01 	orrs.w	ip, r0, r1, lsl #12
 8000a92:	d10a      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000a94:	ea4f 0c43 	mov.w	ip, r3, lsl #1
 8000a98:	ea7f 5c6c 	mvns.w	ip, ip, asr #21
 8000a9c:	d102      	bne.n	8000aa4 <__aeabi_dcmpun+0x20>
 8000a9e:	ea52 3c03 	orrs.w	ip, r2, r3, lsl #12
 8000aa2:	d102      	bne.n	8000aaa <__aeabi_dcmpun+0x26>
 8000aa4:	f04f 0000 	mov.w	r0, #0
 8000aa8:	4770      	bx	lr
 8000aaa:	f04f 0001 	mov.w	r0, #1
 8000aae:	4770      	bx	lr

08000ab0 <__aeabi_d2f>:
 8000ab0:	ea4f 0241 	mov.w	r2, r1, lsl #1
 8000ab4:	f1b2 43e0 	subs.w	r3, r2, #1879048192	; 0x70000000
 8000ab8:	bf24      	itt	cs
 8000aba:	f5b3 1c00 	subscs.w	ip, r3, #2097152	; 0x200000
 8000abe:	f1dc 5cfe 	rsbscs	ip, ip, #532676608	; 0x1fc00000
 8000ac2:	d90d      	bls.n	8000ae0 <__aeabi_d2f+0x30>
 8000ac4:	f001 4c00 	and.w	ip, r1, #2147483648	; 0x80000000
 8000ac8:	ea4f 02c0 	mov.w	r2, r0, lsl #3
 8000acc:	ea4c 7050 	orr.w	r0, ip, r0, lsr #29
 8000ad0:	f1b2 4f00 	cmp.w	r2, #2147483648	; 0x80000000
 8000ad4:	eb40 0083 	adc.w	r0, r0, r3, lsl #2
 8000ad8:	bf08      	it	eq
 8000ada:	f020 0001 	biceq.w	r0, r0, #1
 8000ade:	4770      	bx	lr
 8000ae0:	f011 4f80 	tst.w	r1, #1073741824	; 0x40000000
 8000ae4:	d121      	bne.n	8000b2a <__aeabi_d2f+0x7a>
 8000ae6:	f113 7238 	adds.w	r2, r3, #48234496	; 0x2e00000
 8000aea:	bfbc      	itt	lt
 8000aec:	f001 4000 	andlt.w	r0, r1, #2147483648	; 0x80000000
 8000af0:	4770      	bxlt	lr
 8000af2:	f441 1180 	orr.w	r1, r1, #1048576	; 0x100000
 8000af6:	ea4f 5252 	mov.w	r2, r2, lsr #21
 8000afa:	f1c2 0218 	rsb	r2, r2, #24
 8000afe:	f1c2 0c20 	rsb	ip, r2, #32
 8000b02:	fa10 f30c 	lsls.w	r3, r0, ip
 8000b06:	fa20 f002 	lsr.w	r0, r0, r2
 8000b0a:	bf18      	it	ne
 8000b0c:	f040 0001 	orrne.w	r0, r0, #1
 8000b10:	ea4f 23c1 	mov.w	r3, r1, lsl #11
 8000b14:	ea4f 23d3 	mov.w	r3, r3, lsr #11
 8000b18:	fa03 fc0c 	lsl.w	ip, r3, ip
 8000b1c:	ea40 000c 	orr.w	r0, r0, ip
 8000b20:	fa23 f302 	lsr.w	r3, r3, r2
 8000b24:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8000b28:	e7cc      	b.n	8000ac4 <__aeabi_d2f+0x14>
 8000b2a:	ea7f 5362 	mvns.w	r3, r2, asr #21
 8000b2e:	d107      	bne.n	8000b40 <__aeabi_d2f+0x90>
 8000b30:	ea50 3301 	orrs.w	r3, r0, r1, lsl #12
 8000b34:	bf1e      	ittt	ne
 8000b36:	f04f 40fe 	movne.w	r0, #2130706432	; 0x7f000000
 8000b3a:	f440 0040 	orrne.w	r0, r0, #12582912	; 0xc00000
 8000b3e:	4770      	bxne	lr
 8000b40:	f001 4000 	and.w	r0, r1, #2147483648	; 0x80000000
 8000b44:	f040 40fe 	orr.w	r0, r0, #2130706432	; 0x7f000000
 8000b48:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b4c:	4770      	bx	lr
 8000b4e:	bf00      	nop

08000b50 <__aeabi_frsub>:
 8000b50:	f080 4000 	eor.w	r0, r0, #2147483648	; 0x80000000
 8000b54:	e002      	b.n	8000b5c <__addsf3>
 8000b56:	bf00      	nop

08000b58 <__aeabi_fsub>:
 8000b58:	f081 4100 	eor.w	r1, r1, #2147483648	; 0x80000000

08000b5c <__addsf3>:
 8000b5c:	0042      	lsls	r2, r0, #1
 8000b5e:	bf1f      	itttt	ne
 8000b60:	ea5f 0341 	movsne.w	r3, r1, lsl #1
 8000b64:	ea92 0f03 	teqne	r2, r3
 8000b68:	ea7f 6c22 	mvnsne.w	ip, r2, asr #24
 8000b6c:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000b70:	d06a      	beq.n	8000c48 <__addsf3+0xec>
 8000b72:	ea4f 6212 	mov.w	r2, r2, lsr #24
 8000b76:	ebd2 6313 	rsbs	r3, r2, r3, lsr #24
 8000b7a:	bfc1      	itttt	gt
 8000b7c:	18d2      	addgt	r2, r2, r3
 8000b7e:	4041      	eorgt	r1, r0
 8000b80:	4048      	eorgt	r0, r1
 8000b82:	4041      	eorgt	r1, r0
 8000b84:	bfb8      	it	lt
 8000b86:	425b      	neglt	r3, r3
 8000b88:	2b19      	cmp	r3, #25
 8000b8a:	bf88      	it	hi
 8000b8c:	4770      	bxhi	lr
 8000b8e:	f010 4f00 	tst.w	r0, #2147483648	; 0x80000000
 8000b92:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000b96:	f020 407f 	bic.w	r0, r0, #4278190080	; 0xff000000
 8000b9a:	bf18      	it	ne
 8000b9c:	4240      	negne	r0, r0
 8000b9e:	f011 4f00 	tst.w	r1, #2147483648	; 0x80000000
 8000ba2:	f441 0100 	orr.w	r1, r1, #8388608	; 0x800000
 8000ba6:	f021 417f 	bic.w	r1, r1, #4278190080	; 0xff000000
 8000baa:	bf18      	it	ne
 8000bac:	4249      	negne	r1, r1
 8000bae:	ea92 0f03 	teq	r2, r3
 8000bb2:	d03f      	beq.n	8000c34 <__addsf3+0xd8>
 8000bb4:	f1a2 0201 	sub.w	r2, r2, #1
 8000bb8:	fa41 fc03 	asr.w	ip, r1, r3
 8000bbc:	eb10 000c 	adds.w	r0, r0, ip
 8000bc0:	f1c3 0320 	rsb	r3, r3, #32
 8000bc4:	fa01 f103 	lsl.w	r1, r1, r3
 8000bc8:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000bcc:	d502      	bpl.n	8000bd4 <__addsf3+0x78>
 8000bce:	4249      	negs	r1, r1
 8000bd0:	eb60 0040 	sbc.w	r0, r0, r0, lsl #1
 8000bd4:	f5b0 0f00 	cmp.w	r0, #8388608	; 0x800000
 8000bd8:	d313      	bcc.n	8000c02 <__addsf3+0xa6>
 8000bda:	f1b0 7f80 	cmp.w	r0, #16777216	; 0x1000000
 8000bde:	d306      	bcc.n	8000bee <__addsf3+0x92>
 8000be0:	0840      	lsrs	r0, r0, #1
 8000be2:	ea4f 0131 	mov.w	r1, r1, rrx
 8000be6:	f102 0201 	add.w	r2, r2, #1
 8000bea:	2afe      	cmp	r2, #254	; 0xfe
 8000bec:	d251      	bcs.n	8000c92 <__addsf3+0x136>
 8000bee:	f1b1 4f00 	cmp.w	r1, #2147483648	; 0x80000000
 8000bf2:	eb40 50c2 	adc.w	r0, r0, r2, lsl #23
 8000bf6:	bf08      	it	eq
 8000bf8:	f020 0001 	biceq.w	r0, r0, #1
 8000bfc:	ea40 0003 	orr.w	r0, r0, r3
 8000c00:	4770      	bx	lr
 8000c02:	0049      	lsls	r1, r1, #1
 8000c04:	eb40 0000 	adc.w	r0, r0, r0
 8000c08:	3a01      	subs	r2, #1
 8000c0a:	bf28      	it	cs
 8000c0c:	f5b0 0f00 	cmpcs.w	r0, #8388608	; 0x800000
 8000c10:	d2ed      	bcs.n	8000bee <__addsf3+0x92>
 8000c12:	fab0 fc80 	clz	ip, r0
 8000c16:	f1ac 0c08 	sub.w	ip, ip, #8
 8000c1a:	ebb2 020c 	subs.w	r2, r2, ip
 8000c1e:	fa00 f00c 	lsl.w	r0, r0, ip
 8000c22:	bfaa      	itet	ge
 8000c24:	eb00 50c2 	addge.w	r0, r0, r2, lsl #23
 8000c28:	4252      	neglt	r2, r2
 8000c2a:	4318      	orrge	r0, r3
 8000c2c:	bfbc      	itt	lt
 8000c2e:	40d0      	lsrlt	r0, r2
 8000c30:	4318      	orrlt	r0, r3
 8000c32:	4770      	bx	lr
 8000c34:	f092 0f00 	teq	r2, #0
 8000c38:	f481 0100 	eor.w	r1, r1, #8388608	; 0x800000
 8000c3c:	bf06      	itte	eq
 8000c3e:	f480 0000 	eoreq.w	r0, r0, #8388608	; 0x800000
 8000c42:	3201      	addeq	r2, #1
 8000c44:	3b01      	subne	r3, #1
 8000c46:	e7b5      	b.n	8000bb4 <__addsf3+0x58>
 8000c48:	ea4f 0341 	mov.w	r3, r1, lsl #1
 8000c4c:	ea7f 6c22 	mvns.w	ip, r2, asr #24
 8000c50:	bf18      	it	ne
 8000c52:	ea7f 6c23 	mvnsne.w	ip, r3, asr #24
 8000c56:	d021      	beq.n	8000c9c <__addsf3+0x140>
 8000c58:	ea92 0f03 	teq	r2, r3
 8000c5c:	d004      	beq.n	8000c68 <__addsf3+0x10c>
 8000c5e:	f092 0f00 	teq	r2, #0
 8000c62:	bf08      	it	eq
 8000c64:	4608      	moveq	r0, r1
 8000c66:	4770      	bx	lr
 8000c68:	ea90 0f01 	teq	r0, r1
 8000c6c:	bf1c      	itt	ne
 8000c6e:	2000      	movne	r0, #0
 8000c70:	4770      	bxne	lr
 8000c72:	f012 4f7f 	tst.w	r2, #4278190080	; 0xff000000
 8000c76:	d104      	bne.n	8000c82 <__addsf3+0x126>
 8000c78:	0040      	lsls	r0, r0, #1
 8000c7a:	bf28      	it	cs
 8000c7c:	f040 4000 	orrcs.w	r0, r0, #2147483648	; 0x80000000
 8000c80:	4770      	bx	lr
 8000c82:	f112 7200 	adds.w	r2, r2, #33554432	; 0x2000000
 8000c86:	bf3c      	itt	cc
 8000c88:	f500 0000 	addcc.w	r0, r0, #8388608	; 0x800000
 8000c8c:	4770      	bxcc	lr
 8000c8e:	f000 4300 	and.w	r3, r0, #2147483648	; 0x80000000
 8000c92:	f043 40fe 	orr.w	r0, r3, #2130706432	; 0x7f000000
 8000c96:	f440 0000 	orr.w	r0, r0, #8388608	; 0x800000
 8000c9a:	4770      	bx	lr
 8000c9c:	ea7f 6222 	mvns.w	r2, r2, asr #24
 8000ca0:	bf16      	itet	ne
 8000ca2:	4608      	movne	r0, r1
 8000ca4:	ea7f 6323 	mvnseq.w	r3, r3, asr #24
 8000ca8:	4601      	movne	r1, r0
 8000caa:	0242      	lsls	r2, r0, #9
 8000cac:	bf06      	itte	eq
 8000cae:	ea5f 2341 	movseq.w	r3, r1, lsl #9
 8000cb2:	ea90 0f01 	teqeq	r0, r1
 8000cb6:	f440 0080 	orrne.w	r0, r0, #4194304	; 0x400000
 8000cba:	4770      	bx	lr

08000cbc <__aeabi_ui2f>:
 8000cbc:	f04f 0300 	mov.w	r3, #0
 8000cc0:	e004      	b.n	8000ccc <__aeabi_i2f+0x8>
 8000cc2:	bf00      	nop

08000cc4 <__aeabi_i2f>:
 8000cc4:	f010 4300 	ands.w	r3, r0, #2147483648	; 0x80000000
 8000cc8:	bf48      	it	mi
 8000cca:	4240      	negmi	r0, r0
 8000ccc:	ea5f 0c00 	movs.w	ip, r0
 8000cd0:	bf08      	it	eq
 8000cd2:	4770      	bxeq	lr
 8000cd4:	f043 4396 	orr.w	r3, r3, #1258291200	; 0x4b000000
 8000cd8:	4601      	mov	r1, r0
 8000cda:	f04f 0000 	mov.w	r0, #0
 8000cde:	e01c      	b.n	8000d1a <__aeabi_l2f+0x2a>

08000ce0 <__aeabi_ul2f>:
 8000ce0:	ea50 0201 	orrs.w	r2, r0, r1
 8000ce4:	bf08      	it	eq
 8000ce6:	4770      	bxeq	lr
 8000ce8:	f04f 0300 	mov.w	r3, #0
 8000cec:	e00a      	b.n	8000d04 <__aeabi_l2f+0x14>
 8000cee:	bf00      	nop

08000cf0 <__aeabi_l2f>:
 8000cf0:	ea50 0201 	orrs.w	r2, r0, r1
 8000cf4:	bf08      	it	eq
 8000cf6:	4770      	bxeq	lr
 8000cf8:	f011 4300 	ands.w	r3, r1, #2147483648	; 0x80000000
 8000cfc:	d502      	bpl.n	8000d04 <__aeabi_l2f+0x14>
 8000cfe:	4240      	negs	r0, r0
 8000d00:	eb61 0141 	sbc.w	r1, r1, r1, lsl #1
 8000d04:	ea5f 0c01 	movs.w	ip, r1
 8000d08:	bf02      	ittt	eq
 8000d0a:	4684      	moveq	ip, r0
 8000d0c:	4601      	moveq	r1, r0
 8000d0e:	2000      	moveq	r0, #0
 8000d10:	f043 43b6 	orr.w	r3, r3, #1526726656	; 0x5b000000
 8000d14:	bf08      	it	eq
 8000d16:	f1a3 5380 	subeq.w	r3, r3, #268435456	; 0x10000000
 8000d1a:	f5a3 0300 	sub.w	r3, r3, #8388608	; 0x800000
 8000d1e:	fabc f28c 	clz	r2, ip
 8000d22:	3a08      	subs	r2, #8
 8000d24:	eba3 53c2 	sub.w	r3, r3, r2, lsl #23
 8000d28:	db10      	blt.n	8000d4c <__aeabi_l2f+0x5c>
 8000d2a:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d2e:	4463      	add	r3, ip
 8000d30:	fa00 fc02 	lsl.w	ip, r0, r2
 8000d34:	f1c2 0220 	rsb	r2, r2, #32
 8000d38:	f1bc 4f00 	cmp.w	ip, #2147483648	; 0x80000000
 8000d3c:	fa20 f202 	lsr.w	r2, r0, r2
 8000d40:	eb43 0002 	adc.w	r0, r3, r2
 8000d44:	bf08      	it	eq
 8000d46:	f020 0001 	biceq.w	r0, r0, #1
 8000d4a:	4770      	bx	lr
 8000d4c:	f102 0220 	add.w	r2, r2, #32
 8000d50:	fa01 fc02 	lsl.w	ip, r1, r2
 8000d54:	f1c2 0220 	rsb	r2, r2, #32
 8000d58:	ea50 004c 	orrs.w	r0, r0, ip, lsl #1
 8000d5c:	fa21 f202 	lsr.w	r2, r1, r2
 8000d60:	eb43 0002 	adc.w	r0, r3, r2
 8000d64:	bf08      	it	eq
 8000d66:	ea20 70dc 	biceq.w	r0, r0, ip, lsr #31
 8000d6a:	4770      	bx	lr

08000d6c <__aeabi_uldivmod>:
 8000d6c:	b953      	cbnz	r3, 8000d84 <__aeabi_uldivmod+0x18>
 8000d6e:	b94a      	cbnz	r2, 8000d84 <__aeabi_uldivmod+0x18>
 8000d70:	2900      	cmp	r1, #0
 8000d72:	bf08      	it	eq
 8000d74:	2800      	cmpeq	r0, #0
 8000d76:	bf1c      	itt	ne
 8000d78:	f04f 31ff 	movne.w	r1, #4294967295
 8000d7c:	f04f 30ff 	movne.w	r0, #4294967295
 8000d80:	f000 b96e 	b.w	8001060 <__aeabi_idiv0>
 8000d84:	f1ad 0c08 	sub.w	ip, sp, #8
 8000d88:	e96d ce04 	strd	ip, lr, [sp, #-16]!
 8000d8c:	f000 f806 	bl	8000d9c <__udivmoddi4>
 8000d90:	f8dd e004 	ldr.w	lr, [sp, #4]
 8000d94:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 8000d98:	b004      	add	sp, #16
 8000d9a:	4770      	bx	lr

08000d9c <__udivmoddi4>:
 8000d9c:	e92d 47f0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, lr}
 8000da0:	9d08      	ldr	r5, [sp, #32]
 8000da2:	4604      	mov	r4, r0
 8000da4:	468c      	mov	ip, r1
 8000da6:	2b00      	cmp	r3, #0
 8000da8:	f040 8083 	bne.w	8000eb2 <__udivmoddi4+0x116>
 8000dac:	428a      	cmp	r2, r1
 8000dae:	4617      	mov	r7, r2
 8000db0:	d947      	bls.n	8000e42 <__udivmoddi4+0xa6>
 8000db2:	fab2 f282 	clz	r2, r2
 8000db6:	b142      	cbz	r2, 8000dca <__udivmoddi4+0x2e>
 8000db8:	f1c2 0020 	rsb	r0, r2, #32
 8000dbc:	fa24 f000 	lsr.w	r0, r4, r0
 8000dc0:	4091      	lsls	r1, r2
 8000dc2:	4097      	lsls	r7, r2
 8000dc4:	ea40 0c01 	orr.w	ip, r0, r1
 8000dc8:	4094      	lsls	r4, r2
 8000dca:	ea4f 4817 	mov.w	r8, r7, lsr #16
 8000dce:	0c23      	lsrs	r3, r4, #16
 8000dd0:	fbbc f6f8 	udiv	r6, ip, r8
 8000dd4:	fa1f fe87 	uxth.w	lr, r7
 8000dd8:	fb08 c116 	mls	r1, r8, r6, ip
 8000ddc:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000de0:	fb06 f10e 	mul.w	r1, r6, lr
 8000de4:	4299      	cmp	r1, r3
 8000de6:	d909      	bls.n	8000dfc <__udivmoddi4+0x60>
 8000de8:	18fb      	adds	r3, r7, r3
 8000dea:	f106 30ff 	add.w	r0, r6, #4294967295
 8000dee:	f080 8119 	bcs.w	8001024 <__udivmoddi4+0x288>
 8000df2:	4299      	cmp	r1, r3
 8000df4:	f240 8116 	bls.w	8001024 <__udivmoddi4+0x288>
 8000df8:	3e02      	subs	r6, #2
 8000dfa:	443b      	add	r3, r7
 8000dfc:	1a5b      	subs	r3, r3, r1
 8000dfe:	b2a4      	uxth	r4, r4
 8000e00:	fbb3 f0f8 	udiv	r0, r3, r8
 8000e04:	fb08 3310 	mls	r3, r8, r0, r3
 8000e08:	ea44 4403 	orr.w	r4, r4, r3, lsl #16
 8000e0c:	fb00 fe0e 	mul.w	lr, r0, lr
 8000e10:	45a6      	cmp	lr, r4
 8000e12:	d909      	bls.n	8000e28 <__udivmoddi4+0x8c>
 8000e14:	193c      	adds	r4, r7, r4
 8000e16:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e1a:	f080 8105 	bcs.w	8001028 <__udivmoddi4+0x28c>
 8000e1e:	45a6      	cmp	lr, r4
 8000e20:	f240 8102 	bls.w	8001028 <__udivmoddi4+0x28c>
 8000e24:	3802      	subs	r0, #2
 8000e26:	443c      	add	r4, r7
 8000e28:	ea40 4006 	orr.w	r0, r0, r6, lsl #16
 8000e2c:	eba4 040e 	sub.w	r4, r4, lr
 8000e30:	2600      	movs	r6, #0
 8000e32:	b11d      	cbz	r5, 8000e3c <__udivmoddi4+0xa0>
 8000e34:	40d4      	lsrs	r4, r2
 8000e36:	2300      	movs	r3, #0
 8000e38:	e9c5 4300 	strd	r4, r3, [r5]
 8000e3c:	4631      	mov	r1, r6
 8000e3e:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000e42:	b902      	cbnz	r2, 8000e46 <__udivmoddi4+0xaa>
 8000e44:	deff      	udf	#255	; 0xff
 8000e46:	fab2 f282 	clz	r2, r2
 8000e4a:	2a00      	cmp	r2, #0
 8000e4c:	d150      	bne.n	8000ef0 <__udivmoddi4+0x154>
 8000e4e:	1bcb      	subs	r3, r1, r7
 8000e50:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000e54:	fa1f f887 	uxth.w	r8, r7
 8000e58:	2601      	movs	r6, #1
 8000e5a:	fbb3 fcfe 	udiv	ip, r3, lr
 8000e5e:	0c21      	lsrs	r1, r4, #16
 8000e60:	fb0e 331c 	mls	r3, lr, ip, r3
 8000e64:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000e68:	fb08 f30c 	mul.w	r3, r8, ip
 8000e6c:	428b      	cmp	r3, r1
 8000e6e:	d907      	bls.n	8000e80 <__udivmoddi4+0xe4>
 8000e70:	1879      	adds	r1, r7, r1
 8000e72:	f10c 30ff 	add.w	r0, ip, #4294967295
 8000e76:	d202      	bcs.n	8000e7e <__udivmoddi4+0xe2>
 8000e78:	428b      	cmp	r3, r1
 8000e7a:	f200 80e9 	bhi.w	8001050 <__udivmoddi4+0x2b4>
 8000e7e:	4684      	mov	ip, r0
 8000e80:	1ac9      	subs	r1, r1, r3
 8000e82:	b2a3      	uxth	r3, r4
 8000e84:	fbb1 f0fe 	udiv	r0, r1, lr
 8000e88:	fb0e 1110 	mls	r1, lr, r0, r1
 8000e8c:	ea43 4401 	orr.w	r4, r3, r1, lsl #16
 8000e90:	fb08 f800 	mul.w	r8, r8, r0
 8000e94:	45a0      	cmp	r8, r4
 8000e96:	d907      	bls.n	8000ea8 <__udivmoddi4+0x10c>
 8000e98:	193c      	adds	r4, r7, r4
 8000e9a:	f100 33ff 	add.w	r3, r0, #4294967295
 8000e9e:	d202      	bcs.n	8000ea6 <__udivmoddi4+0x10a>
 8000ea0:	45a0      	cmp	r8, r4
 8000ea2:	f200 80d9 	bhi.w	8001058 <__udivmoddi4+0x2bc>
 8000ea6:	4618      	mov	r0, r3
 8000ea8:	eba4 0408 	sub.w	r4, r4, r8
 8000eac:	ea40 400c 	orr.w	r0, r0, ip, lsl #16
 8000eb0:	e7bf      	b.n	8000e32 <__udivmoddi4+0x96>
 8000eb2:	428b      	cmp	r3, r1
 8000eb4:	d909      	bls.n	8000eca <__udivmoddi4+0x12e>
 8000eb6:	2d00      	cmp	r5, #0
 8000eb8:	f000 80b1 	beq.w	800101e <__udivmoddi4+0x282>
 8000ebc:	2600      	movs	r6, #0
 8000ebe:	e9c5 0100 	strd	r0, r1, [r5]
 8000ec2:	4630      	mov	r0, r6
 8000ec4:	4631      	mov	r1, r6
 8000ec6:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 8000eca:	fab3 f683 	clz	r6, r3
 8000ece:	2e00      	cmp	r6, #0
 8000ed0:	d14a      	bne.n	8000f68 <__udivmoddi4+0x1cc>
 8000ed2:	428b      	cmp	r3, r1
 8000ed4:	d302      	bcc.n	8000edc <__udivmoddi4+0x140>
 8000ed6:	4282      	cmp	r2, r0
 8000ed8:	f200 80b8 	bhi.w	800104c <__udivmoddi4+0x2b0>
 8000edc:	1a84      	subs	r4, r0, r2
 8000ede:	eb61 0103 	sbc.w	r1, r1, r3
 8000ee2:	2001      	movs	r0, #1
 8000ee4:	468c      	mov	ip, r1
 8000ee6:	2d00      	cmp	r5, #0
 8000ee8:	d0a8      	beq.n	8000e3c <__udivmoddi4+0xa0>
 8000eea:	e9c5 4c00 	strd	r4, ip, [r5]
 8000eee:	e7a5      	b.n	8000e3c <__udivmoddi4+0xa0>
 8000ef0:	f1c2 0320 	rsb	r3, r2, #32
 8000ef4:	fa20 f603 	lsr.w	r6, r0, r3
 8000ef8:	4097      	lsls	r7, r2
 8000efa:	fa01 f002 	lsl.w	r0, r1, r2
 8000efe:	ea4f 4e17 	mov.w	lr, r7, lsr #16
 8000f02:	40d9      	lsrs	r1, r3
 8000f04:	4330      	orrs	r0, r6
 8000f06:	0c03      	lsrs	r3, r0, #16
 8000f08:	fbb1 f6fe 	udiv	r6, r1, lr
 8000f0c:	fa1f f887 	uxth.w	r8, r7
 8000f10:	fb0e 1116 	mls	r1, lr, r6, r1
 8000f14:	ea43 4301 	orr.w	r3, r3, r1, lsl #16
 8000f18:	fb06 f108 	mul.w	r1, r6, r8
 8000f1c:	4299      	cmp	r1, r3
 8000f1e:	fa04 f402 	lsl.w	r4, r4, r2
 8000f22:	d909      	bls.n	8000f38 <__udivmoddi4+0x19c>
 8000f24:	18fb      	adds	r3, r7, r3
 8000f26:	f106 3cff 	add.w	ip, r6, #4294967295
 8000f2a:	f080 808d 	bcs.w	8001048 <__udivmoddi4+0x2ac>
 8000f2e:	4299      	cmp	r1, r3
 8000f30:	f240 808a 	bls.w	8001048 <__udivmoddi4+0x2ac>
 8000f34:	3e02      	subs	r6, #2
 8000f36:	443b      	add	r3, r7
 8000f38:	1a5b      	subs	r3, r3, r1
 8000f3a:	b281      	uxth	r1, r0
 8000f3c:	fbb3 f0fe 	udiv	r0, r3, lr
 8000f40:	fb0e 3310 	mls	r3, lr, r0, r3
 8000f44:	ea41 4103 	orr.w	r1, r1, r3, lsl #16
 8000f48:	fb00 f308 	mul.w	r3, r0, r8
 8000f4c:	428b      	cmp	r3, r1
 8000f4e:	d907      	bls.n	8000f60 <__udivmoddi4+0x1c4>
 8000f50:	1879      	adds	r1, r7, r1
 8000f52:	f100 3cff 	add.w	ip, r0, #4294967295
 8000f56:	d273      	bcs.n	8001040 <__udivmoddi4+0x2a4>
 8000f58:	428b      	cmp	r3, r1
 8000f5a:	d971      	bls.n	8001040 <__udivmoddi4+0x2a4>
 8000f5c:	3802      	subs	r0, #2
 8000f5e:	4439      	add	r1, r7
 8000f60:	1acb      	subs	r3, r1, r3
 8000f62:	ea40 4606 	orr.w	r6, r0, r6, lsl #16
 8000f66:	e778      	b.n	8000e5a <__udivmoddi4+0xbe>
 8000f68:	f1c6 0c20 	rsb	ip, r6, #32
 8000f6c:	fa03 f406 	lsl.w	r4, r3, r6
 8000f70:	fa22 f30c 	lsr.w	r3, r2, ip
 8000f74:	431c      	orrs	r4, r3
 8000f76:	fa20 f70c 	lsr.w	r7, r0, ip
 8000f7a:	fa01 f306 	lsl.w	r3, r1, r6
 8000f7e:	ea4f 4e14 	mov.w	lr, r4, lsr #16
 8000f82:	fa21 f10c 	lsr.w	r1, r1, ip
 8000f86:	431f      	orrs	r7, r3
 8000f88:	0c3b      	lsrs	r3, r7, #16
 8000f8a:	fbb1 f9fe 	udiv	r9, r1, lr
 8000f8e:	fa1f f884 	uxth.w	r8, r4
 8000f92:	fb0e 1119 	mls	r1, lr, r9, r1
 8000f96:	ea43 4101 	orr.w	r1, r3, r1, lsl #16
 8000f9a:	fb09 fa08 	mul.w	sl, r9, r8
 8000f9e:	458a      	cmp	sl, r1
 8000fa0:	fa02 f206 	lsl.w	r2, r2, r6
 8000fa4:	fa00 f306 	lsl.w	r3, r0, r6
 8000fa8:	d908      	bls.n	8000fbc <__udivmoddi4+0x220>
 8000faa:	1861      	adds	r1, r4, r1
 8000fac:	f109 30ff 	add.w	r0, r9, #4294967295
 8000fb0:	d248      	bcs.n	8001044 <__udivmoddi4+0x2a8>
 8000fb2:	458a      	cmp	sl, r1
 8000fb4:	d946      	bls.n	8001044 <__udivmoddi4+0x2a8>
 8000fb6:	f1a9 0902 	sub.w	r9, r9, #2
 8000fba:	4421      	add	r1, r4
 8000fbc:	eba1 010a 	sub.w	r1, r1, sl
 8000fc0:	b2bf      	uxth	r7, r7
 8000fc2:	fbb1 f0fe 	udiv	r0, r1, lr
 8000fc6:	fb0e 1110 	mls	r1, lr, r0, r1
 8000fca:	ea47 4701 	orr.w	r7, r7, r1, lsl #16
 8000fce:	fb00 f808 	mul.w	r8, r0, r8
 8000fd2:	45b8      	cmp	r8, r7
 8000fd4:	d907      	bls.n	8000fe6 <__udivmoddi4+0x24a>
 8000fd6:	19e7      	adds	r7, r4, r7
 8000fd8:	f100 31ff 	add.w	r1, r0, #4294967295
 8000fdc:	d22e      	bcs.n	800103c <__udivmoddi4+0x2a0>
 8000fde:	45b8      	cmp	r8, r7
 8000fe0:	d92c      	bls.n	800103c <__udivmoddi4+0x2a0>
 8000fe2:	3802      	subs	r0, #2
 8000fe4:	4427      	add	r7, r4
 8000fe6:	ea40 4009 	orr.w	r0, r0, r9, lsl #16
 8000fea:	eba7 0708 	sub.w	r7, r7, r8
 8000fee:	fba0 8902 	umull	r8, r9, r0, r2
 8000ff2:	454f      	cmp	r7, r9
 8000ff4:	46c6      	mov	lr, r8
 8000ff6:	4649      	mov	r1, r9
 8000ff8:	d31a      	bcc.n	8001030 <__udivmoddi4+0x294>
 8000ffa:	d017      	beq.n	800102c <__udivmoddi4+0x290>
 8000ffc:	b15d      	cbz	r5, 8001016 <__udivmoddi4+0x27a>
 8000ffe:	ebb3 020e 	subs.w	r2, r3, lr
 8001002:	eb67 0701 	sbc.w	r7, r7, r1
 8001006:	fa07 fc0c 	lsl.w	ip, r7, ip
 800100a:	40f2      	lsrs	r2, r6
 800100c:	ea4c 0202 	orr.w	r2, ip, r2
 8001010:	40f7      	lsrs	r7, r6
 8001012:	e9c5 2700 	strd	r2, r7, [r5]
 8001016:	2600      	movs	r6, #0
 8001018:	4631      	mov	r1, r6
 800101a:	e8bd 87f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, pc}
 800101e:	462e      	mov	r6, r5
 8001020:	4628      	mov	r0, r5
 8001022:	e70b      	b.n	8000e3c <__udivmoddi4+0xa0>
 8001024:	4606      	mov	r6, r0
 8001026:	e6e9      	b.n	8000dfc <__udivmoddi4+0x60>
 8001028:	4618      	mov	r0, r3
 800102a:	e6fd      	b.n	8000e28 <__udivmoddi4+0x8c>
 800102c:	4543      	cmp	r3, r8
 800102e:	d2e5      	bcs.n	8000ffc <__udivmoddi4+0x260>
 8001030:	ebb8 0e02 	subs.w	lr, r8, r2
 8001034:	eb69 0104 	sbc.w	r1, r9, r4
 8001038:	3801      	subs	r0, #1
 800103a:	e7df      	b.n	8000ffc <__udivmoddi4+0x260>
 800103c:	4608      	mov	r0, r1
 800103e:	e7d2      	b.n	8000fe6 <__udivmoddi4+0x24a>
 8001040:	4660      	mov	r0, ip
 8001042:	e78d      	b.n	8000f60 <__udivmoddi4+0x1c4>
 8001044:	4681      	mov	r9, r0
 8001046:	e7b9      	b.n	8000fbc <__udivmoddi4+0x220>
 8001048:	4666      	mov	r6, ip
 800104a:	e775      	b.n	8000f38 <__udivmoddi4+0x19c>
 800104c:	4630      	mov	r0, r6
 800104e:	e74a      	b.n	8000ee6 <__udivmoddi4+0x14a>
 8001050:	f1ac 0c02 	sub.w	ip, ip, #2
 8001054:	4439      	add	r1, r7
 8001056:	e713      	b.n	8000e80 <__udivmoddi4+0xe4>
 8001058:	3802      	subs	r0, #2
 800105a:	443c      	add	r4, r7
 800105c:	e724      	b.n	8000ea8 <__udivmoddi4+0x10c>
 800105e:	bf00      	nop

08001060 <__aeabi_idiv0>:
 8001060:	4770      	bx	lr
 8001062:	bf00      	nop

08001064 <main>:
/**
 * @brief  The application entry point.
 * @retval int
 */
int main(void)
{
 8001064:	b5b0      	push	{r4, r5, r7, lr}
 8001066:	af00      	add	r7, sp, #0
	/* USER CODE END 1 */

	/* MCU Configuration--------------------------------------------------------*/

	/* Reset of all peripherals, Initializes the Flash interface and the Systick. */
	HAL_Init();
 8001068:	f001 fc8a 	bl	8002980 <HAL_Init>
	/* USER CODE BEGIN Init */

	/* USER CODE END Init */

	/* Configure the system clock */
	SystemClock_Config();
 800106c:	f000 f88c 	bl	8001188 <SystemClock_Config>
	/* USER CODE BEGIN SysInit */

	/* USER CODE END SysInit */

	/* Initialize all configured peripherals */
	MX_GPIO_Init();
 8001070:	f000 fa36 	bl	80014e0 <MX_GPIO_Init>
	MX_USART2_UART_Init();
 8001074:	f000 fa0a 	bl	800148c <MX_USART2_UART_Init>
	MX_TIM1_Init();
 8001078:	f000 f8ee 	bl	8001258 <MX_TIM1_Init>
	MX_TIM2_Init();
 800107c:	f000 f944 	bl	8001308 <MX_TIM2_Init>
	MX_TIM3_Init();
 8001080:	f000 f98e 	bl	80013a0 <MX_TIM3_Init>
	/* USER CODE BEGIN 2 */
	//start micros
	HAL_TIM_Base_Start_IT(&htim2);
 8001084:	4837      	ldr	r0, [pc, #220]	; (8001164 <main+0x100>)
 8001086:	f002 fca2 	bl	80039ce <HAL_TIM_Base_Start_IT>
	//Encoder start
	HAL_TIM_Encoder_Start(&htim1, TIM_CHANNEL_ALL);
 800108a:	213c      	movs	r1, #60	; 0x3c
 800108c:	4836      	ldr	r0, [pc, #216]	; (8001168 <main+0x104>)
 800108e:	f002 fdbb 	bl	8003c08 <HAL_TIM_Encoder_Start>
	//PWM start AIN1
	HAL_TIM_Base_Start(&htim3);
 8001092:	4836      	ldr	r0, [pc, #216]	; (800116c <main+0x108>)
 8001094:	f002 fc77 	bl	8003986 <HAL_TIM_Base_Start>
	HAL_TIM_PWM_Start(&htim3,TIM_CHANNEL_1);
 8001098:	2100      	movs	r1, #0
 800109a:	4834      	ldr	r0, [pc, #208]	; (800116c <main+0x108>)
 800109c:	f002 fcf0 	bl	8003a80 <HAL_TIM_PWM_Start>
	htim3.Instance->CCR1 = 5000;
 80010a0:	4b32      	ldr	r3, [pc, #200]	; (800116c <main+0x108>)
 80010a2:	681b      	ldr	r3, [r3, #0]
 80010a4:	f241 3288 	movw	r2, #5000	; 0x1388
 80010a8:	635a      	str	r2, [r3, #52]	; 0x34
	while (1)
	{
		/* USER CODE END WHILE */

		/* USER CODE BEGIN 3 */
		gotoSethome();
 80010aa:	f000 febb 	bl	8001e24 <gotoSethome>
		if (micros() - Timestamp >= dt){
 80010ae:	f001 fa8b 	bl	80025c8 <micros>
 80010b2:	4b2f      	ldr	r3, [pc, #188]	; (8001170 <main+0x10c>)
 80010b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010b8:	1a84      	subs	r4, r0, r2
 80010ba:	eb61 0503 	sbc.w	r5, r1, r3
 80010be:	4b2d      	ldr	r3, [pc, #180]	; (8001174 <main+0x110>)
 80010c0:	881b      	ldrh	r3, [r3, #0]
 80010c2:	b29a      	uxth	r2, r3
 80010c4:	f04f 0300 	mov.w	r3, #0
 80010c8:	429d      	cmp	r5, r3
 80010ca:	bf08      	it	eq
 80010cc:	4294      	cmpeq	r4, r2
 80010ce:	d3ec      	bcc.n	80010aa <main+0x46>
			Timestamp = micros();
 80010d0:	f001 fa7a 	bl	80025c8 <micros>
 80010d4:	4602      	mov	r2, r0
 80010d6:	460b      	mov	r3, r1
 80010d8:	4925      	ldr	r1, [pc, #148]	; (8001170 <main+0x10c>)
 80010da:	e9c1 2300 	strd	r2, r3, [r1]
			trajectory(Timestamp);
 80010de:	4b24      	ldr	r3, [pc, #144]	; (8001170 <main+0x10c>)
 80010e0:	e9d3 2300 	ldrd	r2, r3, [r3]
 80010e4:	4610      	mov	r0, r2
 80010e6:	4619      	mov	r1, r3
 80010e8:	f000 fb1e 	bl	8001728 <trajectory>
			kalman();
 80010ec:	f000 feb0 	bl	8001e50 <kalman>
			pidVelocity();
 80010f0:	f000 fdf8 	bl	8001ce4 <pidVelocity>
			if(velocity < 0){
 80010f4:	4b20      	ldr	r3, [pc, #128]	; (8001178 <main+0x114>)
 80010f6:	edd3 7a00 	vldr	s15, [r3]
 80010fa:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 80010fe:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001102:	d50c      	bpl.n	800111e <main+0xba>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, SET);
 8001104:	2201      	movs	r2, #1
 8001106:	f44f 7180 	mov.w	r1, #256	; 0x100
 800110a:	481c      	ldr	r0, [pc, #112]	; (800117c <main+0x118>)
 800110c:	f001 ff72 	bl	8002ff4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, RESET);
 8001110:	2200      	movs	r2, #0
 8001112:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001116:	4819      	ldr	r0, [pc, #100]	; (800117c <main+0x118>)
 8001118:	f001 ff6c 	bl	8002ff4 <HAL_GPIO_WritePin>
 800111c:	e013      	b.n	8001146 <main+0xe2>
			}
			else if (velocity > 0){
 800111e:	4b16      	ldr	r3, [pc, #88]	; (8001178 <main+0x114>)
 8001120:	edd3 7a00 	vldr	s15, [r3]
 8001124:	eef5 7ac0 	vcmpe.f32	s15, #0.0
 8001128:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 800112c:	dd0b      	ble.n	8001146 <main+0xe2>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_9, SET);
 800112e:	2201      	movs	r2, #1
 8001130:	f44f 7100 	mov.w	r1, #512	; 0x200
 8001134:	4811      	ldr	r0, [pc, #68]	; (800117c <main+0x118>)
 8001136:	f001 ff5d 	bl	8002ff4 <HAL_GPIO_WritePin>
				HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8, RESET);
 800113a:	2200      	movs	r2, #0
 800113c:	f44f 7180 	mov.w	r1, #256	; 0x100
 8001140:	480e      	ldr	r0, [pc, #56]	; (800117c <main+0x118>)
 8001142:	f001 ff57 	bl	8002ff4 <HAL_GPIO_WritePin>
			}
			htim3.Instance->CCR1 = abs(PWMOut);
 8001146:	4b0e      	ldr	r3, [pc, #56]	; (8001180 <main+0x11c>)
 8001148:	681b      	ldr	r3, [r3, #0]
 800114a:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 800114e:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001152:	4b06      	ldr	r3, [pc, #24]	; (800116c <main+0x108>)
 8001154:	681b      	ldr	r3, [r3, #0]
 8001156:	635a      	str	r2, [r3, #52]	; 0x34
			state[1] = state[0];
 8001158:	4b0a      	ldr	r3, [pc, #40]	; (8001184 <main+0x120>)
 800115a:	781a      	ldrb	r2, [r3, #0]
 800115c:	4b09      	ldr	r3, [pc, #36]	; (8001184 <main+0x120>)
 800115e:	705a      	strb	r2, [r3, #1]
		gotoSethome();
 8001160:	e7a3      	b.n	80010aa <main+0x46>
 8001162:	bf00      	nop
 8001164:	200001ec 	.word	0x200001ec
 8001168:	200001ac 	.word	0x200001ac
 800116c:	2000016c 	.word	0x2000016c
 8001170:	200000f8 	.word	0x200000f8
 8001174:	20000008 	.word	0x20000008
 8001178:	200000c8 	.word	0x200000c8
 800117c:	40020400 	.word	0x40020400
 8001180:	20000000 	.word	0x20000000
 8001184:	200000f0 	.word	0x200000f0

08001188 <SystemClock_Config>:
/**
 * @brief System Clock Configuration
 * @retval None
 */
void SystemClock_Config(void)
{
 8001188:	b580      	push	{r7, lr}
 800118a:	b094      	sub	sp, #80	; 0x50
 800118c:	af00      	add	r7, sp, #0
	RCC_OscInitTypeDef RCC_OscInitStruct = {0};
 800118e:	f107 0320 	add.w	r3, r7, #32
 8001192:	2230      	movs	r2, #48	; 0x30
 8001194:	2100      	movs	r1, #0
 8001196:	4618      	mov	r0, r3
 8001198:	f003 ff8a 	bl	80050b0 <memset>
	RCC_ClkInitTypeDef RCC_ClkInitStruct = {0};
 800119c:	f107 030c 	add.w	r3, r7, #12
 80011a0:	2200      	movs	r2, #0
 80011a2:	601a      	str	r2, [r3, #0]
 80011a4:	605a      	str	r2, [r3, #4]
 80011a6:	609a      	str	r2, [r3, #8]
 80011a8:	60da      	str	r2, [r3, #12]
 80011aa:	611a      	str	r2, [r3, #16]

	/** Configure the main internal regulator output voltage
	 */
	__HAL_RCC_PWR_CLK_ENABLE();
 80011ac:	2300      	movs	r3, #0
 80011ae:	60bb      	str	r3, [r7, #8]
 80011b0:	4b27      	ldr	r3, [pc, #156]	; (8001250 <SystemClock_Config+0xc8>)
 80011b2:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011b4:	4a26      	ldr	r2, [pc, #152]	; (8001250 <SystemClock_Config+0xc8>)
 80011b6:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80011ba:	6413      	str	r3, [r2, #64]	; 0x40
 80011bc:	4b24      	ldr	r3, [pc, #144]	; (8001250 <SystemClock_Config+0xc8>)
 80011be:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80011c0:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80011c4:	60bb      	str	r3, [r7, #8]
 80011c6:	68bb      	ldr	r3, [r7, #8]
	__HAL_PWR_VOLTAGESCALING_CONFIG(PWR_REGULATOR_VOLTAGE_SCALE1);
 80011c8:	2300      	movs	r3, #0
 80011ca:	607b      	str	r3, [r7, #4]
 80011cc:	4b21      	ldr	r3, [pc, #132]	; (8001254 <SystemClock_Config+0xcc>)
 80011ce:	681b      	ldr	r3, [r3, #0]
 80011d0:	4a20      	ldr	r2, [pc, #128]	; (8001254 <SystemClock_Config+0xcc>)
 80011d2:	f443 4340 	orr.w	r3, r3, #49152	; 0xc000
 80011d6:	6013      	str	r3, [r2, #0]
 80011d8:	4b1e      	ldr	r3, [pc, #120]	; (8001254 <SystemClock_Config+0xcc>)
 80011da:	681b      	ldr	r3, [r3, #0]
 80011dc:	f403 4340 	and.w	r3, r3, #49152	; 0xc000
 80011e0:	607b      	str	r3, [r7, #4]
 80011e2:	687b      	ldr	r3, [r7, #4]
	/** Initializes the RCC Oscillators according to the specified parameters
	 * in the RCC_OscInitTypeDef structure.
	 */
	RCC_OscInitStruct.OscillatorType = RCC_OSCILLATORTYPE_HSI;
 80011e4:	2302      	movs	r3, #2
 80011e6:	623b      	str	r3, [r7, #32]
	RCC_OscInitStruct.HSIState = RCC_HSI_ON;
 80011e8:	2301      	movs	r3, #1
 80011ea:	62fb      	str	r3, [r7, #44]	; 0x2c
	RCC_OscInitStruct.HSICalibrationValue = RCC_HSICALIBRATION_DEFAULT;
 80011ec:	2310      	movs	r3, #16
 80011ee:	633b      	str	r3, [r7, #48]	; 0x30
	RCC_OscInitStruct.PLL.PLLState = RCC_PLL_ON;
 80011f0:	2302      	movs	r3, #2
 80011f2:	63bb      	str	r3, [r7, #56]	; 0x38
	RCC_OscInitStruct.PLL.PLLSource = RCC_PLLSOURCE_HSI;
 80011f4:	2300      	movs	r3, #0
 80011f6:	63fb      	str	r3, [r7, #60]	; 0x3c
	RCC_OscInitStruct.PLL.PLLM = 8;
 80011f8:	2308      	movs	r3, #8
 80011fa:	643b      	str	r3, [r7, #64]	; 0x40
	RCC_OscInitStruct.PLL.PLLN = 100;
 80011fc:	2364      	movs	r3, #100	; 0x64
 80011fe:	647b      	str	r3, [r7, #68]	; 0x44
	RCC_OscInitStruct.PLL.PLLP = RCC_PLLP_DIV2;
 8001200:	2302      	movs	r3, #2
 8001202:	64bb      	str	r3, [r7, #72]	; 0x48
	RCC_OscInitStruct.PLL.PLLQ = 4;
 8001204:	2304      	movs	r3, #4
 8001206:	64fb      	str	r3, [r7, #76]	; 0x4c
	if (HAL_RCC_OscConfig(&RCC_OscInitStruct) != HAL_OK)
 8001208:	f107 0320 	add.w	r3, r7, #32
 800120c:	4618      	mov	r0, r3
 800120e:	f001 ff23 	bl	8003058 <HAL_RCC_OscConfig>
 8001212:	4603      	mov	r3, r0
 8001214:	2b00      	cmp	r3, #0
 8001216:	d001      	beq.n	800121c <SystemClock_Config+0x94>
	{
		Error_Handler();
 8001218:	f001 f9f0 	bl	80025fc <Error_Handler>
	}
	/** Initializes the CPU, AHB and APB buses clocks
	 */
	RCC_ClkInitStruct.ClockType = RCC_CLOCKTYPE_HCLK|RCC_CLOCKTYPE_SYSCLK
 800121c:	230f      	movs	r3, #15
 800121e:	60fb      	str	r3, [r7, #12]
			|RCC_CLOCKTYPE_PCLK1|RCC_CLOCKTYPE_PCLK2;
	RCC_ClkInitStruct.SYSCLKSource = RCC_SYSCLKSOURCE_PLLCLK;
 8001220:	2302      	movs	r3, #2
 8001222:	613b      	str	r3, [r7, #16]
	RCC_ClkInitStruct.AHBCLKDivider = RCC_SYSCLK_DIV1;
 8001224:	2300      	movs	r3, #0
 8001226:	617b      	str	r3, [r7, #20]
	RCC_ClkInitStruct.APB1CLKDivider = RCC_HCLK_DIV2;
 8001228:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800122c:	61bb      	str	r3, [r7, #24]
	RCC_ClkInitStruct.APB2CLKDivider = RCC_HCLK_DIV1;
 800122e:	2300      	movs	r3, #0
 8001230:	61fb      	str	r3, [r7, #28]

	if (HAL_RCC_ClockConfig(&RCC_ClkInitStruct, FLASH_LATENCY_3) != HAL_OK)
 8001232:	f107 030c 	add.w	r3, r7, #12
 8001236:	2103      	movs	r1, #3
 8001238:	4618      	mov	r0, r3
 800123a:	f002 f97d 	bl	8003538 <HAL_RCC_ClockConfig>
 800123e:	4603      	mov	r3, r0
 8001240:	2b00      	cmp	r3, #0
 8001242:	d001      	beq.n	8001248 <SystemClock_Config+0xc0>
	{
		Error_Handler();
 8001244:	f001 f9da 	bl	80025fc <Error_Handler>
	}
}
 8001248:	bf00      	nop
 800124a:	3750      	adds	r7, #80	; 0x50
 800124c:	46bd      	mov	sp, r7
 800124e:	bd80      	pop	{r7, pc}
 8001250:	40023800 	.word	0x40023800
 8001254:	40007000 	.word	0x40007000

08001258 <MX_TIM1_Init>:
 * @brief TIM1 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM1_Init(void)
{
 8001258:	b580      	push	{r7, lr}
 800125a:	b08c      	sub	sp, #48	; 0x30
 800125c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM1_Init 0 */

	/* USER CODE END TIM1_Init 0 */

	TIM_Encoder_InitTypeDef sConfig = {0};
 800125e:	f107 030c 	add.w	r3, r7, #12
 8001262:	2224      	movs	r2, #36	; 0x24
 8001264:	2100      	movs	r1, #0
 8001266:	4618      	mov	r0, r3
 8001268:	f003 ff22 	bl	80050b0 <memset>
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800126c:	1d3b      	adds	r3, r7, #4
 800126e:	2200      	movs	r2, #0
 8001270:	601a      	str	r2, [r3, #0]
 8001272:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM1_Init 1 */

	/* USER CODE END TIM1_Init 1 */
	htim1.Instance = TIM1;
 8001274:	4b22      	ldr	r3, [pc, #136]	; (8001300 <MX_TIM1_Init+0xa8>)
 8001276:	4a23      	ldr	r2, [pc, #140]	; (8001304 <MX_TIM1_Init+0xac>)
 8001278:	601a      	str	r2, [r3, #0]
	htim1.Init.Prescaler = 0;
 800127a:	4b21      	ldr	r3, [pc, #132]	; (8001300 <MX_TIM1_Init+0xa8>)
 800127c:	2200      	movs	r2, #0
 800127e:	605a      	str	r2, [r3, #4]
	htim1.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001280:	4b1f      	ldr	r3, [pc, #124]	; (8001300 <MX_TIM1_Init+0xa8>)
 8001282:	2200      	movs	r2, #0
 8001284:	609a      	str	r2, [r3, #8]
	htim1.Init.Period = 2047;
 8001286:	4b1e      	ldr	r3, [pc, #120]	; (8001300 <MX_TIM1_Init+0xa8>)
 8001288:	f240 72ff 	movw	r2, #2047	; 0x7ff
 800128c:	60da      	str	r2, [r3, #12]
	htim1.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 800128e:	4b1c      	ldr	r3, [pc, #112]	; (8001300 <MX_TIM1_Init+0xa8>)
 8001290:	2200      	movs	r2, #0
 8001292:	611a      	str	r2, [r3, #16]
	htim1.Init.RepetitionCounter = 0;
 8001294:	4b1a      	ldr	r3, [pc, #104]	; (8001300 <MX_TIM1_Init+0xa8>)
 8001296:	2200      	movs	r2, #0
 8001298:	615a      	str	r2, [r3, #20]
	htim1.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 800129a:	4b19      	ldr	r3, [pc, #100]	; (8001300 <MX_TIM1_Init+0xa8>)
 800129c:	2200      	movs	r2, #0
 800129e:	619a      	str	r2, [r3, #24]
	sConfig.EncoderMode = TIM_ENCODERMODE_TI12;
 80012a0:	2303      	movs	r3, #3
 80012a2:	60fb      	str	r3, [r7, #12]
	sConfig.IC1Polarity = TIM_ICPOLARITY_RISING;
 80012a4:	2300      	movs	r3, #0
 80012a6:	613b      	str	r3, [r7, #16]
	sConfig.IC1Selection = TIM_ICSELECTION_DIRECTTI;
 80012a8:	2301      	movs	r3, #1
 80012aa:	617b      	str	r3, [r7, #20]
	sConfig.IC1Prescaler = TIM_ICPSC_DIV1;
 80012ac:	2300      	movs	r3, #0
 80012ae:	61bb      	str	r3, [r7, #24]
	sConfig.IC1Filter = 3;
 80012b0:	2303      	movs	r3, #3
 80012b2:	61fb      	str	r3, [r7, #28]
	sConfig.IC2Polarity = TIM_ICPOLARITY_RISING;
 80012b4:	2300      	movs	r3, #0
 80012b6:	623b      	str	r3, [r7, #32]
	sConfig.IC2Selection = TIM_ICSELECTION_DIRECTTI;
 80012b8:	2301      	movs	r3, #1
 80012ba:	627b      	str	r3, [r7, #36]	; 0x24
	sConfig.IC2Prescaler = TIM_ICPSC_DIV1;
 80012bc:	2300      	movs	r3, #0
 80012be:	62bb      	str	r3, [r7, #40]	; 0x28
	sConfig.IC2Filter = 5;
 80012c0:	2305      	movs	r3, #5
 80012c2:	62fb      	str	r3, [r7, #44]	; 0x2c
	if (HAL_TIM_Encoder_Init(&htim1, &sConfig) != HAL_OK)
 80012c4:	f107 030c 	add.w	r3, r7, #12
 80012c8:	4619      	mov	r1, r3
 80012ca:	480d      	ldr	r0, [pc, #52]	; (8001300 <MX_TIM1_Init+0xa8>)
 80012cc:	f002 fc0a 	bl	8003ae4 <HAL_TIM_Encoder_Init>
 80012d0:	4603      	mov	r3, r0
 80012d2:	2b00      	cmp	r3, #0
 80012d4:	d001      	beq.n	80012da <MX_TIM1_Init+0x82>
	{
		Error_Handler();
 80012d6:	f001 f991 	bl	80025fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 80012da:	2300      	movs	r3, #0
 80012dc:	607b      	str	r3, [r7, #4]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 80012de:	2300      	movs	r3, #0
 80012e0:	60bb      	str	r3, [r7, #8]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim1, &sMasterConfig) != HAL_OK)
 80012e2:	1d3b      	adds	r3, r7, #4
 80012e4:	4619      	mov	r1, r3
 80012e6:	4806      	ldr	r0, [pc, #24]	; (8001300 <MX_TIM1_Init+0xa8>)
 80012e8:	f003 fa4c 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 80012ec:	4603      	mov	r3, r0
 80012ee:	2b00      	cmp	r3, #0
 80012f0:	d001      	beq.n	80012f6 <MX_TIM1_Init+0x9e>
	{
		Error_Handler();
 80012f2:	f001 f983 	bl	80025fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM1_Init 2 */

	/* USER CODE END TIM1_Init 2 */

}
 80012f6:	bf00      	nop
 80012f8:	3730      	adds	r7, #48	; 0x30
 80012fa:	46bd      	mov	sp, r7
 80012fc:	bd80      	pop	{r7, pc}
 80012fe:	bf00      	nop
 8001300:	200001ac 	.word	0x200001ac
 8001304:	40010000 	.word	0x40010000

08001308 <MX_TIM2_Init>:
 * @brief TIM2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM2_Init(void)
{
 8001308:	b580      	push	{r7, lr}
 800130a:	b086      	sub	sp, #24
 800130c:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM2_Init 0 */

	/* USER CODE END TIM2_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 800130e:	f107 0308 	add.w	r3, r7, #8
 8001312:	2200      	movs	r2, #0
 8001314:	601a      	str	r2, [r3, #0]
 8001316:	605a      	str	r2, [r3, #4]
 8001318:	609a      	str	r2, [r3, #8]
 800131a:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 800131c:	463b      	mov	r3, r7
 800131e:	2200      	movs	r2, #0
 8001320:	601a      	str	r2, [r3, #0]
 8001322:	605a      	str	r2, [r3, #4]

	/* USER CODE BEGIN TIM2_Init 1 */

	/* USER CODE END TIM2_Init 1 */
	htim2.Instance = TIM2;
 8001324:	4b1d      	ldr	r3, [pc, #116]	; (800139c <MX_TIM2_Init+0x94>)
 8001326:	f04f 4280 	mov.w	r2, #1073741824	; 0x40000000
 800132a:	601a      	str	r2, [r3, #0]
	htim2.Init.Prescaler = 99;
 800132c:	4b1b      	ldr	r3, [pc, #108]	; (800139c <MX_TIM2_Init+0x94>)
 800132e:	2263      	movs	r2, #99	; 0x63
 8001330:	605a      	str	r2, [r3, #4]
	htim2.Init.CounterMode = TIM_COUNTERMODE_UP;
 8001332:	4b1a      	ldr	r3, [pc, #104]	; (800139c <MX_TIM2_Init+0x94>)
 8001334:	2200      	movs	r2, #0
 8001336:	609a      	str	r2, [r3, #8]
	htim2.Init.Period = 4294967295;
 8001338:	4b18      	ldr	r3, [pc, #96]	; (800139c <MX_TIM2_Init+0x94>)
 800133a:	f04f 32ff 	mov.w	r2, #4294967295
 800133e:	60da      	str	r2, [r3, #12]
	htim2.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 8001340:	4b16      	ldr	r3, [pc, #88]	; (800139c <MX_TIM2_Init+0x94>)
 8001342:	2200      	movs	r2, #0
 8001344:	611a      	str	r2, [r3, #16]
	htim2.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 8001346:	4b15      	ldr	r3, [pc, #84]	; (800139c <MX_TIM2_Init+0x94>)
 8001348:	2200      	movs	r2, #0
 800134a:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim2) != HAL_OK)
 800134c:	4813      	ldr	r0, [pc, #76]	; (800139c <MX_TIM2_Init+0x94>)
 800134e:	f002 faef 	bl	8003930 <HAL_TIM_Base_Init>
 8001352:	4603      	mov	r3, r0
 8001354:	2b00      	cmp	r3, #0
 8001356:	d001      	beq.n	800135c <MX_TIM2_Init+0x54>
	{
		Error_Handler();
 8001358:	f001 f950 	bl	80025fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 800135c:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 8001360:	60bb      	str	r3, [r7, #8]
	if (HAL_TIM_ConfigClockSource(&htim2, &sClockSourceConfig) != HAL_OK)
 8001362:	f107 0308 	add.w	r3, r7, #8
 8001366:	4619      	mov	r1, r3
 8001368:	480c      	ldr	r0, [pc, #48]	; (800139c <MX_TIM2_Init+0x94>)
 800136a:	f002 fe53 	bl	8004014 <HAL_TIM_ConfigClockSource>
 800136e:	4603      	mov	r3, r0
 8001370:	2b00      	cmp	r3, #0
 8001372:	d001      	beq.n	8001378 <MX_TIM2_Init+0x70>
	{
		Error_Handler();
 8001374:	f001 f942 	bl	80025fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001378:	2300      	movs	r3, #0
 800137a:	603b      	str	r3, [r7, #0]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 800137c:	2300      	movs	r3, #0
 800137e:	607b      	str	r3, [r7, #4]
	if (HAL_TIMEx_MasterConfigSynchronization(&htim2, &sMasterConfig) != HAL_OK)
 8001380:	463b      	mov	r3, r7
 8001382:	4619      	mov	r1, r3
 8001384:	4805      	ldr	r0, [pc, #20]	; (800139c <MX_TIM2_Init+0x94>)
 8001386:	f003 f9fd 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 800138a:	4603      	mov	r3, r0
 800138c:	2b00      	cmp	r3, #0
 800138e:	d001      	beq.n	8001394 <MX_TIM2_Init+0x8c>
	{
		Error_Handler();
 8001390:	f001 f934 	bl	80025fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM2_Init 2 */

	/* USER CODE END TIM2_Init 2 */

}
 8001394:	bf00      	nop
 8001396:	3718      	adds	r7, #24
 8001398:	46bd      	mov	sp, r7
 800139a:	bd80      	pop	{r7, pc}
 800139c:	200001ec 	.word	0x200001ec

080013a0 <MX_TIM3_Init>:
 * @brief TIM3 Initialization Function
 * @param None
 * @retval None
 */
static void MX_TIM3_Init(void)
{
 80013a0:	b580      	push	{r7, lr}
 80013a2:	b08e      	sub	sp, #56	; 0x38
 80013a4:	af00      	add	r7, sp, #0

	/* USER CODE BEGIN TIM3_Init 0 */

	/* USER CODE END TIM3_Init 0 */

	TIM_ClockConfigTypeDef sClockSourceConfig = {0};
 80013a6:	f107 0328 	add.w	r3, r7, #40	; 0x28
 80013aa:	2200      	movs	r2, #0
 80013ac:	601a      	str	r2, [r3, #0]
 80013ae:	605a      	str	r2, [r3, #4]
 80013b0:	609a      	str	r2, [r3, #8]
 80013b2:	60da      	str	r2, [r3, #12]
	TIM_MasterConfigTypeDef sMasterConfig = {0};
 80013b4:	f107 0320 	add.w	r3, r7, #32
 80013b8:	2200      	movs	r2, #0
 80013ba:	601a      	str	r2, [r3, #0]
 80013bc:	605a      	str	r2, [r3, #4]
	TIM_OC_InitTypeDef sConfigOC = {0};
 80013be:	1d3b      	adds	r3, r7, #4
 80013c0:	2200      	movs	r2, #0
 80013c2:	601a      	str	r2, [r3, #0]
 80013c4:	605a      	str	r2, [r3, #4]
 80013c6:	609a      	str	r2, [r3, #8]
 80013c8:	60da      	str	r2, [r3, #12]
 80013ca:	611a      	str	r2, [r3, #16]
 80013cc:	615a      	str	r2, [r3, #20]
 80013ce:	619a      	str	r2, [r3, #24]

	/* USER CODE BEGIN TIM3_Init 1 */

	/* USER CODE END TIM3_Init 1 */
	htim3.Instance = TIM3;
 80013d0:	4b2c      	ldr	r3, [pc, #176]	; (8001484 <MX_TIM3_Init+0xe4>)
 80013d2:	4a2d      	ldr	r2, [pc, #180]	; (8001488 <MX_TIM3_Init+0xe8>)
 80013d4:	601a      	str	r2, [r3, #0]
	htim3.Init.Prescaler = 99;
 80013d6:	4b2b      	ldr	r3, [pc, #172]	; (8001484 <MX_TIM3_Init+0xe4>)
 80013d8:	2263      	movs	r2, #99	; 0x63
 80013da:	605a      	str	r2, [r3, #4]
	htim3.Init.CounterMode = TIM_COUNTERMODE_UP;
 80013dc:	4b29      	ldr	r3, [pc, #164]	; (8001484 <MX_TIM3_Init+0xe4>)
 80013de:	2200      	movs	r2, #0
 80013e0:	609a      	str	r2, [r3, #8]
	htim3.Init.Period = 10000;
 80013e2:	4b28      	ldr	r3, [pc, #160]	; (8001484 <MX_TIM3_Init+0xe4>)
 80013e4:	f242 7210 	movw	r2, #10000	; 0x2710
 80013e8:	60da      	str	r2, [r3, #12]
	htim3.Init.ClockDivision = TIM_CLOCKDIVISION_DIV1;
 80013ea:	4b26      	ldr	r3, [pc, #152]	; (8001484 <MX_TIM3_Init+0xe4>)
 80013ec:	2200      	movs	r2, #0
 80013ee:	611a      	str	r2, [r3, #16]
	htim3.Init.AutoReloadPreload = TIM_AUTORELOAD_PRELOAD_DISABLE;
 80013f0:	4b24      	ldr	r3, [pc, #144]	; (8001484 <MX_TIM3_Init+0xe4>)
 80013f2:	2200      	movs	r2, #0
 80013f4:	619a      	str	r2, [r3, #24]
	if (HAL_TIM_Base_Init(&htim3) != HAL_OK)
 80013f6:	4823      	ldr	r0, [pc, #140]	; (8001484 <MX_TIM3_Init+0xe4>)
 80013f8:	f002 fa9a 	bl	8003930 <HAL_TIM_Base_Init>
 80013fc:	4603      	mov	r3, r0
 80013fe:	2b00      	cmp	r3, #0
 8001400:	d001      	beq.n	8001406 <MX_TIM3_Init+0x66>
	{
		Error_Handler();
 8001402:	f001 f8fb 	bl	80025fc <Error_Handler>
	}
	sClockSourceConfig.ClockSource = TIM_CLOCKSOURCE_INTERNAL;
 8001406:	f44f 5380 	mov.w	r3, #4096	; 0x1000
 800140a:	62bb      	str	r3, [r7, #40]	; 0x28
	if (HAL_TIM_ConfigClockSource(&htim3, &sClockSourceConfig) != HAL_OK)
 800140c:	f107 0328 	add.w	r3, r7, #40	; 0x28
 8001410:	4619      	mov	r1, r3
 8001412:	481c      	ldr	r0, [pc, #112]	; (8001484 <MX_TIM3_Init+0xe4>)
 8001414:	f002 fdfe 	bl	8004014 <HAL_TIM_ConfigClockSource>
 8001418:	4603      	mov	r3, r0
 800141a:	2b00      	cmp	r3, #0
 800141c:	d001      	beq.n	8001422 <MX_TIM3_Init+0x82>
	{
		Error_Handler();
 800141e:	f001 f8ed 	bl	80025fc <Error_Handler>
	}
	if (HAL_TIM_PWM_Init(&htim3) != HAL_OK)
 8001422:	4818      	ldr	r0, [pc, #96]	; (8001484 <MX_TIM3_Init+0xe4>)
 8001424:	f002 faf7 	bl	8003a16 <HAL_TIM_PWM_Init>
 8001428:	4603      	mov	r3, r0
 800142a:	2b00      	cmp	r3, #0
 800142c:	d001      	beq.n	8001432 <MX_TIM3_Init+0x92>
	{
		Error_Handler();
 800142e:	f001 f8e5 	bl	80025fc <Error_Handler>
	}
	sMasterConfig.MasterOutputTrigger = TIM_TRGO_RESET;
 8001432:	2300      	movs	r3, #0
 8001434:	623b      	str	r3, [r7, #32]
	sMasterConfig.MasterSlaveMode = TIM_MASTERSLAVEMODE_DISABLE;
 8001436:	2300      	movs	r3, #0
 8001438:	627b      	str	r3, [r7, #36]	; 0x24
	if (HAL_TIMEx_MasterConfigSynchronization(&htim3, &sMasterConfig) != HAL_OK)
 800143a:	f107 0320 	add.w	r3, r7, #32
 800143e:	4619      	mov	r1, r3
 8001440:	4810      	ldr	r0, [pc, #64]	; (8001484 <MX_TIM3_Init+0xe4>)
 8001442:	f003 f99f 	bl	8004784 <HAL_TIMEx_MasterConfigSynchronization>
 8001446:	4603      	mov	r3, r0
 8001448:	2b00      	cmp	r3, #0
 800144a:	d001      	beq.n	8001450 <MX_TIM3_Init+0xb0>
	{
		Error_Handler();
 800144c:	f001 f8d6 	bl	80025fc <Error_Handler>
	}
	sConfigOC.OCMode = TIM_OCMODE_PWM1;
 8001450:	2360      	movs	r3, #96	; 0x60
 8001452:	607b      	str	r3, [r7, #4]
	sConfigOC.Pulse = 0;
 8001454:	2300      	movs	r3, #0
 8001456:	60bb      	str	r3, [r7, #8]
	sConfigOC.OCPolarity = TIM_OCPOLARITY_HIGH;
 8001458:	2300      	movs	r3, #0
 800145a:	60fb      	str	r3, [r7, #12]
	sConfigOC.OCFastMode = TIM_OCFAST_DISABLE;
 800145c:	2300      	movs	r3, #0
 800145e:	617b      	str	r3, [r7, #20]
	if (HAL_TIM_PWM_ConfigChannel(&htim3, &sConfigOC, TIM_CHANNEL_1) != HAL_OK)
 8001460:	1d3b      	adds	r3, r7, #4
 8001462:	2200      	movs	r2, #0
 8001464:	4619      	mov	r1, r3
 8001466:	4807      	ldr	r0, [pc, #28]	; (8001484 <MX_TIM3_Init+0xe4>)
 8001468:	f002 fd0e 	bl	8003e88 <HAL_TIM_PWM_ConfigChannel>
 800146c:	4603      	mov	r3, r0
 800146e:	2b00      	cmp	r3, #0
 8001470:	d001      	beq.n	8001476 <MX_TIM3_Init+0xd6>
	{
		Error_Handler();
 8001472:	f001 f8c3 	bl	80025fc <Error_Handler>
	}
	/* USER CODE BEGIN TIM3_Init 2 */

	/* USER CODE END TIM3_Init 2 */
	HAL_TIM_MspPostInit(&htim3);
 8001476:	4803      	ldr	r0, [pc, #12]	; (8001484 <MX_TIM3_Init+0xe4>)
 8001478:	f001 f97a 	bl	8002770 <HAL_TIM_MspPostInit>

}
 800147c:	bf00      	nop
 800147e:	3738      	adds	r7, #56	; 0x38
 8001480:	46bd      	mov	sp, r7
 8001482:	bd80      	pop	{r7, pc}
 8001484:	2000016c 	.word	0x2000016c
 8001488:	40000400 	.word	0x40000400

0800148c <MX_USART2_UART_Init>:
 * @brief USART2 Initialization Function
 * @param None
 * @retval None
 */
static void MX_USART2_UART_Init(void)
{
 800148c:	b580      	push	{r7, lr}
 800148e:	af00      	add	r7, sp, #0
	/* USER CODE END USART2_Init 0 */

	/* USER CODE BEGIN USART2_Init 1 */

	/* USER CODE END USART2_Init 1 */
	huart2.Instance = USART2;
 8001490:	4b11      	ldr	r3, [pc, #68]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001492:	4a12      	ldr	r2, [pc, #72]	; (80014dc <MX_USART2_UART_Init+0x50>)
 8001494:	601a      	str	r2, [r3, #0]
	huart2.Init.BaudRate = 115200;
 8001496:	4b10      	ldr	r3, [pc, #64]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 8001498:	f44f 32e1 	mov.w	r2, #115200	; 0x1c200
 800149c:	605a      	str	r2, [r3, #4]
	huart2.Init.WordLength = UART_WORDLENGTH_8B;
 800149e:	4b0e      	ldr	r3, [pc, #56]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a0:	2200      	movs	r2, #0
 80014a2:	609a      	str	r2, [r3, #8]
	huart2.Init.StopBits = UART_STOPBITS_1;
 80014a4:	4b0c      	ldr	r3, [pc, #48]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014a6:	2200      	movs	r2, #0
 80014a8:	60da      	str	r2, [r3, #12]
	huart2.Init.Parity = UART_PARITY_NONE;
 80014aa:	4b0b      	ldr	r3, [pc, #44]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014ac:	2200      	movs	r2, #0
 80014ae:	611a      	str	r2, [r3, #16]
	huart2.Init.Mode = UART_MODE_TX_RX;
 80014b0:	4b09      	ldr	r3, [pc, #36]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b2:	220c      	movs	r2, #12
 80014b4:	615a      	str	r2, [r3, #20]
	huart2.Init.HwFlowCtl = UART_HWCONTROL_NONE;
 80014b6:	4b08      	ldr	r3, [pc, #32]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014b8:	2200      	movs	r2, #0
 80014ba:	619a      	str	r2, [r3, #24]
	huart2.Init.OverSampling = UART_OVERSAMPLING_16;
 80014bc:	4b06      	ldr	r3, [pc, #24]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014be:	2200      	movs	r2, #0
 80014c0:	61da      	str	r2, [r3, #28]
	if (HAL_UART_Init(&huart2) != HAL_OK)
 80014c2:	4805      	ldr	r0, [pc, #20]	; (80014d8 <MX_USART2_UART_Init+0x4c>)
 80014c4:	f003 f9e0 	bl	8004888 <HAL_UART_Init>
 80014c8:	4603      	mov	r3, r0
 80014ca:	2b00      	cmp	r3, #0
 80014cc:	d001      	beq.n	80014d2 <MX_USART2_UART_Init+0x46>
	{
		Error_Handler();
 80014ce:	f001 f895 	bl	80025fc <Error_Handler>
	}
	/* USER CODE BEGIN USART2_Init 2 */

	/* USER CODE END USART2_Init 2 */

}
 80014d2:	bf00      	nop
 80014d4:	bd80      	pop	{r7, pc}
 80014d6:	bf00      	nop
 80014d8:	2000022c 	.word	0x2000022c
 80014dc:	40004400 	.word	0x40004400

080014e0 <MX_GPIO_Init>:
 * @brief GPIO Initialization Function
 * @param None
 * @retval None
 */
static void MX_GPIO_Init(void)
{
 80014e0:	b580      	push	{r7, lr}
 80014e2:	b08a      	sub	sp, #40	; 0x28
 80014e4:	af00      	add	r7, sp, #0
	GPIO_InitTypeDef GPIO_InitStruct = {0};
 80014e6:	f107 0314 	add.w	r3, r7, #20
 80014ea:	2200      	movs	r2, #0
 80014ec:	601a      	str	r2, [r3, #0]
 80014ee:	605a      	str	r2, [r3, #4]
 80014f0:	609a      	str	r2, [r3, #8]
 80014f2:	60da      	str	r2, [r3, #12]
 80014f4:	611a      	str	r2, [r3, #16]

	/* GPIO Ports Clock Enable */
	__HAL_RCC_GPIOC_CLK_ENABLE();
 80014f6:	2300      	movs	r3, #0
 80014f8:	613b      	str	r3, [r7, #16]
 80014fa:	4b41      	ldr	r3, [pc, #260]	; (8001600 <MX_GPIO_Init+0x120>)
 80014fc:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80014fe:	4a40      	ldr	r2, [pc, #256]	; (8001600 <MX_GPIO_Init+0x120>)
 8001500:	f043 0304 	orr.w	r3, r3, #4
 8001504:	6313      	str	r3, [r2, #48]	; 0x30
 8001506:	4b3e      	ldr	r3, [pc, #248]	; (8001600 <MX_GPIO_Init+0x120>)
 8001508:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800150a:	f003 0304 	and.w	r3, r3, #4
 800150e:	613b      	str	r3, [r7, #16]
 8001510:	693b      	ldr	r3, [r7, #16]
	__HAL_RCC_GPIOH_CLK_ENABLE();
 8001512:	2300      	movs	r3, #0
 8001514:	60fb      	str	r3, [r7, #12]
 8001516:	4b3a      	ldr	r3, [pc, #232]	; (8001600 <MX_GPIO_Init+0x120>)
 8001518:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800151a:	4a39      	ldr	r2, [pc, #228]	; (8001600 <MX_GPIO_Init+0x120>)
 800151c:	f043 0380 	orr.w	r3, r3, #128	; 0x80
 8001520:	6313      	str	r3, [r2, #48]	; 0x30
 8001522:	4b37      	ldr	r3, [pc, #220]	; (8001600 <MX_GPIO_Init+0x120>)
 8001524:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001526:	f003 0380 	and.w	r3, r3, #128	; 0x80
 800152a:	60fb      	str	r3, [r7, #12]
 800152c:	68fb      	ldr	r3, [r7, #12]
	__HAL_RCC_GPIOA_CLK_ENABLE();
 800152e:	2300      	movs	r3, #0
 8001530:	60bb      	str	r3, [r7, #8]
 8001532:	4b33      	ldr	r3, [pc, #204]	; (8001600 <MX_GPIO_Init+0x120>)
 8001534:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001536:	4a32      	ldr	r2, [pc, #200]	; (8001600 <MX_GPIO_Init+0x120>)
 8001538:	f043 0301 	orr.w	r3, r3, #1
 800153c:	6313      	str	r3, [r2, #48]	; 0x30
 800153e:	4b30      	ldr	r3, [pc, #192]	; (8001600 <MX_GPIO_Init+0x120>)
 8001540:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001542:	f003 0301 	and.w	r3, r3, #1
 8001546:	60bb      	str	r3, [r7, #8]
 8001548:	68bb      	ldr	r3, [r7, #8]
	__HAL_RCC_GPIOB_CLK_ENABLE();
 800154a:	2300      	movs	r3, #0
 800154c:	607b      	str	r3, [r7, #4]
 800154e:	4b2c      	ldr	r3, [pc, #176]	; (8001600 <MX_GPIO_Init+0x120>)
 8001550:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8001552:	4a2b      	ldr	r2, [pc, #172]	; (8001600 <MX_GPIO_Init+0x120>)
 8001554:	f043 0302 	orr.w	r3, r3, #2
 8001558:	6313      	str	r3, [r2, #48]	; 0x30
 800155a:	4b29      	ldr	r3, [pc, #164]	; (8001600 <MX_GPIO_Init+0x120>)
 800155c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800155e:	f003 0302 	and.w	r3, r3, #2
 8001562:	607b      	str	r3, [r7, #4]
 8001564:	687b      	ldr	r3, [r7, #4]

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(LD2_GPIO_Port, LD2_Pin, GPIO_PIN_RESET);
 8001566:	2200      	movs	r2, #0
 8001568:	2120      	movs	r1, #32
 800156a:	4826      	ldr	r0, [pc, #152]	; (8001604 <MX_GPIO_Init+0x124>)
 800156c:	f001 fd42 	bl	8002ff4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin Output Level */
	HAL_GPIO_WritePin(GPIOB, GPIO_PIN_8|GPIO_PIN_9, GPIO_PIN_RESET);
 8001570:	2200      	movs	r2, #0
 8001572:	f44f 7140 	mov.w	r1, #768	; 0x300
 8001576:	4824      	ldr	r0, [pc, #144]	; (8001608 <MX_GPIO_Init+0x128>)
 8001578:	f001 fd3c 	bl	8002ff4 <HAL_GPIO_WritePin>

	/*Configure GPIO pin : B1_Pin */
	GPIO_InitStruct.Pin = B1_Pin;
 800157c:	f44f 5300 	mov.w	r3, #8192	; 0x2000
 8001580:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_FALLING;
 8001582:	4b22      	ldr	r3, [pc, #136]	; (800160c <MX_GPIO_Init+0x12c>)
 8001584:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 8001586:	2300      	movs	r3, #0
 8001588:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(B1_GPIO_Port, &GPIO_InitStruct);
 800158a:	f107 0314 	add.w	r3, r7, #20
 800158e:	4619      	mov	r1, r3
 8001590:	481f      	ldr	r0, [pc, #124]	; (8001610 <MX_GPIO_Init+0x130>)
 8001592:	f001 fbab 	bl	8002cec <HAL_GPIO_Init>

	/*Configure GPIO pin : LD2_Pin */
	GPIO_InitStruct.Pin = LD2_Pin;
 8001596:	2320      	movs	r3, #32
 8001598:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_PP;
 800159a:	2301      	movs	r3, #1
 800159c:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 800159e:	2300      	movs	r3, #0
 80015a0:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015a2:	2300      	movs	r3, #0
 80015a4:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(LD2_GPIO_Port, &GPIO_InitStruct);
 80015a6:	f107 0314 	add.w	r3, r7, #20
 80015aa:	4619      	mov	r1, r3
 80015ac:	4815      	ldr	r0, [pc, #84]	; (8001604 <MX_GPIO_Init+0x124>)
 80015ae:	f001 fb9d 	bl	8002cec <HAL_GPIO_Init>

	/*Configure GPIO pin : PA7 */
	GPIO_InitStruct.Pin = GPIO_PIN_7;
 80015b2:	2380      	movs	r3, #128	; 0x80
 80015b4:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_IT_RISING;
 80015b6:	4b17      	ldr	r3, [pc, #92]	; (8001614 <MX_GPIO_Init+0x134>)
 80015b8:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_NOPULL;
 80015ba:	2300      	movs	r3, #0
 80015bc:	61fb      	str	r3, [r7, #28]
	HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80015be:	f107 0314 	add.w	r3, r7, #20
 80015c2:	4619      	mov	r1, r3
 80015c4:	480f      	ldr	r0, [pc, #60]	; (8001604 <MX_GPIO_Init+0x124>)
 80015c6:	f001 fb91 	bl	8002cec <HAL_GPIO_Init>

	/*Configure GPIO pins : PB8 PB9 */
	GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80015ca:	f44f 7340 	mov.w	r3, #768	; 0x300
 80015ce:	617b      	str	r3, [r7, #20]
	GPIO_InitStruct.Mode = GPIO_MODE_OUTPUT_OD;
 80015d0:	2311      	movs	r3, #17
 80015d2:	61bb      	str	r3, [r7, #24]
	GPIO_InitStruct.Pull = GPIO_PULLUP;
 80015d4:	2301      	movs	r3, #1
 80015d6:	61fb      	str	r3, [r7, #28]
	GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80015d8:	2300      	movs	r3, #0
 80015da:	623b      	str	r3, [r7, #32]
	HAL_GPIO_Init(GPIOB, &GPIO_InitStruct);
 80015dc:	f107 0314 	add.w	r3, r7, #20
 80015e0:	4619      	mov	r1, r3
 80015e2:	4809      	ldr	r0, [pc, #36]	; (8001608 <MX_GPIO_Init+0x128>)
 80015e4:	f001 fb82 	bl	8002cec <HAL_GPIO_Init>

	/* EXTI interrupt init*/
	HAL_NVIC_SetPriority(EXTI9_5_IRQn, 0, 0);
 80015e8:	2200      	movs	r2, #0
 80015ea:	2100      	movs	r1, #0
 80015ec:	2017      	movs	r0, #23
 80015ee:	f001 fb38 	bl	8002c62 <HAL_NVIC_SetPriority>
	HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 80015f2:	2017      	movs	r0, #23
 80015f4:	f001 fb51 	bl	8002c9a <HAL_NVIC_EnableIRQ>

}
 80015f8:	bf00      	nop
 80015fa:	3728      	adds	r7, #40	; 0x28
 80015fc:	46bd      	mov	sp, r7
 80015fe:	bd80      	pop	{r7, pc}
 8001600:	40023800 	.word	0x40023800
 8001604:	40020000 	.word	0x40020000
 8001608:	40020400 	.word	0x40020400
 800160c:	10210000 	.word	0x10210000
 8001610:	40020800 	.word	0x40020800
 8001614:	10110000 	.word	0x10110000

08001618 <HAL_GPIO_EXTI_Callback>:

/* USER CODE BEGIN 4 */
#define  MAX_SUBPOSITION_OVERFLOW 1536
#define  MAX_ENCODER_PERIOD 2048

void HAL_GPIO_EXTI_Callback(uint16_t GPIO_Pin){
 8001618:	b580      	push	{r7, lr}
 800161a:	b082      	sub	sp, #8
 800161c:	af00      	add	r7, sp, #0
 800161e:	4603      	mov	r3, r0
 8001620:	80fb      	strh	r3, [r7, #6]
	if(GPIO_Pin == GPIO_PIN_7){
 8001622:	88fb      	ldrh	r3, [r7, #6]
 8001624:	2b80      	cmp	r3, #128	; 0x80
 8001626:	d112      	bne.n	800164e <HAL_GPIO_EXTI_Callback+0x36>
		check ++;
 8001628:	4b0b      	ldr	r3, [pc, #44]	; (8001658 <HAL_GPIO_EXTI_Callback+0x40>)
 800162a:	781b      	ldrb	r3, [r3, #0]
 800162c:	3301      	adds	r3, #1
 800162e:	b2da      	uxtb	r2, r3
 8001630:	4b09      	ldr	r3, [pc, #36]	; (8001658 <HAL_GPIO_EXTI_Callback+0x40>)
 8001632:	701a      	strb	r2, [r3, #0]
		cP = 0;
 8001634:	4b09      	ldr	r3, [pc, #36]	; (800165c <HAL_GPIO_EXTI_Callback+0x44>)
 8001636:	2200      	movs	r2, #0
 8001638:	701a      	strb	r2, [r3, #0]
		velocity = 0;
 800163a:	4b09      	ldr	r3, [pc, #36]	; (8001660 <HAL_GPIO_EXTI_Callback+0x48>)
 800163c:	f04f 0200 	mov.w	r2, #0
 8001640:	601a      	str	r2, [r3, #0]
		SetHome = 0;
 8001642:	4b08      	ldr	r3, [pc, #32]	; (8001664 <HAL_GPIO_EXTI_Callback+0x4c>)
 8001644:	2200      	movs	r2, #0
 8001646:	701a      	strb	r2, [r3, #0]
		HAL_NVIC_DisableIRQ(EXTI9_5_IRQn);
 8001648:	2017      	movs	r0, #23
 800164a:	f001 fb34 	bl	8002cb6 <HAL_NVIC_DisableIRQ>
	}
}
 800164e:	bf00      	nop
 8001650:	3708      	adds	r7, #8
 8001652:	46bd      	mov	sp, r7
 8001654:	bd80      	pop	{r7, pc}
 8001656:	bf00      	nop
 8001658:	200000d8 	.word	0x200000d8
 800165c:	200000c0 	.word	0x200000c0
 8001660:	200000c8 	.word	0x200000c8
 8001664:	200000d9 	.word	0x200000d9

08001668 <EncoderVelocity_Update>:

float EncoderVelocity_Update()
{
 8001668:	b5b0      	push	{r4, r5, r7, lr}
 800166a:	ed2d 8b02 	vpush	{d8}
 800166e:	b086      	sub	sp, #24
 8001670:	af00      	add	r7, sp, #0
	//Save Last state
	static uint32_t EncoderLastPosition = 0;
	static uint64_t EncoderLastTimestamp = 0;

	//read data
	uint32_t EncoderNowPosition = HTIM_ENCODER.Instance->CNT;
 8001672:	4b28      	ldr	r3, [pc, #160]	; (8001714 <EncoderVelocity_Update+0xac>)
 8001674:	681b      	ldr	r3, [r3, #0]
 8001676:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001678:	613b      	str	r3, [r7, #16]
	uint64_t EncoderNowTimestamp = micros();
 800167a:	f000 ffa5 	bl	80025c8 <micros>
 800167e:	e9c7 0102 	strd	r0, r1, [r7, #8]

	int32_t EncoderPositionDiff;
	uint64_t EncoderTimeDiff;

	EncoderTimeDiff = EncoderNowTimestamp - EncoderLastTimestamp;
 8001682:	4b25      	ldr	r3, [pc, #148]	; (8001718 <EncoderVelocity_Update+0xb0>)
 8001684:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001688:	e9d7 0102 	ldrd	r0, r1, [r7, #8]
 800168c:	1a84      	subs	r4, r0, r2
 800168e:	eb61 0503 	sbc.w	r5, r1, r3
 8001692:	e9c7 4500 	strd	r4, r5, [r7]
	EncoderPositionDiff = EncoderNowPosition - EncoderLastPosition;
 8001696:	4b21      	ldr	r3, [pc, #132]	; (800171c <EncoderVelocity_Update+0xb4>)
 8001698:	681b      	ldr	r3, [r3, #0]
 800169a:	693a      	ldr	r2, [r7, #16]
 800169c:	1ad3      	subs	r3, r2, r3
 800169e:	617b      	str	r3, [r7, #20]

	//compensate overflow and underflow
	if (EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80016a0:	697b      	ldr	r3, [r7, #20]
 80016a2:	f5b3 6fc0 	cmp.w	r3, #1536	; 0x600
 80016a6:	db04      	blt.n	80016b2 <EncoderVelocity_Update+0x4a>
	{
		EncoderPositionDiff -= MAX_ENCODER_PERIOD;
 80016a8:	697b      	ldr	r3, [r7, #20]
 80016aa:	f5a3 6300 	sub.w	r3, r3, #2048	; 0x800
 80016ae:	617b      	str	r3, [r7, #20]
 80016b0:	e007      	b.n	80016c2 <EncoderVelocity_Update+0x5a>
	}
	else if (-EncoderPositionDiff >= MAX_SUBPOSITION_OVERFLOW)
 80016b2:	697b      	ldr	r3, [r7, #20]
 80016b4:	f513 6fc0 	cmn.w	r3, #1536	; 0x600
 80016b8:	dc03      	bgt.n	80016c2 <EncoderVelocity_Update+0x5a>
	{
		EncoderPositionDiff += MAX_ENCODER_PERIOD;
 80016ba:	697b      	ldr	r3, [r7, #20]
 80016bc:	f503 6300 	add.w	r3, r3, #2048	; 0x800
 80016c0:	617b      	str	r3, [r7, #20]
	}

	//Update Position and time
	EncoderLastPosition = EncoderNowPosition;
 80016c2:	4a16      	ldr	r2, [pc, #88]	; (800171c <EncoderVelocity_Update+0xb4>)
 80016c4:	693b      	ldr	r3, [r7, #16]
 80016c6:	6013      	str	r3, [r2, #0]
	EncoderLastTimestamp = EncoderNowTimestamp;
 80016c8:	4913      	ldr	r1, [pc, #76]	; (8001718 <EncoderVelocity_Update+0xb0>)
 80016ca:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 80016ce:	e9c1 2300 	strd	r2, r3, [r1]

	//Calculate velocity
	//EncoderTimeDiff is in uS
	return (EncoderPositionDiff * 1000000*60) / (float) (EncoderTimeDiff *2048*4);
 80016d2:	697b      	ldr	r3, [r7, #20]
 80016d4:	4a12      	ldr	r2, [pc, #72]	; (8001720 <EncoderVelocity_Update+0xb8>)
 80016d6:	fb02 f303 	mul.w	r3, r2, r3
 80016da:	ee07 3a90 	vmov	s15, r3
 80016de:	eeb8 8ae7 	vcvt.f32.s32	s16, s15
 80016e2:	e9d7 0100 	ldrd	r0, r1, [r7]
 80016e6:	f04f 0200 	mov.w	r2, #0
 80016ea:	f04f 0300 	mov.w	r3, #0
 80016ee:	034b      	lsls	r3, r1, #13
 80016f0:	ea43 43d0 	orr.w	r3, r3, r0, lsr #19
 80016f4:	0342      	lsls	r2, r0, #13
 80016f6:	4610      	mov	r0, r2
 80016f8:	4619      	mov	r1, r3
 80016fa:	f7ff faf1 	bl	8000ce0 <__aeabi_ul2f>
 80016fe:	ee07 0a10 	vmov	s14, r0
 8001702:	eec8 7a07 	vdiv.f32	s15, s16, s14

}
 8001706:	eeb0 0a67 	vmov.f32	s0, s15
 800170a:	3718      	adds	r7, #24
 800170c:	46bd      	mov	sp, r7
 800170e:	ecbd 8b02 	vpop	{d8}
 8001712:	bdb0      	pop	{r4, r5, r7, pc}
 8001714:	200001ac 	.word	0x200001ac
 8001718:	20000108 	.word	0x20000108
 800171c:	20000110 	.word	0x20000110
 8001720:	03938700 	.word	0x03938700
 8001724:	00000000 	.word	0x00000000

08001728 <trajectory>:

void trajectory(uint64_t Timestamp){
 8001728:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 800172c:	b082      	sub	sp, #8
 800172e:	af00      	add	r7, sp, #0
 8001730:	e9c7 0100 	strd	r0, r1, [r7]
	static float a0 = 0;
	static float a1 = 0;
	static float a2 = 0;
	static float a3 = 0;
	static uint64_t setTime = 0;
	state[0] = start;
 8001734:	4b46      	ldr	r3, [pc, #280]	; (8001850 <trajectory+0x128>)
 8001736:	781b      	ldrb	r3, [r3, #0]
 8001738:	461a      	mov	r2, r3
 800173a:	4b46      	ldr	r3, [pc, #280]	; (8001854 <trajectory+0x12c>)
 800173c:	701a      	strb	r2, [r3, #0]
	rawPosition[0] = HTIM_ENCODER.Instance->CNT*90/2048;
 800173e:	4b46      	ldr	r3, [pc, #280]	; (8001858 <trajectory+0x130>)
 8001740:	681b      	ldr	r3, [r3, #0]
 8001742:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 8001744:	225a      	movs	r2, #90	; 0x5a
 8001746:	fb02 f303 	mul.w	r3, r2, r3
 800174a:	0adb      	lsrs	r3, r3, #11
 800174c:	b29a      	uxth	r2, r3
 800174e:	4b43      	ldr	r3, [pc, #268]	; (800185c <trajectory+0x134>)
 8001750:	801a      	strh	r2, [r3, #0]
	if((rawPosition[0] < 10 )&& (rawPosition[1] > 87)){
 8001752:	4b42      	ldr	r3, [pc, #264]	; (800185c <trajectory+0x134>)
 8001754:	881b      	ldrh	r3, [r3, #0]
 8001756:	2b09      	cmp	r3, #9
 8001758:	d80a      	bhi.n	8001770 <trajectory+0x48>
 800175a:	4b40      	ldr	r3, [pc, #256]	; (800185c <trajectory+0x134>)
 800175c:	885b      	ldrh	r3, [r3, #2]
 800175e:	2b57      	cmp	r3, #87	; 0x57
 8001760:	d906      	bls.n	8001770 <trajectory+0x48>
		cP += 1;
 8001762:	4b3f      	ldr	r3, [pc, #252]	; (8001860 <trajectory+0x138>)
 8001764:	781b      	ldrb	r3, [r3, #0]
 8001766:	3301      	adds	r3, #1
 8001768:	b2da      	uxtb	r2, r3
 800176a:	4b3d      	ldr	r3, [pc, #244]	; (8001860 <trajectory+0x138>)
 800176c:	701a      	strb	r2, [r3, #0]
 800176e:	e00d      	b.n	800178c <trajectory+0x64>
	}
	else if ((rawPosition[0] >87 )&& (rawPosition[1] < 10)){
 8001770:	4b3a      	ldr	r3, [pc, #232]	; (800185c <trajectory+0x134>)
 8001772:	881b      	ldrh	r3, [r3, #0]
 8001774:	2b57      	cmp	r3, #87	; 0x57
 8001776:	d909      	bls.n	800178c <trajectory+0x64>
 8001778:	4b38      	ldr	r3, [pc, #224]	; (800185c <trajectory+0x134>)
 800177a:	885b      	ldrh	r3, [r3, #2]
 800177c:	2b09      	cmp	r3, #9
 800177e:	d805      	bhi.n	800178c <trajectory+0x64>
		cP -= 1;
 8001780:	4b37      	ldr	r3, [pc, #220]	; (8001860 <trajectory+0x138>)
 8001782:	781b      	ldrb	r3, [r3, #0]
 8001784:	3b01      	subs	r3, #1
 8001786:	b2da      	uxtb	r2, r3
 8001788:	4b35      	ldr	r3, [pc, #212]	; (8001860 <trajectory+0x138>)
 800178a:	701a      	strb	r2, [r3, #0]
	}
	if (cP > 3){
 800178c:	4b34      	ldr	r3, [pc, #208]	; (8001860 <trajectory+0x138>)
 800178e:	781b      	ldrb	r3, [r3, #0]
 8001790:	2b03      	cmp	r3, #3
 8001792:	d902      	bls.n	800179a <trajectory+0x72>
		cP = 0;
 8001794:	4b32      	ldr	r3, [pc, #200]	; (8001860 <trajectory+0x138>)
 8001796:	2200      	movs	r2, #0
 8001798:	701a      	strb	r2, [r3, #0]
	}
	else if (cP < 0){
		cP = 0;
	}
	currentPosition = rawPosition[0] + cP*90;
 800179a:	4b30      	ldr	r3, [pc, #192]	; (800185c <trajectory+0x134>)
 800179c:	881b      	ldrh	r3, [r3, #0]
 800179e:	461a      	mov	r2, r3
 80017a0:	4b2f      	ldr	r3, [pc, #188]	; (8001860 <trajectory+0x138>)
 80017a2:	781b      	ldrb	r3, [r3, #0]
 80017a4:	4619      	mov	r1, r3
 80017a6:	235a      	movs	r3, #90	; 0x5a
 80017a8:	fb03 f301 	mul.w	r3, r3, r1
 80017ac:	4413      	add	r3, r2
 80017ae:	ee07 3a90 	vmov	s15, r3
 80017b2:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 80017b6:	4b2b      	ldr	r3, [pc, #172]	; (8001864 <trajectory+0x13c>)
 80017b8:	edc3 7a00 	vstr	s15, [r3]
	if(abs(finalAngle-startAngle)<10){
 80017bc:	4b2a      	ldr	r3, [pc, #168]	; (8001868 <trajectory+0x140>)
 80017be:	ed93 7a00 	vldr	s14, [r3]
 80017c2:	4b2a      	ldr	r3, [pc, #168]	; (800186c <trajectory+0x144>)
 80017c4:	edd3 7a00 	vldr	s15, [r3]
 80017c8:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017cc:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017d0:	ee17 3a90 	vmov	r3, s15
 80017d4:	f113 0f09 	cmn.w	r3, #9
 80017d8:	db15      	blt.n	8001806 <trajectory+0xde>
 80017da:	4b23      	ldr	r3, [pc, #140]	; (8001868 <trajectory+0x140>)
 80017dc:	ed93 7a00 	vldr	s14, [r3]
 80017e0:	4b22      	ldr	r3, [pc, #136]	; (800186c <trajectory+0x144>)
 80017e2:	edd3 7a00 	vldr	s15, [r3]
 80017e6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80017ea:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80017ee:	ee17 3a90 	vmov	r3, s15
 80017f2:	2b09      	cmp	r3, #9
 80017f4:	dc07      	bgt.n	8001806 <trajectory+0xde>
		vMax = 5;
 80017f6:	4b1e      	ldr	r3, [pc, #120]	; (8001870 <trajectory+0x148>)
 80017f8:	4a1e      	ldr	r2, [pc, #120]	; (8001874 <trajectory+0x14c>)
 80017fa:	601a      	str	r2, [r3, #0]
		k = 1000;
 80017fc:	4b1e      	ldr	r3, [pc, #120]	; (8001878 <trajectory+0x150>)
 80017fe:	f44f 727a 	mov.w	r2, #1000	; 0x3e8
 8001802:	801a      	strh	r2, [r3, #0]
 8001804:	e05a      	b.n	80018bc <trajectory+0x194>
	}
	else if (abs(finalAngle-startAngle)<50){
 8001806:	4b18      	ldr	r3, [pc, #96]	; (8001868 <trajectory+0x140>)
 8001808:	ed93 7a00 	vldr	s14, [r3]
 800180c:	4b17      	ldr	r3, [pc, #92]	; (800186c <trajectory+0x144>)
 800180e:	edd3 7a00 	vldr	s15, [r3]
 8001812:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001816:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 800181a:	ee17 3a90 	vmov	r3, s15
 800181e:	f113 0f31 	cmn.w	r3, #49	; 0x31
 8001822:	db2b      	blt.n	800187c <trajectory+0x154>
 8001824:	4b10      	ldr	r3, [pc, #64]	; (8001868 <trajectory+0x140>)
 8001826:	ed93 7a00 	vldr	s14, [r3]
 800182a:	4b10      	ldr	r3, [pc, #64]	; (800186c <trajectory+0x144>)
 800182c:	edd3 7a00 	vldr	s15, [r3]
 8001830:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001834:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001838:	ee17 3a90 	vmov	r3, s15
 800183c:	2b31      	cmp	r3, #49	; 0x31
 800183e:	dc1d      	bgt.n	800187c <trajectory+0x154>
		vMax = 5;
 8001840:	4b0b      	ldr	r3, [pc, #44]	; (8001870 <trajectory+0x148>)
 8001842:	4a0c      	ldr	r2, [pc, #48]	; (8001874 <trajectory+0x14c>)
 8001844:	601a      	str	r2, [r3, #0]
		k = 2000;
 8001846:	4b0c      	ldr	r3, [pc, #48]	; (8001878 <trajectory+0x150>)
 8001848:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800184c:	801a      	strh	r2, [r3, #0]
 800184e:	e035      	b.n	80018bc <trajectory+0x194>
 8001850:	200000f2 	.word	0x200000f2
 8001854:	200000f0 	.word	0x200000f0
 8001858:	200001ac 	.word	0x200001ac
 800185c:	200000ec 	.word	0x200000ec
 8001860:	200000c0 	.word	0x200000c0
 8001864:	200000e8 	.word	0x200000e8
 8001868:	20000004 	.word	0x20000004
 800186c:	200000dc 	.word	0x200000dc
 8001870:	2000000c 	.word	0x2000000c
 8001874:	40a00000 	.word	0x40a00000
 8001878:	2000001a 	.word	0x2000001a
	}
	else{
		vMax = 8;
 800187c:	4bd2      	ldr	r3, [pc, #840]	; (8001bc8 <trajectory+0x4a0>)
 800187e:	f04f 4282 	mov.w	r2, #1090519040	; 0x41000000
 8001882:	601a      	str	r2, [r3, #0]
		k = 2000;
 8001884:	4bd1      	ldr	r3, [pc, #836]	; (8001bcc <trajectory+0x4a4>)
 8001886:	f44f 62fa 	mov.w	r2, #2000	; 0x7d0
 800188a:	801a      	strh	r2, [r3, #0]
		if(abs(finalAngle-startAngle)>200){
 800188c:	4bd0      	ldr	r3, [pc, #832]	; (8001bd0 <trajectory+0x4a8>)
 800188e:	ed93 7a00 	vldr	s14, [r3]
 8001892:	4bd0      	ldr	r3, [pc, #832]	; (8001bd4 <trajectory+0x4ac>)
 8001894:	edd3 7a00 	vldr	s15, [r3]
 8001898:	ee77 7a67 	vsub.f32	s15, s14, s15
 800189c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 80018a0:	ee17 3a90 	vmov	r3, s15
 80018a4:	2b00      	cmp	r3, #0
 80018a6:	bfb8      	it	lt
 80018a8:	425b      	neglt	r3, r3
 80018aa:	2bc8      	cmp	r3, #200	; 0xc8
 80018ac:	dd06      	ble.n	80018bc <trajectory+0x194>
			vMax = 10;
 80018ae:	4bc6      	ldr	r3, [pc, #792]	; (8001bc8 <trajectory+0x4a0>)
 80018b0:	4ac9      	ldr	r2, [pc, #804]	; (8001bd8 <trajectory+0x4b0>)
 80018b2:	601a      	str	r2, [r3, #0]
			k = 5000;
 80018b4:	4bc5      	ldr	r3, [pc, #788]	; (8001bcc <trajectory+0x4a4>)
 80018b6:	f241 3288 	movw	r2, #5000	; 0x1388
 80018ba:	801a      	strh	r2, [r3, #0]
		}
	}
	if(state[0] == 1){
 80018bc:	4bc7      	ldr	r3, [pc, #796]	; (8001bdc <trajectory+0x4b4>)
 80018be:	781b      	ldrb	r3, [r3, #0]
 80018c0:	2b01      	cmp	r3, #1
 80018c2:	f040 81f1 	bne.w	8001ca8 <trajectory+0x580>
		if(state[0] != state[1]){
 80018c6:	4bc5      	ldr	r3, [pc, #788]	; (8001bdc <trajectory+0x4b4>)
 80018c8:	781a      	ldrb	r2, [r3, #0]
 80018ca:	4bc4      	ldr	r3, [pc, #784]	; (8001bdc <trajectory+0x4b4>)
 80018cc:	785b      	ldrb	r3, [r3, #1]
 80018ce:	429a      	cmp	r2, r3
 80018d0:	d008      	beq.n	80018e4 <trajectory+0x1bc>
			setTime = Timestamp;
 80018d2:	49c3      	ldr	r1, [pc, #780]	; (8001be0 <trajectory+0x4b8>)
 80018d4:	e9d7 2300 	ldrd	r2, r3, [r7]
 80018d8:	e9c1 2300 	strd	r2, r3, [r1]
			startAngle = currentPosition;
 80018dc:	4bc1      	ldr	r3, [pc, #772]	; (8001be4 <trajectory+0x4bc>)
 80018de:	681b      	ldr	r3, [r3, #0]
 80018e0:	4abc      	ldr	r2, [pc, #752]	; (8001bd4 <trajectory+0x4ac>)
 80018e2:	6013      	str	r3, [r2, #0]
//			if(abs(finalAngle-startAngle) > 200 ){
//				storeAngle = 10;
//			}
		}
		tim = (float) (Timestamp-setTime)/1000000;
 80018e4:	4bbe      	ldr	r3, [pc, #760]	; (8001be0 <trajectory+0x4b8>)
 80018e6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80018ea:	e9d7 0100 	ldrd	r0, r1, [r7]
 80018ee:	1a84      	subs	r4, r0, r2
 80018f0:	eb61 0503 	sbc.w	r5, r1, r3
 80018f4:	4620      	mov	r0, r4
 80018f6:	4629      	mov	r1, r5
 80018f8:	f7ff f9f2 	bl	8000ce0 <__aeabi_ul2f>
 80018fc:	ee06 0a90 	vmov	s13, r0
 8001900:	ed9f 7ab9 	vldr	s14, [pc, #740]	; 8001be8 <trajectory+0x4c0>
 8001904:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001908:	4bb8      	ldr	r3, [pc, #736]	; (8001bec <trajectory+0x4c4>)
 800190a:	edc3 7a00 	vstr	s15, [r3]
		tF = (float) (250*abs(finalAngle-startAngle-storeAngle)/(355*vMax));
 800190e:	4bb0      	ldr	r3, [pc, #704]	; (8001bd0 <trajectory+0x4a8>)
 8001910:	ed93 7a00 	vldr	s14, [r3]
 8001914:	4baf      	ldr	r3, [pc, #700]	; (8001bd4 <trajectory+0x4ac>)
 8001916:	edd3 7a00 	vldr	s15, [r3]
 800191a:	ee37 7a67 	vsub.f32	s14, s14, s15
 800191e:	4bb4      	ldr	r3, [pc, #720]	; (8001bf0 <trajectory+0x4c8>)
 8001920:	781b      	ldrb	r3, [r3, #0]
 8001922:	ee07 3a90 	vmov	s15, r3
 8001926:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 800192a:	ee77 7a67 	vsub.f32	s15, s14, s15
 800192e:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001932:	ee17 3a90 	vmov	r3, s15
 8001936:	2b00      	cmp	r3, #0
 8001938:	bfb8      	it	lt
 800193a:	425b      	neglt	r3, r3
 800193c:	22fa      	movs	r2, #250	; 0xfa
 800193e:	fb02 f303 	mul.w	r3, r2, r3
 8001942:	ee07 3a90 	vmov	s15, r3
 8001946:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 800194a:	4b9f      	ldr	r3, [pc, #636]	; (8001bc8 <trajectory+0x4a0>)
 800194c:	edd3 7a00 	vldr	s15, [r3]
 8001950:	ed9f 7aa8 	vldr	s14, [pc, #672]	; 8001bf4 <trajectory+0x4cc>
 8001954:	ee27 7a87 	vmul.f32	s14, s15, s14
 8001958:	eec6 7a87 	vdiv.f32	s15, s13, s14
 800195c:	4ba6      	ldr	r3, [pc, #664]	; (8001bf8 <trajectory+0x4d0>)
 800195e:	edc3 7a00 	vstr	s15, [r3]
		a0 = startAngle;
 8001962:	4b9c      	ldr	r3, [pc, #624]	; (8001bd4 <trajectory+0x4ac>)
 8001964:	681b      	ldr	r3, [r3, #0]
 8001966:	4aa5      	ldr	r2, [pc, #660]	; (8001bfc <trajectory+0x4d4>)
 8001968:	6013      	str	r3, [r2, #0]
		a1 = 0;
 800196a:	4ba5      	ldr	r3, [pc, #660]	; (8001c00 <trajectory+0x4d8>)
 800196c:	f04f 0200 	mov.w	r2, #0
 8001970:	601a      	str	r2, [r3, #0]
		a2 = (float) (3/pow(tF,2))*(finalAngle-startAngle);
 8001972:	4ba1      	ldr	r3, [pc, #644]	; (8001bf8 <trajectory+0x4d0>)
 8001974:	681b      	ldr	r3, [r3, #0]
 8001976:	4618      	mov	r0, r3
 8001978:	f7fe fd92 	bl	80004a0 <__aeabi_f2d>
 800197c:	4602      	mov	r2, r0
 800197e:	460b      	mov	r3, r1
 8001980:	ed9f 1b8b 	vldr	d1, [pc, #556]	; 8001bb0 <trajectory+0x488>
 8001984:	ec43 2b10 	vmov	d0, r2, r3
 8001988:	f003 fb9a 	bl	80050c0 <pow>
 800198c:	ec53 2b10 	vmov	r2, r3, d0
 8001990:	f04f 0000 	mov.w	r0, #0
 8001994:	499b      	ldr	r1, [pc, #620]	; (8001c04 <trajectory+0x4dc>)
 8001996:	f7fe ff05 	bl	80007a4 <__aeabi_ddiv>
 800199a:	4602      	mov	r2, r0
 800199c:	460b      	mov	r3, r1
 800199e:	4610      	mov	r0, r2
 80019a0:	4619      	mov	r1, r3
 80019a2:	f7ff f885 	bl	8000ab0 <__aeabi_d2f>
 80019a6:	ee06 0a90 	vmov	s13, r0
 80019aa:	4b89      	ldr	r3, [pc, #548]	; (8001bd0 <trajectory+0x4a8>)
 80019ac:	ed93 7a00 	vldr	s14, [r3]
 80019b0:	4b88      	ldr	r3, [pc, #544]	; (8001bd4 <trajectory+0x4ac>)
 80019b2:	edd3 7a00 	vldr	s15, [r3]
 80019b6:	ee77 7a67 	vsub.f32	s15, s14, s15
 80019ba:	ee66 7aa7 	vmul.f32	s15, s13, s15
 80019be:	4b92      	ldr	r3, [pc, #584]	; (8001c08 <trajectory+0x4e0>)
 80019c0:	edc3 7a00 	vstr	s15, [r3]
		a3 = (float) -(2/pow(tF,3))*(finalAngle-startAngle);
 80019c4:	4b8c      	ldr	r3, [pc, #560]	; (8001bf8 <trajectory+0x4d0>)
 80019c6:	681b      	ldr	r3, [r3, #0]
 80019c8:	4618      	mov	r0, r3
 80019ca:	f7fe fd69 	bl	80004a0 <__aeabi_f2d>
 80019ce:	4602      	mov	r2, r0
 80019d0:	460b      	mov	r3, r1
 80019d2:	ed9f 1b79 	vldr	d1, [pc, #484]	; 8001bb8 <trajectory+0x490>
 80019d6:	ec43 2b10 	vmov	d0, r2, r3
 80019da:	f003 fb71 	bl	80050c0 <pow>
 80019de:	ec53 2b10 	vmov	r2, r3, d0
 80019e2:	f04f 0000 	mov.w	r0, #0
 80019e6:	f04f 4180 	mov.w	r1, #1073741824	; 0x40000000
 80019ea:	f7fe fedb 	bl	80007a4 <__aeabi_ddiv>
 80019ee:	4602      	mov	r2, r0
 80019f0:	460b      	mov	r3, r1
 80019f2:	4610      	mov	r0, r2
 80019f4:	4619      	mov	r1, r3
 80019f6:	f7ff f85b 	bl	8000ab0 <__aeabi_d2f>
 80019fa:	4603      	mov	r3, r0
 80019fc:	ee07 3a90 	vmov	s15, r3
 8001a00:	eeb1 7a67 	vneg.f32	s14, s15
 8001a04:	4b72      	ldr	r3, [pc, #456]	; (8001bd0 <trajectory+0x4a8>)
 8001a06:	edd3 6a00 	vldr	s13, [r3]
 8001a0a:	4b72      	ldr	r3, [pc, #456]	; (8001bd4 <trajectory+0x4ac>)
 8001a0c:	edd3 7a00 	vldr	s15, [r3]
 8001a10:	ee76 7ae7 	vsub.f32	s15, s13, s15
 8001a14:	ee67 7a27 	vmul.f32	s15, s14, s15
 8001a18:	4b7c      	ldr	r3, [pc, #496]	; (8001c0c <trajectory+0x4e4>)
 8001a1a:	edc3 7a00 	vstr	s15, [r3]
		position = (float) a0+ (a1*tim) +(a2*pow(tim,2)) +(a3*pow(tim,3));
 8001a1e:	4b78      	ldr	r3, [pc, #480]	; (8001c00 <trajectory+0x4d8>)
 8001a20:	ed93 7a00 	vldr	s14, [r3]
 8001a24:	4b71      	ldr	r3, [pc, #452]	; (8001bec <trajectory+0x4c4>)
 8001a26:	edd3 7a00 	vldr	s15, [r3]
 8001a2a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001a2e:	4b73      	ldr	r3, [pc, #460]	; (8001bfc <trajectory+0x4d4>)
 8001a30:	edd3 7a00 	vldr	s15, [r3]
 8001a34:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001a38:	ee17 0a90 	vmov	r0, s15
 8001a3c:	f7fe fd30 	bl	80004a0 <__aeabi_f2d>
 8001a40:	4604      	mov	r4, r0
 8001a42:	460d      	mov	r5, r1
 8001a44:	4b70      	ldr	r3, [pc, #448]	; (8001c08 <trajectory+0x4e0>)
 8001a46:	681b      	ldr	r3, [r3, #0]
 8001a48:	4618      	mov	r0, r3
 8001a4a:	f7fe fd29 	bl	80004a0 <__aeabi_f2d>
 8001a4e:	4680      	mov	r8, r0
 8001a50:	4689      	mov	r9, r1
 8001a52:	4b66      	ldr	r3, [pc, #408]	; (8001bec <trajectory+0x4c4>)
 8001a54:	681b      	ldr	r3, [r3, #0]
 8001a56:	4618      	mov	r0, r3
 8001a58:	f7fe fd22 	bl	80004a0 <__aeabi_f2d>
 8001a5c:	4602      	mov	r2, r0
 8001a5e:	460b      	mov	r3, r1
 8001a60:	ed9f 1b53 	vldr	d1, [pc, #332]	; 8001bb0 <trajectory+0x488>
 8001a64:	ec43 2b10 	vmov	d0, r2, r3
 8001a68:	f003 fb2a 	bl	80050c0 <pow>
 8001a6c:	ec53 2b10 	vmov	r2, r3, d0
 8001a70:	4640      	mov	r0, r8
 8001a72:	4649      	mov	r1, r9
 8001a74:	f7fe fd6c 	bl	8000550 <__aeabi_dmul>
 8001a78:	4602      	mov	r2, r0
 8001a7a:	460b      	mov	r3, r1
 8001a7c:	4620      	mov	r0, r4
 8001a7e:	4629      	mov	r1, r5
 8001a80:	f7fe fbb0 	bl	80001e4 <__adddf3>
 8001a84:	4602      	mov	r2, r0
 8001a86:	460b      	mov	r3, r1
 8001a88:	4690      	mov	r8, r2
 8001a8a:	4699      	mov	r9, r3
 8001a8c:	4b5f      	ldr	r3, [pc, #380]	; (8001c0c <trajectory+0x4e4>)
 8001a8e:	681b      	ldr	r3, [r3, #0]
 8001a90:	4618      	mov	r0, r3
 8001a92:	f7fe fd05 	bl	80004a0 <__aeabi_f2d>
 8001a96:	4604      	mov	r4, r0
 8001a98:	460d      	mov	r5, r1
 8001a9a:	4b54      	ldr	r3, [pc, #336]	; (8001bec <trajectory+0x4c4>)
 8001a9c:	681b      	ldr	r3, [r3, #0]
 8001a9e:	4618      	mov	r0, r3
 8001aa0:	f7fe fcfe 	bl	80004a0 <__aeabi_f2d>
 8001aa4:	4602      	mov	r2, r0
 8001aa6:	460b      	mov	r3, r1
 8001aa8:	ed9f 1b43 	vldr	d1, [pc, #268]	; 8001bb8 <trajectory+0x490>
 8001aac:	ec43 2b10 	vmov	d0, r2, r3
 8001ab0:	f003 fb06 	bl	80050c0 <pow>
 8001ab4:	ec53 2b10 	vmov	r2, r3, d0
 8001ab8:	4620      	mov	r0, r4
 8001aba:	4629      	mov	r1, r5
 8001abc:	f7fe fd48 	bl	8000550 <__aeabi_dmul>
 8001ac0:	4602      	mov	r2, r0
 8001ac2:	460b      	mov	r3, r1
 8001ac4:	4640      	mov	r0, r8
 8001ac6:	4649      	mov	r1, r9
 8001ac8:	f7fe fb8c 	bl	80001e4 <__adddf3>
 8001acc:	4602      	mov	r2, r0
 8001ace:	460b      	mov	r3, r1
 8001ad0:	4610      	mov	r0, r2
 8001ad2:	4619      	mov	r1, r3
 8001ad4:	f7fe ffec 	bl	8000ab0 <__aeabi_d2f>
 8001ad8:	4603      	mov	r3, r0
 8001ada:	4a4d      	ldr	r2, [pc, #308]	; (8001c10 <trajectory+0x4e8>)
 8001adc:	6013      	str	r3, [r2, #0]
		velocity = (float) (a1 +(2*a2*tim) +(3*a3*pow(tim,2)))/6;
 8001ade:	4b4a      	ldr	r3, [pc, #296]	; (8001c08 <trajectory+0x4e0>)
 8001ae0:	edd3 7a00 	vldr	s15, [r3]
 8001ae4:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001ae8:	4b40      	ldr	r3, [pc, #256]	; (8001bec <trajectory+0x4c4>)
 8001aea:	edd3 7a00 	vldr	s15, [r3]
 8001aee:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001af2:	4b43      	ldr	r3, [pc, #268]	; (8001c00 <trajectory+0x4d8>)
 8001af4:	edd3 7a00 	vldr	s15, [r3]
 8001af8:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001afc:	ee17 0a90 	vmov	r0, s15
 8001b00:	f7fe fcce 	bl	80004a0 <__aeabi_f2d>
 8001b04:	4604      	mov	r4, r0
 8001b06:	460d      	mov	r5, r1
 8001b08:	4b40      	ldr	r3, [pc, #256]	; (8001c0c <trajectory+0x4e4>)
 8001b0a:	edd3 7a00 	vldr	s15, [r3]
 8001b0e:	eeb0 7a08 	vmov.f32	s14, #8	; 0x40400000  3.0
 8001b12:	ee67 7a87 	vmul.f32	s15, s15, s14
 8001b16:	ee17 0a90 	vmov	r0, s15
 8001b1a:	f7fe fcc1 	bl	80004a0 <__aeabi_f2d>
 8001b1e:	4680      	mov	r8, r0
 8001b20:	4689      	mov	r9, r1
 8001b22:	4b32      	ldr	r3, [pc, #200]	; (8001bec <trajectory+0x4c4>)
 8001b24:	681b      	ldr	r3, [r3, #0]
 8001b26:	4618      	mov	r0, r3
 8001b28:	f7fe fcba 	bl	80004a0 <__aeabi_f2d>
 8001b2c:	4602      	mov	r2, r0
 8001b2e:	460b      	mov	r3, r1
 8001b30:	ed9f 1b1f 	vldr	d1, [pc, #124]	; 8001bb0 <trajectory+0x488>
 8001b34:	ec43 2b10 	vmov	d0, r2, r3
 8001b38:	f003 fac2 	bl	80050c0 <pow>
 8001b3c:	ec53 2b10 	vmov	r2, r3, d0
 8001b40:	4640      	mov	r0, r8
 8001b42:	4649      	mov	r1, r9
 8001b44:	f7fe fd04 	bl	8000550 <__aeabi_dmul>
 8001b48:	4602      	mov	r2, r0
 8001b4a:	460b      	mov	r3, r1
 8001b4c:	4620      	mov	r0, r4
 8001b4e:	4629      	mov	r1, r5
 8001b50:	f7fe fb48 	bl	80001e4 <__adddf3>
 8001b54:	4602      	mov	r2, r0
 8001b56:	460b      	mov	r3, r1
 8001b58:	4610      	mov	r0, r2
 8001b5a:	4619      	mov	r1, r3
 8001b5c:	f7fe ffa8 	bl	8000ab0 <__aeabi_d2f>
 8001b60:	ee06 0a90 	vmov	s13, r0
 8001b64:	eeb1 7a08 	vmov.f32	s14, #24	; 0x40c00000  6.0
 8001b68:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8001b6c:	4b29      	ldr	r3, [pc, #164]	; (8001c14 <trajectory+0x4ec>)
 8001b6e:	edc3 7a00 	vstr	s15, [r3]
		alpha = (float) ((2*a2) +(6*a3*tim))*2*3.14/360;
 8001b72:	4b25      	ldr	r3, [pc, #148]	; (8001c08 <trajectory+0x4e0>)
 8001b74:	edd3 7a00 	vldr	s15, [r3]
 8001b78:	ee37 7aa7 	vadd.f32	s14, s15, s15
 8001b7c:	4b23      	ldr	r3, [pc, #140]	; (8001c0c <trajectory+0x4e4>)
 8001b7e:	edd3 7a00 	vldr	s15, [r3]
 8001b82:	eef1 6a08 	vmov.f32	s13, #24	; 0x40c00000  6.0
 8001b86:	ee67 6aa6 	vmul.f32	s13, s15, s13
 8001b8a:	4b18      	ldr	r3, [pc, #96]	; (8001bec <trajectory+0x4c4>)
 8001b8c:	edd3 7a00 	vldr	s15, [r3]
 8001b90:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001b94:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001b98:	ee77 7aa7 	vadd.f32	s15, s15, s15
 8001b9c:	ee17 0a90 	vmov	r0, s15
 8001ba0:	f7fe fc7e 	bl	80004a0 <__aeabi_f2d>
 8001ba4:	a306      	add	r3, pc, #24	; (adr r3, 8001bc0 <trajectory+0x498>)
 8001ba6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8001baa:	f7fe fcd1 	bl	8000550 <__aeabi_dmul>
 8001bae:	e033      	b.n	8001c18 <trajectory+0x4f0>
 8001bb0:	00000000 	.word	0x00000000
 8001bb4:	40000000 	.word	0x40000000
 8001bb8:	00000000 	.word	0x00000000
 8001bbc:	40080000 	.word	0x40080000
 8001bc0:	51eb851f 	.word	0x51eb851f
 8001bc4:	40091eb8 	.word	0x40091eb8
 8001bc8:	2000000c 	.word	0x2000000c
 8001bcc:	2000001a 	.word	0x2000001a
 8001bd0:	20000004 	.word	0x20000004
 8001bd4:	200000dc 	.word	0x200000dc
 8001bd8:	41200000 	.word	0x41200000
 8001bdc:	200000f0 	.word	0x200000f0
 8001be0:	20000118 	.word	0x20000118
 8001be4:	200000e8 	.word	0x200000e8
 8001be8:	49742400 	.word	0x49742400
 8001bec:	200000d4 	.word	0x200000d4
 8001bf0:	200000e4 	.word	0x200000e4
 8001bf4:	43b18000 	.word	0x43b18000
 8001bf8:	20000100 	.word	0x20000100
 8001bfc:	20000120 	.word	0x20000120
 8001c00:	20000124 	.word	0x20000124
 8001c04:	40080000 	.word	0x40080000
 8001c08:	20000128 	.word	0x20000128
 8001c0c:	2000012c 	.word	0x2000012c
 8001c10:	200000cc 	.word	0x200000cc
 8001c14:	200000c8 	.word	0x200000c8
 8001c18:	4602      	mov	r2, r0
 8001c1a:	460b      	mov	r3, r1
 8001c1c:	4610      	mov	r0, r2
 8001c1e:	4619      	mov	r1, r3
 8001c20:	f04f 0200 	mov.w	r2, #0
 8001c24:	4b25      	ldr	r3, [pc, #148]	; (8001cbc <trajectory+0x594>)
 8001c26:	f7fe fdbd 	bl	80007a4 <__aeabi_ddiv>
 8001c2a:	4602      	mov	r2, r0
 8001c2c:	460b      	mov	r3, r1
 8001c2e:	4610      	mov	r0, r2
 8001c30:	4619      	mov	r1, r3
 8001c32:	f7fe ff3d 	bl	8000ab0 <__aeabi_d2f>
 8001c36:	4603      	mov	r3, r0
 8001c38:	4a21      	ldr	r2, [pc, #132]	; (8001cc0 <trajectory+0x598>)
 8001c3a:	6013      	str	r3, [r2, #0]
		if ((abs(currentPosition - finalAngle) < 2)||(tim >= tF)){
 8001c3c:	4b21      	ldr	r3, [pc, #132]	; (8001cc4 <trajectory+0x59c>)
 8001c3e:	ed93 7a00 	vldr	s14, [r3]
 8001c42:	4b21      	ldr	r3, [pc, #132]	; (8001cc8 <trajectory+0x5a0>)
 8001c44:	edd3 7a00 	vldr	s15, [r3]
 8001c48:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c4c:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c50:	ee17 3a90 	vmov	r3, s15
 8001c54:	f1b3 3fff 	cmp.w	r3, #4294967295
 8001c58:	db0d      	blt.n	8001c76 <trajectory+0x54e>
 8001c5a:	4b1a      	ldr	r3, [pc, #104]	; (8001cc4 <trajectory+0x59c>)
 8001c5c:	ed93 7a00 	vldr	s14, [r3]
 8001c60:	4b19      	ldr	r3, [pc, #100]	; (8001cc8 <trajectory+0x5a0>)
 8001c62:	edd3 7a00 	vldr	s15, [r3]
 8001c66:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001c6a:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001c6e:	ee17 3a90 	vmov	r3, s15
 8001c72:	2b01      	cmp	r3, #1
 8001c74:	dd0a      	ble.n	8001c8c <trajectory+0x564>
 8001c76:	4b15      	ldr	r3, [pc, #84]	; (8001ccc <trajectory+0x5a4>)
 8001c78:	ed93 7a00 	vldr	s14, [r3]
 8001c7c:	4b14      	ldr	r3, [pc, #80]	; (8001cd0 <trajectory+0x5a8>)
 8001c7e:	edd3 7a00 	vldr	s15, [r3]
 8001c82:	eeb4 7ae7 	vcmpe.f32	s14, s15
 8001c86:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001c8a:	db0d      	blt.n	8001ca8 <trajectory+0x580>
			start = 0;
 8001c8c:	4b11      	ldr	r3, [pc, #68]	; (8001cd4 <trajectory+0x5ac>)
 8001c8e:	2200      	movs	r2, #0
 8001c90:	701a      	strb	r2, [r3, #0]
			velocity = 0;
 8001c92:	4b11      	ldr	r3, [pc, #68]	; (8001cd8 <trajectory+0x5b0>)
 8001c94:	f04f 0200 	mov.w	r2, #0
 8001c98:	601a      	str	r2, [r3, #0]
			stopTime = Timestamp;
 8001c9a:	e9d7 0100 	ldrd	r0, r1, [r7]
 8001c9e:	f7ff f81f 	bl	8000ce0 <__aeabi_ul2f>
 8001ca2:	4603      	mov	r3, r0
 8001ca4:	4a0d      	ldr	r2, [pc, #52]	; (8001cdc <trajectory+0x5b4>)
 8001ca6:	6013      	str	r3, [r2, #0]
		}
	}
	rawPosition[1] = rawPosition[0];
 8001ca8:	4b0d      	ldr	r3, [pc, #52]	; (8001ce0 <trajectory+0x5b8>)
 8001caa:	881a      	ldrh	r2, [r3, #0]
 8001cac:	4b0c      	ldr	r3, [pc, #48]	; (8001ce0 <trajectory+0x5b8>)
 8001cae:	805a      	strh	r2, [r3, #2]
}
 8001cb0:	bf00      	nop
 8001cb2:	3708      	adds	r7, #8
 8001cb4:	46bd      	mov	sp, r7
 8001cb6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 8001cba:	bf00      	nop
 8001cbc:	40768000 	.word	0x40768000
 8001cc0:	200000d0 	.word	0x200000d0
 8001cc4:	200000e8 	.word	0x200000e8
 8001cc8:	20000004 	.word	0x20000004
 8001ccc:	200000d4 	.word	0x200000d4
 8001cd0:	20000100 	.word	0x20000100
 8001cd4:	200000f2 	.word	0x200000f2
 8001cd8:	200000c8 	.word	0x200000c8
 8001cdc:	200000e0 	.word	0x200000e0
 8001ce0:	200000ec 	.word	0x200000ec

08001ce4 <pidVelocity>:

void pidVelocity(){
 8001ce4:	b480      	push	{r7}
 8001ce6:	af00      	add	r7, sp, #0
	static float error = 0;
	static float integral = 0;
	static float derivative = 0;
	error = abs(velocity) - abs(EncoderVel);
 8001ce8:	4b44      	ldr	r3, [pc, #272]	; (8001dfc <pidVelocity+0x118>)
 8001cea:	edd3 7a00 	vldr	s15, [r3]
 8001cee:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001cf2:	ee17 3a90 	vmov	r3, s15
 8001cf6:	ea83 72e3 	eor.w	r2, r3, r3, asr #31
 8001cfa:	eba2 72e3 	sub.w	r2, r2, r3, asr #31
 8001cfe:	4b40      	ldr	r3, [pc, #256]	; (8001e00 <pidVelocity+0x11c>)
 8001d00:	edd3 7a00 	vldr	s15, [r3]
 8001d04:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d08:	ee17 3a90 	vmov	r3, s15
 8001d0c:	2b00      	cmp	r3, #0
 8001d0e:	bfb8      	it	lt
 8001d10:	425b      	neglt	r3, r3
 8001d12:	1ad3      	subs	r3, r2, r3
 8001d14:	ee07 3a90 	vmov	s15, r3
 8001d18:	eef8 7ae7 	vcvt.f32.s32	s15, s15
 8001d1c:	4b39      	ldr	r3, [pc, #228]	; (8001e04 <pidVelocity+0x120>)
 8001d1e:	edc3 7a00 	vstr	s15, [r3]
	integral = integral+error;
 8001d22:	4b39      	ldr	r3, [pc, #228]	; (8001e08 <pidVelocity+0x124>)
 8001d24:	ed93 7a00 	vldr	s14, [r3]
 8001d28:	4b36      	ldr	r3, [pc, #216]	; (8001e04 <pidVelocity+0x120>)
 8001d2a:	edd3 7a00 	vldr	s15, [r3]
 8001d2e:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d32:	4b35      	ldr	r3, [pc, #212]	; (8001e08 <pidVelocity+0x124>)
 8001d34:	edc3 7a00 	vstr	s15, [r3]
	PWMOut = k + Kp*error + Ki*integral +Kd*(error-derivative);
 8001d38:	4b34      	ldr	r3, [pc, #208]	; (8001e0c <pidVelocity+0x128>)
 8001d3a:	881b      	ldrh	r3, [r3, #0]
 8001d3c:	ee07 3a90 	vmov	s15, r3
 8001d40:	eeb8 7ae7 	vcvt.f32.s32	s14, s15
 8001d44:	4b32      	ldr	r3, [pc, #200]	; (8001e10 <pidVelocity+0x12c>)
 8001d46:	881b      	ldrh	r3, [r3, #0]
 8001d48:	ee07 3a90 	vmov	s15, r3
 8001d4c:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d50:	4b2c      	ldr	r3, [pc, #176]	; (8001e04 <pidVelocity+0x120>)
 8001d52:	edd3 7a00 	vldr	s15, [r3]
 8001d56:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d5a:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d5e:	4b2d      	ldr	r3, [pc, #180]	; (8001e14 <pidVelocity+0x130>)
 8001d60:	edd3 6a00 	vldr	s13, [r3]
 8001d64:	4b28      	ldr	r3, [pc, #160]	; (8001e08 <pidVelocity+0x124>)
 8001d66:	edd3 7a00 	vldr	s15, [r3]
 8001d6a:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d6e:	ee37 7a27 	vadd.f32	s14, s14, s15
 8001d72:	4b29      	ldr	r3, [pc, #164]	; (8001e18 <pidVelocity+0x134>)
 8001d74:	881b      	ldrh	r3, [r3, #0]
 8001d76:	ee07 3a90 	vmov	s15, r3
 8001d7a:	eef8 6ae7 	vcvt.f32.s32	s13, s15
 8001d7e:	4b21      	ldr	r3, [pc, #132]	; (8001e04 <pidVelocity+0x120>)
 8001d80:	ed93 6a00 	vldr	s12, [r3]
 8001d84:	4b25      	ldr	r3, [pc, #148]	; (8001e1c <pidVelocity+0x138>)
 8001d86:	edd3 7a00 	vldr	s15, [r3]
 8001d8a:	ee76 7a67 	vsub.f32	s15, s12, s15
 8001d8e:	ee66 7aa7 	vmul.f32	s15, s13, s15
 8001d92:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001d96:	eefd 7ae7 	vcvt.s32.f32	s15, s15
 8001d9a:	ee17 2a90 	vmov	r2, s15
 8001d9e:	4b20      	ldr	r3, [pc, #128]	; (8001e20 <pidVelocity+0x13c>)
 8001da0:	601a      	str	r2, [r3, #0]
	derivative = error;
 8001da2:	4b18      	ldr	r3, [pc, #96]	; (8001e04 <pidVelocity+0x120>)
 8001da4:	681b      	ldr	r3, [r3, #0]
 8001da6:	4a1d      	ldr	r2, [pc, #116]	; (8001e1c <pidVelocity+0x138>)
 8001da8:	6013      	str	r3, [r2, #0]
	if (abs(PWMOut) > 10000){
 8001daa:	4b1d      	ldr	r3, [pc, #116]	; (8001e20 <pidVelocity+0x13c>)
 8001dac:	681b      	ldr	r3, [r3, #0]
 8001dae:	2b00      	cmp	r3, #0
 8001db0:	bfb8      	it	lt
 8001db2:	425b      	neglt	r3, r3
 8001db4:	f242 7210 	movw	r2, #10000	; 0x2710
 8001db8:	4293      	cmp	r3, r2
 8001dba:	dd03      	ble.n	8001dc4 <pidVelocity+0xe0>
		PWMOut = 10000;
 8001dbc:	4b18      	ldr	r3, [pc, #96]	; (8001e20 <pidVelocity+0x13c>)
 8001dbe:	f242 7210 	movw	r2, #10000	; 0x2710
 8001dc2:	601a      	str	r2, [r3, #0]
	}

	if (velocity == 0){
 8001dc4:	4b0d      	ldr	r3, [pc, #52]	; (8001dfc <pidVelocity+0x118>)
 8001dc6:	edd3 7a00 	vldr	s15, [r3]
 8001dca:	eef5 7a40 	vcmp.f32	s15, #0.0
 8001dce:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 8001dd2:	d10e      	bne.n	8001df2 <pidVelocity+0x10e>
		PWMOut = 0;
 8001dd4:	4b12      	ldr	r3, [pc, #72]	; (8001e20 <pidVelocity+0x13c>)
 8001dd6:	2200      	movs	r2, #0
 8001dd8:	601a      	str	r2, [r3, #0]
		error = 0;
 8001dda:	4b0a      	ldr	r3, [pc, #40]	; (8001e04 <pidVelocity+0x120>)
 8001ddc:	f04f 0200 	mov.w	r2, #0
 8001de0:	601a      	str	r2, [r3, #0]
		integral = 0;
 8001de2:	4b09      	ldr	r3, [pc, #36]	; (8001e08 <pidVelocity+0x124>)
 8001de4:	f04f 0200 	mov.w	r2, #0
 8001de8:	601a      	str	r2, [r3, #0]
		derivative = 0;
 8001dea:	4b0c      	ldr	r3, [pc, #48]	; (8001e1c <pidVelocity+0x138>)
 8001dec:	f04f 0200 	mov.w	r2, #0
 8001df0:	601a      	str	r2, [r3, #0]
	}
}
 8001df2:	bf00      	nop
 8001df4:	46bd      	mov	sp, r7
 8001df6:	f85d 7b04 	ldr.w	r7, [sp], #4
 8001dfa:	4770      	bx	lr
 8001dfc:	200000c8 	.word	0x200000c8
 8001e00:	200000c4 	.word	0x200000c4
 8001e04:	20000130 	.word	0x20000130
 8001e08:	20000134 	.word	0x20000134
 8001e0c:	2000001a 	.word	0x2000001a
 8001e10:	20000010 	.word	0x20000010
 8001e14:	20000014 	.word	0x20000014
 8001e18:	20000018 	.word	0x20000018
 8001e1c:	20000138 	.word	0x20000138
 8001e20:	20000000 	.word	0x20000000

08001e24 <gotoSethome>:

void gotoSethome(){
 8001e24:	b580      	push	{r7, lr}
 8001e26:	af00      	add	r7, sp, #0
	if (SetHome == 1){
 8001e28:	4b05      	ldr	r3, [pc, #20]	; (8001e40 <gotoSethome+0x1c>)
 8001e2a:	781b      	ldrb	r3, [r3, #0]
 8001e2c:	2b00      	cmp	r3, #0
 8001e2e:	d005      	beq.n	8001e3c <gotoSethome+0x18>
		velocity = 3;
 8001e30:	4b04      	ldr	r3, [pc, #16]	; (8001e44 <gotoSethome+0x20>)
 8001e32:	4a05      	ldr	r2, [pc, #20]	; (8001e48 <gotoSethome+0x24>)
 8001e34:	601a      	str	r2, [r3, #0]
		HAL_NVIC_EnableIRQ(EXTI9_5_IRQn);
 8001e36:	2017      	movs	r0, #23
 8001e38:	f000 ff2f 	bl	8002c9a <HAL_NVIC_EnableIRQ>
	}
}
 8001e3c:	bf00      	nop
 8001e3e:	bd80      	pop	{r7, pc}
 8001e40:	200000d9 	.word	0x200000d9
 8001e44:	200000c8 	.word	0x200000c8
 8001e48:	40400000 	.word	0x40400000
 8001e4c:	00000000 	.word	0x00000000

08001e50 <kalman>:
void kalman(){
 8001e50:	e92d 4fb0 	stmdb	sp!, {r4, r5, r7, r8, r9, sl, fp, lr}
 8001e54:	af00      	add	r7, sp, #0
	static float P21predictPRE = 0;
	static float P22predictPRE = 0;
	static float errorVel = 0;
	static float delt = 0;

	delt = (float) dt/1000000;
 8001e56:	4bda      	ldr	r3, [pc, #872]	; (80021c0 <kalman+0x370>)
 8001e58:	881b      	ldrh	r3, [r3, #0]
 8001e5a:	ee07 3a90 	vmov	s15, r3
 8001e5e:	eeb8 7a67 	vcvt.f32.u32	s14, s15
 8001e62:	eddf 6ad8 	vldr	s13, [pc, #864]	; 80021c4 <kalman+0x374>
 8001e66:	eec7 7a26 	vdiv.f32	s15, s14, s13
 8001e6a:	4bd7      	ldr	r3, [pc, #860]	; (80021c8 <kalman+0x378>)
 8001e6c:	edc3 7a00 	vstr	s15, [r3]
	omegaPredict =  (float) omegaPredictPre;
 8001e70:	4bd6      	ldr	r3, [pc, #856]	; (80021cc <kalman+0x37c>)
 8001e72:	681b      	ldr	r3, [r3, #0]
 8001e74:	4ad6      	ldr	r2, [pc, #856]	; (80021d0 <kalman+0x380>)
 8001e76:	6013      	str	r3, [r2, #0]
	errorVel = (float) EncoderVelocity_Update() - omegaPredict;
 8001e78:	f7ff fbf6 	bl	8001668 <EncoderVelocity_Update>
 8001e7c:	eeb0 7a40 	vmov.f32	s14, s0
 8001e80:	4bd3      	ldr	r3, [pc, #844]	; (80021d0 <kalman+0x380>)
 8001e82:	edd3 7a00 	vldr	s15, [r3]
 8001e86:	ee77 7a67 	vsub.f32	s15, s14, s15
 8001e8a:	4bd2      	ldr	r3, [pc, #840]	; (80021d4 <kalman+0x384>)
 8001e8c:	edc3 7a00 	vstr	s15, [r3]

	P11predict = (float) P11predictPRE+delt*P21predictPRE+(pow(Gl,2)*pow(delt,4))/4+(pow(delt,2)*(P12predictPRE+delt*P22predictPRE))/delt;
 8001e90:	4bcd      	ldr	r3, [pc, #820]	; (80021c8 <kalman+0x378>)
 8001e92:	ed93 7a00 	vldr	s14, [r3]
 8001e96:	4bd0      	ldr	r3, [pc, #832]	; (80021d8 <kalman+0x388>)
 8001e98:	edd3 7a00 	vldr	s15, [r3]
 8001e9c:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001ea0:	4bce      	ldr	r3, [pc, #824]	; (80021dc <kalman+0x38c>)
 8001ea2:	edd3 7a00 	vldr	s15, [r3]
 8001ea6:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001eaa:	ee17 0a90 	vmov	r0, s15
 8001eae:	f7fe faf7 	bl	80004a0 <__aeabi_f2d>
 8001eb2:	4604      	mov	r4, r0
 8001eb4:	460d      	mov	r5, r1
 8001eb6:	4bca      	ldr	r3, [pc, #808]	; (80021e0 <kalman+0x390>)
 8001eb8:	681b      	ldr	r3, [r3, #0]
 8001eba:	4618      	mov	r0, r3
 8001ebc:	f7fe faf0 	bl	80004a0 <__aeabi_f2d>
 8001ec0:	4602      	mov	r2, r0
 8001ec2:	460b      	mov	r3, r1
 8001ec4:	ed9f 1bba 	vldr	d1, [pc, #744]	; 80021b0 <kalman+0x360>
 8001ec8:	ec43 2b10 	vmov	d0, r2, r3
 8001ecc:	f003 f8f8 	bl	80050c0 <pow>
 8001ed0:	ec59 8b10 	vmov	r8, r9, d0
 8001ed4:	4bbc      	ldr	r3, [pc, #752]	; (80021c8 <kalman+0x378>)
 8001ed6:	681b      	ldr	r3, [r3, #0]
 8001ed8:	4618      	mov	r0, r3
 8001eda:	f7fe fae1 	bl	80004a0 <__aeabi_f2d>
 8001ede:	4602      	mov	r2, r0
 8001ee0:	460b      	mov	r3, r1
 8001ee2:	ed9f 1bb5 	vldr	d1, [pc, #724]	; 80021b8 <kalman+0x368>
 8001ee6:	ec43 2b10 	vmov	d0, r2, r3
 8001eea:	f003 f8e9 	bl	80050c0 <pow>
 8001eee:	ec53 2b10 	vmov	r2, r3, d0
 8001ef2:	4640      	mov	r0, r8
 8001ef4:	4649      	mov	r1, r9
 8001ef6:	f7fe fb2b 	bl	8000550 <__aeabi_dmul>
 8001efa:	4602      	mov	r2, r0
 8001efc:	460b      	mov	r3, r1
 8001efe:	4610      	mov	r0, r2
 8001f00:	4619      	mov	r1, r3
 8001f02:	f04f 0200 	mov.w	r2, #0
 8001f06:	4bb7      	ldr	r3, [pc, #732]	; (80021e4 <kalman+0x394>)
 8001f08:	f7fe fc4c 	bl	80007a4 <__aeabi_ddiv>
 8001f0c:	4602      	mov	r2, r0
 8001f0e:	460b      	mov	r3, r1
 8001f10:	4620      	mov	r0, r4
 8001f12:	4629      	mov	r1, r5
 8001f14:	f7fe f966 	bl	80001e4 <__adddf3>
 8001f18:	4602      	mov	r2, r0
 8001f1a:	460b      	mov	r3, r1
 8001f1c:	4614      	mov	r4, r2
 8001f1e:	461d      	mov	r5, r3
 8001f20:	4ba9      	ldr	r3, [pc, #676]	; (80021c8 <kalman+0x378>)
 8001f22:	681b      	ldr	r3, [r3, #0]
 8001f24:	4618      	mov	r0, r3
 8001f26:	f7fe fabb 	bl	80004a0 <__aeabi_f2d>
 8001f2a:	4602      	mov	r2, r0
 8001f2c:	460b      	mov	r3, r1
 8001f2e:	ed9f 1ba0 	vldr	d1, [pc, #640]	; 80021b0 <kalman+0x360>
 8001f32:	ec43 2b10 	vmov	d0, r2, r3
 8001f36:	f003 f8c3 	bl	80050c0 <pow>
 8001f3a:	ec59 8b10 	vmov	r8, r9, d0
 8001f3e:	4ba2      	ldr	r3, [pc, #648]	; (80021c8 <kalman+0x378>)
 8001f40:	ed93 7a00 	vldr	s14, [r3]
 8001f44:	4ba8      	ldr	r3, [pc, #672]	; (80021e8 <kalman+0x398>)
 8001f46:	edd3 7a00 	vldr	s15, [r3]
 8001f4a:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001f4e:	4ba7      	ldr	r3, [pc, #668]	; (80021ec <kalman+0x39c>)
 8001f50:	edd3 7a00 	vldr	s15, [r3]
 8001f54:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001f58:	ee17 0a90 	vmov	r0, s15
 8001f5c:	f7fe faa0 	bl	80004a0 <__aeabi_f2d>
 8001f60:	4602      	mov	r2, r0
 8001f62:	460b      	mov	r3, r1
 8001f64:	4640      	mov	r0, r8
 8001f66:	4649      	mov	r1, r9
 8001f68:	f7fe faf2 	bl	8000550 <__aeabi_dmul>
 8001f6c:	4602      	mov	r2, r0
 8001f6e:	460b      	mov	r3, r1
 8001f70:	4690      	mov	r8, r2
 8001f72:	4699      	mov	r9, r3
 8001f74:	4b94      	ldr	r3, [pc, #592]	; (80021c8 <kalman+0x378>)
 8001f76:	681b      	ldr	r3, [r3, #0]
 8001f78:	4618      	mov	r0, r3
 8001f7a:	f7fe fa91 	bl	80004a0 <__aeabi_f2d>
 8001f7e:	4602      	mov	r2, r0
 8001f80:	460b      	mov	r3, r1
 8001f82:	4640      	mov	r0, r8
 8001f84:	4649      	mov	r1, r9
 8001f86:	f7fe fc0d 	bl	80007a4 <__aeabi_ddiv>
 8001f8a:	4602      	mov	r2, r0
 8001f8c:	460b      	mov	r3, r1
 8001f8e:	4620      	mov	r0, r4
 8001f90:	4629      	mov	r1, r5
 8001f92:	f7fe f927 	bl	80001e4 <__adddf3>
 8001f96:	4602      	mov	r2, r0
 8001f98:	460b      	mov	r3, r1
 8001f9a:	4610      	mov	r0, r2
 8001f9c:	4619      	mov	r1, r3
 8001f9e:	f7fe fd87 	bl	8000ab0 <__aeabi_d2f>
 8001fa2:	4603      	mov	r3, r0
 8001fa4:	4a92      	ldr	r2, [pc, #584]	; (80021f0 <kalman+0x3a0>)
 8001fa6:	6013      	str	r3, [r2, #0]
	P12predict = (float) P12predictPRE+delt*P22predictPRE+(pow(Gl,2)*delt*pow(delt,2))/2;
 8001fa8:	4b87      	ldr	r3, [pc, #540]	; (80021c8 <kalman+0x378>)
 8001faa:	ed93 7a00 	vldr	s14, [r3]
 8001fae:	4b8e      	ldr	r3, [pc, #568]	; (80021e8 <kalman+0x398>)
 8001fb0:	edd3 7a00 	vldr	s15, [r3]
 8001fb4:	ee27 7a27 	vmul.f32	s14, s14, s15
 8001fb8:	4b8c      	ldr	r3, [pc, #560]	; (80021ec <kalman+0x39c>)
 8001fba:	edd3 7a00 	vldr	s15, [r3]
 8001fbe:	ee77 7a27 	vadd.f32	s15, s14, s15
 8001fc2:	ee17 0a90 	vmov	r0, s15
 8001fc6:	f7fe fa6b 	bl	80004a0 <__aeabi_f2d>
 8001fca:	4604      	mov	r4, r0
 8001fcc:	460d      	mov	r5, r1
 8001fce:	4b84      	ldr	r3, [pc, #528]	; (80021e0 <kalman+0x390>)
 8001fd0:	681b      	ldr	r3, [r3, #0]
 8001fd2:	4618      	mov	r0, r3
 8001fd4:	f7fe fa64 	bl	80004a0 <__aeabi_f2d>
 8001fd8:	4602      	mov	r2, r0
 8001fda:	460b      	mov	r3, r1
 8001fdc:	ed9f 1b74 	vldr	d1, [pc, #464]	; 80021b0 <kalman+0x360>
 8001fe0:	ec43 2b10 	vmov	d0, r2, r3
 8001fe4:	f003 f86c 	bl	80050c0 <pow>
 8001fe8:	ec59 8b10 	vmov	r8, r9, d0
 8001fec:	4b76      	ldr	r3, [pc, #472]	; (80021c8 <kalman+0x378>)
 8001fee:	681b      	ldr	r3, [r3, #0]
 8001ff0:	4618      	mov	r0, r3
 8001ff2:	f7fe fa55 	bl	80004a0 <__aeabi_f2d>
 8001ff6:	4602      	mov	r2, r0
 8001ff8:	460b      	mov	r3, r1
 8001ffa:	4640      	mov	r0, r8
 8001ffc:	4649      	mov	r1, r9
 8001ffe:	f7fe faa7 	bl	8000550 <__aeabi_dmul>
 8002002:	4602      	mov	r2, r0
 8002004:	460b      	mov	r3, r1
 8002006:	4690      	mov	r8, r2
 8002008:	4699      	mov	r9, r3
 800200a:	4b6f      	ldr	r3, [pc, #444]	; (80021c8 <kalman+0x378>)
 800200c:	681b      	ldr	r3, [r3, #0]
 800200e:	4618      	mov	r0, r3
 8002010:	f7fe fa46 	bl	80004a0 <__aeabi_f2d>
 8002014:	4602      	mov	r2, r0
 8002016:	460b      	mov	r3, r1
 8002018:	ed9f 1b65 	vldr	d1, [pc, #404]	; 80021b0 <kalman+0x360>
 800201c:	ec43 2b10 	vmov	d0, r2, r3
 8002020:	f003 f84e 	bl	80050c0 <pow>
 8002024:	ec53 2b10 	vmov	r2, r3, d0
 8002028:	4640      	mov	r0, r8
 800202a:	4649      	mov	r1, r9
 800202c:	f7fe fa90 	bl	8000550 <__aeabi_dmul>
 8002030:	4602      	mov	r2, r0
 8002032:	460b      	mov	r3, r1
 8002034:	4610      	mov	r0, r2
 8002036:	4619      	mov	r1, r3
 8002038:	f04f 0200 	mov.w	r2, #0
 800203c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8002040:	f7fe fbb0 	bl	80007a4 <__aeabi_ddiv>
 8002044:	4602      	mov	r2, r0
 8002046:	460b      	mov	r3, r1
 8002048:	4620      	mov	r0, r4
 800204a:	4629      	mov	r1, r5
 800204c:	f7fe f8ca 	bl	80001e4 <__adddf3>
 8002050:	4602      	mov	r2, r0
 8002052:	460b      	mov	r3, r1
 8002054:	4610      	mov	r0, r2
 8002056:	4619      	mov	r1, r3
 8002058:	f7fe fd2a 	bl	8000ab0 <__aeabi_d2f>
 800205c:	4603      	mov	r3, r0
 800205e:	4a65      	ldr	r2, [pc, #404]	; (80021f4 <kalman+0x3a4>)
 8002060:	6013      	str	r3, [r2, #0]
	P21predict = (float) (2*delt*P21predictPRE+pow(Gl,2)*pow(delt,4)+2*P22predictPRE*pow(delt,2))/(2*delt);
 8002062:	4b59      	ldr	r3, [pc, #356]	; (80021c8 <kalman+0x378>)
 8002064:	edd3 7a00 	vldr	s15, [r3]
 8002068:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800206c:	4b5a      	ldr	r3, [pc, #360]	; (80021d8 <kalman+0x388>)
 800206e:	edd3 7a00 	vldr	s15, [r3]
 8002072:	ee67 7a27 	vmul.f32	s15, s14, s15
 8002076:	ee17 0a90 	vmov	r0, s15
 800207a:	f7fe fa11 	bl	80004a0 <__aeabi_f2d>
 800207e:	4604      	mov	r4, r0
 8002080:	460d      	mov	r5, r1
 8002082:	4b57      	ldr	r3, [pc, #348]	; (80021e0 <kalman+0x390>)
 8002084:	681b      	ldr	r3, [r3, #0]
 8002086:	4618      	mov	r0, r3
 8002088:	f7fe fa0a 	bl	80004a0 <__aeabi_f2d>
 800208c:	4602      	mov	r2, r0
 800208e:	460b      	mov	r3, r1
 8002090:	ed9f 1b47 	vldr	d1, [pc, #284]	; 80021b0 <kalman+0x360>
 8002094:	ec43 2b10 	vmov	d0, r2, r3
 8002098:	f003 f812 	bl	80050c0 <pow>
 800209c:	ec59 8b10 	vmov	r8, r9, d0
 80020a0:	4b49      	ldr	r3, [pc, #292]	; (80021c8 <kalman+0x378>)
 80020a2:	681b      	ldr	r3, [r3, #0]
 80020a4:	4618      	mov	r0, r3
 80020a6:	f7fe f9fb 	bl	80004a0 <__aeabi_f2d>
 80020aa:	4602      	mov	r2, r0
 80020ac:	460b      	mov	r3, r1
 80020ae:	ed9f 1b42 	vldr	d1, [pc, #264]	; 80021b8 <kalman+0x368>
 80020b2:	ec43 2b10 	vmov	d0, r2, r3
 80020b6:	f003 f803 	bl	80050c0 <pow>
 80020ba:	ec53 2b10 	vmov	r2, r3, d0
 80020be:	4640      	mov	r0, r8
 80020c0:	4649      	mov	r1, r9
 80020c2:	f7fe fa45 	bl	8000550 <__aeabi_dmul>
 80020c6:	4602      	mov	r2, r0
 80020c8:	460b      	mov	r3, r1
 80020ca:	4620      	mov	r0, r4
 80020cc:	4629      	mov	r1, r5
 80020ce:	f7fe f889 	bl	80001e4 <__adddf3>
 80020d2:	4602      	mov	r2, r0
 80020d4:	460b      	mov	r3, r1
 80020d6:	4690      	mov	r8, r2
 80020d8:	4699      	mov	r9, r3
 80020da:	4b43      	ldr	r3, [pc, #268]	; (80021e8 <kalman+0x398>)
 80020dc:	edd3 7a00 	vldr	s15, [r3]
 80020e0:	ee77 7aa7 	vadd.f32	s15, s15, s15
 80020e4:	ee17 0a90 	vmov	r0, s15
 80020e8:	f7fe f9da 	bl	80004a0 <__aeabi_f2d>
 80020ec:	4604      	mov	r4, r0
 80020ee:	460d      	mov	r5, r1
 80020f0:	4b35      	ldr	r3, [pc, #212]	; (80021c8 <kalman+0x378>)
 80020f2:	681b      	ldr	r3, [r3, #0]
 80020f4:	4618      	mov	r0, r3
 80020f6:	f7fe f9d3 	bl	80004a0 <__aeabi_f2d>
 80020fa:	4602      	mov	r2, r0
 80020fc:	460b      	mov	r3, r1
 80020fe:	ed9f 1b2c 	vldr	d1, [pc, #176]	; 80021b0 <kalman+0x360>
 8002102:	ec43 2b10 	vmov	d0, r2, r3
 8002106:	f002 ffdb 	bl	80050c0 <pow>
 800210a:	ec53 2b10 	vmov	r2, r3, d0
 800210e:	4620      	mov	r0, r4
 8002110:	4629      	mov	r1, r5
 8002112:	f7fe fa1d 	bl	8000550 <__aeabi_dmul>
 8002116:	4602      	mov	r2, r0
 8002118:	460b      	mov	r3, r1
 800211a:	4640      	mov	r0, r8
 800211c:	4649      	mov	r1, r9
 800211e:	f7fe f861 	bl	80001e4 <__adddf3>
 8002122:	4602      	mov	r2, r0
 8002124:	460b      	mov	r3, r1
 8002126:	4610      	mov	r0, r2
 8002128:	4619      	mov	r1, r3
 800212a:	f7fe fcc1 	bl	8000ab0 <__aeabi_d2f>
 800212e:	ee06 0a90 	vmov	s13, r0
 8002132:	4b25      	ldr	r3, [pc, #148]	; (80021c8 <kalman+0x378>)
 8002134:	edd3 7a00 	vldr	s15, [r3]
 8002138:	ee37 7aa7 	vadd.f32	s14, s15, s15
 800213c:	eec6 7a87 	vdiv.f32	s15, s13, s14
 8002140:	4b2d      	ldr	r3, [pc, #180]	; (80021f8 <kalman+0x3a8>)
 8002142:	edc3 7a00 	vstr	s15, [r3]
	P22predict = (float) pow(Gl,2)*pow(delt,2) +P22predictPRE;
 8002146:	4b26      	ldr	r3, [pc, #152]	; (80021e0 <kalman+0x390>)
 8002148:	681b      	ldr	r3, [r3, #0]
 800214a:	4618      	mov	r0, r3
 800214c:	f7fe f9a8 	bl	80004a0 <__aeabi_f2d>
 8002150:	4602      	mov	r2, r0
 8002152:	460b      	mov	r3, r1
 8002154:	ed9f 1b16 	vldr	d1, [pc, #88]	; 80021b0 <kalman+0x360>
 8002158:	ec43 2b10 	vmov	d0, r2, r3
 800215c:	f002 ffb0 	bl	80050c0 <pow>
 8002160:	ec53 2b10 	vmov	r2, r3, d0
 8002164:	4610      	mov	r0, r2
 8002166:	4619      	mov	r1, r3
 8002168:	f7fe fca2 	bl	8000ab0 <__aeabi_d2f>
 800216c:	4603      	mov	r3, r0
 800216e:	4618      	mov	r0, r3
 8002170:	f7fe f996 	bl	80004a0 <__aeabi_f2d>
 8002174:	4604      	mov	r4, r0
 8002176:	460d      	mov	r5, r1
 8002178:	4b13      	ldr	r3, [pc, #76]	; (80021c8 <kalman+0x378>)
 800217a:	681b      	ldr	r3, [r3, #0]
 800217c:	4618      	mov	r0, r3
 800217e:	f7fe f98f 	bl	80004a0 <__aeabi_f2d>
 8002182:	4602      	mov	r2, r0
 8002184:	460b      	mov	r3, r1
 8002186:	ed9f 1b0a 	vldr	d1, [pc, #40]	; 80021b0 <kalman+0x360>
 800218a:	ec43 2b10 	vmov	d0, r2, r3
 800218e:	f002 ff97 	bl	80050c0 <pow>
 8002192:	ec53 2b10 	vmov	r2, r3, d0
 8002196:	4620      	mov	r0, r4
 8002198:	4629      	mov	r1, r5
 800219a:	f7fe f9d9 	bl	8000550 <__aeabi_dmul>
 800219e:	4602      	mov	r2, r0
 80021a0:	460b      	mov	r3, r1
 80021a2:	4614      	mov	r4, r2
 80021a4:	461d      	mov	r5, r3
 80021a6:	4b10      	ldr	r3, [pc, #64]	; (80021e8 <kalman+0x398>)
 80021a8:	681b      	ldr	r3, [r3, #0]
 80021aa:	4618      	mov	r0, r3
 80021ac:	e026      	b.n	80021fc <kalman+0x3ac>
 80021ae:	bf00      	nop
 80021b0:	00000000 	.word	0x00000000
 80021b4:	40000000 	.word	0x40000000
 80021b8:	00000000 	.word	0x00000000
 80021bc:	40100000 	.word	0x40100000
 80021c0:	20000008 	.word	0x20000008
 80021c4:	49742400 	.word	0x49742400
 80021c8:	2000013c 	.word	0x2000013c
 80021cc:	20000140 	.word	0x20000140
 80021d0:	20000144 	.word	0x20000144
 80021d4:	20000148 	.word	0x20000148
 80021d8:	2000014c 	.word	0x2000014c
 80021dc:	20000150 	.word	0x20000150
 80021e0:	20000020 	.word	0x20000020
 80021e4:	40100000 	.word	0x40100000
 80021e8:	20000154 	.word	0x20000154
 80021ec:	20000158 	.word	0x20000158
 80021f0:	2000015c 	.word	0x2000015c
 80021f4:	20000160 	.word	0x20000160
 80021f8:	20000164 	.word	0x20000164
 80021fc:	f7fe f950 	bl	80004a0 <__aeabi_f2d>
 8002200:	4602      	mov	r2, r0
 8002202:	460b      	mov	r3, r1
 8002204:	4620      	mov	r0, r4
 8002206:	4629      	mov	r1, r5
 8002208:	f7fd ffec 	bl	80001e4 <__adddf3>
 800220c:	4602      	mov	r2, r0
 800220e:	460b      	mov	r3, r1
 8002210:	4610      	mov	r0, r2
 8002212:	4619      	mov	r1, r3
 8002214:	f7fe fc4c 	bl	8000ab0 <__aeabi_d2f>
 8002218:	4603      	mov	r3, r0
 800221a:	4ac9      	ldr	r2, [pc, #804]	; (8002540 <kalman+0x6f0>)
 800221c:	6013      	str	r3, [r2, #0]

	EncoderVel = (float) omegaPredict + (P22predict*errorVel)/(pow(R,2)+P22predict);
 800221e:	4bc9      	ldr	r3, [pc, #804]	; (8002544 <kalman+0x6f4>)
 8002220:	681b      	ldr	r3, [r3, #0]
 8002222:	4618      	mov	r0, r3
 8002224:	f7fe f93c 	bl	80004a0 <__aeabi_f2d>
 8002228:	4604      	mov	r4, r0
 800222a:	460d      	mov	r5, r1
 800222c:	4bc4      	ldr	r3, [pc, #784]	; (8002540 <kalman+0x6f0>)
 800222e:	ed93 7a00 	vldr	s14, [r3]
 8002232:	4bc5      	ldr	r3, [pc, #788]	; (8002548 <kalman+0x6f8>)
 8002234:	edd3 7a00 	vldr	s15, [r3]
 8002238:	ee67 7a27 	vmul.f32	s15, s14, s15
 800223c:	ee17 0a90 	vmov	r0, s15
 8002240:	f7fe f92e 	bl	80004a0 <__aeabi_f2d>
 8002244:	4680      	mov	r8, r0
 8002246:	4689      	mov	r9, r1
 8002248:	4bc0      	ldr	r3, [pc, #768]	; (800254c <kalman+0x6fc>)
 800224a:	681b      	ldr	r3, [r3, #0]
 800224c:	4618      	mov	r0, r3
 800224e:	f7fe f927 	bl	80004a0 <__aeabi_f2d>
 8002252:	4602      	mov	r2, r0
 8002254:	460b      	mov	r3, r1
 8002256:	ed9f 1bb8 	vldr	d1, [pc, #736]	; 8002538 <kalman+0x6e8>
 800225a:	ec43 2b10 	vmov	d0, r2, r3
 800225e:	f002 ff2f 	bl	80050c0 <pow>
 8002262:	ec5b ab10 	vmov	sl, fp, d0
 8002266:	4bb6      	ldr	r3, [pc, #728]	; (8002540 <kalman+0x6f0>)
 8002268:	681b      	ldr	r3, [r3, #0]
 800226a:	4618      	mov	r0, r3
 800226c:	f7fe f918 	bl	80004a0 <__aeabi_f2d>
 8002270:	4602      	mov	r2, r0
 8002272:	460b      	mov	r3, r1
 8002274:	4650      	mov	r0, sl
 8002276:	4659      	mov	r1, fp
 8002278:	f7fd ffb4 	bl	80001e4 <__adddf3>
 800227c:	4602      	mov	r2, r0
 800227e:	460b      	mov	r3, r1
 8002280:	4640      	mov	r0, r8
 8002282:	4649      	mov	r1, r9
 8002284:	f7fe fa8e 	bl	80007a4 <__aeabi_ddiv>
 8002288:	4602      	mov	r2, r0
 800228a:	460b      	mov	r3, r1
 800228c:	4620      	mov	r0, r4
 800228e:	4629      	mov	r1, r5
 8002290:	f7fd ffa8 	bl	80001e4 <__adddf3>
 8002294:	4602      	mov	r2, r0
 8002296:	460b      	mov	r3, r1
 8002298:	4610      	mov	r0, r2
 800229a:	4619      	mov	r1, r3
 800229c:	f7fe fc08 	bl	8000ab0 <__aeabi_d2f>
 80022a0:	4603      	mov	r3, r0
 80022a2:	4aab      	ldr	r2, [pc, #684]	; (8002550 <kalman+0x700>)
 80022a4:	6013      	str	r3, [r2, #0]
	P11predictPRE = (float) P11predict - (P12predict*P21predict)/(pow(R,2)+P22predict);
 80022a6:	4bab      	ldr	r3, [pc, #684]	; (8002554 <kalman+0x704>)
 80022a8:	681b      	ldr	r3, [r3, #0]
 80022aa:	4618      	mov	r0, r3
 80022ac:	f7fe f8f8 	bl	80004a0 <__aeabi_f2d>
 80022b0:	4604      	mov	r4, r0
 80022b2:	460d      	mov	r5, r1
 80022b4:	4ba8      	ldr	r3, [pc, #672]	; (8002558 <kalman+0x708>)
 80022b6:	ed93 7a00 	vldr	s14, [r3]
 80022ba:	4ba8      	ldr	r3, [pc, #672]	; (800255c <kalman+0x70c>)
 80022bc:	edd3 7a00 	vldr	s15, [r3]
 80022c0:	ee67 7a27 	vmul.f32	s15, s14, s15
 80022c4:	ee17 0a90 	vmov	r0, s15
 80022c8:	f7fe f8ea 	bl	80004a0 <__aeabi_f2d>
 80022cc:	4680      	mov	r8, r0
 80022ce:	4689      	mov	r9, r1
 80022d0:	4b9e      	ldr	r3, [pc, #632]	; (800254c <kalman+0x6fc>)
 80022d2:	681b      	ldr	r3, [r3, #0]
 80022d4:	4618      	mov	r0, r3
 80022d6:	f7fe f8e3 	bl	80004a0 <__aeabi_f2d>
 80022da:	4602      	mov	r2, r0
 80022dc:	460b      	mov	r3, r1
 80022de:	ed9f 1b96 	vldr	d1, [pc, #600]	; 8002538 <kalman+0x6e8>
 80022e2:	ec43 2b10 	vmov	d0, r2, r3
 80022e6:	f002 feeb 	bl	80050c0 <pow>
 80022ea:	ec5b ab10 	vmov	sl, fp, d0
 80022ee:	4b94      	ldr	r3, [pc, #592]	; (8002540 <kalman+0x6f0>)
 80022f0:	681b      	ldr	r3, [r3, #0]
 80022f2:	4618      	mov	r0, r3
 80022f4:	f7fe f8d4 	bl	80004a0 <__aeabi_f2d>
 80022f8:	4602      	mov	r2, r0
 80022fa:	460b      	mov	r3, r1
 80022fc:	4650      	mov	r0, sl
 80022fe:	4659      	mov	r1, fp
 8002300:	f7fd ff70 	bl	80001e4 <__adddf3>
 8002304:	4602      	mov	r2, r0
 8002306:	460b      	mov	r3, r1
 8002308:	4640      	mov	r0, r8
 800230a:	4649      	mov	r1, r9
 800230c:	f7fe fa4a 	bl	80007a4 <__aeabi_ddiv>
 8002310:	4602      	mov	r2, r0
 8002312:	460b      	mov	r3, r1
 8002314:	4620      	mov	r0, r4
 8002316:	4629      	mov	r1, r5
 8002318:	f7fd ff62 	bl	80001e0 <__aeabi_dsub>
 800231c:	4602      	mov	r2, r0
 800231e:	460b      	mov	r3, r1
 8002320:	4610      	mov	r0, r2
 8002322:	4619      	mov	r1, r3
 8002324:	f7fe fbc4 	bl	8000ab0 <__aeabi_d2f>
 8002328:	4603      	mov	r3, r0
 800232a:	4a8d      	ldr	r2, [pc, #564]	; (8002560 <kalman+0x710>)
 800232c:	6013      	str	r3, [r2, #0]
	P12predictPRE = (float) P12predict - (P12predict*P22predict)/(pow(R,2)+P22predict);
 800232e:	4b8a      	ldr	r3, [pc, #552]	; (8002558 <kalman+0x708>)
 8002330:	681b      	ldr	r3, [r3, #0]
 8002332:	4618      	mov	r0, r3
 8002334:	f7fe f8b4 	bl	80004a0 <__aeabi_f2d>
 8002338:	4604      	mov	r4, r0
 800233a:	460d      	mov	r5, r1
 800233c:	4b86      	ldr	r3, [pc, #536]	; (8002558 <kalman+0x708>)
 800233e:	ed93 7a00 	vldr	s14, [r3]
 8002342:	4b7f      	ldr	r3, [pc, #508]	; (8002540 <kalman+0x6f0>)
 8002344:	edd3 7a00 	vldr	s15, [r3]
 8002348:	ee67 7a27 	vmul.f32	s15, s14, s15
 800234c:	ee17 0a90 	vmov	r0, s15
 8002350:	f7fe f8a6 	bl	80004a0 <__aeabi_f2d>
 8002354:	4680      	mov	r8, r0
 8002356:	4689      	mov	r9, r1
 8002358:	4b7c      	ldr	r3, [pc, #496]	; (800254c <kalman+0x6fc>)
 800235a:	681b      	ldr	r3, [r3, #0]
 800235c:	4618      	mov	r0, r3
 800235e:	f7fe f89f 	bl	80004a0 <__aeabi_f2d>
 8002362:	4602      	mov	r2, r0
 8002364:	460b      	mov	r3, r1
 8002366:	ed9f 1b74 	vldr	d1, [pc, #464]	; 8002538 <kalman+0x6e8>
 800236a:	ec43 2b10 	vmov	d0, r2, r3
 800236e:	f002 fea7 	bl	80050c0 <pow>
 8002372:	ec5b ab10 	vmov	sl, fp, d0
 8002376:	4b72      	ldr	r3, [pc, #456]	; (8002540 <kalman+0x6f0>)
 8002378:	681b      	ldr	r3, [r3, #0]
 800237a:	4618      	mov	r0, r3
 800237c:	f7fe f890 	bl	80004a0 <__aeabi_f2d>
 8002380:	4602      	mov	r2, r0
 8002382:	460b      	mov	r3, r1
 8002384:	4650      	mov	r0, sl
 8002386:	4659      	mov	r1, fp
 8002388:	f7fd ff2c 	bl	80001e4 <__adddf3>
 800238c:	4602      	mov	r2, r0
 800238e:	460b      	mov	r3, r1
 8002390:	4640      	mov	r0, r8
 8002392:	4649      	mov	r1, r9
 8002394:	f7fe fa06 	bl	80007a4 <__aeabi_ddiv>
 8002398:	4602      	mov	r2, r0
 800239a:	460b      	mov	r3, r1
 800239c:	4620      	mov	r0, r4
 800239e:	4629      	mov	r1, r5
 80023a0:	f7fd ff1e 	bl	80001e0 <__aeabi_dsub>
 80023a4:	4602      	mov	r2, r0
 80023a6:	460b      	mov	r3, r1
 80023a8:	4610      	mov	r0, r2
 80023aa:	4619      	mov	r1, r3
 80023ac:	f7fe fb80 	bl	8000ab0 <__aeabi_d2f>
 80023b0:	4603      	mov	r3, r0
 80023b2:	4a6c      	ldr	r2, [pc, #432]	; (8002564 <kalman+0x714>)
 80023b4:	6013      	str	r3, [r2, #0]
	P21predictPRE = (float) P21predict*(P22predict/(pow(R,2)+P22predict)-1);
 80023b6:	4b69      	ldr	r3, [pc, #420]	; (800255c <kalman+0x70c>)
 80023b8:	681b      	ldr	r3, [r3, #0]
 80023ba:	4618      	mov	r0, r3
 80023bc:	f7fe f870 	bl	80004a0 <__aeabi_f2d>
 80023c0:	4604      	mov	r4, r0
 80023c2:	460d      	mov	r5, r1
 80023c4:	4b5e      	ldr	r3, [pc, #376]	; (8002540 <kalman+0x6f0>)
 80023c6:	681b      	ldr	r3, [r3, #0]
 80023c8:	4618      	mov	r0, r3
 80023ca:	f7fe f869 	bl	80004a0 <__aeabi_f2d>
 80023ce:	4680      	mov	r8, r0
 80023d0:	4689      	mov	r9, r1
 80023d2:	4b5e      	ldr	r3, [pc, #376]	; (800254c <kalman+0x6fc>)
 80023d4:	681b      	ldr	r3, [r3, #0]
 80023d6:	4618      	mov	r0, r3
 80023d8:	f7fe f862 	bl	80004a0 <__aeabi_f2d>
 80023dc:	4602      	mov	r2, r0
 80023de:	460b      	mov	r3, r1
 80023e0:	ed9f 1b55 	vldr	d1, [pc, #340]	; 8002538 <kalman+0x6e8>
 80023e4:	ec43 2b10 	vmov	d0, r2, r3
 80023e8:	f002 fe6a 	bl	80050c0 <pow>
 80023ec:	ec5b ab10 	vmov	sl, fp, d0
 80023f0:	4b53      	ldr	r3, [pc, #332]	; (8002540 <kalman+0x6f0>)
 80023f2:	681b      	ldr	r3, [r3, #0]
 80023f4:	4618      	mov	r0, r3
 80023f6:	f7fe f853 	bl	80004a0 <__aeabi_f2d>
 80023fa:	4602      	mov	r2, r0
 80023fc:	460b      	mov	r3, r1
 80023fe:	4650      	mov	r0, sl
 8002400:	4659      	mov	r1, fp
 8002402:	f7fd feef 	bl	80001e4 <__adddf3>
 8002406:	4602      	mov	r2, r0
 8002408:	460b      	mov	r3, r1
 800240a:	4640      	mov	r0, r8
 800240c:	4649      	mov	r1, r9
 800240e:	f7fe f9c9 	bl	80007a4 <__aeabi_ddiv>
 8002412:	4602      	mov	r2, r0
 8002414:	460b      	mov	r3, r1
 8002416:	4610      	mov	r0, r2
 8002418:	4619      	mov	r1, r3
 800241a:	f04f 0200 	mov.w	r2, #0
 800241e:	4b52      	ldr	r3, [pc, #328]	; (8002568 <kalman+0x718>)
 8002420:	f7fd fede 	bl	80001e0 <__aeabi_dsub>
 8002424:	4602      	mov	r2, r0
 8002426:	460b      	mov	r3, r1
 8002428:	4620      	mov	r0, r4
 800242a:	4629      	mov	r1, r5
 800242c:	f7fe f890 	bl	8000550 <__aeabi_dmul>
 8002430:	4602      	mov	r2, r0
 8002432:	460b      	mov	r3, r1
 8002434:	4610      	mov	r0, r2
 8002436:	4619      	mov	r1, r3
 8002438:	f7fe fb3a 	bl	8000ab0 <__aeabi_d2f>
 800243c:	4603      	mov	r3, r0
 800243e:	4a4b      	ldr	r2, [pc, #300]	; (800256c <kalman+0x71c>)
 8002440:	6013      	str	r3, [r2, #0]
	P22predictPRE = (float) P22predict*(P22predict/(pow(R,2)+P22predict)-1);
 8002442:	4b3f      	ldr	r3, [pc, #252]	; (8002540 <kalman+0x6f0>)
 8002444:	681b      	ldr	r3, [r3, #0]
 8002446:	4618      	mov	r0, r3
 8002448:	f7fe f82a 	bl	80004a0 <__aeabi_f2d>
 800244c:	4604      	mov	r4, r0
 800244e:	460d      	mov	r5, r1
 8002450:	4b3b      	ldr	r3, [pc, #236]	; (8002540 <kalman+0x6f0>)
 8002452:	681b      	ldr	r3, [r3, #0]
 8002454:	4618      	mov	r0, r3
 8002456:	f7fe f823 	bl	80004a0 <__aeabi_f2d>
 800245a:	4680      	mov	r8, r0
 800245c:	4689      	mov	r9, r1
 800245e:	4b3b      	ldr	r3, [pc, #236]	; (800254c <kalman+0x6fc>)
 8002460:	681b      	ldr	r3, [r3, #0]
 8002462:	4618      	mov	r0, r3
 8002464:	f7fe f81c 	bl	80004a0 <__aeabi_f2d>
 8002468:	4602      	mov	r2, r0
 800246a:	460b      	mov	r3, r1
 800246c:	ed9f 1b32 	vldr	d1, [pc, #200]	; 8002538 <kalman+0x6e8>
 8002470:	ec43 2b10 	vmov	d0, r2, r3
 8002474:	f002 fe24 	bl	80050c0 <pow>
 8002478:	ec5b ab10 	vmov	sl, fp, d0
 800247c:	4b30      	ldr	r3, [pc, #192]	; (8002540 <kalman+0x6f0>)
 800247e:	681b      	ldr	r3, [r3, #0]
 8002480:	4618      	mov	r0, r3
 8002482:	f7fe f80d 	bl	80004a0 <__aeabi_f2d>
 8002486:	4602      	mov	r2, r0
 8002488:	460b      	mov	r3, r1
 800248a:	4650      	mov	r0, sl
 800248c:	4659      	mov	r1, fp
 800248e:	f7fd fea9 	bl	80001e4 <__adddf3>
 8002492:	4602      	mov	r2, r0
 8002494:	460b      	mov	r3, r1
 8002496:	4640      	mov	r0, r8
 8002498:	4649      	mov	r1, r9
 800249a:	f7fe f983 	bl	80007a4 <__aeabi_ddiv>
 800249e:	4602      	mov	r2, r0
 80024a0:	460b      	mov	r3, r1
 80024a2:	4610      	mov	r0, r2
 80024a4:	4619      	mov	r1, r3
 80024a6:	f04f 0200 	mov.w	r2, #0
 80024aa:	4b2f      	ldr	r3, [pc, #188]	; (8002568 <kalman+0x718>)
 80024ac:	f7fd fe98 	bl	80001e0 <__aeabi_dsub>
 80024b0:	4602      	mov	r2, r0
 80024b2:	460b      	mov	r3, r1
 80024b4:	4620      	mov	r0, r4
 80024b6:	4629      	mov	r1, r5
 80024b8:	f7fe f84a 	bl	8000550 <__aeabi_dmul>
 80024bc:	4602      	mov	r2, r0
 80024be:	460b      	mov	r3, r1
 80024c0:	4610      	mov	r0, r2
 80024c2:	4619      	mov	r1, r3
 80024c4:	f7fe faf4 	bl	8000ab0 <__aeabi_d2f>
 80024c8:	4603      	mov	r3, r0
 80024ca:	4a29      	ldr	r2, [pc, #164]	; (8002570 <kalman+0x720>)
 80024cc:	6013      	str	r3, [r2, #0]
	omegaPredictPre = EncoderVel;
 80024ce:	4b20      	ldr	r3, [pc, #128]	; (8002550 <kalman+0x700>)
 80024d0:	681b      	ldr	r3, [r3, #0]
 80024d2:	4a28      	ldr	r2, [pc, #160]	; (8002574 <kalman+0x724>)
 80024d4:	6013      	str	r3, [r2, #0]
	if (velocity == 0){
 80024d6:	4b28      	ldr	r3, [pc, #160]	; (8002578 <kalman+0x728>)
 80024d8:	edd3 7a00 	vldr	s15, [r3]
 80024dc:	eef5 7a40 	vcmp.f32	s15, #0.0
 80024e0:	eef1 fa10 	vmrs	APSR_nzcv, fpscr
 80024e4:	d14e      	bne.n	8002584 <kalman+0x734>
		P11predict = 0;
 80024e6:	4b1b      	ldr	r3, [pc, #108]	; (8002554 <kalman+0x704>)
 80024e8:	f04f 0200 	mov.w	r2, #0
 80024ec:	601a      	str	r2, [r3, #0]
		P12predict = 0;
 80024ee:	4b1a      	ldr	r3, [pc, #104]	; (8002558 <kalman+0x708>)
 80024f0:	f04f 0200 	mov.w	r2, #0
 80024f4:	601a      	str	r2, [r3, #0]
		P21predict = 0;
 80024f6:	4b19      	ldr	r3, [pc, #100]	; (800255c <kalman+0x70c>)
 80024f8:	f04f 0200 	mov.w	r2, #0
 80024fc:	601a      	str	r2, [r3, #0]
		P22predict = 0;
 80024fe:	4b10      	ldr	r3, [pc, #64]	; (8002540 <kalman+0x6f0>)
 8002500:	f04f 0200 	mov.w	r2, #0
 8002504:	601a      	str	r2, [r3, #0]
		P11predictPRE = 0;
 8002506:	4b16      	ldr	r3, [pc, #88]	; (8002560 <kalman+0x710>)
 8002508:	f04f 0200 	mov.w	r2, #0
 800250c:	601a      	str	r2, [r3, #0]
		P12predictPRE = 0;
 800250e:	4b15      	ldr	r3, [pc, #84]	; (8002564 <kalman+0x714>)
 8002510:	f04f 0200 	mov.w	r2, #0
 8002514:	601a      	str	r2, [r3, #0]
		P21predictPRE = 0;
 8002516:	4b15      	ldr	r3, [pc, #84]	; (800256c <kalman+0x71c>)
 8002518:	f04f 0200 	mov.w	r2, #0
 800251c:	601a      	str	r2, [r3, #0]
		P22predictPRE = 0;
 800251e:	4b14      	ldr	r3, [pc, #80]	; (8002570 <kalman+0x720>)
 8002520:	f04f 0200 	mov.w	r2, #0
 8002524:	601a      	str	r2, [r3, #0]
		omegaPredict = 0;
 8002526:	4b07      	ldr	r3, [pc, #28]	; (8002544 <kalman+0x6f4>)
 8002528:	f04f 0200 	mov.w	r2, #0
 800252c:	601a      	str	r2, [r3, #0]
		omegaPredictPre = 0;
 800252e:	4b11      	ldr	r3, [pc, #68]	; (8002574 <kalman+0x724>)
 8002530:	f04f 0200 	mov.w	r2, #0
 8002534:	601a      	str	r2, [r3, #0]
 8002536:	e021      	b.n	800257c <kalman+0x72c>
 8002538:	00000000 	.word	0x00000000
 800253c:	40000000 	.word	0x40000000
 8002540:	20000168 	.word	0x20000168
 8002544:	20000144 	.word	0x20000144
 8002548:	20000148 	.word	0x20000148
 800254c:	2000001c 	.word	0x2000001c
 8002550:	200000c4 	.word	0x200000c4
 8002554:	2000015c 	.word	0x2000015c
 8002558:	20000160 	.word	0x20000160
 800255c:	20000164 	.word	0x20000164
 8002560:	20000150 	.word	0x20000150
 8002564:	20000158 	.word	0x20000158
 8002568:	3ff00000 	.word	0x3ff00000
 800256c:	2000014c 	.word	0x2000014c
 8002570:	20000154 	.word	0x20000154
 8002574:	20000140 	.word	0x20000140
 8002578:	200000c8 	.word	0x200000c8
		errorVel = 0;
 800257c:	4b03      	ldr	r3, [pc, #12]	; (800258c <kalman+0x73c>)
 800257e:	f04f 0200 	mov.w	r2, #0
 8002582:	601a      	str	r2, [r3, #0]
	}
}
 8002584:	bf00      	nop
 8002586:	e8bd 8fb0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, sl, fp, pc}
 800258a:	bf00      	nop
 800258c:	20000148 	.word	0x20000148

08002590 <HAL_TIM_PeriodElapsedCallback>:

void HAL_TIM_PeriodElapsedCallback(TIM_HandleTypeDef *htim)
{
 8002590:	b4b0      	push	{r4, r5, r7}
 8002592:	b083      	sub	sp, #12
 8002594:	af00      	add	r7, sp, #0
 8002596:	6078      	str	r0, [r7, #4]
	if (htim == &htim2)
 8002598:	687b      	ldr	r3, [r7, #4]
 800259a:	4a09      	ldr	r2, [pc, #36]	; (80025c0 <HAL_TIM_PeriodElapsedCallback+0x30>)
 800259c:	4293      	cmp	r3, r2
 800259e:	d109      	bne.n	80025b4 <HAL_TIM_PeriodElapsedCallback+0x24>
	{
		_micros += 4294967295;
 80025a0:	4b08      	ldr	r3, [pc, #32]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025a2:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025a6:	f112 34ff 	adds.w	r4, r2, #4294967295
 80025aa:	f143 0500 	adc.w	r5, r3, #0
 80025ae:	4b05      	ldr	r3, [pc, #20]	; (80025c4 <HAL_TIM_PeriodElapsedCallback+0x34>)
 80025b0:	e9c3 4500 	strd	r4, r5, [r3]
	}
}
 80025b4:	bf00      	nop
 80025b6:	370c      	adds	r7, #12
 80025b8:	46bd      	mov	sp, r7
 80025ba:	bcb0      	pop	{r4, r5, r7}
 80025bc:	4770      	bx	lr
 80025be:	bf00      	nop
 80025c0:	200001ec 	.word	0x200001ec
 80025c4:	200000b8 	.word	0x200000b8

080025c8 <micros>:
uint64_t micros()
{
 80025c8:	b4b0      	push	{r4, r5, r7}
 80025ca:	af00      	add	r7, sp, #0
	return _micros + htim2.Instance->CNT;
 80025cc:	4b09      	ldr	r3, [pc, #36]	; (80025f4 <micros+0x2c>)
 80025ce:	681b      	ldr	r3, [r3, #0]
 80025d0:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 80025d2:	4618      	mov	r0, r3
 80025d4:	f04f 0100 	mov.w	r1, #0
 80025d8:	4b07      	ldr	r3, [pc, #28]	; (80025f8 <micros+0x30>)
 80025da:	e9d3 2300 	ldrd	r2, r3, [r3]
 80025de:	1884      	adds	r4, r0, r2
 80025e0:	eb41 0503 	adc.w	r5, r1, r3
 80025e4:	4622      	mov	r2, r4
 80025e6:	462b      	mov	r3, r5
}
 80025e8:	4610      	mov	r0, r2
 80025ea:	4619      	mov	r1, r3
 80025ec:	46bd      	mov	sp, r7
 80025ee:	bcb0      	pop	{r4, r5, r7}
 80025f0:	4770      	bx	lr
 80025f2:	bf00      	nop
 80025f4:	200001ec 	.word	0x200001ec
 80025f8:	200000b8 	.word	0x200000b8

080025fc <Error_Handler>:
/**
 * @brief  This function is executed in case of error occurrence.
 * @retval None
 */
void Error_Handler(void)
{
 80025fc:	b480      	push	{r7}
 80025fe:	af00      	add	r7, sp, #0
  \details Disables IRQ interrupts by setting the I-bit in the CPSR.
           Can only be executed in Privileged modes.
 */
__STATIC_FORCEINLINE void __disable_irq(void)
{
  __ASM volatile ("cpsid i" : : : "memory");
 8002600:	b672      	cpsid	i
}
 8002602:	bf00      	nop
	/* USER CODE BEGIN Error_Handler_Debug */
	/* User can add his own implementation to report the HAL error return state */
	__disable_irq();
	while (1)
 8002604:	e7fe      	b.n	8002604 <Error_Handler+0x8>
	...

08002608 <HAL_MspInit>:
void HAL_TIM_MspPostInit(TIM_HandleTypeDef *htim);
                    /**
  * Initializes the Global MSP.
  */
void HAL_MspInit(void)
{
 8002608:	b580      	push	{r7, lr}
 800260a:	b082      	sub	sp, #8
 800260c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MspInit 0 */

  /* USER CODE END MspInit 0 */

  __HAL_RCC_SYSCFG_CLK_ENABLE();
 800260e:	2300      	movs	r3, #0
 8002610:	607b      	str	r3, [r7, #4]
 8002612:	4b10      	ldr	r3, [pc, #64]	; (8002654 <HAL_MspInit+0x4c>)
 8002614:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002616:	4a0f      	ldr	r2, [pc, #60]	; (8002654 <HAL_MspInit+0x4c>)
 8002618:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 800261c:	6453      	str	r3, [r2, #68]	; 0x44
 800261e:	4b0d      	ldr	r3, [pc, #52]	; (8002654 <HAL_MspInit+0x4c>)
 8002620:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002622:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002626:	607b      	str	r3, [r7, #4]
 8002628:	687b      	ldr	r3, [r7, #4]
  __HAL_RCC_PWR_CLK_ENABLE();
 800262a:	2300      	movs	r3, #0
 800262c:	603b      	str	r3, [r7, #0]
 800262e:	4b09      	ldr	r3, [pc, #36]	; (8002654 <HAL_MspInit+0x4c>)
 8002630:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002632:	4a08      	ldr	r2, [pc, #32]	; (8002654 <HAL_MspInit+0x4c>)
 8002634:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 8002638:	6413      	str	r3, [r2, #64]	; 0x40
 800263a:	4b06      	ldr	r3, [pc, #24]	; (8002654 <HAL_MspInit+0x4c>)
 800263c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800263e:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002642:	603b      	str	r3, [r7, #0]
 8002644:	683b      	ldr	r3, [r7, #0]

  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_0);
 8002646:	2007      	movs	r0, #7
 8002648:	f000 fb00 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>
  /* System interrupt init*/

  /* USER CODE BEGIN MspInit 1 */

  /* USER CODE END MspInit 1 */
}
 800264c:	bf00      	nop
 800264e:	3708      	adds	r7, #8
 8002650:	46bd      	mov	sp, r7
 8002652:	bd80      	pop	{r7, pc}
 8002654:	40023800 	.word	0x40023800

08002658 <HAL_TIM_Encoder_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_encoder: TIM_Encoder handle pointer
* @retval None
*/
void HAL_TIM_Encoder_MspInit(TIM_HandleTypeDef* htim_encoder)
{
 8002658:	b580      	push	{r7, lr}
 800265a:	b08a      	sub	sp, #40	; 0x28
 800265c:	af00      	add	r7, sp, #0
 800265e:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002660:	f107 0314 	add.w	r3, r7, #20
 8002664:	2200      	movs	r2, #0
 8002666:	601a      	str	r2, [r3, #0]
 8002668:	605a      	str	r2, [r3, #4]
 800266a:	609a      	str	r2, [r3, #8]
 800266c:	60da      	str	r2, [r3, #12]
 800266e:	611a      	str	r2, [r3, #16]
  if(htim_encoder->Instance==TIM1)
 8002670:	687b      	ldr	r3, [r7, #4]
 8002672:	681b      	ldr	r3, [r3, #0]
 8002674:	4a19      	ldr	r2, [pc, #100]	; (80026dc <HAL_TIM_Encoder_MspInit+0x84>)
 8002676:	4293      	cmp	r3, r2
 8002678:	d12c      	bne.n	80026d4 <HAL_TIM_Encoder_MspInit+0x7c>
  {
  /* USER CODE BEGIN TIM1_MspInit 0 */

  /* USER CODE END TIM1_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM1_CLK_ENABLE();
 800267a:	2300      	movs	r3, #0
 800267c:	613b      	str	r3, [r7, #16]
 800267e:	4b18      	ldr	r3, [pc, #96]	; (80026e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002680:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002682:	4a17      	ldr	r2, [pc, #92]	; (80026e0 <HAL_TIM_Encoder_MspInit+0x88>)
 8002684:	f043 0301 	orr.w	r3, r3, #1
 8002688:	6453      	str	r3, [r2, #68]	; 0x44
 800268a:	4b15      	ldr	r3, [pc, #84]	; (80026e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800268c:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 800268e:	f003 0301 	and.w	r3, r3, #1
 8002692:	613b      	str	r3, [r7, #16]
 8002694:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002696:	2300      	movs	r3, #0
 8002698:	60fb      	str	r3, [r7, #12]
 800269a:	4b11      	ldr	r3, [pc, #68]	; (80026e0 <HAL_TIM_Encoder_MspInit+0x88>)
 800269c:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800269e:	4a10      	ldr	r2, [pc, #64]	; (80026e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80026a0:	f043 0301 	orr.w	r3, r3, #1
 80026a4:	6313      	str	r3, [r2, #48]	; 0x30
 80026a6:	4b0e      	ldr	r3, [pc, #56]	; (80026e0 <HAL_TIM_Encoder_MspInit+0x88>)
 80026a8:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80026aa:	f003 0301 	and.w	r3, r3, #1
 80026ae:	60fb      	str	r3, [r7, #12]
 80026b0:	68fb      	ldr	r3, [r7, #12]
    /**TIM1 GPIO Configuration
    PA8     ------> TIM1_CH1
    PA9     ------> TIM1_CH2
    */
    GPIO_InitStruct.Pin = GPIO_PIN_8|GPIO_PIN_9;
 80026b2:	f44f 7340 	mov.w	r3, #768	; 0x300
 80026b6:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80026b8:	2302      	movs	r3, #2
 80026ba:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80026bc:	2300      	movs	r3, #0
 80026be:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80026c0:	2300      	movs	r3, #0
 80026c2:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF1_TIM1;
 80026c4:	2301      	movs	r3, #1
 80026c6:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80026c8:	f107 0314 	add.w	r3, r7, #20
 80026cc:	4619      	mov	r1, r3
 80026ce:	4805      	ldr	r0, [pc, #20]	; (80026e4 <HAL_TIM_Encoder_MspInit+0x8c>)
 80026d0:	f000 fb0c 	bl	8002cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM1_MspInit 1 */

  /* USER CODE END TIM1_MspInit 1 */
  }

}
 80026d4:	bf00      	nop
 80026d6:	3728      	adds	r7, #40	; 0x28
 80026d8:	46bd      	mov	sp, r7
 80026da:	bd80      	pop	{r7, pc}
 80026dc:	40010000 	.word	0x40010000
 80026e0:	40023800 	.word	0x40023800
 80026e4:	40020000 	.word	0x40020000

080026e8 <HAL_TIM_Base_MspInit>:
* This function configures the hardware resources used in this example
* @param htim_base: TIM_Base handle pointer
* @retval None
*/
void HAL_TIM_Base_MspInit(TIM_HandleTypeDef* htim_base)
{
 80026e8:	b580      	push	{r7, lr}
 80026ea:	b084      	sub	sp, #16
 80026ec:	af00      	add	r7, sp, #0
 80026ee:	6078      	str	r0, [r7, #4]
  if(htim_base->Instance==TIM2)
 80026f0:	687b      	ldr	r3, [r7, #4]
 80026f2:	681b      	ldr	r3, [r3, #0]
 80026f4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80026f8:	d116      	bne.n	8002728 <HAL_TIM_Base_MspInit+0x40>
  {
  /* USER CODE BEGIN TIM2_MspInit 0 */

  /* USER CODE END TIM2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_TIM2_CLK_ENABLE();
 80026fa:	2300      	movs	r3, #0
 80026fc:	60fb      	str	r3, [r7, #12]
 80026fe:	4b1a      	ldr	r3, [pc, #104]	; (8002768 <HAL_TIM_Base_MspInit+0x80>)
 8002700:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002702:	4a19      	ldr	r2, [pc, #100]	; (8002768 <HAL_TIM_Base_MspInit+0x80>)
 8002704:	f043 0301 	orr.w	r3, r3, #1
 8002708:	6413      	str	r3, [r2, #64]	; 0x40
 800270a:	4b17      	ldr	r3, [pc, #92]	; (8002768 <HAL_TIM_Base_MspInit+0x80>)
 800270c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800270e:	f003 0301 	and.w	r3, r3, #1
 8002712:	60fb      	str	r3, [r7, #12]
 8002714:	68fb      	ldr	r3, [r7, #12]
    /* TIM2 interrupt Init */
    HAL_NVIC_SetPriority(TIM2_IRQn, 0, 0);
 8002716:	2200      	movs	r2, #0
 8002718:	2100      	movs	r1, #0
 800271a:	201c      	movs	r0, #28
 800271c:	f000 faa1 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM2_IRQn);
 8002720:	201c      	movs	r0, #28
 8002722:	f000 faba 	bl	8002c9a <HAL_NVIC_EnableIRQ>
  /* USER CODE BEGIN TIM3_MspInit 1 */

  /* USER CODE END TIM3_MspInit 1 */
  }

}
 8002726:	e01a      	b.n	800275e <HAL_TIM_Base_MspInit+0x76>
  else if(htim_base->Instance==TIM3)
 8002728:	687b      	ldr	r3, [r7, #4]
 800272a:	681b      	ldr	r3, [r3, #0]
 800272c:	4a0f      	ldr	r2, [pc, #60]	; (800276c <HAL_TIM_Base_MspInit+0x84>)
 800272e:	4293      	cmp	r3, r2
 8002730:	d115      	bne.n	800275e <HAL_TIM_Base_MspInit+0x76>
    __HAL_RCC_TIM3_CLK_ENABLE();
 8002732:	2300      	movs	r3, #0
 8002734:	60bb      	str	r3, [r7, #8]
 8002736:	4b0c      	ldr	r3, [pc, #48]	; (8002768 <HAL_TIM_Base_MspInit+0x80>)
 8002738:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800273a:	4a0b      	ldr	r2, [pc, #44]	; (8002768 <HAL_TIM_Base_MspInit+0x80>)
 800273c:	f043 0302 	orr.w	r3, r3, #2
 8002740:	6413      	str	r3, [r2, #64]	; 0x40
 8002742:	4b09      	ldr	r3, [pc, #36]	; (8002768 <HAL_TIM_Base_MspInit+0x80>)
 8002744:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 8002746:	f003 0302 	and.w	r3, r3, #2
 800274a:	60bb      	str	r3, [r7, #8]
 800274c:	68bb      	ldr	r3, [r7, #8]
    HAL_NVIC_SetPriority(TIM3_IRQn, 0, 0);
 800274e:	2200      	movs	r2, #0
 8002750:	2100      	movs	r1, #0
 8002752:	201d      	movs	r0, #29
 8002754:	f000 fa85 	bl	8002c62 <HAL_NVIC_SetPriority>
    HAL_NVIC_EnableIRQ(TIM3_IRQn);
 8002758:	201d      	movs	r0, #29
 800275a:	f000 fa9e 	bl	8002c9a <HAL_NVIC_EnableIRQ>
}
 800275e:	bf00      	nop
 8002760:	3710      	adds	r7, #16
 8002762:	46bd      	mov	sp, r7
 8002764:	bd80      	pop	{r7, pc}
 8002766:	bf00      	nop
 8002768:	40023800 	.word	0x40023800
 800276c:	40000400 	.word	0x40000400

08002770 <HAL_TIM_MspPostInit>:

void HAL_TIM_MspPostInit(TIM_HandleTypeDef* htim)
{
 8002770:	b580      	push	{r7, lr}
 8002772:	b088      	sub	sp, #32
 8002774:	af00      	add	r7, sp, #0
 8002776:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 8002778:	f107 030c 	add.w	r3, r7, #12
 800277c:	2200      	movs	r2, #0
 800277e:	601a      	str	r2, [r3, #0]
 8002780:	605a      	str	r2, [r3, #4]
 8002782:	609a      	str	r2, [r3, #8]
 8002784:	60da      	str	r2, [r3, #12]
 8002786:	611a      	str	r2, [r3, #16]
  if(htim->Instance==TIM3)
 8002788:	687b      	ldr	r3, [r7, #4]
 800278a:	681b      	ldr	r3, [r3, #0]
 800278c:	4a12      	ldr	r2, [pc, #72]	; (80027d8 <HAL_TIM_MspPostInit+0x68>)
 800278e:	4293      	cmp	r3, r2
 8002790:	d11d      	bne.n	80027ce <HAL_TIM_MspPostInit+0x5e>
  {
  /* USER CODE BEGIN TIM3_MspPostInit 0 */

  /* USER CODE END TIM3_MspPostInit 0 */

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002792:	2300      	movs	r3, #0
 8002794:	60bb      	str	r3, [r7, #8]
 8002796:	4b11      	ldr	r3, [pc, #68]	; (80027dc <HAL_TIM_MspPostInit+0x6c>)
 8002798:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800279a:	4a10      	ldr	r2, [pc, #64]	; (80027dc <HAL_TIM_MspPostInit+0x6c>)
 800279c:	f043 0301 	orr.w	r3, r3, #1
 80027a0:	6313      	str	r3, [r2, #48]	; 0x30
 80027a2:	4b0e      	ldr	r3, [pc, #56]	; (80027dc <HAL_TIM_MspPostInit+0x6c>)
 80027a4:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 80027a6:	f003 0301 	and.w	r3, r3, #1
 80027aa:	60bb      	str	r3, [r7, #8]
 80027ac:	68bb      	ldr	r3, [r7, #8]
    /**TIM3 GPIO Configuration
    PA6     ------> TIM3_CH1
    */
    GPIO_InitStruct.Pin = GPIO_PIN_6;
 80027ae:	2340      	movs	r3, #64	; 0x40
 80027b0:	60fb      	str	r3, [r7, #12]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 80027b2:	2302      	movs	r3, #2
 80027b4:	613b      	str	r3, [r7, #16]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 80027b6:	2300      	movs	r3, #0
 80027b8:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_LOW;
 80027ba:	2300      	movs	r3, #0
 80027bc:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Alternate = GPIO_AF2_TIM3;
 80027be:	2302      	movs	r3, #2
 80027c0:	61fb      	str	r3, [r7, #28]
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 80027c2:	f107 030c 	add.w	r3, r7, #12
 80027c6:	4619      	mov	r1, r3
 80027c8:	4805      	ldr	r0, [pc, #20]	; (80027e0 <HAL_TIM_MspPostInit+0x70>)
 80027ca:	f000 fa8f 	bl	8002cec <HAL_GPIO_Init>
  /* USER CODE BEGIN TIM3_MspPostInit 1 */

  /* USER CODE END TIM3_MspPostInit 1 */
  }

}
 80027ce:	bf00      	nop
 80027d0:	3720      	adds	r7, #32
 80027d2:	46bd      	mov	sp, r7
 80027d4:	bd80      	pop	{r7, pc}
 80027d6:	bf00      	nop
 80027d8:	40000400 	.word	0x40000400
 80027dc:	40023800 	.word	0x40023800
 80027e0:	40020000 	.word	0x40020000

080027e4 <HAL_UART_MspInit>:
* This function configures the hardware resources used in this example
* @param huart: UART handle pointer
* @retval None
*/
void HAL_UART_MspInit(UART_HandleTypeDef* huart)
{
 80027e4:	b580      	push	{r7, lr}
 80027e6:	b08a      	sub	sp, #40	; 0x28
 80027e8:	af00      	add	r7, sp, #0
 80027ea:	6078      	str	r0, [r7, #4]
  GPIO_InitTypeDef GPIO_InitStruct = {0};
 80027ec:	f107 0314 	add.w	r3, r7, #20
 80027f0:	2200      	movs	r2, #0
 80027f2:	601a      	str	r2, [r3, #0]
 80027f4:	605a      	str	r2, [r3, #4]
 80027f6:	609a      	str	r2, [r3, #8]
 80027f8:	60da      	str	r2, [r3, #12]
 80027fa:	611a      	str	r2, [r3, #16]
  if(huart->Instance==USART2)
 80027fc:	687b      	ldr	r3, [r7, #4]
 80027fe:	681b      	ldr	r3, [r3, #0]
 8002800:	4a19      	ldr	r2, [pc, #100]	; (8002868 <HAL_UART_MspInit+0x84>)
 8002802:	4293      	cmp	r3, r2
 8002804:	d12b      	bne.n	800285e <HAL_UART_MspInit+0x7a>
  {
  /* USER CODE BEGIN USART2_MspInit 0 */

  /* USER CODE END USART2_MspInit 0 */
    /* Peripheral clock enable */
    __HAL_RCC_USART2_CLK_ENABLE();
 8002806:	2300      	movs	r3, #0
 8002808:	613b      	str	r3, [r7, #16]
 800280a:	4b18      	ldr	r3, [pc, #96]	; (800286c <HAL_UART_MspInit+0x88>)
 800280c:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800280e:	4a17      	ldr	r2, [pc, #92]	; (800286c <HAL_UART_MspInit+0x88>)
 8002810:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002814:	6413      	str	r3, [r2, #64]	; 0x40
 8002816:	4b15      	ldr	r3, [pc, #84]	; (800286c <HAL_UART_MspInit+0x88>)
 8002818:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 800281a:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800281e:	613b      	str	r3, [r7, #16]
 8002820:	693b      	ldr	r3, [r7, #16]

    __HAL_RCC_GPIOA_CLK_ENABLE();
 8002822:	2300      	movs	r3, #0
 8002824:	60fb      	str	r3, [r7, #12]
 8002826:	4b11      	ldr	r3, [pc, #68]	; (800286c <HAL_UART_MspInit+0x88>)
 8002828:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 800282a:	4a10      	ldr	r2, [pc, #64]	; (800286c <HAL_UART_MspInit+0x88>)
 800282c:	f043 0301 	orr.w	r3, r3, #1
 8002830:	6313      	str	r3, [r2, #48]	; 0x30
 8002832:	4b0e      	ldr	r3, [pc, #56]	; (800286c <HAL_UART_MspInit+0x88>)
 8002834:	6b1b      	ldr	r3, [r3, #48]	; 0x30
 8002836:	f003 0301 	and.w	r3, r3, #1
 800283a:	60fb      	str	r3, [r7, #12]
 800283c:	68fb      	ldr	r3, [r7, #12]
    /**USART2 GPIO Configuration
    PA2     ------> USART2_TX
    PA3     ------> USART2_RX
    */
    GPIO_InitStruct.Pin = USART_TX_Pin|USART_RX_Pin;
 800283e:	230c      	movs	r3, #12
 8002840:	617b      	str	r3, [r7, #20]
    GPIO_InitStruct.Mode = GPIO_MODE_AF_PP;
 8002842:	2302      	movs	r3, #2
 8002844:	61bb      	str	r3, [r7, #24]
    GPIO_InitStruct.Pull = GPIO_NOPULL;
 8002846:	2300      	movs	r3, #0
 8002848:	61fb      	str	r3, [r7, #28]
    GPIO_InitStruct.Speed = GPIO_SPEED_FREQ_VERY_HIGH;
 800284a:	2303      	movs	r3, #3
 800284c:	623b      	str	r3, [r7, #32]
    GPIO_InitStruct.Alternate = GPIO_AF7_USART2;
 800284e:	2307      	movs	r3, #7
 8002850:	627b      	str	r3, [r7, #36]	; 0x24
    HAL_GPIO_Init(GPIOA, &GPIO_InitStruct);
 8002852:	f107 0314 	add.w	r3, r7, #20
 8002856:	4619      	mov	r1, r3
 8002858:	4805      	ldr	r0, [pc, #20]	; (8002870 <HAL_UART_MspInit+0x8c>)
 800285a:	f000 fa47 	bl	8002cec <HAL_GPIO_Init>
  /* USER CODE BEGIN USART2_MspInit 1 */

  /* USER CODE END USART2_MspInit 1 */
  }

}
 800285e:	bf00      	nop
 8002860:	3728      	adds	r7, #40	; 0x28
 8002862:	46bd      	mov	sp, r7
 8002864:	bd80      	pop	{r7, pc}
 8002866:	bf00      	nop
 8002868:	40004400 	.word	0x40004400
 800286c:	40023800 	.word	0x40023800
 8002870:	40020000 	.word	0x40020000

08002874 <NMI_Handler>:
/******************************************************************************/
/**
  * @brief This function handles Non maskable interrupt.
  */
void NMI_Handler(void)
{
 8002874:	b480      	push	{r7}
 8002876:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN NonMaskableInt_IRQn 0 */

  /* USER CODE END NonMaskableInt_IRQn 0 */
  /* USER CODE BEGIN NonMaskableInt_IRQn 1 */
  while (1)
 8002878:	e7fe      	b.n	8002878 <NMI_Handler+0x4>

0800287a <HardFault_Handler>:

/**
  * @brief This function handles Hard fault interrupt.
  */
void HardFault_Handler(void)
{
 800287a:	b480      	push	{r7}
 800287c:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN HardFault_IRQn 0 */

  /* USER CODE END HardFault_IRQn 0 */
  while (1)
 800287e:	e7fe      	b.n	800287e <HardFault_Handler+0x4>

08002880 <MemManage_Handler>:

/**
  * @brief This function handles Memory management fault.
  */
void MemManage_Handler(void)
{
 8002880:	b480      	push	{r7}
 8002882:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN MemoryManagement_IRQn 0 */

  /* USER CODE END MemoryManagement_IRQn 0 */
  while (1)
 8002884:	e7fe      	b.n	8002884 <MemManage_Handler+0x4>

08002886 <BusFault_Handler>:

/**
  * @brief This function handles Pre-fetch fault, memory access fault.
  */
void BusFault_Handler(void)
{
 8002886:	b480      	push	{r7}
 8002888:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN BusFault_IRQn 0 */

  /* USER CODE END BusFault_IRQn 0 */
  while (1)
 800288a:	e7fe      	b.n	800288a <BusFault_Handler+0x4>

0800288c <UsageFault_Handler>:

/**
  * @brief This function handles Undefined instruction or illegal state.
  */
void UsageFault_Handler(void)
{
 800288c:	b480      	push	{r7}
 800288e:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN UsageFault_IRQn 0 */

  /* USER CODE END UsageFault_IRQn 0 */
  while (1)
 8002890:	e7fe      	b.n	8002890 <UsageFault_Handler+0x4>

08002892 <SVC_Handler>:

/**
  * @brief This function handles System service call via SWI instruction.
  */
void SVC_Handler(void)
{
 8002892:	b480      	push	{r7}
 8002894:	af00      	add	r7, sp, #0

  /* USER CODE END SVCall_IRQn 0 */
  /* USER CODE BEGIN SVCall_IRQn 1 */

  /* USER CODE END SVCall_IRQn 1 */
}
 8002896:	bf00      	nop
 8002898:	46bd      	mov	sp, r7
 800289a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800289e:	4770      	bx	lr

080028a0 <DebugMon_Handler>:

/**
  * @brief This function handles Debug monitor.
  */
void DebugMon_Handler(void)
{
 80028a0:	b480      	push	{r7}
 80028a2:	af00      	add	r7, sp, #0

  /* USER CODE END DebugMonitor_IRQn 0 */
  /* USER CODE BEGIN DebugMonitor_IRQn 1 */

  /* USER CODE END DebugMonitor_IRQn 1 */
}
 80028a4:	bf00      	nop
 80028a6:	46bd      	mov	sp, r7
 80028a8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ac:	4770      	bx	lr

080028ae <PendSV_Handler>:

/**
  * @brief This function handles Pendable request for system service.
  */
void PendSV_Handler(void)
{
 80028ae:	b480      	push	{r7}
 80028b0:	af00      	add	r7, sp, #0

  /* USER CODE END PendSV_IRQn 0 */
  /* USER CODE BEGIN PendSV_IRQn 1 */

  /* USER CODE END PendSV_IRQn 1 */
}
 80028b2:	bf00      	nop
 80028b4:	46bd      	mov	sp, r7
 80028b6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80028ba:	4770      	bx	lr

080028bc <SysTick_Handler>:

/**
  * @brief This function handles System tick timer.
  */
void SysTick_Handler(void)
{
 80028bc:	b580      	push	{r7, lr}
 80028be:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN SysTick_IRQn 0 */

  /* USER CODE END SysTick_IRQn 0 */
  HAL_IncTick();
 80028c0:	f000 f8b0 	bl	8002a24 <HAL_IncTick>
  /* USER CODE BEGIN SysTick_IRQn 1 */

  /* USER CODE END SysTick_IRQn 1 */
}
 80028c4:	bf00      	nop
 80028c6:	bd80      	pop	{r7, pc}

080028c8 <EXTI9_5_IRQHandler>:

/**
  * @brief This function handles EXTI line[9:5] interrupts.
  */
void EXTI9_5_IRQHandler(void)
{
 80028c8:	b580      	push	{r7, lr}
 80028ca:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN EXTI9_5_IRQn 0 */

  /* USER CODE END EXTI9_5_IRQn 0 */
  HAL_GPIO_EXTI_IRQHandler(GPIO_PIN_7);
 80028cc:	2080      	movs	r0, #128	; 0x80
 80028ce:	f000 fbab 	bl	8003028 <HAL_GPIO_EXTI_IRQHandler>
  /* USER CODE BEGIN EXTI9_5_IRQn 1 */

  /* USER CODE END EXTI9_5_IRQn 1 */
}
 80028d2:	bf00      	nop
 80028d4:	bd80      	pop	{r7, pc}
	...

080028d8 <TIM2_IRQHandler>:

/**
  * @brief This function handles TIM2 global interrupt.
  */
void TIM2_IRQHandler(void)
{
 80028d8:	b580      	push	{r7, lr}
 80028da:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM2_IRQn 0 */

  /* USER CODE END TIM2_IRQn 0 */
  HAL_TIM_IRQHandler(&htim2);
 80028dc:	4802      	ldr	r0, [pc, #8]	; (80028e8 <TIM2_IRQHandler+0x10>)
 80028de:	f001 f9cb 	bl	8003c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM2_IRQn 1 */

  /* USER CODE END TIM2_IRQn 1 */
}
 80028e2:	bf00      	nop
 80028e4:	bd80      	pop	{r7, pc}
 80028e6:	bf00      	nop
 80028e8:	200001ec 	.word	0x200001ec

080028ec <TIM3_IRQHandler>:

/**
  * @brief This function handles TIM3 global interrupt.
  */
void TIM3_IRQHandler(void)
{
 80028ec:	b580      	push	{r7, lr}
 80028ee:	af00      	add	r7, sp, #0
  /* USER CODE BEGIN TIM3_IRQn 0 */

  /* USER CODE END TIM3_IRQn 0 */
  HAL_TIM_IRQHandler(&htim3);
 80028f0:	4802      	ldr	r0, [pc, #8]	; (80028fc <TIM3_IRQHandler+0x10>)
 80028f2:	f001 f9c1 	bl	8003c78 <HAL_TIM_IRQHandler>
  /* USER CODE BEGIN TIM3_IRQn 1 */

  /* USER CODE END TIM3_IRQn 1 */
}
 80028f6:	bf00      	nop
 80028f8:	bd80      	pop	{r7, pc}
 80028fa:	bf00      	nop
 80028fc:	2000016c 	.word	0x2000016c

08002900 <SystemInit>:
  *         configuration.
  * @param  None
  * @retval None
  */
void SystemInit(void)
{
 8002900:	b480      	push	{r7}
 8002902:	af00      	add	r7, sp, #0
  /* FPU settings ------------------------------------------------------------*/
  #if (__FPU_PRESENT == 1) && (__FPU_USED == 1)
    SCB->CPACR |= ((3UL << 10*2)|(3UL << 11*2));  /* set CP10 and CP11 Full Access */
 8002904:	4b08      	ldr	r3, [pc, #32]	; (8002928 <SystemInit+0x28>)
 8002906:	f8d3 3088 	ldr.w	r3, [r3, #136]	; 0x88
 800290a:	4a07      	ldr	r2, [pc, #28]	; (8002928 <SystemInit+0x28>)
 800290c:	f443 0370 	orr.w	r3, r3, #15728640	; 0xf00000
 8002910:	f8c2 3088 	str.w	r3, [r2, #136]	; 0x88

  /* Configure the Vector Table location add offset address ------------------*/
#ifdef VECT_TAB_SRAM
  SCB->VTOR = SRAM_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal SRAM */
#else
  SCB->VTOR = FLASH_BASE | VECT_TAB_OFFSET; /* Vector Table Relocation in Internal FLASH */
 8002914:	4b04      	ldr	r3, [pc, #16]	; (8002928 <SystemInit+0x28>)
 8002916:	f04f 6200 	mov.w	r2, #134217728	; 0x8000000
 800291a:	609a      	str	r2, [r3, #8]
#endif
}
 800291c:	bf00      	nop
 800291e:	46bd      	mov	sp, r7
 8002920:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002924:	4770      	bx	lr
 8002926:	bf00      	nop
 8002928:	e000ed00 	.word	0xe000ed00

0800292c <Reset_Handler>:

    .section  .text.Reset_Handler
  .weak  Reset_Handler
  .type  Reset_Handler, %function
Reset_Handler:  
 ldr   sp, =_estack    		 /* set stack pointer */
 800292c:	f8df d034 	ldr.w	sp, [pc, #52]	; 8002964 <LoopFillZerobss+0x14>

/* Copy the data segment initializers from flash to SRAM */  
  movs  r1, #0
 8002930:	2100      	movs	r1, #0
  b  LoopCopyDataInit
 8002932:	e003      	b.n	800293c <LoopCopyDataInit>

08002934 <CopyDataInit>:

CopyDataInit:
  ldr  r3, =_sidata
 8002934:	4b0c      	ldr	r3, [pc, #48]	; (8002968 <LoopFillZerobss+0x18>)
  ldr  r3, [r3, r1]
 8002936:	585b      	ldr	r3, [r3, r1]
  str  r3, [r0, r1]
 8002938:	5043      	str	r3, [r0, r1]
  adds  r1, r1, #4
 800293a:	3104      	adds	r1, #4

0800293c <LoopCopyDataInit>:
    
LoopCopyDataInit:
  ldr  r0, =_sdata
 800293c:	480b      	ldr	r0, [pc, #44]	; (800296c <LoopFillZerobss+0x1c>)
  ldr  r3, =_edata
 800293e:	4b0c      	ldr	r3, [pc, #48]	; (8002970 <LoopFillZerobss+0x20>)
  adds  r2, r0, r1
 8002940:	1842      	adds	r2, r0, r1
  cmp  r2, r3
 8002942:	429a      	cmp	r2, r3
  bcc  CopyDataInit
 8002944:	d3f6      	bcc.n	8002934 <CopyDataInit>
  ldr  r2, =_sbss
 8002946:	4a0b      	ldr	r2, [pc, #44]	; (8002974 <LoopFillZerobss+0x24>)
  b  LoopFillZerobss
 8002948:	e002      	b.n	8002950 <LoopFillZerobss>

0800294a <FillZerobss>:
/* Zero fill the bss segment. */  
FillZerobss:
  movs  r3, #0
 800294a:	2300      	movs	r3, #0
  str  r3, [r2], #4
 800294c:	f842 3b04 	str.w	r3, [r2], #4

08002950 <LoopFillZerobss>:
    
LoopFillZerobss:
  ldr  r3, = _ebss
 8002950:	4b09      	ldr	r3, [pc, #36]	; (8002978 <LoopFillZerobss+0x28>)
  cmp  r2, r3
 8002952:	429a      	cmp	r2, r3
  bcc  FillZerobss
 8002954:	d3f9      	bcc.n	800294a <FillZerobss>

/* Call the clock system intitialization function.*/
  bl  SystemInit   
 8002956:	f7ff ffd3 	bl	8002900 <SystemInit>
/* Call static constructors */
    bl __libc_init_array
 800295a:	f002 fb85 	bl	8005068 <__libc_init_array>
/* Call the application's entry point.*/
  bl  main
 800295e:	f7fe fb81 	bl	8001064 <main>
  bx  lr    
 8002962:	4770      	bx	lr
 ldr   sp, =_estack    		 /* set stack pointer */
 8002964:	20020000 	.word	0x20020000
  ldr  r3, =_sidata
 8002968:	080060b8 	.word	0x080060b8
  ldr  r0, =_sdata
 800296c:	20000000 	.word	0x20000000
  ldr  r3, =_edata
 8002970:	20000098 	.word	0x20000098
  ldr  r2, =_sbss
 8002974:	20000098 	.word	0x20000098
  ldr  r3, = _ebss
 8002978:	20000270 	.word	0x20000270

0800297c <ADC_IRQHandler>:
 * @retval None       
*/
    .section  .text.Default_Handler,"ax",%progbits
Default_Handler:
Infinite_Loop:
  b  Infinite_Loop
 800297c:	e7fe      	b.n	800297c <ADC_IRQHandler>
	...

08002980 <HAL_Init>:
  *         need to ensure that the SysTick time base is always set to 1 millisecond
  *         to have correct HAL operation.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_Init(void)
{
 8002980:	b580      	push	{r7, lr}
 8002982:	af00      	add	r7, sp, #0
  /* Configure Flash prefetch, Instruction cache, Data cache */ 
#if (INSTRUCTION_CACHE_ENABLE != 0U)
  __HAL_FLASH_INSTRUCTION_CACHE_ENABLE();
 8002984:	4b0e      	ldr	r3, [pc, #56]	; (80029c0 <HAL_Init+0x40>)
 8002986:	681b      	ldr	r3, [r3, #0]
 8002988:	4a0d      	ldr	r2, [pc, #52]	; (80029c0 <HAL_Init+0x40>)
 800298a:	f443 7300 	orr.w	r3, r3, #512	; 0x200
 800298e:	6013      	str	r3, [r2, #0]
#endif /* INSTRUCTION_CACHE_ENABLE */

#if (DATA_CACHE_ENABLE != 0U)
  __HAL_FLASH_DATA_CACHE_ENABLE();
 8002990:	4b0b      	ldr	r3, [pc, #44]	; (80029c0 <HAL_Init+0x40>)
 8002992:	681b      	ldr	r3, [r3, #0]
 8002994:	4a0a      	ldr	r2, [pc, #40]	; (80029c0 <HAL_Init+0x40>)
 8002996:	f443 6380 	orr.w	r3, r3, #1024	; 0x400
 800299a:	6013      	str	r3, [r2, #0]
#endif /* DATA_CACHE_ENABLE */

#if (PREFETCH_ENABLE != 0U)
  __HAL_FLASH_PREFETCH_BUFFER_ENABLE();
 800299c:	4b08      	ldr	r3, [pc, #32]	; (80029c0 <HAL_Init+0x40>)
 800299e:	681b      	ldr	r3, [r3, #0]
 80029a0:	4a07      	ldr	r2, [pc, #28]	; (80029c0 <HAL_Init+0x40>)
 80029a2:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80029a6:	6013      	str	r3, [r2, #0]
#endif /* PREFETCH_ENABLE */

  /* Set Interrupt Group Priority */
  HAL_NVIC_SetPriorityGrouping(NVIC_PRIORITYGROUP_4);
 80029a8:	2003      	movs	r0, #3
 80029aa:	f000 f94f 	bl	8002c4c <HAL_NVIC_SetPriorityGrouping>

  /* Use systick as time base source and configure 1ms tick (default clock after Reset is HSI) */
  HAL_InitTick(TICK_INT_PRIORITY);
 80029ae:	2000      	movs	r0, #0
 80029b0:	f000 f808 	bl	80029c4 <HAL_InitTick>

  /* Init the low level hardware */
  HAL_MspInit();
 80029b4:	f7ff fe28 	bl	8002608 <HAL_MspInit>

  /* Return function status */
  return HAL_OK;
 80029b8:	2300      	movs	r3, #0
}
 80029ba:	4618      	mov	r0, r3
 80029bc:	bd80      	pop	{r7, pc}
 80029be:	bf00      	nop
 80029c0:	40023c00 	.word	0x40023c00

080029c4 <HAL_InitTick>:
  *       implementation  in user file.
  * @param TickPriority Tick interrupt priority.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_InitTick(uint32_t TickPriority)
{
 80029c4:	b580      	push	{r7, lr}
 80029c6:	b082      	sub	sp, #8
 80029c8:	af00      	add	r7, sp, #0
 80029ca:	6078      	str	r0, [r7, #4]
  /* Configure the SysTick to have interrupt in 1ms time basis*/
  if (HAL_SYSTICK_Config(SystemCoreClock / (1000U / uwTickFreq)) > 0U)
 80029cc:	4b12      	ldr	r3, [pc, #72]	; (8002a18 <HAL_InitTick+0x54>)
 80029ce:	681a      	ldr	r2, [r3, #0]
 80029d0:	4b12      	ldr	r3, [pc, #72]	; (8002a1c <HAL_InitTick+0x58>)
 80029d2:	781b      	ldrb	r3, [r3, #0]
 80029d4:	4619      	mov	r1, r3
 80029d6:	f44f 737a 	mov.w	r3, #1000	; 0x3e8
 80029da:	fbb3 f3f1 	udiv	r3, r3, r1
 80029de:	fbb2 f3f3 	udiv	r3, r2, r3
 80029e2:	4618      	mov	r0, r3
 80029e4:	f000 f975 	bl	8002cd2 <HAL_SYSTICK_Config>
 80029e8:	4603      	mov	r3, r0
 80029ea:	2b00      	cmp	r3, #0
 80029ec:	d001      	beq.n	80029f2 <HAL_InitTick+0x2e>
  {
    return HAL_ERROR;
 80029ee:	2301      	movs	r3, #1
 80029f0:	e00e      	b.n	8002a10 <HAL_InitTick+0x4c>
  }

  /* Configure the SysTick IRQ priority */
  if (TickPriority < (1UL << __NVIC_PRIO_BITS))
 80029f2:	687b      	ldr	r3, [r7, #4]
 80029f4:	2b0f      	cmp	r3, #15
 80029f6:	d80a      	bhi.n	8002a0e <HAL_InitTick+0x4a>
  {
    HAL_NVIC_SetPriority(SysTick_IRQn, TickPriority, 0U);
 80029f8:	2200      	movs	r2, #0
 80029fa:	6879      	ldr	r1, [r7, #4]
 80029fc:	f04f 30ff 	mov.w	r0, #4294967295
 8002a00:	f000 f92f 	bl	8002c62 <HAL_NVIC_SetPriority>
    uwTickPrio = TickPriority;
 8002a04:	4a06      	ldr	r2, [pc, #24]	; (8002a20 <HAL_InitTick+0x5c>)
 8002a06:	687b      	ldr	r3, [r7, #4]
 8002a08:	6013      	str	r3, [r2, #0]
  {
    return HAL_ERROR;
  }

  /* Return function status */
  return HAL_OK;
 8002a0a:	2300      	movs	r3, #0
 8002a0c:	e000      	b.n	8002a10 <HAL_InitTick+0x4c>
    return HAL_ERROR;
 8002a0e:	2301      	movs	r3, #1
}
 8002a10:	4618      	mov	r0, r3
 8002a12:	3708      	adds	r7, #8
 8002a14:	46bd      	mov	sp, r7
 8002a16:	bd80      	pop	{r7, pc}
 8002a18:	20000024 	.word	0x20000024
 8002a1c:	2000002c 	.word	0x2000002c
 8002a20:	20000028 	.word	0x20000028

08002a24 <HAL_IncTick>:
 * @note This function is declared as __weak to be overwritten in case of other 
  *      implementations in user file.
  * @retval None
  */
__weak void HAL_IncTick(void)
{
 8002a24:	b480      	push	{r7}
 8002a26:	af00      	add	r7, sp, #0
  uwTick += uwTickFreq;
 8002a28:	4b06      	ldr	r3, [pc, #24]	; (8002a44 <HAL_IncTick+0x20>)
 8002a2a:	781b      	ldrb	r3, [r3, #0]
 8002a2c:	461a      	mov	r2, r3
 8002a2e:	4b06      	ldr	r3, [pc, #24]	; (8002a48 <HAL_IncTick+0x24>)
 8002a30:	681b      	ldr	r3, [r3, #0]
 8002a32:	4413      	add	r3, r2
 8002a34:	4a04      	ldr	r2, [pc, #16]	; (8002a48 <HAL_IncTick+0x24>)
 8002a36:	6013      	str	r3, [r2, #0]
}
 8002a38:	bf00      	nop
 8002a3a:	46bd      	mov	sp, r7
 8002a3c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a40:	4770      	bx	lr
 8002a42:	bf00      	nop
 8002a44:	2000002c 	.word	0x2000002c
 8002a48:	2000026c 	.word	0x2000026c

08002a4c <HAL_GetTick>:
  * @note This function is declared as __weak to be overwritten in case of other 
  *       implementations in user file.
  * @retval tick value
  */
__weak uint32_t HAL_GetTick(void)
{
 8002a4c:	b480      	push	{r7}
 8002a4e:	af00      	add	r7, sp, #0
  return uwTick;
 8002a50:	4b03      	ldr	r3, [pc, #12]	; (8002a60 <HAL_GetTick+0x14>)
 8002a52:	681b      	ldr	r3, [r3, #0]
}
 8002a54:	4618      	mov	r0, r3
 8002a56:	46bd      	mov	sp, r7
 8002a58:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002a5c:	4770      	bx	lr
 8002a5e:	bf00      	nop
 8002a60:	2000026c 	.word	0x2000026c

08002a64 <__NVIC_SetPriorityGrouping>:
           In case of a conflict between priority grouping and available
           priority bits (__NVIC_PRIO_BITS), the smallest possible priority group is set.
  \param [in]      PriorityGroup  Priority grouping field.
 */
__STATIC_INLINE void __NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002a64:	b480      	push	{r7}
 8002a66:	b085      	sub	sp, #20
 8002a68:	af00      	add	r7, sp, #0
 8002a6a:	6078      	str	r0, [r7, #4]
  uint32_t reg_value;
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);             /* only values 0..7 are used          */
 8002a6c:	687b      	ldr	r3, [r7, #4]
 8002a6e:	f003 0307 	and.w	r3, r3, #7
 8002a72:	60fb      	str	r3, [r7, #12]

  reg_value  =  SCB->AIRCR;                                                   /* read old register configuration    */
 8002a74:	4b0c      	ldr	r3, [pc, #48]	; (8002aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a76:	68db      	ldr	r3, [r3, #12]
 8002a78:	60bb      	str	r3, [r7, #8]
  reg_value &= ~((uint32_t)(SCB_AIRCR_VECTKEY_Msk | SCB_AIRCR_PRIGROUP_Msk)); /* clear bits to change               */
 8002a7a:	68ba      	ldr	r2, [r7, #8]
 8002a7c:	f64f 03ff 	movw	r3, #63743	; 0xf8ff
 8002a80:	4013      	ands	r3, r2
 8002a82:	60bb      	str	r3, [r7, #8]
  reg_value  =  (reg_value                                   |
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
                (PriorityGroupTmp << SCB_AIRCR_PRIGROUP_Pos)  );              /* Insert write key and priority group */
 8002a84:	68fb      	ldr	r3, [r7, #12]
 8002a86:	021a      	lsls	r2, r3, #8
                ((uint32_t)0x5FAUL << SCB_AIRCR_VECTKEY_Pos) |
 8002a88:	68bb      	ldr	r3, [r7, #8]
 8002a8a:	4313      	orrs	r3, r2
  reg_value  =  (reg_value                                   |
 8002a8c:	f043 63bf 	orr.w	r3, r3, #100139008	; 0x5f80000
 8002a90:	f443 3300 	orr.w	r3, r3, #131072	; 0x20000
 8002a94:	60bb      	str	r3, [r7, #8]
  SCB->AIRCR =  reg_value;
 8002a96:	4a04      	ldr	r2, [pc, #16]	; (8002aa8 <__NVIC_SetPriorityGrouping+0x44>)
 8002a98:	68bb      	ldr	r3, [r7, #8]
 8002a9a:	60d3      	str	r3, [r2, #12]
}
 8002a9c:	bf00      	nop
 8002a9e:	3714      	adds	r7, #20
 8002aa0:	46bd      	mov	sp, r7
 8002aa2:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002aa6:	4770      	bx	lr
 8002aa8:	e000ed00 	.word	0xe000ed00

08002aac <__NVIC_GetPriorityGrouping>:
  \brief   Get Priority Grouping
  \details Reads the priority grouping field from the NVIC Interrupt Controller.
  \return                Priority grouping field (SCB->AIRCR [10:8] PRIGROUP field).
 */
__STATIC_INLINE uint32_t __NVIC_GetPriorityGrouping(void)
{
 8002aac:	b480      	push	{r7}
 8002aae:	af00      	add	r7, sp, #0
  return ((uint32_t)((SCB->AIRCR & SCB_AIRCR_PRIGROUP_Msk) >> SCB_AIRCR_PRIGROUP_Pos));
 8002ab0:	4b04      	ldr	r3, [pc, #16]	; (8002ac4 <__NVIC_GetPriorityGrouping+0x18>)
 8002ab2:	68db      	ldr	r3, [r3, #12]
 8002ab4:	0a1b      	lsrs	r3, r3, #8
 8002ab6:	f003 0307 	and.w	r3, r3, #7
}
 8002aba:	4618      	mov	r0, r3
 8002abc:	46bd      	mov	sp, r7
 8002abe:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002ac2:	4770      	bx	lr
 8002ac4:	e000ed00 	.word	0xe000ed00

08002ac8 <__NVIC_EnableIRQ>:
  \details Enables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002ac8:	b480      	push	{r7}
 8002aca:	b083      	sub	sp, #12
 8002acc:	af00      	add	r7, sp, #0
 8002ace:	4603      	mov	r3, r0
 8002ad0:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002ad2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ad6:	2b00      	cmp	r3, #0
 8002ad8:	db0b      	blt.n	8002af2 <__NVIC_EnableIRQ+0x2a>
  {
    NVIC->ISER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002ada:	79fb      	ldrb	r3, [r7, #7]
 8002adc:	f003 021f 	and.w	r2, r3, #31
 8002ae0:	4907      	ldr	r1, [pc, #28]	; (8002b00 <__NVIC_EnableIRQ+0x38>)
 8002ae2:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ae6:	095b      	lsrs	r3, r3, #5
 8002ae8:	2001      	movs	r0, #1
 8002aea:	fa00 f202 	lsl.w	r2, r0, r2
 8002aee:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  }
}
 8002af2:	bf00      	nop
 8002af4:	370c      	adds	r7, #12
 8002af6:	46bd      	mov	sp, r7
 8002af8:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002afc:	4770      	bx	lr
 8002afe:	bf00      	nop
 8002b00:	e000e100 	.word	0xe000e100

08002b04 <__NVIC_DisableIRQ>:
  \details Disables a device specific interrupt in the NVIC interrupt controller.
  \param [in]      IRQn  Device specific interrupt number.
  \note    IRQn must not be negative.
 */
__STATIC_INLINE void __NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002b04:	b480      	push	{r7}
 8002b06:	b083      	sub	sp, #12
 8002b08:	af00      	add	r7, sp, #0
 8002b0a:	4603      	mov	r3, r0
 8002b0c:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b0e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b12:	2b00      	cmp	r3, #0
 8002b14:	db12      	blt.n	8002b3c <__NVIC_DisableIRQ+0x38>
  {
    NVIC->ICER[(((uint32_t)IRQn) >> 5UL)] = (uint32_t)(1UL << (((uint32_t)IRQn) & 0x1FUL));
 8002b16:	79fb      	ldrb	r3, [r7, #7]
 8002b18:	f003 021f 	and.w	r2, r3, #31
 8002b1c:	490a      	ldr	r1, [pc, #40]	; (8002b48 <__NVIC_DisableIRQ+0x44>)
 8002b1e:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b22:	095b      	lsrs	r3, r3, #5
 8002b24:	2001      	movs	r0, #1
 8002b26:	fa00 f202 	lsl.w	r2, r0, r2
 8002b2a:	3320      	adds	r3, #32
 8002b2c:	f841 2023 	str.w	r2, [r1, r3, lsl #2]
  \details Acts as a special kind of Data Memory Barrier.
           It completes when all explicit memory accesses before this instruction complete.
 */
__STATIC_FORCEINLINE void __DSB(void)
{
  __ASM volatile ("dsb 0xF":::"memory");
 8002b30:	f3bf 8f4f 	dsb	sy
}
 8002b34:	bf00      	nop
  __ASM volatile ("isb 0xF":::"memory");
 8002b36:	f3bf 8f6f 	isb	sy
}
 8002b3a:	bf00      	nop
    __DSB();
    __ISB();
  }
}
 8002b3c:	bf00      	nop
 8002b3e:	370c      	adds	r7, #12
 8002b40:	46bd      	mov	sp, r7
 8002b42:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b46:	4770      	bx	lr
 8002b48:	e000e100 	.word	0xe000e100

08002b4c <__NVIC_SetPriority>:
  \param [in]      IRQn  Interrupt number.
  \param [in]  priority  Priority to set.
  \note    The priority cannot be set for every processor exception.
 */
__STATIC_INLINE void __NVIC_SetPriority(IRQn_Type IRQn, uint32_t priority)
{
 8002b4c:	b480      	push	{r7}
 8002b4e:	b083      	sub	sp, #12
 8002b50:	af00      	add	r7, sp, #0
 8002b52:	4603      	mov	r3, r0
 8002b54:	6039      	str	r1, [r7, #0]
 8002b56:	71fb      	strb	r3, [r7, #7]
  if ((int32_t)(IRQn) >= 0)
 8002b58:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b5c:	2b00      	cmp	r3, #0
 8002b5e:	db0a      	blt.n	8002b76 <__NVIC_SetPriority+0x2a>
  {
    NVIC->IP[((uint32_t)IRQn)]               = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b60:	683b      	ldr	r3, [r7, #0]
 8002b62:	b2da      	uxtb	r2, r3
 8002b64:	490c      	ldr	r1, [pc, #48]	; (8002b98 <__NVIC_SetPriority+0x4c>)
 8002b66:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002b6a:	0112      	lsls	r2, r2, #4
 8002b6c:	b2d2      	uxtb	r2, r2
 8002b6e:	440b      	add	r3, r1
 8002b70:	f883 2300 	strb.w	r2, [r3, #768]	; 0x300
  }
  else
  {
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
  }
}
 8002b74:	e00a      	b.n	8002b8c <__NVIC_SetPriority+0x40>
    SCB->SHP[(((uint32_t)IRQn) & 0xFUL)-4UL] = (uint8_t)((priority << (8U - __NVIC_PRIO_BITS)) & (uint32_t)0xFFUL);
 8002b76:	683b      	ldr	r3, [r7, #0]
 8002b78:	b2da      	uxtb	r2, r3
 8002b7a:	4908      	ldr	r1, [pc, #32]	; (8002b9c <__NVIC_SetPriority+0x50>)
 8002b7c:	79fb      	ldrb	r3, [r7, #7]
 8002b7e:	f003 030f 	and.w	r3, r3, #15
 8002b82:	3b04      	subs	r3, #4
 8002b84:	0112      	lsls	r2, r2, #4
 8002b86:	b2d2      	uxtb	r2, r2
 8002b88:	440b      	add	r3, r1
 8002b8a:	761a      	strb	r2, [r3, #24]
}
 8002b8c:	bf00      	nop
 8002b8e:	370c      	adds	r7, #12
 8002b90:	46bd      	mov	sp, r7
 8002b92:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002b96:	4770      	bx	lr
 8002b98:	e000e100 	.word	0xe000e100
 8002b9c:	e000ed00 	.word	0xe000ed00

08002ba0 <NVIC_EncodePriority>:
  \param [in]   PreemptPriority  Preemptive priority value (starting from 0).
  \param [in]       SubPriority  Subpriority value (starting from 0).
  \return                        Encoded priority. Value can be used in the function \ref NVIC_SetPriority().
 */
__STATIC_INLINE uint32_t NVIC_EncodePriority (uint32_t PriorityGroup, uint32_t PreemptPriority, uint32_t SubPriority)
{
 8002ba0:	b480      	push	{r7}
 8002ba2:	b089      	sub	sp, #36	; 0x24
 8002ba4:	af00      	add	r7, sp, #0
 8002ba6:	60f8      	str	r0, [r7, #12]
 8002ba8:	60b9      	str	r1, [r7, #8]
 8002baa:	607a      	str	r2, [r7, #4]
  uint32_t PriorityGroupTmp = (PriorityGroup & (uint32_t)0x07UL);   /* only values 0..7 are used          */
 8002bac:	68fb      	ldr	r3, [r7, #12]
 8002bae:	f003 0307 	and.w	r3, r3, #7
 8002bb2:	61fb      	str	r3, [r7, #28]
  uint32_t PreemptPriorityBits;
  uint32_t SubPriorityBits;

  PreemptPriorityBits = ((7UL - PriorityGroupTmp) > (uint32_t)(__NVIC_PRIO_BITS)) ? (uint32_t)(__NVIC_PRIO_BITS) : (uint32_t)(7UL - PriorityGroupTmp);
 8002bb4:	69fb      	ldr	r3, [r7, #28]
 8002bb6:	f1c3 0307 	rsb	r3, r3, #7
 8002bba:	2b04      	cmp	r3, #4
 8002bbc:	bf28      	it	cs
 8002bbe:	2304      	movcs	r3, #4
 8002bc0:	61bb      	str	r3, [r7, #24]
  SubPriorityBits     = ((PriorityGroupTmp + (uint32_t)(__NVIC_PRIO_BITS)) < (uint32_t)7UL) ? (uint32_t)0UL : (uint32_t)((PriorityGroupTmp - 7UL) + (uint32_t)(__NVIC_PRIO_BITS));
 8002bc2:	69fb      	ldr	r3, [r7, #28]
 8002bc4:	3304      	adds	r3, #4
 8002bc6:	2b06      	cmp	r3, #6
 8002bc8:	d902      	bls.n	8002bd0 <NVIC_EncodePriority+0x30>
 8002bca:	69fb      	ldr	r3, [r7, #28]
 8002bcc:	3b03      	subs	r3, #3
 8002bce:	e000      	b.n	8002bd2 <NVIC_EncodePriority+0x32>
 8002bd0:	2300      	movs	r3, #0
 8002bd2:	617b      	str	r3, [r7, #20]

  return (
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bd4:	f04f 32ff 	mov.w	r2, #4294967295
 8002bd8:	69bb      	ldr	r3, [r7, #24]
 8002bda:	fa02 f303 	lsl.w	r3, r2, r3
 8002bde:	43da      	mvns	r2, r3
 8002be0:	68bb      	ldr	r3, [r7, #8]
 8002be2:	401a      	ands	r2, r3
 8002be4:	697b      	ldr	r3, [r7, #20]
 8002be6:	409a      	lsls	r2, r3
           ((SubPriority     & (uint32_t)((1UL << (SubPriorityBits    )) - 1UL)))
 8002be8:	f04f 31ff 	mov.w	r1, #4294967295
 8002bec:	697b      	ldr	r3, [r7, #20]
 8002bee:	fa01 f303 	lsl.w	r3, r1, r3
 8002bf2:	43d9      	mvns	r1, r3
 8002bf4:	687b      	ldr	r3, [r7, #4]
 8002bf6:	400b      	ands	r3, r1
           ((PreemptPriority & (uint32_t)((1UL << (PreemptPriorityBits)) - 1UL)) << SubPriorityBits) |
 8002bf8:	4313      	orrs	r3, r2
         );
}
 8002bfa:	4618      	mov	r0, r3
 8002bfc:	3724      	adds	r7, #36	; 0x24
 8002bfe:	46bd      	mov	sp, r7
 8002c00:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002c04:	4770      	bx	lr
	...

08002c08 <SysTick_Config>:
  \note    When the variable <b>__Vendor_SysTickConfig</b> is set to 1, then the
           function <b>SysTick_Config</b> is not included. In this case, the file <b><i>device</i>.h</b>
           must contain a vendor-specific implementation of this function.
 */
__STATIC_INLINE uint32_t SysTick_Config(uint32_t ticks)
{
 8002c08:	b580      	push	{r7, lr}
 8002c0a:	b082      	sub	sp, #8
 8002c0c:	af00      	add	r7, sp, #0
 8002c0e:	6078      	str	r0, [r7, #4]
  if ((ticks - 1UL) > SysTick_LOAD_RELOAD_Msk)
 8002c10:	687b      	ldr	r3, [r7, #4]
 8002c12:	3b01      	subs	r3, #1
 8002c14:	f1b3 7f80 	cmp.w	r3, #16777216	; 0x1000000
 8002c18:	d301      	bcc.n	8002c1e <SysTick_Config+0x16>
  {
    return (1UL);                                                   /* Reload value impossible */
 8002c1a:	2301      	movs	r3, #1
 8002c1c:	e00f      	b.n	8002c3e <SysTick_Config+0x36>
  }

  SysTick->LOAD  = (uint32_t)(ticks - 1UL);                         /* set reload register */
 8002c1e:	4a0a      	ldr	r2, [pc, #40]	; (8002c48 <SysTick_Config+0x40>)
 8002c20:	687b      	ldr	r3, [r7, #4]
 8002c22:	3b01      	subs	r3, #1
 8002c24:	6053      	str	r3, [r2, #4]
  NVIC_SetPriority (SysTick_IRQn, (1UL << __NVIC_PRIO_BITS) - 1UL); /* set Priority for Systick Interrupt */
 8002c26:	210f      	movs	r1, #15
 8002c28:	f04f 30ff 	mov.w	r0, #4294967295
 8002c2c:	f7ff ff8e 	bl	8002b4c <__NVIC_SetPriority>
  SysTick->VAL   = 0UL;                                             /* Load the SysTick Counter Value */
 8002c30:	4b05      	ldr	r3, [pc, #20]	; (8002c48 <SysTick_Config+0x40>)
 8002c32:	2200      	movs	r2, #0
 8002c34:	609a      	str	r2, [r3, #8]
  SysTick->CTRL  = SysTick_CTRL_CLKSOURCE_Msk |
 8002c36:	4b04      	ldr	r3, [pc, #16]	; (8002c48 <SysTick_Config+0x40>)
 8002c38:	2207      	movs	r2, #7
 8002c3a:	601a      	str	r2, [r3, #0]
                   SysTick_CTRL_TICKINT_Msk   |
                   SysTick_CTRL_ENABLE_Msk;                         /* Enable SysTick IRQ and SysTick Timer */
  return (0UL);                                                     /* Function successful */
 8002c3c:	2300      	movs	r3, #0
}
 8002c3e:	4618      	mov	r0, r3
 8002c40:	3708      	adds	r7, #8
 8002c42:	46bd      	mov	sp, r7
 8002c44:	bd80      	pop	{r7, pc}
 8002c46:	bf00      	nop
 8002c48:	e000e010 	.word	0xe000e010

08002c4c <HAL_NVIC_SetPriorityGrouping>:
  * @note   When the NVIC_PriorityGroup_0 is selected, IRQ preemption is no more possible. 
  *         The pending IRQ priority will be managed only by the subpriority. 
  * @retval None
  */
void HAL_NVIC_SetPriorityGrouping(uint32_t PriorityGroup)
{
 8002c4c:	b580      	push	{r7, lr}
 8002c4e:	b082      	sub	sp, #8
 8002c50:	af00      	add	r7, sp, #0
 8002c52:	6078      	str	r0, [r7, #4]
  /* Check the parameters */
  assert_param(IS_NVIC_PRIORITY_GROUP(PriorityGroup));
  
  /* Set the PRIGROUP[10:8] bits according to the PriorityGroup parameter value */
  NVIC_SetPriorityGrouping(PriorityGroup);
 8002c54:	6878      	ldr	r0, [r7, #4]
 8002c56:	f7ff ff05 	bl	8002a64 <__NVIC_SetPriorityGrouping>
}
 8002c5a:	bf00      	nop
 8002c5c:	3708      	adds	r7, #8
 8002c5e:	46bd      	mov	sp, r7
 8002c60:	bd80      	pop	{r7, pc}

08002c62 <HAL_NVIC_SetPriority>:
  *         This parameter can be a value between 0 and 15
  *         A lower priority value indicates a higher priority.          
  * @retval None
  */
void HAL_NVIC_SetPriority(IRQn_Type IRQn, uint32_t PreemptPriority, uint32_t SubPriority)
{ 
 8002c62:	b580      	push	{r7, lr}
 8002c64:	b086      	sub	sp, #24
 8002c66:	af00      	add	r7, sp, #0
 8002c68:	4603      	mov	r3, r0
 8002c6a:	60b9      	str	r1, [r7, #8]
 8002c6c:	607a      	str	r2, [r7, #4]
 8002c6e:	73fb      	strb	r3, [r7, #15]
  uint32_t prioritygroup = 0x00U;
 8002c70:	2300      	movs	r3, #0
 8002c72:	617b      	str	r3, [r7, #20]
  
  /* Check the parameters */
  assert_param(IS_NVIC_SUB_PRIORITY(SubPriority));
  assert_param(IS_NVIC_PREEMPTION_PRIORITY(PreemptPriority));
  
  prioritygroup = NVIC_GetPriorityGrouping();
 8002c74:	f7ff ff1a 	bl	8002aac <__NVIC_GetPriorityGrouping>
 8002c78:	6178      	str	r0, [r7, #20]
  
  NVIC_SetPriority(IRQn, NVIC_EncodePriority(prioritygroup, PreemptPriority, SubPriority));
 8002c7a:	687a      	ldr	r2, [r7, #4]
 8002c7c:	68b9      	ldr	r1, [r7, #8]
 8002c7e:	6978      	ldr	r0, [r7, #20]
 8002c80:	f7ff ff8e 	bl	8002ba0 <NVIC_EncodePriority>
 8002c84:	4602      	mov	r2, r0
 8002c86:	f997 300f 	ldrsb.w	r3, [r7, #15]
 8002c8a:	4611      	mov	r1, r2
 8002c8c:	4618      	mov	r0, r3
 8002c8e:	f7ff ff5d 	bl	8002b4c <__NVIC_SetPriority>
}
 8002c92:	bf00      	nop
 8002c94:	3718      	adds	r7, #24
 8002c96:	46bd      	mov	sp, r7
 8002c98:	bd80      	pop	{r7, pc}

08002c9a <HAL_NVIC_EnableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_EnableIRQ(IRQn_Type IRQn)
{
 8002c9a:	b580      	push	{r7, lr}
 8002c9c:	b082      	sub	sp, #8
 8002c9e:	af00      	add	r7, sp, #0
 8002ca0:	4603      	mov	r3, r0
 8002ca2:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Enable interrupt */
  NVIC_EnableIRQ(IRQn);
 8002ca4:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002ca8:	4618      	mov	r0, r3
 8002caa:	f7ff ff0d 	bl	8002ac8 <__NVIC_EnableIRQ>
}
 8002cae:	bf00      	nop
 8002cb0:	3708      	adds	r7, #8
 8002cb2:	46bd      	mov	sp, r7
 8002cb4:	bd80      	pop	{r7, pc}

08002cb6 <HAL_NVIC_DisableIRQ>:
  *         This parameter can be an enumerator of IRQn_Type enumeration
  *         (For the complete STM32 Devices IRQ Channels list, please refer to the appropriate CMSIS device file (stm32f4xxxx.h))
  * @retval None
  */
void HAL_NVIC_DisableIRQ(IRQn_Type IRQn)
{
 8002cb6:	b580      	push	{r7, lr}
 8002cb8:	b082      	sub	sp, #8
 8002cba:	af00      	add	r7, sp, #0
 8002cbc:	4603      	mov	r3, r0
 8002cbe:	71fb      	strb	r3, [r7, #7]
  /* Check the parameters */
  assert_param(IS_NVIC_DEVICE_IRQ(IRQn));
  
  /* Disable interrupt */
  NVIC_DisableIRQ(IRQn);
 8002cc0:	f997 3007 	ldrsb.w	r3, [r7, #7]
 8002cc4:	4618      	mov	r0, r3
 8002cc6:	f7ff ff1d 	bl	8002b04 <__NVIC_DisableIRQ>
}
 8002cca:	bf00      	nop
 8002ccc:	3708      	adds	r7, #8
 8002cce:	46bd      	mov	sp, r7
 8002cd0:	bd80      	pop	{r7, pc}

08002cd2 <HAL_SYSTICK_Config>:
  * @param  TicksNumb Specifies the ticks Number of ticks between two interrupts.
  * @retval status:  - 0  Function succeeded.
  *                  - 1  Function failed.
  */
uint32_t HAL_SYSTICK_Config(uint32_t TicksNumb)
{
 8002cd2:	b580      	push	{r7, lr}
 8002cd4:	b082      	sub	sp, #8
 8002cd6:	af00      	add	r7, sp, #0
 8002cd8:	6078      	str	r0, [r7, #4]
   return SysTick_Config(TicksNumb);
 8002cda:	6878      	ldr	r0, [r7, #4]
 8002cdc:	f7ff ff94 	bl	8002c08 <SysTick_Config>
 8002ce0:	4603      	mov	r3, r0
}
 8002ce2:	4618      	mov	r0, r3
 8002ce4:	3708      	adds	r7, #8
 8002ce6:	46bd      	mov	sp, r7
 8002ce8:	bd80      	pop	{r7, pc}
	...

08002cec <HAL_GPIO_Init>:
  * @param  GPIO_Init pointer to a GPIO_InitTypeDef structure that contains
  *         the configuration information for the specified GPIO peripheral.
  * @retval None
  */
void HAL_GPIO_Init(GPIO_TypeDef  *GPIOx, GPIO_InitTypeDef *GPIO_Init)
{
 8002cec:	b480      	push	{r7}
 8002cee:	b089      	sub	sp, #36	; 0x24
 8002cf0:	af00      	add	r7, sp, #0
 8002cf2:	6078      	str	r0, [r7, #4]
 8002cf4:	6039      	str	r1, [r7, #0]
  uint32_t position;
  uint32_t ioposition = 0x00U;
 8002cf6:	2300      	movs	r3, #0
 8002cf8:	617b      	str	r3, [r7, #20]
  uint32_t iocurrent = 0x00U;
 8002cfa:	2300      	movs	r3, #0
 8002cfc:	613b      	str	r3, [r7, #16]
  uint32_t temp = 0x00U;
 8002cfe:	2300      	movs	r3, #0
 8002d00:	61bb      	str	r3, [r7, #24]
  assert_param(IS_GPIO_PIN(GPIO_Init->Pin));
  assert_param(IS_GPIO_MODE(GPIO_Init->Mode));
  assert_param(IS_GPIO_PULL(GPIO_Init->Pull));

  /* Configure the port pins */
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002d02:	2300      	movs	r3, #0
 8002d04:	61fb      	str	r3, [r7, #28]
 8002d06:	e159      	b.n	8002fbc <HAL_GPIO_Init+0x2d0>
  {
    /* Get the IO position */
    ioposition = 0x01U << position;
 8002d08:	2201      	movs	r2, #1
 8002d0a:	69fb      	ldr	r3, [r7, #28]
 8002d0c:	fa02 f303 	lsl.w	r3, r2, r3
 8002d10:	617b      	str	r3, [r7, #20]
    /* Get the current IO position */
    iocurrent = (uint32_t)(GPIO_Init->Pin) & ioposition;
 8002d12:	683b      	ldr	r3, [r7, #0]
 8002d14:	681b      	ldr	r3, [r3, #0]
 8002d16:	697a      	ldr	r2, [r7, #20]
 8002d18:	4013      	ands	r3, r2
 8002d1a:	613b      	str	r3, [r7, #16]

    if(iocurrent == ioposition)
 8002d1c:	693a      	ldr	r2, [r7, #16]
 8002d1e:	697b      	ldr	r3, [r7, #20]
 8002d20:	429a      	cmp	r2, r3
 8002d22:	f040 8148 	bne.w	8002fb6 <HAL_GPIO_Init+0x2ca>
    {
      /*--------------------- GPIO Mode Configuration ------------------------*/
      /* In case of Output or Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d26:	683b      	ldr	r3, [r7, #0]
 8002d28:	685b      	ldr	r3, [r3, #4]
 8002d2a:	2b01      	cmp	r3, #1
 8002d2c:	d00b      	beq.n	8002d46 <HAL_GPIO_Init+0x5a>
 8002d2e:	683b      	ldr	r3, [r7, #0]
 8002d30:	685b      	ldr	r3, [r3, #4]
 8002d32:	2b02      	cmp	r3, #2
 8002d34:	d007      	beq.n	8002d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d36:	683b      	ldr	r3, [r7, #0]
 8002d38:	685b      	ldr	r3, [r3, #4]
      if((GPIO_Init->Mode == GPIO_MODE_OUTPUT_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_PP) ||
 8002d3a:	2b11      	cmp	r3, #17
 8002d3c:	d003      	beq.n	8002d46 <HAL_GPIO_Init+0x5a>
         (GPIO_Init->Mode == GPIO_MODE_OUTPUT_OD) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002d3e:	683b      	ldr	r3, [r7, #0]
 8002d40:	685b      	ldr	r3, [r3, #4]
 8002d42:	2b12      	cmp	r3, #18
 8002d44:	d130      	bne.n	8002da8 <HAL_GPIO_Init+0xbc>
      {
        /* Check the Speed parameter */
        assert_param(IS_GPIO_SPEED(GPIO_Init->Speed));
        /* Configure the IO Speed */
        temp = GPIOx->OSPEEDR; 
 8002d46:	687b      	ldr	r3, [r7, #4]
 8002d48:	689b      	ldr	r3, [r3, #8]
 8002d4a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OSPEEDER_OSPEEDR0 << (position * 2U));
 8002d4c:	69fb      	ldr	r3, [r7, #28]
 8002d4e:	005b      	lsls	r3, r3, #1
 8002d50:	2203      	movs	r2, #3
 8002d52:	fa02 f303 	lsl.w	r3, r2, r3
 8002d56:	43db      	mvns	r3, r3
 8002d58:	69ba      	ldr	r2, [r7, #24]
 8002d5a:	4013      	ands	r3, r2
 8002d5c:	61bb      	str	r3, [r7, #24]
        temp |= (GPIO_Init->Speed << (position * 2U));
 8002d5e:	683b      	ldr	r3, [r7, #0]
 8002d60:	68da      	ldr	r2, [r3, #12]
 8002d62:	69fb      	ldr	r3, [r7, #28]
 8002d64:	005b      	lsls	r3, r3, #1
 8002d66:	fa02 f303 	lsl.w	r3, r2, r3
 8002d6a:	69ba      	ldr	r2, [r7, #24]
 8002d6c:	4313      	orrs	r3, r2
 8002d6e:	61bb      	str	r3, [r7, #24]
        GPIOx->OSPEEDR = temp;
 8002d70:	687b      	ldr	r3, [r7, #4]
 8002d72:	69ba      	ldr	r2, [r7, #24]
 8002d74:	609a      	str	r2, [r3, #8]

        /* Configure the IO Output Type */
        temp = GPIOx->OTYPER;
 8002d76:	687b      	ldr	r3, [r7, #4]
 8002d78:	685b      	ldr	r3, [r3, #4]
 8002d7a:	61bb      	str	r3, [r7, #24]
        temp &= ~(GPIO_OTYPER_OT_0 << position) ;
 8002d7c:	2201      	movs	r2, #1
 8002d7e:	69fb      	ldr	r3, [r7, #28]
 8002d80:	fa02 f303 	lsl.w	r3, r2, r3
 8002d84:	43db      	mvns	r3, r3
 8002d86:	69ba      	ldr	r2, [r7, #24]
 8002d88:	4013      	ands	r3, r2
 8002d8a:	61bb      	str	r3, [r7, #24]
        temp |= (((GPIO_Init->Mode & GPIO_OUTPUT_TYPE) >> 4U) << position);
 8002d8c:	683b      	ldr	r3, [r7, #0]
 8002d8e:	685b      	ldr	r3, [r3, #4]
 8002d90:	091b      	lsrs	r3, r3, #4
 8002d92:	f003 0201 	and.w	r2, r3, #1
 8002d96:	69fb      	ldr	r3, [r7, #28]
 8002d98:	fa02 f303 	lsl.w	r3, r2, r3
 8002d9c:	69ba      	ldr	r2, [r7, #24]
 8002d9e:	4313      	orrs	r3, r2
 8002da0:	61bb      	str	r3, [r7, #24]
        GPIOx->OTYPER = temp;
 8002da2:	687b      	ldr	r3, [r7, #4]
 8002da4:	69ba      	ldr	r2, [r7, #24]
 8002da6:	605a      	str	r2, [r3, #4]
       }

      /* Activate the Pull-up or Pull down resistor for the current IO */
      temp = GPIOx->PUPDR;
 8002da8:	687b      	ldr	r3, [r7, #4]
 8002daa:	68db      	ldr	r3, [r3, #12]
 8002dac:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_PUPDR_PUPDR0 << (position * 2U));
 8002dae:	69fb      	ldr	r3, [r7, #28]
 8002db0:	005b      	lsls	r3, r3, #1
 8002db2:	2203      	movs	r2, #3
 8002db4:	fa02 f303 	lsl.w	r3, r2, r3
 8002db8:	43db      	mvns	r3, r3
 8002dba:	69ba      	ldr	r2, [r7, #24]
 8002dbc:	4013      	ands	r3, r2
 8002dbe:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Pull) << (position * 2U));
 8002dc0:	683b      	ldr	r3, [r7, #0]
 8002dc2:	689a      	ldr	r2, [r3, #8]
 8002dc4:	69fb      	ldr	r3, [r7, #28]
 8002dc6:	005b      	lsls	r3, r3, #1
 8002dc8:	fa02 f303 	lsl.w	r3, r2, r3
 8002dcc:	69ba      	ldr	r2, [r7, #24]
 8002dce:	4313      	orrs	r3, r2
 8002dd0:	61bb      	str	r3, [r7, #24]
      GPIOx->PUPDR = temp;
 8002dd2:	687b      	ldr	r3, [r7, #4]
 8002dd4:	69ba      	ldr	r2, [r7, #24]
 8002dd6:	60da      	str	r2, [r3, #12]

      /* In case of Alternate function mode selection */
      if((GPIO_Init->Mode == GPIO_MODE_AF_PP) || (GPIO_Init->Mode == GPIO_MODE_AF_OD))
 8002dd8:	683b      	ldr	r3, [r7, #0]
 8002dda:	685b      	ldr	r3, [r3, #4]
 8002ddc:	2b02      	cmp	r3, #2
 8002dde:	d003      	beq.n	8002de8 <HAL_GPIO_Init+0xfc>
 8002de0:	683b      	ldr	r3, [r7, #0]
 8002de2:	685b      	ldr	r3, [r3, #4]
 8002de4:	2b12      	cmp	r3, #18
 8002de6:	d123      	bne.n	8002e30 <HAL_GPIO_Init+0x144>
      {
        /* Check the Alternate function parameter */
        assert_param(IS_GPIO_AF(GPIO_Init->Alternate));
        /* Configure Alternate function mapped with the current IO */
        temp = GPIOx->AFR[position >> 3U];
 8002de8:	69fb      	ldr	r3, [r7, #28]
 8002dea:	08da      	lsrs	r2, r3, #3
 8002dec:	687b      	ldr	r3, [r7, #4]
 8002dee:	3208      	adds	r2, #8
 8002df0:	f853 3022 	ldr.w	r3, [r3, r2, lsl #2]
 8002df4:	61bb      	str	r3, [r7, #24]
        temp &= ~(0xFU << ((uint32_t)(position & 0x07U) * 4U)) ;
 8002df6:	69fb      	ldr	r3, [r7, #28]
 8002df8:	f003 0307 	and.w	r3, r3, #7
 8002dfc:	009b      	lsls	r3, r3, #2
 8002dfe:	220f      	movs	r2, #15
 8002e00:	fa02 f303 	lsl.w	r3, r2, r3
 8002e04:	43db      	mvns	r3, r3
 8002e06:	69ba      	ldr	r2, [r7, #24]
 8002e08:	4013      	ands	r3, r2
 8002e0a:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_Init->Alternate) << (((uint32_t)position & 0x07U) * 4U));
 8002e0c:	683b      	ldr	r3, [r7, #0]
 8002e0e:	691a      	ldr	r2, [r3, #16]
 8002e10:	69fb      	ldr	r3, [r7, #28]
 8002e12:	f003 0307 	and.w	r3, r3, #7
 8002e16:	009b      	lsls	r3, r3, #2
 8002e18:	fa02 f303 	lsl.w	r3, r2, r3
 8002e1c:	69ba      	ldr	r2, [r7, #24]
 8002e1e:	4313      	orrs	r3, r2
 8002e20:	61bb      	str	r3, [r7, #24]
        GPIOx->AFR[position >> 3U] = temp;
 8002e22:	69fb      	ldr	r3, [r7, #28]
 8002e24:	08da      	lsrs	r2, r3, #3
 8002e26:	687b      	ldr	r3, [r7, #4]
 8002e28:	3208      	adds	r2, #8
 8002e2a:	69b9      	ldr	r1, [r7, #24]
 8002e2c:	f843 1022 	str.w	r1, [r3, r2, lsl #2]
      }

      /* Configure IO Direction mode (Input, Output, Alternate or Analog) */
      temp = GPIOx->MODER;
 8002e30:	687b      	ldr	r3, [r7, #4]
 8002e32:	681b      	ldr	r3, [r3, #0]
 8002e34:	61bb      	str	r3, [r7, #24]
      temp &= ~(GPIO_MODER_MODER0 << (position * 2U));
 8002e36:	69fb      	ldr	r3, [r7, #28]
 8002e38:	005b      	lsls	r3, r3, #1
 8002e3a:	2203      	movs	r2, #3
 8002e3c:	fa02 f303 	lsl.w	r3, r2, r3
 8002e40:	43db      	mvns	r3, r3
 8002e42:	69ba      	ldr	r2, [r7, #24]
 8002e44:	4013      	ands	r3, r2
 8002e46:	61bb      	str	r3, [r7, #24]
      temp |= ((GPIO_Init->Mode & GPIO_MODE) << (position * 2U));
 8002e48:	683b      	ldr	r3, [r7, #0]
 8002e4a:	685b      	ldr	r3, [r3, #4]
 8002e4c:	f003 0203 	and.w	r2, r3, #3
 8002e50:	69fb      	ldr	r3, [r7, #28]
 8002e52:	005b      	lsls	r3, r3, #1
 8002e54:	fa02 f303 	lsl.w	r3, r2, r3
 8002e58:	69ba      	ldr	r2, [r7, #24]
 8002e5a:	4313      	orrs	r3, r2
 8002e5c:	61bb      	str	r3, [r7, #24]
      GPIOx->MODER = temp;
 8002e5e:	687b      	ldr	r3, [r7, #4]
 8002e60:	69ba      	ldr	r2, [r7, #24]
 8002e62:	601a      	str	r2, [r3, #0]

      /*--------------------- EXTI Mode Configuration ------------------------*/
      /* Configure the External Interrupt or event for the current IO */
      if((GPIO_Init->Mode & EXTI_MODE) == EXTI_MODE)
 8002e64:	683b      	ldr	r3, [r7, #0]
 8002e66:	685b      	ldr	r3, [r3, #4]
 8002e68:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 8002e6c:	2b00      	cmp	r3, #0
 8002e6e:	f000 80a2 	beq.w	8002fb6 <HAL_GPIO_Init+0x2ca>
      {
        /* Enable SYSCFG Clock */
        __HAL_RCC_SYSCFG_CLK_ENABLE();
 8002e72:	2300      	movs	r3, #0
 8002e74:	60fb      	str	r3, [r7, #12]
 8002e76:	4b57      	ldr	r3, [pc, #348]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e78:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e7a:	4a56      	ldr	r2, [pc, #344]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e7c:	f443 4380 	orr.w	r3, r3, #16384	; 0x4000
 8002e80:	6453      	str	r3, [r2, #68]	; 0x44
 8002e82:	4b54      	ldr	r3, [pc, #336]	; (8002fd4 <HAL_GPIO_Init+0x2e8>)
 8002e84:	6c5b      	ldr	r3, [r3, #68]	; 0x44
 8002e86:	f403 4380 	and.w	r3, r3, #16384	; 0x4000
 8002e8a:	60fb      	str	r3, [r7, #12]
 8002e8c:	68fb      	ldr	r3, [r7, #12]

        temp = SYSCFG->EXTICR[position >> 2U];
 8002e8e:	4a52      	ldr	r2, [pc, #328]	; (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002e90:	69fb      	ldr	r3, [r7, #28]
 8002e92:	089b      	lsrs	r3, r3, #2
 8002e94:	3302      	adds	r3, #2
 8002e96:	f852 3023 	ldr.w	r3, [r2, r3, lsl #2]
 8002e9a:	61bb      	str	r3, [r7, #24]
        temp &= ~(0x0FU << (4U * (position & 0x03U)));
 8002e9c:	69fb      	ldr	r3, [r7, #28]
 8002e9e:	f003 0303 	and.w	r3, r3, #3
 8002ea2:	009b      	lsls	r3, r3, #2
 8002ea4:	220f      	movs	r2, #15
 8002ea6:	fa02 f303 	lsl.w	r3, r2, r3
 8002eaa:	43db      	mvns	r3, r3
 8002eac:	69ba      	ldr	r2, [r7, #24]
 8002eae:	4013      	ands	r3, r2
 8002eb0:	61bb      	str	r3, [r7, #24]
        temp |= ((uint32_t)(GPIO_GET_INDEX(GPIOx)) << (4U * (position & 0x03U)));
 8002eb2:	687b      	ldr	r3, [r7, #4]
 8002eb4:	4a49      	ldr	r2, [pc, #292]	; (8002fdc <HAL_GPIO_Init+0x2f0>)
 8002eb6:	4293      	cmp	r3, r2
 8002eb8:	d019      	beq.n	8002eee <HAL_GPIO_Init+0x202>
 8002eba:	687b      	ldr	r3, [r7, #4]
 8002ebc:	4a48      	ldr	r2, [pc, #288]	; (8002fe0 <HAL_GPIO_Init+0x2f4>)
 8002ebe:	4293      	cmp	r3, r2
 8002ec0:	d013      	beq.n	8002eea <HAL_GPIO_Init+0x1fe>
 8002ec2:	687b      	ldr	r3, [r7, #4]
 8002ec4:	4a47      	ldr	r2, [pc, #284]	; (8002fe4 <HAL_GPIO_Init+0x2f8>)
 8002ec6:	4293      	cmp	r3, r2
 8002ec8:	d00d      	beq.n	8002ee6 <HAL_GPIO_Init+0x1fa>
 8002eca:	687b      	ldr	r3, [r7, #4]
 8002ecc:	4a46      	ldr	r2, [pc, #280]	; (8002fe8 <HAL_GPIO_Init+0x2fc>)
 8002ece:	4293      	cmp	r3, r2
 8002ed0:	d007      	beq.n	8002ee2 <HAL_GPIO_Init+0x1f6>
 8002ed2:	687b      	ldr	r3, [r7, #4]
 8002ed4:	4a45      	ldr	r2, [pc, #276]	; (8002fec <HAL_GPIO_Init+0x300>)
 8002ed6:	4293      	cmp	r3, r2
 8002ed8:	d101      	bne.n	8002ede <HAL_GPIO_Init+0x1f2>
 8002eda:	2304      	movs	r3, #4
 8002edc:	e008      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ede:	2307      	movs	r3, #7
 8002ee0:	e006      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee2:	2303      	movs	r3, #3
 8002ee4:	e004      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002ee6:	2302      	movs	r3, #2
 8002ee8:	e002      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eea:	2301      	movs	r3, #1
 8002eec:	e000      	b.n	8002ef0 <HAL_GPIO_Init+0x204>
 8002eee:	2300      	movs	r3, #0
 8002ef0:	69fa      	ldr	r2, [r7, #28]
 8002ef2:	f002 0203 	and.w	r2, r2, #3
 8002ef6:	0092      	lsls	r2, r2, #2
 8002ef8:	4093      	lsls	r3, r2
 8002efa:	69ba      	ldr	r2, [r7, #24]
 8002efc:	4313      	orrs	r3, r2
 8002efe:	61bb      	str	r3, [r7, #24]
        SYSCFG->EXTICR[position >> 2U] = temp;
 8002f00:	4935      	ldr	r1, [pc, #212]	; (8002fd8 <HAL_GPIO_Init+0x2ec>)
 8002f02:	69fb      	ldr	r3, [r7, #28]
 8002f04:	089b      	lsrs	r3, r3, #2
 8002f06:	3302      	adds	r3, #2
 8002f08:	69ba      	ldr	r2, [r7, #24]
 8002f0a:	f841 2023 	str.w	r2, [r1, r3, lsl #2]

        /* Clear EXTI line configuration */
        temp = EXTI->IMR;
 8002f0e:	4b38      	ldr	r3, [pc, #224]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f10:	681b      	ldr	r3, [r3, #0]
 8002f12:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f14:	693b      	ldr	r3, [r7, #16]
 8002f16:	43db      	mvns	r3, r3
 8002f18:	69ba      	ldr	r2, [r7, #24]
 8002f1a:	4013      	ands	r3, r2
 8002f1c:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_IT) == GPIO_MODE_IT)
 8002f1e:	683b      	ldr	r3, [r7, #0]
 8002f20:	685b      	ldr	r3, [r3, #4]
 8002f22:	f403 3380 	and.w	r3, r3, #65536	; 0x10000
 8002f26:	2b00      	cmp	r3, #0
 8002f28:	d003      	beq.n	8002f32 <HAL_GPIO_Init+0x246>
        {
          temp |= iocurrent;
 8002f2a:	69ba      	ldr	r2, [r7, #24]
 8002f2c:	693b      	ldr	r3, [r7, #16]
 8002f2e:	4313      	orrs	r3, r2
 8002f30:	61bb      	str	r3, [r7, #24]
        }
        EXTI->IMR = temp;
 8002f32:	4a2f      	ldr	r2, [pc, #188]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f34:	69bb      	ldr	r3, [r7, #24]
 8002f36:	6013      	str	r3, [r2, #0]

        temp = EXTI->EMR;
 8002f38:	4b2d      	ldr	r3, [pc, #180]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f3a:	685b      	ldr	r3, [r3, #4]
 8002f3c:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f3e:	693b      	ldr	r3, [r7, #16]
 8002f40:	43db      	mvns	r3, r3
 8002f42:	69ba      	ldr	r2, [r7, #24]
 8002f44:	4013      	ands	r3, r2
 8002f46:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & GPIO_MODE_EVT) == GPIO_MODE_EVT)
 8002f48:	683b      	ldr	r3, [r7, #0]
 8002f4a:	685b      	ldr	r3, [r3, #4]
 8002f4c:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8002f50:	2b00      	cmp	r3, #0
 8002f52:	d003      	beq.n	8002f5c <HAL_GPIO_Init+0x270>
        {
          temp |= iocurrent;
 8002f54:	69ba      	ldr	r2, [r7, #24]
 8002f56:	693b      	ldr	r3, [r7, #16]
 8002f58:	4313      	orrs	r3, r2
 8002f5a:	61bb      	str	r3, [r7, #24]
        }
        EXTI->EMR = temp;
 8002f5c:	4a24      	ldr	r2, [pc, #144]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f5e:	69bb      	ldr	r3, [r7, #24]
 8002f60:	6053      	str	r3, [r2, #4]

        /* Clear Rising Falling edge configuration */
        temp = EXTI->RTSR;
 8002f62:	4b23      	ldr	r3, [pc, #140]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f64:	689b      	ldr	r3, [r3, #8]
 8002f66:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f68:	693b      	ldr	r3, [r7, #16]
 8002f6a:	43db      	mvns	r3, r3
 8002f6c:	69ba      	ldr	r2, [r7, #24]
 8002f6e:	4013      	ands	r3, r2
 8002f70:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & RISING_EDGE) == RISING_EDGE)
 8002f72:	683b      	ldr	r3, [r7, #0]
 8002f74:	685b      	ldr	r3, [r3, #4]
 8002f76:	f403 1380 	and.w	r3, r3, #1048576	; 0x100000
 8002f7a:	2b00      	cmp	r3, #0
 8002f7c:	d003      	beq.n	8002f86 <HAL_GPIO_Init+0x29a>
        {
          temp |= iocurrent;
 8002f7e:	69ba      	ldr	r2, [r7, #24]
 8002f80:	693b      	ldr	r3, [r7, #16]
 8002f82:	4313      	orrs	r3, r2
 8002f84:	61bb      	str	r3, [r7, #24]
        }
        EXTI->RTSR = temp;
 8002f86:	4a1a      	ldr	r2, [pc, #104]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f88:	69bb      	ldr	r3, [r7, #24]
 8002f8a:	6093      	str	r3, [r2, #8]

        temp = EXTI->FTSR;
 8002f8c:	4b18      	ldr	r3, [pc, #96]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002f8e:	68db      	ldr	r3, [r3, #12]
 8002f90:	61bb      	str	r3, [r7, #24]
        temp &= ~((uint32_t)iocurrent);
 8002f92:	693b      	ldr	r3, [r7, #16]
 8002f94:	43db      	mvns	r3, r3
 8002f96:	69ba      	ldr	r2, [r7, #24]
 8002f98:	4013      	ands	r3, r2
 8002f9a:	61bb      	str	r3, [r7, #24]
        if((GPIO_Init->Mode & FALLING_EDGE) == FALLING_EDGE)
 8002f9c:	683b      	ldr	r3, [r7, #0]
 8002f9e:	685b      	ldr	r3, [r3, #4]
 8002fa0:	f403 1300 	and.w	r3, r3, #2097152	; 0x200000
 8002fa4:	2b00      	cmp	r3, #0
 8002fa6:	d003      	beq.n	8002fb0 <HAL_GPIO_Init+0x2c4>
        {
          temp |= iocurrent;
 8002fa8:	69ba      	ldr	r2, [r7, #24]
 8002faa:	693b      	ldr	r3, [r7, #16]
 8002fac:	4313      	orrs	r3, r2
 8002fae:	61bb      	str	r3, [r7, #24]
        }
        EXTI->FTSR = temp;
 8002fb0:	4a0f      	ldr	r2, [pc, #60]	; (8002ff0 <HAL_GPIO_Init+0x304>)
 8002fb2:	69bb      	ldr	r3, [r7, #24]
 8002fb4:	60d3      	str	r3, [r2, #12]
  for(position = 0U; position < GPIO_NUMBER; position++)
 8002fb6:	69fb      	ldr	r3, [r7, #28]
 8002fb8:	3301      	adds	r3, #1
 8002fba:	61fb      	str	r3, [r7, #28]
 8002fbc:	69fb      	ldr	r3, [r7, #28]
 8002fbe:	2b0f      	cmp	r3, #15
 8002fc0:	f67f aea2 	bls.w	8002d08 <HAL_GPIO_Init+0x1c>
      }
    }
  }
}
 8002fc4:	bf00      	nop
 8002fc6:	bf00      	nop
 8002fc8:	3724      	adds	r7, #36	; 0x24
 8002fca:	46bd      	mov	sp, r7
 8002fcc:	f85d 7b04 	ldr.w	r7, [sp], #4
 8002fd0:	4770      	bx	lr
 8002fd2:	bf00      	nop
 8002fd4:	40023800 	.word	0x40023800
 8002fd8:	40013800 	.word	0x40013800
 8002fdc:	40020000 	.word	0x40020000
 8002fe0:	40020400 	.word	0x40020400
 8002fe4:	40020800 	.word	0x40020800
 8002fe8:	40020c00 	.word	0x40020c00
 8002fec:	40021000 	.word	0x40021000
 8002ff0:	40013c00 	.word	0x40013c00

08002ff4 <HAL_GPIO_WritePin>:
  *            @arg GPIO_PIN_RESET: to clear the port pin
  *            @arg GPIO_PIN_SET: to set the port pin
  * @retval None
  */
void HAL_GPIO_WritePin(GPIO_TypeDef* GPIOx, uint16_t GPIO_Pin, GPIO_PinState PinState)
{
 8002ff4:	b480      	push	{r7}
 8002ff6:	b083      	sub	sp, #12
 8002ff8:	af00      	add	r7, sp, #0
 8002ffa:	6078      	str	r0, [r7, #4]
 8002ffc:	460b      	mov	r3, r1
 8002ffe:	807b      	strh	r3, [r7, #2]
 8003000:	4613      	mov	r3, r2
 8003002:	707b      	strb	r3, [r7, #1]
  /* Check the parameters */
  assert_param(IS_GPIO_PIN(GPIO_Pin));
  assert_param(IS_GPIO_PIN_ACTION(PinState));

  if(PinState != GPIO_PIN_RESET)
 8003004:	787b      	ldrb	r3, [r7, #1]
 8003006:	2b00      	cmp	r3, #0
 8003008:	d003      	beq.n	8003012 <HAL_GPIO_WritePin+0x1e>
  {
    GPIOx->BSRR = GPIO_Pin;
 800300a:	887a      	ldrh	r2, [r7, #2]
 800300c:	687b      	ldr	r3, [r7, #4]
 800300e:	619a      	str	r2, [r3, #24]
  }
  else
  {
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
  }
}
 8003010:	e003      	b.n	800301a <HAL_GPIO_WritePin+0x26>
    GPIOx->BSRR = (uint32_t)GPIO_Pin << 16U;
 8003012:	887b      	ldrh	r3, [r7, #2]
 8003014:	041a      	lsls	r2, r3, #16
 8003016:	687b      	ldr	r3, [r7, #4]
 8003018:	619a      	str	r2, [r3, #24]
}
 800301a:	bf00      	nop
 800301c:	370c      	adds	r7, #12
 800301e:	46bd      	mov	sp, r7
 8003020:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003024:	4770      	bx	lr
	...

08003028 <HAL_GPIO_EXTI_IRQHandler>:
  * @brief  This function handles EXTI interrupt request.
  * @param  GPIO_Pin Specifies the pins connected EXTI line
  * @retval None
  */
void HAL_GPIO_EXTI_IRQHandler(uint16_t GPIO_Pin)
{
 8003028:	b580      	push	{r7, lr}
 800302a:	b082      	sub	sp, #8
 800302c:	af00      	add	r7, sp, #0
 800302e:	4603      	mov	r3, r0
 8003030:	80fb      	strh	r3, [r7, #6]
  /* EXTI line interrupt detected */
  if(__HAL_GPIO_EXTI_GET_IT(GPIO_Pin) != RESET)
 8003032:	4b08      	ldr	r3, [pc, #32]	; (8003054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003034:	695a      	ldr	r2, [r3, #20]
 8003036:	88fb      	ldrh	r3, [r7, #6]
 8003038:	4013      	ands	r3, r2
 800303a:	2b00      	cmp	r3, #0
 800303c:	d006      	beq.n	800304c <HAL_GPIO_EXTI_IRQHandler+0x24>
  {
    __HAL_GPIO_EXTI_CLEAR_IT(GPIO_Pin);
 800303e:	4a05      	ldr	r2, [pc, #20]	; (8003054 <HAL_GPIO_EXTI_IRQHandler+0x2c>)
 8003040:	88fb      	ldrh	r3, [r7, #6]
 8003042:	6153      	str	r3, [r2, #20]
    HAL_GPIO_EXTI_Callback(GPIO_Pin);
 8003044:	88fb      	ldrh	r3, [r7, #6]
 8003046:	4618      	mov	r0, r3
 8003048:	f7fe fae6 	bl	8001618 <HAL_GPIO_EXTI_Callback>
  }
}
 800304c:	bf00      	nop
 800304e:	3708      	adds	r7, #8
 8003050:	46bd      	mov	sp, r7
 8003052:	bd80      	pop	{r7, pc}
 8003054:	40013c00 	.word	0x40013c00

08003058 <HAL_RCC_OscConfig>:
  *         supported by this API. User should request a transition to HSE Off
  *         first and then HSE On or HSE Bypass.
  * @retval HAL status
  */
__weak HAL_StatusTypeDef HAL_RCC_OscConfig(RCC_OscInitTypeDef  *RCC_OscInitStruct)
{
 8003058:	b580      	push	{r7, lr}
 800305a:	b086      	sub	sp, #24
 800305c:	af00      	add	r7, sp, #0
 800305e:	6078      	str	r0, [r7, #4]
  uint32_t tickstart, pll_config;

  /* Check Null pointer */
  if(RCC_OscInitStruct == NULL)
 8003060:	687b      	ldr	r3, [r7, #4]
 8003062:	2b00      	cmp	r3, #0
 8003064:	d101      	bne.n	800306a <HAL_RCC_OscConfig+0x12>
  {
    return HAL_ERROR;
 8003066:	2301      	movs	r3, #1
 8003068:	e25b      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
  }

  /* Check the parameters */
  assert_param(IS_RCC_OSCILLATORTYPE(RCC_OscInitStruct->OscillatorType));
  /*------------------------------- HSE Configuration ------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSE) == RCC_OSCILLATORTYPE_HSE)
 800306a:	687b      	ldr	r3, [r7, #4]
 800306c:	681b      	ldr	r3, [r3, #0]
 800306e:	f003 0301 	and.w	r3, r3, #1
 8003072:	2b00      	cmp	r3, #0
 8003074:	d075      	beq.n	8003162 <HAL_RCC_OscConfig+0x10a>
  {
    /* Check the parameters */
    assert_param(IS_RCC_HSE(RCC_OscInitStruct->HSEState));
    /* When the HSE is used as system clock or clock source for PLL in these cases HSE will not disabled */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 8003076:	4ba3      	ldr	r3, [pc, #652]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003078:	689b      	ldr	r3, [r3, #8]
 800307a:	f003 030c 	and.w	r3, r3, #12
 800307e:	2b04      	cmp	r3, #4
 8003080:	d00c      	beq.n	800309c <HAL_RCC_OscConfig+0x44>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 8003082:	4ba0      	ldr	r3, [pc, #640]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003084:	689b      	ldr	r3, [r3, #8]
 8003086:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSE) ||\
 800308a:	2b08      	cmp	r3, #8
 800308c:	d112      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSE)))
 800308e:	4b9d      	ldr	r3, [pc, #628]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003090:	685b      	ldr	r3, [r3, #4]
 8003092:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003096:	f5b3 0f80 	cmp.w	r3, #4194304	; 0x400000
 800309a:	d10b      	bne.n	80030b4 <HAL_RCC_OscConfig+0x5c>
    {
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 800309c:	4b99      	ldr	r3, [pc, #612]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800309e:	681b      	ldr	r3, [r3, #0]
 80030a0:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80030a4:	2b00      	cmp	r3, #0
 80030a6:	d05b      	beq.n	8003160 <HAL_RCC_OscConfig+0x108>
 80030a8:	687b      	ldr	r3, [r7, #4]
 80030aa:	685b      	ldr	r3, [r3, #4]
 80030ac:	2b00      	cmp	r3, #0
 80030ae:	d157      	bne.n	8003160 <HAL_RCC_OscConfig+0x108>
      {
        return HAL_ERROR;
 80030b0:	2301      	movs	r3, #1
 80030b2:	e236      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      }
    }
    else
    {
      /* Set the new HSE configuration ---------------------------------------*/
      __HAL_RCC_HSE_CONFIG(RCC_OscInitStruct->HSEState);
 80030b4:	687b      	ldr	r3, [r7, #4]
 80030b6:	685b      	ldr	r3, [r3, #4]
 80030b8:	f5b3 3f80 	cmp.w	r3, #65536	; 0x10000
 80030bc:	d106      	bne.n	80030cc <HAL_RCC_OscConfig+0x74>
 80030be:	4b91      	ldr	r3, [pc, #580]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030c0:	681b      	ldr	r3, [r3, #0]
 80030c2:	4a90      	ldr	r2, [pc, #576]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030c4:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030c8:	6013      	str	r3, [r2, #0]
 80030ca:	e01d      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030cc:	687b      	ldr	r3, [r7, #4]
 80030ce:	685b      	ldr	r3, [r3, #4]
 80030d0:	f5b3 2fa0 	cmp.w	r3, #327680	; 0x50000
 80030d4:	d10c      	bne.n	80030f0 <HAL_RCC_OscConfig+0x98>
 80030d6:	4b8b      	ldr	r3, [pc, #556]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030d8:	681b      	ldr	r3, [r3, #0]
 80030da:	4a8a      	ldr	r2, [pc, #552]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030dc:	f443 2380 	orr.w	r3, r3, #262144	; 0x40000
 80030e0:	6013      	str	r3, [r2, #0]
 80030e2:	4b88      	ldr	r3, [pc, #544]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030e4:	681b      	ldr	r3, [r3, #0]
 80030e6:	4a87      	ldr	r2, [pc, #540]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030e8:	f443 3380 	orr.w	r3, r3, #65536	; 0x10000
 80030ec:	6013      	str	r3, [r2, #0]
 80030ee:	e00b      	b.n	8003108 <HAL_RCC_OscConfig+0xb0>
 80030f0:	4b84      	ldr	r3, [pc, #528]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030f2:	681b      	ldr	r3, [r3, #0]
 80030f4:	4a83      	ldr	r2, [pc, #524]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030f6:	f423 3380 	bic.w	r3, r3, #65536	; 0x10000
 80030fa:	6013      	str	r3, [r2, #0]
 80030fc:	4b81      	ldr	r3, [pc, #516]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80030fe:	681b      	ldr	r3, [r3, #0]
 8003100:	4a80      	ldr	r2, [pc, #512]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003102:	f423 2380 	bic.w	r3, r3, #262144	; 0x40000
 8003106:	6013      	str	r3, [r2, #0]

      /* Check the HSE State */
      if((RCC_OscInitStruct->HSEState) != RCC_HSE_OFF)
 8003108:	687b      	ldr	r3, [r7, #4]
 800310a:	685b      	ldr	r3, [r3, #4]
 800310c:	2b00      	cmp	r3, #0
 800310e:	d013      	beq.n	8003138 <HAL_RCC_OscConfig+0xe0>
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003110:	f7ff fc9c 	bl	8002a4c <HAL_GetTick>
 8003114:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 8003116:	e008      	b.n	800312a <HAL_RCC_OscConfig+0xd2>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003118:	f7ff fc98 	bl	8002a4c <HAL_GetTick>
 800311c:	4602      	mov	r2, r0
 800311e:	693b      	ldr	r3, [r7, #16]
 8003120:	1ad3      	subs	r3, r2, r3
 8003122:	2b64      	cmp	r3, #100	; 0x64
 8003124:	d901      	bls.n	800312a <HAL_RCC_OscConfig+0xd2>
          {
            return HAL_TIMEOUT;
 8003126:	2303      	movs	r3, #3
 8003128:	e1fb      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 800312a:	4b76      	ldr	r3, [pc, #472]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800312c:	681b      	ldr	r3, [r3, #0]
 800312e:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 8003132:	2b00      	cmp	r3, #0
 8003134:	d0f0      	beq.n	8003118 <HAL_RCC_OscConfig+0xc0>
 8003136:	e014      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
        }
      }
      else
      {
        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003138:	f7ff fc88 	bl	8002a4c <HAL_GetTick>
 800313c:	6138      	str	r0, [r7, #16]

        /* Wait till HSE is bypassed or disabled */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 800313e:	e008      	b.n	8003152 <HAL_RCC_OscConfig+0xfa>
        {
          if((HAL_GetTick() - tickstart ) > HSE_TIMEOUT_VALUE)
 8003140:	f7ff fc84 	bl	8002a4c <HAL_GetTick>
 8003144:	4602      	mov	r2, r0
 8003146:	693b      	ldr	r3, [r7, #16]
 8003148:	1ad3      	subs	r3, r2, r3
 800314a:	2b64      	cmp	r3, #100	; 0x64
 800314c:	d901      	bls.n	8003152 <HAL_RCC_OscConfig+0xfa>
          {
            return HAL_TIMEOUT;
 800314e:	2303      	movs	r3, #3
 8003150:	e1e7      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET)
 8003152:	4b6c      	ldr	r3, [pc, #432]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003154:	681b      	ldr	r3, [r3, #0]
 8003156:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 800315a:	2b00      	cmp	r3, #0
 800315c:	d1f0      	bne.n	8003140 <HAL_RCC_OscConfig+0xe8>
 800315e:	e000      	b.n	8003162 <HAL_RCC_OscConfig+0x10a>
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) != RESET) && (RCC_OscInitStruct->HSEState == RCC_HSE_OFF))
 8003160:	bf00      	nop
        }
      }
    }
  }
  /*----------------------------- HSI Configuration --------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_HSI) == RCC_OSCILLATORTYPE_HSI)
 8003162:	687b      	ldr	r3, [r7, #4]
 8003164:	681b      	ldr	r3, [r3, #0]
 8003166:	f003 0302 	and.w	r3, r3, #2
 800316a:	2b00      	cmp	r3, #0
 800316c:	d063      	beq.n	8003236 <HAL_RCC_OscConfig+0x1de>
    /* Check the parameters */
    assert_param(IS_RCC_HSI(RCC_OscInitStruct->HSIState));
    assert_param(IS_RCC_CALIBRATION_VALUE(RCC_OscInitStruct->HSICalibrationValue));

    /* Check if HSI is used as system clock or as PLL source when PLL is selected as system clock */
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 800316e:	4b65      	ldr	r3, [pc, #404]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003170:	689b      	ldr	r3, [r3, #8]
 8003172:	f003 030c 	and.w	r3, r3, #12
 8003176:	2b00      	cmp	r3, #0
 8003178:	d00b      	beq.n	8003192 <HAL_RCC_OscConfig+0x13a>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 800317a:	4b62      	ldr	r3, [pc, #392]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800317c:	689b      	ldr	r3, [r3, #8]
 800317e:	f003 030c 	and.w	r3, r3, #12
    if((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_HSI) ||\
 8003182:	2b08      	cmp	r3, #8
 8003184:	d11c      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
      ((__HAL_RCC_GET_SYSCLK_SOURCE() == RCC_CFGR_SWS_PLL) && ((RCC->PLLCFGR & RCC_PLLCFGR_PLLSRC) == RCC_PLLCFGR_PLLSRC_HSI)))
 8003186:	4b5f      	ldr	r3, [pc, #380]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003188:	685b      	ldr	r3, [r3, #4]
 800318a:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 800318e:	2b00      	cmp	r3, #0
 8003190:	d116      	bne.n	80031c0 <HAL_RCC_OscConfig+0x168>
    {
      /* When HSI is used as system clock it will not disabled */
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 8003192:	4b5c      	ldr	r3, [pc, #368]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003194:	681b      	ldr	r3, [r3, #0]
 8003196:	f003 0302 	and.w	r3, r3, #2
 800319a:	2b00      	cmp	r3, #0
 800319c:	d005      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
 800319e:	687b      	ldr	r3, [r7, #4]
 80031a0:	68db      	ldr	r3, [r3, #12]
 80031a2:	2b01      	cmp	r3, #1
 80031a4:	d001      	beq.n	80031aa <HAL_RCC_OscConfig+0x152>
      {
        return HAL_ERROR;
 80031a6:	2301      	movs	r3, #1
 80031a8:	e1bb      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      }
      /* Otherwise, just the calibration is allowed */
      else
      {
        /* Adjusts the Internal High Speed oscillator (HSI) calibration value.*/
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031aa:	4b56      	ldr	r3, [pc, #344]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031ac:	681b      	ldr	r3, [r3, #0]
 80031ae:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031b2:	687b      	ldr	r3, [r7, #4]
 80031b4:	691b      	ldr	r3, [r3, #16]
 80031b6:	00db      	lsls	r3, r3, #3
 80031b8:	4952      	ldr	r1, [pc, #328]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031ba:	4313      	orrs	r3, r2
 80031bc:	600b      	str	r3, [r1, #0]
      if((__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET) && (RCC_OscInitStruct->HSIState != RCC_HSI_ON))
 80031be:	e03a      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
    }
    else
    {
      /* Check the HSI State */
      if((RCC_OscInitStruct->HSIState)!= RCC_HSI_OFF)
 80031c0:	687b      	ldr	r3, [r7, #4]
 80031c2:	68db      	ldr	r3, [r3, #12]
 80031c4:	2b00      	cmp	r3, #0
 80031c6:	d020      	beq.n	800320a <HAL_RCC_OscConfig+0x1b2>
      {
        /* Enable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_ENABLE();
 80031c8:	4b4f      	ldr	r3, [pc, #316]	; (8003308 <HAL_RCC_OscConfig+0x2b0>)
 80031ca:	2201      	movs	r2, #1
 80031cc:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 80031ce:	f7ff fc3d 	bl	8002a4c <HAL_GetTick>
 80031d2:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031d4:	e008      	b.n	80031e8 <HAL_RCC_OscConfig+0x190>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 80031d6:	f7ff fc39 	bl	8002a4c <HAL_GetTick>
 80031da:	4602      	mov	r2, r0
 80031dc:	693b      	ldr	r3, [r7, #16]
 80031de:	1ad3      	subs	r3, r2, r3
 80031e0:	2b02      	cmp	r3, #2
 80031e2:	d901      	bls.n	80031e8 <HAL_RCC_OscConfig+0x190>
          {
            return HAL_TIMEOUT;
 80031e4:	2303      	movs	r3, #3
 80031e6:	e19c      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 80031e8:	4b46      	ldr	r3, [pc, #280]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031ea:	681b      	ldr	r3, [r3, #0]
 80031ec:	f003 0302 	and.w	r3, r3, #2
 80031f0:	2b00      	cmp	r3, #0
 80031f2:	d0f0      	beq.n	80031d6 <HAL_RCC_OscConfig+0x17e>
          }
        }

        /* Adjusts the Internal High Speed oscillator (HSI) calibration value. */
        __HAL_RCC_HSI_CALIBRATIONVALUE_ADJUST(RCC_OscInitStruct->HSICalibrationValue);
 80031f4:	4b43      	ldr	r3, [pc, #268]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80031f6:	681b      	ldr	r3, [r3, #0]
 80031f8:	f023 02f8 	bic.w	r2, r3, #248	; 0xf8
 80031fc:	687b      	ldr	r3, [r7, #4]
 80031fe:	691b      	ldr	r3, [r3, #16]
 8003200:	00db      	lsls	r3, r3, #3
 8003202:	4940      	ldr	r1, [pc, #256]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 8003204:	4313      	orrs	r3, r2
 8003206:	600b      	str	r3, [r1, #0]
 8003208:	e015      	b.n	8003236 <HAL_RCC_OscConfig+0x1de>
      }
      else
      {
        /* Disable the Internal High Speed oscillator (HSI). */
        __HAL_RCC_HSI_DISABLE();
 800320a:	4b3f      	ldr	r3, [pc, #252]	; (8003308 <HAL_RCC_OscConfig+0x2b0>)
 800320c:	2200      	movs	r2, #0
 800320e:	601a      	str	r2, [r3, #0]

        /* Get Start Tick*/
        tickstart = HAL_GetTick();
 8003210:	f7ff fc1c 	bl	8002a4c <HAL_GetTick>
 8003214:	6138      	str	r0, [r7, #16]

        /* Wait till HSI is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 8003216:	e008      	b.n	800322a <HAL_RCC_OscConfig+0x1d2>
        {
          if((HAL_GetTick() - tickstart ) > HSI_TIMEOUT_VALUE)
 8003218:	f7ff fc18 	bl	8002a4c <HAL_GetTick>
 800321c:	4602      	mov	r2, r0
 800321e:	693b      	ldr	r3, [r7, #16]
 8003220:	1ad3      	subs	r3, r2, r3
 8003222:	2b02      	cmp	r3, #2
 8003224:	d901      	bls.n	800322a <HAL_RCC_OscConfig+0x1d2>
          {
            return HAL_TIMEOUT;
 8003226:	2303      	movs	r3, #3
 8003228:	e17b      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) != RESET)
 800322a:	4b36      	ldr	r3, [pc, #216]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800322c:	681b      	ldr	r3, [r3, #0]
 800322e:	f003 0302 	and.w	r3, r3, #2
 8003232:	2b00      	cmp	r3, #0
 8003234:	d1f0      	bne.n	8003218 <HAL_RCC_OscConfig+0x1c0>
        }
      }
    }
  }
  /*------------------------------ LSI Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSI) == RCC_OSCILLATORTYPE_LSI)
 8003236:	687b      	ldr	r3, [r7, #4]
 8003238:	681b      	ldr	r3, [r3, #0]
 800323a:	f003 0308 	and.w	r3, r3, #8
 800323e:	2b00      	cmp	r3, #0
 8003240:	d030      	beq.n	80032a4 <HAL_RCC_OscConfig+0x24c>
  {
    /* Check the parameters */
    assert_param(IS_RCC_LSI(RCC_OscInitStruct->LSIState));

    /* Check the LSI State */
    if((RCC_OscInitStruct->LSIState)!= RCC_LSI_OFF)
 8003242:	687b      	ldr	r3, [r7, #4]
 8003244:	695b      	ldr	r3, [r3, #20]
 8003246:	2b00      	cmp	r3, #0
 8003248:	d016      	beq.n	8003278 <HAL_RCC_OscConfig+0x220>
    {
      /* Enable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_ENABLE();
 800324a:	4b30      	ldr	r3, [pc, #192]	; (800330c <HAL_RCC_OscConfig+0x2b4>)
 800324c:	2201      	movs	r2, #1
 800324e:	601a      	str	r2, [r3, #0]

      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 8003250:	f7ff fbfc 	bl	8002a4c <HAL_GetTick>
 8003254:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 8003256:	e008      	b.n	800326a <HAL_RCC_OscConfig+0x212>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003258:	f7ff fbf8 	bl	8002a4c <HAL_GetTick>
 800325c:	4602      	mov	r2, r0
 800325e:	693b      	ldr	r3, [r7, #16]
 8003260:	1ad3      	subs	r3, r2, r3
 8003262:	2b02      	cmp	r3, #2
 8003264:	d901      	bls.n	800326a <HAL_RCC_OscConfig+0x212>
        {
          return HAL_TIMEOUT;
 8003266:	2303      	movs	r3, #3
 8003268:	e15b      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) == RESET)
 800326a:	4b26      	ldr	r3, [pc, #152]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800326c:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800326e:	f003 0302 	and.w	r3, r3, #2
 8003272:	2b00      	cmp	r3, #0
 8003274:	d0f0      	beq.n	8003258 <HAL_RCC_OscConfig+0x200>
 8003276:	e015      	b.n	80032a4 <HAL_RCC_OscConfig+0x24c>
      }
    }
    else
    {
      /* Disable the Internal Low Speed oscillator (LSI). */
      __HAL_RCC_LSI_DISABLE();
 8003278:	4b24      	ldr	r3, [pc, #144]	; (800330c <HAL_RCC_OscConfig+0x2b4>)
 800327a:	2200      	movs	r2, #0
 800327c:	601a      	str	r2, [r3, #0]

      /* Get Start Tick */
      tickstart = HAL_GetTick();
 800327e:	f7ff fbe5 	bl	8002a4c <HAL_GetTick>
 8003282:	6138      	str	r0, [r7, #16]

      /* Wait till LSI is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003284:	e008      	b.n	8003298 <HAL_RCC_OscConfig+0x240>
      {
        if((HAL_GetTick() - tickstart ) > LSI_TIMEOUT_VALUE)
 8003286:	f7ff fbe1 	bl	8002a4c <HAL_GetTick>
 800328a:	4602      	mov	r2, r0
 800328c:	693b      	ldr	r3, [r7, #16]
 800328e:	1ad3      	subs	r3, r2, r3
 8003290:	2b02      	cmp	r3, #2
 8003292:	d901      	bls.n	8003298 <HAL_RCC_OscConfig+0x240>
        {
          return HAL_TIMEOUT;
 8003294:	2303      	movs	r3, #3
 8003296:	e144      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSIRDY) != RESET)
 8003298:	4b1a      	ldr	r3, [pc, #104]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 800329a:	6f5b      	ldr	r3, [r3, #116]	; 0x74
 800329c:	f003 0302 	and.w	r3, r3, #2
 80032a0:	2b00      	cmp	r3, #0
 80032a2:	d1f0      	bne.n	8003286 <HAL_RCC_OscConfig+0x22e>
        }
      }
    }
  }
  /*------------------------------ LSE Configuration -------------------------*/
  if(((RCC_OscInitStruct->OscillatorType) & RCC_OSCILLATORTYPE_LSE) == RCC_OSCILLATORTYPE_LSE)
 80032a4:	687b      	ldr	r3, [r7, #4]
 80032a6:	681b      	ldr	r3, [r3, #0]
 80032a8:	f003 0304 	and.w	r3, r3, #4
 80032ac:	2b00      	cmp	r3, #0
 80032ae:	f000 80a0 	beq.w	80033f2 <HAL_RCC_OscConfig+0x39a>
  {
    FlagStatus       pwrclkchanged = RESET;
 80032b2:	2300      	movs	r3, #0
 80032b4:	75fb      	strb	r3, [r7, #23]
    /* Check the parameters */
    assert_param(IS_RCC_LSE(RCC_OscInitStruct->LSEState));

    /* Update LSE configuration in Backup Domain control register    */
    /* Requires to enable write access to Backup Domain of necessary */
    if(__HAL_RCC_PWR_IS_CLK_DISABLED())
 80032b6:	4b13      	ldr	r3, [pc, #76]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032b8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ba:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032be:	2b00      	cmp	r3, #0
 80032c0:	d10f      	bne.n	80032e2 <HAL_RCC_OscConfig+0x28a>
    {
      __HAL_RCC_PWR_CLK_ENABLE();
 80032c2:	2300      	movs	r3, #0
 80032c4:	60bb      	str	r3, [r7, #8]
 80032c6:	4b0f      	ldr	r3, [pc, #60]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032c8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032ca:	4a0e      	ldr	r2, [pc, #56]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032cc:	f043 5380 	orr.w	r3, r3, #268435456	; 0x10000000
 80032d0:	6413      	str	r3, [r2, #64]	; 0x40
 80032d2:	4b0c      	ldr	r3, [pc, #48]	; (8003304 <HAL_RCC_OscConfig+0x2ac>)
 80032d4:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80032d6:	f003 5380 	and.w	r3, r3, #268435456	; 0x10000000
 80032da:	60bb      	str	r3, [r7, #8]
 80032dc:	68bb      	ldr	r3, [r7, #8]
      pwrclkchanged = SET;
 80032de:	2301      	movs	r3, #1
 80032e0:	75fb      	strb	r3, [r7, #23]
    }

    if(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 80032e2:	4b0b      	ldr	r3, [pc, #44]	; (8003310 <HAL_RCC_OscConfig+0x2b8>)
 80032e4:	681b      	ldr	r3, [r3, #0]
 80032e6:	f403 7380 	and.w	r3, r3, #256	; 0x100
 80032ea:	2b00      	cmp	r3, #0
 80032ec:	d121      	bne.n	8003332 <HAL_RCC_OscConfig+0x2da>
    {
      /* Enable write access to Backup domain */
      SET_BIT(PWR->CR, PWR_CR_DBP);
 80032ee:	4b08      	ldr	r3, [pc, #32]	; (8003310 <HAL_RCC_OscConfig+0x2b8>)
 80032f0:	681b      	ldr	r3, [r3, #0]
 80032f2:	4a07      	ldr	r2, [pc, #28]	; (8003310 <HAL_RCC_OscConfig+0x2b8>)
 80032f4:	f443 7380 	orr.w	r3, r3, #256	; 0x100
 80032f8:	6013      	str	r3, [r2, #0]

      /* Wait for Backup domain Write protection disable */
      tickstart = HAL_GetTick();
 80032fa:	f7ff fba7 	bl	8002a4c <HAL_GetTick>
 80032fe:	6138      	str	r0, [r7, #16]

      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003300:	e011      	b.n	8003326 <HAL_RCC_OscConfig+0x2ce>
 8003302:	bf00      	nop
 8003304:	40023800 	.word	0x40023800
 8003308:	42470000 	.word	0x42470000
 800330c:	42470e80 	.word	0x42470e80
 8003310:	40007000 	.word	0x40007000
      {
        if((HAL_GetTick() - tickstart) > RCC_DBP_TIMEOUT_VALUE)
 8003314:	f7ff fb9a 	bl	8002a4c <HAL_GetTick>
 8003318:	4602      	mov	r2, r0
 800331a:	693b      	ldr	r3, [r7, #16]
 800331c:	1ad3      	subs	r3, r2, r3
 800331e:	2b02      	cmp	r3, #2
 8003320:	d901      	bls.n	8003326 <HAL_RCC_OscConfig+0x2ce>
        {
          return HAL_TIMEOUT;
 8003322:	2303      	movs	r3, #3
 8003324:	e0fd      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(HAL_IS_BIT_CLR(PWR->CR, PWR_CR_DBP))
 8003326:	4b81      	ldr	r3, [pc, #516]	; (800352c <HAL_RCC_OscConfig+0x4d4>)
 8003328:	681b      	ldr	r3, [r3, #0]
 800332a:	f403 7380 	and.w	r3, r3, #256	; 0x100
 800332e:	2b00      	cmp	r3, #0
 8003330:	d0f0      	beq.n	8003314 <HAL_RCC_OscConfig+0x2bc>
        }
      }
    }

    /* Set the new LSE configuration -----------------------------------------*/
    __HAL_RCC_LSE_CONFIG(RCC_OscInitStruct->LSEState);
 8003332:	687b      	ldr	r3, [r7, #4]
 8003334:	689b      	ldr	r3, [r3, #8]
 8003336:	2b01      	cmp	r3, #1
 8003338:	d106      	bne.n	8003348 <HAL_RCC_OscConfig+0x2f0>
 800333a:	4b7d      	ldr	r3, [pc, #500]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800333c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800333e:	4a7c      	ldr	r2, [pc, #496]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003340:	f043 0301 	orr.w	r3, r3, #1
 8003344:	6713      	str	r3, [r2, #112]	; 0x70
 8003346:	e01c      	b.n	8003382 <HAL_RCC_OscConfig+0x32a>
 8003348:	687b      	ldr	r3, [r7, #4]
 800334a:	689b      	ldr	r3, [r3, #8]
 800334c:	2b05      	cmp	r3, #5
 800334e:	d10c      	bne.n	800336a <HAL_RCC_OscConfig+0x312>
 8003350:	4b77      	ldr	r3, [pc, #476]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003352:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003354:	4a76      	ldr	r2, [pc, #472]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003356:	f043 0304 	orr.w	r3, r3, #4
 800335a:	6713      	str	r3, [r2, #112]	; 0x70
 800335c:	4b74      	ldr	r3, [pc, #464]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800335e:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 8003360:	4a73      	ldr	r2, [pc, #460]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003362:	f043 0301 	orr.w	r3, r3, #1
 8003366:	6713      	str	r3, [r2, #112]	; 0x70
 8003368:	e00b      	b.n	8003382 <HAL_RCC_OscConfig+0x32a>
 800336a:	4b71      	ldr	r3, [pc, #452]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800336c:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800336e:	4a70      	ldr	r2, [pc, #448]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003370:	f023 0301 	bic.w	r3, r3, #1
 8003374:	6713      	str	r3, [r2, #112]	; 0x70
 8003376:	4b6e      	ldr	r3, [pc, #440]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003378:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 800337a:	4a6d      	ldr	r2, [pc, #436]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 800337c:	f023 0304 	bic.w	r3, r3, #4
 8003380:	6713      	str	r3, [r2, #112]	; 0x70
    /* Check the LSE State */
    if((RCC_OscInitStruct->LSEState) != RCC_LSE_OFF)
 8003382:	687b      	ldr	r3, [r7, #4]
 8003384:	689b      	ldr	r3, [r3, #8]
 8003386:	2b00      	cmp	r3, #0
 8003388:	d015      	beq.n	80033b6 <HAL_RCC_OscConfig+0x35e>
    {
      /* Get Start Tick*/
      tickstart = HAL_GetTick();
 800338a:	f7ff fb5f 	bl	8002a4c <HAL_GetTick>
 800338e:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 8003390:	e00a      	b.n	80033a8 <HAL_RCC_OscConfig+0x350>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 8003392:	f7ff fb5b 	bl	8002a4c <HAL_GetTick>
 8003396:	4602      	mov	r2, r0
 8003398:	693b      	ldr	r3, [r7, #16]
 800339a:	1ad3      	subs	r3, r2, r3
 800339c:	f241 3288 	movw	r2, #5000	; 0x1388
 80033a0:	4293      	cmp	r3, r2
 80033a2:	d901      	bls.n	80033a8 <HAL_RCC_OscConfig+0x350>
        {
          return HAL_TIMEOUT;
 80033a4:	2303      	movs	r3, #3
 80033a6:	e0bc      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) == RESET)
 80033a8:	4b61      	ldr	r3, [pc, #388]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033aa:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033ac:	f003 0302 	and.w	r3, r3, #2
 80033b0:	2b00      	cmp	r3, #0
 80033b2:	d0ee      	beq.n	8003392 <HAL_RCC_OscConfig+0x33a>
 80033b4:	e014      	b.n	80033e0 <HAL_RCC_OscConfig+0x388>
      }
    }
    else
    {
      /* Get Start Tick */
      tickstart = HAL_GetTick();
 80033b6:	f7ff fb49 	bl	8002a4c <HAL_GetTick>
 80033ba:	6138      	str	r0, [r7, #16]

      /* Wait till LSE is ready */
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033bc:	e00a      	b.n	80033d4 <HAL_RCC_OscConfig+0x37c>
      {
        if((HAL_GetTick() - tickstart ) > RCC_LSE_TIMEOUT_VALUE)
 80033be:	f7ff fb45 	bl	8002a4c <HAL_GetTick>
 80033c2:	4602      	mov	r2, r0
 80033c4:	693b      	ldr	r3, [r7, #16]
 80033c6:	1ad3      	subs	r3, r2, r3
 80033c8:	f241 3288 	movw	r2, #5000	; 0x1388
 80033cc:	4293      	cmp	r3, r2
 80033ce:	d901      	bls.n	80033d4 <HAL_RCC_OscConfig+0x37c>
        {
          return HAL_TIMEOUT;
 80033d0:	2303      	movs	r3, #3
 80033d2:	e0a6      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      while(__HAL_RCC_GET_FLAG(RCC_FLAG_LSERDY) != RESET)
 80033d4:	4b56      	ldr	r3, [pc, #344]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033d6:	6f1b      	ldr	r3, [r3, #112]	; 0x70
 80033d8:	f003 0302 	and.w	r3, r3, #2
 80033dc:	2b00      	cmp	r3, #0
 80033de:	d1ee      	bne.n	80033be <HAL_RCC_OscConfig+0x366>
        }
      }
    }

    /* Restore clock configuration if changed */
    if(pwrclkchanged == SET)
 80033e0:	7dfb      	ldrb	r3, [r7, #23]
 80033e2:	2b01      	cmp	r3, #1
 80033e4:	d105      	bne.n	80033f2 <HAL_RCC_OscConfig+0x39a>
    {
      __HAL_RCC_PWR_CLK_DISABLE();
 80033e6:	4b52      	ldr	r3, [pc, #328]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033e8:	6c1b      	ldr	r3, [r3, #64]	; 0x40
 80033ea:	4a51      	ldr	r2, [pc, #324]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033ec:	f023 5380 	bic.w	r3, r3, #268435456	; 0x10000000
 80033f0:	6413      	str	r3, [r2, #64]	; 0x40
    }
  }
  /*-------------------------------- PLL Configuration -----------------------*/
  /* Check the parameters */
  assert_param(IS_RCC_PLL(RCC_OscInitStruct->PLL.PLLState));
  if ((RCC_OscInitStruct->PLL.PLLState) != RCC_PLL_NONE)
 80033f2:	687b      	ldr	r3, [r7, #4]
 80033f4:	699b      	ldr	r3, [r3, #24]
 80033f6:	2b00      	cmp	r3, #0
 80033f8:	f000 8092 	beq.w	8003520 <HAL_RCC_OscConfig+0x4c8>
  {
    /* Check if the PLL is used as system clock or not */
    if(__HAL_RCC_GET_SYSCLK_SOURCE() != RCC_CFGR_SWS_PLL)
 80033fc:	4b4c      	ldr	r3, [pc, #304]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80033fe:	689b      	ldr	r3, [r3, #8]
 8003400:	f003 030c 	and.w	r3, r3, #12
 8003404:	2b08      	cmp	r3, #8
 8003406:	d05c      	beq.n	80034c2 <HAL_RCC_OscConfig+0x46a>
    {
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_ON)
 8003408:	687b      	ldr	r3, [r7, #4]
 800340a:	699b      	ldr	r3, [r3, #24]
 800340c:	2b02      	cmp	r3, #2
 800340e:	d141      	bne.n	8003494 <HAL_RCC_OscConfig+0x43c>
        assert_param(IS_RCC_PLLN_VALUE(RCC_OscInitStruct->PLL.PLLN));
        assert_param(IS_RCC_PLLP_VALUE(RCC_OscInitStruct->PLL.PLLP));
        assert_param(IS_RCC_PLLQ_VALUE(RCC_OscInitStruct->PLL.PLLQ));

        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003410:	4b48      	ldr	r3, [pc, #288]	; (8003534 <HAL_RCC_OscConfig+0x4dc>)
 8003412:	2200      	movs	r2, #0
 8003414:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 8003416:	f7ff fb19 	bl	8002a4c <HAL_GetTick>
 800341a:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 800341c:	e008      	b.n	8003430 <HAL_RCC_OscConfig+0x3d8>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 800341e:	f7ff fb15 	bl	8002a4c <HAL_GetTick>
 8003422:	4602      	mov	r2, r0
 8003424:	693b      	ldr	r3, [r7, #16]
 8003426:	1ad3      	subs	r3, r2, r3
 8003428:	2b02      	cmp	r3, #2
 800342a:	d901      	bls.n	8003430 <HAL_RCC_OscConfig+0x3d8>
          {
            return HAL_TIMEOUT;
 800342c:	2303      	movs	r3, #3
 800342e:	e078      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 8003430:	4b3f      	ldr	r3, [pc, #252]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003432:	681b      	ldr	r3, [r3, #0]
 8003434:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 8003438:	2b00      	cmp	r3, #0
 800343a:	d1f0      	bne.n	800341e <HAL_RCC_OscConfig+0x3c6>
          }
        }

        /* Configure the main PLL clock source, multiplication and division factors. */
        WRITE_REG(RCC->PLLCFGR, (RCC_OscInitStruct->PLL.PLLSource                                            | \
 800343c:	687b      	ldr	r3, [r7, #4]
 800343e:	69da      	ldr	r2, [r3, #28]
 8003440:	687b      	ldr	r3, [r7, #4]
 8003442:	6a1b      	ldr	r3, [r3, #32]
 8003444:	431a      	orrs	r2, r3
 8003446:	687b      	ldr	r3, [r7, #4]
 8003448:	6a5b      	ldr	r3, [r3, #36]	; 0x24
 800344a:	019b      	lsls	r3, r3, #6
 800344c:	431a      	orrs	r2, r3
 800344e:	687b      	ldr	r3, [r7, #4]
 8003450:	6a9b      	ldr	r3, [r3, #40]	; 0x28
 8003452:	085b      	lsrs	r3, r3, #1
 8003454:	3b01      	subs	r3, #1
 8003456:	041b      	lsls	r3, r3, #16
 8003458:	431a      	orrs	r2, r3
 800345a:	687b      	ldr	r3, [r7, #4]
 800345c:	6adb      	ldr	r3, [r3, #44]	; 0x2c
 800345e:	061b      	lsls	r3, r3, #24
 8003460:	4933      	ldr	r1, [pc, #204]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003462:	4313      	orrs	r3, r2
 8003464:	604b      	str	r3, [r1, #4]
                                 RCC_OscInitStruct->PLL.PLLM                                                 | \
                                 (RCC_OscInitStruct->PLL.PLLN << RCC_PLLCFGR_PLLN_Pos)             | \
                                 (((RCC_OscInitStruct->PLL.PLLP >> 1U) - 1U) << RCC_PLLCFGR_PLLP_Pos) | \
                                 (RCC_OscInitStruct->PLL.PLLQ << RCC_PLLCFGR_PLLQ_Pos)));
        /* Enable the main PLL. */
        __HAL_RCC_PLL_ENABLE();
 8003466:	4b33      	ldr	r3, [pc, #204]	; (8003534 <HAL_RCC_OscConfig+0x4dc>)
 8003468:	2201      	movs	r2, #1
 800346a:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800346c:	f7ff faee 	bl	8002a4c <HAL_GetTick>
 8003470:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003472:	e008      	b.n	8003486 <HAL_RCC_OscConfig+0x42e>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 8003474:	f7ff faea 	bl	8002a4c <HAL_GetTick>
 8003478:	4602      	mov	r2, r0
 800347a:	693b      	ldr	r3, [r7, #16]
 800347c:	1ad3      	subs	r3, r2, r3
 800347e:	2b02      	cmp	r3, #2
 8003480:	d901      	bls.n	8003486 <HAL_RCC_OscConfig+0x42e>
          {
            return HAL_TIMEOUT;
 8003482:	2303      	movs	r3, #3
 8003484:	e04d      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 8003486:	4b2a      	ldr	r3, [pc, #168]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 8003488:	681b      	ldr	r3, [r3, #0]
 800348a:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 800348e:	2b00      	cmp	r3, #0
 8003490:	d0f0      	beq.n	8003474 <HAL_RCC_OscConfig+0x41c>
 8003492:	e045      	b.n	8003520 <HAL_RCC_OscConfig+0x4c8>
        }
      }
      else
      {
        /* Disable the main PLL. */
        __HAL_RCC_PLL_DISABLE();
 8003494:	4b27      	ldr	r3, [pc, #156]	; (8003534 <HAL_RCC_OscConfig+0x4dc>)
 8003496:	2200      	movs	r2, #0
 8003498:	601a      	str	r2, [r3, #0]

        /* Get Start Tick */
        tickstart = HAL_GetTick();
 800349a:	f7ff fad7 	bl	8002a4c <HAL_GetTick>
 800349e:	6138      	str	r0, [r7, #16]

        /* Wait till PLL is ready */
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034a0:	e008      	b.n	80034b4 <HAL_RCC_OscConfig+0x45c>
        {
          if((HAL_GetTick() - tickstart ) > PLL_TIMEOUT_VALUE)
 80034a2:	f7ff fad3 	bl	8002a4c <HAL_GetTick>
 80034a6:	4602      	mov	r2, r0
 80034a8:	693b      	ldr	r3, [r7, #16]
 80034aa:	1ad3      	subs	r3, r2, r3
 80034ac:	2b02      	cmp	r3, #2
 80034ae:	d901      	bls.n	80034b4 <HAL_RCC_OscConfig+0x45c>
          {
            return HAL_TIMEOUT;
 80034b0:	2303      	movs	r3, #3
 80034b2:	e036      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        while(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) != RESET)
 80034b4:	4b1e      	ldr	r3, [pc, #120]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80034b6:	681b      	ldr	r3, [r3, #0]
 80034b8:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80034bc:	2b00      	cmp	r3, #0
 80034be:	d1f0      	bne.n	80034a2 <HAL_RCC_OscConfig+0x44a>
 80034c0:	e02e      	b.n	8003520 <HAL_RCC_OscConfig+0x4c8>
      }
    }
    else
    {
      /* Check if there is a request to disable the PLL used as System clock source */
      if((RCC_OscInitStruct->PLL.PLLState) == RCC_PLL_OFF)
 80034c2:	687b      	ldr	r3, [r7, #4]
 80034c4:	699b      	ldr	r3, [r3, #24]
 80034c6:	2b01      	cmp	r3, #1
 80034c8:	d101      	bne.n	80034ce <HAL_RCC_OscConfig+0x476>
      {
        return HAL_ERROR;
 80034ca:	2301      	movs	r3, #1
 80034cc:	e029      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
      }
      else
      {
        /* Do not return HAL_ERROR if request repeats the current configuration */
        pll_config = RCC->PLLCFGR;
 80034ce:	4b18      	ldr	r3, [pc, #96]	; (8003530 <HAL_RCC_OscConfig+0x4d8>)
 80034d0:	685b      	ldr	r3, [r3, #4]
 80034d2:	60fb      	str	r3, [r7, #12]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034d4:	68fb      	ldr	r3, [r7, #12]
 80034d6:	f403 0280 	and.w	r2, r3, #4194304	; 0x400000
 80034da:	687b      	ldr	r3, [r7, #4]
 80034dc:	69db      	ldr	r3, [r3, #28]
 80034de:	429a      	cmp	r2, r3
 80034e0:	d11c      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034e2:	68fb      	ldr	r3, [r7, #12]
 80034e4:	f003 023f 	and.w	r2, r3, #63	; 0x3f
 80034e8:	687b      	ldr	r3, [r7, #4]
 80034ea:	6a1b      	ldr	r3, [r3, #32]
        if((READ_BIT(pll_config, RCC_PLLCFGR_PLLSRC) != RCC_OscInitStruct->PLL.PLLSource) ||
 80034ec:	429a      	cmp	r2, r3
 80034ee:	d115      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 80034f0:	68fa      	ldr	r2, [r7, #12]
 80034f2:	f647 73c0 	movw	r3, #32704	; 0x7fc0
 80034f6:	4013      	ands	r3, r2
 80034f8:	687a      	ldr	r2, [r7, #4]
 80034fa:	6a52      	ldr	r2, [r2, #36]	; 0x24
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLM) != RCC_OscInitStruct->PLL.PLLM) ||
 80034fc:	4293      	cmp	r3, r2
 80034fe:	d10d      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003500:	68fb      	ldr	r3, [r7, #12]
 8003502:	f403 3240 	and.w	r2, r3, #196608	; 0x30000
 8003506:	687b      	ldr	r3, [r7, #4]
 8003508:	6a9b      	ldr	r3, [r3, #40]	; 0x28
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLN) != RCC_OscInitStruct->PLL.PLLN) ||
 800350a:	429a      	cmp	r2, r3
 800350c:	d106      	bne.n	800351c <HAL_RCC_OscConfig+0x4c4>
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLQ) != RCC_OscInitStruct->PLL.PLLQ))
 800350e:	68fb      	ldr	r3, [r7, #12]
 8003510:	f003 6270 	and.w	r2, r3, #251658240	; 0xf000000
 8003514:	687b      	ldr	r3, [r7, #4]
 8003516:	6adb      	ldr	r3, [r3, #44]	; 0x2c
           (READ_BIT(pll_config, RCC_PLLCFGR_PLLP) != RCC_OscInitStruct->PLL.PLLP) ||
 8003518:	429a      	cmp	r2, r3
 800351a:	d001      	beq.n	8003520 <HAL_RCC_OscConfig+0x4c8>
        {
          return HAL_ERROR;
 800351c:	2301      	movs	r3, #1
 800351e:	e000      	b.n	8003522 <HAL_RCC_OscConfig+0x4ca>
        }
      }
    }
  }
  return HAL_OK;
 8003520:	2300      	movs	r3, #0
}
 8003522:	4618      	mov	r0, r3
 8003524:	3718      	adds	r7, #24
 8003526:	46bd      	mov	sp, r7
 8003528:	bd80      	pop	{r7, pc}
 800352a:	bf00      	nop
 800352c:	40007000 	.word	0x40007000
 8003530:	40023800 	.word	0x40023800
 8003534:	42470060 	.word	0x42470060

08003538 <HAL_RCC_ClockConfig>:
  *         HPRE[3:0] bits to ensure that HCLK not exceed the maximum allowed frequency
  *         (for more details refer to section above "Initialization/de-initialization functions")
  * @retval None
  */
HAL_StatusTypeDef HAL_RCC_ClockConfig(RCC_ClkInitTypeDef  *RCC_ClkInitStruct, uint32_t FLatency)
{
 8003538:	b580      	push	{r7, lr}
 800353a:	b084      	sub	sp, #16
 800353c:	af00      	add	r7, sp, #0
 800353e:	6078      	str	r0, [r7, #4]
 8003540:	6039      	str	r1, [r7, #0]
  uint32_t tickstart;

  /* Check Null pointer */
  if(RCC_ClkInitStruct == NULL)
 8003542:	687b      	ldr	r3, [r7, #4]
 8003544:	2b00      	cmp	r3, #0
 8003546:	d101      	bne.n	800354c <HAL_RCC_ClockConfig+0x14>
  {
    return HAL_ERROR;
 8003548:	2301      	movs	r3, #1
 800354a:	e0cc      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
  /* To correctly read data from FLASH memory, the number of wait states (LATENCY)
    must be correctly programmed according to the frequency of the CPU clock
    (HCLK) and the supply voltage of the device. */

  /* Increasing the number of wait states because of higher CPU frequency */
  if(FLatency > __HAL_FLASH_GET_LATENCY())
 800354c:	4b68      	ldr	r3, [pc, #416]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800354e:	681b      	ldr	r3, [r3, #0]
 8003550:	f003 030f 	and.w	r3, r3, #15
 8003554:	683a      	ldr	r2, [r7, #0]
 8003556:	429a      	cmp	r2, r3
 8003558:	d90c      	bls.n	8003574 <HAL_RCC_ClockConfig+0x3c>
  {
    /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 800355a:	4b65      	ldr	r3, [pc, #404]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800355c:	683a      	ldr	r2, [r7, #0]
 800355e:	b2d2      	uxtb	r2, r2
 8003560:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 8003562:	4b63      	ldr	r3, [pc, #396]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003564:	681b      	ldr	r3, [r3, #0]
 8003566:	f003 030f 	and.w	r3, r3, #15
 800356a:	683a      	ldr	r2, [r7, #0]
 800356c:	429a      	cmp	r2, r3
 800356e:	d001      	beq.n	8003574 <HAL_RCC_ClockConfig+0x3c>
    {
      return HAL_ERROR;
 8003570:	2301      	movs	r3, #1
 8003572:	e0b8      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- HCLK Configuration --------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_HCLK) == RCC_CLOCKTYPE_HCLK)
 8003574:	687b      	ldr	r3, [r7, #4]
 8003576:	681b      	ldr	r3, [r3, #0]
 8003578:	f003 0302 	and.w	r3, r3, #2
 800357c:	2b00      	cmp	r3, #0
 800357e:	d020      	beq.n	80035c2 <HAL_RCC_ClockConfig+0x8a>
  {
    /* Set the highest APBx dividers in order to ensure that we do not go through
       a non-spec phase whatever we decrease or increase HCLK. */
    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003580:	687b      	ldr	r3, [r7, #4]
 8003582:	681b      	ldr	r3, [r3, #0]
 8003584:	f003 0304 	and.w	r3, r3, #4
 8003588:	2b00      	cmp	r3, #0
 800358a:	d005      	beq.n	8003598 <HAL_RCC_ClockConfig+0x60>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_HCLK_DIV16);
 800358c:	4b59      	ldr	r3, [pc, #356]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800358e:	689b      	ldr	r3, [r3, #8]
 8003590:	4a58      	ldr	r2, [pc, #352]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003592:	f443 53e0 	orr.w	r3, r3, #7168	; 0x1c00
 8003596:	6093      	str	r3, [r2, #8]
    }

    if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 8003598:	687b      	ldr	r3, [r7, #4]
 800359a:	681b      	ldr	r3, [r3, #0]
 800359c:	f003 0308 	and.w	r3, r3, #8
 80035a0:	2b00      	cmp	r3, #0
 80035a2:	d005      	beq.n	80035b0 <HAL_RCC_ClockConfig+0x78>
    {
      MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, (RCC_HCLK_DIV16 << 3));
 80035a4:	4b53      	ldr	r3, [pc, #332]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035a6:	689b      	ldr	r3, [r3, #8]
 80035a8:	4a52      	ldr	r2, [pc, #328]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035aa:	f443 4360 	orr.w	r3, r3, #57344	; 0xe000
 80035ae:	6093      	str	r3, [r2, #8]
    }

    assert_param(IS_RCC_HCLK(RCC_ClkInitStruct->AHBCLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_HPRE, RCC_ClkInitStruct->AHBCLKDivider);
 80035b0:	4b50      	ldr	r3, [pc, #320]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035b2:	689b      	ldr	r3, [r3, #8]
 80035b4:	f023 02f0 	bic.w	r2, r3, #240	; 0xf0
 80035b8:	687b      	ldr	r3, [r7, #4]
 80035ba:	689b      	ldr	r3, [r3, #8]
 80035bc:	494d      	ldr	r1, [pc, #308]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035be:	4313      	orrs	r3, r2
 80035c0:	608b      	str	r3, [r1, #8]
  }

  /*------------------------- SYSCLK Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_SYSCLK) == RCC_CLOCKTYPE_SYSCLK)
 80035c2:	687b      	ldr	r3, [r7, #4]
 80035c4:	681b      	ldr	r3, [r3, #0]
 80035c6:	f003 0301 	and.w	r3, r3, #1
 80035ca:	2b00      	cmp	r3, #0
 80035cc:	d044      	beq.n	8003658 <HAL_RCC_ClockConfig+0x120>
  {
    assert_param(IS_RCC_SYSCLKSOURCE(RCC_ClkInitStruct->SYSCLKSource));

    /* HSE is selected as System Clock Source */
    if(RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_HSE)
 80035ce:	687b      	ldr	r3, [r7, #4]
 80035d0:	685b      	ldr	r3, [r3, #4]
 80035d2:	2b01      	cmp	r3, #1
 80035d4:	d107      	bne.n	80035e6 <HAL_RCC_ClockConfig+0xae>
    {
      /* Check the HSE ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSERDY) == RESET)
 80035d6:	4b47      	ldr	r3, [pc, #284]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035d8:	681b      	ldr	r3, [r3, #0]
 80035da:	f403 3300 	and.w	r3, r3, #131072	; 0x20000
 80035de:	2b00      	cmp	r3, #0
 80035e0:	d119      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 80035e2:	2301      	movs	r3, #1
 80035e4:	e07f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }
    /* PLL is selected as System Clock Source */
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035e6:	687b      	ldr	r3, [r7, #4]
 80035e8:	685b      	ldr	r3, [r3, #4]
 80035ea:	2b02      	cmp	r3, #2
 80035ec:	d003      	beq.n	80035f6 <HAL_RCC_ClockConfig+0xbe>
            (RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLRCLK))
 80035ee:	687b      	ldr	r3, [r7, #4]
 80035f0:	685b      	ldr	r3, [r3, #4]
    else if((RCC_ClkInitStruct->SYSCLKSource == RCC_SYSCLKSOURCE_PLLCLK)   ||
 80035f2:	2b03      	cmp	r3, #3
 80035f4:	d107      	bne.n	8003606 <HAL_RCC_ClockConfig+0xce>
    {
      /* Check the PLL ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_PLLRDY) == RESET)
 80035f6:	4b3f      	ldr	r3, [pc, #252]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80035f8:	681b      	ldr	r3, [r3, #0]
 80035fa:	f003 7300 	and.w	r3, r3, #33554432	; 0x2000000
 80035fe:	2b00      	cmp	r3, #0
 8003600:	d109      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003602:	2301      	movs	r3, #1
 8003604:	e06f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
    /* HSI is selected as System Clock Source */
    else
    {
      /* Check the HSI ready flag */
      if(__HAL_RCC_GET_FLAG(RCC_FLAG_HSIRDY) == RESET)
 8003606:	4b3b      	ldr	r3, [pc, #236]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003608:	681b      	ldr	r3, [r3, #0]
 800360a:	f003 0302 	and.w	r3, r3, #2
 800360e:	2b00      	cmp	r3, #0
 8003610:	d101      	bne.n	8003616 <HAL_RCC_ClockConfig+0xde>
      {
        return HAL_ERROR;
 8003612:	2301      	movs	r3, #1
 8003614:	e067      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
      }
    }

    __HAL_RCC_SYSCLK_CONFIG(RCC_ClkInitStruct->SYSCLKSource);
 8003616:	4b37      	ldr	r3, [pc, #220]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003618:	689b      	ldr	r3, [r3, #8]
 800361a:	f023 0203 	bic.w	r2, r3, #3
 800361e:	687b      	ldr	r3, [r7, #4]
 8003620:	685b      	ldr	r3, [r3, #4]
 8003622:	4934      	ldr	r1, [pc, #208]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003624:	4313      	orrs	r3, r2
 8003626:	608b      	str	r3, [r1, #8]

    /* Get Start Tick */
    tickstart = HAL_GetTick();
 8003628:	f7ff fa10 	bl	8002a4c <HAL_GetTick>
 800362c:	60f8      	str	r0, [r7, #12]

    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 800362e:	e00a      	b.n	8003646 <HAL_RCC_ClockConfig+0x10e>
    {
      if ((HAL_GetTick() - tickstart) > CLOCKSWITCH_TIMEOUT_VALUE)
 8003630:	f7ff fa0c 	bl	8002a4c <HAL_GetTick>
 8003634:	4602      	mov	r2, r0
 8003636:	68fb      	ldr	r3, [r7, #12]
 8003638:	1ad3      	subs	r3, r2, r3
 800363a:	f241 3288 	movw	r2, #5000	; 0x1388
 800363e:	4293      	cmp	r3, r2
 8003640:	d901      	bls.n	8003646 <HAL_RCC_ClockConfig+0x10e>
      {
        return HAL_TIMEOUT;
 8003642:	2303      	movs	r3, #3
 8003644:	e04f      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    while (__HAL_RCC_GET_SYSCLK_SOURCE() != (RCC_ClkInitStruct->SYSCLKSource << RCC_CFGR_SWS_Pos))
 8003646:	4b2b      	ldr	r3, [pc, #172]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 8003648:	689b      	ldr	r3, [r3, #8]
 800364a:	f003 020c 	and.w	r2, r3, #12
 800364e:	687b      	ldr	r3, [r7, #4]
 8003650:	685b      	ldr	r3, [r3, #4]
 8003652:	009b      	lsls	r3, r3, #2
 8003654:	429a      	cmp	r2, r3
 8003656:	d1eb      	bne.n	8003630 <HAL_RCC_ClockConfig+0xf8>
      }
    }
  }

  /* Decreasing the number of wait states because of lower CPU frequency */
  if(FLatency < __HAL_FLASH_GET_LATENCY())
 8003658:	4b25      	ldr	r3, [pc, #148]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 800365a:	681b      	ldr	r3, [r3, #0]
 800365c:	f003 030f 	and.w	r3, r3, #15
 8003660:	683a      	ldr	r2, [r7, #0]
 8003662:	429a      	cmp	r2, r3
 8003664:	d20c      	bcs.n	8003680 <HAL_RCC_ClockConfig+0x148>
  {
     /* Program the new number of wait states to the LATENCY bits in the FLASH_ACR register */
    __HAL_FLASH_SET_LATENCY(FLatency);
 8003666:	4b22      	ldr	r3, [pc, #136]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003668:	683a      	ldr	r2, [r7, #0]
 800366a:	b2d2      	uxtb	r2, r2
 800366c:	701a      	strb	r2, [r3, #0]

    /* Check that the new number of wait states is taken into account to access the Flash
    memory by reading the FLASH_ACR register */
    if(__HAL_FLASH_GET_LATENCY() != FLatency)
 800366e:	4b20      	ldr	r3, [pc, #128]	; (80036f0 <HAL_RCC_ClockConfig+0x1b8>)
 8003670:	681b      	ldr	r3, [r3, #0]
 8003672:	f003 030f 	and.w	r3, r3, #15
 8003676:	683a      	ldr	r2, [r7, #0]
 8003678:	429a      	cmp	r2, r3
 800367a:	d001      	beq.n	8003680 <HAL_RCC_ClockConfig+0x148>
    {
      return HAL_ERROR;
 800367c:	2301      	movs	r3, #1
 800367e:	e032      	b.n	80036e6 <HAL_RCC_ClockConfig+0x1ae>
    }
  }

  /*-------------------------- PCLK1 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK1) == RCC_CLOCKTYPE_PCLK1)
 8003680:	687b      	ldr	r3, [r7, #4]
 8003682:	681b      	ldr	r3, [r3, #0]
 8003684:	f003 0304 	and.w	r3, r3, #4
 8003688:	2b00      	cmp	r3, #0
 800368a:	d008      	beq.n	800369e <HAL_RCC_ClockConfig+0x166>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB1CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE1, RCC_ClkInitStruct->APB1CLKDivider);
 800368c:	4b19      	ldr	r3, [pc, #100]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800368e:	689b      	ldr	r3, [r3, #8]
 8003690:	f423 52e0 	bic.w	r2, r3, #7168	; 0x1c00
 8003694:	687b      	ldr	r3, [r7, #4]
 8003696:	68db      	ldr	r3, [r3, #12]
 8003698:	4916      	ldr	r1, [pc, #88]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 800369a:	4313      	orrs	r3, r2
 800369c:	608b      	str	r3, [r1, #8]
  }

  /*-------------------------- PCLK2 Configuration ---------------------------*/
  if(((RCC_ClkInitStruct->ClockType) & RCC_CLOCKTYPE_PCLK2) == RCC_CLOCKTYPE_PCLK2)
 800369e:	687b      	ldr	r3, [r7, #4]
 80036a0:	681b      	ldr	r3, [r3, #0]
 80036a2:	f003 0308 	and.w	r3, r3, #8
 80036a6:	2b00      	cmp	r3, #0
 80036a8:	d009      	beq.n	80036be <HAL_RCC_ClockConfig+0x186>
  {
    assert_param(IS_RCC_PCLK(RCC_ClkInitStruct->APB2CLKDivider));
    MODIFY_REG(RCC->CFGR, RCC_CFGR_PPRE2, ((RCC_ClkInitStruct->APB2CLKDivider) << 3U));
 80036aa:	4b12      	ldr	r3, [pc, #72]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ac:	689b      	ldr	r3, [r3, #8]
 80036ae:	f423 4260 	bic.w	r2, r3, #57344	; 0xe000
 80036b2:	687b      	ldr	r3, [r7, #4]
 80036b4:	691b      	ldr	r3, [r3, #16]
 80036b6:	00db      	lsls	r3, r3, #3
 80036b8:	490e      	ldr	r1, [pc, #56]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036ba:	4313      	orrs	r3, r2
 80036bc:	608b      	str	r3, [r1, #8]
  }

  /* Update the SystemCoreClock global variable */
  SystemCoreClock = HAL_RCC_GetSysClockFreq() >> AHBPrescTable[(RCC->CFGR & RCC_CFGR_HPRE)>> RCC_CFGR_HPRE_Pos];
 80036be:	f000 f821 	bl	8003704 <HAL_RCC_GetSysClockFreq>
 80036c2:	4602      	mov	r2, r0
 80036c4:	4b0b      	ldr	r3, [pc, #44]	; (80036f4 <HAL_RCC_ClockConfig+0x1bc>)
 80036c6:	689b      	ldr	r3, [r3, #8]
 80036c8:	091b      	lsrs	r3, r3, #4
 80036ca:	f003 030f 	and.w	r3, r3, #15
 80036ce:	490a      	ldr	r1, [pc, #40]	; (80036f8 <HAL_RCC_ClockConfig+0x1c0>)
 80036d0:	5ccb      	ldrb	r3, [r1, r3]
 80036d2:	fa22 f303 	lsr.w	r3, r2, r3
 80036d6:	4a09      	ldr	r2, [pc, #36]	; (80036fc <HAL_RCC_ClockConfig+0x1c4>)
 80036d8:	6013      	str	r3, [r2, #0]

  /* Configure the source of time base considering new system clocks settings */
  HAL_InitTick (uwTickPrio);
 80036da:	4b09      	ldr	r3, [pc, #36]	; (8003700 <HAL_RCC_ClockConfig+0x1c8>)
 80036dc:	681b      	ldr	r3, [r3, #0]
 80036de:	4618      	mov	r0, r3
 80036e0:	f7ff f970 	bl	80029c4 <HAL_InitTick>

  return HAL_OK;
 80036e4:	2300      	movs	r3, #0
}
 80036e6:	4618      	mov	r0, r3
 80036e8:	3710      	adds	r7, #16
 80036ea:	46bd      	mov	sp, r7
 80036ec:	bd80      	pop	{r7, pc}
 80036ee:	bf00      	nop
 80036f0:	40023c00 	.word	0x40023c00
 80036f4:	40023800 	.word	0x40023800
 80036f8:	08006048 	.word	0x08006048
 80036fc:	20000024 	.word	0x20000024
 8003700:	20000028 	.word	0x20000028

08003704 <HAL_RCC_GetSysClockFreq>:
  *
  *
  * @retval SYSCLK frequency
  */
__weak uint32_t HAL_RCC_GetSysClockFreq(void)
{
 8003704:	e92d 43b0 	stmdb	sp!, {r4, r5, r7, r8, r9, lr}
 8003708:	b084      	sub	sp, #16
 800370a:	af00      	add	r7, sp, #0
  uint32_t pllm = 0U, pllvco = 0U, pllp = 0U;
 800370c:	2300      	movs	r3, #0
 800370e:	607b      	str	r3, [r7, #4]
 8003710:	2300      	movs	r3, #0
 8003712:	60fb      	str	r3, [r7, #12]
 8003714:	2300      	movs	r3, #0
 8003716:	603b      	str	r3, [r7, #0]
  uint32_t sysclockfreq = 0U;
 8003718:	2300      	movs	r3, #0
 800371a:	60bb      	str	r3, [r7, #8]

  /* Get SYSCLK source -------------------------------------------------------*/
  switch (RCC->CFGR & RCC_CFGR_SWS)
 800371c:	4b67      	ldr	r3, [pc, #412]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800371e:	689b      	ldr	r3, [r3, #8]
 8003720:	f003 030c 	and.w	r3, r3, #12
 8003724:	2b08      	cmp	r3, #8
 8003726:	d00d      	beq.n	8003744 <HAL_RCC_GetSysClockFreq+0x40>
 8003728:	2b08      	cmp	r3, #8
 800372a:	f200 80bd 	bhi.w	80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>
 800372e:	2b00      	cmp	r3, #0
 8003730:	d002      	beq.n	8003738 <HAL_RCC_GetSysClockFreq+0x34>
 8003732:	2b04      	cmp	r3, #4
 8003734:	d003      	beq.n	800373e <HAL_RCC_GetSysClockFreq+0x3a>
 8003736:	e0b7      	b.n	80038a8 <HAL_RCC_GetSysClockFreq+0x1a4>
  {
    case RCC_CFGR_SWS_HSI:  /* HSI used as system clock source */
    {
      sysclockfreq = HSI_VALUE;
 8003738:	4b61      	ldr	r3, [pc, #388]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 800373a:	60bb      	str	r3, [r7, #8]
       break;
 800373c:	e0b7      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_HSE:  /* HSE used as system clock  source */
    {
      sysclockfreq = HSE_VALUE;
 800373e:	4b61      	ldr	r3, [pc, #388]	; (80038c4 <HAL_RCC_GetSysClockFreq+0x1c0>)
 8003740:	60bb      	str	r3, [r7, #8]
      break;
 8003742:	e0b4      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    case RCC_CFGR_SWS_PLL:  /* PLL used as system clock  source */
    {
      /* PLL_VCO = (HSE_VALUE or HSI_VALUE / PLLM) * PLLN
      SYSCLK = PLL_VCO / PLLP */
      pllm = RCC->PLLCFGR & RCC_PLLCFGR_PLLM;
 8003744:	4b5d      	ldr	r3, [pc, #372]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003746:	685b      	ldr	r3, [r3, #4]
 8003748:	f003 033f 	and.w	r3, r3, #63	; 0x3f
 800374c:	607b      	str	r3, [r7, #4]
      if(__HAL_RCC_GET_PLL_OSCSOURCE() != RCC_PLLSOURCE_HSI)
 800374e:	4b5b      	ldr	r3, [pc, #364]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 8003750:	685b      	ldr	r3, [r3, #4]
 8003752:	f403 0380 	and.w	r3, r3, #4194304	; 0x400000
 8003756:	2b00      	cmp	r3, #0
 8003758:	d04d      	beq.n	80037f6 <HAL_RCC_GetSysClockFreq+0xf2>
      {
        /* HSE used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSE_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 800375a:	4b58      	ldr	r3, [pc, #352]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800375c:	685b      	ldr	r3, [r3, #4]
 800375e:	099b      	lsrs	r3, r3, #6
 8003760:	461a      	mov	r2, r3
 8003762:	f04f 0300 	mov.w	r3, #0
 8003766:	f240 10ff 	movw	r0, #511	; 0x1ff
 800376a:	f04f 0100 	mov.w	r1, #0
 800376e:	ea02 0800 	and.w	r8, r2, r0
 8003772:	ea03 0901 	and.w	r9, r3, r1
 8003776:	4640      	mov	r0, r8
 8003778:	4649      	mov	r1, r9
 800377a:	f04f 0200 	mov.w	r2, #0
 800377e:	f04f 0300 	mov.w	r3, #0
 8003782:	014b      	lsls	r3, r1, #5
 8003784:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003788:	0142      	lsls	r2, r0, #5
 800378a:	4610      	mov	r0, r2
 800378c:	4619      	mov	r1, r3
 800378e:	ebb0 0008 	subs.w	r0, r0, r8
 8003792:	eb61 0109 	sbc.w	r1, r1, r9
 8003796:	f04f 0200 	mov.w	r2, #0
 800379a:	f04f 0300 	mov.w	r3, #0
 800379e:	018b      	lsls	r3, r1, #6
 80037a0:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 80037a4:	0182      	lsls	r2, r0, #6
 80037a6:	1a12      	subs	r2, r2, r0
 80037a8:	eb63 0301 	sbc.w	r3, r3, r1
 80037ac:	f04f 0000 	mov.w	r0, #0
 80037b0:	f04f 0100 	mov.w	r1, #0
 80037b4:	00d9      	lsls	r1, r3, #3
 80037b6:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 80037ba:	00d0      	lsls	r0, r2, #3
 80037bc:	4602      	mov	r2, r0
 80037be:	460b      	mov	r3, r1
 80037c0:	eb12 0208 	adds.w	r2, r2, r8
 80037c4:	eb43 0309 	adc.w	r3, r3, r9
 80037c8:	f04f 0000 	mov.w	r0, #0
 80037cc:	f04f 0100 	mov.w	r1, #0
 80037d0:	0259      	lsls	r1, r3, #9
 80037d2:	ea41 51d2 	orr.w	r1, r1, r2, lsr #23
 80037d6:	0250      	lsls	r0, r2, #9
 80037d8:	4602      	mov	r2, r0
 80037da:	460b      	mov	r3, r1
 80037dc:	4610      	mov	r0, r2
 80037de:	4619      	mov	r1, r3
 80037e0:	687b      	ldr	r3, [r7, #4]
 80037e2:	461a      	mov	r2, r3
 80037e4:	f04f 0300 	mov.w	r3, #0
 80037e8:	f7fd fac0 	bl	8000d6c <__aeabi_uldivmod>
 80037ec:	4602      	mov	r2, r0
 80037ee:	460b      	mov	r3, r1
 80037f0:	4613      	mov	r3, r2
 80037f2:	60fb      	str	r3, [r7, #12]
 80037f4:	e04a      	b.n	800388c <HAL_RCC_GetSysClockFreq+0x188>
      }
      else
      {
        /* HSI used as PLL clock source */
        pllvco = (uint32_t) ((((uint64_t) HSI_VALUE * ((uint64_t) ((RCC->PLLCFGR & RCC_PLLCFGR_PLLN) >> RCC_PLLCFGR_PLLN_Pos)))) / (uint64_t)pllm);
 80037f6:	4b31      	ldr	r3, [pc, #196]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 80037f8:	685b      	ldr	r3, [r3, #4]
 80037fa:	099b      	lsrs	r3, r3, #6
 80037fc:	461a      	mov	r2, r3
 80037fe:	f04f 0300 	mov.w	r3, #0
 8003802:	f240 10ff 	movw	r0, #511	; 0x1ff
 8003806:	f04f 0100 	mov.w	r1, #0
 800380a:	ea02 0400 	and.w	r4, r2, r0
 800380e:	ea03 0501 	and.w	r5, r3, r1
 8003812:	4620      	mov	r0, r4
 8003814:	4629      	mov	r1, r5
 8003816:	f04f 0200 	mov.w	r2, #0
 800381a:	f04f 0300 	mov.w	r3, #0
 800381e:	014b      	lsls	r3, r1, #5
 8003820:	ea43 63d0 	orr.w	r3, r3, r0, lsr #27
 8003824:	0142      	lsls	r2, r0, #5
 8003826:	4610      	mov	r0, r2
 8003828:	4619      	mov	r1, r3
 800382a:	1b00      	subs	r0, r0, r4
 800382c:	eb61 0105 	sbc.w	r1, r1, r5
 8003830:	f04f 0200 	mov.w	r2, #0
 8003834:	f04f 0300 	mov.w	r3, #0
 8003838:	018b      	lsls	r3, r1, #6
 800383a:	ea43 6390 	orr.w	r3, r3, r0, lsr #26
 800383e:	0182      	lsls	r2, r0, #6
 8003840:	1a12      	subs	r2, r2, r0
 8003842:	eb63 0301 	sbc.w	r3, r3, r1
 8003846:	f04f 0000 	mov.w	r0, #0
 800384a:	f04f 0100 	mov.w	r1, #0
 800384e:	00d9      	lsls	r1, r3, #3
 8003850:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8003854:	00d0      	lsls	r0, r2, #3
 8003856:	4602      	mov	r2, r0
 8003858:	460b      	mov	r3, r1
 800385a:	1912      	adds	r2, r2, r4
 800385c:	eb45 0303 	adc.w	r3, r5, r3
 8003860:	f04f 0000 	mov.w	r0, #0
 8003864:	f04f 0100 	mov.w	r1, #0
 8003868:	0299      	lsls	r1, r3, #10
 800386a:	ea41 5192 	orr.w	r1, r1, r2, lsr #22
 800386e:	0290      	lsls	r0, r2, #10
 8003870:	4602      	mov	r2, r0
 8003872:	460b      	mov	r3, r1
 8003874:	4610      	mov	r0, r2
 8003876:	4619      	mov	r1, r3
 8003878:	687b      	ldr	r3, [r7, #4]
 800387a:	461a      	mov	r2, r3
 800387c:	f04f 0300 	mov.w	r3, #0
 8003880:	f7fd fa74 	bl	8000d6c <__aeabi_uldivmod>
 8003884:	4602      	mov	r2, r0
 8003886:	460b      	mov	r3, r1
 8003888:	4613      	mov	r3, r2
 800388a:	60fb      	str	r3, [r7, #12]
      }
      pllp = ((((RCC->PLLCFGR & RCC_PLLCFGR_PLLP) >> RCC_PLLCFGR_PLLP_Pos) + 1U) *2U);
 800388c:	4b0b      	ldr	r3, [pc, #44]	; (80038bc <HAL_RCC_GetSysClockFreq+0x1b8>)
 800388e:	685b      	ldr	r3, [r3, #4]
 8003890:	0c1b      	lsrs	r3, r3, #16
 8003892:	f003 0303 	and.w	r3, r3, #3
 8003896:	3301      	adds	r3, #1
 8003898:	005b      	lsls	r3, r3, #1
 800389a:	603b      	str	r3, [r7, #0]

      sysclockfreq = pllvco/pllp;
 800389c:	68fa      	ldr	r2, [r7, #12]
 800389e:	683b      	ldr	r3, [r7, #0]
 80038a0:	fbb2 f3f3 	udiv	r3, r2, r3
 80038a4:	60bb      	str	r3, [r7, #8]
      break;
 80038a6:	e002      	b.n	80038ae <HAL_RCC_GetSysClockFreq+0x1aa>
    }
    default:
    {
      sysclockfreq = HSI_VALUE;
 80038a8:	4b05      	ldr	r3, [pc, #20]	; (80038c0 <HAL_RCC_GetSysClockFreq+0x1bc>)
 80038aa:	60bb      	str	r3, [r7, #8]
      break;
 80038ac:	bf00      	nop
    }
  }
  return sysclockfreq;
 80038ae:	68bb      	ldr	r3, [r7, #8]
}
 80038b0:	4618      	mov	r0, r3
 80038b2:	3710      	adds	r7, #16
 80038b4:	46bd      	mov	sp, r7
 80038b6:	e8bd 83b0 	ldmia.w	sp!, {r4, r5, r7, r8, r9, pc}
 80038ba:	bf00      	nop
 80038bc:	40023800 	.word	0x40023800
 80038c0:	00f42400 	.word	0x00f42400
 80038c4:	007a1200 	.word	0x007a1200

080038c8 <HAL_RCC_GetHCLKFreq>:
  * @note   The SystemCoreClock CMSIS variable is used to store System Clock Frequency
  *         and updated within this function
  * @retval HCLK frequency
  */
uint32_t HAL_RCC_GetHCLKFreq(void)
{
 80038c8:	b480      	push	{r7}
 80038ca:	af00      	add	r7, sp, #0
  return SystemCoreClock;
 80038cc:	4b03      	ldr	r3, [pc, #12]	; (80038dc <HAL_RCC_GetHCLKFreq+0x14>)
 80038ce:	681b      	ldr	r3, [r3, #0]
}
 80038d0:	4618      	mov	r0, r3
 80038d2:	46bd      	mov	sp, r7
 80038d4:	f85d 7b04 	ldr.w	r7, [sp], #4
 80038d8:	4770      	bx	lr
 80038da:	bf00      	nop
 80038dc:	20000024 	.word	0x20000024

080038e0 <HAL_RCC_GetPCLK1Freq>:
  * @note   Each time PCLK1 changes, this function must be called to update the
  *         right PCLK1 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK1 frequency
  */
uint32_t HAL_RCC_GetPCLK1Freq(void)
{
 80038e0:	b580      	push	{r7, lr}
 80038e2:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK1 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq() >> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE1)>> RCC_CFGR_PPRE1_Pos]);
 80038e4:	f7ff fff0 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 80038e8:	4602      	mov	r2, r0
 80038ea:	4b05      	ldr	r3, [pc, #20]	; (8003900 <HAL_RCC_GetPCLK1Freq+0x20>)
 80038ec:	689b      	ldr	r3, [r3, #8]
 80038ee:	0a9b      	lsrs	r3, r3, #10
 80038f0:	f003 0307 	and.w	r3, r3, #7
 80038f4:	4903      	ldr	r1, [pc, #12]	; (8003904 <HAL_RCC_GetPCLK1Freq+0x24>)
 80038f6:	5ccb      	ldrb	r3, [r1, r3]
 80038f8:	fa22 f303 	lsr.w	r3, r2, r3
}
 80038fc:	4618      	mov	r0, r3
 80038fe:	bd80      	pop	{r7, pc}
 8003900:	40023800 	.word	0x40023800
 8003904:	08006058 	.word	0x08006058

08003908 <HAL_RCC_GetPCLK2Freq>:
  * @note   Each time PCLK2 changes, this function must be called to update the
  *         right PCLK2 value. Otherwise, any configuration based on this function will be incorrect.
  * @retval PCLK2 frequency
  */
uint32_t HAL_RCC_GetPCLK2Freq(void)
{
 8003908:	b580      	push	{r7, lr}
 800390a:	af00      	add	r7, sp, #0
  /* Get HCLK source and Compute PCLK2 frequency ---------------------------*/
  return (HAL_RCC_GetHCLKFreq()>> APBPrescTable[(RCC->CFGR & RCC_CFGR_PPRE2)>> RCC_CFGR_PPRE2_Pos]);
 800390c:	f7ff ffdc 	bl	80038c8 <HAL_RCC_GetHCLKFreq>
 8003910:	4602      	mov	r2, r0
 8003912:	4b05      	ldr	r3, [pc, #20]	; (8003928 <HAL_RCC_GetPCLK2Freq+0x20>)
 8003914:	689b      	ldr	r3, [r3, #8]
 8003916:	0b5b      	lsrs	r3, r3, #13
 8003918:	f003 0307 	and.w	r3, r3, #7
 800391c:	4903      	ldr	r1, [pc, #12]	; (800392c <HAL_RCC_GetPCLK2Freq+0x24>)
 800391e:	5ccb      	ldrb	r3, [r1, r3]
 8003920:	fa22 f303 	lsr.w	r3, r2, r3
}
 8003924:	4618      	mov	r0, r3
 8003926:	bd80      	pop	{r7, pc}
 8003928:	40023800 	.word	0x40023800
 800392c:	08006058 	.word	0x08006058

08003930 <HAL_TIM_Base_Init>:
  *         Ex: call @ref HAL_TIM_Base_DeInit() before HAL_TIM_Base_Init()
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Init(TIM_HandleTypeDef *htim)
{
 8003930:	b580      	push	{r7, lr}
 8003932:	b082      	sub	sp, #8
 8003934:	af00      	add	r7, sp, #0
 8003936:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003938:	687b      	ldr	r3, [r7, #4]
 800393a:	2b00      	cmp	r3, #0
 800393c:	d101      	bne.n	8003942 <HAL_TIM_Base_Init+0x12>
  {
    return HAL_ERROR;
 800393e:	2301      	movs	r3, #1
 8003940:	e01d      	b.n	800397e <HAL_TIM_Base_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003942:	687b      	ldr	r3, [r7, #4]
 8003944:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003948:	b2db      	uxtb	r3, r3
 800394a:	2b00      	cmp	r3, #0
 800394c:	d106      	bne.n	800395c <HAL_TIM_Base_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 800394e:	687b      	ldr	r3, [r7, #4]
 8003950:	2200      	movs	r2, #0
 8003952:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Base_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    HAL_TIM_Base_MspInit(htim);
 8003956:	6878      	ldr	r0, [r7, #4]
 8003958:	f7fe fec6 	bl	80026e8 <HAL_TIM_Base_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800395c:	687b      	ldr	r3, [r7, #4]
 800395e:	2202      	movs	r2, #2
 8003960:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Set the Time Base configuration */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003964:	687b      	ldr	r3, [r7, #4]
 8003966:	681a      	ldr	r2, [r3, #0]
 8003968:	687b      	ldr	r3, [r7, #4]
 800396a:	3304      	adds	r3, #4
 800396c:	4619      	mov	r1, r3
 800396e:	4610      	mov	r0, r2
 8003970:	f000 fc3c 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003974:	687b      	ldr	r3, [r7, #4]
 8003976:	2201      	movs	r2, #1
 8003978:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 800397c:	2300      	movs	r3, #0
}
 800397e:	4618      	mov	r0, r3
 8003980:	3708      	adds	r7, #8
 8003982:	46bd      	mov	sp, r7
 8003984:	bd80      	pop	{r7, pc}

08003986 <HAL_TIM_Base_Start>:
  * @brief  Starts the TIM Base generation.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start(TIM_HandleTypeDef *htim)
{
 8003986:	b480      	push	{r7}
 8003988:	b085      	sub	sp, #20
 800398a:	af00      	add	r7, sp, #0
 800398c:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 800398e:	687b      	ldr	r3, [r7, #4]
 8003990:	2202      	movs	r2, #2
 8003992:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003996:	687b      	ldr	r3, [r7, #4]
 8003998:	681b      	ldr	r3, [r3, #0]
 800399a:	689b      	ldr	r3, [r3, #8]
 800399c:	f003 0307 	and.w	r3, r3, #7
 80039a0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039a2:	68fb      	ldr	r3, [r7, #12]
 80039a4:	2b06      	cmp	r3, #6
 80039a6:	d007      	beq.n	80039b8 <HAL_TIM_Base_Start+0x32>
  {
    __HAL_TIM_ENABLE(htim);
 80039a8:	687b      	ldr	r3, [r7, #4]
 80039aa:	681b      	ldr	r3, [r3, #0]
 80039ac:	681a      	ldr	r2, [r3, #0]
 80039ae:	687b      	ldr	r3, [r7, #4]
 80039b0:	681b      	ldr	r3, [r3, #0]
 80039b2:	f042 0201 	orr.w	r2, r2, #1
 80039b6:	601a      	str	r2, [r3, #0]
  }

  /* Change the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 80039b8:	687b      	ldr	r3, [r7, #4]
 80039ba:	2201      	movs	r2, #1
 80039bc:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Return function status */
  return HAL_OK;
 80039c0:	2300      	movs	r3, #0
}
 80039c2:	4618      	mov	r0, r3
 80039c4:	3714      	adds	r7, #20
 80039c6:	46bd      	mov	sp, r7
 80039c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80039cc:	4770      	bx	lr

080039ce <HAL_TIM_Base_Start_IT>:
  * @brief  Starts the TIM Base generation in interrupt mode.
  * @param  htim TIM Base handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Base_Start_IT(TIM_HandleTypeDef *htim)
{
 80039ce:	b480      	push	{r7}
 80039d0:	b085      	sub	sp, #20
 80039d2:	af00      	add	r7, sp, #0
 80039d4:	6078      	str	r0, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_INSTANCE(htim->Instance));

  /* Enable the TIM Update interrupt */
  __HAL_TIM_ENABLE_IT(htim, TIM_IT_UPDATE);
 80039d6:	687b      	ldr	r3, [r7, #4]
 80039d8:	681b      	ldr	r3, [r3, #0]
 80039da:	68da      	ldr	r2, [r3, #12]
 80039dc:	687b      	ldr	r3, [r7, #4]
 80039de:	681b      	ldr	r3, [r3, #0]
 80039e0:	f042 0201 	orr.w	r2, r2, #1
 80039e4:	60da      	str	r2, [r3, #12]

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 80039e6:	687b      	ldr	r3, [r7, #4]
 80039e8:	681b      	ldr	r3, [r3, #0]
 80039ea:	689b      	ldr	r3, [r3, #8]
 80039ec:	f003 0307 	and.w	r3, r3, #7
 80039f0:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 80039f2:	68fb      	ldr	r3, [r7, #12]
 80039f4:	2b06      	cmp	r3, #6
 80039f6:	d007      	beq.n	8003a08 <HAL_TIM_Base_Start_IT+0x3a>
  {
    __HAL_TIM_ENABLE(htim);
 80039f8:	687b      	ldr	r3, [r7, #4]
 80039fa:	681b      	ldr	r3, [r3, #0]
 80039fc:	681a      	ldr	r2, [r3, #0]
 80039fe:	687b      	ldr	r3, [r7, #4]
 8003a00:	681b      	ldr	r3, [r3, #0]
 8003a02:	f042 0201 	orr.w	r2, r2, #1
 8003a06:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003a08:	2300      	movs	r3, #0
}
 8003a0a:	4618      	mov	r0, r3
 8003a0c:	3714      	adds	r7, #20
 8003a0e:	46bd      	mov	sp, r7
 8003a10:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a14:	4770      	bx	lr

08003a16 <HAL_TIM_PWM_Init>:
  *         Ex: call @ref HAL_TIM_PWM_DeInit() before HAL_TIM_PWM_Init()
  * @param  htim TIM PWM handle
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Init(TIM_HandleTypeDef *htim)
{
 8003a16:	b580      	push	{r7, lr}
 8003a18:	b082      	sub	sp, #8
 8003a1a:	af00      	add	r7, sp, #0
 8003a1c:	6078      	str	r0, [r7, #4]
  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003a1e:	687b      	ldr	r3, [r7, #4]
 8003a20:	2b00      	cmp	r3, #0
 8003a22:	d101      	bne.n	8003a28 <HAL_TIM_PWM_Init+0x12>
  {
    return HAL_ERROR;
 8003a24:	2301      	movs	r3, #1
 8003a26:	e01d      	b.n	8003a64 <HAL_TIM_PWM_Init+0x4e>
  assert_param(IS_TIM_INSTANCE(htim->Instance));
  assert_param(IS_TIM_COUNTER_MODE(htim->Init.CounterMode));
  assert_param(IS_TIM_CLOCKDIVISION_DIV(htim->Init.ClockDivision));
  assert_param(IS_TIM_AUTORELOAD_PRELOAD(htim->Init.AutoReloadPreload));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003a28:	687b      	ldr	r3, [r7, #4]
 8003a2a:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003a2e:	b2db      	uxtb	r3, r3
 8003a30:	2b00      	cmp	r3, #0
 8003a32:	d106      	bne.n	8003a42 <HAL_TIM_PWM_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003a34:	687b      	ldr	r3, [r7, #4]
 8003a36:	2200      	movs	r2, #0
 8003a38:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->PWM_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_PWM_MspInit(htim);
 8003a3c:	6878      	ldr	r0, [r7, #4]
 8003a3e:	f000 f815 	bl	8003a6c <HAL_TIM_PWM_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003a42:	687b      	ldr	r3, [r7, #4]
 8003a44:	2202      	movs	r2, #2
 8003a46:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Init the base time for the PWM */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003a4a:	687b      	ldr	r3, [r7, #4]
 8003a4c:	681a      	ldr	r2, [r3, #0]
 8003a4e:	687b      	ldr	r3, [r7, #4]
 8003a50:	3304      	adds	r3, #4
 8003a52:	4619      	mov	r1, r3
 8003a54:	4610      	mov	r0, r2
 8003a56:	f000 fbc9 	bl	80041ec <TIM_Base_SetConfig>

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003a5a:	687b      	ldr	r3, [r7, #4]
 8003a5c:	2201      	movs	r2, #1
 8003a5e:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003a62:	2300      	movs	r3, #0
}
 8003a64:	4618      	mov	r0, r3
 8003a66:	3708      	adds	r7, #8
 8003a68:	46bd      	mov	sp, r7
 8003a6a:	bd80      	pop	{r7, pc}

08003a6c <HAL_TIM_PWM_MspInit>:
  * @brief  Initializes the TIM PWM MSP.
  * @param  htim TIM PWM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_MspInit(TIM_HandleTypeDef *htim)
{
 8003a6c:	b480      	push	{r7}
 8003a6e:	b083      	sub	sp, #12
 8003a70:	af00      	add	r7, sp, #0
 8003a72:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_MspInit could be implemented in the user file
   */
}
 8003a74:	bf00      	nop
 8003a76:	370c      	adds	r7, #12
 8003a78:	46bd      	mov	sp, r7
 8003a7a:	f85d 7b04 	ldr.w	r7, [sp], #4
 8003a7e:	4770      	bx	lr

08003a80 <HAL_TIM_PWM_Start>:
  *            @arg TIM_CHANNEL_3: TIM Channel 3 selected
  *            @arg TIM_CHANNEL_4: TIM Channel 4 selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003a80:	b580      	push	{r7, lr}
 8003a82:	b084      	sub	sp, #16
 8003a84:	af00      	add	r7, sp, #0
 8003a86:	6078      	str	r0, [r7, #4]
 8003a88:	6039      	str	r1, [r7, #0]

  /* Check the parameters */
  assert_param(IS_TIM_CCX_INSTANCE(htim->Instance, Channel));

  /* Enable the Capture compare channel */
  TIM_CCxChannelCmd(htim->Instance, Channel, TIM_CCx_ENABLE);
 8003a8a:	687b      	ldr	r3, [r7, #4]
 8003a8c:	681b      	ldr	r3, [r3, #0]
 8003a8e:	2201      	movs	r2, #1
 8003a90:	6839      	ldr	r1, [r7, #0]
 8003a92:	4618      	mov	r0, r3
 8003a94:	f000 fe50 	bl	8004738 <TIM_CCxChannelCmd>

  if (IS_TIM_BREAK_INSTANCE(htim->Instance) != RESET)
 8003a98:	687b      	ldr	r3, [r7, #4]
 8003a9a:	681b      	ldr	r3, [r3, #0]
 8003a9c:	4a10      	ldr	r2, [pc, #64]	; (8003ae0 <HAL_TIM_PWM_Start+0x60>)
 8003a9e:	4293      	cmp	r3, r2
 8003aa0:	d107      	bne.n	8003ab2 <HAL_TIM_PWM_Start+0x32>
  {
    /* Enable the main output */
    __HAL_TIM_MOE_ENABLE(htim);
 8003aa2:	687b      	ldr	r3, [r7, #4]
 8003aa4:	681b      	ldr	r3, [r3, #0]
 8003aa6:	6c5a      	ldr	r2, [r3, #68]	; 0x44
 8003aa8:	687b      	ldr	r3, [r7, #4]
 8003aaa:	681b      	ldr	r3, [r3, #0]
 8003aac:	f442 4200 	orr.w	r2, r2, #32768	; 0x8000
 8003ab0:	645a      	str	r2, [r3, #68]	; 0x44
  }

  /* Enable the Peripheral, except in trigger mode where enable is automatically done with trigger */
  tmpsmcr = htim->Instance->SMCR & TIM_SMCR_SMS;
 8003ab2:	687b      	ldr	r3, [r7, #4]
 8003ab4:	681b      	ldr	r3, [r3, #0]
 8003ab6:	689b      	ldr	r3, [r3, #8]
 8003ab8:	f003 0307 	and.w	r3, r3, #7
 8003abc:	60fb      	str	r3, [r7, #12]
  if (!IS_TIM_SLAVEMODE_TRIGGER_ENABLED(tmpsmcr))
 8003abe:	68fb      	ldr	r3, [r7, #12]
 8003ac0:	2b06      	cmp	r3, #6
 8003ac2:	d007      	beq.n	8003ad4 <HAL_TIM_PWM_Start+0x54>
  {
    __HAL_TIM_ENABLE(htim);
 8003ac4:	687b      	ldr	r3, [r7, #4]
 8003ac6:	681b      	ldr	r3, [r3, #0]
 8003ac8:	681a      	ldr	r2, [r3, #0]
 8003aca:	687b      	ldr	r3, [r7, #4]
 8003acc:	681b      	ldr	r3, [r3, #0]
 8003ace:	f042 0201 	orr.w	r2, r2, #1
 8003ad2:	601a      	str	r2, [r3, #0]
  }

  /* Return function status */
  return HAL_OK;
 8003ad4:	2300      	movs	r3, #0
}
 8003ad6:	4618      	mov	r0, r3
 8003ad8:	3710      	adds	r7, #16
 8003ada:	46bd      	mov	sp, r7
 8003adc:	bd80      	pop	{r7, pc}
 8003ade:	bf00      	nop
 8003ae0:	40010000 	.word	0x40010000

08003ae4 <HAL_TIM_Encoder_Init>:
  * @param  htim TIM Encoder Interface handle
  * @param  sConfig TIM Encoder Interface configuration structure
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Init(TIM_HandleTypeDef *htim,  TIM_Encoder_InitTypeDef *sConfig)
{
 8003ae4:	b580      	push	{r7, lr}
 8003ae6:	b086      	sub	sp, #24
 8003ae8:	af00      	add	r7, sp, #0
 8003aea:	6078      	str	r0, [r7, #4]
 8003aec:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Check the TIM handle allocation */
  if (htim == NULL)
 8003aee:	687b      	ldr	r3, [r7, #4]
 8003af0:	2b00      	cmp	r3, #0
 8003af2:	d101      	bne.n	8003af8 <HAL_TIM_Encoder_Init+0x14>
  {
    return HAL_ERROR;
 8003af4:	2301      	movs	r3, #1
 8003af6:	e083      	b.n	8003c00 <HAL_TIM_Encoder_Init+0x11c>
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC1Prescaler));
  assert_param(IS_TIM_IC_PRESCALER(sConfig->IC2Prescaler));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC1Filter));
  assert_param(IS_TIM_IC_FILTER(sConfig->IC2Filter));

  if (htim->State == HAL_TIM_STATE_RESET)
 8003af8:	687b      	ldr	r3, [r7, #4]
 8003afa:	f893 303d 	ldrb.w	r3, [r3, #61]	; 0x3d
 8003afe:	b2db      	uxtb	r3, r3
 8003b00:	2b00      	cmp	r3, #0
 8003b02:	d106      	bne.n	8003b12 <HAL_TIM_Encoder_Init+0x2e>
  {
    /* Allocate lock resource and initialize it */
    htim->Lock = HAL_UNLOCKED;
 8003b04:	687b      	ldr	r3, [r7, #4]
 8003b06:	2200      	movs	r2, #0
 8003b08:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c
    }
    /* Init the low level hardware : GPIO, CLOCK, NVIC */
    htim->Encoder_MspInitCallback(htim);
#else
    /* Init the low level hardware : GPIO, CLOCK, NVIC and DMA */
    HAL_TIM_Encoder_MspInit(htim);
 8003b0c:	6878      	ldr	r0, [r7, #4]
 8003b0e:	f7fe fda3 	bl	8002658 <HAL_TIM_Encoder_MspInit>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
  }

  /* Set the TIM state */
  htim->State = HAL_TIM_STATE_BUSY;
 8003b12:	687b      	ldr	r3, [r7, #4]
 8003b14:	2202      	movs	r2, #2
 8003b16:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Reset the SMS and ECE bits */
  htim->Instance->SMCR &= ~(TIM_SMCR_SMS | TIM_SMCR_ECE);
 8003b1a:	687b      	ldr	r3, [r7, #4]
 8003b1c:	681b      	ldr	r3, [r3, #0]
 8003b1e:	689b      	ldr	r3, [r3, #8]
 8003b20:	687a      	ldr	r2, [r7, #4]
 8003b22:	6812      	ldr	r2, [r2, #0]
 8003b24:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 8003b28:	f023 0307 	bic.w	r3, r3, #7
 8003b2c:	6093      	str	r3, [r2, #8]

  /* Configure the Time base in the Encoder Mode */
  TIM_Base_SetConfig(htim->Instance, &htim->Init);
 8003b2e:	687b      	ldr	r3, [r7, #4]
 8003b30:	681a      	ldr	r2, [r3, #0]
 8003b32:	687b      	ldr	r3, [r7, #4]
 8003b34:	3304      	adds	r3, #4
 8003b36:	4619      	mov	r1, r3
 8003b38:	4610      	mov	r0, r2
 8003b3a:	f000 fb57 	bl	80041ec <TIM_Base_SetConfig>

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 8003b3e:	687b      	ldr	r3, [r7, #4]
 8003b40:	681b      	ldr	r3, [r3, #0]
 8003b42:	689b      	ldr	r3, [r3, #8]
 8003b44:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR1 register value */
  tmpccmr1 = htim->Instance->CCMR1;
 8003b46:	687b      	ldr	r3, [r7, #4]
 8003b48:	681b      	ldr	r3, [r3, #0]
 8003b4a:	699b      	ldr	r3, [r3, #24]
 8003b4c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCER register value */
  tmpccer = htim->Instance->CCER;
 8003b4e:	687b      	ldr	r3, [r7, #4]
 8003b50:	681b      	ldr	r3, [r3, #0]
 8003b52:	6a1b      	ldr	r3, [r3, #32]
 8003b54:	60fb      	str	r3, [r7, #12]

  /* Set the encoder Mode */
  tmpsmcr |= sConfig->EncoderMode;
 8003b56:	683b      	ldr	r3, [r7, #0]
 8003b58:	681b      	ldr	r3, [r3, #0]
 8003b5a:	697a      	ldr	r2, [r7, #20]
 8003b5c:	4313      	orrs	r3, r2
 8003b5e:	617b      	str	r3, [r7, #20]

  /* Select the Capture Compare 1 and the Capture Compare 2 as input */
  tmpccmr1 &= ~(TIM_CCMR1_CC1S | TIM_CCMR1_CC2S);
 8003b60:	693b      	ldr	r3, [r7, #16]
 8003b62:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 8003b66:	f023 0303 	bic.w	r3, r3, #3
 8003b6a:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Selection | (sConfig->IC2Selection << 8U));
 8003b6c:	683b      	ldr	r3, [r7, #0]
 8003b6e:	689a      	ldr	r2, [r3, #8]
 8003b70:	683b      	ldr	r3, [r7, #0]
 8003b72:	699b      	ldr	r3, [r3, #24]
 8003b74:	021b      	lsls	r3, r3, #8
 8003b76:	4313      	orrs	r3, r2
 8003b78:	693a      	ldr	r2, [r7, #16]
 8003b7a:	4313      	orrs	r3, r2
 8003b7c:	613b      	str	r3, [r7, #16]

  /* Set the Capture Compare 1 and the Capture Compare 2 prescalers and filters */
  tmpccmr1 &= ~(TIM_CCMR1_IC1PSC | TIM_CCMR1_IC2PSC);
 8003b7e:	693b      	ldr	r3, [r7, #16]
 8003b80:	f423 6340 	bic.w	r3, r3, #3072	; 0xc00
 8003b84:	f023 030c 	bic.w	r3, r3, #12
 8003b88:	613b      	str	r3, [r7, #16]
  tmpccmr1 &= ~(TIM_CCMR1_IC1F | TIM_CCMR1_IC2F);
 8003b8a:	693b      	ldr	r3, [r7, #16]
 8003b8c:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 8003b90:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 8003b94:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= sConfig->IC1Prescaler | (sConfig->IC2Prescaler << 8U);
 8003b96:	683b      	ldr	r3, [r7, #0]
 8003b98:	68da      	ldr	r2, [r3, #12]
 8003b9a:	683b      	ldr	r3, [r7, #0]
 8003b9c:	69db      	ldr	r3, [r3, #28]
 8003b9e:	021b      	lsls	r3, r3, #8
 8003ba0:	4313      	orrs	r3, r2
 8003ba2:	693a      	ldr	r2, [r7, #16]
 8003ba4:	4313      	orrs	r3, r2
 8003ba6:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (sConfig->IC1Filter << 4U) | (sConfig->IC2Filter << 12U);
 8003ba8:	683b      	ldr	r3, [r7, #0]
 8003baa:	691b      	ldr	r3, [r3, #16]
 8003bac:	011a      	lsls	r2, r3, #4
 8003bae:	683b      	ldr	r3, [r7, #0]
 8003bb0:	6a1b      	ldr	r3, [r3, #32]
 8003bb2:	031b      	lsls	r3, r3, #12
 8003bb4:	4313      	orrs	r3, r2
 8003bb6:	693a      	ldr	r2, [r7, #16]
 8003bb8:	4313      	orrs	r3, r2
 8003bba:	613b      	str	r3, [r7, #16]

  /* Set the TI1 and the TI2 Polarities */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC2P);
 8003bbc:	68fb      	ldr	r3, [r7, #12]
 8003bbe:	f023 0322 	bic.w	r3, r3, #34	; 0x22
 8003bc2:	60fb      	str	r3, [r7, #12]
  tmpccer &= ~(TIM_CCER_CC1NP | TIM_CCER_CC2NP);
 8003bc4:	68fb      	ldr	r3, [r7, #12]
 8003bc6:	f023 0388 	bic.w	r3, r3, #136	; 0x88
 8003bca:	60fb      	str	r3, [r7, #12]
  tmpccer |= sConfig->IC1Polarity | (sConfig->IC2Polarity << 4U);
 8003bcc:	683b      	ldr	r3, [r7, #0]
 8003bce:	685a      	ldr	r2, [r3, #4]
 8003bd0:	683b      	ldr	r3, [r7, #0]
 8003bd2:	695b      	ldr	r3, [r3, #20]
 8003bd4:	011b      	lsls	r3, r3, #4
 8003bd6:	4313      	orrs	r3, r2
 8003bd8:	68fa      	ldr	r2, [r7, #12]
 8003bda:	4313      	orrs	r3, r2
 8003bdc:	60fb      	str	r3, [r7, #12]

  /* Write to TIMx SMCR */
  htim->Instance->SMCR = tmpsmcr;
 8003bde:	687b      	ldr	r3, [r7, #4]
 8003be0:	681b      	ldr	r3, [r3, #0]
 8003be2:	697a      	ldr	r2, [r7, #20]
 8003be4:	609a      	str	r2, [r3, #8]

  /* Write to TIMx CCMR1 */
  htim->Instance->CCMR1 = tmpccmr1;
 8003be6:	687b      	ldr	r3, [r7, #4]
 8003be8:	681b      	ldr	r3, [r3, #0]
 8003bea:	693a      	ldr	r2, [r7, #16]
 8003bec:	619a      	str	r2, [r3, #24]

  /* Write to TIMx CCER */
  htim->Instance->CCER = tmpccer;
 8003bee:	687b      	ldr	r3, [r7, #4]
 8003bf0:	681b      	ldr	r3, [r3, #0]
 8003bf2:	68fa      	ldr	r2, [r7, #12]
 8003bf4:	621a      	str	r2, [r3, #32]

  /* Initialize the TIM state*/
  htim->State = HAL_TIM_STATE_READY;
 8003bf6:	687b      	ldr	r3, [r7, #4]
 8003bf8:	2201      	movs	r2, #1
 8003bfa:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  return HAL_OK;
 8003bfe:	2300      	movs	r3, #0
}
 8003c00:	4618      	mov	r0, r3
 8003c02:	3718      	adds	r7, #24
 8003c04:	46bd      	mov	sp, r7
 8003c06:	bd80      	pop	{r7, pc}

08003c08 <HAL_TIM_Encoder_Start>:
  *            @arg TIM_CHANNEL_2: TIM Channel 2 selected
  *            @arg TIM_CHANNEL_ALL: TIM Channel 1 and TIM Channel 2 are selected
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_Encoder_Start(TIM_HandleTypeDef *htim, uint32_t Channel)
{
 8003c08:	b580      	push	{r7, lr}
 8003c0a:	b082      	sub	sp, #8
 8003c0c:	af00      	add	r7, sp, #0
 8003c0e:	6078      	str	r0, [r7, #4]
 8003c10:	6039      	str	r1, [r7, #0]
  /* Check the parameters */
  assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

  /* Enable the encoder interface channels */
  switch (Channel)
 8003c12:	683b      	ldr	r3, [r7, #0]
 8003c14:	2b00      	cmp	r3, #0
 8003c16:	d003      	beq.n	8003c20 <HAL_TIM_Encoder_Start+0x18>
 8003c18:	683b      	ldr	r3, [r7, #0]
 8003c1a:	2b04      	cmp	r3, #4
 8003c1c:	d008      	beq.n	8003c30 <HAL_TIM_Encoder_Start+0x28>
 8003c1e:	e00f      	b.n	8003c40 <HAL_TIM_Encoder_Start+0x38>
  {
    case TIM_CHANNEL_1:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c20:	687b      	ldr	r3, [r7, #4]
 8003c22:	681b      	ldr	r3, [r3, #0]
 8003c24:	2201      	movs	r2, #1
 8003c26:	2100      	movs	r1, #0
 8003c28:	4618      	mov	r0, r3
 8003c2a:	f000 fd85 	bl	8004738 <TIM_CCxChannelCmd>
      break;
 8003c2e:	e016      	b.n	8003c5e <HAL_TIM_Encoder_Start+0x56>
    }

    case TIM_CHANNEL_2:
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c30:	687b      	ldr	r3, [r7, #4]
 8003c32:	681b      	ldr	r3, [r3, #0]
 8003c34:	2201      	movs	r2, #1
 8003c36:	2104      	movs	r1, #4
 8003c38:	4618      	mov	r0, r3
 8003c3a:	f000 fd7d 	bl	8004738 <TIM_CCxChannelCmd>
      break;
 8003c3e:	e00e      	b.n	8003c5e <HAL_TIM_Encoder_Start+0x56>
    }

    default :
    {
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_1, TIM_CCx_ENABLE);
 8003c40:	687b      	ldr	r3, [r7, #4]
 8003c42:	681b      	ldr	r3, [r3, #0]
 8003c44:	2201      	movs	r2, #1
 8003c46:	2100      	movs	r1, #0
 8003c48:	4618      	mov	r0, r3
 8003c4a:	f000 fd75 	bl	8004738 <TIM_CCxChannelCmd>
      TIM_CCxChannelCmd(htim->Instance, TIM_CHANNEL_2, TIM_CCx_ENABLE);
 8003c4e:	687b      	ldr	r3, [r7, #4]
 8003c50:	681b      	ldr	r3, [r3, #0]
 8003c52:	2201      	movs	r2, #1
 8003c54:	2104      	movs	r1, #4
 8003c56:	4618      	mov	r0, r3
 8003c58:	f000 fd6e 	bl	8004738 <TIM_CCxChannelCmd>
      break;
 8003c5c:	bf00      	nop
    }
  }
  /* Enable the Peripheral */
  __HAL_TIM_ENABLE(htim);
 8003c5e:	687b      	ldr	r3, [r7, #4]
 8003c60:	681b      	ldr	r3, [r3, #0]
 8003c62:	681a      	ldr	r2, [r3, #0]
 8003c64:	687b      	ldr	r3, [r7, #4]
 8003c66:	681b      	ldr	r3, [r3, #0]
 8003c68:	f042 0201 	orr.w	r2, r2, #1
 8003c6c:	601a      	str	r2, [r3, #0]

  /* Return function status */
  return HAL_OK;
 8003c6e:	2300      	movs	r3, #0
}
 8003c70:	4618      	mov	r0, r3
 8003c72:	3708      	adds	r7, #8
 8003c74:	46bd      	mov	sp, r7
 8003c76:	bd80      	pop	{r7, pc}

08003c78 <HAL_TIM_IRQHandler>:
  * @brief  This function handles TIM interrupts requests.
  * @param  htim TIM  handle
  * @retval None
  */
void HAL_TIM_IRQHandler(TIM_HandleTypeDef *htim)
{
 8003c78:	b580      	push	{r7, lr}
 8003c7a:	b082      	sub	sp, #8
 8003c7c:	af00      	add	r7, sp, #0
 8003c7e:	6078      	str	r0, [r7, #4]
  /* Capture compare 1 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC1) != RESET)
 8003c80:	687b      	ldr	r3, [r7, #4]
 8003c82:	681b      	ldr	r3, [r3, #0]
 8003c84:	691b      	ldr	r3, [r3, #16]
 8003c86:	f003 0302 	and.w	r3, r3, #2
 8003c8a:	2b02      	cmp	r3, #2
 8003c8c:	d122      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x5c>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC1) != RESET)
 8003c8e:	687b      	ldr	r3, [r7, #4]
 8003c90:	681b      	ldr	r3, [r3, #0]
 8003c92:	68db      	ldr	r3, [r3, #12]
 8003c94:	f003 0302 	and.w	r3, r3, #2
 8003c98:	2b02      	cmp	r3, #2
 8003c9a:	d11b      	bne.n	8003cd4 <HAL_TIM_IRQHandler+0x5c>
    {
      {
        __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC1);
 8003c9c:	687b      	ldr	r3, [r7, #4]
 8003c9e:	681b      	ldr	r3, [r3, #0]
 8003ca0:	f06f 0202 	mvn.w	r2, #2
 8003ca4:	611a      	str	r2, [r3, #16]
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_1;
 8003ca6:	687b      	ldr	r3, [r7, #4]
 8003ca8:	2201      	movs	r2, #1
 8003caa:	771a      	strb	r2, [r3, #28]

        /* Input capture event */
        if ((htim->Instance->CCMR1 & TIM_CCMR1_CC1S) != 0x00U)
 8003cac:	687b      	ldr	r3, [r7, #4]
 8003cae:	681b      	ldr	r3, [r3, #0]
 8003cb0:	699b      	ldr	r3, [r3, #24]
 8003cb2:	f003 0303 	and.w	r3, r3, #3
 8003cb6:	2b00      	cmp	r3, #0
 8003cb8:	d003      	beq.n	8003cc2 <HAL_TIM_IRQHandler+0x4a>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->IC_CaptureCallback(htim);
#else
          HAL_TIM_IC_CaptureCallback(htim);
 8003cba:	6878      	ldr	r0, [r7, #4]
 8003cbc:	f000 fa78 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003cc0:	e005      	b.n	8003cce <HAL_TIM_IRQHandler+0x56>
        {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
          htim->OC_DelayElapsedCallback(htim);
          htim->PWM_PulseFinishedCallback(htim);
#else
          HAL_TIM_OC_DelayElapsedCallback(htim);
 8003cc2:	6878      	ldr	r0, [r7, #4]
 8003cc4:	f000 fa6a 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
          HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003cc8:	6878      	ldr	r0, [r7, #4]
 8003cca:	f000 fa7b 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
        }
        htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003cce:	687b      	ldr	r3, [r7, #4]
 8003cd0:	2200      	movs	r2, #0
 8003cd2:	771a      	strb	r2, [r3, #28]
      }
    }
  }
  /* Capture compare 2 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC2) != RESET)
 8003cd4:	687b      	ldr	r3, [r7, #4]
 8003cd6:	681b      	ldr	r3, [r3, #0]
 8003cd8:	691b      	ldr	r3, [r3, #16]
 8003cda:	f003 0304 	and.w	r3, r3, #4
 8003cde:	2b04      	cmp	r3, #4
 8003ce0:	d122      	bne.n	8003d28 <HAL_TIM_IRQHandler+0xb0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC2) != RESET)
 8003ce2:	687b      	ldr	r3, [r7, #4]
 8003ce4:	681b      	ldr	r3, [r3, #0]
 8003ce6:	68db      	ldr	r3, [r3, #12]
 8003ce8:	f003 0304 	and.w	r3, r3, #4
 8003cec:	2b04      	cmp	r3, #4
 8003cee:	d11b      	bne.n	8003d28 <HAL_TIM_IRQHandler+0xb0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC2);
 8003cf0:	687b      	ldr	r3, [r7, #4]
 8003cf2:	681b      	ldr	r3, [r3, #0]
 8003cf4:	f06f 0204 	mvn.w	r2, #4
 8003cf8:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_2;
 8003cfa:	687b      	ldr	r3, [r7, #4]
 8003cfc:	2202      	movs	r2, #2
 8003cfe:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR1 & TIM_CCMR1_CC2S) != 0x00U)
 8003d00:	687b      	ldr	r3, [r7, #4]
 8003d02:	681b      	ldr	r3, [r3, #0]
 8003d04:	699b      	ldr	r3, [r3, #24]
 8003d06:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003d0a:	2b00      	cmp	r3, #0
 8003d0c:	d003      	beq.n	8003d16 <HAL_TIM_IRQHandler+0x9e>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d0e:	6878      	ldr	r0, [r7, #4]
 8003d10:	f000 fa4e 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003d14:	e005      	b.n	8003d22 <HAL_TIM_IRQHandler+0xaa>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d16:	6878      	ldr	r0, [r7, #4]
 8003d18:	f000 fa40 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d1c:	6878      	ldr	r0, [r7, #4]
 8003d1e:	f000 fa51 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d22:	687b      	ldr	r3, [r7, #4]
 8003d24:	2200      	movs	r2, #0
 8003d26:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 3 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC3) != RESET)
 8003d28:	687b      	ldr	r3, [r7, #4]
 8003d2a:	681b      	ldr	r3, [r3, #0]
 8003d2c:	691b      	ldr	r3, [r3, #16]
 8003d2e:	f003 0308 	and.w	r3, r3, #8
 8003d32:	2b08      	cmp	r3, #8
 8003d34:	d122      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x104>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC3) != RESET)
 8003d36:	687b      	ldr	r3, [r7, #4]
 8003d38:	681b      	ldr	r3, [r3, #0]
 8003d3a:	68db      	ldr	r3, [r3, #12]
 8003d3c:	f003 0308 	and.w	r3, r3, #8
 8003d40:	2b08      	cmp	r3, #8
 8003d42:	d11b      	bne.n	8003d7c <HAL_TIM_IRQHandler+0x104>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC3);
 8003d44:	687b      	ldr	r3, [r7, #4]
 8003d46:	681b      	ldr	r3, [r3, #0]
 8003d48:	f06f 0208 	mvn.w	r2, #8
 8003d4c:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_3;
 8003d4e:	687b      	ldr	r3, [r7, #4]
 8003d50:	2204      	movs	r2, #4
 8003d52:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC3S) != 0x00U)
 8003d54:	687b      	ldr	r3, [r7, #4]
 8003d56:	681b      	ldr	r3, [r3, #0]
 8003d58:	69db      	ldr	r3, [r3, #28]
 8003d5a:	f003 0303 	and.w	r3, r3, #3
 8003d5e:	2b00      	cmp	r3, #0
 8003d60:	d003      	beq.n	8003d6a <HAL_TIM_IRQHandler+0xf2>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003d62:	6878      	ldr	r0, [r7, #4]
 8003d64:	f000 fa24 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003d68:	e005      	b.n	8003d76 <HAL_TIM_IRQHandler+0xfe>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003d6a:	6878      	ldr	r0, [r7, #4]
 8003d6c:	f000 fa16 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003d70:	6878      	ldr	r0, [r7, #4]
 8003d72:	f000 fa27 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003d76:	687b      	ldr	r3, [r7, #4]
 8003d78:	2200      	movs	r2, #0
 8003d7a:	771a      	strb	r2, [r3, #28]
    }
  }
  /* Capture compare 4 event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_CC4) != RESET)
 8003d7c:	687b      	ldr	r3, [r7, #4]
 8003d7e:	681b      	ldr	r3, [r3, #0]
 8003d80:	691b      	ldr	r3, [r3, #16]
 8003d82:	f003 0310 	and.w	r3, r3, #16
 8003d86:	2b10      	cmp	r3, #16
 8003d88:	d122      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x158>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_CC4) != RESET)
 8003d8a:	687b      	ldr	r3, [r7, #4]
 8003d8c:	681b      	ldr	r3, [r3, #0]
 8003d8e:	68db      	ldr	r3, [r3, #12]
 8003d90:	f003 0310 	and.w	r3, r3, #16
 8003d94:	2b10      	cmp	r3, #16
 8003d96:	d11b      	bne.n	8003dd0 <HAL_TIM_IRQHandler+0x158>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_CC4);
 8003d98:	687b      	ldr	r3, [r7, #4]
 8003d9a:	681b      	ldr	r3, [r3, #0]
 8003d9c:	f06f 0210 	mvn.w	r2, #16
 8003da0:	611a      	str	r2, [r3, #16]
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_4;
 8003da2:	687b      	ldr	r3, [r7, #4]
 8003da4:	2208      	movs	r2, #8
 8003da6:	771a      	strb	r2, [r3, #28]
      /* Input capture event */
      if ((htim->Instance->CCMR2 & TIM_CCMR2_CC4S) != 0x00U)
 8003da8:	687b      	ldr	r3, [r7, #4]
 8003daa:	681b      	ldr	r3, [r3, #0]
 8003dac:	69db      	ldr	r3, [r3, #28]
 8003dae:	f403 7340 	and.w	r3, r3, #768	; 0x300
 8003db2:	2b00      	cmp	r3, #0
 8003db4:	d003      	beq.n	8003dbe <HAL_TIM_IRQHandler+0x146>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->IC_CaptureCallback(htim);
#else
        HAL_TIM_IC_CaptureCallback(htim);
 8003db6:	6878      	ldr	r0, [r7, #4]
 8003db8:	f000 f9fa 	bl	80041b0 <HAL_TIM_IC_CaptureCallback>
 8003dbc:	e005      	b.n	8003dca <HAL_TIM_IRQHandler+0x152>
      {
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
        htim->OC_DelayElapsedCallback(htim);
        htim->PWM_PulseFinishedCallback(htim);
#else
        HAL_TIM_OC_DelayElapsedCallback(htim);
 8003dbe:	6878      	ldr	r0, [r7, #4]
 8003dc0:	f000 f9ec 	bl	800419c <HAL_TIM_OC_DelayElapsedCallback>
        HAL_TIM_PWM_PulseFinishedCallback(htim);
 8003dc4:	6878      	ldr	r0, [r7, #4]
 8003dc6:	f000 f9fd 	bl	80041c4 <HAL_TIM_PWM_PulseFinishedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
      }
      htim->Channel = HAL_TIM_ACTIVE_CHANNEL_CLEARED;
 8003dca:	687b      	ldr	r3, [r7, #4]
 8003dcc:	2200      	movs	r2, #0
 8003dce:	771a      	strb	r2, [r3, #28]
    }
  }
  /* TIM Update event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_UPDATE) != RESET)
 8003dd0:	687b      	ldr	r3, [r7, #4]
 8003dd2:	681b      	ldr	r3, [r3, #0]
 8003dd4:	691b      	ldr	r3, [r3, #16]
 8003dd6:	f003 0301 	and.w	r3, r3, #1
 8003dda:	2b01      	cmp	r3, #1
 8003ddc:	d10e      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x184>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_UPDATE) != RESET)
 8003dde:	687b      	ldr	r3, [r7, #4]
 8003de0:	681b      	ldr	r3, [r3, #0]
 8003de2:	68db      	ldr	r3, [r3, #12]
 8003de4:	f003 0301 	and.w	r3, r3, #1
 8003de8:	2b01      	cmp	r3, #1
 8003dea:	d107      	bne.n	8003dfc <HAL_TIM_IRQHandler+0x184>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_UPDATE);
 8003dec:	687b      	ldr	r3, [r7, #4]
 8003dee:	681b      	ldr	r3, [r3, #0]
 8003df0:	f06f 0201 	mvn.w	r2, #1
 8003df4:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->PeriodElapsedCallback(htim);
#else
      HAL_TIM_PeriodElapsedCallback(htim);
 8003df6:	6878      	ldr	r0, [r7, #4]
 8003df8:	f7fe fbca 	bl	8002590 <HAL_TIM_PeriodElapsedCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Break input event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_BREAK) != RESET)
 8003dfc:	687b      	ldr	r3, [r7, #4]
 8003dfe:	681b      	ldr	r3, [r3, #0]
 8003e00:	691b      	ldr	r3, [r3, #16]
 8003e02:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e06:	2b80      	cmp	r3, #128	; 0x80
 8003e08:	d10e      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x1b0>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_BREAK) != RESET)
 8003e0a:	687b      	ldr	r3, [r7, #4]
 8003e0c:	681b      	ldr	r3, [r3, #0]
 8003e0e:	68db      	ldr	r3, [r3, #12]
 8003e10:	f003 0380 	and.w	r3, r3, #128	; 0x80
 8003e14:	2b80      	cmp	r3, #128	; 0x80
 8003e16:	d107      	bne.n	8003e28 <HAL_TIM_IRQHandler+0x1b0>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_BREAK);
 8003e18:	687b      	ldr	r3, [r7, #4]
 8003e1a:	681b      	ldr	r3, [r3, #0]
 8003e1c:	f06f 0280 	mvn.w	r2, #128	; 0x80
 8003e20:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->BreakCallback(htim);
#else
      HAL_TIMEx_BreakCallback(htim);
 8003e22:	6878      	ldr	r0, [r7, #4]
 8003e24:	f000 fd26 	bl	8004874 <HAL_TIMEx_BreakCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM Trigger detection event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_TRIGGER) != RESET)
 8003e28:	687b      	ldr	r3, [r7, #4]
 8003e2a:	681b      	ldr	r3, [r3, #0]
 8003e2c:	691b      	ldr	r3, [r3, #16]
 8003e2e:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e32:	2b40      	cmp	r3, #64	; 0x40
 8003e34:	d10e      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x1dc>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_TRIGGER) != RESET)
 8003e36:	687b      	ldr	r3, [r7, #4]
 8003e38:	681b      	ldr	r3, [r3, #0]
 8003e3a:	68db      	ldr	r3, [r3, #12]
 8003e3c:	f003 0340 	and.w	r3, r3, #64	; 0x40
 8003e40:	2b40      	cmp	r3, #64	; 0x40
 8003e42:	d107      	bne.n	8003e54 <HAL_TIM_IRQHandler+0x1dc>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_IT_TRIGGER);
 8003e44:	687b      	ldr	r3, [r7, #4]
 8003e46:	681b      	ldr	r3, [r3, #0]
 8003e48:	f06f 0240 	mvn.w	r2, #64	; 0x40
 8003e4c:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->TriggerCallback(htim);
#else
      HAL_TIM_TriggerCallback(htim);
 8003e4e:	6878      	ldr	r0, [r7, #4]
 8003e50:	f000 f9c2 	bl	80041d8 <HAL_TIM_TriggerCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
  /* TIM commutation event */
  if (__HAL_TIM_GET_FLAG(htim, TIM_FLAG_COM) != RESET)
 8003e54:	687b      	ldr	r3, [r7, #4]
 8003e56:	681b      	ldr	r3, [r3, #0]
 8003e58:	691b      	ldr	r3, [r3, #16]
 8003e5a:	f003 0320 	and.w	r3, r3, #32
 8003e5e:	2b20      	cmp	r3, #32
 8003e60:	d10e      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x208>
  {
    if (__HAL_TIM_GET_IT_SOURCE(htim, TIM_IT_COM) != RESET)
 8003e62:	687b      	ldr	r3, [r7, #4]
 8003e64:	681b      	ldr	r3, [r3, #0]
 8003e66:	68db      	ldr	r3, [r3, #12]
 8003e68:	f003 0320 	and.w	r3, r3, #32
 8003e6c:	2b20      	cmp	r3, #32
 8003e6e:	d107      	bne.n	8003e80 <HAL_TIM_IRQHandler+0x208>
    {
      __HAL_TIM_CLEAR_IT(htim, TIM_FLAG_COM);
 8003e70:	687b      	ldr	r3, [r7, #4]
 8003e72:	681b      	ldr	r3, [r3, #0]
 8003e74:	f06f 0220 	mvn.w	r2, #32
 8003e78:	611a      	str	r2, [r3, #16]
#if (USE_HAL_TIM_REGISTER_CALLBACKS == 1)
      htim->CommutationCallback(htim);
#else
      HAL_TIMEx_CommutCallback(htim);
 8003e7a:	6878      	ldr	r0, [r7, #4]
 8003e7c:	f000 fcf0 	bl	8004860 <HAL_TIMEx_CommutCallback>
#endif /* USE_HAL_TIM_REGISTER_CALLBACKS */
    }
  }
}
 8003e80:	bf00      	nop
 8003e82:	3708      	adds	r7, #8
 8003e84:	46bd      	mov	sp, r7
 8003e86:	bd80      	pop	{r7, pc}

08003e88 <HAL_TIM_PWM_ConfigChannel>:
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_PWM_ConfigChannel(TIM_HandleTypeDef *htim,
                                            TIM_OC_InitTypeDef *sConfig,
                                            uint32_t Channel)
{
 8003e88:	b580      	push	{r7, lr}
 8003e8a:	b084      	sub	sp, #16
 8003e8c:	af00      	add	r7, sp, #0
 8003e8e:	60f8      	str	r0, [r7, #12]
 8003e90:	60b9      	str	r1, [r7, #8]
 8003e92:	607a      	str	r2, [r7, #4]
  assert_param(IS_TIM_PWM_MODE(sConfig->OCMode));
  assert_param(IS_TIM_OC_POLARITY(sConfig->OCPolarity));
  assert_param(IS_TIM_FAST_STATE(sConfig->OCFastMode));

  /* Process Locked */
  __HAL_LOCK(htim);
 8003e94:	68fb      	ldr	r3, [r7, #12]
 8003e96:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8003e9a:	2b01      	cmp	r3, #1
 8003e9c:	d101      	bne.n	8003ea2 <HAL_TIM_PWM_ConfigChannel+0x1a>
 8003e9e:	2302      	movs	r3, #2
 8003ea0:	e0b4      	b.n	800400c <HAL_TIM_PWM_ConfigChannel+0x184>
 8003ea2:	68fb      	ldr	r3, [r7, #12]
 8003ea4:	2201      	movs	r2, #1
 8003ea6:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8003eaa:	68fb      	ldr	r3, [r7, #12]
 8003eac:	2202      	movs	r2, #2
 8003eae:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d
 8003eb2:	687b      	ldr	r3, [r7, #4]
 8003eb4:	2b0c      	cmp	r3, #12
 8003eb6:	f200 809f 	bhi.w	8003ff8 <HAL_TIM_PWM_ConfigChannel+0x170>
 8003eba:	a201      	add	r2, pc, #4	; (adr r2, 8003ec0 <HAL_TIM_PWM_ConfigChannel+0x38>)
 8003ebc:	f852 f023 	ldr.w	pc, [r2, r3, lsl #2]
 8003ec0:	08003ef5 	.word	0x08003ef5
 8003ec4:	08003ff9 	.word	0x08003ff9
 8003ec8:	08003ff9 	.word	0x08003ff9
 8003ecc:	08003ff9 	.word	0x08003ff9
 8003ed0:	08003f35 	.word	0x08003f35
 8003ed4:	08003ff9 	.word	0x08003ff9
 8003ed8:	08003ff9 	.word	0x08003ff9
 8003edc:	08003ff9 	.word	0x08003ff9
 8003ee0:	08003f77 	.word	0x08003f77
 8003ee4:	08003ff9 	.word	0x08003ff9
 8003ee8:	08003ff9 	.word	0x08003ff9
 8003eec:	08003ff9 	.word	0x08003ff9
 8003ef0:	08003fb7 	.word	0x08003fb7
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC1_INSTANCE(htim->Instance));

      /* Configure the Channel 1 in PWM mode */
      TIM_OC1_SetConfig(htim->Instance, sConfig);
 8003ef4:	68fb      	ldr	r3, [r7, #12]
 8003ef6:	681b      	ldr	r3, [r3, #0]
 8003ef8:	68b9      	ldr	r1, [r7, #8]
 8003efa:	4618      	mov	r0, r3
 8003efc:	f000 f9f6 	bl	80042ec <TIM_OC1_SetConfig>

      /* Set the Preload enable bit for channel1 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC1PE;
 8003f00:	68fb      	ldr	r3, [r7, #12]
 8003f02:	681b      	ldr	r3, [r3, #0]
 8003f04:	699a      	ldr	r2, [r3, #24]
 8003f06:	68fb      	ldr	r3, [r7, #12]
 8003f08:	681b      	ldr	r3, [r3, #0]
 8003f0a:	f042 0208 	orr.w	r2, r2, #8
 8003f0e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC1FE;
 8003f10:	68fb      	ldr	r3, [r7, #12]
 8003f12:	681b      	ldr	r3, [r3, #0]
 8003f14:	699a      	ldr	r2, [r3, #24]
 8003f16:	68fb      	ldr	r3, [r7, #12]
 8003f18:	681b      	ldr	r3, [r3, #0]
 8003f1a:	f022 0204 	bic.w	r2, r2, #4
 8003f1e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode;
 8003f20:	68fb      	ldr	r3, [r7, #12]
 8003f22:	681b      	ldr	r3, [r3, #0]
 8003f24:	6999      	ldr	r1, [r3, #24]
 8003f26:	68bb      	ldr	r3, [r7, #8]
 8003f28:	691a      	ldr	r2, [r3, #16]
 8003f2a:	68fb      	ldr	r3, [r7, #12]
 8003f2c:	681b      	ldr	r3, [r3, #0]
 8003f2e:	430a      	orrs	r2, r1
 8003f30:	619a      	str	r2, [r3, #24]
      break;
 8003f32:	e062      	b.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC2_INSTANCE(htim->Instance));

      /* Configure the Channel 2 in PWM mode */
      TIM_OC2_SetConfig(htim->Instance, sConfig);
 8003f34:	68fb      	ldr	r3, [r7, #12]
 8003f36:	681b      	ldr	r3, [r3, #0]
 8003f38:	68b9      	ldr	r1, [r7, #8]
 8003f3a:	4618      	mov	r0, r3
 8003f3c:	f000 fa3c 	bl	80043b8 <TIM_OC2_SetConfig>

      /* Set the Preload enable bit for channel2 */
      htim->Instance->CCMR1 |= TIM_CCMR1_OC2PE;
 8003f40:	68fb      	ldr	r3, [r7, #12]
 8003f42:	681b      	ldr	r3, [r3, #0]
 8003f44:	699a      	ldr	r2, [r3, #24]
 8003f46:	68fb      	ldr	r3, [r7, #12]
 8003f48:	681b      	ldr	r3, [r3, #0]
 8003f4a:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003f4e:	619a      	str	r2, [r3, #24]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR1 &= ~TIM_CCMR1_OC2FE;
 8003f50:	68fb      	ldr	r3, [r7, #12]
 8003f52:	681b      	ldr	r3, [r3, #0]
 8003f54:	699a      	ldr	r2, [r3, #24]
 8003f56:	68fb      	ldr	r3, [r7, #12]
 8003f58:	681b      	ldr	r3, [r3, #0]
 8003f5a:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003f5e:	619a      	str	r2, [r3, #24]
      htim->Instance->CCMR1 |= sConfig->OCFastMode << 8U;
 8003f60:	68fb      	ldr	r3, [r7, #12]
 8003f62:	681b      	ldr	r3, [r3, #0]
 8003f64:	6999      	ldr	r1, [r3, #24]
 8003f66:	68bb      	ldr	r3, [r7, #8]
 8003f68:	691b      	ldr	r3, [r3, #16]
 8003f6a:	021a      	lsls	r2, r3, #8
 8003f6c:	68fb      	ldr	r3, [r7, #12]
 8003f6e:	681b      	ldr	r3, [r3, #0]
 8003f70:	430a      	orrs	r2, r1
 8003f72:	619a      	str	r2, [r3, #24]
      break;
 8003f74:	e041      	b.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC3_INSTANCE(htim->Instance));

      /* Configure the Channel 3 in PWM mode */
      TIM_OC3_SetConfig(htim->Instance, sConfig);
 8003f76:	68fb      	ldr	r3, [r7, #12]
 8003f78:	681b      	ldr	r3, [r3, #0]
 8003f7a:	68b9      	ldr	r1, [r7, #8]
 8003f7c:	4618      	mov	r0, r3
 8003f7e:	f000 fa87 	bl	8004490 <TIM_OC3_SetConfig>

      /* Set the Preload enable bit for channel3 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC3PE;
 8003f82:	68fb      	ldr	r3, [r7, #12]
 8003f84:	681b      	ldr	r3, [r3, #0]
 8003f86:	69da      	ldr	r2, [r3, #28]
 8003f88:	68fb      	ldr	r3, [r7, #12]
 8003f8a:	681b      	ldr	r3, [r3, #0]
 8003f8c:	f042 0208 	orr.w	r2, r2, #8
 8003f90:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC3FE;
 8003f92:	68fb      	ldr	r3, [r7, #12]
 8003f94:	681b      	ldr	r3, [r3, #0]
 8003f96:	69da      	ldr	r2, [r3, #28]
 8003f98:	68fb      	ldr	r3, [r7, #12]
 8003f9a:	681b      	ldr	r3, [r3, #0]
 8003f9c:	f022 0204 	bic.w	r2, r2, #4
 8003fa0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode;
 8003fa2:	68fb      	ldr	r3, [r7, #12]
 8003fa4:	681b      	ldr	r3, [r3, #0]
 8003fa6:	69d9      	ldr	r1, [r3, #28]
 8003fa8:	68bb      	ldr	r3, [r7, #8]
 8003faa:	691a      	ldr	r2, [r3, #16]
 8003fac:	68fb      	ldr	r3, [r7, #12]
 8003fae:	681b      	ldr	r3, [r3, #0]
 8003fb0:	430a      	orrs	r2, r1
 8003fb2:	61da      	str	r2, [r3, #28]
      break;
 8003fb4:	e021      	b.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    {
      /* Check the parameters */
      assert_param(IS_TIM_CC4_INSTANCE(htim->Instance));

      /* Configure the Channel 4 in PWM mode */
      TIM_OC4_SetConfig(htim->Instance, sConfig);
 8003fb6:	68fb      	ldr	r3, [r7, #12]
 8003fb8:	681b      	ldr	r3, [r3, #0]
 8003fba:	68b9      	ldr	r1, [r7, #8]
 8003fbc:	4618      	mov	r0, r3
 8003fbe:	f000 fad1 	bl	8004564 <TIM_OC4_SetConfig>

      /* Set the Preload enable bit for channel4 */
      htim->Instance->CCMR2 |= TIM_CCMR2_OC4PE;
 8003fc2:	68fb      	ldr	r3, [r7, #12]
 8003fc4:	681b      	ldr	r3, [r3, #0]
 8003fc6:	69da      	ldr	r2, [r3, #28]
 8003fc8:	68fb      	ldr	r3, [r7, #12]
 8003fca:	681b      	ldr	r3, [r3, #0]
 8003fcc:	f442 6200 	orr.w	r2, r2, #2048	; 0x800
 8003fd0:	61da      	str	r2, [r3, #28]

      /* Configure the Output Fast mode */
      htim->Instance->CCMR2 &= ~TIM_CCMR2_OC4FE;
 8003fd2:	68fb      	ldr	r3, [r7, #12]
 8003fd4:	681b      	ldr	r3, [r3, #0]
 8003fd6:	69da      	ldr	r2, [r3, #28]
 8003fd8:	68fb      	ldr	r3, [r7, #12]
 8003fda:	681b      	ldr	r3, [r3, #0]
 8003fdc:	f422 6280 	bic.w	r2, r2, #1024	; 0x400
 8003fe0:	61da      	str	r2, [r3, #28]
      htim->Instance->CCMR2 |= sConfig->OCFastMode << 8U;
 8003fe2:	68fb      	ldr	r3, [r7, #12]
 8003fe4:	681b      	ldr	r3, [r3, #0]
 8003fe6:	69d9      	ldr	r1, [r3, #28]
 8003fe8:	68bb      	ldr	r3, [r7, #8]
 8003fea:	691b      	ldr	r3, [r3, #16]
 8003fec:	021a      	lsls	r2, r3, #8
 8003fee:	68fb      	ldr	r3, [r7, #12]
 8003ff0:	681b      	ldr	r3, [r3, #0]
 8003ff2:	430a      	orrs	r2, r1
 8003ff4:	61da      	str	r2, [r3, #28]
      break;
 8003ff6:	e000      	b.n	8003ffa <HAL_TIM_PWM_ConfigChannel+0x172>
    }

    default:
      break;
 8003ff8:	bf00      	nop
  }

  htim->State = HAL_TIM_STATE_READY;
 8003ffa:	68fb      	ldr	r3, [r7, #12]
 8003ffc:	2201      	movs	r2, #1
 8003ffe:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004002:	68fb      	ldr	r3, [r7, #12]
 8004004:	2200      	movs	r2, #0
 8004006:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800400a:	2300      	movs	r3, #0
}
 800400c:	4618      	mov	r0, r3
 800400e:	3710      	adds	r7, #16
 8004010:	46bd      	mov	sp, r7
 8004012:	bd80      	pop	{r7, pc}

08004014 <HAL_TIM_ConfigClockSource>:
  * @param  sClockSourceConfig pointer to a TIM_ClockConfigTypeDef structure that
  *         contains the clock source information for the TIM peripheral.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIM_ConfigClockSource(TIM_HandleTypeDef *htim, TIM_ClockConfigTypeDef *sClockSourceConfig)
{
 8004014:	b580      	push	{r7, lr}
 8004016:	b084      	sub	sp, #16
 8004018:	af00      	add	r7, sp, #0
 800401a:	6078      	str	r0, [r7, #4]
 800401c:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Process Locked */
  __HAL_LOCK(htim);
 800401e:	687b      	ldr	r3, [r7, #4]
 8004020:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004024:	2b01      	cmp	r3, #1
 8004026:	d101      	bne.n	800402c <HAL_TIM_ConfigClockSource+0x18>
 8004028:	2302      	movs	r3, #2
 800402a:	e0b3      	b.n	8004194 <HAL_TIM_ConfigClockSource+0x180>
 800402c:	687b      	ldr	r3, [r7, #4]
 800402e:	2201      	movs	r2, #1
 8004030:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  htim->State = HAL_TIM_STATE_BUSY;
 8004034:	687b      	ldr	r3, [r7, #4]
 8004036:	2202      	movs	r2, #2
 8004038:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Check the parameters */
  assert_param(IS_TIM_CLOCKSOURCE(sClockSourceConfig->ClockSource));

  /* Reset the SMS, TS, ECE, ETPS and ETRF bits */
  tmpsmcr = htim->Instance->SMCR;
 800403c:	687b      	ldr	r3, [r7, #4]
 800403e:	681b      	ldr	r3, [r3, #0]
 8004040:	689b      	ldr	r3, [r3, #8]
 8004042:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_SMS | TIM_SMCR_TS);
 8004044:	68fb      	ldr	r3, [r7, #12]
 8004046:	f023 0377 	bic.w	r3, r3, #119	; 0x77
 800404a:	60fb      	str	r3, [r7, #12]
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800404c:	68fb      	ldr	r3, [r7, #12]
 800404e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004052:	60fb      	str	r3, [r7, #12]
  htim->Instance->SMCR = tmpsmcr;
 8004054:	687b      	ldr	r3, [r7, #4]
 8004056:	681b      	ldr	r3, [r3, #0]
 8004058:	68fa      	ldr	r2, [r7, #12]
 800405a:	609a      	str	r2, [r3, #8]

  switch (sClockSourceConfig->ClockSource)
 800405c:	683b      	ldr	r3, [r7, #0]
 800405e:	681b      	ldr	r3, [r3, #0]
 8004060:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 8004064:	d03e      	beq.n	80040e4 <HAL_TIM_ConfigClockSource+0xd0>
 8004066:	f5b3 5f00 	cmp.w	r3, #8192	; 0x2000
 800406a:	f200 8087 	bhi.w	800417c <HAL_TIM_ConfigClockSource+0x168>
 800406e:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 8004072:	f000 8085 	beq.w	8004180 <HAL_TIM_ConfigClockSource+0x16c>
 8004076:	f5b3 5f80 	cmp.w	r3, #4096	; 0x1000
 800407a:	d87f      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x168>
 800407c:	2b70      	cmp	r3, #112	; 0x70
 800407e:	d01a      	beq.n	80040b6 <HAL_TIM_ConfigClockSource+0xa2>
 8004080:	2b70      	cmp	r3, #112	; 0x70
 8004082:	d87b      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x168>
 8004084:	2b60      	cmp	r3, #96	; 0x60
 8004086:	d050      	beq.n	800412a <HAL_TIM_ConfigClockSource+0x116>
 8004088:	2b60      	cmp	r3, #96	; 0x60
 800408a:	d877      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x168>
 800408c:	2b50      	cmp	r3, #80	; 0x50
 800408e:	d03c      	beq.n	800410a <HAL_TIM_ConfigClockSource+0xf6>
 8004090:	2b50      	cmp	r3, #80	; 0x50
 8004092:	d873      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x168>
 8004094:	2b40      	cmp	r3, #64	; 0x40
 8004096:	d058      	beq.n	800414a <HAL_TIM_ConfigClockSource+0x136>
 8004098:	2b40      	cmp	r3, #64	; 0x40
 800409a:	d86f      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x168>
 800409c:	2b30      	cmp	r3, #48	; 0x30
 800409e:	d064      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x156>
 80040a0:	2b30      	cmp	r3, #48	; 0x30
 80040a2:	d86b      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x168>
 80040a4:	2b20      	cmp	r3, #32
 80040a6:	d060      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x156>
 80040a8:	2b20      	cmp	r3, #32
 80040aa:	d867      	bhi.n	800417c <HAL_TIM_ConfigClockSource+0x168>
 80040ac:	2b00      	cmp	r3, #0
 80040ae:	d05c      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x156>
 80040b0:	2b10      	cmp	r3, #16
 80040b2:	d05a      	beq.n	800416a <HAL_TIM_ConfigClockSource+0x156>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
      break;
    }

    default:
      break;
 80040b4:	e062      	b.n	800417c <HAL_TIM_ConfigClockSource+0x168>
      TIM_ETR_SetConfig(htim->Instance,
 80040b6:	687b      	ldr	r3, [r7, #4]
 80040b8:	6818      	ldr	r0, [r3, #0]
 80040ba:	683b      	ldr	r3, [r7, #0]
 80040bc:	6899      	ldr	r1, [r3, #8]
 80040be:	683b      	ldr	r3, [r7, #0]
 80040c0:	685a      	ldr	r2, [r3, #4]
 80040c2:	683b      	ldr	r3, [r7, #0]
 80040c4:	68db      	ldr	r3, [r3, #12]
 80040c6:	f000 fb17 	bl	80046f8 <TIM_ETR_SetConfig>
      tmpsmcr = htim->Instance->SMCR;
 80040ca:	687b      	ldr	r3, [r7, #4]
 80040cc:	681b      	ldr	r3, [r3, #0]
 80040ce:	689b      	ldr	r3, [r3, #8]
 80040d0:	60fb      	str	r3, [r7, #12]
      tmpsmcr |= (TIM_SLAVEMODE_EXTERNAL1 | TIM_CLOCKSOURCE_ETRMODE1);
 80040d2:	68fb      	ldr	r3, [r7, #12]
 80040d4:	f043 0377 	orr.w	r3, r3, #119	; 0x77
 80040d8:	60fb      	str	r3, [r7, #12]
      htim->Instance->SMCR = tmpsmcr;
 80040da:	687b      	ldr	r3, [r7, #4]
 80040dc:	681b      	ldr	r3, [r3, #0]
 80040de:	68fa      	ldr	r2, [r7, #12]
 80040e0:	609a      	str	r2, [r3, #8]
      break;
 80040e2:	e04e      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ETR_SetConfig(htim->Instance,
 80040e4:	687b      	ldr	r3, [r7, #4]
 80040e6:	6818      	ldr	r0, [r3, #0]
 80040e8:	683b      	ldr	r3, [r7, #0]
 80040ea:	6899      	ldr	r1, [r3, #8]
 80040ec:	683b      	ldr	r3, [r7, #0]
 80040ee:	685a      	ldr	r2, [r3, #4]
 80040f0:	683b      	ldr	r3, [r7, #0]
 80040f2:	68db      	ldr	r3, [r3, #12]
 80040f4:	f000 fb00 	bl	80046f8 <TIM_ETR_SetConfig>
      htim->Instance->SMCR |= TIM_SMCR_ECE;
 80040f8:	687b      	ldr	r3, [r7, #4]
 80040fa:	681b      	ldr	r3, [r3, #0]
 80040fc:	689a      	ldr	r2, [r3, #8]
 80040fe:	687b      	ldr	r3, [r7, #4]
 8004100:	681b      	ldr	r3, [r3, #0]
 8004102:	f442 4280 	orr.w	r2, r2, #16384	; 0x4000
 8004106:	609a      	str	r2, [r3, #8]
      break;
 8004108:	e03b      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800410a:	687b      	ldr	r3, [r7, #4]
 800410c:	6818      	ldr	r0, [r3, #0]
 800410e:	683b      	ldr	r3, [r7, #0]
 8004110:	6859      	ldr	r1, [r3, #4]
 8004112:	683b      	ldr	r3, [r7, #0]
 8004114:	68db      	ldr	r3, [r3, #12]
 8004116:	461a      	mov	r2, r3
 8004118:	f000 fa74 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1);
 800411c:	687b      	ldr	r3, [r7, #4]
 800411e:	681b      	ldr	r3, [r3, #0]
 8004120:	2150      	movs	r1, #80	; 0x50
 8004122:	4618      	mov	r0, r3
 8004124:	f000 facd 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004128:	e02b      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI2_ConfigInputStage(htim->Instance,
 800412a:	687b      	ldr	r3, [r7, #4]
 800412c:	6818      	ldr	r0, [r3, #0]
 800412e:	683b      	ldr	r3, [r7, #0]
 8004130:	6859      	ldr	r1, [r3, #4]
 8004132:	683b      	ldr	r3, [r7, #0]
 8004134:	68db      	ldr	r3, [r3, #12]
 8004136:	461a      	mov	r2, r3
 8004138:	f000 fa93 	bl	8004662 <TIM_TI2_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI2);
 800413c:	687b      	ldr	r3, [r7, #4]
 800413e:	681b      	ldr	r3, [r3, #0]
 8004140:	2160      	movs	r1, #96	; 0x60
 8004142:	4618      	mov	r0, r3
 8004144:	f000 fabd 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004148:	e01b      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_TI1_ConfigInputStage(htim->Instance,
 800414a:	687b      	ldr	r3, [r7, #4]
 800414c:	6818      	ldr	r0, [r3, #0]
 800414e:	683b      	ldr	r3, [r7, #0]
 8004150:	6859      	ldr	r1, [r3, #4]
 8004152:	683b      	ldr	r3, [r7, #0]
 8004154:	68db      	ldr	r3, [r3, #12]
 8004156:	461a      	mov	r2, r3
 8004158:	f000 fa54 	bl	8004604 <TIM_TI1_ConfigInputStage>
      TIM_ITRx_SetConfig(htim->Instance, TIM_CLOCKSOURCE_TI1ED);
 800415c:	687b      	ldr	r3, [r7, #4]
 800415e:	681b      	ldr	r3, [r3, #0]
 8004160:	2140      	movs	r1, #64	; 0x40
 8004162:	4618      	mov	r0, r3
 8004164:	f000 faad 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 8004168:	e00b      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x16e>
      TIM_ITRx_SetConfig(htim->Instance, sClockSourceConfig->ClockSource);
 800416a:	687b      	ldr	r3, [r7, #4]
 800416c:	681a      	ldr	r2, [r3, #0]
 800416e:	683b      	ldr	r3, [r7, #0]
 8004170:	681b      	ldr	r3, [r3, #0]
 8004172:	4619      	mov	r1, r3
 8004174:	4610      	mov	r0, r2
 8004176:	f000 faa4 	bl	80046c2 <TIM_ITRx_SetConfig>
      break;
 800417a:	e002      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 800417c:	bf00      	nop
 800417e:	e000      	b.n	8004182 <HAL_TIM_ConfigClockSource+0x16e>
      break;
 8004180:	bf00      	nop
  }
  htim->State = HAL_TIM_STATE_READY;
 8004182:	687b      	ldr	r3, [r7, #4]
 8004184:	2201      	movs	r2, #1
 8004186:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 800418a:	687b      	ldr	r3, [r7, #4]
 800418c:	2200      	movs	r2, #0
 800418e:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 8004192:	2300      	movs	r3, #0
}
 8004194:	4618      	mov	r0, r3
 8004196:	3710      	adds	r7, #16
 8004198:	46bd      	mov	sp, r7
 800419a:	bd80      	pop	{r7, pc}

0800419c <HAL_TIM_OC_DelayElapsedCallback>:
  * @brief  Output Compare callback in non-blocking mode
  * @param  htim TIM OC handle
  * @retval None
  */
__weak void HAL_TIM_OC_DelayElapsedCallback(TIM_HandleTypeDef *htim)
{
 800419c:	b480      	push	{r7}
 800419e:	b083      	sub	sp, #12
 80041a0:	af00      	add	r7, sp, #0
 80041a2:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_OC_DelayElapsedCallback could be implemented in the user file
   */
}
 80041a4:	bf00      	nop
 80041a6:	370c      	adds	r7, #12
 80041a8:	46bd      	mov	sp, r7
 80041aa:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ae:	4770      	bx	lr

080041b0 <HAL_TIM_IC_CaptureCallback>:
  * @brief  Input Capture callback in non-blocking mode
  * @param  htim TIM IC handle
  * @retval None
  */
__weak void HAL_TIM_IC_CaptureCallback(TIM_HandleTypeDef *htim)
{
 80041b0:	b480      	push	{r7}
 80041b2:	b083      	sub	sp, #12
 80041b4:	af00      	add	r7, sp, #0
 80041b6:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_IC_CaptureCallback could be implemented in the user file
   */
}
 80041b8:	bf00      	nop
 80041ba:	370c      	adds	r7, #12
 80041bc:	46bd      	mov	sp, r7
 80041be:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041c2:	4770      	bx	lr

080041c4 <HAL_TIM_PWM_PulseFinishedCallback>:
  * @brief  PWM Pulse finished callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_PWM_PulseFinishedCallback(TIM_HandleTypeDef *htim)
{
 80041c4:	b480      	push	{r7}
 80041c6:	b083      	sub	sp, #12
 80041c8:	af00      	add	r7, sp, #0
 80041ca:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_PWM_PulseFinishedCallback could be implemented in the user file
   */
}
 80041cc:	bf00      	nop
 80041ce:	370c      	adds	r7, #12
 80041d0:	46bd      	mov	sp, r7
 80041d2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041d6:	4770      	bx	lr

080041d8 <HAL_TIM_TriggerCallback>:
  * @brief  Hall Trigger detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIM_TriggerCallback(TIM_HandleTypeDef *htim)
{
 80041d8:	b480      	push	{r7}
 80041da:	b083      	sub	sp, #12
 80041dc:	af00      	add	r7, sp, #0
 80041de:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIM_TriggerCallback could be implemented in the user file
   */
}
 80041e0:	bf00      	nop
 80041e2:	370c      	adds	r7, #12
 80041e4:	46bd      	mov	sp, r7
 80041e6:	f85d 7b04 	ldr.w	r7, [sp], #4
 80041ea:	4770      	bx	lr

080041ec <TIM_Base_SetConfig>:
  * @param  TIMx TIM peripheral
  * @param  Structure TIM Base configuration structure
  * @retval None
  */
void TIM_Base_SetConfig(TIM_TypeDef *TIMx, TIM_Base_InitTypeDef *Structure)
{
 80041ec:	b480      	push	{r7}
 80041ee:	b085      	sub	sp, #20
 80041f0:	af00      	add	r7, sp, #0
 80041f2:	6078      	str	r0, [r7, #4]
 80041f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpcr1;
  tmpcr1 = TIMx->CR1;
 80041f6:	687b      	ldr	r3, [r7, #4]
 80041f8:	681b      	ldr	r3, [r3, #0]
 80041fa:	60fb      	str	r3, [r7, #12]

  /* Set TIM Time Base Unit parameters ---------------------------------------*/
  if (IS_TIM_COUNTER_MODE_SELECT_INSTANCE(TIMx))
 80041fc:	687b      	ldr	r3, [r7, #4]
 80041fe:	4a34      	ldr	r2, [pc, #208]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 8004200:	4293      	cmp	r3, r2
 8004202:	d00f      	beq.n	8004224 <TIM_Base_SetConfig+0x38>
 8004204:	687b      	ldr	r3, [r7, #4]
 8004206:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 800420a:	d00b      	beq.n	8004224 <TIM_Base_SetConfig+0x38>
 800420c:	687b      	ldr	r3, [r7, #4]
 800420e:	4a31      	ldr	r2, [pc, #196]	; (80042d4 <TIM_Base_SetConfig+0xe8>)
 8004210:	4293      	cmp	r3, r2
 8004212:	d007      	beq.n	8004224 <TIM_Base_SetConfig+0x38>
 8004214:	687b      	ldr	r3, [r7, #4]
 8004216:	4a30      	ldr	r2, [pc, #192]	; (80042d8 <TIM_Base_SetConfig+0xec>)
 8004218:	4293      	cmp	r3, r2
 800421a:	d003      	beq.n	8004224 <TIM_Base_SetConfig+0x38>
 800421c:	687b      	ldr	r3, [r7, #4]
 800421e:	4a2f      	ldr	r2, [pc, #188]	; (80042dc <TIM_Base_SetConfig+0xf0>)
 8004220:	4293      	cmp	r3, r2
 8004222:	d108      	bne.n	8004236 <TIM_Base_SetConfig+0x4a>
  {
    /* Select the Counter Mode */
    tmpcr1 &= ~(TIM_CR1_DIR | TIM_CR1_CMS);
 8004224:	68fb      	ldr	r3, [r7, #12]
 8004226:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800422a:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= Structure->CounterMode;
 800422c:	683b      	ldr	r3, [r7, #0]
 800422e:	685b      	ldr	r3, [r3, #4]
 8004230:	68fa      	ldr	r2, [r7, #12]
 8004232:	4313      	orrs	r3, r2
 8004234:	60fb      	str	r3, [r7, #12]
  }

  if (IS_TIM_CLOCK_DIVISION_INSTANCE(TIMx))
 8004236:	687b      	ldr	r3, [r7, #4]
 8004238:	4a25      	ldr	r2, [pc, #148]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 800423a:	4293      	cmp	r3, r2
 800423c:	d01b      	beq.n	8004276 <TIM_Base_SetConfig+0x8a>
 800423e:	687b      	ldr	r3, [r7, #4]
 8004240:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 8004244:	d017      	beq.n	8004276 <TIM_Base_SetConfig+0x8a>
 8004246:	687b      	ldr	r3, [r7, #4]
 8004248:	4a22      	ldr	r2, [pc, #136]	; (80042d4 <TIM_Base_SetConfig+0xe8>)
 800424a:	4293      	cmp	r3, r2
 800424c:	d013      	beq.n	8004276 <TIM_Base_SetConfig+0x8a>
 800424e:	687b      	ldr	r3, [r7, #4]
 8004250:	4a21      	ldr	r2, [pc, #132]	; (80042d8 <TIM_Base_SetConfig+0xec>)
 8004252:	4293      	cmp	r3, r2
 8004254:	d00f      	beq.n	8004276 <TIM_Base_SetConfig+0x8a>
 8004256:	687b      	ldr	r3, [r7, #4]
 8004258:	4a20      	ldr	r2, [pc, #128]	; (80042dc <TIM_Base_SetConfig+0xf0>)
 800425a:	4293      	cmp	r3, r2
 800425c:	d00b      	beq.n	8004276 <TIM_Base_SetConfig+0x8a>
 800425e:	687b      	ldr	r3, [r7, #4]
 8004260:	4a1f      	ldr	r2, [pc, #124]	; (80042e0 <TIM_Base_SetConfig+0xf4>)
 8004262:	4293      	cmp	r3, r2
 8004264:	d007      	beq.n	8004276 <TIM_Base_SetConfig+0x8a>
 8004266:	687b      	ldr	r3, [r7, #4]
 8004268:	4a1e      	ldr	r2, [pc, #120]	; (80042e4 <TIM_Base_SetConfig+0xf8>)
 800426a:	4293      	cmp	r3, r2
 800426c:	d003      	beq.n	8004276 <TIM_Base_SetConfig+0x8a>
 800426e:	687b      	ldr	r3, [r7, #4]
 8004270:	4a1d      	ldr	r2, [pc, #116]	; (80042e8 <TIM_Base_SetConfig+0xfc>)
 8004272:	4293      	cmp	r3, r2
 8004274:	d108      	bne.n	8004288 <TIM_Base_SetConfig+0x9c>
  {
    /* Set the clock division */
    tmpcr1 &= ~TIM_CR1_CKD;
 8004276:	68fb      	ldr	r3, [r7, #12]
 8004278:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800427c:	60fb      	str	r3, [r7, #12]
    tmpcr1 |= (uint32_t)Structure->ClockDivision;
 800427e:	683b      	ldr	r3, [r7, #0]
 8004280:	68db      	ldr	r3, [r3, #12]
 8004282:	68fa      	ldr	r2, [r7, #12]
 8004284:	4313      	orrs	r3, r2
 8004286:	60fb      	str	r3, [r7, #12]
  }

  /* Set the auto-reload preload */
  MODIFY_REG(tmpcr1, TIM_CR1_ARPE, Structure->AutoReloadPreload);
 8004288:	68fb      	ldr	r3, [r7, #12]
 800428a:	f023 0280 	bic.w	r2, r3, #128	; 0x80
 800428e:	683b      	ldr	r3, [r7, #0]
 8004290:	695b      	ldr	r3, [r3, #20]
 8004292:	4313      	orrs	r3, r2
 8004294:	60fb      	str	r3, [r7, #12]

  TIMx->CR1 = tmpcr1;
 8004296:	687b      	ldr	r3, [r7, #4]
 8004298:	68fa      	ldr	r2, [r7, #12]
 800429a:	601a      	str	r2, [r3, #0]

  /* Set the Autoreload value */
  TIMx->ARR = (uint32_t)Structure->Period ;
 800429c:	683b      	ldr	r3, [r7, #0]
 800429e:	689a      	ldr	r2, [r3, #8]
 80042a0:	687b      	ldr	r3, [r7, #4]
 80042a2:	62da      	str	r2, [r3, #44]	; 0x2c

  /* Set the Prescaler value */
  TIMx->PSC = Structure->Prescaler;
 80042a4:	683b      	ldr	r3, [r7, #0]
 80042a6:	681a      	ldr	r2, [r3, #0]
 80042a8:	687b      	ldr	r3, [r7, #4]
 80042aa:	629a      	str	r2, [r3, #40]	; 0x28

  if (IS_TIM_REPETITION_COUNTER_INSTANCE(TIMx))
 80042ac:	687b      	ldr	r3, [r7, #4]
 80042ae:	4a08      	ldr	r2, [pc, #32]	; (80042d0 <TIM_Base_SetConfig+0xe4>)
 80042b0:	4293      	cmp	r3, r2
 80042b2:	d103      	bne.n	80042bc <TIM_Base_SetConfig+0xd0>
  {
    /* Set the Repetition Counter value */
    TIMx->RCR = Structure->RepetitionCounter;
 80042b4:	683b      	ldr	r3, [r7, #0]
 80042b6:	691a      	ldr	r2, [r3, #16]
 80042b8:	687b      	ldr	r3, [r7, #4]
 80042ba:	631a      	str	r2, [r3, #48]	; 0x30
  }

  /* Generate an update event to reload the Prescaler
     and the repetition counter (only for advanced timer) value immediately */
  TIMx->EGR = TIM_EGR_UG;
 80042bc:	687b      	ldr	r3, [r7, #4]
 80042be:	2201      	movs	r2, #1
 80042c0:	615a      	str	r2, [r3, #20]
}
 80042c2:	bf00      	nop
 80042c4:	3714      	adds	r7, #20
 80042c6:	46bd      	mov	sp, r7
 80042c8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80042cc:	4770      	bx	lr
 80042ce:	bf00      	nop
 80042d0:	40010000 	.word	0x40010000
 80042d4:	40000400 	.word	0x40000400
 80042d8:	40000800 	.word	0x40000800
 80042dc:	40000c00 	.word	0x40000c00
 80042e0:	40014000 	.word	0x40014000
 80042e4:	40014400 	.word	0x40014400
 80042e8:	40014800 	.word	0x40014800

080042ec <TIM_OC1_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC1_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80042ec:	b480      	push	{r7}
 80042ee:	b087      	sub	sp, #28
 80042f0:	af00      	add	r7, sp, #0
 80042f2:	6078      	str	r0, [r7, #4]
 80042f4:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 1: Reset the CC1E Bit */
  TIMx->CCER &= ~TIM_CCER_CC1E;
 80042f6:	687b      	ldr	r3, [r7, #4]
 80042f8:	6a1b      	ldr	r3, [r3, #32]
 80042fa:	f023 0201 	bic.w	r2, r3, #1
 80042fe:	687b      	ldr	r3, [r7, #4]
 8004300:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 8004302:	687b      	ldr	r3, [r7, #4]
 8004304:	6a1b      	ldr	r3, [r3, #32]
 8004306:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004308:	687b      	ldr	r3, [r7, #4]
 800430a:	685b      	ldr	r3, [r3, #4]
 800430c:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 800430e:	687b      	ldr	r3, [r7, #4]
 8004310:	699b      	ldr	r3, [r3, #24]
 8004312:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare Mode Bits */
  tmpccmrx &= ~TIM_CCMR1_OC1M;
 8004314:	68fb      	ldr	r3, [r7, #12]
 8004316:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 800431a:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC1S;
 800431c:	68fb      	ldr	r3, [r7, #12]
 800431e:	f023 0303 	bic.w	r3, r3, #3
 8004322:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 8004324:	683b      	ldr	r3, [r7, #0]
 8004326:	681b      	ldr	r3, [r3, #0]
 8004328:	68fa      	ldr	r2, [r7, #12]
 800432a:	4313      	orrs	r3, r2
 800432c:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC1P;
 800432e:	697b      	ldr	r3, [r7, #20]
 8004330:	f023 0302 	bic.w	r3, r3, #2
 8004334:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= OC_Config->OCPolarity;
 8004336:	683b      	ldr	r3, [r7, #0]
 8004338:	689b      	ldr	r3, [r3, #8]
 800433a:	697a      	ldr	r2, [r7, #20]
 800433c:	4313      	orrs	r3, r2
 800433e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_1))
 8004340:	687b      	ldr	r3, [r7, #4]
 8004342:	4a1c      	ldr	r2, [pc, #112]	; (80043b4 <TIM_OC1_SetConfig+0xc8>)
 8004344:	4293      	cmp	r3, r2
 8004346:	d10c      	bne.n	8004362 <TIM_OC1_SetConfig+0x76>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC1NP;
 8004348:	697b      	ldr	r3, [r7, #20]
 800434a:	f023 0308 	bic.w	r3, r3, #8
 800434e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= OC_Config->OCNPolarity;
 8004350:	683b      	ldr	r3, [r7, #0]
 8004352:	68db      	ldr	r3, [r3, #12]
 8004354:	697a      	ldr	r2, [r7, #20]
 8004356:	4313      	orrs	r3, r2
 8004358:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC1NE;
 800435a:	697b      	ldr	r3, [r7, #20]
 800435c:	f023 0304 	bic.w	r3, r3, #4
 8004360:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004362:	687b      	ldr	r3, [r7, #4]
 8004364:	4a13      	ldr	r2, [pc, #76]	; (80043b4 <TIM_OC1_SetConfig+0xc8>)
 8004366:	4293      	cmp	r3, r2
 8004368:	d111      	bne.n	800438e <TIM_OC1_SetConfig+0xa2>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS1;
 800436a:	693b      	ldr	r3, [r7, #16]
 800436c:	f423 7380 	bic.w	r3, r3, #256	; 0x100
 8004370:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS1N;
 8004372:	693b      	ldr	r3, [r7, #16]
 8004374:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 8004378:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= OC_Config->OCIdleState;
 800437a:	683b      	ldr	r3, [r7, #0]
 800437c:	695b      	ldr	r3, [r3, #20]
 800437e:	693a      	ldr	r2, [r7, #16]
 8004380:	4313      	orrs	r3, r2
 8004382:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= OC_Config->OCNIdleState;
 8004384:	683b      	ldr	r3, [r7, #0]
 8004386:	699b      	ldr	r3, [r3, #24]
 8004388:	693a      	ldr	r2, [r7, #16]
 800438a:	4313      	orrs	r3, r2
 800438c:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800438e:	687b      	ldr	r3, [r7, #4]
 8004390:	693a      	ldr	r2, [r7, #16]
 8004392:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 8004394:	687b      	ldr	r3, [r7, #4]
 8004396:	68fa      	ldr	r2, [r7, #12]
 8004398:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR1 = OC_Config->Pulse;
 800439a:	683b      	ldr	r3, [r7, #0]
 800439c:	685a      	ldr	r2, [r3, #4]
 800439e:	687b      	ldr	r3, [r7, #4]
 80043a0:	635a      	str	r2, [r3, #52]	; 0x34

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80043a2:	687b      	ldr	r3, [r7, #4]
 80043a4:	697a      	ldr	r2, [r7, #20]
 80043a6:	621a      	str	r2, [r3, #32]
}
 80043a8:	bf00      	nop
 80043aa:	371c      	adds	r7, #28
 80043ac:	46bd      	mov	sp, r7
 80043ae:	f85d 7b04 	ldr.w	r7, [sp], #4
 80043b2:	4770      	bx	lr
 80043b4:	40010000 	.word	0x40010000

080043b8 <TIM_OC2_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
void TIM_OC2_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 80043b8:	b480      	push	{r7}
 80043ba:	b087      	sub	sp, #28
 80043bc:	af00      	add	r7, sp, #0
 80043be:	6078      	str	r0, [r7, #4]
 80043c0:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 80043c2:	687b      	ldr	r3, [r7, #4]
 80043c4:	6a1b      	ldr	r3, [r3, #32]
 80043c6:	f023 0210 	bic.w	r2, r3, #16
 80043ca:	687b      	ldr	r3, [r7, #4]
 80043cc:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80043ce:	687b      	ldr	r3, [r7, #4]
 80043d0:	6a1b      	ldr	r3, [r3, #32]
 80043d2:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80043d4:	687b      	ldr	r3, [r7, #4]
 80043d6:	685b      	ldr	r3, [r3, #4]
 80043d8:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR1 register value */
  tmpccmrx = TIMx->CCMR1;
 80043da:	687b      	ldr	r3, [r7, #4]
 80043dc:	699b      	ldr	r3, [r3, #24]
 80043de:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR1_OC2M;
 80043e0:	68fb      	ldr	r3, [r7, #12]
 80043e2:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 80043e6:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR1_CC2S;
 80043e8:	68fb      	ldr	r3, [r7, #12]
 80043ea:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 80043ee:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 80043f0:	683b      	ldr	r3, [r7, #0]
 80043f2:	681b      	ldr	r3, [r3, #0]
 80043f4:	021b      	lsls	r3, r3, #8
 80043f6:	68fa      	ldr	r2, [r7, #12]
 80043f8:	4313      	orrs	r3, r2
 80043fa:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC2P;
 80043fc:	697b      	ldr	r3, [r7, #20]
 80043fe:	f023 0320 	bic.w	r3, r3, #32
 8004402:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 4U);
 8004404:	683b      	ldr	r3, [r7, #0]
 8004406:	689b      	ldr	r3, [r3, #8]
 8004408:	011b      	lsls	r3, r3, #4
 800440a:	697a      	ldr	r2, [r7, #20]
 800440c:	4313      	orrs	r3, r2
 800440e:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_2))
 8004410:	687b      	ldr	r3, [r7, #4]
 8004412:	4a1e      	ldr	r2, [pc, #120]	; (800448c <TIM_OC2_SetConfig+0xd4>)
 8004414:	4293      	cmp	r3, r2
 8004416:	d10d      	bne.n	8004434 <TIM_OC2_SetConfig+0x7c>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC2NP;
 8004418:	697b      	ldr	r3, [r7, #20]
 800441a:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 800441e:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 4U);
 8004420:	683b      	ldr	r3, [r7, #0]
 8004422:	68db      	ldr	r3, [r3, #12]
 8004424:	011b      	lsls	r3, r3, #4
 8004426:	697a      	ldr	r2, [r7, #20]
 8004428:	4313      	orrs	r3, r2
 800442a:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC2NE;
 800442c:	697b      	ldr	r3, [r7, #20]
 800442e:	f023 0340 	bic.w	r3, r3, #64	; 0x40
 8004432:	617b      	str	r3, [r7, #20]

  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 8004434:	687b      	ldr	r3, [r7, #4]
 8004436:	4a15      	ldr	r2, [pc, #84]	; (800448c <TIM_OC2_SetConfig+0xd4>)
 8004438:	4293      	cmp	r3, r2
 800443a:	d113      	bne.n	8004464 <TIM_OC2_SetConfig+0xac>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS2;
 800443c:	693b      	ldr	r3, [r7, #16]
 800443e:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004442:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS2N;
 8004444:	693b      	ldr	r3, [r7, #16]
 8004446:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 800444a:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 2U);
 800444c:	683b      	ldr	r3, [r7, #0]
 800444e:	695b      	ldr	r3, [r3, #20]
 8004450:	009b      	lsls	r3, r3, #2
 8004452:	693a      	ldr	r2, [r7, #16]
 8004454:	4313      	orrs	r3, r2
 8004456:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 2U);
 8004458:	683b      	ldr	r3, [r7, #0]
 800445a:	699b      	ldr	r3, [r3, #24]
 800445c:	009b      	lsls	r3, r3, #2
 800445e:	693a      	ldr	r2, [r7, #16]
 8004460:	4313      	orrs	r3, r2
 8004462:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 8004464:	687b      	ldr	r3, [r7, #4]
 8004466:	693a      	ldr	r2, [r7, #16]
 8004468:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR1 */
  TIMx->CCMR1 = tmpccmrx;
 800446a:	687b      	ldr	r3, [r7, #4]
 800446c:	68fa      	ldr	r2, [r7, #12]
 800446e:	619a      	str	r2, [r3, #24]

  /* Set the Capture Compare Register value */
  TIMx->CCR2 = OC_Config->Pulse;
 8004470:	683b      	ldr	r3, [r7, #0]
 8004472:	685a      	ldr	r2, [r3, #4]
 8004474:	687b      	ldr	r3, [r7, #4]
 8004476:	639a      	str	r2, [r3, #56]	; 0x38

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 8004478:	687b      	ldr	r3, [r7, #4]
 800447a:	697a      	ldr	r2, [r7, #20]
 800447c:	621a      	str	r2, [r3, #32]
}
 800447e:	bf00      	nop
 8004480:	371c      	adds	r7, #28
 8004482:	46bd      	mov	sp, r7
 8004484:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004488:	4770      	bx	lr
 800448a:	bf00      	nop
 800448c:	40010000 	.word	0x40010000

08004490 <TIM_OC3_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC3_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004490:	b480      	push	{r7}
 8004492:	b087      	sub	sp, #28
 8004494:	af00      	add	r7, sp, #0
 8004496:	6078      	str	r0, [r7, #4]
 8004498:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 3: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC3E;
 800449a:	687b      	ldr	r3, [r7, #4]
 800449c:	6a1b      	ldr	r3, [r3, #32]
 800449e:	f423 7280 	bic.w	r2, r3, #256	; 0x100
 80044a2:	687b      	ldr	r3, [r7, #4]
 80044a4:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 80044a6:	687b      	ldr	r3, [r7, #4]
 80044a8:	6a1b      	ldr	r3, [r3, #32]
 80044aa:	617b      	str	r3, [r7, #20]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 80044ac:	687b      	ldr	r3, [r7, #4]
 80044ae:	685b      	ldr	r3, [r3, #4]
 80044b0:	613b      	str	r3, [r7, #16]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 80044b2:	687b      	ldr	r3, [r7, #4]
 80044b4:	69db      	ldr	r3, [r3, #28]
 80044b6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC3M;
 80044b8:	68fb      	ldr	r3, [r7, #12]
 80044ba:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80044be:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC3S;
 80044c0:	68fb      	ldr	r3, [r7, #12]
 80044c2:	f023 0303 	bic.w	r3, r3, #3
 80044c6:	60fb      	str	r3, [r7, #12]
  /* Select the Output Compare Mode */
  tmpccmrx |= OC_Config->OCMode;
 80044c8:	683b      	ldr	r3, [r7, #0]
 80044ca:	681b      	ldr	r3, [r3, #0]
 80044cc:	68fa      	ldr	r2, [r7, #12]
 80044ce:	4313      	orrs	r3, r2
 80044d0:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC3P;
 80044d2:	697b      	ldr	r3, [r7, #20]
 80044d4:	f423 7300 	bic.w	r3, r3, #512	; 0x200
 80044d8:	617b      	str	r3, [r7, #20]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 8U);
 80044da:	683b      	ldr	r3, [r7, #0]
 80044dc:	689b      	ldr	r3, [r3, #8]
 80044de:	021b      	lsls	r3, r3, #8
 80044e0:	697a      	ldr	r2, [r7, #20]
 80044e2:	4313      	orrs	r3, r2
 80044e4:	617b      	str	r3, [r7, #20]

  if (IS_TIM_CCXN_INSTANCE(TIMx, TIM_CHANNEL_3))
 80044e6:	687b      	ldr	r3, [r7, #4]
 80044e8:	4a1d      	ldr	r2, [pc, #116]	; (8004560 <TIM_OC3_SetConfig+0xd0>)
 80044ea:	4293      	cmp	r3, r2
 80044ec:	d10d      	bne.n	800450a <TIM_OC3_SetConfig+0x7a>
  {
    assert_param(IS_TIM_OCN_POLARITY(OC_Config->OCNPolarity));

    /* Reset the Output N Polarity level */
    tmpccer &= ~TIM_CCER_CC3NP;
 80044ee:	697b      	ldr	r3, [r7, #20]
 80044f0:	f423 6300 	bic.w	r3, r3, #2048	; 0x800
 80044f4:	617b      	str	r3, [r7, #20]
    /* Set the Output N Polarity */
    tmpccer |= (OC_Config->OCNPolarity << 8U);
 80044f6:	683b      	ldr	r3, [r7, #0]
 80044f8:	68db      	ldr	r3, [r3, #12]
 80044fa:	021b      	lsls	r3, r3, #8
 80044fc:	697a      	ldr	r2, [r7, #20]
 80044fe:	4313      	orrs	r3, r2
 8004500:	617b      	str	r3, [r7, #20]
    /* Reset the Output N State */
    tmpccer &= ~TIM_CCER_CC3NE;
 8004502:	697b      	ldr	r3, [r7, #20]
 8004504:	f423 6380 	bic.w	r3, r3, #1024	; 0x400
 8004508:	617b      	str	r3, [r7, #20]
  }

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 800450a:	687b      	ldr	r3, [r7, #4]
 800450c:	4a14      	ldr	r2, [pc, #80]	; (8004560 <TIM_OC3_SetConfig+0xd0>)
 800450e:	4293      	cmp	r3, r2
 8004510:	d113      	bne.n	800453a <TIM_OC3_SetConfig+0xaa>
    /* Check parameters */
    assert_param(IS_TIM_OCNIDLE_STATE(OC_Config->OCNIdleState));
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare and Output Compare N IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS3;
 8004512:	693b      	ldr	r3, [r7, #16]
 8004514:	f423 5380 	bic.w	r3, r3, #4096	; 0x1000
 8004518:	613b      	str	r3, [r7, #16]
    tmpcr2 &= ~TIM_CR2_OIS3N;
 800451a:	693b      	ldr	r3, [r7, #16]
 800451c:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 8004520:	613b      	str	r3, [r7, #16]
    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 4U);
 8004522:	683b      	ldr	r3, [r7, #0]
 8004524:	695b      	ldr	r3, [r3, #20]
 8004526:	011b      	lsls	r3, r3, #4
 8004528:	693a      	ldr	r2, [r7, #16]
 800452a:	4313      	orrs	r3, r2
 800452c:	613b      	str	r3, [r7, #16]
    /* Set the Output N Idle state */
    tmpcr2 |= (OC_Config->OCNIdleState << 4U);
 800452e:	683b      	ldr	r3, [r7, #0]
 8004530:	699b      	ldr	r3, [r3, #24]
 8004532:	011b      	lsls	r3, r3, #4
 8004534:	693a      	ldr	r2, [r7, #16]
 8004536:	4313      	orrs	r3, r2
 8004538:	613b      	str	r3, [r7, #16]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 800453a:	687b      	ldr	r3, [r7, #4]
 800453c:	693a      	ldr	r2, [r7, #16]
 800453e:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 8004540:	687b      	ldr	r3, [r7, #4]
 8004542:	68fa      	ldr	r2, [r7, #12]
 8004544:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR3 = OC_Config->Pulse;
 8004546:	683b      	ldr	r3, [r7, #0]
 8004548:	685a      	ldr	r2, [r3, #4]
 800454a:	687b      	ldr	r3, [r7, #4]
 800454c:	63da      	str	r2, [r3, #60]	; 0x3c

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 800454e:	687b      	ldr	r3, [r7, #4]
 8004550:	697a      	ldr	r2, [r7, #20]
 8004552:	621a      	str	r2, [r3, #32]
}
 8004554:	bf00      	nop
 8004556:	371c      	adds	r7, #28
 8004558:	46bd      	mov	sp, r7
 800455a:	f85d 7b04 	ldr.w	r7, [sp], #4
 800455e:	4770      	bx	lr
 8004560:	40010000 	.word	0x40010000

08004564 <TIM_OC4_SetConfig>:
  * @param  TIMx to select the TIM peripheral
  * @param  OC_Config The ouput configuration structure
  * @retval None
  */
static void TIM_OC4_SetConfig(TIM_TypeDef *TIMx, TIM_OC_InitTypeDef *OC_Config)
{
 8004564:	b480      	push	{r7}
 8004566:	b087      	sub	sp, #28
 8004568:	af00      	add	r7, sp, #0
 800456a:	6078      	str	r0, [r7, #4]
 800456c:	6039      	str	r1, [r7, #0]
  uint32_t tmpccmrx;
  uint32_t tmpccer;
  uint32_t tmpcr2;

  /* Disable the Channel 4: Reset the CC4E Bit */
  TIMx->CCER &= ~TIM_CCER_CC4E;
 800456e:	687b      	ldr	r3, [r7, #4]
 8004570:	6a1b      	ldr	r3, [r3, #32]
 8004572:	f423 5280 	bic.w	r2, r3, #4096	; 0x1000
 8004576:	687b      	ldr	r3, [r7, #4]
 8004578:	621a      	str	r2, [r3, #32]

  /* Get the TIMx CCER register value */
  tmpccer = TIMx->CCER;
 800457a:	687b      	ldr	r3, [r7, #4]
 800457c:	6a1b      	ldr	r3, [r3, #32]
 800457e:	613b      	str	r3, [r7, #16]
  /* Get the TIMx CR2 register value */
  tmpcr2 =  TIMx->CR2;
 8004580:	687b      	ldr	r3, [r7, #4]
 8004582:	685b      	ldr	r3, [r3, #4]
 8004584:	617b      	str	r3, [r7, #20]

  /* Get the TIMx CCMR2 register value */
  tmpccmrx = TIMx->CCMR2;
 8004586:	687b      	ldr	r3, [r7, #4]
 8004588:	69db      	ldr	r3, [r3, #28]
 800458a:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Compare mode and Capture/Compare selection Bits */
  tmpccmrx &= ~TIM_CCMR2_OC4M;
 800458c:	68fb      	ldr	r3, [r7, #12]
 800458e:	f423 43e0 	bic.w	r3, r3, #28672	; 0x7000
 8004592:	60fb      	str	r3, [r7, #12]
  tmpccmrx &= ~TIM_CCMR2_CC4S;
 8004594:	68fb      	ldr	r3, [r7, #12]
 8004596:	f423 7340 	bic.w	r3, r3, #768	; 0x300
 800459a:	60fb      	str	r3, [r7, #12]

  /* Select the Output Compare Mode */
  tmpccmrx |= (OC_Config->OCMode << 8U);
 800459c:	683b      	ldr	r3, [r7, #0]
 800459e:	681b      	ldr	r3, [r3, #0]
 80045a0:	021b      	lsls	r3, r3, #8
 80045a2:	68fa      	ldr	r2, [r7, #12]
 80045a4:	4313      	orrs	r3, r2
 80045a6:	60fb      	str	r3, [r7, #12]

  /* Reset the Output Polarity level */
  tmpccer &= ~TIM_CCER_CC4P;
 80045a8:	693b      	ldr	r3, [r7, #16]
 80045aa:	f423 5300 	bic.w	r3, r3, #8192	; 0x2000
 80045ae:	613b      	str	r3, [r7, #16]
  /* Set the Output Compare Polarity */
  tmpccer |= (OC_Config->OCPolarity << 12U);
 80045b0:	683b      	ldr	r3, [r7, #0]
 80045b2:	689b      	ldr	r3, [r3, #8]
 80045b4:	031b      	lsls	r3, r3, #12
 80045b6:	693a      	ldr	r2, [r7, #16]
 80045b8:	4313      	orrs	r3, r2
 80045ba:	613b      	str	r3, [r7, #16]

  if (IS_TIM_BREAK_INSTANCE(TIMx))
 80045bc:	687b      	ldr	r3, [r7, #4]
 80045be:	4a10      	ldr	r2, [pc, #64]	; (8004600 <TIM_OC4_SetConfig+0x9c>)
 80045c0:	4293      	cmp	r3, r2
 80045c2:	d109      	bne.n	80045d8 <TIM_OC4_SetConfig+0x74>
  {
    /* Check parameters */
    assert_param(IS_TIM_OCIDLE_STATE(OC_Config->OCIdleState));

    /* Reset the Output Compare IDLE State */
    tmpcr2 &= ~TIM_CR2_OIS4;
 80045c4:	697b      	ldr	r3, [r7, #20]
 80045c6:	f423 4380 	bic.w	r3, r3, #16384	; 0x4000
 80045ca:	617b      	str	r3, [r7, #20]

    /* Set the Output Idle state */
    tmpcr2 |= (OC_Config->OCIdleState << 6U);
 80045cc:	683b      	ldr	r3, [r7, #0]
 80045ce:	695b      	ldr	r3, [r3, #20]
 80045d0:	019b      	lsls	r3, r3, #6
 80045d2:	697a      	ldr	r2, [r7, #20]
 80045d4:	4313      	orrs	r3, r2
 80045d6:	617b      	str	r3, [r7, #20]
  }

  /* Write to TIMx CR2 */
  TIMx->CR2 = tmpcr2;
 80045d8:	687b      	ldr	r3, [r7, #4]
 80045da:	697a      	ldr	r2, [r7, #20]
 80045dc:	605a      	str	r2, [r3, #4]

  /* Write to TIMx CCMR2 */
  TIMx->CCMR2 = tmpccmrx;
 80045de:	687b      	ldr	r3, [r7, #4]
 80045e0:	68fa      	ldr	r2, [r7, #12]
 80045e2:	61da      	str	r2, [r3, #28]

  /* Set the Capture Compare Register value */
  TIMx->CCR4 = OC_Config->Pulse;
 80045e4:	683b      	ldr	r3, [r7, #0]
 80045e6:	685a      	ldr	r2, [r3, #4]
 80045e8:	687b      	ldr	r3, [r7, #4]
 80045ea:	641a      	str	r2, [r3, #64]	; 0x40

  /* Write to TIMx CCER */
  TIMx->CCER = tmpccer;
 80045ec:	687b      	ldr	r3, [r7, #4]
 80045ee:	693a      	ldr	r2, [r7, #16]
 80045f0:	621a      	str	r2, [r3, #32]
}
 80045f2:	bf00      	nop
 80045f4:	371c      	adds	r7, #28
 80045f6:	46bd      	mov	sp, r7
 80045f8:	f85d 7b04 	ldr.w	r7, [sp], #4
 80045fc:	4770      	bx	lr
 80045fe:	bf00      	nop
 8004600:	40010000 	.word	0x40010000

08004604 <TIM_TI1_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI1_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004604:	b480      	push	{r7}
 8004606:	b087      	sub	sp, #28
 8004608:	af00      	add	r7, sp, #0
 800460a:	60f8      	str	r0, [r7, #12]
 800460c:	60b9      	str	r1, [r7, #8]
 800460e:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 1: Reset the CC1E Bit */
  tmpccer = TIMx->CCER;
 8004610:	68fb      	ldr	r3, [r7, #12]
 8004612:	6a1b      	ldr	r3, [r3, #32]
 8004614:	617b      	str	r3, [r7, #20]
  TIMx->CCER &= ~TIM_CCER_CC1E;
 8004616:	68fb      	ldr	r3, [r7, #12]
 8004618:	6a1b      	ldr	r3, [r3, #32]
 800461a:	f023 0201 	bic.w	r2, r3, #1
 800461e:	68fb      	ldr	r3, [r7, #12]
 8004620:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 8004622:	68fb      	ldr	r3, [r7, #12]
 8004624:	699b      	ldr	r3, [r3, #24]
 8004626:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC1F;
 8004628:	693b      	ldr	r3, [r7, #16]
 800462a:	f023 03f0 	bic.w	r3, r3, #240	; 0xf0
 800462e:	613b      	str	r3, [r7, #16]
  tmpccmr1 |= (TIM_ICFilter << 4U);
 8004630:	687b      	ldr	r3, [r7, #4]
 8004632:	011b      	lsls	r3, r3, #4
 8004634:	693a      	ldr	r2, [r7, #16]
 8004636:	4313      	orrs	r3, r2
 8004638:	613b      	str	r3, [r7, #16]

  /* Select the Polarity and set the CC1E Bit */
  tmpccer &= ~(TIM_CCER_CC1P | TIM_CCER_CC1NP);
 800463a:	697b      	ldr	r3, [r7, #20]
 800463c:	f023 030a 	bic.w	r3, r3, #10
 8004640:	617b      	str	r3, [r7, #20]
  tmpccer |= TIM_ICPolarity;
 8004642:	697a      	ldr	r2, [r7, #20]
 8004644:	68bb      	ldr	r3, [r7, #8]
 8004646:	4313      	orrs	r3, r2
 8004648:	617b      	str	r3, [r7, #20]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1;
 800464a:	68fb      	ldr	r3, [r7, #12]
 800464c:	693a      	ldr	r2, [r7, #16]
 800464e:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 8004650:	68fb      	ldr	r3, [r7, #12]
 8004652:	697a      	ldr	r2, [r7, #20]
 8004654:	621a      	str	r2, [r3, #32]
}
 8004656:	bf00      	nop
 8004658:	371c      	adds	r7, #28
 800465a:	46bd      	mov	sp, r7
 800465c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004660:	4770      	bx	lr

08004662 <TIM_TI2_ConfigInputStage>:
  * @param  TIM_ICFilter Specifies the Input Capture Filter.
  *          This parameter must be a value between 0x00 and 0x0F.
  * @retval None
  */
static void TIM_TI2_ConfigInputStage(TIM_TypeDef *TIMx, uint32_t TIM_ICPolarity, uint32_t TIM_ICFilter)
{
 8004662:	b480      	push	{r7}
 8004664:	b087      	sub	sp, #28
 8004666:	af00      	add	r7, sp, #0
 8004668:	60f8      	str	r0, [r7, #12]
 800466a:	60b9      	str	r1, [r7, #8]
 800466c:	607a      	str	r2, [r7, #4]
  uint32_t tmpccmr1;
  uint32_t tmpccer;

  /* Disable the Channel 2: Reset the CC2E Bit */
  TIMx->CCER &= ~TIM_CCER_CC2E;
 800466e:	68fb      	ldr	r3, [r7, #12]
 8004670:	6a1b      	ldr	r3, [r3, #32]
 8004672:	f023 0210 	bic.w	r2, r3, #16
 8004676:	68fb      	ldr	r3, [r7, #12]
 8004678:	621a      	str	r2, [r3, #32]
  tmpccmr1 = TIMx->CCMR1;
 800467a:	68fb      	ldr	r3, [r7, #12]
 800467c:	699b      	ldr	r3, [r3, #24]
 800467e:	617b      	str	r3, [r7, #20]
  tmpccer = TIMx->CCER;
 8004680:	68fb      	ldr	r3, [r7, #12]
 8004682:	6a1b      	ldr	r3, [r3, #32]
 8004684:	613b      	str	r3, [r7, #16]

  /* Set the filter */
  tmpccmr1 &= ~TIM_CCMR1_IC2F;
 8004686:	697b      	ldr	r3, [r7, #20]
 8004688:	f423 4370 	bic.w	r3, r3, #61440	; 0xf000
 800468c:	617b      	str	r3, [r7, #20]
  tmpccmr1 |= (TIM_ICFilter << 12U);
 800468e:	687b      	ldr	r3, [r7, #4]
 8004690:	031b      	lsls	r3, r3, #12
 8004692:	697a      	ldr	r2, [r7, #20]
 8004694:	4313      	orrs	r3, r2
 8004696:	617b      	str	r3, [r7, #20]

  /* Select the Polarity and set the CC2E Bit */
  tmpccer &= ~(TIM_CCER_CC2P | TIM_CCER_CC2NP);
 8004698:	693b      	ldr	r3, [r7, #16]
 800469a:	f023 03a0 	bic.w	r3, r3, #160	; 0xa0
 800469e:	613b      	str	r3, [r7, #16]
  tmpccer |= (TIM_ICPolarity << 4U);
 80046a0:	68bb      	ldr	r3, [r7, #8]
 80046a2:	011b      	lsls	r3, r3, #4
 80046a4:	693a      	ldr	r2, [r7, #16]
 80046a6:	4313      	orrs	r3, r2
 80046a8:	613b      	str	r3, [r7, #16]

  /* Write to TIMx CCMR1 and CCER registers */
  TIMx->CCMR1 = tmpccmr1 ;
 80046aa:	68fb      	ldr	r3, [r7, #12]
 80046ac:	697a      	ldr	r2, [r7, #20]
 80046ae:	619a      	str	r2, [r3, #24]
  TIMx->CCER = tmpccer;
 80046b0:	68fb      	ldr	r3, [r7, #12]
 80046b2:	693a      	ldr	r2, [r7, #16]
 80046b4:	621a      	str	r2, [r3, #32]
}
 80046b6:	bf00      	nop
 80046b8:	371c      	adds	r7, #28
 80046ba:	46bd      	mov	sp, r7
 80046bc:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046c0:	4770      	bx	lr

080046c2 <TIM_ITRx_SetConfig>:
  *            @arg TIM_TS_TI2FP2: Filtered Timer Input 2
  *            @arg TIM_TS_ETRF: External Trigger input
  * @retval None
  */
static void TIM_ITRx_SetConfig(TIM_TypeDef *TIMx, uint32_t InputTriggerSource)
{
 80046c2:	b480      	push	{r7}
 80046c4:	b085      	sub	sp, #20
 80046c6:	af00      	add	r7, sp, #0
 80046c8:	6078      	str	r0, [r7, #4]
 80046ca:	6039      	str	r1, [r7, #0]
  uint32_t tmpsmcr;

  /* Get the TIMx SMCR register value */
  tmpsmcr = TIMx->SMCR;
 80046cc:	687b      	ldr	r3, [r7, #4]
 80046ce:	689b      	ldr	r3, [r3, #8]
 80046d0:	60fb      	str	r3, [r7, #12]
  /* Reset the TS Bits */
  tmpsmcr &= ~TIM_SMCR_TS;
 80046d2:	68fb      	ldr	r3, [r7, #12]
 80046d4:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80046d8:	60fb      	str	r3, [r7, #12]
  /* Set the Input Trigger source and the slave mode*/
  tmpsmcr |= (InputTriggerSource | TIM_SLAVEMODE_EXTERNAL1);
 80046da:	683a      	ldr	r2, [r7, #0]
 80046dc:	68fb      	ldr	r3, [r7, #12]
 80046de:	4313      	orrs	r3, r2
 80046e0:	f043 0307 	orr.w	r3, r3, #7
 80046e4:	60fb      	str	r3, [r7, #12]
  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 80046e6:	687b      	ldr	r3, [r7, #4]
 80046e8:	68fa      	ldr	r2, [r7, #12]
 80046ea:	609a      	str	r2, [r3, #8]
}
 80046ec:	bf00      	nop
 80046ee:	3714      	adds	r7, #20
 80046f0:	46bd      	mov	sp, r7
 80046f2:	f85d 7b04 	ldr.w	r7, [sp], #4
 80046f6:	4770      	bx	lr

080046f8 <TIM_ETR_SetConfig>:
  *          This parameter must be a value between 0x00 and 0x0F
  * @retval None
  */
void TIM_ETR_SetConfig(TIM_TypeDef *TIMx, uint32_t TIM_ExtTRGPrescaler,
                       uint32_t TIM_ExtTRGPolarity, uint32_t ExtTRGFilter)
{
 80046f8:	b480      	push	{r7}
 80046fa:	b087      	sub	sp, #28
 80046fc:	af00      	add	r7, sp, #0
 80046fe:	60f8      	str	r0, [r7, #12]
 8004700:	60b9      	str	r1, [r7, #8]
 8004702:	607a      	str	r2, [r7, #4]
 8004704:	603b      	str	r3, [r7, #0]
  uint32_t tmpsmcr;

  tmpsmcr = TIMx->SMCR;
 8004706:	68fb      	ldr	r3, [r7, #12]
 8004708:	689b      	ldr	r3, [r3, #8]
 800470a:	617b      	str	r3, [r7, #20]

  /* Reset the ETR Bits */
  tmpsmcr &= ~(TIM_SMCR_ETF | TIM_SMCR_ETPS | TIM_SMCR_ECE | TIM_SMCR_ETP);
 800470c:	697b      	ldr	r3, [r7, #20]
 800470e:	f423 437f 	bic.w	r3, r3, #65280	; 0xff00
 8004712:	617b      	str	r3, [r7, #20]

  /* Set the Prescaler, the Filter value and the Polarity */
  tmpsmcr |= (uint32_t)(TIM_ExtTRGPrescaler | (TIM_ExtTRGPolarity | (ExtTRGFilter << 8U)));
 8004714:	683b      	ldr	r3, [r7, #0]
 8004716:	021a      	lsls	r2, r3, #8
 8004718:	687b      	ldr	r3, [r7, #4]
 800471a:	431a      	orrs	r2, r3
 800471c:	68bb      	ldr	r3, [r7, #8]
 800471e:	4313      	orrs	r3, r2
 8004720:	697a      	ldr	r2, [r7, #20]
 8004722:	4313      	orrs	r3, r2
 8004724:	617b      	str	r3, [r7, #20]

  /* Write to TIMx SMCR */
  TIMx->SMCR = tmpsmcr;
 8004726:	68fb      	ldr	r3, [r7, #12]
 8004728:	697a      	ldr	r2, [r7, #20]
 800472a:	609a      	str	r2, [r3, #8]
}
 800472c:	bf00      	nop
 800472e:	371c      	adds	r7, #28
 8004730:	46bd      	mov	sp, r7
 8004732:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004736:	4770      	bx	lr

08004738 <TIM_CCxChannelCmd>:
  * @param  ChannelState specifies the TIM Channel CCxE bit new state.
  *          This parameter can be: TIM_CCx_ENABLE or TIM_CCx_DISABLE.
  * @retval None
  */
void TIM_CCxChannelCmd(TIM_TypeDef *TIMx, uint32_t Channel, uint32_t ChannelState)
{
 8004738:	b480      	push	{r7}
 800473a:	b087      	sub	sp, #28
 800473c:	af00      	add	r7, sp, #0
 800473e:	60f8      	str	r0, [r7, #12]
 8004740:	60b9      	str	r1, [r7, #8]
 8004742:	607a      	str	r2, [r7, #4]

  /* Check the parameters */
  assert_param(IS_TIM_CC1_INSTANCE(TIMx));
  assert_param(IS_TIM_CHANNELS(Channel));

  tmp = TIM_CCER_CC1E << (Channel & 0x1FU); /* 0x1FU = 31 bits max shift */
 8004744:	68bb      	ldr	r3, [r7, #8]
 8004746:	f003 031f 	and.w	r3, r3, #31
 800474a:	2201      	movs	r2, #1
 800474c:	fa02 f303 	lsl.w	r3, r2, r3
 8004750:	617b      	str	r3, [r7, #20]

  /* Reset the CCxE Bit */
  TIMx->CCER &= ~tmp;
 8004752:	68fb      	ldr	r3, [r7, #12]
 8004754:	6a1a      	ldr	r2, [r3, #32]
 8004756:	697b      	ldr	r3, [r7, #20]
 8004758:	43db      	mvns	r3, r3
 800475a:	401a      	ands	r2, r3
 800475c:	68fb      	ldr	r3, [r7, #12]
 800475e:	621a      	str	r2, [r3, #32]

  /* Set or reset the CCxE Bit */
  TIMx->CCER |= (uint32_t)(ChannelState << (Channel & 0x1FU)); /* 0x1FU = 31 bits max shift */
 8004760:	68fb      	ldr	r3, [r7, #12]
 8004762:	6a1a      	ldr	r2, [r3, #32]
 8004764:	68bb      	ldr	r3, [r7, #8]
 8004766:	f003 031f 	and.w	r3, r3, #31
 800476a:	6879      	ldr	r1, [r7, #4]
 800476c:	fa01 f303 	lsl.w	r3, r1, r3
 8004770:	431a      	orrs	r2, r3
 8004772:	68fb      	ldr	r3, [r7, #12]
 8004774:	621a      	str	r2, [r3, #32]
}
 8004776:	bf00      	nop
 8004778:	371c      	adds	r7, #28
 800477a:	46bd      	mov	sp, r7
 800477c:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004780:	4770      	bx	lr
	...

08004784 <HAL_TIMEx_MasterConfigSynchronization>:
  *         mode.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_TIMEx_MasterConfigSynchronization(TIM_HandleTypeDef *htim,
                                                        TIM_MasterConfigTypeDef *sMasterConfig)
{
 8004784:	b480      	push	{r7}
 8004786:	b085      	sub	sp, #20
 8004788:	af00      	add	r7, sp, #0
 800478a:	6078      	str	r0, [r7, #4]
 800478c:	6039      	str	r1, [r7, #0]
  assert_param(IS_TIM_MASTER_INSTANCE(htim->Instance));
  assert_param(IS_TIM_TRGO_SOURCE(sMasterConfig->MasterOutputTrigger));
  assert_param(IS_TIM_MSM_STATE(sMasterConfig->MasterSlaveMode));

  /* Check input state */
  __HAL_LOCK(htim);
 800478e:	687b      	ldr	r3, [r7, #4]
 8004790:	f893 303c 	ldrb.w	r3, [r3, #60]	; 0x3c
 8004794:	2b01      	cmp	r3, #1
 8004796:	d101      	bne.n	800479c <HAL_TIMEx_MasterConfigSynchronization+0x18>
 8004798:	2302      	movs	r3, #2
 800479a:	e050      	b.n	800483e <HAL_TIMEx_MasterConfigSynchronization+0xba>
 800479c:	687b      	ldr	r3, [r7, #4]
 800479e:	2201      	movs	r2, #1
 80047a0:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  /* Change the handler state */
  htim->State = HAL_TIM_STATE_BUSY;
 80047a4:	687b      	ldr	r3, [r7, #4]
 80047a6:	2202      	movs	r2, #2
 80047a8:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  /* Get the TIMx CR2 register value */
  tmpcr2 = htim->Instance->CR2;
 80047ac:	687b      	ldr	r3, [r7, #4]
 80047ae:	681b      	ldr	r3, [r3, #0]
 80047b0:	685b      	ldr	r3, [r3, #4]
 80047b2:	60fb      	str	r3, [r7, #12]

  /* Get the TIMx SMCR register value */
  tmpsmcr = htim->Instance->SMCR;
 80047b4:	687b      	ldr	r3, [r7, #4]
 80047b6:	681b      	ldr	r3, [r3, #0]
 80047b8:	689b      	ldr	r3, [r3, #8]
 80047ba:	60bb      	str	r3, [r7, #8]

  /* Reset the MMS Bits */
  tmpcr2 &= ~TIM_CR2_MMS;
 80047bc:	68fb      	ldr	r3, [r7, #12]
 80047be:	f023 0370 	bic.w	r3, r3, #112	; 0x70
 80047c2:	60fb      	str	r3, [r7, #12]
  /* Select the TRGO source */
  tmpcr2 |=  sMasterConfig->MasterOutputTrigger;
 80047c4:	683b      	ldr	r3, [r7, #0]
 80047c6:	681b      	ldr	r3, [r3, #0]
 80047c8:	68fa      	ldr	r2, [r7, #12]
 80047ca:	4313      	orrs	r3, r2
 80047cc:	60fb      	str	r3, [r7, #12]

  /* Update TIMx CR2 */
  htim->Instance->CR2 = tmpcr2;
 80047ce:	687b      	ldr	r3, [r7, #4]
 80047d0:	681b      	ldr	r3, [r3, #0]
 80047d2:	68fa      	ldr	r2, [r7, #12]
 80047d4:	605a      	str	r2, [r3, #4]

  if (IS_TIM_SLAVE_INSTANCE(htim->Instance))
 80047d6:	687b      	ldr	r3, [r7, #4]
 80047d8:	681b      	ldr	r3, [r3, #0]
 80047da:	4a1c      	ldr	r2, [pc, #112]	; (800484c <HAL_TIMEx_MasterConfigSynchronization+0xc8>)
 80047dc:	4293      	cmp	r3, r2
 80047de:	d018      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047e0:	687b      	ldr	r3, [r7, #4]
 80047e2:	681b      	ldr	r3, [r3, #0]
 80047e4:	f1b3 4f80 	cmp.w	r3, #1073741824	; 0x40000000
 80047e8:	d013      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047ea:	687b      	ldr	r3, [r7, #4]
 80047ec:	681b      	ldr	r3, [r3, #0]
 80047ee:	4a18      	ldr	r2, [pc, #96]	; (8004850 <HAL_TIMEx_MasterConfigSynchronization+0xcc>)
 80047f0:	4293      	cmp	r3, r2
 80047f2:	d00e      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047f4:	687b      	ldr	r3, [r7, #4]
 80047f6:	681b      	ldr	r3, [r3, #0]
 80047f8:	4a16      	ldr	r2, [pc, #88]	; (8004854 <HAL_TIMEx_MasterConfigSynchronization+0xd0>)
 80047fa:	4293      	cmp	r3, r2
 80047fc:	d009      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 80047fe:	687b      	ldr	r3, [r7, #4]
 8004800:	681b      	ldr	r3, [r3, #0]
 8004802:	4a15      	ldr	r2, [pc, #84]	; (8004858 <HAL_TIMEx_MasterConfigSynchronization+0xd4>)
 8004804:	4293      	cmp	r3, r2
 8004806:	d004      	beq.n	8004812 <HAL_TIMEx_MasterConfigSynchronization+0x8e>
 8004808:	687b      	ldr	r3, [r7, #4]
 800480a:	681b      	ldr	r3, [r3, #0]
 800480c:	4a13      	ldr	r2, [pc, #76]	; (800485c <HAL_TIMEx_MasterConfigSynchronization+0xd8>)
 800480e:	4293      	cmp	r3, r2
 8004810:	d10c      	bne.n	800482c <HAL_TIMEx_MasterConfigSynchronization+0xa8>
  {
    /* Reset the MSM Bit */
    tmpsmcr &= ~TIM_SMCR_MSM;
 8004812:	68bb      	ldr	r3, [r7, #8]
 8004814:	f023 0380 	bic.w	r3, r3, #128	; 0x80
 8004818:	60bb      	str	r3, [r7, #8]
    /* Set master mode */
    tmpsmcr |= sMasterConfig->MasterSlaveMode;
 800481a:	683b      	ldr	r3, [r7, #0]
 800481c:	685b      	ldr	r3, [r3, #4]
 800481e:	68ba      	ldr	r2, [r7, #8]
 8004820:	4313      	orrs	r3, r2
 8004822:	60bb      	str	r3, [r7, #8]

    /* Update TIMx SMCR */
    htim->Instance->SMCR = tmpsmcr;
 8004824:	687b      	ldr	r3, [r7, #4]
 8004826:	681b      	ldr	r3, [r3, #0]
 8004828:	68ba      	ldr	r2, [r7, #8]
 800482a:	609a      	str	r2, [r3, #8]
  }

  /* Change the htim state */
  htim->State = HAL_TIM_STATE_READY;
 800482c:	687b      	ldr	r3, [r7, #4]
 800482e:	2201      	movs	r2, #1
 8004830:	f883 203d 	strb.w	r2, [r3, #61]	; 0x3d

  __HAL_UNLOCK(htim);
 8004834:	687b      	ldr	r3, [r7, #4]
 8004836:	2200      	movs	r2, #0
 8004838:	f883 203c 	strb.w	r2, [r3, #60]	; 0x3c

  return HAL_OK;
 800483c:	2300      	movs	r3, #0
}
 800483e:	4618      	mov	r0, r3
 8004840:	3714      	adds	r7, #20
 8004842:	46bd      	mov	sp, r7
 8004844:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004848:	4770      	bx	lr
 800484a:	bf00      	nop
 800484c:	40010000 	.word	0x40010000
 8004850:	40000400 	.word	0x40000400
 8004854:	40000800 	.word	0x40000800
 8004858:	40000c00 	.word	0x40000c00
 800485c:	40014000 	.word	0x40014000

08004860 <HAL_TIMEx_CommutCallback>:
  * @brief  Hall commutation changed callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_CommutCallback(TIM_HandleTypeDef *htim)
{
 8004860:	b480      	push	{r7}
 8004862:	b083      	sub	sp, #12
 8004864:	af00      	add	r7, sp, #0
 8004866:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_CommutCallback could be implemented in the user file
   */
}
 8004868:	bf00      	nop
 800486a:	370c      	adds	r7, #12
 800486c:	46bd      	mov	sp, r7
 800486e:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004872:	4770      	bx	lr

08004874 <HAL_TIMEx_BreakCallback>:
  * @brief  Hall Break detection callback in non-blocking mode
  * @param  htim TIM handle
  * @retval None
  */
__weak void HAL_TIMEx_BreakCallback(TIM_HandleTypeDef *htim)
{
 8004874:	b480      	push	{r7}
 8004876:	b083      	sub	sp, #12
 8004878:	af00      	add	r7, sp, #0
 800487a:	6078      	str	r0, [r7, #4]
  UNUSED(htim);

  /* NOTE : This function should not be modified, when the callback is needed,
            the HAL_TIMEx_BreakCallback could be implemented in the user file
   */
}
 800487c:	bf00      	nop
 800487e:	370c      	adds	r7, #12
 8004880:	46bd      	mov	sp, r7
 8004882:	f85d 7b04 	ldr.w	r7, [sp], #4
 8004886:	4770      	bx	lr

08004888 <HAL_UART_Init>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval HAL status
  */
HAL_StatusTypeDef HAL_UART_Init(UART_HandleTypeDef *huart)
{
 8004888:	b580      	push	{r7, lr}
 800488a:	b082      	sub	sp, #8
 800488c:	af00      	add	r7, sp, #0
 800488e:	6078      	str	r0, [r7, #4]
  /* Check the UART handle allocation */
  if (huart == NULL)
 8004890:	687b      	ldr	r3, [r7, #4]
 8004892:	2b00      	cmp	r3, #0
 8004894:	d101      	bne.n	800489a <HAL_UART_Init+0x12>
  {
    return HAL_ERROR;
 8004896:	2301      	movs	r3, #1
 8004898:	e03f      	b.n	800491a <HAL_UART_Init+0x92>
    assert_param(IS_UART_INSTANCE(huart->Instance));
  }
  assert_param(IS_UART_WORD_LENGTH(huart->Init.WordLength));
  assert_param(IS_UART_OVERSAMPLING(huart->Init.OverSampling));

  if (huart->gState == HAL_UART_STATE_RESET)
 800489a:	687b      	ldr	r3, [r7, #4]
 800489c:	f893 3039 	ldrb.w	r3, [r3, #57]	; 0x39
 80048a0:	b2db      	uxtb	r3, r3
 80048a2:	2b00      	cmp	r3, #0
 80048a4:	d106      	bne.n	80048b4 <HAL_UART_Init+0x2c>
  {
    /* Allocate lock resource and initialize it */
    huart->Lock = HAL_UNLOCKED;
 80048a6:	687b      	ldr	r3, [r7, #4]
 80048a8:	2200      	movs	r2, #0
 80048aa:	f883 2038 	strb.w	r2, [r3, #56]	; 0x38

    /* Init the low level hardware */
    huart->MspInitCallback(huart);
#else
    /* Init the low level hardware : GPIO, CLOCK */
    HAL_UART_MspInit(huart);
 80048ae:	6878      	ldr	r0, [r7, #4]
 80048b0:	f7fd ff98 	bl	80027e4 <HAL_UART_MspInit>
#endif /* (USE_HAL_UART_REGISTER_CALLBACKS) */
  }

  huart->gState = HAL_UART_STATE_BUSY;
 80048b4:	687b      	ldr	r3, [r7, #4]
 80048b6:	2224      	movs	r2, #36	; 0x24
 80048b8:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39

  /* Disable the peripheral */
  __HAL_UART_DISABLE(huart);
 80048bc:	687b      	ldr	r3, [r7, #4]
 80048be:	681b      	ldr	r3, [r3, #0]
 80048c0:	68da      	ldr	r2, [r3, #12]
 80048c2:	687b      	ldr	r3, [r7, #4]
 80048c4:	681b      	ldr	r3, [r3, #0]
 80048c6:	f422 5200 	bic.w	r2, r2, #8192	; 0x2000
 80048ca:	60da      	str	r2, [r3, #12]

  /* Set the UART Communication parameters */
  UART_SetConfig(huart);
 80048cc:	6878      	ldr	r0, [r7, #4]
 80048ce:	f000 f829 	bl	8004924 <UART_SetConfig>

  /* In asynchronous mode, the following bits must be kept cleared:
     - LINEN and CLKEN bits in the USART_CR2 register,
     - SCEN, HDSEL and IREN  bits in the USART_CR3 register.*/
  CLEAR_BIT(huart->Instance->CR2, (USART_CR2_LINEN | USART_CR2_CLKEN));
 80048d2:	687b      	ldr	r3, [r7, #4]
 80048d4:	681b      	ldr	r3, [r3, #0]
 80048d6:	691a      	ldr	r2, [r3, #16]
 80048d8:	687b      	ldr	r3, [r7, #4]
 80048da:	681b      	ldr	r3, [r3, #0]
 80048dc:	f422 4290 	bic.w	r2, r2, #18432	; 0x4800
 80048e0:	611a      	str	r2, [r3, #16]
  CLEAR_BIT(huart->Instance->CR3, (USART_CR3_SCEN | USART_CR3_HDSEL | USART_CR3_IREN));
 80048e2:	687b      	ldr	r3, [r7, #4]
 80048e4:	681b      	ldr	r3, [r3, #0]
 80048e6:	695a      	ldr	r2, [r3, #20]
 80048e8:	687b      	ldr	r3, [r7, #4]
 80048ea:	681b      	ldr	r3, [r3, #0]
 80048ec:	f022 022a 	bic.w	r2, r2, #42	; 0x2a
 80048f0:	615a      	str	r2, [r3, #20]

  /* Enable the peripheral */
  __HAL_UART_ENABLE(huart);
 80048f2:	687b      	ldr	r3, [r7, #4]
 80048f4:	681b      	ldr	r3, [r3, #0]
 80048f6:	68da      	ldr	r2, [r3, #12]
 80048f8:	687b      	ldr	r3, [r7, #4]
 80048fa:	681b      	ldr	r3, [r3, #0]
 80048fc:	f442 5200 	orr.w	r2, r2, #8192	; 0x2000
 8004900:	60da      	str	r2, [r3, #12]

  /* Initialize the UART state */
  huart->ErrorCode = HAL_UART_ERROR_NONE;
 8004902:	687b      	ldr	r3, [r7, #4]
 8004904:	2200      	movs	r2, #0
 8004906:	63da      	str	r2, [r3, #60]	; 0x3c
  huart->gState = HAL_UART_STATE_READY;
 8004908:	687b      	ldr	r3, [r7, #4]
 800490a:	2220      	movs	r2, #32
 800490c:	f883 2039 	strb.w	r2, [r3, #57]	; 0x39
  huart->RxState = HAL_UART_STATE_READY;
 8004910:	687b      	ldr	r3, [r7, #4]
 8004912:	2220      	movs	r2, #32
 8004914:	f883 203a 	strb.w	r2, [r3, #58]	; 0x3a

  return HAL_OK;
 8004918:	2300      	movs	r3, #0
}
 800491a:	4618      	mov	r0, r3
 800491c:	3708      	adds	r7, #8
 800491e:	46bd      	mov	sp, r7
 8004920:	bd80      	pop	{r7, pc}
	...

08004924 <UART_SetConfig>:
  * @param  huart  Pointer to a UART_HandleTypeDef structure that contains
  *                the configuration information for the specified UART module.
  * @retval None
  */
static void UART_SetConfig(UART_HandleTypeDef *huart)
{
 8004924:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8004928:	b0bd      	sub	sp, #244	; 0xf4
 800492a:	af00      	add	r7, sp, #0
 800492c:	f8c7 00e4 	str.w	r0, [r7, #228]	; 0xe4
  assert_param(IS_UART_MODE(huart->Init.Mode));

  /*-------------------------- USART CR2 Configuration -----------------------*/
  /* Configure the UART Stop Bits: Set STOP[13:12] bits
     according to huart->Init.StopBits value */
  MODIFY_REG(huart->Instance->CR2, USART_CR2_STOP, huart->Init.StopBits);
 8004930:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004934:	681b      	ldr	r3, [r3, #0]
 8004936:	691b      	ldr	r3, [r3, #16]
 8004938:	f423 5040 	bic.w	r0, r3, #12288	; 0x3000
 800493c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004940:	68d9      	ldr	r1, [r3, #12]
 8004942:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004946:	681a      	ldr	r2, [r3, #0]
 8004948:	ea40 0301 	orr.w	r3, r0, r1
 800494c:	6113      	str	r3, [r2, #16]
     Set the M bits according to huart->Init.WordLength value
     Set PCE and PS bits according to huart->Init.Parity value
     Set TE and RE bits according to huart->Init.Mode value
     Set OVER8 bit according to huart->Init.OverSampling value */

  tmpreg = (uint32_t)huart->Init.WordLength | huart->Init.Parity | huart->Init.Mode | huart->Init.OverSampling;
 800494e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004952:	689a      	ldr	r2, [r3, #8]
 8004954:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004958:	691b      	ldr	r3, [r3, #16]
 800495a:	431a      	orrs	r2, r3
 800495c:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004960:	695b      	ldr	r3, [r3, #20]
 8004962:	431a      	orrs	r2, r3
 8004964:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004968:	69db      	ldr	r3, [r3, #28]
 800496a:	4313      	orrs	r3, r2
 800496c:	f8c7 30ec 	str.w	r3, [r7, #236]	; 0xec
  MODIFY_REG(huart->Instance->CR1,
 8004970:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004974:	681b      	ldr	r3, [r3, #0]
 8004976:	68db      	ldr	r3, [r3, #12]
 8004978:	f423 4116 	bic.w	r1, r3, #38400	; 0x9600
 800497c:	f021 010c 	bic.w	r1, r1, #12
 8004980:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004984:	681a      	ldr	r2, [r3, #0]
 8004986:	f8d7 30ec 	ldr.w	r3, [r7, #236]	; 0xec
 800498a:	430b      	orrs	r3, r1
 800498c:	60d3      	str	r3, [r2, #12]
             (uint32_t)(USART_CR1_M | USART_CR1_PCE | USART_CR1_PS | USART_CR1_TE | USART_CR1_RE | USART_CR1_OVER8),
             tmpreg);

  /*-------------------------- USART CR3 Configuration -----------------------*/
  /* Configure the UART HFC: Set CTSE and RTSE bits according to huart->Init.HwFlowCtl value */
  MODIFY_REG(huart->Instance->CR3, (USART_CR3_RTSE | USART_CR3_CTSE), huart->Init.HwFlowCtl);
 800498e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004992:	681b      	ldr	r3, [r3, #0]
 8004994:	695b      	ldr	r3, [r3, #20]
 8004996:	f423 7040 	bic.w	r0, r3, #768	; 0x300
 800499a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800499e:	6999      	ldr	r1, [r3, #24]
 80049a0:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049a4:	681a      	ldr	r2, [r3, #0]
 80049a6:	ea40 0301 	orr.w	r3, r0, r1
 80049aa:	6153      	str	r3, [r2, #20]

  /* Check the Over Sampling */
  if (huart->Init.OverSampling == UART_OVERSAMPLING_8)
 80049ac:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049b0:	69db      	ldr	r3, [r3, #28]
 80049b2:	f5b3 4f00 	cmp.w	r3, #32768	; 0x8000
 80049b6:	f040 81a5 	bne.w	8004d04 <UART_SetConfig+0x3e0>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#elif defined(USART6)
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 80049ba:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049be:	681a      	ldr	r2, [r3, #0]
 80049c0:	4bcd      	ldr	r3, [pc, #820]	; (8004cf8 <UART_SetConfig+0x3d4>)
 80049c2:	429a      	cmp	r2, r3
 80049c4:	d006      	beq.n	80049d4 <UART_SetConfig+0xb0>
 80049c6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 80049ca:	681a      	ldr	r2, [r3, #0]
 80049cc:	4bcb      	ldr	r3, [pc, #812]	; (8004cfc <UART_SetConfig+0x3d8>)
 80049ce:	429a      	cmp	r2, r3
 80049d0:	f040 80cb 	bne.w	8004b6a <UART_SetConfig+0x246>
    {
      pclk = HAL_RCC_GetPCLK2Freq();
 80049d4:	f7fe ff98 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 80049d8:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 80049dc:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 80049e0:	461c      	mov	r4, r3
 80049e2:	f04f 0500 	mov.w	r5, #0
 80049e6:	4622      	mov	r2, r4
 80049e8:	462b      	mov	r3, r5
 80049ea:	1891      	adds	r1, r2, r2
 80049ec:	f8c7 1088 	str.w	r1, [r7, #136]	; 0x88
 80049f0:	415b      	adcs	r3, r3
 80049f2:	f8c7 308c 	str.w	r3, [r7, #140]	; 0x8c
 80049f6:	e9d7 2322 	ldrd	r2, r3, [r7, #136]	; 0x88
 80049fa:	1912      	adds	r2, r2, r4
 80049fc:	eb45 0303 	adc.w	r3, r5, r3
 8004a00:	f04f 0000 	mov.w	r0, #0
 8004a04:	f04f 0100 	mov.w	r1, #0
 8004a08:	00d9      	lsls	r1, r3, #3
 8004a0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a0e:	00d0      	lsls	r0, r2, #3
 8004a10:	4602      	mov	r2, r0
 8004a12:	460b      	mov	r3, r1
 8004a14:	1911      	adds	r1, r2, r4
 8004a16:	f8c7 10d8 	str.w	r1, [r7, #216]	; 0xd8
 8004a1a:	416b      	adcs	r3, r5
 8004a1c:	f8c7 30dc 	str.w	r3, [r7, #220]	; 0xdc
 8004a20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a24:	685b      	ldr	r3, [r3, #4]
 8004a26:	461a      	mov	r2, r3
 8004a28:	f04f 0300 	mov.w	r3, #0
 8004a2c:	1891      	adds	r1, r2, r2
 8004a2e:	f8c7 1080 	str.w	r1, [r7, #128]	; 0x80
 8004a32:	415b      	adcs	r3, r3
 8004a34:	f8c7 3084 	str.w	r3, [r7, #132]	; 0x84
 8004a38:	e9d7 2320 	ldrd	r2, r3, [r7, #128]	; 0x80
 8004a3c:	e9d7 0136 	ldrd	r0, r1, [r7, #216]	; 0xd8
 8004a40:	f7fc f994 	bl	8000d6c <__aeabi_uldivmod>
 8004a44:	4602      	mov	r2, r0
 8004a46:	460b      	mov	r3, r1
 8004a48:	4bad      	ldr	r3, [pc, #692]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004a4a:	fba3 2302 	umull	r2, r3, r3, r2
 8004a4e:	095b      	lsrs	r3, r3, #5
 8004a50:	011e      	lsls	r6, r3, #4
 8004a52:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004a56:	461c      	mov	r4, r3
 8004a58:	f04f 0500 	mov.w	r5, #0
 8004a5c:	4622      	mov	r2, r4
 8004a5e:	462b      	mov	r3, r5
 8004a60:	1891      	adds	r1, r2, r2
 8004a62:	67b9      	str	r1, [r7, #120]	; 0x78
 8004a64:	415b      	adcs	r3, r3
 8004a66:	67fb      	str	r3, [r7, #124]	; 0x7c
 8004a68:	e9d7 231e 	ldrd	r2, r3, [r7, #120]	; 0x78
 8004a6c:	1912      	adds	r2, r2, r4
 8004a6e:	eb45 0303 	adc.w	r3, r5, r3
 8004a72:	f04f 0000 	mov.w	r0, #0
 8004a76:	f04f 0100 	mov.w	r1, #0
 8004a7a:	00d9      	lsls	r1, r3, #3
 8004a7c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004a80:	00d0      	lsls	r0, r2, #3
 8004a82:	4602      	mov	r2, r0
 8004a84:	460b      	mov	r3, r1
 8004a86:	1911      	adds	r1, r2, r4
 8004a88:	f8c7 10d0 	str.w	r1, [r7, #208]	; 0xd0
 8004a8c:	416b      	adcs	r3, r5
 8004a8e:	f8c7 30d4 	str.w	r3, [r7, #212]	; 0xd4
 8004a92:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004a96:	685b      	ldr	r3, [r3, #4]
 8004a98:	461a      	mov	r2, r3
 8004a9a:	f04f 0300 	mov.w	r3, #0
 8004a9e:	1891      	adds	r1, r2, r2
 8004aa0:	6739      	str	r1, [r7, #112]	; 0x70
 8004aa2:	415b      	adcs	r3, r3
 8004aa4:	677b      	str	r3, [r7, #116]	; 0x74
 8004aa6:	e9d7 231c 	ldrd	r2, r3, [r7, #112]	; 0x70
 8004aaa:	e9d7 0134 	ldrd	r0, r1, [r7, #208]	; 0xd0
 8004aae:	f7fc f95d 	bl	8000d6c <__aeabi_uldivmod>
 8004ab2:	4602      	mov	r2, r0
 8004ab4:	460b      	mov	r3, r1
 8004ab6:	4b92      	ldr	r3, [pc, #584]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004ab8:	fba3 1302 	umull	r1, r3, r3, r2
 8004abc:	095b      	lsrs	r3, r3, #5
 8004abe:	2164      	movs	r1, #100	; 0x64
 8004ac0:	fb01 f303 	mul.w	r3, r1, r3
 8004ac4:	1ad3      	subs	r3, r2, r3
 8004ac6:	00db      	lsls	r3, r3, #3
 8004ac8:	3332      	adds	r3, #50	; 0x32
 8004aca:	4a8d      	ldr	r2, [pc, #564]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004acc:	fba2 2303 	umull	r2, r3, r2, r3
 8004ad0:	095b      	lsrs	r3, r3, #5
 8004ad2:	005b      	lsls	r3, r3, #1
 8004ad4:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004ad8:	441e      	add	r6, r3
 8004ada:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ade:	4618      	mov	r0, r3
 8004ae0:	f04f 0100 	mov.w	r1, #0
 8004ae4:	4602      	mov	r2, r0
 8004ae6:	460b      	mov	r3, r1
 8004ae8:	1894      	adds	r4, r2, r2
 8004aea:	66bc      	str	r4, [r7, #104]	; 0x68
 8004aec:	415b      	adcs	r3, r3
 8004aee:	66fb      	str	r3, [r7, #108]	; 0x6c
 8004af0:	e9d7 231a 	ldrd	r2, r3, [r7, #104]	; 0x68
 8004af4:	1812      	adds	r2, r2, r0
 8004af6:	eb41 0303 	adc.w	r3, r1, r3
 8004afa:	f04f 0400 	mov.w	r4, #0
 8004afe:	f04f 0500 	mov.w	r5, #0
 8004b02:	00dd      	lsls	r5, r3, #3
 8004b04:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004b08:	00d4      	lsls	r4, r2, #3
 8004b0a:	4622      	mov	r2, r4
 8004b0c:	462b      	mov	r3, r5
 8004b0e:	1814      	adds	r4, r2, r0
 8004b10:	f8c7 40c8 	str.w	r4, [r7, #200]	; 0xc8
 8004b14:	414b      	adcs	r3, r1
 8004b16:	f8c7 30cc 	str.w	r3, [r7, #204]	; 0xcc
 8004b1a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b1e:	685b      	ldr	r3, [r3, #4]
 8004b20:	461a      	mov	r2, r3
 8004b22:	f04f 0300 	mov.w	r3, #0
 8004b26:	1891      	adds	r1, r2, r2
 8004b28:	6639      	str	r1, [r7, #96]	; 0x60
 8004b2a:	415b      	adcs	r3, r3
 8004b2c:	667b      	str	r3, [r7, #100]	; 0x64
 8004b2e:	e9d7 2318 	ldrd	r2, r3, [r7, #96]	; 0x60
 8004b32:	e9d7 0132 	ldrd	r0, r1, [r7, #200]	; 0xc8
 8004b36:	f7fc f919 	bl	8000d6c <__aeabi_uldivmod>
 8004b3a:	4602      	mov	r2, r0
 8004b3c:	460b      	mov	r3, r1
 8004b3e:	4b70      	ldr	r3, [pc, #448]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004b40:	fba3 1302 	umull	r1, r3, r3, r2
 8004b44:	095b      	lsrs	r3, r3, #5
 8004b46:	2164      	movs	r1, #100	; 0x64
 8004b48:	fb01 f303 	mul.w	r3, r1, r3
 8004b4c:	1ad3      	subs	r3, r2, r3
 8004b4e:	00db      	lsls	r3, r3, #3
 8004b50:	3332      	adds	r3, #50	; 0x32
 8004b52:	4a6b      	ldr	r2, [pc, #428]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004b54:	fba2 2303 	umull	r2, r3, r2, r3
 8004b58:	095b      	lsrs	r3, r3, #5
 8004b5a:	f003 0207 	and.w	r2, r3, #7
 8004b5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004b62:	681b      	ldr	r3, [r3, #0]
 8004b64:	4432      	add	r2, r6
 8004b66:	609a      	str	r2, [r3, #8]
 8004b68:	e26d      	b.n	8005046 <UART_SetConfig+0x722>
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
    }
#endif /* USART6 */
    else
    {
      pclk = HAL_RCC_GetPCLK1Freq();
 8004b6a:	f7fe feb9 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004b6e:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING8(pclk, huart->Init.BaudRate);
 8004b72:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004b76:	461c      	mov	r4, r3
 8004b78:	f04f 0500 	mov.w	r5, #0
 8004b7c:	4622      	mov	r2, r4
 8004b7e:	462b      	mov	r3, r5
 8004b80:	1891      	adds	r1, r2, r2
 8004b82:	65b9      	str	r1, [r7, #88]	; 0x58
 8004b84:	415b      	adcs	r3, r3
 8004b86:	65fb      	str	r3, [r7, #92]	; 0x5c
 8004b88:	e9d7 2316 	ldrd	r2, r3, [r7, #88]	; 0x58
 8004b8c:	1912      	adds	r2, r2, r4
 8004b8e:	eb45 0303 	adc.w	r3, r5, r3
 8004b92:	f04f 0000 	mov.w	r0, #0
 8004b96:	f04f 0100 	mov.w	r1, #0
 8004b9a:	00d9      	lsls	r1, r3, #3
 8004b9c:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ba0:	00d0      	lsls	r0, r2, #3
 8004ba2:	4602      	mov	r2, r0
 8004ba4:	460b      	mov	r3, r1
 8004ba6:	1911      	adds	r1, r2, r4
 8004ba8:	f8c7 10c0 	str.w	r1, [r7, #192]	; 0xc0
 8004bac:	416b      	adcs	r3, r5
 8004bae:	f8c7 30c4 	str.w	r3, [r7, #196]	; 0xc4
 8004bb2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004bb6:	685b      	ldr	r3, [r3, #4]
 8004bb8:	461a      	mov	r2, r3
 8004bba:	f04f 0300 	mov.w	r3, #0
 8004bbe:	1891      	adds	r1, r2, r2
 8004bc0:	6539      	str	r1, [r7, #80]	; 0x50
 8004bc2:	415b      	adcs	r3, r3
 8004bc4:	657b      	str	r3, [r7, #84]	; 0x54
 8004bc6:	e9d7 2314 	ldrd	r2, r3, [r7, #80]	; 0x50
 8004bca:	e9d7 0130 	ldrd	r0, r1, [r7, #192]	; 0xc0
 8004bce:	f7fc f8cd 	bl	8000d6c <__aeabi_uldivmod>
 8004bd2:	4602      	mov	r2, r0
 8004bd4:	460b      	mov	r3, r1
 8004bd6:	4b4a      	ldr	r3, [pc, #296]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004bd8:	fba3 2302 	umull	r2, r3, r3, r2
 8004bdc:	095b      	lsrs	r3, r3, #5
 8004bde:	011e      	lsls	r6, r3, #4
 8004be0:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004be4:	461c      	mov	r4, r3
 8004be6:	f04f 0500 	mov.w	r5, #0
 8004bea:	4622      	mov	r2, r4
 8004bec:	462b      	mov	r3, r5
 8004bee:	1891      	adds	r1, r2, r2
 8004bf0:	64b9      	str	r1, [r7, #72]	; 0x48
 8004bf2:	415b      	adcs	r3, r3
 8004bf4:	64fb      	str	r3, [r7, #76]	; 0x4c
 8004bf6:	e9d7 2312 	ldrd	r2, r3, [r7, #72]	; 0x48
 8004bfa:	1912      	adds	r2, r2, r4
 8004bfc:	eb45 0303 	adc.w	r3, r5, r3
 8004c00:	f04f 0000 	mov.w	r0, #0
 8004c04:	f04f 0100 	mov.w	r1, #0
 8004c08:	00d9      	lsls	r1, r3, #3
 8004c0a:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004c0e:	00d0      	lsls	r0, r2, #3
 8004c10:	4602      	mov	r2, r0
 8004c12:	460b      	mov	r3, r1
 8004c14:	1911      	adds	r1, r2, r4
 8004c16:	f8c7 10b8 	str.w	r1, [r7, #184]	; 0xb8
 8004c1a:	416b      	adcs	r3, r5
 8004c1c:	f8c7 30bc 	str.w	r3, [r7, #188]	; 0xbc
 8004c20:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004c24:	685b      	ldr	r3, [r3, #4]
 8004c26:	461a      	mov	r2, r3
 8004c28:	f04f 0300 	mov.w	r3, #0
 8004c2c:	1891      	adds	r1, r2, r2
 8004c2e:	6439      	str	r1, [r7, #64]	; 0x40
 8004c30:	415b      	adcs	r3, r3
 8004c32:	647b      	str	r3, [r7, #68]	; 0x44
 8004c34:	e9d7 2310 	ldrd	r2, r3, [r7, #64]	; 0x40
 8004c38:	e9d7 012e 	ldrd	r0, r1, [r7, #184]	; 0xb8
 8004c3c:	f7fc f896 	bl	8000d6c <__aeabi_uldivmod>
 8004c40:	4602      	mov	r2, r0
 8004c42:	460b      	mov	r3, r1
 8004c44:	4b2e      	ldr	r3, [pc, #184]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004c46:	fba3 1302 	umull	r1, r3, r3, r2
 8004c4a:	095b      	lsrs	r3, r3, #5
 8004c4c:	2164      	movs	r1, #100	; 0x64
 8004c4e:	fb01 f303 	mul.w	r3, r1, r3
 8004c52:	1ad3      	subs	r3, r2, r3
 8004c54:	00db      	lsls	r3, r3, #3
 8004c56:	3332      	adds	r3, #50	; 0x32
 8004c58:	4a29      	ldr	r2, [pc, #164]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004c5a:	fba2 2303 	umull	r2, r3, r2, r3
 8004c5e:	095b      	lsrs	r3, r3, #5
 8004c60:	005b      	lsls	r3, r3, #1
 8004c62:	f403 73f8 	and.w	r3, r3, #496	; 0x1f0
 8004c66:	441e      	add	r6, r3
 8004c68:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004c6c:	4618      	mov	r0, r3
 8004c6e:	f04f 0100 	mov.w	r1, #0
 8004c72:	4602      	mov	r2, r0
 8004c74:	460b      	mov	r3, r1
 8004c76:	1894      	adds	r4, r2, r2
 8004c78:	63bc      	str	r4, [r7, #56]	; 0x38
 8004c7a:	415b      	adcs	r3, r3
 8004c7c:	63fb      	str	r3, [r7, #60]	; 0x3c
 8004c7e:	e9d7 230e 	ldrd	r2, r3, [r7, #56]	; 0x38
 8004c82:	1812      	adds	r2, r2, r0
 8004c84:	eb41 0303 	adc.w	r3, r1, r3
 8004c88:	f04f 0400 	mov.w	r4, #0
 8004c8c:	f04f 0500 	mov.w	r5, #0
 8004c90:	00dd      	lsls	r5, r3, #3
 8004c92:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004c96:	00d4      	lsls	r4, r2, #3
 8004c98:	4622      	mov	r2, r4
 8004c9a:	462b      	mov	r3, r5
 8004c9c:	1814      	adds	r4, r2, r0
 8004c9e:	f8c7 40b0 	str.w	r4, [r7, #176]	; 0xb0
 8004ca2:	414b      	adcs	r3, r1
 8004ca4:	f8c7 30b4 	str.w	r3, [r7, #180]	; 0xb4
 8004ca8:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cac:	685b      	ldr	r3, [r3, #4]
 8004cae:	461a      	mov	r2, r3
 8004cb0:	f04f 0300 	mov.w	r3, #0
 8004cb4:	1891      	adds	r1, r2, r2
 8004cb6:	6339      	str	r1, [r7, #48]	; 0x30
 8004cb8:	415b      	adcs	r3, r3
 8004cba:	637b      	str	r3, [r7, #52]	; 0x34
 8004cbc:	e9d7 230c 	ldrd	r2, r3, [r7, #48]	; 0x30
 8004cc0:	e9d7 012c 	ldrd	r0, r1, [r7, #176]	; 0xb0
 8004cc4:	f7fc f852 	bl	8000d6c <__aeabi_uldivmod>
 8004cc8:	4602      	mov	r2, r0
 8004cca:	460b      	mov	r3, r1
 8004ccc:	4b0c      	ldr	r3, [pc, #48]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004cce:	fba3 1302 	umull	r1, r3, r3, r2
 8004cd2:	095b      	lsrs	r3, r3, #5
 8004cd4:	2164      	movs	r1, #100	; 0x64
 8004cd6:	fb01 f303 	mul.w	r3, r1, r3
 8004cda:	1ad3      	subs	r3, r2, r3
 8004cdc:	00db      	lsls	r3, r3, #3
 8004cde:	3332      	adds	r3, #50	; 0x32
 8004ce0:	4a07      	ldr	r2, [pc, #28]	; (8004d00 <UART_SetConfig+0x3dc>)
 8004ce2:	fba2 2303 	umull	r2, r3, r2, r3
 8004ce6:	095b      	lsrs	r3, r3, #5
 8004ce8:	f003 0207 	and.w	r2, r3, #7
 8004cec:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004cf0:	681b      	ldr	r3, [r3, #0]
 8004cf2:	4432      	add	r2, r6
 8004cf4:	609a      	str	r2, [r3, #8]
    {
      pclk = HAL_RCC_GetPCLK1Freq();
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
    }
  }
}
 8004cf6:	e1a6      	b.n	8005046 <UART_SetConfig+0x722>
 8004cf8:	40011000 	.word	0x40011000
 8004cfc:	40011400 	.word	0x40011400
 8004d00:	51eb851f 	.word	0x51eb851f
    if ((huart->Instance == USART1) || (huart->Instance == USART6))
 8004d04:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d08:	681a      	ldr	r2, [r3, #0]
 8004d0a:	4bd1      	ldr	r3, [pc, #836]	; (8005050 <UART_SetConfig+0x72c>)
 8004d0c:	429a      	cmp	r2, r3
 8004d0e:	d006      	beq.n	8004d1e <UART_SetConfig+0x3fa>
 8004d10:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d14:	681a      	ldr	r2, [r3, #0]
 8004d16:	4bcf      	ldr	r3, [pc, #828]	; (8005054 <UART_SetConfig+0x730>)
 8004d18:	429a      	cmp	r2, r3
 8004d1a:	f040 80ca 	bne.w	8004eb2 <UART_SetConfig+0x58e>
      pclk = HAL_RCC_GetPCLK2Freq();
 8004d1e:	f7fe fdf3 	bl	8003908 <HAL_RCC_GetPCLK2Freq>
 8004d22:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004d26:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d2a:	461c      	mov	r4, r3
 8004d2c:	f04f 0500 	mov.w	r5, #0
 8004d30:	4622      	mov	r2, r4
 8004d32:	462b      	mov	r3, r5
 8004d34:	1891      	adds	r1, r2, r2
 8004d36:	62b9      	str	r1, [r7, #40]	; 0x28
 8004d38:	415b      	adcs	r3, r3
 8004d3a:	62fb      	str	r3, [r7, #44]	; 0x2c
 8004d3c:	e9d7 230a 	ldrd	r2, r3, [r7, #40]	; 0x28
 8004d40:	1912      	adds	r2, r2, r4
 8004d42:	eb45 0303 	adc.w	r3, r5, r3
 8004d46:	f04f 0000 	mov.w	r0, #0
 8004d4a:	f04f 0100 	mov.w	r1, #0
 8004d4e:	00d9      	lsls	r1, r3, #3
 8004d50:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004d54:	00d0      	lsls	r0, r2, #3
 8004d56:	4602      	mov	r2, r0
 8004d58:	460b      	mov	r3, r1
 8004d5a:	eb12 0a04 	adds.w	sl, r2, r4
 8004d5e:	eb43 0b05 	adc.w	fp, r3, r5
 8004d62:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004d66:	685b      	ldr	r3, [r3, #4]
 8004d68:	4618      	mov	r0, r3
 8004d6a:	f04f 0100 	mov.w	r1, #0
 8004d6e:	f04f 0200 	mov.w	r2, #0
 8004d72:	f04f 0300 	mov.w	r3, #0
 8004d76:	008b      	lsls	r3, r1, #2
 8004d78:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004d7c:	0082      	lsls	r2, r0, #2
 8004d7e:	4650      	mov	r0, sl
 8004d80:	4659      	mov	r1, fp
 8004d82:	f7fb fff3 	bl	8000d6c <__aeabi_uldivmod>
 8004d86:	4602      	mov	r2, r0
 8004d88:	460b      	mov	r3, r1
 8004d8a:	4bb3      	ldr	r3, [pc, #716]	; (8005058 <UART_SetConfig+0x734>)
 8004d8c:	fba3 2302 	umull	r2, r3, r3, r2
 8004d90:	095b      	lsrs	r3, r3, #5
 8004d92:	011e      	lsls	r6, r3, #4
 8004d94:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004d98:	4618      	mov	r0, r3
 8004d9a:	f04f 0100 	mov.w	r1, #0
 8004d9e:	4602      	mov	r2, r0
 8004da0:	460b      	mov	r3, r1
 8004da2:	1894      	adds	r4, r2, r2
 8004da4:	623c      	str	r4, [r7, #32]
 8004da6:	415b      	adcs	r3, r3
 8004da8:	627b      	str	r3, [r7, #36]	; 0x24
 8004daa:	e9d7 2308 	ldrd	r2, r3, [r7, #32]
 8004dae:	1812      	adds	r2, r2, r0
 8004db0:	eb41 0303 	adc.w	r3, r1, r3
 8004db4:	f04f 0400 	mov.w	r4, #0
 8004db8:	f04f 0500 	mov.w	r5, #0
 8004dbc:	00dd      	lsls	r5, r3, #3
 8004dbe:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004dc2:	00d4      	lsls	r4, r2, #3
 8004dc4:	4622      	mov	r2, r4
 8004dc6:	462b      	mov	r3, r5
 8004dc8:	1814      	adds	r4, r2, r0
 8004dca:	f8c7 40a8 	str.w	r4, [r7, #168]	; 0xa8
 8004dce:	414b      	adcs	r3, r1
 8004dd0:	f8c7 30ac 	str.w	r3, [r7, #172]	; 0xac
 8004dd4:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004dd8:	685b      	ldr	r3, [r3, #4]
 8004dda:	4618      	mov	r0, r3
 8004ddc:	f04f 0100 	mov.w	r1, #0
 8004de0:	f04f 0200 	mov.w	r2, #0
 8004de4:	f04f 0300 	mov.w	r3, #0
 8004de8:	008b      	lsls	r3, r1, #2
 8004dea:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004dee:	0082      	lsls	r2, r0, #2
 8004df0:	e9d7 012a 	ldrd	r0, r1, [r7, #168]	; 0xa8
 8004df4:	f7fb ffba 	bl	8000d6c <__aeabi_uldivmod>
 8004df8:	4602      	mov	r2, r0
 8004dfa:	460b      	mov	r3, r1
 8004dfc:	4b96      	ldr	r3, [pc, #600]	; (8005058 <UART_SetConfig+0x734>)
 8004dfe:	fba3 1302 	umull	r1, r3, r3, r2
 8004e02:	095b      	lsrs	r3, r3, #5
 8004e04:	2164      	movs	r1, #100	; 0x64
 8004e06:	fb01 f303 	mul.w	r3, r1, r3
 8004e0a:	1ad3      	subs	r3, r2, r3
 8004e0c:	011b      	lsls	r3, r3, #4
 8004e0e:	3332      	adds	r3, #50	; 0x32
 8004e10:	4a91      	ldr	r2, [pc, #580]	; (8005058 <UART_SetConfig+0x734>)
 8004e12:	fba2 2303 	umull	r2, r3, r2, r3
 8004e16:	095b      	lsrs	r3, r3, #5
 8004e18:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004e1c:	441e      	add	r6, r3
 8004e1e:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004e22:	4618      	mov	r0, r3
 8004e24:	f04f 0100 	mov.w	r1, #0
 8004e28:	4602      	mov	r2, r0
 8004e2a:	460b      	mov	r3, r1
 8004e2c:	1894      	adds	r4, r2, r2
 8004e2e:	61bc      	str	r4, [r7, #24]
 8004e30:	415b      	adcs	r3, r3
 8004e32:	61fb      	str	r3, [r7, #28]
 8004e34:	e9d7 2306 	ldrd	r2, r3, [r7, #24]
 8004e38:	1812      	adds	r2, r2, r0
 8004e3a:	eb41 0303 	adc.w	r3, r1, r3
 8004e3e:	f04f 0400 	mov.w	r4, #0
 8004e42:	f04f 0500 	mov.w	r5, #0
 8004e46:	00dd      	lsls	r5, r3, #3
 8004e48:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004e4c:	00d4      	lsls	r4, r2, #3
 8004e4e:	4622      	mov	r2, r4
 8004e50:	462b      	mov	r3, r5
 8004e52:	1814      	adds	r4, r2, r0
 8004e54:	f8c7 40a0 	str.w	r4, [r7, #160]	; 0xa0
 8004e58:	414b      	adcs	r3, r1
 8004e5a:	f8c7 30a4 	str.w	r3, [r7, #164]	; 0xa4
 8004e5e:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004e62:	685b      	ldr	r3, [r3, #4]
 8004e64:	4618      	mov	r0, r3
 8004e66:	f04f 0100 	mov.w	r1, #0
 8004e6a:	f04f 0200 	mov.w	r2, #0
 8004e6e:	f04f 0300 	mov.w	r3, #0
 8004e72:	008b      	lsls	r3, r1, #2
 8004e74:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004e78:	0082      	lsls	r2, r0, #2
 8004e7a:	e9d7 0128 	ldrd	r0, r1, [r7, #160]	; 0xa0
 8004e7e:	f7fb ff75 	bl	8000d6c <__aeabi_uldivmod>
 8004e82:	4602      	mov	r2, r0
 8004e84:	460b      	mov	r3, r1
 8004e86:	4b74      	ldr	r3, [pc, #464]	; (8005058 <UART_SetConfig+0x734>)
 8004e88:	fba3 1302 	umull	r1, r3, r3, r2
 8004e8c:	095b      	lsrs	r3, r3, #5
 8004e8e:	2164      	movs	r1, #100	; 0x64
 8004e90:	fb01 f303 	mul.w	r3, r1, r3
 8004e94:	1ad3      	subs	r3, r2, r3
 8004e96:	011b      	lsls	r3, r3, #4
 8004e98:	3332      	adds	r3, #50	; 0x32
 8004e9a:	4a6f      	ldr	r2, [pc, #444]	; (8005058 <UART_SetConfig+0x734>)
 8004e9c:	fba2 2303 	umull	r2, r3, r2, r3
 8004ea0:	095b      	lsrs	r3, r3, #5
 8004ea2:	f003 020f 	and.w	r2, r3, #15
 8004ea6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004eaa:	681b      	ldr	r3, [r3, #0]
 8004eac:	4432      	add	r2, r6
 8004eae:	609a      	str	r2, [r3, #8]
 8004eb0:	e0c9      	b.n	8005046 <UART_SetConfig+0x722>
      pclk = HAL_RCC_GetPCLK1Freq();
 8004eb2:	f7fe fd15 	bl	80038e0 <HAL_RCC_GetPCLK1Freq>
 8004eb6:	f8c7 00e8 	str.w	r0, [r7, #232]	; 0xe8
      huart->Instance->BRR = UART_BRR_SAMPLING16(pclk, huart->Init.BaudRate);
 8004eba:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004ebe:	461c      	mov	r4, r3
 8004ec0:	f04f 0500 	mov.w	r5, #0
 8004ec4:	4622      	mov	r2, r4
 8004ec6:	462b      	mov	r3, r5
 8004ec8:	1891      	adds	r1, r2, r2
 8004eca:	6139      	str	r1, [r7, #16]
 8004ecc:	415b      	adcs	r3, r3
 8004ece:	617b      	str	r3, [r7, #20]
 8004ed0:	e9d7 2304 	ldrd	r2, r3, [r7, #16]
 8004ed4:	1912      	adds	r2, r2, r4
 8004ed6:	eb45 0303 	adc.w	r3, r5, r3
 8004eda:	f04f 0000 	mov.w	r0, #0
 8004ede:	f04f 0100 	mov.w	r1, #0
 8004ee2:	00d9      	lsls	r1, r3, #3
 8004ee4:	ea41 7152 	orr.w	r1, r1, r2, lsr #29
 8004ee8:	00d0      	lsls	r0, r2, #3
 8004eea:	4602      	mov	r2, r0
 8004eec:	460b      	mov	r3, r1
 8004eee:	eb12 0804 	adds.w	r8, r2, r4
 8004ef2:	eb43 0905 	adc.w	r9, r3, r5
 8004ef6:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004efa:	685b      	ldr	r3, [r3, #4]
 8004efc:	4618      	mov	r0, r3
 8004efe:	f04f 0100 	mov.w	r1, #0
 8004f02:	f04f 0200 	mov.w	r2, #0
 8004f06:	f04f 0300 	mov.w	r3, #0
 8004f0a:	008b      	lsls	r3, r1, #2
 8004f0c:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f10:	0082      	lsls	r2, r0, #2
 8004f12:	4640      	mov	r0, r8
 8004f14:	4649      	mov	r1, r9
 8004f16:	f7fb ff29 	bl	8000d6c <__aeabi_uldivmod>
 8004f1a:	4602      	mov	r2, r0
 8004f1c:	460b      	mov	r3, r1
 8004f1e:	4b4e      	ldr	r3, [pc, #312]	; (8005058 <UART_SetConfig+0x734>)
 8004f20:	fba3 2302 	umull	r2, r3, r3, r2
 8004f24:	095b      	lsrs	r3, r3, #5
 8004f26:	011e      	lsls	r6, r3, #4
 8004f28:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004f2c:	4618      	mov	r0, r3
 8004f2e:	f04f 0100 	mov.w	r1, #0
 8004f32:	4602      	mov	r2, r0
 8004f34:	460b      	mov	r3, r1
 8004f36:	1894      	adds	r4, r2, r2
 8004f38:	60bc      	str	r4, [r7, #8]
 8004f3a:	415b      	adcs	r3, r3
 8004f3c:	60fb      	str	r3, [r7, #12]
 8004f3e:	e9d7 2302 	ldrd	r2, r3, [r7, #8]
 8004f42:	1812      	adds	r2, r2, r0
 8004f44:	eb41 0303 	adc.w	r3, r1, r3
 8004f48:	f04f 0400 	mov.w	r4, #0
 8004f4c:	f04f 0500 	mov.w	r5, #0
 8004f50:	00dd      	lsls	r5, r3, #3
 8004f52:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004f56:	00d4      	lsls	r4, r2, #3
 8004f58:	4622      	mov	r2, r4
 8004f5a:	462b      	mov	r3, r5
 8004f5c:	1814      	adds	r4, r2, r0
 8004f5e:	f8c7 4098 	str.w	r4, [r7, #152]	; 0x98
 8004f62:	414b      	adcs	r3, r1
 8004f64:	f8c7 309c 	str.w	r3, [r7, #156]	; 0x9c
 8004f68:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004f6c:	685b      	ldr	r3, [r3, #4]
 8004f6e:	4618      	mov	r0, r3
 8004f70:	f04f 0100 	mov.w	r1, #0
 8004f74:	f04f 0200 	mov.w	r2, #0
 8004f78:	f04f 0300 	mov.w	r3, #0
 8004f7c:	008b      	lsls	r3, r1, #2
 8004f7e:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 8004f82:	0082      	lsls	r2, r0, #2
 8004f84:	e9d7 0126 	ldrd	r0, r1, [r7, #152]	; 0x98
 8004f88:	f7fb fef0 	bl	8000d6c <__aeabi_uldivmod>
 8004f8c:	4602      	mov	r2, r0
 8004f8e:	460b      	mov	r3, r1
 8004f90:	4b31      	ldr	r3, [pc, #196]	; (8005058 <UART_SetConfig+0x734>)
 8004f92:	fba3 1302 	umull	r1, r3, r3, r2
 8004f96:	095b      	lsrs	r3, r3, #5
 8004f98:	2164      	movs	r1, #100	; 0x64
 8004f9a:	fb01 f303 	mul.w	r3, r1, r3
 8004f9e:	1ad3      	subs	r3, r2, r3
 8004fa0:	011b      	lsls	r3, r3, #4
 8004fa2:	3332      	adds	r3, #50	; 0x32
 8004fa4:	4a2c      	ldr	r2, [pc, #176]	; (8005058 <UART_SetConfig+0x734>)
 8004fa6:	fba2 2303 	umull	r2, r3, r2, r3
 8004faa:	095b      	lsrs	r3, r3, #5
 8004fac:	f003 03f0 	and.w	r3, r3, #240	; 0xf0
 8004fb0:	441e      	add	r6, r3
 8004fb2:	f8d7 30e8 	ldr.w	r3, [r7, #232]	; 0xe8
 8004fb6:	4618      	mov	r0, r3
 8004fb8:	f04f 0100 	mov.w	r1, #0
 8004fbc:	4602      	mov	r2, r0
 8004fbe:	460b      	mov	r3, r1
 8004fc0:	1894      	adds	r4, r2, r2
 8004fc2:	603c      	str	r4, [r7, #0]
 8004fc4:	415b      	adcs	r3, r3
 8004fc6:	607b      	str	r3, [r7, #4]
 8004fc8:	e9d7 2300 	ldrd	r2, r3, [r7]
 8004fcc:	1812      	adds	r2, r2, r0
 8004fce:	eb41 0303 	adc.w	r3, r1, r3
 8004fd2:	f04f 0400 	mov.w	r4, #0
 8004fd6:	f04f 0500 	mov.w	r5, #0
 8004fda:	00dd      	lsls	r5, r3, #3
 8004fdc:	ea45 7552 	orr.w	r5, r5, r2, lsr #29
 8004fe0:	00d4      	lsls	r4, r2, #3
 8004fe2:	4622      	mov	r2, r4
 8004fe4:	462b      	mov	r3, r5
 8004fe6:	1814      	adds	r4, r2, r0
 8004fe8:	f8c7 4090 	str.w	r4, [r7, #144]	; 0x90
 8004fec:	414b      	adcs	r3, r1
 8004fee:	f8c7 3094 	str.w	r3, [r7, #148]	; 0x94
 8004ff2:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 8004ff6:	685b      	ldr	r3, [r3, #4]
 8004ff8:	4618      	mov	r0, r3
 8004ffa:	f04f 0100 	mov.w	r1, #0
 8004ffe:	f04f 0200 	mov.w	r2, #0
 8005002:	f04f 0300 	mov.w	r3, #0
 8005006:	008b      	lsls	r3, r1, #2
 8005008:	ea43 7390 	orr.w	r3, r3, r0, lsr #30
 800500c:	0082      	lsls	r2, r0, #2
 800500e:	e9d7 0124 	ldrd	r0, r1, [r7, #144]	; 0x90
 8005012:	f7fb feab 	bl	8000d6c <__aeabi_uldivmod>
 8005016:	4602      	mov	r2, r0
 8005018:	460b      	mov	r3, r1
 800501a:	4b0f      	ldr	r3, [pc, #60]	; (8005058 <UART_SetConfig+0x734>)
 800501c:	fba3 1302 	umull	r1, r3, r3, r2
 8005020:	095b      	lsrs	r3, r3, #5
 8005022:	2164      	movs	r1, #100	; 0x64
 8005024:	fb01 f303 	mul.w	r3, r1, r3
 8005028:	1ad3      	subs	r3, r2, r3
 800502a:	011b      	lsls	r3, r3, #4
 800502c:	3332      	adds	r3, #50	; 0x32
 800502e:	4a0a      	ldr	r2, [pc, #40]	; (8005058 <UART_SetConfig+0x734>)
 8005030:	fba2 2303 	umull	r2, r3, r2, r3
 8005034:	095b      	lsrs	r3, r3, #5
 8005036:	f003 020f 	and.w	r2, r3, #15
 800503a:	f8d7 30e4 	ldr.w	r3, [r7, #228]	; 0xe4
 800503e:	681b      	ldr	r3, [r3, #0]
 8005040:	4432      	add	r2, r6
 8005042:	609a      	str	r2, [r3, #8]
}
 8005044:	e7ff      	b.n	8005046 <UART_SetConfig+0x722>
 8005046:	bf00      	nop
 8005048:	37f4      	adds	r7, #244	; 0xf4
 800504a:	46bd      	mov	sp, r7
 800504c:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005050:	40011000 	.word	0x40011000
 8005054:	40011400 	.word	0x40011400
 8005058:	51eb851f 	.word	0x51eb851f

0800505c <__errno>:
 800505c:	4b01      	ldr	r3, [pc, #4]	; (8005064 <__errno+0x8>)
 800505e:	6818      	ldr	r0, [r3, #0]
 8005060:	4770      	bx	lr
 8005062:	bf00      	nop
 8005064:	20000030 	.word	0x20000030

08005068 <__libc_init_array>:
 8005068:	b570      	push	{r4, r5, r6, lr}
 800506a:	4d0d      	ldr	r5, [pc, #52]	; (80050a0 <__libc_init_array+0x38>)
 800506c:	4c0d      	ldr	r4, [pc, #52]	; (80050a4 <__libc_init_array+0x3c>)
 800506e:	1b64      	subs	r4, r4, r5
 8005070:	10a4      	asrs	r4, r4, #2
 8005072:	2600      	movs	r6, #0
 8005074:	42a6      	cmp	r6, r4
 8005076:	d109      	bne.n	800508c <__libc_init_array+0x24>
 8005078:	4d0b      	ldr	r5, [pc, #44]	; (80050a8 <__libc_init_array+0x40>)
 800507a:	4c0c      	ldr	r4, [pc, #48]	; (80050ac <__libc_init_array+0x44>)
 800507c:	f000 ffd6 	bl	800602c <_init>
 8005080:	1b64      	subs	r4, r4, r5
 8005082:	10a4      	asrs	r4, r4, #2
 8005084:	2600      	movs	r6, #0
 8005086:	42a6      	cmp	r6, r4
 8005088:	d105      	bne.n	8005096 <__libc_init_array+0x2e>
 800508a:	bd70      	pop	{r4, r5, r6, pc}
 800508c:	f855 3b04 	ldr.w	r3, [r5], #4
 8005090:	4798      	blx	r3
 8005092:	3601      	adds	r6, #1
 8005094:	e7ee      	b.n	8005074 <__libc_init_array+0xc>
 8005096:	f855 3b04 	ldr.w	r3, [r5], #4
 800509a:	4798      	blx	r3
 800509c:	3601      	adds	r6, #1
 800509e:	e7f2      	b.n	8005086 <__libc_init_array+0x1e>
 80050a0:	080060b0 	.word	0x080060b0
 80050a4:	080060b0 	.word	0x080060b0
 80050a8:	080060b0 	.word	0x080060b0
 80050ac:	080060b4 	.word	0x080060b4

080050b0 <memset>:
 80050b0:	4402      	add	r2, r0
 80050b2:	4603      	mov	r3, r0
 80050b4:	4293      	cmp	r3, r2
 80050b6:	d100      	bne.n	80050ba <memset+0xa>
 80050b8:	4770      	bx	lr
 80050ba:	f803 1b01 	strb.w	r1, [r3], #1
 80050be:	e7f9      	b.n	80050b4 <memset+0x4>

080050c0 <pow>:
 80050c0:	e92d 43f8 	stmdb	sp!, {r3, r4, r5, r6, r7, r8, r9, lr}
 80050c4:	ec59 8b10 	vmov	r8, r9, d0
 80050c8:	ec57 6b11 	vmov	r6, r7, d1
 80050cc:	f000 f8a8 	bl	8005220 <__ieee754_pow>
 80050d0:	4b4e      	ldr	r3, [pc, #312]	; (800520c <pow+0x14c>)
 80050d2:	f993 3000 	ldrsb.w	r3, [r3]
 80050d6:	3301      	adds	r3, #1
 80050d8:	ec55 4b10 	vmov	r4, r5, d0
 80050dc:	d015      	beq.n	800510a <pow+0x4a>
 80050de:	4632      	mov	r2, r6
 80050e0:	463b      	mov	r3, r7
 80050e2:	4630      	mov	r0, r6
 80050e4:	4639      	mov	r1, r7
 80050e6:	f7fb fccd 	bl	8000a84 <__aeabi_dcmpun>
 80050ea:	b970      	cbnz	r0, 800510a <pow+0x4a>
 80050ec:	4642      	mov	r2, r8
 80050ee:	464b      	mov	r3, r9
 80050f0:	4640      	mov	r0, r8
 80050f2:	4649      	mov	r1, r9
 80050f4:	f7fb fcc6 	bl	8000a84 <__aeabi_dcmpun>
 80050f8:	2200      	movs	r2, #0
 80050fa:	2300      	movs	r3, #0
 80050fc:	b148      	cbz	r0, 8005112 <pow+0x52>
 80050fe:	4630      	mov	r0, r6
 8005100:	4639      	mov	r1, r7
 8005102:	f7fb fc8d 	bl	8000a20 <__aeabi_dcmpeq>
 8005106:	2800      	cmp	r0, #0
 8005108:	d17d      	bne.n	8005206 <pow+0x146>
 800510a:	ec45 4b10 	vmov	d0, r4, r5
 800510e:	e8bd 83f8 	ldmia.w	sp!, {r3, r4, r5, r6, r7, r8, r9, pc}
 8005112:	4640      	mov	r0, r8
 8005114:	4649      	mov	r1, r9
 8005116:	f7fb fc83 	bl	8000a20 <__aeabi_dcmpeq>
 800511a:	b1e0      	cbz	r0, 8005156 <pow+0x96>
 800511c:	2200      	movs	r2, #0
 800511e:	2300      	movs	r3, #0
 8005120:	4630      	mov	r0, r6
 8005122:	4639      	mov	r1, r7
 8005124:	f7fb fc7c 	bl	8000a20 <__aeabi_dcmpeq>
 8005128:	2800      	cmp	r0, #0
 800512a:	d16c      	bne.n	8005206 <pow+0x146>
 800512c:	ec47 6b10 	vmov	d0, r6, r7
 8005130:	f000 fe55 	bl	8005dde <finite>
 8005134:	2800      	cmp	r0, #0
 8005136:	d0e8      	beq.n	800510a <pow+0x4a>
 8005138:	2200      	movs	r2, #0
 800513a:	2300      	movs	r3, #0
 800513c:	4630      	mov	r0, r6
 800513e:	4639      	mov	r1, r7
 8005140:	f7fb fc78 	bl	8000a34 <__aeabi_dcmplt>
 8005144:	2800      	cmp	r0, #0
 8005146:	d0e0      	beq.n	800510a <pow+0x4a>
 8005148:	f7ff ff88 	bl	800505c <__errno>
 800514c:	2321      	movs	r3, #33	; 0x21
 800514e:	6003      	str	r3, [r0, #0]
 8005150:	2400      	movs	r4, #0
 8005152:	4d2f      	ldr	r5, [pc, #188]	; (8005210 <pow+0x150>)
 8005154:	e7d9      	b.n	800510a <pow+0x4a>
 8005156:	ec45 4b10 	vmov	d0, r4, r5
 800515a:	f000 fe40 	bl	8005dde <finite>
 800515e:	bbb8      	cbnz	r0, 80051d0 <pow+0x110>
 8005160:	ec49 8b10 	vmov	d0, r8, r9
 8005164:	f000 fe3b 	bl	8005dde <finite>
 8005168:	b390      	cbz	r0, 80051d0 <pow+0x110>
 800516a:	ec47 6b10 	vmov	d0, r6, r7
 800516e:	f000 fe36 	bl	8005dde <finite>
 8005172:	b368      	cbz	r0, 80051d0 <pow+0x110>
 8005174:	4622      	mov	r2, r4
 8005176:	462b      	mov	r3, r5
 8005178:	4620      	mov	r0, r4
 800517a:	4629      	mov	r1, r5
 800517c:	f7fb fc82 	bl	8000a84 <__aeabi_dcmpun>
 8005180:	b160      	cbz	r0, 800519c <pow+0xdc>
 8005182:	f7ff ff6b 	bl	800505c <__errno>
 8005186:	2321      	movs	r3, #33	; 0x21
 8005188:	6003      	str	r3, [r0, #0]
 800518a:	2200      	movs	r2, #0
 800518c:	2300      	movs	r3, #0
 800518e:	4610      	mov	r0, r2
 8005190:	4619      	mov	r1, r3
 8005192:	f7fb fb07 	bl	80007a4 <__aeabi_ddiv>
 8005196:	4604      	mov	r4, r0
 8005198:	460d      	mov	r5, r1
 800519a:	e7b6      	b.n	800510a <pow+0x4a>
 800519c:	f7ff ff5e 	bl	800505c <__errno>
 80051a0:	2322      	movs	r3, #34	; 0x22
 80051a2:	6003      	str	r3, [r0, #0]
 80051a4:	2200      	movs	r2, #0
 80051a6:	2300      	movs	r3, #0
 80051a8:	4640      	mov	r0, r8
 80051aa:	4649      	mov	r1, r9
 80051ac:	f7fb fc42 	bl	8000a34 <__aeabi_dcmplt>
 80051b0:	2400      	movs	r4, #0
 80051b2:	b158      	cbz	r0, 80051cc <pow+0x10c>
 80051b4:	ec47 6b10 	vmov	d0, r6, r7
 80051b8:	f000 fe26 	bl	8005e08 <rint>
 80051bc:	4632      	mov	r2, r6
 80051be:	ec51 0b10 	vmov	r0, r1, d0
 80051c2:	463b      	mov	r3, r7
 80051c4:	f7fb fc2c 	bl	8000a20 <__aeabi_dcmpeq>
 80051c8:	2800      	cmp	r0, #0
 80051ca:	d0c2      	beq.n	8005152 <pow+0x92>
 80051cc:	4d11      	ldr	r5, [pc, #68]	; (8005214 <pow+0x154>)
 80051ce:	e79c      	b.n	800510a <pow+0x4a>
 80051d0:	2200      	movs	r2, #0
 80051d2:	2300      	movs	r3, #0
 80051d4:	4620      	mov	r0, r4
 80051d6:	4629      	mov	r1, r5
 80051d8:	f7fb fc22 	bl	8000a20 <__aeabi_dcmpeq>
 80051dc:	2800      	cmp	r0, #0
 80051de:	d094      	beq.n	800510a <pow+0x4a>
 80051e0:	ec49 8b10 	vmov	d0, r8, r9
 80051e4:	f000 fdfb 	bl	8005dde <finite>
 80051e8:	2800      	cmp	r0, #0
 80051ea:	d08e      	beq.n	800510a <pow+0x4a>
 80051ec:	ec47 6b10 	vmov	d0, r6, r7
 80051f0:	f000 fdf5 	bl	8005dde <finite>
 80051f4:	2800      	cmp	r0, #0
 80051f6:	d088      	beq.n	800510a <pow+0x4a>
 80051f8:	f7ff ff30 	bl	800505c <__errno>
 80051fc:	2322      	movs	r3, #34	; 0x22
 80051fe:	6003      	str	r3, [r0, #0]
 8005200:	2400      	movs	r4, #0
 8005202:	2500      	movs	r5, #0
 8005204:	e781      	b.n	800510a <pow+0x4a>
 8005206:	4d04      	ldr	r5, [pc, #16]	; (8005218 <pow+0x158>)
 8005208:	2400      	movs	r4, #0
 800520a:	e77e      	b.n	800510a <pow+0x4a>
 800520c:	20000094 	.word	0x20000094
 8005210:	fff00000 	.word	0xfff00000
 8005214:	7ff00000 	.word	0x7ff00000
 8005218:	3ff00000 	.word	0x3ff00000
 800521c:	00000000 	.word	0x00000000

08005220 <__ieee754_pow>:
 8005220:	e92d 4ff0 	stmdb	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005224:	ed2d 8b06 	vpush	{d8-d10}
 8005228:	b08d      	sub	sp, #52	; 0x34
 800522a:	ed8d 1b02 	vstr	d1, [sp, #8]
 800522e:	e9dd 0702 	ldrd	r0, r7, [sp, #8]
 8005232:	f027 4600 	bic.w	r6, r7, #2147483648	; 0x80000000
 8005236:	ea56 0100 	orrs.w	r1, r6, r0
 800523a:	ec53 2b10 	vmov	r2, r3, d0
 800523e:	f000 84d1 	beq.w	8005be4 <__ieee754_pow+0x9c4>
 8005242:	497f      	ldr	r1, [pc, #508]	; (8005440 <__ieee754_pow+0x220>)
 8005244:	f023 4400 	bic.w	r4, r3, #2147483648	; 0x80000000
 8005248:	428c      	cmp	r4, r1
 800524a:	ee10 8a10 	vmov	r8, s0
 800524e:	4699      	mov	r9, r3
 8005250:	dc09      	bgt.n	8005266 <__ieee754_pow+0x46>
 8005252:	d103      	bne.n	800525c <__ieee754_pow+0x3c>
 8005254:	b97a      	cbnz	r2, 8005276 <__ieee754_pow+0x56>
 8005256:	42a6      	cmp	r6, r4
 8005258:	dd02      	ble.n	8005260 <__ieee754_pow+0x40>
 800525a:	e00c      	b.n	8005276 <__ieee754_pow+0x56>
 800525c:	428e      	cmp	r6, r1
 800525e:	dc02      	bgt.n	8005266 <__ieee754_pow+0x46>
 8005260:	428e      	cmp	r6, r1
 8005262:	d110      	bne.n	8005286 <__ieee754_pow+0x66>
 8005264:	b178      	cbz	r0, 8005286 <__ieee754_pow+0x66>
 8005266:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 800526a:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 800526e:	ea54 0308 	orrs.w	r3, r4, r8
 8005272:	f000 84b7 	beq.w	8005be4 <__ieee754_pow+0x9c4>
 8005276:	4873      	ldr	r0, [pc, #460]	; (8005444 <__ieee754_pow+0x224>)
 8005278:	b00d      	add	sp, #52	; 0x34
 800527a:	ecbd 8b06 	vpop	{d8-d10}
 800527e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005282:	f000 bdb9 	b.w	8005df8 <nan>
 8005286:	f1b9 0f00 	cmp.w	r9, #0
 800528a:	da36      	bge.n	80052fa <__ieee754_pow+0xda>
 800528c:	496e      	ldr	r1, [pc, #440]	; (8005448 <__ieee754_pow+0x228>)
 800528e:	428e      	cmp	r6, r1
 8005290:	dc51      	bgt.n	8005336 <__ieee754_pow+0x116>
 8005292:	f1a1 7154 	sub.w	r1, r1, #55574528	; 0x3500000
 8005296:	428e      	cmp	r6, r1
 8005298:	f340 84af 	ble.w	8005bfa <__ieee754_pow+0x9da>
 800529c:	1531      	asrs	r1, r6, #20
 800529e:	f2a1 31ff 	subw	r1, r1, #1023	; 0x3ff
 80052a2:	2914      	cmp	r1, #20
 80052a4:	dd0f      	ble.n	80052c6 <__ieee754_pow+0xa6>
 80052a6:	f1c1 0134 	rsb	r1, r1, #52	; 0x34
 80052aa:	fa20 fc01 	lsr.w	ip, r0, r1
 80052ae:	fa0c f101 	lsl.w	r1, ip, r1
 80052b2:	4281      	cmp	r1, r0
 80052b4:	f040 84a1 	bne.w	8005bfa <__ieee754_pow+0x9da>
 80052b8:	f00c 0c01 	and.w	ip, ip, #1
 80052bc:	f1cc 0102 	rsb	r1, ip, #2
 80052c0:	9100      	str	r1, [sp, #0]
 80052c2:	b180      	cbz	r0, 80052e6 <__ieee754_pow+0xc6>
 80052c4:	e059      	b.n	800537a <__ieee754_pow+0x15a>
 80052c6:	2800      	cmp	r0, #0
 80052c8:	d155      	bne.n	8005376 <__ieee754_pow+0x156>
 80052ca:	f1c1 0114 	rsb	r1, r1, #20
 80052ce:	fa46 fc01 	asr.w	ip, r6, r1
 80052d2:	fa0c f101 	lsl.w	r1, ip, r1
 80052d6:	42b1      	cmp	r1, r6
 80052d8:	f040 848c 	bne.w	8005bf4 <__ieee754_pow+0x9d4>
 80052dc:	f00c 0c01 	and.w	ip, ip, #1
 80052e0:	f1cc 0102 	rsb	r1, ip, #2
 80052e4:	9100      	str	r1, [sp, #0]
 80052e6:	4959      	ldr	r1, [pc, #356]	; (800544c <__ieee754_pow+0x22c>)
 80052e8:	428e      	cmp	r6, r1
 80052ea:	d12d      	bne.n	8005348 <__ieee754_pow+0x128>
 80052ec:	2f00      	cmp	r7, #0
 80052ee:	da79      	bge.n	80053e4 <__ieee754_pow+0x1c4>
 80052f0:	4956      	ldr	r1, [pc, #344]	; (800544c <__ieee754_pow+0x22c>)
 80052f2:	2000      	movs	r0, #0
 80052f4:	f7fb fa56 	bl	80007a4 <__aeabi_ddiv>
 80052f8:	e016      	b.n	8005328 <__ieee754_pow+0x108>
 80052fa:	2100      	movs	r1, #0
 80052fc:	9100      	str	r1, [sp, #0]
 80052fe:	2800      	cmp	r0, #0
 8005300:	d13b      	bne.n	800537a <__ieee754_pow+0x15a>
 8005302:	494f      	ldr	r1, [pc, #316]	; (8005440 <__ieee754_pow+0x220>)
 8005304:	428e      	cmp	r6, r1
 8005306:	d1ee      	bne.n	80052e6 <__ieee754_pow+0xc6>
 8005308:	f104 4340 	add.w	r3, r4, #3221225472	; 0xc0000000
 800530c:	f503 1380 	add.w	r3, r3, #1048576	; 0x100000
 8005310:	ea53 0308 	orrs.w	r3, r3, r8
 8005314:	f000 8466 	beq.w	8005be4 <__ieee754_pow+0x9c4>
 8005318:	4b4d      	ldr	r3, [pc, #308]	; (8005450 <__ieee754_pow+0x230>)
 800531a:	429c      	cmp	r4, r3
 800531c:	dd0d      	ble.n	800533a <__ieee754_pow+0x11a>
 800531e:	2f00      	cmp	r7, #0
 8005320:	f280 8464 	bge.w	8005bec <__ieee754_pow+0x9cc>
 8005324:	2000      	movs	r0, #0
 8005326:	2100      	movs	r1, #0
 8005328:	ec41 0b10 	vmov	d0, r0, r1
 800532c:	b00d      	add	sp, #52	; 0x34
 800532e:	ecbd 8b06 	vpop	{d8-d10}
 8005332:	e8bd 8ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, pc}
 8005336:	2102      	movs	r1, #2
 8005338:	e7e0      	b.n	80052fc <__ieee754_pow+0xdc>
 800533a:	2f00      	cmp	r7, #0
 800533c:	daf2      	bge.n	8005324 <__ieee754_pow+0x104>
 800533e:	e9dd 0302 	ldrd	r0, r3, [sp, #8]
 8005342:	f103 4100 	add.w	r1, r3, #2147483648	; 0x80000000
 8005346:	e7ef      	b.n	8005328 <__ieee754_pow+0x108>
 8005348:	f1b7 4f80 	cmp.w	r7, #1073741824	; 0x40000000
 800534c:	d104      	bne.n	8005358 <__ieee754_pow+0x138>
 800534e:	4610      	mov	r0, r2
 8005350:	4619      	mov	r1, r3
 8005352:	f7fb f8fd 	bl	8000550 <__aeabi_dmul>
 8005356:	e7e7      	b.n	8005328 <__ieee754_pow+0x108>
 8005358:	493e      	ldr	r1, [pc, #248]	; (8005454 <__ieee754_pow+0x234>)
 800535a:	428f      	cmp	r7, r1
 800535c:	d10d      	bne.n	800537a <__ieee754_pow+0x15a>
 800535e:	f1b9 0f00 	cmp.w	r9, #0
 8005362:	db0a      	blt.n	800537a <__ieee754_pow+0x15a>
 8005364:	ec43 2b10 	vmov	d0, r2, r3
 8005368:	b00d      	add	sp, #52	; 0x34
 800536a:	ecbd 8b06 	vpop	{d8-d10}
 800536e:	e8bd 4ff0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, r9, sl, fp, lr}
 8005372:	f000 bc77 	b.w	8005c64 <__ieee754_sqrt>
 8005376:	2100      	movs	r1, #0
 8005378:	9100      	str	r1, [sp, #0]
 800537a:	ec43 2b10 	vmov	d0, r2, r3
 800537e:	e9cd 2304 	strd	r2, r3, [sp, #16]
 8005382:	f000 fd23 	bl	8005dcc <fabs>
 8005386:	e9dd 2304 	ldrd	r2, r3, [sp, #16]
 800538a:	ec51 0b10 	vmov	r0, r1, d0
 800538e:	f1b8 0f00 	cmp.w	r8, #0
 8005392:	d12a      	bne.n	80053ea <__ieee754_pow+0x1ca>
 8005394:	b12c      	cbz	r4, 80053a2 <__ieee754_pow+0x182>
 8005396:	f8df c0b4 	ldr.w	ip, [pc, #180]	; 800544c <__ieee754_pow+0x22c>
 800539a:	f029 4e40 	bic.w	lr, r9, #3221225472	; 0xc0000000
 800539e:	45e6      	cmp	lr, ip
 80053a0:	d123      	bne.n	80053ea <__ieee754_pow+0x1ca>
 80053a2:	2f00      	cmp	r7, #0
 80053a4:	da05      	bge.n	80053b2 <__ieee754_pow+0x192>
 80053a6:	4602      	mov	r2, r0
 80053a8:	460b      	mov	r3, r1
 80053aa:	2000      	movs	r0, #0
 80053ac:	4927      	ldr	r1, [pc, #156]	; (800544c <__ieee754_pow+0x22c>)
 80053ae:	f7fb f9f9 	bl	80007a4 <__aeabi_ddiv>
 80053b2:	f1b9 0f00 	cmp.w	r9, #0
 80053b6:	dab7      	bge.n	8005328 <__ieee754_pow+0x108>
 80053b8:	9b00      	ldr	r3, [sp, #0]
 80053ba:	f104 4440 	add.w	r4, r4, #3221225472	; 0xc0000000
 80053be:	f504 1480 	add.w	r4, r4, #1048576	; 0x100000
 80053c2:	4323      	orrs	r3, r4
 80053c4:	d108      	bne.n	80053d8 <__ieee754_pow+0x1b8>
 80053c6:	4602      	mov	r2, r0
 80053c8:	460b      	mov	r3, r1
 80053ca:	4610      	mov	r0, r2
 80053cc:	4619      	mov	r1, r3
 80053ce:	f7fa ff07 	bl	80001e0 <__aeabi_dsub>
 80053d2:	4602      	mov	r2, r0
 80053d4:	460b      	mov	r3, r1
 80053d6:	e78d      	b.n	80052f4 <__ieee754_pow+0xd4>
 80053d8:	9b00      	ldr	r3, [sp, #0]
 80053da:	2b01      	cmp	r3, #1
 80053dc:	d1a4      	bne.n	8005328 <__ieee754_pow+0x108>
 80053de:	4602      	mov	r2, r0
 80053e0:	f101 4300 	add.w	r3, r1, #2147483648	; 0x80000000
 80053e4:	4610      	mov	r0, r2
 80053e6:	4619      	mov	r1, r3
 80053e8:	e79e      	b.n	8005328 <__ieee754_pow+0x108>
 80053ea:	ea4f 7cd9 	mov.w	ip, r9, lsr #31
 80053ee:	f10c 35ff 	add.w	r5, ip, #4294967295
 80053f2:	950a      	str	r5, [sp, #40]	; 0x28
 80053f4:	9d00      	ldr	r5, [sp, #0]
 80053f6:	46ac      	mov	ip, r5
 80053f8:	9d0a      	ldr	r5, [sp, #40]	; 0x28
 80053fa:	ea5c 0505 	orrs.w	r5, ip, r5
 80053fe:	d0e4      	beq.n	80053ca <__ieee754_pow+0x1aa>
 8005400:	4b15      	ldr	r3, [pc, #84]	; (8005458 <__ieee754_pow+0x238>)
 8005402:	429e      	cmp	r6, r3
 8005404:	f340 80fc 	ble.w	8005600 <__ieee754_pow+0x3e0>
 8005408:	f103 7304 	add.w	r3, r3, #34603008	; 0x2100000
 800540c:	429e      	cmp	r6, r3
 800540e:	4b10      	ldr	r3, [pc, #64]	; (8005450 <__ieee754_pow+0x230>)
 8005410:	dd07      	ble.n	8005422 <__ieee754_pow+0x202>
 8005412:	429c      	cmp	r4, r3
 8005414:	dc0a      	bgt.n	800542c <__ieee754_pow+0x20c>
 8005416:	2f00      	cmp	r7, #0
 8005418:	da84      	bge.n	8005324 <__ieee754_pow+0x104>
 800541a:	a307      	add	r3, pc, #28	; (adr r3, 8005438 <__ieee754_pow+0x218>)
 800541c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005420:	e795      	b.n	800534e <__ieee754_pow+0x12e>
 8005422:	429c      	cmp	r4, r3
 8005424:	dbf7      	blt.n	8005416 <__ieee754_pow+0x1f6>
 8005426:	4b09      	ldr	r3, [pc, #36]	; (800544c <__ieee754_pow+0x22c>)
 8005428:	429c      	cmp	r4, r3
 800542a:	dd17      	ble.n	800545c <__ieee754_pow+0x23c>
 800542c:	2f00      	cmp	r7, #0
 800542e:	dcf4      	bgt.n	800541a <__ieee754_pow+0x1fa>
 8005430:	e778      	b.n	8005324 <__ieee754_pow+0x104>
 8005432:	bf00      	nop
 8005434:	f3af 8000 	nop.w
 8005438:	8800759c 	.word	0x8800759c
 800543c:	7e37e43c 	.word	0x7e37e43c
 8005440:	7ff00000 	.word	0x7ff00000
 8005444:	08006060 	.word	0x08006060
 8005448:	433fffff 	.word	0x433fffff
 800544c:	3ff00000 	.word	0x3ff00000
 8005450:	3fefffff 	.word	0x3fefffff
 8005454:	3fe00000 	.word	0x3fe00000
 8005458:	41e00000 	.word	0x41e00000
 800545c:	4b64      	ldr	r3, [pc, #400]	; (80055f0 <__ieee754_pow+0x3d0>)
 800545e:	2200      	movs	r2, #0
 8005460:	f7fa febe 	bl	80001e0 <__aeabi_dsub>
 8005464:	a356      	add	r3, pc, #344	; (adr r3, 80055c0 <__ieee754_pow+0x3a0>)
 8005466:	e9d3 2300 	ldrd	r2, r3, [r3]
 800546a:	4604      	mov	r4, r0
 800546c:	460d      	mov	r5, r1
 800546e:	f7fb f86f 	bl	8000550 <__aeabi_dmul>
 8005472:	a355      	add	r3, pc, #340	; (adr r3, 80055c8 <__ieee754_pow+0x3a8>)
 8005474:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005478:	4606      	mov	r6, r0
 800547a:	460f      	mov	r7, r1
 800547c:	4620      	mov	r0, r4
 800547e:	4629      	mov	r1, r5
 8005480:	f7fb f866 	bl	8000550 <__aeabi_dmul>
 8005484:	4b5b      	ldr	r3, [pc, #364]	; (80055f4 <__ieee754_pow+0x3d4>)
 8005486:	4682      	mov	sl, r0
 8005488:	468b      	mov	fp, r1
 800548a:	2200      	movs	r2, #0
 800548c:	4620      	mov	r0, r4
 800548e:	4629      	mov	r1, r5
 8005490:	f7fb f85e 	bl	8000550 <__aeabi_dmul>
 8005494:	4602      	mov	r2, r0
 8005496:	460b      	mov	r3, r1
 8005498:	a14d      	add	r1, pc, #308	; (adr r1, 80055d0 <__ieee754_pow+0x3b0>)
 800549a:	e9d1 0100 	ldrd	r0, r1, [r1]
 800549e:	f7fa fe9f 	bl	80001e0 <__aeabi_dsub>
 80054a2:	4622      	mov	r2, r4
 80054a4:	462b      	mov	r3, r5
 80054a6:	f7fb f853 	bl	8000550 <__aeabi_dmul>
 80054aa:	4602      	mov	r2, r0
 80054ac:	460b      	mov	r3, r1
 80054ae:	2000      	movs	r0, #0
 80054b0:	4951      	ldr	r1, [pc, #324]	; (80055f8 <__ieee754_pow+0x3d8>)
 80054b2:	f7fa fe95 	bl	80001e0 <__aeabi_dsub>
 80054b6:	4622      	mov	r2, r4
 80054b8:	4680      	mov	r8, r0
 80054ba:	4689      	mov	r9, r1
 80054bc:	462b      	mov	r3, r5
 80054be:	4620      	mov	r0, r4
 80054c0:	4629      	mov	r1, r5
 80054c2:	f7fb f845 	bl	8000550 <__aeabi_dmul>
 80054c6:	4602      	mov	r2, r0
 80054c8:	460b      	mov	r3, r1
 80054ca:	4640      	mov	r0, r8
 80054cc:	4649      	mov	r1, r9
 80054ce:	f7fb f83f 	bl	8000550 <__aeabi_dmul>
 80054d2:	a341      	add	r3, pc, #260	; (adr r3, 80055d8 <__ieee754_pow+0x3b8>)
 80054d4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80054d8:	f7fb f83a 	bl	8000550 <__aeabi_dmul>
 80054dc:	4602      	mov	r2, r0
 80054de:	460b      	mov	r3, r1
 80054e0:	4650      	mov	r0, sl
 80054e2:	4659      	mov	r1, fp
 80054e4:	f7fa fe7c 	bl	80001e0 <__aeabi_dsub>
 80054e8:	4602      	mov	r2, r0
 80054ea:	460b      	mov	r3, r1
 80054ec:	4680      	mov	r8, r0
 80054ee:	4689      	mov	r9, r1
 80054f0:	4630      	mov	r0, r6
 80054f2:	4639      	mov	r1, r7
 80054f4:	f7fa fe76 	bl	80001e4 <__adddf3>
 80054f8:	2400      	movs	r4, #0
 80054fa:	4632      	mov	r2, r6
 80054fc:	463b      	mov	r3, r7
 80054fe:	4620      	mov	r0, r4
 8005500:	460d      	mov	r5, r1
 8005502:	f7fa fe6d 	bl	80001e0 <__aeabi_dsub>
 8005506:	4602      	mov	r2, r0
 8005508:	460b      	mov	r3, r1
 800550a:	4640      	mov	r0, r8
 800550c:	4649      	mov	r1, r9
 800550e:	f7fa fe67 	bl	80001e0 <__aeabi_dsub>
 8005512:	9b00      	ldr	r3, [sp, #0]
 8005514:	9a0a      	ldr	r2, [sp, #40]	; 0x28
 8005516:	3b01      	subs	r3, #1
 8005518:	4313      	orrs	r3, r2
 800551a:	4682      	mov	sl, r0
 800551c:	468b      	mov	fp, r1
 800551e:	f040 81f1 	bne.w	8005904 <__ieee754_pow+0x6e4>
 8005522:	ed9f 7b2f 	vldr	d7, [pc, #188]	; 80055e0 <__ieee754_pow+0x3c0>
 8005526:	eeb0 8a47 	vmov.f32	s16, s14
 800552a:	eef0 8a67 	vmov.f32	s17, s15
 800552e:	e9dd 6702 	ldrd	r6, r7, [sp, #8]
 8005532:	2600      	movs	r6, #0
 8005534:	4632      	mov	r2, r6
 8005536:	463b      	mov	r3, r7
 8005538:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 800553c:	f7fa fe50 	bl	80001e0 <__aeabi_dsub>
 8005540:	4622      	mov	r2, r4
 8005542:	462b      	mov	r3, r5
 8005544:	f7fb f804 	bl	8000550 <__aeabi_dmul>
 8005548:	e9dd 2302 	ldrd	r2, r3, [sp, #8]
 800554c:	4680      	mov	r8, r0
 800554e:	4689      	mov	r9, r1
 8005550:	4650      	mov	r0, sl
 8005552:	4659      	mov	r1, fp
 8005554:	f7fa fffc 	bl	8000550 <__aeabi_dmul>
 8005558:	4602      	mov	r2, r0
 800555a:	460b      	mov	r3, r1
 800555c:	4640      	mov	r0, r8
 800555e:	4649      	mov	r1, r9
 8005560:	f7fa fe40 	bl	80001e4 <__adddf3>
 8005564:	4632      	mov	r2, r6
 8005566:	463b      	mov	r3, r7
 8005568:	4680      	mov	r8, r0
 800556a:	4689      	mov	r9, r1
 800556c:	4620      	mov	r0, r4
 800556e:	4629      	mov	r1, r5
 8005570:	f7fa ffee 	bl	8000550 <__aeabi_dmul>
 8005574:	460b      	mov	r3, r1
 8005576:	4604      	mov	r4, r0
 8005578:	460d      	mov	r5, r1
 800557a:	4602      	mov	r2, r0
 800557c:	4649      	mov	r1, r9
 800557e:	4640      	mov	r0, r8
 8005580:	f7fa fe30 	bl	80001e4 <__adddf3>
 8005584:	4b1d      	ldr	r3, [pc, #116]	; (80055fc <__ieee754_pow+0x3dc>)
 8005586:	4299      	cmp	r1, r3
 8005588:	ec45 4b19 	vmov	d9, r4, r5
 800558c:	4606      	mov	r6, r0
 800558e:	460f      	mov	r7, r1
 8005590:	468b      	mov	fp, r1
 8005592:	f340 82fe 	ble.w	8005b92 <__ieee754_pow+0x972>
 8005596:	f101 433f 	add.w	r3, r1, #3204448256	; 0xbf000000
 800559a:	f503 03e0 	add.w	r3, r3, #7340032	; 0x700000
 800559e:	4303      	orrs	r3, r0
 80055a0:	f000 81f0 	beq.w	8005984 <__ieee754_pow+0x764>
 80055a4:	a310      	add	r3, pc, #64	; (adr r3, 80055e8 <__ieee754_pow+0x3c8>)
 80055a6:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055aa:	ec51 0b18 	vmov	r0, r1, d8
 80055ae:	f7fa ffcf 	bl	8000550 <__aeabi_dmul>
 80055b2:	a30d      	add	r3, pc, #52	; (adr r3, 80055e8 <__ieee754_pow+0x3c8>)
 80055b4:	e9d3 2300 	ldrd	r2, r3, [r3]
 80055b8:	e6cb      	b.n	8005352 <__ieee754_pow+0x132>
 80055ba:	bf00      	nop
 80055bc:	f3af 8000 	nop.w
 80055c0:	60000000 	.word	0x60000000
 80055c4:	3ff71547 	.word	0x3ff71547
 80055c8:	f85ddf44 	.word	0xf85ddf44
 80055cc:	3e54ae0b 	.word	0x3e54ae0b
 80055d0:	55555555 	.word	0x55555555
 80055d4:	3fd55555 	.word	0x3fd55555
 80055d8:	652b82fe 	.word	0x652b82fe
 80055dc:	3ff71547 	.word	0x3ff71547
 80055e0:	00000000 	.word	0x00000000
 80055e4:	bff00000 	.word	0xbff00000
 80055e8:	8800759c 	.word	0x8800759c
 80055ec:	7e37e43c 	.word	0x7e37e43c
 80055f0:	3ff00000 	.word	0x3ff00000
 80055f4:	3fd00000 	.word	0x3fd00000
 80055f8:	3fe00000 	.word	0x3fe00000
 80055fc:	408fffff 	.word	0x408fffff
 8005600:	4bd7      	ldr	r3, [pc, #860]	; (8005960 <__ieee754_pow+0x740>)
 8005602:	ea03 0309 	and.w	r3, r3, r9
 8005606:	2200      	movs	r2, #0
 8005608:	b92b      	cbnz	r3, 8005616 <__ieee754_pow+0x3f6>
 800560a:	4bd6      	ldr	r3, [pc, #856]	; (8005964 <__ieee754_pow+0x744>)
 800560c:	f7fa ffa0 	bl	8000550 <__aeabi_dmul>
 8005610:	f06f 0234 	mvn.w	r2, #52	; 0x34
 8005614:	460c      	mov	r4, r1
 8005616:	1523      	asrs	r3, r4, #20
 8005618:	f2a3 33ff 	subw	r3, r3, #1023	; 0x3ff
 800561c:	4413      	add	r3, r2
 800561e:	9309      	str	r3, [sp, #36]	; 0x24
 8005620:	4bd1      	ldr	r3, [pc, #836]	; (8005968 <__ieee754_pow+0x748>)
 8005622:	f3c4 0413 	ubfx	r4, r4, #0, #20
 8005626:	f044 557f 	orr.w	r5, r4, #1069547520	; 0x3fc00000
 800562a:	429c      	cmp	r4, r3
 800562c:	f445 1540 	orr.w	r5, r5, #3145728	; 0x300000
 8005630:	dd08      	ble.n	8005644 <__ieee754_pow+0x424>
 8005632:	4bce      	ldr	r3, [pc, #824]	; (800596c <__ieee754_pow+0x74c>)
 8005634:	429c      	cmp	r4, r3
 8005636:	f340 8163 	ble.w	8005900 <__ieee754_pow+0x6e0>
 800563a:	9b09      	ldr	r3, [sp, #36]	; 0x24
 800563c:	3301      	adds	r3, #1
 800563e:	9309      	str	r3, [sp, #36]	; 0x24
 8005640:	f5a5 1580 	sub.w	r5, r5, #1048576	; 0x100000
 8005644:	2400      	movs	r4, #0
 8005646:	00e3      	lsls	r3, r4, #3
 8005648:	930b      	str	r3, [sp, #44]	; 0x2c
 800564a:	4bc9      	ldr	r3, [pc, #804]	; (8005970 <__ieee754_pow+0x750>)
 800564c:	eb03 03c4 	add.w	r3, r3, r4, lsl #3
 8005650:	ed93 7b00 	vldr	d7, [r3]
 8005654:	4629      	mov	r1, r5
 8005656:	ec53 2b17 	vmov	r2, r3, d7
 800565a:	eeb0 8a47 	vmov.f32	s16, s14
 800565e:	eef0 8a67 	vmov.f32	s17, s15
 8005662:	4682      	mov	sl, r0
 8005664:	f7fa fdbc 	bl	80001e0 <__aeabi_dsub>
 8005668:	4652      	mov	r2, sl
 800566a:	4606      	mov	r6, r0
 800566c:	460f      	mov	r7, r1
 800566e:	462b      	mov	r3, r5
 8005670:	ec51 0b18 	vmov	r0, r1, d8
 8005674:	f7fa fdb6 	bl	80001e4 <__adddf3>
 8005678:	4602      	mov	r2, r0
 800567a:	460b      	mov	r3, r1
 800567c:	2000      	movs	r0, #0
 800567e:	49bd      	ldr	r1, [pc, #756]	; (8005974 <__ieee754_pow+0x754>)
 8005680:	f7fb f890 	bl	80007a4 <__aeabi_ddiv>
 8005684:	ec41 0b19 	vmov	d9, r0, r1
 8005688:	4602      	mov	r2, r0
 800568a:	460b      	mov	r3, r1
 800568c:	4630      	mov	r0, r6
 800568e:	4639      	mov	r1, r7
 8005690:	f7fa ff5e 	bl	8000550 <__aeabi_dmul>
 8005694:	e9cd 0106 	strd	r0, r1, [sp, #24]
 8005698:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800569c:	e9cd 2304 	strd	r2, r3, [sp, #16]
 80056a0:	2300      	movs	r3, #0
 80056a2:	9304      	str	r3, [sp, #16]
 80056a4:	e9dd 8904 	ldrd	r8, r9, [sp, #16]
 80056a8:	46ab      	mov	fp, r5
 80056aa:	106d      	asrs	r5, r5, #1
 80056ac:	f045 5500 	orr.w	r5, r5, #536870912	; 0x20000000
 80056b0:	f505 2500 	add.w	r5, r5, #524288	; 0x80000
 80056b4:	eb05 4384 	add.w	r3, r5, r4, lsl #18
 80056b8:	2200      	movs	r2, #0
 80056ba:	4640      	mov	r0, r8
 80056bc:	4649      	mov	r1, r9
 80056be:	4614      	mov	r4, r2
 80056c0:	461d      	mov	r5, r3
 80056c2:	f7fa ff45 	bl	8000550 <__aeabi_dmul>
 80056c6:	4602      	mov	r2, r0
 80056c8:	460b      	mov	r3, r1
 80056ca:	4630      	mov	r0, r6
 80056cc:	4639      	mov	r1, r7
 80056ce:	f7fa fd87 	bl	80001e0 <__aeabi_dsub>
 80056d2:	ec53 2b18 	vmov	r2, r3, d8
 80056d6:	4606      	mov	r6, r0
 80056d8:	460f      	mov	r7, r1
 80056da:	4620      	mov	r0, r4
 80056dc:	4629      	mov	r1, r5
 80056de:	f7fa fd7f 	bl	80001e0 <__aeabi_dsub>
 80056e2:	4602      	mov	r2, r0
 80056e4:	460b      	mov	r3, r1
 80056e6:	4650      	mov	r0, sl
 80056e8:	4659      	mov	r1, fp
 80056ea:	f7fa fd79 	bl	80001e0 <__aeabi_dsub>
 80056ee:	4642      	mov	r2, r8
 80056f0:	464b      	mov	r3, r9
 80056f2:	f7fa ff2d 	bl	8000550 <__aeabi_dmul>
 80056f6:	4602      	mov	r2, r0
 80056f8:	460b      	mov	r3, r1
 80056fa:	4630      	mov	r0, r6
 80056fc:	4639      	mov	r1, r7
 80056fe:	f7fa fd6f 	bl	80001e0 <__aeabi_dsub>
 8005702:	ec53 2b19 	vmov	r2, r3, d9
 8005706:	f7fa ff23 	bl	8000550 <__aeabi_dmul>
 800570a:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 800570e:	ec41 0b18 	vmov	d8, r0, r1
 8005712:	4610      	mov	r0, r2
 8005714:	4619      	mov	r1, r3
 8005716:	f7fa ff1b 	bl	8000550 <__aeabi_dmul>
 800571a:	a37d      	add	r3, pc, #500	; (adr r3, 8005910 <__ieee754_pow+0x6f0>)
 800571c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005720:	4604      	mov	r4, r0
 8005722:	460d      	mov	r5, r1
 8005724:	f7fa ff14 	bl	8000550 <__aeabi_dmul>
 8005728:	a37b      	add	r3, pc, #492	; (adr r3, 8005918 <__ieee754_pow+0x6f8>)
 800572a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800572e:	f7fa fd59 	bl	80001e4 <__adddf3>
 8005732:	4622      	mov	r2, r4
 8005734:	462b      	mov	r3, r5
 8005736:	f7fa ff0b 	bl	8000550 <__aeabi_dmul>
 800573a:	a379      	add	r3, pc, #484	; (adr r3, 8005920 <__ieee754_pow+0x700>)
 800573c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005740:	f7fa fd50 	bl	80001e4 <__adddf3>
 8005744:	4622      	mov	r2, r4
 8005746:	462b      	mov	r3, r5
 8005748:	f7fa ff02 	bl	8000550 <__aeabi_dmul>
 800574c:	a376      	add	r3, pc, #472	; (adr r3, 8005928 <__ieee754_pow+0x708>)
 800574e:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005752:	f7fa fd47 	bl	80001e4 <__adddf3>
 8005756:	4622      	mov	r2, r4
 8005758:	462b      	mov	r3, r5
 800575a:	f7fa fef9 	bl	8000550 <__aeabi_dmul>
 800575e:	a374      	add	r3, pc, #464	; (adr r3, 8005930 <__ieee754_pow+0x710>)
 8005760:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005764:	f7fa fd3e 	bl	80001e4 <__adddf3>
 8005768:	4622      	mov	r2, r4
 800576a:	462b      	mov	r3, r5
 800576c:	f7fa fef0 	bl	8000550 <__aeabi_dmul>
 8005770:	a371      	add	r3, pc, #452	; (adr r3, 8005938 <__ieee754_pow+0x718>)
 8005772:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005776:	f7fa fd35 	bl	80001e4 <__adddf3>
 800577a:	4622      	mov	r2, r4
 800577c:	4606      	mov	r6, r0
 800577e:	460f      	mov	r7, r1
 8005780:	462b      	mov	r3, r5
 8005782:	4620      	mov	r0, r4
 8005784:	4629      	mov	r1, r5
 8005786:	f7fa fee3 	bl	8000550 <__aeabi_dmul>
 800578a:	4602      	mov	r2, r0
 800578c:	460b      	mov	r3, r1
 800578e:	4630      	mov	r0, r6
 8005790:	4639      	mov	r1, r7
 8005792:	f7fa fedd 	bl	8000550 <__aeabi_dmul>
 8005796:	4642      	mov	r2, r8
 8005798:	4604      	mov	r4, r0
 800579a:	460d      	mov	r5, r1
 800579c:	464b      	mov	r3, r9
 800579e:	e9dd 0106 	ldrd	r0, r1, [sp, #24]
 80057a2:	f7fa fd1f 	bl	80001e4 <__adddf3>
 80057a6:	ec53 2b18 	vmov	r2, r3, d8
 80057aa:	f7fa fed1 	bl	8000550 <__aeabi_dmul>
 80057ae:	4622      	mov	r2, r4
 80057b0:	462b      	mov	r3, r5
 80057b2:	f7fa fd17 	bl	80001e4 <__adddf3>
 80057b6:	4642      	mov	r2, r8
 80057b8:	4682      	mov	sl, r0
 80057ba:	468b      	mov	fp, r1
 80057bc:	464b      	mov	r3, r9
 80057be:	4640      	mov	r0, r8
 80057c0:	4649      	mov	r1, r9
 80057c2:	f7fa fec5 	bl	8000550 <__aeabi_dmul>
 80057c6:	4b6c      	ldr	r3, [pc, #432]	; (8005978 <__ieee754_pow+0x758>)
 80057c8:	2200      	movs	r2, #0
 80057ca:	4606      	mov	r6, r0
 80057cc:	460f      	mov	r7, r1
 80057ce:	f7fa fd09 	bl	80001e4 <__adddf3>
 80057d2:	4652      	mov	r2, sl
 80057d4:	465b      	mov	r3, fp
 80057d6:	f7fa fd05 	bl	80001e4 <__adddf3>
 80057da:	9c04      	ldr	r4, [sp, #16]
 80057dc:	460d      	mov	r5, r1
 80057de:	4622      	mov	r2, r4
 80057e0:	460b      	mov	r3, r1
 80057e2:	4640      	mov	r0, r8
 80057e4:	4649      	mov	r1, r9
 80057e6:	f7fa feb3 	bl	8000550 <__aeabi_dmul>
 80057ea:	4b63      	ldr	r3, [pc, #396]	; (8005978 <__ieee754_pow+0x758>)
 80057ec:	4680      	mov	r8, r0
 80057ee:	4689      	mov	r9, r1
 80057f0:	2200      	movs	r2, #0
 80057f2:	4620      	mov	r0, r4
 80057f4:	4629      	mov	r1, r5
 80057f6:	f7fa fcf3 	bl	80001e0 <__aeabi_dsub>
 80057fa:	4632      	mov	r2, r6
 80057fc:	463b      	mov	r3, r7
 80057fe:	f7fa fcef 	bl	80001e0 <__aeabi_dsub>
 8005802:	4602      	mov	r2, r0
 8005804:	460b      	mov	r3, r1
 8005806:	4650      	mov	r0, sl
 8005808:	4659      	mov	r1, fp
 800580a:	f7fa fce9 	bl	80001e0 <__aeabi_dsub>
 800580e:	e9dd 2306 	ldrd	r2, r3, [sp, #24]
 8005812:	f7fa fe9d 	bl	8000550 <__aeabi_dmul>
 8005816:	4622      	mov	r2, r4
 8005818:	4606      	mov	r6, r0
 800581a:	460f      	mov	r7, r1
 800581c:	462b      	mov	r3, r5
 800581e:	ec51 0b18 	vmov	r0, r1, d8
 8005822:	f7fa fe95 	bl	8000550 <__aeabi_dmul>
 8005826:	4602      	mov	r2, r0
 8005828:	460b      	mov	r3, r1
 800582a:	4630      	mov	r0, r6
 800582c:	4639      	mov	r1, r7
 800582e:	f7fa fcd9 	bl	80001e4 <__adddf3>
 8005832:	4606      	mov	r6, r0
 8005834:	460f      	mov	r7, r1
 8005836:	4602      	mov	r2, r0
 8005838:	460b      	mov	r3, r1
 800583a:	4640      	mov	r0, r8
 800583c:	4649      	mov	r1, r9
 800583e:	f7fa fcd1 	bl	80001e4 <__adddf3>
 8005842:	9c04      	ldr	r4, [sp, #16]
 8005844:	a33e      	add	r3, pc, #248	; (adr r3, 8005940 <__ieee754_pow+0x720>)
 8005846:	e9d3 2300 	ldrd	r2, r3, [r3]
 800584a:	4620      	mov	r0, r4
 800584c:	460d      	mov	r5, r1
 800584e:	f7fa fe7f 	bl	8000550 <__aeabi_dmul>
 8005852:	4642      	mov	r2, r8
 8005854:	ec41 0b18 	vmov	d8, r0, r1
 8005858:	464b      	mov	r3, r9
 800585a:	4620      	mov	r0, r4
 800585c:	4629      	mov	r1, r5
 800585e:	f7fa fcbf 	bl	80001e0 <__aeabi_dsub>
 8005862:	4602      	mov	r2, r0
 8005864:	460b      	mov	r3, r1
 8005866:	4630      	mov	r0, r6
 8005868:	4639      	mov	r1, r7
 800586a:	f7fa fcb9 	bl	80001e0 <__aeabi_dsub>
 800586e:	a336      	add	r3, pc, #216	; (adr r3, 8005948 <__ieee754_pow+0x728>)
 8005870:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005874:	f7fa fe6c 	bl	8000550 <__aeabi_dmul>
 8005878:	a335      	add	r3, pc, #212	; (adr r3, 8005950 <__ieee754_pow+0x730>)
 800587a:	e9d3 2300 	ldrd	r2, r3, [r3]
 800587e:	4606      	mov	r6, r0
 8005880:	460f      	mov	r7, r1
 8005882:	4620      	mov	r0, r4
 8005884:	4629      	mov	r1, r5
 8005886:	f7fa fe63 	bl	8000550 <__aeabi_dmul>
 800588a:	4602      	mov	r2, r0
 800588c:	460b      	mov	r3, r1
 800588e:	4630      	mov	r0, r6
 8005890:	4639      	mov	r1, r7
 8005892:	f7fa fca7 	bl	80001e4 <__adddf3>
 8005896:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 8005898:	4b38      	ldr	r3, [pc, #224]	; (800597c <__ieee754_pow+0x75c>)
 800589a:	4413      	add	r3, r2
 800589c:	e9d3 2300 	ldrd	r2, r3, [r3]
 80058a0:	f7fa fca0 	bl	80001e4 <__adddf3>
 80058a4:	4682      	mov	sl, r0
 80058a6:	9809      	ldr	r0, [sp, #36]	; 0x24
 80058a8:	468b      	mov	fp, r1
 80058aa:	f7fa fde7 	bl	800047c <__aeabi_i2d>
 80058ae:	9a0b      	ldr	r2, [sp, #44]	; 0x2c
 80058b0:	4b33      	ldr	r3, [pc, #204]	; (8005980 <__ieee754_pow+0x760>)
 80058b2:	4413      	add	r3, r2
 80058b4:	e9d3 8900 	ldrd	r8, r9, [r3]
 80058b8:	4606      	mov	r6, r0
 80058ba:	460f      	mov	r7, r1
 80058bc:	4652      	mov	r2, sl
 80058be:	465b      	mov	r3, fp
 80058c0:	ec51 0b18 	vmov	r0, r1, d8
 80058c4:	f7fa fc8e 	bl	80001e4 <__adddf3>
 80058c8:	4642      	mov	r2, r8
 80058ca:	464b      	mov	r3, r9
 80058cc:	f7fa fc8a 	bl	80001e4 <__adddf3>
 80058d0:	4632      	mov	r2, r6
 80058d2:	463b      	mov	r3, r7
 80058d4:	f7fa fc86 	bl	80001e4 <__adddf3>
 80058d8:	9c04      	ldr	r4, [sp, #16]
 80058da:	4632      	mov	r2, r6
 80058dc:	463b      	mov	r3, r7
 80058de:	4620      	mov	r0, r4
 80058e0:	460d      	mov	r5, r1
 80058e2:	f7fa fc7d 	bl	80001e0 <__aeabi_dsub>
 80058e6:	4642      	mov	r2, r8
 80058e8:	464b      	mov	r3, r9
 80058ea:	f7fa fc79 	bl	80001e0 <__aeabi_dsub>
 80058ee:	ec53 2b18 	vmov	r2, r3, d8
 80058f2:	f7fa fc75 	bl	80001e0 <__aeabi_dsub>
 80058f6:	4602      	mov	r2, r0
 80058f8:	460b      	mov	r3, r1
 80058fa:	4650      	mov	r0, sl
 80058fc:	4659      	mov	r1, fp
 80058fe:	e606      	b.n	800550e <__ieee754_pow+0x2ee>
 8005900:	2401      	movs	r4, #1
 8005902:	e6a0      	b.n	8005646 <__ieee754_pow+0x426>
 8005904:	ed9f 7b14 	vldr	d7, [pc, #80]	; 8005958 <__ieee754_pow+0x738>
 8005908:	e60d      	b.n	8005526 <__ieee754_pow+0x306>
 800590a:	bf00      	nop
 800590c:	f3af 8000 	nop.w
 8005910:	4a454eef 	.word	0x4a454eef
 8005914:	3fca7e28 	.word	0x3fca7e28
 8005918:	93c9db65 	.word	0x93c9db65
 800591c:	3fcd864a 	.word	0x3fcd864a
 8005920:	a91d4101 	.word	0xa91d4101
 8005924:	3fd17460 	.word	0x3fd17460
 8005928:	518f264d 	.word	0x518f264d
 800592c:	3fd55555 	.word	0x3fd55555
 8005930:	db6fabff 	.word	0xdb6fabff
 8005934:	3fdb6db6 	.word	0x3fdb6db6
 8005938:	33333303 	.word	0x33333303
 800593c:	3fe33333 	.word	0x3fe33333
 8005940:	e0000000 	.word	0xe0000000
 8005944:	3feec709 	.word	0x3feec709
 8005948:	dc3a03fd 	.word	0xdc3a03fd
 800594c:	3feec709 	.word	0x3feec709
 8005950:	145b01f5 	.word	0x145b01f5
 8005954:	be3e2fe0 	.word	0xbe3e2fe0
 8005958:	00000000 	.word	0x00000000
 800595c:	3ff00000 	.word	0x3ff00000
 8005960:	7ff00000 	.word	0x7ff00000
 8005964:	43400000 	.word	0x43400000
 8005968:	0003988e 	.word	0x0003988e
 800596c:	000bb679 	.word	0x000bb679
 8005970:	08006068 	.word	0x08006068
 8005974:	3ff00000 	.word	0x3ff00000
 8005978:	40080000 	.word	0x40080000
 800597c:	08006088 	.word	0x08006088
 8005980:	08006078 	.word	0x08006078
 8005984:	a3b5      	add	r3, pc, #724	; (adr r3, 8005c5c <__ieee754_pow+0xa3c>)
 8005986:	e9d3 2300 	ldrd	r2, r3, [r3]
 800598a:	4640      	mov	r0, r8
 800598c:	4649      	mov	r1, r9
 800598e:	f7fa fc29 	bl	80001e4 <__adddf3>
 8005992:	4622      	mov	r2, r4
 8005994:	ec41 0b1a 	vmov	d10, r0, r1
 8005998:	462b      	mov	r3, r5
 800599a:	4630      	mov	r0, r6
 800599c:	4639      	mov	r1, r7
 800599e:	f7fa fc1f 	bl	80001e0 <__aeabi_dsub>
 80059a2:	4602      	mov	r2, r0
 80059a4:	460b      	mov	r3, r1
 80059a6:	ec51 0b1a 	vmov	r0, r1, d10
 80059aa:	f7fb f861 	bl	8000a70 <__aeabi_dcmpgt>
 80059ae:	2800      	cmp	r0, #0
 80059b0:	f47f adf8 	bne.w	80055a4 <__ieee754_pow+0x384>
 80059b4:	4aa4      	ldr	r2, [pc, #656]	; (8005c48 <__ieee754_pow+0xa28>)
 80059b6:	f02b 4300 	bic.w	r3, fp, #2147483648	; 0x80000000
 80059ba:	4293      	cmp	r3, r2
 80059bc:	f340 810b 	ble.w	8005bd6 <__ieee754_pow+0x9b6>
 80059c0:	151b      	asrs	r3, r3, #20
 80059c2:	f44f 1a80 	mov.w	sl, #1048576	; 0x100000
 80059c6:	f2a3 33fe 	subw	r3, r3, #1022	; 0x3fe
 80059ca:	fa4a f303 	asr.w	r3, sl, r3
 80059ce:	445b      	add	r3, fp
 80059d0:	f3c3 520a 	ubfx	r2, r3, #20, #11
 80059d4:	4e9d      	ldr	r6, [pc, #628]	; (8005c4c <__ieee754_pow+0xa2c>)
 80059d6:	f2a2 32ff 	subw	r2, r2, #1023	; 0x3ff
 80059da:	4116      	asrs	r6, r2
 80059dc:	f3c3 0a13 	ubfx	sl, r3, #0, #20
 80059e0:	2000      	movs	r0, #0
 80059e2:	ea23 0106 	bic.w	r1, r3, r6
 80059e6:	f1c2 0214 	rsb	r2, r2, #20
 80059ea:	f44a 1a80 	orr.w	sl, sl, #1048576	; 0x100000
 80059ee:	fa4a fa02 	asr.w	sl, sl, r2
 80059f2:	f1bb 0f00 	cmp.w	fp, #0
 80059f6:	4602      	mov	r2, r0
 80059f8:	460b      	mov	r3, r1
 80059fa:	4620      	mov	r0, r4
 80059fc:	4629      	mov	r1, r5
 80059fe:	bfb8      	it	lt
 8005a00:	f1ca 0a00 	rsblt	sl, sl, #0
 8005a04:	f7fa fbec 	bl	80001e0 <__aeabi_dsub>
 8005a08:	ec41 0b19 	vmov	d9, r0, r1
 8005a0c:	4642      	mov	r2, r8
 8005a0e:	464b      	mov	r3, r9
 8005a10:	ec51 0b19 	vmov	r0, r1, d9
 8005a14:	f7fa fbe6 	bl	80001e4 <__adddf3>
 8005a18:	2400      	movs	r4, #0
 8005a1a:	a379      	add	r3, pc, #484	; (adr r3, 8005c00 <__ieee754_pow+0x9e0>)
 8005a1c:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a20:	4620      	mov	r0, r4
 8005a22:	460d      	mov	r5, r1
 8005a24:	f7fa fd94 	bl	8000550 <__aeabi_dmul>
 8005a28:	ec53 2b19 	vmov	r2, r3, d9
 8005a2c:	4606      	mov	r6, r0
 8005a2e:	460f      	mov	r7, r1
 8005a30:	4620      	mov	r0, r4
 8005a32:	4629      	mov	r1, r5
 8005a34:	f7fa fbd4 	bl	80001e0 <__aeabi_dsub>
 8005a38:	4602      	mov	r2, r0
 8005a3a:	460b      	mov	r3, r1
 8005a3c:	4640      	mov	r0, r8
 8005a3e:	4649      	mov	r1, r9
 8005a40:	f7fa fbce 	bl	80001e0 <__aeabi_dsub>
 8005a44:	a370      	add	r3, pc, #448	; (adr r3, 8005c08 <__ieee754_pow+0x9e8>)
 8005a46:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a4a:	f7fa fd81 	bl	8000550 <__aeabi_dmul>
 8005a4e:	a370      	add	r3, pc, #448	; (adr r3, 8005c10 <__ieee754_pow+0x9f0>)
 8005a50:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005a54:	4680      	mov	r8, r0
 8005a56:	4689      	mov	r9, r1
 8005a58:	4620      	mov	r0, r4
 8005a5a:	4629      	mov	r1, r5
 8005a5c:	f7fa fd78 	bl	8000550 <__aeabi_dmul>
 8005a60:	4602      	mov	r2, r0
 8005a62:	460b      	mov	r3, r1
 8005a64:	4640      	mov	r0, r8
 8005a66:	4649      	mov	r1, r9
 8005a68:	f7fa fbbc 	bl	80001e4 <__adddf3>
 8005a6c:	4604      	mov	r4, r0
 8005a6e:	460d      	mov	r5, r1
 8005a70:	4602      	mov	r2, r0
 8005a72:	460b      	mov	r3, r1
 8005a74:	4630      	mov	r0, r6
 8005a76:	4639      	mov	r1, r7
 8005a78:	f7fa fbb4 	bl	80001e4 <__adddf3>
 8005a7c:	4632      	mov	r2, r6
 8005a7e:	463b      	mov	r3, r7
 8005a80:	4680      	mov	r8, r0
 8005a82:	4689      	mov	r9, r1
 8005a84:	f7fa fbac 	bl	80001e0 <__aeabi_dsub>
 8005a88:	4602      	mov	r2, r0
 8005a8a:	460b      	mov	r3, r1
 8005a8c:	4620      	mov	r0, r4
 8005a8e:	4629      	mov	r1, r5
 8005a90:	f7fa fba6 	bl	80001e0 <__aeabi_dsub>
 8005a94:	4642      	mov	r2, r8
 8005a96:	4606      	mov	r6, r0
 8005a98:	460f      	mov	r7, r1
 8005a9a:	464b      	mov	r3, r9
 8005a9c:	4640      	mov	r0, r8
 8005a9e:	4649      	mov	r1, r9
 8005aa0:	f7fa fd56 	bl	8000550 <__aeabi_dmul>
 8005aa4:	a35c      	add	r3, pc, #368	; (adr r3, 8005c18 <__ieee754_pow+0x9f8>)
 8005aa6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aaa:	4604      	mov	r4, r0
 8005aac:	460d      	mov	r5, r1
 8005aae:	f7fa fd4f 	bl	8000550 <__aeabi_dmul>
 8005ab2:	a35b      	add	r3, pc, #364	; (adr r3, 8005c20 <__ieee754_pow+0xa00>)
 8005ab4:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005ab8:	f7fa fb92 	bl	80001e0 <__aeabi_dsub>
 8005abc:	4622      	mov	r2, r4
 8005abe:	462b      	mov	r3, r5
 8005ac0:	f7fa fd46 	bl	8000550 <__aeabi_dmul>
 8005ac4:	a358      	add	r3, pc, #352	; (adr r3, 8005c28 <__ieee754_pow+0xa08>)
 8005ac6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aca:	f7fa fb8b 	bl	80001e4 <__adddf3>
 8005ace:	4622      	mov	r2, r4
 8005ad0:	462b      	mov	r3, r5
 8005ad2:	f7fa fd3d 	bl	8000550 <__aeabi_dmul>
 8005ad6:	a356      	add	r3, pc, #344	; (adr r3, 8005c30 <__ieee754_pow+0xa10>)
 8005ad8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005adc:	f7fa fb80 	bl	80001e0 <__aeabi_dsub>
 8005ae0:	4622      	mov	r2, r4
 8005ae2:	462b      	mov	r3, r5
 8005ae4:	f7fa fd34 	bl	8000550 <__aeabi_dmul>
 8005ae8:	a353      	add	r3, pc, #332	; (adr r3, 8005c38 <__ieee754_pow+0xa18>)
 8005aea:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005aee:	f7fa fb79 	bl	80001e4 <__adddf3>
 8005af2:	4622      	mov	r2, r4
 8005af4:	462b      	mov	r3, r5
 8005af6:	f7fa fd2b 	bl	8000550 <__aeabi_dmul>
 8005afa:	4602      	mov	r2, r0
 8005afc:	460b      	mov	r3, r1
 8005afe:	4640      	mov	r0, r8
 8005b00:	4649      	mov	r1, r9
 8005b02:	f7fa fb6d 	bl	80001e0 <__aeabi_dsub>
 8005b06:	4604      	mov	r4, r0
 8005b08:	460d      	mov	r5, r1
 8005b0a:	4602      	mov	r2, r0
 8005b0c:	460b      	mov	r3, r1
 8005b0e:	4640      	mov	r0, r8
 8005b10:	4649      	mov	r1, r9
 8005b12:	f7fa fd1d 	bl	8000550 <__aeabi_dmul>
 8005b16:	2200      	movs	r2, #0
 8005b18:	ec41 0b19 	vmov	d9, r0, r1
 8005b1c:	f04f 4380 	mov.w	r3, #1073741824	; 0x40000000
 8005b20:	4620      	mov	r0, r4
 8005b22:	4629      	mov	r1, r5
 8005b24:	f7fa fb5c 	bl	80001e0 <__aeabi_dsub>
 8005b28:	4602      	mov	r2, r0
 8005b2a:	460b      	mov	r3, r1
 8005b2c:	ec51 0b19 	vmov	r0, r1, d9
 8005b30:	f7fa fe38 	bl	80007a4 <__aeabi_ddiv>
 8005b34:	4632      	mov	r2, r6
 8005b36:	4604      	mov	r4, r0
 8005b38:	460d      	mov	r5, r1
 8005b3a:	463b      	mov	r3, r7
 8005b3c:	4640      	mov	r0, r8
 8005b3e:	4649      	mov	r1, r9
 8005b40:	f7fa fd06 	bl	8000550 <__aeabi_dmul>
 8005b44:	4632      	mov	r2, r6
 8005b46:	463b      	mov	r3, r7
 8005b48:	f7fa fb4c 	bl	80001e4 <__adddf3>
 8005b4c:	4602      	mov	r2, r0
 8005b4e:	460b      	mov	r3, r1
 8005b50:	4620      	mov	r0, r4
 8005b52:	4629      	mov	r1, r5
 8005b54:	f7fa fb44 	bl	80001e0 <__aeabi_dsub>
 8005b58:	4642      	mov	r2, r8
 8005b5a:	464b      	mov	r3, r9
 8005b5c:	f7fa fb40 	bl	80001e0 <__aeabi_dsub>
 8005b60:	460b      	mov	r3, r1
 8005b62:	4602      	mov	r2, r0
 8005b64:	493a      	ldr	r1, [pc, #232]	; (8005c50 <__ieee754_pow+0xa30>)
 8005b66:	2000      	movs	r0, #0
 8005b68:	f7fa fb3a 	bl	80001e0 <__aeabi_dsub>
 8005b6c:	e9cd 0100 	strd	r0, r1, [sp]
 8005b70:	9b01      	ldr	r3, [sp, #4]
 8005b72:	eb03 530a 	add.w	r3, r3, sl, lsl #20
 8005b76:	f5b3 1f80 	cmp.w	r3, #1048576	; 0x100000
 8005b7a:	da2f      	bge.n	8005bdc <__ieee754_pow+0x9bc>
 8005b7c:	4650      	mov	r0, sl
 8005b7e:	ed9d 0b00 	vldr	d0, [sp]
 8005b82:	f000 f9cd 	bl	8005f20 <scalbn>
 8005b86:	ec51 0b10 	vmov	r0, r1, d0
 8005b8a:	ec53 2b18 	vmov	r2, r3, d8
 8005b8e:	f7ff bbe0 	b.w	8005352 <__ieee754_pow+0x132>
 8005b92:	4b30      	ldr	r3, [pc, #192]	; (8005c54 <__ieee754_pow+0xa34>)
 8005b94:	f021 4600 	bic.w	r6, r1, #2147483648	; 0x80000000
 8005b98:	429e      	cmp	r6, r3
 8005b9a:	f77f af0b 	ble.w	80059b4 <__ieee754_pow+0x794>
 8005b9e:	4b2e      	ldr	r3, [pc, #184]	; (8005c58 <__ieee754_pow+0xa38>)
 8005ba0:	440b      	add	r3, r1
 8005ba2:	4303      	orrs	r3, r0
 8005ba4:	d00b      	beq.n	8005bbe <__ieee754_pow+0x99e>
 8005ba6:	a326      	add	r3, pc, #152	; (adr r3, 8005c40 <__ieee754_pow+0xa20>)
 8005ba8:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bac:	ec51 0b18 	vmov	r0, r1, d8
 8005bb0:	f7fa fcce 	bl	8000550 <__aeabi_dmul>
 8005bb4:	a322      	add	r3, pc, #136	; (adr r3, 8005c40 <__ieee754_pow+0xa20>)
 8005bb6:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005bba:	f7ff bbca 	b.w	8005352 <__ieee754_pow+0x132>
 8005bbe:	4622      	mov	r2, r4
 8005bc0:	462b      	mov	r3, r5
 8005bc2:	f7fa fb0d 	bl	80001e0 <__aeabi_dsub>
 8005bc6:	4642      	mov	r2, r8
 8005bc8:	464b      	mov	r3, r9
 8005bca:	f7fa ff47 	bl	8000a5c <__aeabi_dcmpge>
 8005bce:	2800      	cmp	r0, #0
 8005bd0:	f43f aef0 	beq.w	80059b4 <__ieee754_pow+0x794>
 8005bd4:	e7e7      	b.n	8005ba6 <__ieee754_pow+0x986>
 8005bd6:	f04f 0a00 	mov.w	sl, #0
 8005bda:	e717      	b.n	8005a0c <__ieee754_pow+0x7ec>
 8005bdc:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005be0:	4619      	mov	r1, r3
 8005be2:	e7d2      	b.n	8005b8a <__ieee754_pow+0x96a>
 8005be4:	491a      	ldr	r1, [pc, #104]	; (8005c50 <__ieee754_pow+0xa30>)
 8005be6:	2000      	movs	r0, #0
 8005be8:	f7ff bb9e 	b.w	8005328 <__ieee754_pow+0x108>
 8005bec:	e9dd 0102 	ldrd	r0, r1, [sp, #8]
 8005bf0:	f7ff bb9a 	b.w	8005328 <__ieee754_pow+0x108>
 8005bf4:	9000      	str	r0, [sp, #0]
 8005bf6:	f7ff bb76 	b.w	80052e6 <__ieee754_pow+0xc6>
 8005bfa:	2100      	movs	r1, #0
 8005bfc:	f7ff bb60 	b.w	80052c0 <__ieee754_pow+0xa0>
 8005c00:	00000000 	.word	0x00000000
 8005c04:	3fe62e43 	.word	0x3fe62e43
 8005c08:	fefa39ef 	.word	0xfefa39ef
 8005c0c:	3fe62e42 	.word	0x3fe62e42
 8005c10:	0ca86c39 	.word	0x0ca86c39
 8005c14:	be205c61 	.word	0xbe205c61
 8005c18:	72bea4d0 	.word	0x72bea4d0
 8005c1c:	3e663769 	.word	0x3e663769
 8005c20:	c5d26bf1 	.word	0xc5d26bf1
 8005c24:	3ebbbd41 	.word	0x3ebbbd41
 8005c28:	af25de2c 	.word	0xaf25de2c
 8005c2c:	3f11566a 	.word	0x3f11566a
 8005c30:	16bebd93 	.word	0x16bebd93
 8005c34:	3f66c16c 	.word	0x3f66c16c
 8005c38:	5555553e 	.word	0x5555553e
 8005c3c:	3fc55555 	.word	0x3fc55555
 8005c40:	c2f8f359 	.word	0xc2f8f359
 8005c44:	01a56e1f 	.word	0x01a56e1f
 8005c48:	3fe00000 	.word	0x3fe00000
 8005c4c:	000fffff 	.word	0x000fffff
 8005c50:	3ff00000 	.word	0x3ff00000
 8005c54:	4090cbff 	.word	0x4090cbff
 8005c58:	3f6f3400 	.word	0x3f6f3400
 8005c5c:	652b82fe 	.word	0x652b82fe
 8005c60:	3c971547 	.word	0x3c971547

08005c64 <__ieee754_sqrt>:
 8005c64:	e92d 41f0 	stmdb	sp!, {r4, r5, r6, r7, r8, lr}
 8005c68:	ec55 4b10 	vmov	r4, r5, d0
 8005c6c:	4e56      	ldr	r6, [pc, #344]	; (8005dc8 <__ieee754_sqrt+0x164>)
 8005c6e:	43ae      	bics	r6, r5
 8005c70:	ee10 0a10 	vmov	r0, s0
 8005c74:	ee10 3a10 	vmov	r3, s0
 8005c78:	4629      	mov	r1, r5
 8005c7a:	462a      	mov	r2, r5
 8005c7c:	d110      	bne.n	8005ca0 <__ieee754_sqrt+0x3c>
 8005c7e:	ee10 2a10 	vmov	r2, s0
 8005c82:	462b      	mov	r3, r5
 8005c84:	f7fa fc64 	bl	8000550 <__aeabi_dmul>
 8005c88:	4602      	mov	r2, r0
 8005c8a:	460b      	mov	r3, r1
 8005c8c:	4620      	mov	r0, r4
 8005c8e:	4629      	mov	r1, r5
 8005c90:	f7fa faa8 	bl	80001e4 <__adddf3>
 8005c94:	4604      	mov	r4, r0
 8005c96:	460d      	mov	r5, r1
 8005c98:	ec45 4b10 	vmov	d0, r4, r5
 8005c9c:	e8bd 81f0 	ldmia.w	sp!, {r4, r5, r6, r7, r8, pc}
 8005ca0:	2d00      	cmp	r5, #0
 8005ca2:	dc10      	bgt.n	8005cc6 <__ieee754_sqrt+0x62>
 8005ca4:	f025 4600 	bic.w	r6, r5, #2147483648	; 0x80000000
 8005ca8:	4330      	orrs	r0, r6
 8005caa:	d0f5      	beq.n	8005c98 <__ieee754_sqrt+0x34>
 8005cac:	b15d      	cbz	r5, 8005cc6 <__ieee754_sqrt+0x62>
 8005cae:	ee10 2a10 	vmov	r2, s0
 8005cb2:	462b      	mov	r3, r5
 8005cb4:	ee10 0a10 	vmov	r0, s0
 8005cb8:	f7fa fa92 	bl	80001e0 <__aeabi_dsub>
 8005cbc:	4602      	mov	r2, r0
 8005cbe:	460b      	mov	r3, r1
 8005cc0:	f7fa fd70 	bl	80007a4 <__aeabi_ddiv>
 8005cc4:	e7e6      	b.n	8005c94 <__ieee754_sqrt+0x30>
 8005cc6:	1509      	asrs	r1, r1, #20
 8005cc8:	d076      	beq.n	8005db8 <__ieee754_sqrt+0x154>
 8005cca:	f3c2 0213 	ubfx	r2, r2, #0, #20
 8005cce:	07ce      	lsls	r6, r1, #31
 8005cd0:	f442 1080 	orr.w	r0, r2, #1048576	; 0x100000
 8005cd4:	bf5e      	ittt	pl
 8005cd6:	0fda      	lsrpl	r2, r3, #31
 8005cd8:	005b      	lslpl	r3, r3, #1
 8005cda:	eb02 0040 	addpl.w	r0, r2, r0, lsl #1
 8005cde:	0fda      	lsrs	r2, r3, #31
 8005ce0:	f2a1 35ff 	subw	r5, r1, #1023	; 0x3ff
 8005ce4:	eb02 0240 	add.w	r2, r2, r0, lsl #1
 8005ce8:	2000      	movs	r0, #0
 8005cea:	106d      	asrs	r5, r5, #1
 8005cec:	005b      	lsls	r3, r3, #1
 8005cee:	f04f 0e16 	mov.w	lr, #22
 8005cf2:	4684      	mov	ip, r0
 8005cf4:	f44f 1100 	mov.w	r1, #2097152	; 0x200000
 8005cf8:	eb0c 0401 	add.w	r4, ip, r1
 8005cfc:	4294      	cmp	r4, r2
 8005cfe:	bfde      	ittt	le
 8005d00:	1b12      	suble	r2, r2, r4
 8005d02:	eb04 0c01 	addle.w	ip, r4, r1
 8005d06:	1840      	addle	r0, r0, r1
 8005d08:	0052      	lsls	r2, r2, #1
 8005d0a:	f1be 0e01 	subs.w	lr, lr, #1
 8005d0e:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005d12:	ea4f 0151 	mov.w	r1, r1, lsr #1
 8005d16:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d1a:	d1ed      	bne.n	8005cf8 <__ieee754_sqrt+0x94>
 8005d1c:	4671      	mov	r1, lr
 8005d1e:	2720      	movs	r7, #32
 8005d20:	f04f 4400 	mov.w	r4, #2147483648	; 0x80000000
 8005d24:	4562      	cmp	r2, ip
 8005d26:	eb04 060e 	add.w	r6, r4, lr
 8005d2a:	dc02      	bgt.n	8005d32 <__ieee754_sqrt+0xce>
 8005d2c:	d113      	bne.n	8005d56 <__ieee754_sqrt+0xf2>
 8005d2e:	429e      	cmp	r6, r3
 8005d30:	d811      	bhi.n	8005d56 <__ieee754_sqrt+0xf2>
 8005d32:	2e00      	cmp	r6, #0
 8005d34:	eb06 0e04 	add.w	lr, r6, r4
 8005d38:	da43      	bge.n	8005dc2 <__ieee754_sqrt+0x15e>
 8005d3a:	f1be 0f00 	cmp.w	lr, #0
 8005d3e:	db40      	blt.n	8005dc2 <__ieee754_sqrt+0x15e>
 8005d40:	f10c 0801 	add.w	r8, ip, #1
 8005d44:	eba2 020c 	sub.w	r2, r2, ip
 8005d48:	429e      	cmp	r6, r3
 8005d4a:	bf88      	it	hi
 8005d4c:	f102 32ff 	addhi.w	r2, r2, #4294967295
 8005d50:	1b9b      	subs	r3, r3, r6
 8005d52:	4421      	add	r1, r4
 8005d54:	46c4      	mov	ip, r8
 8005d56:	0052      	lsls	r2, r2, #1
 8005d58:	3f01      	subs	r7, #1
 8005d5a:	eb02 72d3 	add.w	r2, r2, r3, lsr #31
 8005d5e:	ea4f 0454 	mov.w	r4, r4, lsr #1
 8005d62:	ea4f 0343 	mov.w	r3, r3, lsl #1
 8005d66:	d1dd      	bne.n	8005d24 <__ieee754_sqrt+0xc0>
 8005d68:	4313      	orrs	r3, r2
 8005d6a:	d006      	beq.n	8005d7a <__ieee754_sqrt+0x116>
 8005d6c:	1c4c      	adds	r4, r1, #1
 8005d6e:	bf13      	iteet	ne
 8005d70:	3101      	addne	r1, #1
 8005d72:	3001      	addeq	r0, #1
 8005d74:	4639      	moveq	r1, r7
 8005d76:	f021 0101 	bicne.w	r1, r1, #1
 8005d7a:	1043      	asrs	r3, r0, #1
 8005d7c:	f103 537f 	add.w	r3, r3, #1069547520	; 0x3fc00000
 8005d80:	0849      	lsrs	r1, r1, #1
 8005d82:	f503 1300 	add.w	r3, r3, #2097152	; 0x200000
 8005d86:	07c2      	lsls	r2, r0, #31
 8005d88:	bf48      	it	mi
 8005d8a:	f041 4100 	orrmi.w	r1, r1, #2147483648	; 0x80000000
 8005d8e:	eb03 5705 	add.w	r7, r3, r5, lsl #20
 8005d92:	460c      	mov	r4, r1
 8005d94:	463d      	mov	r5, r7
 8005d96:	e77f      	b.n	8005c98 <__ieee754_sqrt+0x34>
 8005d98:	0ada      	lsrs	r2, r3, #11
 8005d9a:	3815      	subs	r0, #21
 8005d9c:	055b      	lsls	r3, r3, #21
 8005d9e:	2a00      	cmp	r2, #0
 8005da0:	d0fa      	beq.n	8005d98 <__ieee754_sqrt+0x134>
 8005da2:	02d7      	lsls	r7, r2, #11
 8005da4:	d50a      	bpl.n	8005dbc <__ieee754_sqrt+0x158>
 8005da6:	f1c1 0420 	rsb	r4, r1, #32
 8005daa:	fa23 f404 	lsr.w	r4, r3, r4
 8005dae:	1e4d      	subs	r5, r1, #1
 8005db0:	408b      	lsls	r3, r1
 8005db2:	4322      	orrs	r2, r4
 8005db4:	1b41      	subs	r1, r0, r5
 8005db6:	e788      	b.n	8005cca <__ieee754_sqrt+0x66>
 8005db8:	4608      	mov	r0, r1
 8005dba:	e7f0      	b.n	8005d9e <__ieee754_sqrt+0x13a>
 8005dbc:	0052      	lsls	r2, r2, #1
 8005dbe:	3101      	adds	r1, #1
 8005dc0:	e7ef      	b.n	8005da2 <__ieee754_sqrt+0x13e>
 8005dc2:	46e0      	mov	r8, ip
 8005dc4:	e7be      	b.n	8005d44 <__ieee754_sqrt+0xe0>
 8005dc6:	bf00      	nop
 8005dc8:	7ff00000 	.word	0x7ff00000

08005dcc <fabs>:
 8005dcc:	ec51 0b10 	vmov	r0, r1, d0
 8005dd0:	ee10 2a10 	vmov	r2, s0
 8005dd4:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005dd8:	ec43 2b10 	vmov	d0, r2, r3
 8005ddc:	4770      	bx	lr

08005dde <finite>:
 8005dde:	b082      	sub	sp, #8
 8005de0:	ed8d 0b00 	vstr	d0, [sp]
 8005de4:	9801      	ldr	r0, [sp, #4]
 8005de6:	f040 4000 	orr.w	r0, r0, #2147483648	; 0x80000000
 8005dea:	f500 1080 	add.w	r0, r0, #1048576	; 0x100000
 8005dee:	0fc0      	lsrs	r0, r0, #31
 8005df0:	b002      	add	sp, #8
 8005df2:	4770      	bx	lr
 8005df4:	0000      	movs	r0, r0
	...

08005df8 <nan>:
 8005df8:	ed9f 0b01 	vldr	d0, [pc, #4]	; 8005e00 <nan+0x8>
 8005dfc:	4770      	bx	lr
 8005dfe:	bf00      	nop
 8005e00:	00000000 	.word	0x00000000
 8005e04:	7ff80000 	.word	0x7ff80000

08005e08 <rint>:
 8005e08:	b5f7      	push	{r0, r1, r2, r4, r5, r6, r7, lr}
 8005e0a:	ec51 0b10 	vmov	r0, r1, d0
 8005e0e:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005e12:	f2a2 36ff 	subw	r6, r2, #1023	; 0x3ff
 8005e16:	2e13      	cmp	r6, #19
 8005e18:	ee10 4a10 	vmov	r4, s0
 8005e1c:	460b      	mov	r3, r1
 8005e1e:	ea4f 75d1 	mov.w	r5, r1, lsr #31
 8005e22:	dc58      	bgt.n	8005ed6 <rint+0xce>
 8005e24:	2e00      	cmp	r6, #0
 8005e26:	da2b      	bge.n	8005e80 <rint+0x78>
 8005e28:	f021 4200 	bic.w	r2, r1, #2147483648	; 0x80000000
 8005e2c:	4302      	orrs	r2, r0
 8005e2e:	d023      	beq.n	8005e78 <rint+0x70>
 8005e30:	f3c1 0213 	ubfx	r2, r1, #0, #20
 8005e34:	4302      	orrs	r2, r0
 8005e36:	4254      	negs	r4, r2
 8005e38:	4314      	orrs	r4, r2
 8005e3a:	0c4b      	lsrs	r3, r1, #17
 8005e3c:	0b24      	lsrs	r4, r4, #12
 8005e3e:	045b      	lsls	r3, r3, #17
 8005e40:	f404 2400 	and.w	r4, r4, #524288	; 0x80000
 8005e44:	ea44 0103 	orr.w	r1, r4, r3
 8005e48:	4b32      	ldr	r3, [pc, #200]	; (8005f14 <rint+0x10c>)
 8005e4a:	eb03 03c5 	add.w	r3, r3, r5, lsl #3
 8005e4e:	e9d3 6700 	ldrd	r6, r7, [r3]
 8005e52:	4602      	mov	r2, r0
 8005e54:	460b      	mov	r3, r1
 8005e56:	4630      	mov	r0, r6
 8005e58:	4639      	mov	r1, r7
 8005e5a:	f7fa f9c3 	bl	80001e4 <__adddf3>
 8005e5e:	e9cd 0100 	strd	r0, r1, [sp]
 8005e62:	463b      	mov	r3, r7
 8005e64:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005e68:	4632      	mov	r2, r6
 8005e6a:	f7fa f9b9 	bl	80001e0 <__aeabi_dsub>
 8005e6e:	f021 4300 	bic.w	r3, r1, #2147483648	; 0x80000000
 8005e72:	ea43 77c5 	orr.w	r7, r3, r5, lsl #31
 8005e76:	4639      	mov	r1, r7
 8005e78:	ec41 0b10 	vmov	d0, r0, r1
 8005e7c:	b003      	add	sp, #12
 8005e7e:	bdf0      	pop	{r4, r5, r6, r7, pc}
 8005e80:	4a25      	ldr	r2, [pc, #148]	; (8005f18 <rint+0x110>)
 8005e82:	4132      	asrs	r2, r6
 8005e84:	ea01 0702 	and.w	r7, r1, r2
 8005e88:	4307      	orrs	r7, r0
 8005e8a:	d0f5      	beq.n	8005e78 <rint+0x70>
 8005e8c:	0851      	lsrs	r1, r2, #1
 8005e8e:	ea03 0252 	and.w	r2, r3, r2, lsr #1
 8005e92:	4314      	orrs	r4, r2
 8005e94:	d00c      	beq.n	8005eb0 <rint+0xa8>
 8005e96:	ea23 0201 	bic.w	r2, r3, r1
 8005e9a:	f44f 2380 	mov.w	r3, #262144	; 0x40000
 8005e9e:	2e13      	cmp	r6, #19
 8005ea0:	fa43 f606 	asr.w	r6, r3, r6
 8005ea4:	bf0c      	ite	eq
 8005ea6:	f04f 4400 	moveq.w	r4, #2147483648	; 0x80000000
 8005eaa:	2400      	movne	r4, #0
 8005eac:	ea42 0306 	orr.w	r3, r2, r6
 8005eb0:	4918      	ldr	r1, [pc, #96]	; (8005f14 <rint+0x10c>)
 8005eb2:	eb01 05c5 	add.w	r5, r1, r5, lsl #3
 8005eb6:	4622      	mov	r2, r4
 8005eb8:	e9d5 4500 	ldrd	r4, r5, [r5]
 8005ebc:	4620      	mov	r0, r4
 8005ebe:	4629      	mov	r1, r5
 8005ec0:	f7fa f990 	bl	80001e4 <__adddf3>
 8005ec4:	e9cd 0100 	strd	r0, r1, [sp]
 8005ec8:	e9dd 0100 	ldrd	r0, r1, [sp]
 8005ecc:	4622      	mov	r2, r4
 8005ece:	462b      	mov	r3, r5
 8005ed0:	f7fa f986 	bl	80001e0 <__aeabi_dsub>
 8005ed4:	e7d0      	b.n	8005e78 <rint+0x70>
 8005ed6:	2e33      	cmp	r6, #51	; 0x33
 8005ed8:	dd07      	ble.n	8005eea <rint+0xe2>
 8005eda:	f5b6 6f80 	cmp.w	r6, #1024	; 0x400
 8005ede:	d1cb      	bne.n	8005e78 <rint+0x70>
 8005ee0:	ee10 2a10 	vmov	r2, s0
 8005ee4:	f7fa f97e 	bl	80001e4 <__adddf3>
 8005ee8:	e7c6      	b.n	8005e78 <rint+0x70>
 8005eea:	f2a2 4213 	subw	r2, r2, #1043	; 0x413
 8005eee:	f04f 36ff 	mov.w	r6, #4294967295
 8005ef2:	40d6      	lsrs	r6, r2
 8005ef4:	4230      	tst	r0, r6
 8005ef6:	d0bf      	beq.n	8005e78 <rint+0x70>
 8005ef8:	ea14 0056 	ands.w	r0, r4, r6, lsr #1
 8005efc:	ea4f 0156 	mov.w	r1, r6, lsr #1
 8005f00:	bf1f      	itttt	ne
 8005f02:	ea24 0101 	bicne.w	r1, r4, r1
 8005f06:	f04f 4480 	movne.w	r4, #1073741824	; 0x40000000
 8005f0a:	fa44 f202 	asrne.w	r2, r4, r2
 8005f0e:	ea41 0402 	orrne.w	r4, r1, r2
 8005f12:	e7cd      	b.n	8005eb0 <rint+0xa8>
 8005f14:	08006098 	.word	0x08006098
 8005f18:	000fffff 	.word	0x000fffff
 8005f1c:	00000000 	.word	0x00000000

08005f20 <scalbn>:
 8005f20:	b570      	push	{r4, r5, r6, lr}
 8005f22:	ec55 4b10 	vmov	r4, r5, d0
 8005f26:	f3c5 520a 	ubfx	r2, r5, #20, #11
 8005f2a:	4606      	mov	r6, r0
 8005f2c:	462b      	mov	r3, r5
 8005f2e:	b99a      	cbnz	r2, 8005f58 <scalbn+0x38>
 8005f30:	f025 4300 	bic.w	r3, r5, #2147483648	; 0x80000000
 8005f34:	4323      	orrs	r3, r4
 8005f36:	d036      	beq.n	8005fa6 <scalbn+0x86>
 8005f38:	4b39      	ldr	r3, [pc, #228]	; (8006020 <scalbn+0x100>)
 8005f3a:	4629      	mov	r1, r5
 8005f3c:	ee10 0a10 	vmov	r0, s0
 8005f40:	2200      	movs	r2, #0
 8005f42:	f7fa fb05 	bl	8000550 <__aeabi_dmul>
 8005f46:	4b37      	ldr	r3, [pc, #220]	; (8006024 <scalbn+0x104>)
 8005f48:	429e      	cmp	r6, r3
 8005f4a:	4604      	mov	r4, r0
 8005f4c:	460d      	mov	r5, r1
 8005f4e:	da10      	bge.n	8005f72 <scalbn+0x52>
 8005f50:	a32b      	add	r3, pc, #172	; (adr r3, 8006000 <scalbn+0xe0>)
 8005f52:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005f56:	e03a      	b.n	8005fce <scalbn+0xae>
 8005f58:	f240 71ff 	movw	r1, #2047	; 0x7ff
 8005f5c:	428a      	cmp	r2, r1
 8005f5e:	d10c      	bne.n	8005f7a <scalbn+0x5a>
 8005f60:	ee10 2a10 	vmov	r2, s0
 8005f64:	4620      	mov	r0, r4
 8005f66:	4629      	mov	r1, r5
 8005f68:	f7fa f93c 	bl	80001e4 <__adddf3>
 8005f6c:	4604      	mov	r4, r0
 8005f6e:	460d      	mov	r5, r1
 8005f70:	e019      	b.n	8005fa6 <scalbn+0x86>
 8005f72:	f3c1 520a 	ubfx	r2, r1, #20, #11
 8005f76:	460b      	mov	r3, r1
 8005f78:	3a36      	subs	r2, #54	; 0x36
 8005f7a:	4432      	add	r2, r6
 8005f7c:	f240 71fe 	movw	r1, #2046	; 0x7fe
 8005f80:	428a      	cmp	r2, r1
 8005f82:	dd08      	ble.n	8005f96 <scalbn+0x76>
 8005f84:	2d00      	cmp	r5, #0
 8005f86:	a120      	add	r1, pc, #128	; (adr r1, 8006008 <scalbn+0xe8>)
 8005f88:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f8c:	da1c      	bge.n	8005fc8 <scalbn+0xa8>
 8005f8e:	a120      	add	r1, pc, #128	; (adr r1, 8006010 <scalbn+0xf0>)
 8005f90:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005f94:	e018      	b.n	8005fc8 <scalbn+0xa8>
 8005f96:	2a00      	cmp	r2, #0
 8005f98:	dd08      	ble.n	8005fac <scalbn+0x8c>
 8005f9a:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005f9e:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005fa2:	ea43 5502 	orr.w	r5, r3, r2, lsl #20
 8005fa6:	ec45 4b10 	vmov	d0, r4, r5
 8005faa:	bd70      	pop	{r4, r5, r6, pc}
 8005fac:	f112 0f35 	cmn.w	r2, #53	; 0x35
 8005fb0:	da19      	bge.n	8005fe6 <scalbn+0xc6>
 8005fb2:	f24c 3350 	movw	r3, #50000	; 0xc350
 8005fb6:	429e      	cmp	r6, r3
 8005fb8:	f005 4300 	and.w	r3, r5, #2147483648	; 0x80000000
 8005fbc:	dd0a      	ble.n	8005fd4 <scalbn+0xb4>
 8005fbe:	a112      	add	r1, pc, #72	; (adr r1, 8006008 <scalbn+0xe8>)
 8005fc0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fc4:	2b00      	cmp	r3, #0
 8005fc6:	d1e2      	bne.n	8005f8e <scalbn+0x6e>
 8005fc8:	a30f      	add	r3, pc, #60	; (adr r3, 8006008 <scalbn+0xe8>)
 8005fca:	e9d3 2300 	ldrd	r2, r3, [r3]
 8005fce:	f7fa fabf 	bl	8000550 <__aeabi_dmul>
 8005fd2:	e7cb      	b.n	8005f6c <scalbn+0x4c>
 8005fd4:	a10a      	add	r1, pc, #40	; (adr r1, 8006000 <scalbn+0xe0>)
 8005fd6:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fda:	2b00      	cmp	r3, #0
 8005fdc:	d0b8      	beq.n	8005f50 <scalbn+0x30>
 8005fde:	a10e      	add	r1, pc, #56	; (adr r1, 8006018 <scalbn+0xf8>)
 8005fe0:	e9d1 0100 	ldrd	r0, r1, [r1]
 8005fe4:	e7b4      	b.n	8005f50 <scalbn+0x30>
 8005fe6:	f023 43ff 	bic.w	r3, r3, #2139095040	; 0x7f800000
 8005fea:	3236      	adds	r2, #54	; 0x36
 8005fec:	f423 03e0 	bic.w	r3, r3, #7340032	; 0x700000
 8005ff0:	ea43 5102 	orr.w	r1, r3, r2, lsl #20
 8005ff4:	4620      	mov	r0, r4
 8005ff6:	4b0c      	ldr	r3, [pc, #48]	; (8006028 <scalbn+0x108>)
 8005ff8:	2200      	movs	r2, #0
 8005ffa:	e7e8      	b.n	8005fce <scalbn+0xae>
 8005ffc:	f3af 8000 	nop.w
 8006000:	c2f8f359 	.word	0xc2f8f359
 8006004:	01a56e1f 	.word	0x01a56e1f
 8006008:	8800759c 	.word	0x8800759c
 800600c:	7e37e43c 	.word	0x7e37e43c
 8006010:	8800759c 	.word	0x8800759c
 8006014:	fe37e43c 	.word	0xfe37e43c
 8006018:	c2f8f359 	.word	0xc2f8f359
 800601c:	81a56e1f 	.word	0x81a56e1f
 8006020:	43500000 	.word	0x43500000
 8006024:	ffff3cb0 	.word	0xffff3cb0
 8006028:	3c900000 	.word	0x3c900000

0800602c <_init>:
 800602c:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800602e:	bf00      	nop
 8006030:	bcf8      	pop	{r3, r4, r5, r6, r7}
 8006032:	bc08      	pop	{r3}
 8006034:	469e      	mov	lr, r3
 8006036:	4770      	bx	lr

08006038 <_fini>:
 8006038:	b5f8      	push	{r3, r4, r5, r6, r7, lr}
 800603a:	bf00      	nop
 800603c:	bcf8      	pop	{r3, r4, r5, r6, r7}
 800603e:	bc08      	pop	{r3}
 8006040:	469e      	mov	lr, r3
 8006042:	4770      	bx	lr
